/* This is stub file for gapi.client.privateca-v1beta1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20221006

gapi.load('client', async () => {
    /** now we can use gapi.client */

    await gapi.client.load('https://privateca.googleapis.com/$discovery/rest?version=v1beta1');
    /** now we can use gapi.client.privateca */

    /** don't forget to authenticate your client before sending any request to resources: */
    /** declare client_id registered in Google Developers Console */
    const client_id = '<<PUT YOUR CLIENT ID HERE>>';
    const scope = [
        /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
        'https://www.googleapis.com/auth/cloud-platform',
    ];
    const immediate = false;
    gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
        if (authResult && !authResult.error) {
            /** handle successful authorization */
            run();
        } else {
            /** handle authorization error */
        }
    });

    async function run() {
        /** Gets information about a location. */
        await gapi.client.privateca.projects.locations.get({
            name: "Test string",
        });
        /** Lists information about the supported locations for this service. */
        await gapi.client.privateca.projects.locations.list({
            filter: "Test string",
            name: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /**
         * Activate a CertificateAuthority that is in state PENDING_ACTIVATION and is of type SUBORDINATE. After the parent Certificate Authority signs a certificate signing request from
         * FetchCertificateAuthorityCsr, this method can complete the activation process.
         */
        await gapi.client.privateca.projects.locations.certificateAuthorities.activate({
            name: "Test string",
        }, {
            pemCaCertificate: "Test string",
            requestId: "Test string",
            subordinateConfig: {
                certificateAuthority: "Test string",
                pemIssuerChain: {
                    pemCertificates: [
                        "Test string"
                    ],
                },
            },
        });
        /** Create a new CertificateAuthority in a given Project and Location. */
        await gapi.client.privateca.projects.locations.certificateAuthorities.create({
            certificateAuthorityId: "Test string",
            parent: "Test string",
            requestId: "Test string",
        }, {
            accessUrls: {
                caCertificateAccessUrl: "Test string",
                crlAccessUrl: "Test string",
            },
            caCertificateDescriptions: [
                {
                    aiaIssuingCertificateUrls: [
                        "Test string"
                    ],
                    authorityKeyId: {
                        keyId: "Test string",
                    },
                    certFingerprint: {
                        sha256Hash: "Test string",
                    },
                    configValues: {
                        additionalExtensions: [
                            {
                                critical: true,
                                objectId: {
                                    objectIdPath: [
                                        42
                                    ],
                                },
                                value: "Test string",
                            }
                        ],
                        aiaOcspServers: [
                            "Test string"
                        ],
                        caOptions: {
                            isCa: true,
                            maxIssuerPathLength: 42,
                        },
                        keyUsage: {
                            baseKeyUsage: {
                                certSign: true,
                                contentCommitment: true,
                                crlSign: true,
                                dataEncipherment: true,
                                decipherOnly: true,
                                digitalSignature: true,
                                encipherOnly: true,
                                keyAgreement: true,
                                keyEncipherment: true,
                            },
                            extendedKeyUsage: {
                                clientAuth: true,
                                codeSigning: true,
                                emailProtection: true,
                                ocspSigning: true,
                                serverAuth: true,
                                timeStamping: true,
                            },
                            unknownExtendedKeyUsages: [
                                {
                                    objectIdPath: [
                                        42
                                    ],
                                }
                            ],
                        },
                        policyIds: [
                            {
                                objectIdPath: [
                                    42
                                ],
                            }
                        ],
                    },
                    crlDistributionPoints: [
                        "Test string"
                    ],
                    publicKey: {
                        key: "Test string",
                        type: "Test string",
                    },
                    subjectDescription: {
                        commonName: "Test string",
                        hexSerialNumber: "Test string",
                        lifetime: "Test string",
                        notAfterTime: "Test string",
                        notBeforeTime: "Test string",
                        subject: {
                            countryCode: "Test string",
                            locality: "Test string",
                            organization: "Test string",
                            organizationalUnit: "Test string",
                            postalCode: "Test string",
                            province: "Test string",
                            streetAddress: "Test string",
                        },
                        subjectAltName: {
                            customSans: [
                                {
                                    critical: true,
                                    objectId: {
                                        objectIdPath: [
                                            42
                                        ],
                                    },
                                    value: "Test string",
                                }
                            ],
                            dnsNames: [
                                "Test string"
                            ],
                            emailAddresses: [
                                "Test string"
                            ],
                            ipAddresses: [
                                "Test string"
                            ],
                            uris: [
                                "Test string"
                            ],
                        },
                    },
                    subjectKeyId: {
                        keyId: "Test string",
                    },
                }
            ],
            certificatePolicy: {
                allowedCommonNames: [
                    "Test string"
                ],
                allowedConfigList: {
                    allowedConfigValues: [
                        {
                            reusableConfig: "Test string",
                            reusableConfigValues: {
                                additionalExtensions: [
                                    {
                                        critical: true,
                                        objectId: {
                                            objectIdPath: [
                                                42
                                            ],
                                        },
                                        value: "Test string",
                                    }
                                ],
                                aiaOcspServers: [
                                    "Test string"
                                ],
                                caOptions: {
                                    isCa: true,
                                    maxIssuerPathLength: 42,
                                },
                                keyUsage: {
                                    baseKeyUsage: {
                                        certSign: true,
                                        contentCommitment: true,
                                        crlSign: true,
                                        dataEncipherment: true,
                                        decipherOnly: true,
                                        digitalSignature: true,
                                        encipherOnly: true,
                                        keyAgreement: true,
                                        keyEncipherment: true,
                                    },
                                    extendedKeyUsage: {
                                        clientAuth: true,
                                        codeSigning: true,
                                        emailProtection: true,
                                        ocspSigning: true,
                                        serverAuth: true,
                                        timeStamping: true,
                                    },
                                    unknownExtendedKeyUsages: [
                                        {
                                            objectIdPath: [
                                                42
                                            ],
                                        }
                                    ],
                                },
                                policyIds: [
                                    {
                                        objectIdPath: [
                                            42
                                        ],
                                    }
                                ],
                            },
                        }
                    ],
                },
                allowedIssuanceModes: {
                    allowConfigBasedIssuance: true,
                    allowCsrBasedIssuance: true,
                },
                allowedLocationsAndOrganizations: [
                    {
                        countryCode: "Test string",
                        locality: "Test string",
                        organization: "Test string",
                        organizationalUnit: "Test string",
                        postalCode: "Test string",
                        province: "Test string",
                        streetAddress: "Test string",
                    }
                ],
                allowedSans: {
                    allowCustomSans: true,
                    allowedDnsNames: [
                        "Test string"
                    ],
                    allowedEmailAddresses: [
                        "Test string"
                    ],
                    allowedIps: [
                        "Test string"
                    ],
                    allowedUris: [
                        "Test string"
                    ],
                    allowGlobbingDnsWildcards: true,
                },
                maximumLifetime: "Test string",
                overwriteConfigValues: {
                    reusableConfig: "Test string",
                    reusableConfigValues: {
                        additionalExtensions: [
                            {
                                critical: true,
                                objectId: {
                                    objectIdPath: [
                                        42
                                    ],
                                },
                                value: "Test string",
                            }
                        ],
                        aiaOcspServers: [
                            "Test string"
                        ],
                        caOptions: {
                            isCa: true,
                            maxIssuerPathLength: 42,
                        },
                        keyUsage: {
                            baseKeyUsage: {
                                certSign: true,
                                contentCommitment: true,
                                crlSign: true,
                                dataEncipherment: true,
                                decipherOnly: true,
                                digitalSignature: true,
                                encipherOnly: true,
                                keyAgreement: true,
                                keyEncipherment: true,
                            },
                            extendedKeyUsage: {
                                clientAuth: true,
                                codeSigning: true,
                                emailProtection: true,
                                ocspSigning: true,
                                serverAuth: true,
                                timeStamping: true,
                            },
                            unknownExtendedKeyUsages: [
                                {
                                    objectIdPath: [
                                        42
                                    ],
                                }
                            ],
                        },
                        policyIds: [
                            {
                                objectIdPath: [
                                    42
                                ],
                            }
                        ],
                    },
                },
            },
            config: {
                publicKey: {
                    key: "Test string",
                    type: "Test string",
                },
                reusableConfig: {
                    reusableConfig: "Test string",
                    reusableConfigValues: {
                        additionalExtensions: [
                            {
                                critical: true,
                                objectId: {
                                    objectIdPath: [
                                        42
                                    ],
                                },
                                value: "Test string",
                            }
                        ],
                        aiaOcspServers: [
                            "Test string"
                        ],
                        caOptions: {
                            isCa: true,
                            maxIssuerPathLength: 42,
                        },
                        keyUsage: {
                            baseKeyUsage: {
                                certSign: true,
                                contentCommitment: true,
                                crlSign: true,
                                dataEncipherment: true,
                                decipherOnly: true,
                                digitalSignature: true,
                                encipherOnly: true,
                                keyAgreement: true,
                                keyEncipherment: true,
                            },
                            extendedKeyUsage: {
                                clientAuth: true,
                                codeSigning: true,
                                emailProtection: true,
                                ocspSigning: true,
                                serverAuth: true,
                                timeStamping: true,
                            },
                            unknownExtendedKeyUsages: [
                                {
                                    objectIdPath: [
                                        42
                                    ],
                                }
                            ],
                        },
                        policyIds: [
                            {
                                objectIdPath: [
                                    42
                                ],
                            }
                        ],
                    },
                },
                subjectConfig: {
                    commonName: "Test string",
                    subject: {
                        countryCode: "Test string",
                        locality: "Test string",
                        organization: "Test string",
                        organizationalUnit: "Test string",
                        postalCode: "Test string",
                        province: "Test string",
                        streetAddress: "Test string",
                    },
                    subjectAltName: {
                        customSans: [
                            {
                                critical: true,
                                objectId: {
                                    objectIdPath: [
                                        42
                                    ],
                                },
                                value: "Test string",
                            }
                        ],
                        dnsNames: [
                            "Test string"
                        ],
                        emailAddresses: [
                            "Test string"
                        ],
                        ipAddresses: [
                            "Test string"
                        ],
                        uris: [
                            "Test string"
                        ],
                    },
                },
            },
            createTime: "Test string",
            deleteTime: "Test string",
            gcsBucket: "Test string",
            issuingOptions: {
                includeCaCertUrl: true,
                includeCrlAccessUrl: true,
            },
            keySpec: {
                algorithm: "Test string",
                cloudKmsKeyVersion: "Test string",
            },
            labels: {
                A: "Test string"
            },
            lifetime: "Test string",
            name: "Test string",
            pemCaCertificates: [
                "Test string"
            ],
            state: "Test string",
            subordinateConfig: {
                certificateAuthority: "Test string",
                pemIssuerChain: {
                    pemCertificates: [
                        "Test string"
                    ],
                },
            },
            tier: "Test string",
            type: "Test string",
            updateTime: "Test string",
        });
        /** Disable a CertificateAuthority. */
        await gapi.client.privateca.projects.locations.certificateAuthorities.disable({
            name: "Test string",
        }, {
            requestId: "Test string",
        });
        /** Enable a CertificateAuthority. */
        await gapi.client.privateca.projects.locations.certificateAuthorities.enable({
            name: "Test string",
        }, {
            requestId: "Test string",
        });
        /**
         * Fetch a certificate signing request (CSR) from a CertificateAuthority that is in state PENDING_ACTIVATION and is of type SUBORDINATE. The CSR must then be signed by the desired parent
         * Certificate Authority, which could be another CertificateAuthority resource, or could be an on-prem certificate authority. See also ActivateCertificateAuthority.
         */
        await gapi.client.privateca.projects.locations.certificateAuthorities.fetch({
            name: "Test string",
        });
        /** Returns a CertificateAuthority. */
        await gapi.client.privateca.projects.locations.certificateAuthorities.get({
            name: "Test string",
        });
        /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
        await gapi.client.privateca.projects.locations.certificateAuthorities.getIamPolicy({
            "options.requestedPolicyVersion": 42,
            resource: "Test string",
        });
        /** Lists CertificateAuthorities. */
        await gapi.client.privateca.projects.locations.certificateAuthorities.list({
            filter: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Update a CertificateAuthority. */
        await gapi.client.privateca.projects.locations.certificateAuthorities.patch({
            name: "Test string",
            requestId: "Test string",
            updateMask: "Test string",
        }, {
            accessUrls: {
                caCertificateAccessUrl: "Test string",
                crlAccessUrl: "Test string",
            },
            caCertificateDescriptions: [
                {
                    aiaIssuingCertificateUrls: [
                        "Test string"
                    ],
                    authorityKeyId: {
                        keyId: "Test string",
                    },
                    certFingerprint: {
                        sha256Hash: "Test string",
                    },
                    configValues: {
                        additionalExtensions: [
                            {
                                critical: true,
                                objectId: {
                                    objectIdPath: [
                                        42
                                    ],
                                },
                                value: "Test string",
                            }
                        ],
                        aiaOcspServers: [
                            "Test string"
                        ],
                        caOptions: {
                            isCa: true,
                            maxIssuerPathLength: 42,
                        },
                        keyUsage: {
                            baseKeyUsage: {
                                certSign: true,
                                contentCommitment: true,
                                crlSign: true,
                                dataEncipherment: true,
                                decipherOnly: true,
                                digitalSignature: true,
                                encipherOnly: true,
                                keyAgreement: true,
                                keyEncipherment: true,
                            },
                            extendedKeyUsage: {
                                clientAuth: true,
                                codeSigning: true,
                                emailProtection: true,
                                ocspSigning: true,
                                serverAuth: true,
                                timeStamping: true,
                            },
                            unknownExtendedKeyUsages: [
                                {
                                    objectIdPath: [
                                        42
                                    ],
                                }
                            ],
                        },
                        policyIds: [
                            {
                                objectIdPath: [
                                    42
                                ],
                            }
                        ],
                    },
                    crlDistributionPoints: [
                        "Test string"
                    ],
                    publicKey: {
                        key: "Test string",
                        type: "Test string",
                    },
                    subjectDescription: {
                        commonName: "Test string",
                        hexSerialNumber: "Test string",
                        lifetime: "Test string",
                        notAfterTime: "Test string",
                        notBeforeTime: "Test string",
                        subject: {
                            countryCode: "Test string",
                            locality: "Test string",
                            organization: "Test string",
                            organizationalUnit: "Test string",
                            postalCode: "Test string",
                            province: "Test string",
                            streetAddress: "Test string",
                        },
                        subjectAltName: {
                            customSans: [
                                {
                                    critical: true,
                                    objectId: {
                                        objectIdPath: [
                                            42
                                        ],
                                    },
                                    value: "Test string",
                                }
                            ],
                            dnsNames: [
                                "Test string"
                            ],
                            emailAddresses: [
                                "Test string"
                            ],
                            ipAddresses: [
                                "Test string"
                            ],
                            uris: [
                                "Test string"
                            ],
                        },
                    },
                    subjectKeyId: {
                        keyId: "Test string",
                    },
                }
            ],
            certificatePolicy: {
                allowedCommonNames: [
                    "Test string"
                ],
                allowedConfigList: {
                    allowedConfigValues: [
                        {
                            reusableConfig: "Test string",
                            reusableConfigValues: {
                                additionalExtensions: [
                                    {
                                        critical: true,
                                        objectId: {
                                            objectIdPath: [
                                                42
                                            ],
                                        },
                                        value: "Test string",
                                    }
                                ],
                                aiaOcspServers: [
                                    "Test string"
                                ],
                                caOptions: {
                                    isCa: true,
                                    maxIssuerPathLength: 42,
                                },
                                keyUsage: {
                                    baseKeyUsage: {
                                        certSign: true,
                                        contentCommitment: true,
                                        crlSign: true,
                                        dataEncipherment: true,
                                        decipherOnly: true,
                                        digitalSignature: true,
                                        encipherOnly: true,
                                        keyAgreement: true,
                                        keyEncipherment: true,
                                    },
                                    extendedKeyUsage: {
                                        clientAuth: true,
                                        codeSigning: true,
                                        emailProtection: true,
                                        ocspSigning: true,
                                        serverAuth: true,
                                        timeStamping: true,
                                    },
                                    unknownExtendedKeyUsages: [
                                        {
                                            objectIdPath: [
                                                42
                                            ],
                                        }
                                    ],
                                },
                                policyIds: [
                                    {
                                        objectIdPath: [
                                            42
                                        ],
                                    }
                                ],
                            },
                        }
                    ],
                },
                allowedIssuanceModes: {
                    allowConfigBasedIssuance: true,
                    allowCsrBasedIssuance: true,
                },
                allowedLocationsAndOrganizations: [
                    {
                        countryCode: "Test string",
                        locality: "Test string",
                        organization: "Test string",
                        organizationalUnit: "Test string",
                        postalCode: "Test string",
                        province: "Test string",
                        streetAddress: "Test string",
                    }
                ],
                allowedSans: {
                    allowCustomSans: true,
                    allowedDnsNames: [
                        "Test string"
                    ],
                    allowedEmailAddresses: [
                        "Test string"
                    ],
                    allowedIps: [
                        "Test string"
                    ],
                    allowedUris: [
                        "Test string"
                    ],
                    allowGlobbingDnsWildcards: true,
                },
                maximumLifetime: "Test string",
                overwriteConfigValues: {
                    reusableConfig: "Test string",
                    reusableConfigValues: {
                        additionalExtensions: [
                            {
                                critical: true,
                                objectId: {
                                    objectIdPath: [
                                        42
                                    ],
                                },
                                value: "Test string",
                            }
                        ],
                        aiaOcspServers: [
                            "Test string"
                        ],
                        caOptions: {
                            isCa: true,
                            maxIssuerPathLength: 42,
                        },
                        keyUsage: {
                            baseKeyUsage: {
                                certSign: true,
                                contentCommitment: true,
                                crlSign: true,
                                dataEncipherment: true,
                                decipherOnly: true,
                                digitalSignature: true,
                                encipherOnly: true,
                                keyAgreement: true,
                                keyEncipherment: true,
                            },
                            extendedKeyUsage: {
                                clientAuth: true,
                                codeSigning: true,
                                emailProtection: true,
                                ocspSigning: true,
                                serverAuth: true,
                                timeStamping: true,
                            },
                            unknownExtendedKeyUsages: [
                                {
                                    objectIdPath: [
                                        42
                                    ],
                                }
                            ],
                        },
                        policyIds: [
                            {
                                objectIdPath: [
                                    42
                                ],
                            }
                        ],
                    },
                },
            },
            config: {
                publicKey: {
                    key: "Test string",
                    type: "Test string",
                },
                reusableConfig: {
                    reusableConfig: "Test string",
                    reusableConfigValues: {
                        additionalExtensions: [
                            {
                                critical: true,
                                objectId: {
                                    objectIdPath: [
                                        42
                                    ],
                                },
                                value: "Test string",
                            }
                        ],
                        aiaOcspServers: [
                            "Test string"
                        ],
                        caOptions: {
                            isCa: true,
                            maxIssuerPathLength: 42,
                        },
                        keyUsage: {
                            baseKeyUsage: {
                                certSign: true,
                                contentCommitment: true,
                                crlSign: true,
                                dataEncipherment: true,
                                decipherOnly: true,
                                digitalSignature: true,
                                encipherOnly: true,
                                keyAgreement: true,
                                keyEncipherment: true,
                            },
                            extendedKeyUsage: {
                                clientAuth: true,
                                codeSigning: true,
                                emailProtection: true,
                                ocspSigning: true,
                                serverAuth: true,
                                timeStamping: true,
                            },
                            unknownExtendedKeyUsages: [
                                {
                                    objectIdPath: [
                                        42
                                    ],
                                }
                            ],
                        },
                        policyIds: [
                            {
                                objectIdPath: [
                                    42
                                ],
                            }
                        ],
                    },
                },
                subjectConfig: {
                    commonName: "Test string",
                    subject: {
                        countryCode: "Test string",
                        locality: "Test string",
                        organization: "Test string",
                        organizationalUnit: "Test string",
                        postalCode: "Test string",
                        province: "Test string",
                        streetAddress: "Test string",
                    },
                    subjectAltName: {
                        customSans: [
                            {
                                critical: true,
                                objectId: {
                                    objectIdPath: [
                                        42
                                    ],
                                },
                                value: "Test string",
                            }
                        ],
                        dnsNames: [
                            "Test string"
                        ],
                        emailAddresses: [
                            "Test string"
                        ],
                        ipAddresses: [
                            "Test string"
                        ],
                        uris: [
                            "Test string"
                        ],
                    },
                },
            },
            createTime: "Test string",
            deleteTime: "Test string",
            gcsBucket: "Test string",
            issuingOptions: {
                includeCaCertUrl: true,
                includeCrlAccessUrl: true,
            },
            keySpec: {
                algorithm: "Test string",
                cloudKmsKeyVersion: "Test string",
            },
            labels: {
                A: "Test string"
            },
            lifetime: "Test string",
            name: "Test string",
            pemCaCertificates: [
                "Test string"
            ],
            state: "Test string",
            subordinateConfig: {
                certificateAuthority: "Test string",
                pemIssuerChain: {
                    pemCertificates: [
                        "Test string"
                    ],
                },
            },
            tier: "Test string",
            type: "Test string",
            updateTime: "Test string",
        });
        /** Restore a CertificateAuthority that is scheduled for deletion. */
        await gapi.client.privateca.projects.locations.certificateAuthorities.restore({
            name: "Test string",
        }, {
            requestId: "Test string",
        });
        /** Schedule a CertificateAuthority for deletion. */
        await gapi.client.privateca.projects.locations.certificateAuthorities.scheduleDelete({
            name: "Test string",
        }, {
            ignoreActiveCertificates: true,
            requestId: "Test string",
        });
        /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
        await gapi.client.privateca.projects.locations.certificateAuthorities.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                auditConfigs: [
                    {
                        auditLogConfigs: [
                            {
                                exemptedMembers: [
                                    "Test string"
                                ],
                                logType: "Test string",
                            }
                        ],
                        service: "Test string",
                    }
                ],
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"
                        ],
                        role: "Test string",
                    }
                ],
                etag: "Test string",
                version: 42,
            },
            updateMask: "Test string",
        });
        /**
         * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This
         * operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
         */
        await gapi.client.privateca.projects.locations.certificateAuthorities.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"
            ],
        });
        /** Returns a CertificateRevocationList. */
        await gapi.client.privateca.projects.locations.certificateAuthorities.certificateRevocationLists.get({
            name: "Test string",
        });
        /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
        await gapi.client.privateca.projects.locations.certificateAuthorities.certificateRevocationLists.getIamPolicy({
            "options.requestedPolicyVersion": 42,
            resource: "Test string",
        });
        /** Lists CertificateRevocationLists. */
        await gapi.client.privateca.projects.locations.certificateAuthorities.certificateRevocationLists.list({
            filter: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Update a CertificateRevocationList. */
        await gapi.client.privateca.projects.locations.certificateAuthorities.certificateRevocationLists.patch({
            name: "Test string",
            requestId: "Test string",
            updateMask: "Test string",
        }, {
            accessUrl: "Test string",
            createTime: "Test string",
            labels: {
                A: "Test string"
            },
            name: "Test string",
            pemCrl: "Test string",
            revokedCertificates: [
                {
                    certificate: "Test string",
                    hexSerialNumber: "Test string",
                    revocationReason: "Test string",
                }
            ],
            sequenceNumber: "Test string",
            state: "Test string",
            updateTime: "Test string",
        });
        /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
        await gapi.client.privateca.projects.locations.certificateAuthorities.certificateRevocationLists.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                auditConfigs: [
                    {
                        auditLogConfigs: [
                            {
                                exemptedMembers: [
                                    "Test string"
                                ],
                                logType: "Test string",
                            }
                        ],
                        service: "Test string",
                    }
                ],
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"
                        ],
                        role: "Test string",
                    }
                ],
                etag: "Test string",
                version: 42,
            },
            updateMask: "Test string",
        });
        /**
         * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This
         * operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
         */
        await gapi.client.privateca.projects.locations.certificateAuthorities.certificateRevocationLists.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"
            ],
        });
        /** Create a new Certificate in a given Project, Location from a particular CertificateAuthority. */
        await gapi.client.privateca.projects.locations.certificateAuthorities.certificates.create({
            certificateId: "Test string",
            parent: "Test string",
            requestId: "Test string",
        }, {
            certificateDescription: {
                aiaIssuingCertificateUrls: [
                    "Test string"
                ],
                authorityKeyId: {
                    keyId: "Test string",
                },
                certFingerprint: {
                    sha256Hash: "Test string",
                },
                configValues: {
                    additionalExtensions: [
                        {
                            critical: true,
                            objectId: {
                                objectIdPath: [
                                    42
                                ],
                            },
                            value: "Test string",
                        }
                    ],
                    aiaOcspServers: [
                        "Test string"
                    ],
                    caOptions: {
                        isCa: true,
                        maxIssuerPathLength: 42,
                    },
                    keyUsage: {
                        baseKeyUsage: {
                            certSign: true,
                            contentCommitment: true,
                            crlSign: true,
                            dataEncipherment: true,
                            decipherOnly: true,
                            digitalSignature: true,
                            encipherOnly: true,
                            keyAgreement: true,
                            keyEncipherment: true,
                        },
                        extendedKeyUsage: {
                            clientAuth: true,
                            codeSigning: true,
                            emailProtection: true,
                            ocspSigning: true,
                            serverAuth: true,
                            timeStamping: true,
                        },
                        unknownExtendedKeyUsages: [
                            {
                                objectIdPath: [
                                    42
                                ],
                            }
                        ],
                    },
                    policyIds: [
                        {
                            objectIdPath: [
                                42
                            ],
                        }
                    ],
                },
                crlDistributionPoints: [
                    "Test string"
                ],
                publicKey: {
                    key: "Test string",
                    type: "Test string",
                },
                subjectDescription: {
                    commonName: "Test string",
                    hexSerialNumber: "Test string",
                    lifetime: "Test string",
                    notAfterTime: "Test string",
                    notBeforeTime: "Test string",
                    subject: {
                        countryCode: "Test string",
                        locality: "Test string",
                        organization: "Test string",
                        organizationalUnit: "Test string",
                        postalCode: "Test string",
                        province: "Test string",
                        streetAddress: "Test string",
                    },
                    subjectAltName: {
                        customSans: [
                            {
                                critical: true,
                                objectId: {
                                    objectIdPath: [
                                        42
                                    ],
                                },
                                value: "Test string",
                            }
                        ],
                        dnsNames: [
                            "Test string"
                        ],
                        emailAddresses: [
                            "Test string"
                        ],
                        ipAddresses: [
                            "Test string"
                        ],
                        uris: [
                            "Test string"
                        ],
                    },
                },
                subjectKeyId: {
                    keyId: "Test string",
                },
            },
            config: {
                publicKey: {
                    key: "Test string",
                    type: "Test string",
                },
                reusableConfig: {
                    reusableConfig: "Test string",
                    reusableConfigValues: {
                        additionalExtensions: [
                            {
                                critical: true,
                                objectId: {
                                    objectIdPath: [
                                        42
                                    ],
                                },
                                value: "Test string",
                            }
                        ],
                        aiaOcspServers: [
                            "Test string"
                        ],
                        caOptions: {
                            isCa: true,
                            maxIssuerPathLength: 42,
                        },
                        keyUsage: {
                            baseKeyUsage: {
                                certSign: true,
                                contentCommitment: true,
                                crlSign: true,
                                dataEncipherment: true,
                                decipherOnly: true,
                                digitalSignature: true,
                                encipherOnly: true,
                                keyAgreement: true,
                                keyEncipherment: true,
                            },
                            extendedKeyUsage: {
                                clientAuth: true,
                                codeSigning: true,
                                emailProtection: true,
                                ocspSigning: true,
                                serverAuth: true,
                                timeStamping: true,
                            },
                            unknownExtendedKeyUsages: [
                                {
                                    objectIdPath: [
                                        42
                                    ],
                                }
                            ],
                        },
                        policyIds: [
                            {
                                objectIdPath: [
                                    42
                                ],
                            }
                        ],
                    },
                },
                subjectConfig: {
                    commonName: "Test string",
                    subject: {
                        countryCode: "Test string",
                        locality: "Test string",
                        organization: "Test string",
                        organizationalUnit: "Test string",
                        postalCode: "Test string",
                        province: "Test string",
                        streetAddress: "Test string",
                    },
                    subjectAltName: {
                        customSans: [
                            {
                                critical: true,
                                objectId: {
                                    objectIdPath: [
                                        42
                                    ],
                                },
                                value: "Test string",
                            }
                        ],
                        dnsNames: [
                            "Test string"
                        ],
                        emailAddresses: [
                            "Test string"
                        ],
                        ipAddresses: [
                            "Test string"
                        ],
                        uris: [
                            "Test string"
                        ],
                    },
                },
            },
            createTime: "Test string",
            labels: {
                A: "Test string"
            },
            lifetime: "Test string",
            name: "Test string",
            pemCertificate: "Test string",
            pemCertificateChain: [
                "Test string"
            ],
            pemCsr: "Test string",
            revocationDetails: {
                revocationState: "Test string",
                revocationTime: "Test string",
            },
            updateTime: "Test string",
        });
        /** Returns a Certificate. */
        await gapi.client.privateca.projects.locations.certificateAuthorities.certificates.get({
            name: "Test string",
        });
        /** Lists Certificates. */
        await gapi.client.privateca.projects.locations.certificateAuthorities.certificates.list({
            filter: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Update a Certificate. Currently, the only field you can update is the labels field. */
        await gapi.client.privateca.projects.locations.certificateAuthorities.certificates.patch({
            name: "Test string",
            requestId: "Test string",
            updateMask: "Test string",
        }, {
            certificateDescription: {
                aiaIssuingCertificateUrls: [
                    "Test string"
                ],
                authorityKeyId: {
                    keyId: "Test string",
                },
                certFingerprint: {
                    sha256Hash: "Test string",
                },
                configValues: {
                    additionalExtensions: [
                        {
                            critical: true,
                            objectId: {
                                objectIdPath: [
                                    42
                                ],
                            },
                            value: "Test string",
                        }
                    ],
                    aiaOcspServers: [
                        "Test string"
                    ],
                    caOptions: {
                        isCa: true,
                        maxIssuerPathLength: 42,
                    },
                    keyUsage: {
                        baseKeyUsage: {
                            certSign: true,
                            contentCommitment: true,
                            crlSign: true,
                            dataEncipherment: true,
                            decipherOnly: true,
                            digitalSignature: true,
                            encipherOnly: true,
                            keyAgreement: true,
                            keyEncipherment: true,
                        },
                        extendedKeyUsage: {
                            clientAuth: true,
                            codeSigning: true,
                            emailProtection: true,
                            ocspSigning: true,
                            serverAuth: true,
                            timeStamping: true,
                        },
                        unknownExtendedKeyUsages: [
                            {
                                objectIdPath: [
                                    42
                                ],
                            }
                        ],
                    },
                    policyIds: [
                        {
                            objectIdPath: [
                                42
                            ],
                        }
                    ],
                },
                crlDistributionPoints: [
                    "Test string"
                ],
                publicKey: {
                    key: "Test string",
                    type: "Test string",
                },
                subjectDescription: {
                    commonName: "Test string",
                    hexSerialNumber: "Test string",
                    lifetime: "Test string",
                    notAfterTime: "Test string",
                    notBeforeTime: "Test string",
                    subject: {
                        countryCode: "Test string",
                        locality: "Test string",
                        organization: "Test string",
                        organizationalUnit: "Test string",
                        postalCode: "Test string",
                        province: "Test string",
                        streetAddress: "Test string",
                    },
                    subjectAltName: {
                        customSans: [
                            {
                                critical: true,
                                objectId: {
                                    objectIdPath: [
                                        42
                                    ],
                                },
                                value: "Test string",
                            }
                        ],
                        dnsNames: [
                            "Test string"
                        ],
                        emailAddresses: [
                            "Test string"
                        ],
                        ipAddresses: [
                            "Test string"
                        ],
                        uris: [
                            "Test string"
                        ],
                    },
                },
                subjectKeyId: {
                    keyId: "Test string",
                },
            },
            config: {
                publicKey: {
                    key: "Test string",
                    type: "Test string",
                },
                reusableConfig: {
                    reusableConfig: "Test string",
                    reusableConfigValues: {
                        additionalExtensions: [
                            {
                                critical: true,
                                objectId: {
                                    objectIdPath: [
                                        42
                                    ],
                                },
                                value: "Test string",
                            }
                        ],
                        aiaOcspServers: [
                            "Test string"
                        ],
                        caOptions: {
                            isCa: true,
                            maxIssuerPathLength: 42,
                        },
                        keyUsage: {
                            baseKeyUsage: {
                                certSign: true,
                                contentCommitment: true,
                                crlSign: true,
                                dataEncipherment: true,
                                decipherOnly: true,
                                digitalSignature: true,
                                encipherOnly: true,
                                keyAgreement: true,
                                keyEncipherment: true,
                            },
                            extendedKeyUsage: {
                                clientAuth: true,
                                codeSigning: true,
                                emailProtection: true,
                                ocspSigning: true,
                                serverAuth: true,
                                timeStamping: true,
                            },
                            unknownExtendedKeyUsages: [
                                {
                                    objectIdPath: [
                                        42
                                    ],
                                }
                            ],
                        },
                        policyIds: [
                            {
                                objectIdPath: [
                                    42
                                ],
                            }
                        ],
                    },
                },
                subjectConfig: {
                    commonName: "Test string",
                    subject: {
                        countryCode: "Test string",
                        locality: "Test string",
                        organization: "Test string",
                        organizationalUnit: "Test string",
                        postalCode: "Test string",
                        province: "Test string",
                        streetAddress: "Test string",
                    },
                    subjectAltName: {
                        customSans: [
                            {
                                critical: true,
                                objectId: {
                                    objectIdPath: [
                                        42
                                    ],
                                },
                                value: "Test string",
                            }
                        ],
                        dnsNames: [
                            "Test string"
                        ],
                        emailAddresses: [
                            "Test string"
                        ],
                        ipAddresses: [
                            "Test string"
                        ],
                        uris: [
                            "Test string"
                        ],
                    },
                },
            },
            createTime: "Test string",
            labels: {
                A: "Test string"
            },
            lifetime: "Test string",
            name: "Test string",
            pemCertificate: "Test string",
            pemCertificateChain: [
                "Test string"
            ],
            pemCsr: "Test string",
            revocationDetails: {
                revocationState: "Test string",
                revocationTime: "Test string",
            },
            updateTime: "Test string",
        });
        /** Revoke a Certificate. */
        await gapi.client.privateca.projects.locations.certificateAuthorities.certificates.revoke({
            name: "Test string",
        }, {
            reason: "Test string",
            requestId: "Test string",
        });
        /**
         * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this
         * method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation
         * completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of
         * 1, corresponding to `Code.CANCELLED`.
         */
        await gapi.client.privateca.projects.locations.operations.cancel({
            name: "Test string",
        }, {
        });
        /**
         * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support
         * this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
         */
        await gapi.client.privateca.projects.locations.operations.delete({
            name: "Test string",
        });
        /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
        await gapi.client.privateca.projects.locations.operations.get({
            name: "Test string",
        });
        /**
         * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to
         * override the binding to use different resource name schemes, such as `users/*‍/operations`. To override the binding, API services can add a binding such as
         * `"/v1/{name=users/*}/operations"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must
         * ensure the name binding is the parent resource, without the operations collection id.
         */
        await gapi.client.privateca.projects.locations.operations.list({
            filter: "Test string",
            name: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Returns a ReusableConfig. */
        await gapi.client.privateca.projects.locations.reusableConfigs.get({
            name: "Test string",
        });
        /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
        await gapi.client.privateca.projects.locations.reusableConfigs.getIamPolicy({
            "options.requestedPolicyVersion": 42,
            resource: "Test string",
        });
        /** Lists ReusableConfigs. */
        await gapi.client.privateca.projects.locations.reusableConfigs.list({
            filter: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
        await gapi.client.privateca.projects.locations.reusableConfigs.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                auditConfigs: [
                    {
                        auditLogConfigs: [
                            {
                                exemptedMembers: [
                                    "Test string"
                                ],
                                logType: "Test string",
                            }
                        ],
                        service: "Test string",
                    }
                ],
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"
                        ],
                        role: "Test string",
                    }
                ],
                etag: "Test string",
                version: 42,
            },
            updateMask: "Test string",
        });
        /**
         * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This
         * operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
         */
        await gapi.client.privateca.projects.locations.reusableConfigs.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"
            ],
        });
    }
});
