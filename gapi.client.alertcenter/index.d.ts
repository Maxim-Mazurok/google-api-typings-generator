/* Type definitions for non-npm package Google Workspace Alert Center API v1beta1 1.0 */
// Project: https://developers.google.com/admin-sdk/alertcenter/
// Definitions by: Maxim Mazurok <https://github.com/Maxim-Mazurok>
//                 Nick Amoscato <https://github.com/namoscato>
//                 Declan Vong <https://github.com/declanvong>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 2.8

// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
// Generated from: https://alertcenter.googleapis.com/$discovery/rest?version=v1beta1
// Revision: 20210209

/// <reference types="gapi.client" />

declare namespace gapi.client {
    /** Load Google Workspace Alert Center API v1beta1 */
    function load(name: "alertcenter", version: "v1beta1"): PromiseLike<void>;
    function load(name: "alertcenter", version: "v1beta1", callback: () => any): void;

    namespace alertcenter {
        interface AccountWarning {
            /** Required. The email of the user that this event belongs to. */
            email?: string;
            /**
             * Optional. Details of the login action associated with the warning event. This is only available for: * Suspicious login * Suspicious login (less secure app) * Suspicious
             * programmatic login * User suspended (suspicious activity)
             */
            loginDetails?: LoginDetails;
        }
        interface ActivityRule {
            /** List of action names associated with the rule threshold. */
            actionNames?: string[];
            /** Rule create timestamp. */
            createTime?: string;
            /** Description of the rule. */
            description?: string;
            /** Alert display name. */
            displayName?: string;
            /** Rule name. */
            name?: string;
            /** Query that is used to get the data from the associated source. */
            query?: string;
            /**
             * List of alert IDs superseded by this alert. It is used to indicate that this alert is essentially extension of superseded alerts and we found the relationship after creating these
             * alerts.
             */
            supersededAlerts?: string[];
            /** Alert ID superseding this alert. It is used to indicate that superseding alert is essentially extension of this alert and we found the relationship after creating both alerts. */
            supersedingAlert?: string;
            /** Alert threshold is for example “COUNT > 5”. */
            threshold?: string;
            /** The trigger sources for this rule. * GMAIL_EVENTS * DEVICE_EVENTS * USER_EVENTS */
            triggerSource?: string;
            /** The timestamp of the last update to the rule. */
            updateTime?: string;
            /** Rule window size. Possible values are 1 hour or 24 hours. */
            windowSize?: string;
        }
        interface Alert {
            /** Output only. The unique identifier for the alert. */
            alertId?: string;
            /** Output only. The time this alert was created. */
            createTime?: string;
            /** Output only. The unique identifier of the Google account of the customer. */
            customerId?: string;
            /** Optional. The data associated with this alert, for example google.apps.alertcenter.type.DeviceCompromised. */
            data?: { [P in string]: any };
            /** Output only. `True` if this alert is marked for deletion. */
            deleted?: boolean;
            /**
             * Optional. The time the event that caused this alert ceased being active. If provided, the end time must not be earlier than the start time. If not provided, it indicates an ongoing
             * alert.
             */
            endTime?: string;
            /**
             * Optional. `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of an alert from overwriting each other. It is strongly suggested that
             * systems make use of the `etag` in the read-modify-write cycle to perform alert updates in order to avoid race conditions: An `etag` is returned in the response which contains
             * alerts, and systems are expected to put that etag in the request to update alert to ensure that their change will be applied to the same version of the alert. If no `etag` is
             * provided in the call to update alert, then the existing alert is overwritten blindly.
             */
            etag?: string;
            /** Output only. The metadata associated with this alert. */
            metadata?: AlertMetadata;
            /** Output only. An optional [Security Investigation Tool](https://support.google.com/a/answer/7575955) query for this alert. */
            securityInvestigationToolLink?: string;
            /**
             * Required. A unique identifier for the system that reported the alert. This is output only after alert is created. Supported sources are any of the following: * Google Operations *
             * Mobile device management * Gmail phishing * Domain wide takeout * State sponsored attack * Google identity
             */
            source?: string;
            /** Required. The time the event that caused this alert was started or detected. */
            startTime?: string;
            /**
             * Required. The type of the alert. This is output only after alert is created. For a list of available alert types see [Google Workspace Alert
             * types](/admin-sdk/alertcenter/reference/alert-types).
             */
            type?: string;
            /** Output only. The time this alert was last updated. */
            updateTime?: string;
        }
        interface AlertFeedback {
            /** Output only. The alert identifier. */
            alertId?: string;
            /** Output only. The time this feedback was created. */
            createTime?: string;
            /** Output only. The unique identifier of the Google account of the customer. */
            customerId?: string;
            /** Output only. The email of the user that provided the feedback. */
            email?: string;
            /** Output only. The unique identifier for the feedback. */
            feedbackId?: string;
            /** Required. The type of the feedback. */
            type?: string;
        }
        interface AlertMetadata {
            /** Output only. The alert identifier. */
            alertId?: string;
            /** The email address of the user assigned to the alert. */
            assignee?: string;
            /** Output only. The unique identifier of the Google account of the customer. */
            customerId?: string;
            /**
             * Optional. `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of an alert metadata from overwriting each other. It is strongly suggested
             * that systems make use of the `etag` in the read-modify-write cycle to perform metatdata updates in order to avoid race conditions: An `etag` is returned in the response which
             * contains alert metadata, and systems are expected to put that etag in the request to update alert metadata to ensure that their change will be applied to the same version of the
             * alert metadata. If no `etag` is provided in the call to update alert metadata, then the existing alert metadata is overwritten blindly.
             */
            etag?: string;
            /**
             * The severity value of the alert. Alert Center will set this field at alert creation time, default's to an empty string when it could not be determined. The supported values for
             * update actions on this field are the following: * HIGH * MEDIUM * LOW
             */
            severity?: string;
            /** The current status of the alert. The supported values are the following: * NOT_STARTED * IN_PROGRESS * CLOSED */
            status?: string;
            /** Output only. The time this metadata was last updated. */
            updateTime?: string;
        }
        interface AppMakerSqlSetupNotification {
            /** List of applications with requests for default SQL set up. */
            requestInfo?: RequestInfo[];
        }
        interface Attachment {
            /** A CSV file attachment. */
            csv?: Csv;
        }
        interface BadWhitelist {
            /** The domain ID. */
            domainId?: DomainId;
            /** The entity whose actions triggered a Gmail phishing alert. */
            maliciousEntity?: MaliciousEntity;
            /** The list of messages contained by this alert. */
            messages?: GmailMessageInfo[];
            /** The source IP address of the malicious email, for example, `127.0.0.1`. */
            sourceIp?: string;
        }
        interface BatchDeleteAlertsRequest {
            /** Required. list of alert IDs. */
            alertId?: string[];
            /** Optional. The unique identifier of the Google Workspace organization account of the customer the alerts are associated with. */
            customerId?: string;
        }
        interface BatchDeleteAlertsResponse {
            /** The status details for each failed alert_id. */
            failedAlertStatus?: { [P in string]: Status };
            /** The successful list of alert IDs. */
            successAlertIds?: string[];
        }
        interface BatchUndeleteAlertsRequest {
            /** Required. list of alert IDs. */
            alertId?: string[];
            /** Optional. The unique identifier of the Google Workspace organization account of the customer the alerts are associated with. */
            customerId?: string;
        }
        interface BatchUndeleteAlertsResponse {
            /** The status details for each failed alert_id. */
            failedAlertStatus?: { [P in string]: Status };
            /** The successful list of alert IDs. */
            successAlertIds?: string[];
        }
        interface CloudPubsubTopic {
            /** Optional. The format of the payload that would be sent. If not specified the format will be JSON. */
            payloadFormat?: string;
            /** The `name` field of a Cloud Pubsub [Topic] (https://cloud.google.com/pubsub/docs/reference/rest/v1/projects.topics#Topic). */
            topicName?: string;
        }
        interface Csv {
            /** The list of data rows in a CSV file, as string arrays rather than as a single comma-separated string. */
            dataRows?: CsvRow[];
            /** The list of headers for data columns in a CSV file. */
            headers?: string[];
        }
        interface CsvRow {
            /** The data entries in a CSV file row, as a string array rather than a single comma-separated string. */
            entries?: string[];
        }
        interface DeviceCompromised {
            /** The email of the user this alert was created for. */
            email?: string;
            /** Required. The list of security events. */
            events?: DeviceCompromisedSecurityDetail[];
        }
        interface DeviceCompromisedSecurityDetail {
            /** The device compromised state. Possible values are "`Compromised`" or "`Not Compromised`". */
            deviceCompromisedState?: string;
            /** Required. The device ID. */
            deviceId?: string;
            /** The model of the device. */
            deviceModel?: string;
            /** The type of the device. */
            deviceType?: string;
            /** Required for iOS, empty for others. */
            iosVendorId?: string;
            /** The device resource ID. */
            resourceId?: string;
            /** The serial number of the device. */
            serialNumber?: string;
        }
        interface DlpRuleViolation {
            /**
             * Details about the violated DLP rule. Admins can use the predefined detectors provided by Google Cloud DLP https://cloud.google.com/dlp/ when setting up a DLP rule. Matched Cloud DLP
             * detectors in this violation if any will be captured in the MatchInfo.predefined_detector.
             */
            ruleViolationInfo?: RuleViolationInfo;
        }
        interface DomainId {
            /** The primary domain for the customer. */
            customerPrimaryDomain?: string;
        }
        interface DomainWideTakeoutInitiated {
            /** The email of the admin who initiated the takeout. */
            email?: string;
            /** The takeout request ID. */
            takeoutRequestId?: string;
        }
        // tslint:disable-next-line:no-empty-interface
        interface Empty {
        }
        interface GmailMessageInfo {
            /** The `SHA256` hash of email's attachment and all MIME parts. */
            attachmentsSha256Hash?: string[];
            /** The date the malicious email was sent. */
            date?: string;
            /** The hash of the message body text. */
            md5HashMessageBody?: string;
            /** The MD5 Hash of email's subject (only available for reported emails). */
            md5HashSubject?: string;
            /** The snippet of the message body text (only available for reported emails). */
            messageBodySnippet?: string;
            /** The message ID. */
            messageId?: string;
            /** The recipient of this email. */
            recipient?: string;
            /** The email subject text (only available for reported emails). */
            subjectText?: string;
        }
        interface GoogleOperations {
            /** The list of emails which correspond to the users directly affected by the incident. */
            affectedUserEmails?: string[];
            /** Optional. Application-specific data for an incident, provided when the G Suite application which reported the incident cannot be completely restored to a valid state. */
            attachmentData?: Attachment;
            /** A detailed, freeform incident description. */
            description?: string;
            /** A header to display above the incident message. Typcially used to attach a localized notice on the timeline for followup comms translations. */
            header?: string;
            /** A one-line incident description. */
            title?: string;
        }
        interface ListAlertFeedbackResponse {
            /** The list of alert feedback. Feedback entries for each alert are ordered by creation time descending. */
            feedback?: AlertFeedback[];
        }
        interface ListAlertsResponse {
            /** The list of alerts. */
            alerts?: Alert[];
            /**
             * The token for the next page. If not empty, indicates that there may be more alerts that match the listing request; this value can be used in a subsequent ListAlertsRequest to get
             * alerts continuing from last result of the current list call.
             */
            nextPageToken?: string;
        }
        interface LoginDetails {
            /** Optional. The human-readable IP address (for example, `11.22.33.44`) that is associated with the warning event. */
            ipAddress?: string;
            /** Optional. The successful login time that is associated with the warning event. This isn't present for blocked login attempts. */
            loginTime?: string;
        }
        interface MailPhishing {
            /** The domain ID. */
            domainId?: DomainId;
            /** If `true`, the email originated from within the organization. */
            isInternal?: boolean;
            /** The entity whose actions triggered a Gmail phishing alert. */
            maliciousEntity?: MaliciousEntity;
            /** The list of messages contained by this alert. */
            messages?: GmailMessageInfo[];
            /** System actions on the messages. */
            systemActionType?: string;
        }
        interface MaliciousEntity {
            /** The header from display name. */
            displayName?: string;
            /** The actor who triggered a gmail phishing alert. */
            entity?: User;
            /** The sender email address. */
            fromHeader?: string;
        }
        interface MatchInfo {
            /** For matched detector predefined by Google. */
            predefinedDetector?: PredefinedDetectorInfo;
            /** For matched detector defined by administrators. */
            userDefinedDetector?: UserDefinedDetectorInfo;
        }
        interface Notification {
            /** A Google Cloud Pub/sub topic destination. */
            cloudPubsubTopic?: CloudPubsubTopic;
        }
        interface PhishingSpike {
            /** The domain ID. */
            domainId?: DomainId;
            /** If `true`, the email originated from within the organization. */
            isInternal?: boolean;
            /** The entity whose actions triggered a Gmail phishing alert. */
            maliciousEntity?: MaliciousEntity;
            /** The list of messages contained by this alert. */
            messages?: GmailMessageInfo[];
        }
        interface PredefinedDetectorInfo {
            /** Name that uniquely identifies the detector. */
            detectorName?: string;
        }
        interface RequestInfo {
            /** List of app developers who triggered notifications for above application. */
            appDeveloperEmail?: string[];
            /** Required. The application that requires the SQL setup. */
            appKey?: string;
            /** Required. Number of requests sent for this application to set up default SQL instance. */
            numberOfRequests?: string;
        }
        interface ResourceInfo {
            /** Drive file ID. */
            documentId?: string;
            /** Title of the resource, for example email subject, or document title. */
            resourceTitle?: string;
        }
        interface RuleInfo {
            /** User provided name of the rule. */
            displayName?: string;
            /** Resource name that uniquely identifies the rule. */
            resourceName?: string;
        }
        interface RuleViolationInfo {
            /** Source of the data. */
            dataSource?: string;
            /** List of matches that were found in the resource content. */
            matchInfo?: MatchInfo[];
            /**
             * Resource recipients. For Drive, they are grantees that the Drive file was shared with at the time of rule triggering. Valid values include user emails, group emails, domains, or
             * 'anyone' if the file was publicly accessible. If the file was private the recipients list will be empty. For Gmail, they are emails of the users or groups that the Gmail message was
             * sent to.
             */
            recipients?: string[];
            /** Details of the resource which violated the rule. */
            resourceInfo?: ResourceInfo;
            /** Details of the violated rule. */
            ruleInfo?: RuleInfo;
            /** Actions suppressed due to other actions with higher priority. */
            suppressedActionTypes?: string[];
            /** Trigger of the rule. */
            trigger?: string;
            /** Actions applied as a consequence of the rule being triggered. */
            triggeredActionTypes?: string[];
            /** Email of the user who caused the violation. Value could be empty if not applicable, for example, a violation found by drive continuous scan. */
            triggeringUserEmail?: string;
        }
        interface Settings {
            /** The list of notifications. */
            notifications?: Notification[];
        }
        interface StateSponsoredAttack {
            /** The email of the user this incident was created for. */
            email?: string;
        }
        interface Status {
            /** The status code, which should be an enum value of google.rpc.Code. */
            code?: number;
            /** A list of messages that carry the error details. There is a common set of message types for APIs to use. */
            details?: Array<{ [P in string]: any }>;
            /**
             * A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the
             * client.
             */
            message?: string;
        }
        interface SuspiciousActivity {
            /** The email of the user this alert was created for. */
            email?: string;
            /** Required. The list of security events. */
            events?: SuspiciousActivitySecurityDetail[];
        }
        interface SuspiciousActivitySecurityDetail {
            /** Required. The device ID. */
            deviceId?: string;
            /** The model of the device. */
            deviceModel?: string;
            /** The device property which was changed. */
            deviceProperty?: string;
            /** The type of the device. */
            deviceType?: string;
            /** Required for iOS, empty for others. */
            iosVendorId?: string;
            /** The new value of the device property after the change. */
            newValue?: string;
            /** The old value of the device property before the change. */
            oldValue?: string;
            /** The device resource ID. */
            resourceId?: string;
            /** The serial number of the device. */
            serialNumber?: string;
        }
        interface UndeleteAlertRequest {
            /** Optional. The unique identifier of the Google Workspace organization account of the customer the alert is associated with. Inferred from the caller identity if not provided. */
            customerId?: string;
        }
        interface User {
            /** Display name of the user. */
            displayName?: string;
            /** Email address of the user. */
            emailAddress?: string;
        }
        interface UserDefinedDetectorInfo {
            /** Display name of the detector. */
            displayName?: string;
            /** Resource name that uniquely identifies the detector. */
            resourceName?: string;
        }
        interface FeedbackResource {
            /**
             * Creates new feedback for an alert. Attempting to create a feedback for a non-existent alert returns `NOT_FOUND` error. Attempting to create a feedback for an alert that is marked
             * for deletion returns `FAILED_PRECONDITION' error.
             */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Required. The identifier of the alert this feedback belongs to. */
                alertId: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Optional. The unique identifier of the Google Workspace organization account of the customer the alert is associated with. Inferred from the caller identity if not provided. */
                customerId?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: AlertFeedback;
            }): Request<AlertFeedback>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Required. The identifier of the alert this feedback belongs to. */
                alertId: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Optional. The unique identifier of the Google Workspace organization account of the customer the alert is associated with. Inferred from the caller identity if not provided. */
                customerId?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: AlertFeedback): Request<AlertFeedback>;
            /** Lists all the feedback for an alert. Attempting to list feedbacks for a non-existent alert returns `NOT_FOUND` error. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Required. The alert identifier. The "-" wildcard could be used to represent all alerts. */
                alertId: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /**
                 * Optional. The unique identifier of the Google Workspace organization account of the customer the alert feedback are associated with. Inferred from the caller identity if not
                 * provided.
                 */
                customerId?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * Optional. A query string for filtering alert feedback results. For more details, see [Query filters](/admin-sdk/alertcenter/guides/query-filters) and [Supported query filter
                 * fields](/admin-sdk/alertcenter/reference/filter-fields#alerts.feedback.list).
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListAlertFeedbackResponse>;
        }
        interface AlertsResource {
            /** Performs batch delete operation on alerts. */
            batchDelete(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: BatchDeleteAlertsRequest;
            }): Request<BatchDeleteAlertsResponse>;
            batchDelete(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: BatchDeleteAlertsRequest): Request<BatchDeleteAlertsResponse>;
            /** Performs batch undelete operation on alerts. */
            batchUndelete(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: BatchUndeleteAlertsRequest;
            }): Request<BatchUndeleteAlertsResponse>;
            batchUndelete(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: BatchUndeleteAlertsRequest): Request<BatchUndeleteAlertsResponse>;
            /**
             * Marks the specified alert for deletion. An alert that has been marked for deletion is removed from Alert Center after 30 days. Marking an alert for deletion has no effect on an
             * alert which has already been marked for deletion. Attempting to mark a nonexistent alert for deletion results in a `NOT_FOUND` error.
             */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Required. The identifier of the alert to delete. */
                alertId: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Optional. The unique identifier of the Google Workspace organization account of the customer the alert is associated with. Inferred from the caller identity if not provided. */
                customerId?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<{}>;
            /** Gets the specified alert. Attempting to get a nonexistent alert returns `NOT_FOUND` error. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Required. The identifier of the alert to retrieve. */
                alertId: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Optional. The unique identifier of the Google Workspace organization account of the customer the alert is associated with. Inferred from the caller identity if not provided. */
                customerId?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Alert>;
            /** Returns the metadata of an alert. Attempting to get metadata for a non-existent alert returns `NOT_FOUND` error. */
            getMetadata(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Required. The identifier of the alert this metadata belongs to. */
                alertId: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /**
                 * Optional. The unique identifier of the Google Workspace organization account of the customer the alert metadata is associated with. Inferred from the caller identity if not
                 * provided.
                 */
                customerId?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<AlertMetadata>;
            /** Lists the alerts. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Optional. The unique identifier of the Google Workspace organization account of the customer the alerts are associated with. Inferred from the caller identity if not provided. */
                customerId?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * Optional. A query string for filtering alert results. For more details, see [Query filters](/admin-sdk/alertcenter/guides/query-filters) and [Supported query filter
                 * fields](/admin-sdk/alertcenter/reference/filter-fields#alerts.list).
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Optional. The sort order of the list results. If not specified results may be returned in arbitrary order. You can sort the results in descending order based on the creation
                 * timestamp using `order_by="create_time desc"`. Currently, supported sorting are `create_time asc`, `create_time desc`, `update_time desc`
                 */
                orderBy?: string;
                /** Optional. The requested page size. Server may return fewer items than requested. If unspecified, server picks an appropriate default. */
                pageSize?: number;
                /**
                 * Optional. A token identifying a page of results the server should return. If empty, a new iteration is started. To continue an iteration, pass in the value from the previous
                 * ListAlertsResponse's next_page_token field.
                 */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListAlertsResponse>;
            /**
             * Restores, or "undeletes", an alert that was marked for deletion within the past 30 days. Attempting to undelete an alert which was marked for deletion over 30 days ago (which has
             * been removed from the Alert Center database) or a nonexistent alert returns a `NOT_FOUND` error. Attempting to undelete an alert which has not been marked for deletion has no
             * effect.
             */
            undelete(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Required. The identifier of the alert to undelete. */
                alertId: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: UndeleteAlertRequest;
            }): Request<Alert>;
            undelete(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Required. The identifier of the alert to undelete. */
                alertId: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: UndeleteAlertRequest): Request<Alert>;
            feedback: FeedbackResource;
        }
        interface V1beta1Resource {
            /** Returns customer-level settings. */
            getSettings(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /**
                 * Optional. The unique identifier of the Google Workspace organization account of the customer the alert settings are associated with. Inferred from the caller identity if not
                 * provided.
                 */
                customerId?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Settings>;
            /** Updates the customer-level settings. */
            updateSettings(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /**
                 * Optional. The unique identifier of the Google Workspace organization account of the customer the alert settings are associated with. Inferred from the caller identity if not
                 * provided.
                 */
                customerId?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Settings;
            }): Request<Settings>;
            updateSettings(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /**
                 * Optional. The unique identifier of the Google Workspace organization account of the customer the alert settings are associated with. Inferred from the caller identity if not
                 * provided.
                 */
                customerId?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Settings): Request<Settings>;
        }

        const alerts: AlertsResource;

        const v1beta1: V1beta1Resource;
    }
}
