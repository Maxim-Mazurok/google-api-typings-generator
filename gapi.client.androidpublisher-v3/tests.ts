/* This is stub file for gapi.client.androidpublisher-v3 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20230420

gapi.load('client', async () => {
    /** now we can use gapi.client */

    await gapi.client.load('https://androidpublisher.googleapis.com/$discovery/rest?version=v3');
    /** now we can use gapi.client.androidpublisher */

    /** don't forget to authenticate your client before sending any request to resources: */
    /** declare client_id registered in Google Developers Console */
    const client_id = '<<PUT YOUR CLIENT ID HERE>>';
    const scope = [
        /** View and manage your Google Play Developer account */
        'https://www.googleapis.com/auth/androidpublisher',
    ];
    const immediate = false;
    gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
        if (authResult && !authResult.error) {
            /** handle successful authorization */
            run();
        } else {
            /** handle authorization error */
        }
    });

    async function run() {
        /** Creates a new device tier config for an app. */
        await gapi.client.androidpublisher.applications.deviceTierConfigs.create({
            allowUnknownDevices: true,
            packageName: "Test string",
        }, {
            deviceGroups: [
                {
                    deviceSelectors: [
                        {
                            deviceRam: {
                                maxBytes: "Test string",
                                minBytes: "Test string",
                            },
                            excludedDeviceIds: [
                                {
                                    buildBrand: "Test string",
                                    buildDevice: "Test string",
                                }
                            ],
                            forbiddenSystemFeatures: [
                                {
                                    name: "Test string",
                                }
                            ],
                            includedDeviceIds: [
                                {
                                    buildBrand: "Test string",
                                    buildDevice: "Test string",
                                }
                            ],
                            requiredSystemFeatures: [
                                {
                                    name: "Test string",
                                }
                            ],
                        }
                    ],
                    name: "Test string",
                }
            ],
            deviceTierConfigId: "Test string",
            deviceTierSet: {
                deviceTiers: [
                    {
                        deviceGroupNames: [
                            "Test string"
                        ],
                        level: 42,
                    }
                ],
            },
            userCountrySets: [
                {
                    countryCodes: [
                        "Test string"
                    ],
                    name: "Test string",
                }
            ],
        });
        /** Returns a particular device tier config. */
        await gapi.client.androidpublisher.applications.deviceTierConfigs.get({
            deviceTierConfigId: "Test string",
            packageName: "Test string",
        });
        /** Returns created device tier configs, ordered by descending creation time. */
        await gapi.client.androidpublisher.applications.deviceTierConfigs.list({
            packageName: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Commits an app edit. */
        await gapi.client.androidpublisher.edits.commit({
            changesNotSentForReview: true,
            editId: "Test string",
            packageName: "Test string",
        });
        /** Deletes an app edit. */
        await gapi.client.androidpublisher.edits.delete({
            editId: "Test string",
            packageName: "Test string",
        });
        /** Gets an app edit. */
        await gapi.client.androidpublisher.edits.get({
            editId: "Test string",
            packageName: "Test string",
        });
        /** Creates a new edit for an app. */
        await gapi.client.androidpublisher.edits.insert({
            packageName: "Test string",
        }, {
            expiryTimeSeconds: "Test string",
            id: "Test string",
        });
        /** Validates an app edit. */
        await gapi.client.androidpublisher.edits.validate({
            editId: "Test string",
            packageName: "Test string",
        });
        /**
         * Creates a new APK without uploading the APK itself to Google Play, instead hosting the APK at a specified URL. This function is only available to organizations using Managed Play whose
         * application is configured to restrict distribution to the organizations.
         */
        await gapi.client.androidpublisher.edits.apks.addexternallyhosted({
            editId: "Test string",
            packageName: "Test string",
        }, {
            externallyHostedApk: {
                applicationLabel: "Test string",
                certificateBase64s: [
                    "Test string"
                ],
                externallyHostedUrl: "Test string",
                fileSha1Base64: "Test string",
                fileSha256Base64: "Test string",
                fileSize: "Test string",
                iconBase64: "Test string",
                maximumSdk: 42,
                minimumSdk: 42,
                nativeCodes: [
                    "Test string"
                ],
                packageName: "Test string",
                usesFeatures: [
                    "Test string"
                ],
                usesPermissions: [
                    {
                        maxSdkVersion: 42,
                        name: "Test string",
                    }
                ],
                versionCode: 42,
                versionName: "Test string",
            },
        });
        /** Lists all current APKs of the app and edit. */
        await gapi.client.androidpublisher.edits.apks.list({
            editId: "Test string",
            packageName: "Test string",
        });
        /** Uploads an APK and adds to the current edit. */
        await gapi.client.androidpublisher.edits.apks.upload({
            editId: "Test string",
            packageName: "Test string",
        });
        /** Lists all current Android App Bundles of the app and edit. */
        await gapi.client.androidpublisher.edits.bundles.list({
            editId: "Test string",
            packageName: "Test string",
        });
        /**
         * Uploads a new Android App Bundle to this edit. If you are using the Google API client libraries, please increase the timeout of the http request before calling this endpoint (a timeout
         * of 2 minutes is recommended). See [Timeouts and Errors](https://developers.google.com/api-client-library/java/google-api-java-client/errors) for an example in java.
         */
        await gapi.client.androidpublisher.edits.bundles.upload({
            ackBundleInstallationWarning: true,
            deviceTierConfigId: "Test string",
            editId: "Test string",
            packageName: "Test string",
        });
        /** Gets country availability. */
        await gapi.client.androidpublisher.edits.countryavailability.get({
            editId: "Test string",
            packageName: "Test string",
            track: "Test string",
        });
        /** Uploads a new deobfuscation file and attaches to the specified APK. */
        await gapi.client.androidpublisher.edits.deobfuscationfiles.upload({
            apkVersionCode: 42,
            deobfuscationFileType: "Test string",
            editId: "Test string",
            packageName: "Test string",
        });
        /** Gets details of an app. */
        await gapi.client.androidpublisher.edits.details.get({
            editId: "Test string",
            packageName: "Test string",
        });
        /** Patches details of an app. */
        await gapi.client.androidpublisher.edits.details.patch({
            editId: "Test string",
            packageName: "Test string",
        }, {
            contactEmail: "Test string",
            contactPhone: "Test string",
            contactWebsite: "Test string",
            defaultLanguage: "Test string",
        });
        /** Updates details of an app. */
        await gapi.client.androidpublisher.edits.details.update({
            editId: "Test string",
            packageName: "Test string",
        }, {
            contactEmail: "Test string",
            contactPhone: "Test string",
            contactWebsite: "Test string",
            defaultLanguage: "Test string",
        });
        /** Fetches the expansion file configuration for the specified APK. */
        await gapi.client.androidpublisher.edits.expansionfiles.get({
            apkVersionCode: 42,
            editId: "Test string",
            expansionFileType: "Test string",
            packageName: "Test string",
        });
        /** Patches the APK's expansion file configuration to reference another APK's expansion file. To add a new expansion file use the Upload method. */
        await gapi.client.androidpublisher.edits.expansionfiles.patch({
            apkVersionCode: 42,
            editId: "Test string",
            expansionFileType: "Test string",
            packageName: "Test string",
        }, {
            fileSize: "Test string",
            referencesVersion: 42,
        });
        /** Updates the APK's expansion file configuration to reference another APK's expansion file. To add a new expansion file use the Upload method. */
        await gapi.client.androidpublisher.edits.expansionfiles.update({
            apkVersionCode: 42,
            editId: "Test string",
            expansionFileType: "Test string",
            packageName: "Test string",
        }, {
            fileSize: "Test string",
            referencesVersion: 42,
        });
        /** Uploads a new expansion file and attaches to the specified APK. */
        await gapi.client.androidpublisher.edits.expansionfiles.upload({
            apkVersionCode: 42,
            editId: "Test string",
            expansionFileType: "Test string",
            packageName: "Test string",
        });
        /** Deletes the image (specified by id) from the edit. */
        await gapi.client.androidpublisher.edits.images.delete({
            editId: "Test string",
            imageId: "Test string",
            imageType: "Test string",
            language: "Test string",
            packageName: "Test string",
        });
        /** Deletes all images for the specified language and image type. Returns an empty response if no images are found. */
        await gapi.client.androidpublisher.edits.images.deleteall({
            editId: "Test string",
            imageType: "Test string",
            language: "Test string",
            packageName: "Test string",
        });
        /** Lists all images. The response may be empty. */
        await gapi.client.androidpublisher.edits.images.list({
            editId: "Test string",
            imageType: "Test string",
            language: "Test string",
            packageName: "Test string",
        });
        /** Uploads an image of the specified language and image type, and adds to the edit. */
        await gapi.client.androidpublisher.edits.images.upload({
            editId: "Test string",
            imageType: "Test string",
            language: "Test string",
            packageName: "Test string",
        });
        /** Deletes a localized store listing. */
        await gapi.client.androidpublisher.edits.listings.delete({
            editId: "Test string",
            language: "Test string",
            packageName: "Test string",
        });
        /** Deletes all store listings. */
        await gapi.client.androidpublisher.edits.listings.deleteall({
            editId: "Test string",
            packageName: "Test string",
        });
        /** Gets a localized store listing. */
        await gapi.client.androidpublisher.edits.listings.get({
            editId: "Test string",
            language: "Test string",
            packageName: "Test string",
        });
        /** Lists all localized store listings. */
        await gapi.client.androidpublisher.edits.listings.list({
            editId: "Test string",
            packageName: "Test string",
        });
        /** Patches a localized store listing. */
        await gapi.client.androidpublisher.edits.listings.patch({
            editId: "Test string",
            language: "Test string",
            packageName: "Test string",
        }, {
            fullDescription: "Test string",
            language: "Test string",
            shortDescription: "Test string",
            title: "Test string",
            video: "Test string",
        });
        /** Creates or updates a localized store listing. */
        await gapi.client.androidpublisher.edits.listings.update({
            editId: "Test string",
            language: "Test string",
            packageName: "Test string",
        }, {
            fullDescription: "Test string",
            language: "Test string",
            shortDescription: "Test string",
            title: "Test string",
            video: "Test string",
        });
        /** Gets testers. Note: Testers resource does not support email lists. */
        await gapi.client.androidpublisher.edits.testers.get({
            editId: "Test string",
            packageName: "Test string",
            track: "Test string",
        });
        /** Patches testers. Note: Testers resource does not support email lists. */
        await gapi.client.androidpublisher.edits.testers.patch({
            editId: "Test string",
            packageName: "Test string",
            track: "Test string",
        }, {
            googleGroups: [
                "Test string"
            ],
        });
        /** Updates testers. Note: Testers resource does not support email lists. */
        await gapi.client.androidpublisher.edits.testers.update({
            editId: "Test string",
            packageName: "Test string",
            track: "Test string",
        }, {
            googleGroups: [
                "Test string"
            ],
        });
        /** Gets a track. */
        await gapi.client.androidpublisher.edits.tracks.get({
            editId: "Test string",
            packageName: "Test string",
            track: "Test string",
        });
        /** Lists all tracks. */
        await gapi.client.androidpublisher.edits.tracks.list({
            editId: "Test string",
            packageName: "Test string",
        });
        /** Patches a track. */
        await gapi.client.androidpublisher.edits.tracks.patch({
            editId: "Test string",
            packageName: "Test string",
            track: "Test string",
        }, {
            releases: [
                {
                    countryTargeting: {
                        countries: [
                            "Test string"
                        ],
                        includeRestOfWorld: true,
                    },
                    inAppUpdatePriority: 42,
                    name: "Test string",
                    releaseNotes: [
                        {
                            language: "Test string",
                            text: "Test string",
                        }
                    ],
                    status: "Test string",
                    userFraction: 42,
                    versionCodes: [
                        "Test string"
                    ],
                }
            ],
            track: "Test string",
        });
        /** Updates a track. */
        await gapi.client.androidpublisher.edits.tracks.update({
            editId: "Test string",
            packageName: "Test string",
            track: "Test string",
        }, {
            releases: [
                {
                    countryTargeting: {
                        countries: [
                            "Test string"
                        ],
                        includeRestOfWorld: true,
                    },
                    inAppUpdatePriority: 42,
                    name: "Test string",
                    releaseNotes: [
                        {
                            language: "Test string",
                            text: "Test string",
                        }
                    ],
                    status: "Test string",
                    userFraction: 42,
                    versionCodes: [
                        "Test string"
                    ],
                }
            ],
            track: "Test string",
        });
        /** Creates a new external transaction. */
        await gapi.client.androidpublisher.externaltransactions.createexternaltransaction({
            externalTransactionId: "Test string",
            parent: "Test string",
        }, {
            createTime: "Test string",
            currentPreTaxAmount: {
                currency: "Test string",
                priceMicros: "Test string",
            },
            currentTaxAmount: {
                currency: "Test string",
                priceMicros: "Test string",
            },
            externalTransactionId: "Test string",
            oneTimeTransaction: {
                externalTransactionToken: "Test string",
            },
            originalPreTaxAmount: {
                currency: "Test string",
                priceMicros: "Test string",
            },
            originalTaxAmount: {
                currency: "Test string",
                priceMicros: "Test string",
            },
            packageName: "Test string",
            recurringTransaction: {
                externalSubscription: {
                    subscriptionType: "Test string",
                },
                externalTransactionToken: "Test string",
                initialExternalTransactionId: "Test string",
            },
            testPurchase: {
            },
            transactionState: "Test string",
            transactionTime: "Test string",
            userTaxAddress: {
                regionCode: "Test string",
            },
        });
        /** Gets an existing external transaction. */
        await gapi.client.androidpublisher.externaltransactions.getexternaltransaction({
            name: "Test string",
        });
        /** Refunds or partially refunds an existing external transaction. */
        await gapi.client.androidpublisher.externaltransactions.refundexternaltransaction({
            name: "Test string",
        }, {
            fullRefund: {
            },
            partialRefund: {
                refundId: "Test string",
                refundPreTaxAmount: {
                    currency: "Test string",
                    priceMicros: "Test string",
                },
            },
            refundTime: "Test string",
        });
        /** Downloads a single signed APK generated from an app bundle. */
        await gapi.client.androidpublisher.generatedapks.download({
            downloadId: "Test string",
            packageName: "Test string",
            versionCode: 42,
        });
        /** Returns download metadata for all APKs that were generated from a given app bundle. */
        await gapi.client.androidpublisher.generatedapks.list({
            packageName: "Test string",
            versionCode: 42,
        });
        /** Grant access for a user to the given package. */
        await gapi.client.androidpublisher.grants.create({
            parent: "Test string",
        }, {
            appLevelPermissions: [
                "Test string"
            ],
            name: "Test string",
            packageName: "Test string",
        });
        /** Removes all access for the user to the given package or developer account. */
        await gapi.client.androidpublisher.grants.delete({
            name: "Test string",
        });
        /** Updates access for the user to the given package. */
        await gapi.client.androidpublisher.grants.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            appLevelPermissions: [
                "Test string"
            ],
            name: "Test string",
            packageName: "Test string",
        });
        /** Deletes an in-app product (i.e. a managed product or a subscription). */
        await gapi.client.androidpublisher.inappproducts.delete({
            packageName: "Test string",
            sku: "Test string",
        });
        /** Gets an in-app product, which can be a managed product or a subscription. */
        await gapi.client.androidpublisher.inappproducts.get({
            packageName: "Test string",
            sku: "Test string",
        });
        /** Creates an in-app product (i.e. a managed product or a subscription). */
        await gapi.client.androidpublisher.inappproducts.insert({
            autoConvertMissingPrices: true,
            packageName: "Test string",
        }, {
            defaultLanguage: "Test string",
            defaultPrice: {
                currency: "Test string",
                priceMicros: "Test string",
            },
            gracePeriod: "Test string",
            listings: {
                A: {
                    benefits: [
                        "Test string"
                    ],
                    description: "Test string",
                    title: "Test string",
                }
            },
            managedProductTaxesAndComplianceSettings: {
                eeaWithdrawalRightType: "Test string",
                taxRateInfoByRegionCode: {
                    A: {
                        eligibleForStreamingServiceTaxRate: true,
                        streamingTaxType: "Test string",
                        taxTier: "Test string",
                    }
                },
            },
            packageName: "Test string",
            prices: {
                A: {
                    currency: "Test string",
                    priceMicros: "Test string",
                }
            },
            purchaseType: "Test string",
            sku: "Test string",
            status: "Test string",
            subscriptionPeriod: "Test string",
            subscriptionTaxesAndComplianceSettings: {
                eeaWithdrawalRightType: "Test string",
                taxRateInfoByRegionCode: {
                    A: {
                        eligibleForStreamingServiceTaxRate: true,
                        streamingTaxType: "Test string",
                        taxTier: "Test string",
                    }
                },
            },
            trialPeriod: "Test string",
        });
        /**
         * Lists all in-app products - both managed products and subscriptions. If an app has a large number of in-app products, the response may be paginated. In this case the response field
         * `tokenPagination.nextPageToken` will be set and the caller should provide its value as a `token` request parameter to retrieve the next page.
         */
        await gapi.client.androidpublisher.inappproducts.list({
            maxResults: 42,
            packageName: "Test string",
            startIndex: 42,
            token: "Test string",
        });
        /** Patches an in-app product (i.e. a managed product or a subscription). */
        await gapi.client.androidpublisher.inappproducts.patch({
            autoConvertMissingPrices: true,
            packageName: "Test string",
            sku: "Test string",
        }, {
            defaultLanguage: "Test string",
            defaultPrice: {
                currency: "Test string",
                priceMicros: "Test string",
            },
            gracePeriod: "Test string",
            listings: {
                A: {
                    benefits: [
                        "Test string"
                    ],
                    description: "Test string",
                    title: "Test string",
                }
            },
            managedProductTaxesAndComplianceSettings: {
                eeaWithdrawalRightType: "Test string",
                taxRateInfoByRegionCode: {
                    A: {
                        eligibleForStreamingServiceTaxRate: true,
                        streamingTaxType: "Test string",
                        taxTier: "Test string",
                    }
                },
            },
            packageName: "Test string",
            prices: {
                A: {
                    currency: "Test string",
                    priceMicros: "Test string",
                }
            },
            purchaseType: "Test string",
            sku: "Test string",
            status: "Test string",
            subscriptionPeriod: "Test string",
            subscriptionTaxesAndComplianceSettings: {
                eeaWithdrawalRightType: "Test string",
                taxRateInfoByRegionCode: {
                    A: {
                        eligibleForStreamingServiceTaxRate: true,
                        streamingTaxType: "Test string",
                        taxTier: "Test string",
                    }
                },
            },
            trialPeriod: "Test string",
        });
        /** Updates an in-app product (i.e. a managed product or a subscription). */
        await gapi.client.androidpublisher.inappproducts.update({
            allowMissing: true,
            autoConvertMissingPrices: true,
            packageName: "Test string",
            sku: "Test string",
        }, {
            defaultLanguage: "Test string",
            defaultPrice: {
                currency: "Test string",
                priceMicros: "Test string",
            },
            gracePeriod: "Test string",
            listings: {
                A: {
                    benefits: [
                        "Test string"
                    ],
                    description: "Test string",
                    title: "Test string",
                }
            },
            managedProductTaxesAndComplianceSettings: {
                eeaWithdrawalRightType: "Test string",
                taxRateInfoByRegionCode: {
                    A: {
                        eligibleForStreamingServiceTaxRate: true,
                        streamingTaxType: "Test string",
                        taxTier: "Test string",
                    }
                },
            },
            packageName: "Test string",
            prices: {
                A: {
                    currency: "Test string",
                    priceMicros: "Test string",
                }
            },
            purchaseType: "Test string",
            sku: "Test string",
            status: "Test string",
            subscriptionPeriod: "Test string",
            subscriptionTaxesAndComplianceSettings: {
                eeaWithdrawalRightType: "Test string",
                taxRateInfoByRegionCode: {
                    A: {
                        eligibleForStreamingServiceTaxRate: true,
                        streamingTaxType: "Test string",
                        taxTier: "Test string",
                    }
                },
            },
            trialPeriod: "Test string",
        });
        /**
         * Uploads an APK to internal app sharing. If you are using the Google API client libraries, please increase the timeout of the http request before calling this endpoint (a timeout of 2
         * minutes is recommended). See [Timeouts and Errors](https://developers.google.com/api-client-library/java/google-api-java-client/errors) for an example in java.
         */
        await gapi.client.androidpublisher.internalappsharingartifacts.uploadapk({
            packageName: "Test string",
        });
        /**
         * Uploads an app bundle to internal app sharing. If you are using the Google API client libraries, please increase the timeout of the http request before calling this endpoint (a timeout
         * of 2 minutes is recommended). See [Timeouts and Errors](https://developers.google.com/api-client-library/java/google-api-java-client/errors) for an example in java.
         */
        await gapi.client.androidpublisher.internalappsharingartifacts.uploadbundle({
            packageName: "Test string",
        });
        /** Calculates the region prices, using today's exchange rate and country-specific pricing patterns, based on the price in the request for a set of regions. */
        await gapi.client.androidpublisher.monetization.convertRegionPrices({
            packageName: "Test string",
        }, {
            price: {
                currencyCode: "Test string",
                nanos: 42,
                units: "Test string",
            },
        });
        /**
         * Archives a subscription. Can only be done if at least one base plan was active in the past, and no base plan is available for new or existing subscribers currently. This action is
         * irreversible, and the subscription ID will remain reserved.
         */
        await gapi.client.androidpublisher.monetization.subscriptions.archive({
            packageName: "Test string",
            productId: "Test string",
        }, {
        });
        /** Creates a new subscription. Newly added base plans will remain in draft state until activated. */
        await gapi.client.androidpublisher.monetization.subscriptions.create({
            packageName: "Test string",
            productId: "Test string",
            "regionsVersion.version": "Test string",
        }, {
            archived: true,
            basePlans: [
                {
                    autoRenewingBasePlanType: {
                        billingPeriodDuration: "Test string",
                        gracePeriodDuration: "Test string",
                        legacyCompatible: true,
                        legacyCompatibleSubscriptionOfferId: "Test string",
                        prorationMode: "Test string",
                        resubscribeState: "Test string",
                    },
                    basePlanId: "Test string",
                    offerTags: [
                        {
                            tag: "Test string",
                        }
                    ],
                    otherRegionsConfig: {
                        eurPrice: {
                            currencyCode: "Test string",
                            nanos: 42,
                            units: "Test string",
                        },
                        newSubscriberAvailability: true,
                        usdPrice: {
                            currencyCode: "Test string",
                            nanos: 42,
                            units: "Test string",
                        },
                    },
                    prepaidBasePlanType: {
                        billingPeriodDuration: "Test string",
                        timeExtension: "Test string",
                    },
                    regionalConfigs: [
                        {
                            newSubscriberAvailability: true,
                            price: {
                                currencyCode: "Test string",
                                nanos: 42,
                                units: "Test string",
                            },
                            regionCode: "Test string",
                        }
                    ],
                    state: "Test string",
                }
            ],
            listings: [
                {
                    benefits: [
                        "Test string"
                    ],
                    description: "Test string",
                    languageCode: "Test string",
                    title: "Test string",
                }
            ],
            packageName: "Test string",
            productId: "Test string",
            taxAndComplianceSettings: {
                eeaWithdrawalRightType: "Test string",
                taxRateInfoByRegionCode: {
                    A: {
                        eligibleForStreamingServiceTaxRate: true,
                        streamingTaxType: "Test string",
                        taxTier: "Test string",
                    }
                },
            },
        });
        /** Deletes a subscription. A subscription can only be deleted if it has never had a base plan published. */
        await gapi.client.androidpublisher.monetization.subscriptions.delete({
            packageName: "Test string",
            productId: "Test string",
        });
        /** Reads a single subscription. */
        await gapi.client.androidpublisher.monetization.subscriptions.get({
            packageName: "Test string",
            productId: "Test string",
        });
        /** Lists all subscriptions under a given app. */
        await gapi.client.androidpublisher.monetization.subscriptions.list({
            packageName: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            showArchived: true,
        });
        /** Updates an existing subscription. */
        await gapi.client.androidpublisher.monetization.subscriptions.patch({
            packageName: "Test string",
            productId: "Test string",
            "regionsVersion.version": "Test string",
            updateMask: "Test string",
        }, {
            archived: true,
            basePlans: [
                {
                    autoRenewingBasePlanType: {
                        billingPeriodDuration: "Test string",
                        gracePeriodDuration: "Test string",
                        legacyCompatible: true,
                        legacyCompatibleSubscriptionOfferId: "Test string",
                        prorationMode: "Test string",
                        resubscribeState: "Test string",
                    },
                    basePlanId: "Test string",
                    offerTags: [
                        {
                            tag: "Test string",
                        }
                    ],
                    otherRegionsConfig: {
                        eurPrice: {
                            currencyCode: "Test string",
                            nanos: 42,
                            units: "Test string",
                        },
                        newSubscriberAvailability: true,
                        usdPrice: {
                            currencyCode: "Test string",
                            nanos: 42,
                            units: "Test string",
                        },
                    },
                    prepaidBasePlanType: {
                        billingPeriodDuration: "Test string",
                        timeExtension: "Test string",
                    },
                    regionalConfigs: [
                        {
                            newSubscriberAvailability: true,
                            price: {
                                currencyCode: "Test string",
                                nanos: 42,
                                units: "Test string",
                            },
                            regionCode: "Test string",
                        }
                    ],
                    state: "Test string",
                }
            ],
            listings: [
                {
                    benefits: [
                        "Test string"
                    ],
                    description: "Test string",
                    languageCode: "Test string",
                    title: "Test string",
                }
            ],
            packageName: "Test string",
            productId: "Test string",
            taxAndComplianceSettings: {
                eeaWithdrawalRightType: "Test string",
                taxRateInfoByRegionCode: {
                    A: {
                        eligibleForStreamingServiceTaxRate: true,
                        streamingTaxType: "Test string",
                        taxTier: "Test string",
                    }
                },
            },
        });
        /** Activates a base plan. Once activated, base plans will be available to new subscribers. */
        await gapi.client.androidpublisher.monetization.subscriptions.basePlans.activate({
            basePlanId: "Test string",
            packageName: "Test string",
            productId: "Test string",
        }, {
        });
        /** Deactivates a base plan. Once deactivated, the base plan will become unavailable to new subscribers, but existing subscribers will maintain their subscription */
        await gapi.client.androidpublisher.monetization.subscriptions.basePlans.deactivate({
            basePlanId: "Test string",
            packageName: "Test string",
            productId: "Test string",
        }, {
        });
        /** Deletes a base plan. Can only be done for draft base plans. This action is irreversible. */
        await gapi.client.androidpublisher.monetization.subscriptions.basePlans.delete({
            basePlanId: "Test string",
            packageName: "Test string",
            productId: "Test string",
        });
        /**
         * Migrates subscribers who are receiving an historical subscription price to the currently-offered price for the specified region. Requests will cause price change notifications to be
         * sent to users who are currently receiving an historical price older than the supplied timestamp. Subscribers who do not agree to the new price will have their subscription ended at the
         * next renewal.
         */
        await gapi.client.androidpublisher.monetization.subscriptions.basePlans.migratePrices({
            basePlanId: "Test string",
            packageName: "Test string",
            productId: "Test string",
        }, {
            regionalPriceMigrations: [
                {
                    oldestAllowedPriceVersionTime: "Test string",
                    regionCode: "Test string",
                }
            ],
            regionsVersion: {
                version: "Test string",
            },
        });
        /** Activates a subscription offer. Once activated, subscription offers will be available to new subscribers. */
        await gapi.client.androidpublisher.monetization.subscriptions.basePlans.offers.activate({
            basePlanId: "Test string",
            offerId: "Test string",
            packageName: "Test string",
            productId: "Test string",
        }, {
        });
        /** Creates a new subscription offer. Only auto-renewing base plans can have subscription offers. The offer state will be DRAFT until it is activated. */
        await gapi.client.androidpublisher.monetization.subscriptions.basePlans.offers.create({
            basePlanId: "Test string",
            offerId: "Test string",
            packageName: "Test string",
            productId: "Test string",
            "regionsVersion.version": "Test string",
        }, {
            basePlanId: "Test string",
            offerId: "Test string",
            offerTags: [
                {
                    tag: "Test string",
                }
            ],
            otherRegionsConfig: {
                otherRegionsNewSubscriberAvailability: true,
            },
            packageName: "Test string",
            phases: [
                {
                    duration: "Test string",
                    otherRegionsConfig: {
                        absoluteDiscounts: {
                            eurPrice: {
                                currencyCode: "Test string",
                                nanos: 42,
                                units: "Test string",
                            },
                            usdPrice: {
                                currencyCode: "Test string",
                                nanos: 42,
                                units: "Test string",
                            },
                        },
                        otherRegionsPrices: {
                            eurPrice: {
                                currencyCode: "Test string",
                                nanos: 42,
                                units: "Test string",
                            },
                            usdPrice: {
                                currencyCode: "Test string",
                                nanos: 42,
                                units: "Test string",
                            },
                        },
                        relativeDiscount: 42,
                    },
                    recurrenceCount: 42,
                    regionalConfigs: [
                        {
                            absoluteDiscount: {
                                currencyCode: "Test string",
                                nanos: 42,
                                units: "Test string",
                            },
                            price: {
                                currencyCode: "Test string",
                                nanos: 42,
                                units: "Test string",
                            },
                            regionCode: "Test string",
                            relativeDiscount: 42,
                        }
                    ],
                }
            ],
            productId: "Test string",
            regionalConfigs: [
                {
                    newSubscriberAvailability: true,
                    regionCode: "Test string",
                }
            ],
            state: "Test string",
            targeting: {
                acquisitionRule: {
                    scope: {
                        specificSubscriptionInApp: "Test string",
                    },
                },
                upgradeRule: {
                    billingPeriodDuration: "Test string",
                    oncePerUser: true,
                    scope: {
                        specificSubscriptionInApp: "Test string",
                    },
                },
            },
        });
        /** Deactivates a subscription offer. Once deactivated, existing subscribers will maintain their subscription, but the offer will become unavailable to new subscribers. */
        await gapi.client.androidpublisher.monetization.subscriptions.basePlans.offers.deactivate({
            basePlanId: "Test string",
            offerId: "Test string",
            packageName: "Test string",
            productId: "Test string",
        }, {
        });
        /** Deletes a subscription offer. Can only be done for draft offers. This action is irreversible. */
        await gapi.client.androidpublisher.monetization.subscriptions.basePlans.offers.delete({
            basePlanId: "Test string",
            offerId: "Test string",
            packageName: "Test string",
            productId: "Test string",
        });
        /** Reads a single offer */
        await gapi.client.androidpublisher.monetization.subscriptions.basePlans.offers.get({
            basePlanId: "Test string",
            offerId: "Test string",
            packageName: "Test string",
            productId: "Test string",
        });
        /** Lists all offers under a given subscription. */
        await gapi.client.androidpublisher.monetization.subscriptions.basePlans.offers.list({
            basePlanId: "Test string",
            packageName: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            productId: "Test string",
        });
        /** Updates an existing subscription offer. */
        await gapi.client.androidpublisher.monetization.subscriptions.basePlans.offers.patch({
            basePlanId: "Test string",
            offerId: "Test string",
            packageName: "Test string",
            productId: "Test string",
            "regionsVersion.version": "Test string",
            updateMask: "Test string",
        }, {
            basePlanId: "Test string",
            offerId: "Test string",
            offerTags: [
                {
                    tag: "Test string",
                }
            ],
            otherRegionsConfig: {
                otherRegionsNewSubscriberAvailability: true,
            },
            packageName: "Test string",
            phases: [
                {
                    duration: "Test string",
                    otherRegionsConfig: {
                        absoluteDiscounts: {
                            eurPrice: {
                                currencyCode: "Test string",
                                nanos: 42,
                                units: "Test string",
                            },
                            usdPrice: {
                                currencyCode: "Test string",
                                nanos: 42,
                                units: "Test string",
                            },
                        },
                        otherRegionsPrices: {
                            eurPrice: {
                                currencyCode: "Test string",
                                nanos: 42,
                                units: "Test string",
                            },
                            usdPrice: {
                                currencyCode: "Test string",
                                nanos: 42,
                                units: "Test string",
                            },
                        },
                        relativeDiscount: 42,
                    },
                    recurrenceCount: 42,
                    regionalConfigs: [
                        {
                            absoluteDiscount: {
                                currencyCode: "Test string",
                                nanos: 42,
                                units: "Test string",
                            },
                            price: {
                                currencyCode: "Test string",
                                nanos: 42,
                                units: "Test string",
                            },
                            regionCode: "Test string",
                            relativeDiscount: 42,
                        }
                    ],
                }
            ],
            productId: "Test string",
            regionalConfigs: [
                {
                    newSubscriberAvailability: true,
                    regionCode: "Test string",
                }
            ],
            state: "Test string",
            targeting: {
                acquisitionRule: {
                    scope: {
                        specificSubscriptionInApp: "Test string",
                    },
                },
                upgradeRule: {
                    billingPeriodDuration: "Test string",
                    oncePerUser: true,
                    scope: {
                        specificSubscriptionInApp: "Test string",
                    },
                },
            },
        });
        /** Refunds a user's subscription or in-app purchase order. Orders older than 1 year cannot be refunded. */
        await gapi.client.androidpublisher.orders.refund({
            orderId: "Test string",
            packageName: "Test string",
            revoke: true,
        });
        /** Acknowledges a purchase of an inapp item. */
        await gapi.client.androidpublisher.purchases.products.acknowledge({
            packageName: "Test string",
            productId: "Test string",
            token: "Test string",
        }, {
            developerPayload: "Test string",
        });
        /** Consumes a purchase for an inapp item. */
        await gapi.client.androidpublisher.purchases.products.consume({
            packageName: "Test string",
            productId: "Test string",
            token: "Test string",
        });
        /** Checks the purchase and consumption status of an inapp item. */
        await gapi.client.androidpublisher.purchases.products.get({
            packageName: "Test string",
            productId: "Test string",
            token: "Test string",
        });
        /** Acknowledges a subscription purchase. */
        await gapi.client.androidpublisher.purchases.subscriptions.acknowledge({
            packageName: "Test string",
            subscriptionId: "Test string",
            token: "Test string",
        }, {
            developerPayload: "Test string",
        });
        /** Cancels a user's subscription purchase. The subscription remains valid until its expiration time. */
        await gapi.client.androidpublisher.purchases.subscriptions.cancel({
            packageName: "Test string",
            subscriptionId: "Test string",
            token: "Test string",
        });
        /** Defers a user's subscription purchase until a specified future expiration time. */
        await gapi.client.androidpublisher.purchases.subscriptions.defer({
            packageName: "Test string",
            subscriptionId: "Test string",
            token: "Test string",
        }, {
            deferralInfo: {
                desiredExpiryTimeMillis: "Test string",
                expectedExpiryTimeMillis: "Test string",
            },
        });
        /** Checks whether a user's subscription purchase is valid and returns its expiry time. */
        await gapi.client.androidpublisher.purchases.subscriptions.get({
            packageName: "Test string",
            subscriptionId: "Test string",
            token: "Test string",
        });
        /** Refunds a user's subscription purchase, but the subscription remains valid until its expiration time and it will continue to recur. */
        await gapi.client.androidpublisher.purchases.subscriptions.refund({
            packageName: "Test string",
            subscriptionId: "Test string",
            token: "Test string",
        });
        /** Refunds and immediately revokes a user's subscription purchase. Access to the subscription will be terminated immediately and it will stop recurring. */
        await gapi.client.androidpublisher.purchases.subscriptions.revoke({
            packageName: "Test string",
            subscriptionId: "Test string",
            token: "Test string",
        });
        /** Get metadata about a subscription */
        await gapi.client.androidpublisher.purchases.subscriptionsv2.get({
            packageName: "Test string",
            token: "Test string",
        });
        /** Lists the purchases that were canceled, refunded or charged-back. */
        await gapi.client.androidpublisher.purchases.voidedpurchases.list({
            endTime: "Test string",
            maxResults: 42,
            packageName: "Test string",
            startIndex: 42,
            startTime: "Test string",
            token: "Test string",
            type: 42,
        });
        /** Gets a single review. */
        await gapi.client.androidpublisher.reviews.get({
            packageName: "Test string",
            reviewId: "Test string",
            translationLanguage: "Test string",
        });
        /** Lists all reviews. */
        await gapi.client.androidpublisher.reviews.list({
            maxResults: 42,
            packageName: "Test string",
            startIndex: 42,
            token: "Test string",
            translationLanguage: "Test string",
        });
        /** Replies to a single review, or updates an existing reply. */
        await gapi.client.androidpublisher.reviews.reply({
            packageName: "Test string",
            reviewId: "Test string",
        }, {
            replyText: "Test string",
        });
        /** Creates an APK which is suitable for inclusion in a system image from an already uploaded Android App Bundle. */
        await gapi.client.androidpublisher.systemapks.variants.create({
            packageName: "Test string",
            versionCode: "Test string",
        }, {
            deviceSpec: {
                screenDensity: 42,
                supportedAbis: [
                    "Test string"
                ],
                supportedLocales: [
                    "Test string"
                ],
            },
            variantId: 42,
        });
        /** Downloads a previously created system APK which is suitable for inclusion in a system image. */
        await gapi.client.androidpublisher.systemapks.variants.download({
            packageName: "Test string",
            variantId: 42,
            versionCode: "Test string",
        });
        /** Returns a previously created system APK variant. */
        await gapi.client.androidpublisher.systemapks.variants.get({
            packageName: "Test string",
            variantId: 42,
            versionCode: "Test string",
        });
        /** Returns the list of previously created system APK variants. */
        await gapi.client.androidpublisher.systemapks.variants.list({
            packageName: "Test string",
            versionCode: "Test string",
        });
        /** Grant access for a user to the given developer account. */
        await gapi.client.androidpublisher.users.create({
            parent: "Test string",
        }, {
            accessState: "Test string",
            developerAccountPermissions: [
                "Test string"
            ],
            email: "Test string",
            expirationTime: "Test string",
            grants: [
                {
                    appLevelPermissions: [
                        "Test string"
                    ],
                    name: "Test string",
                    packageName: "Test string",
                }
            ],
            name: "Test string",
            partial: true,
        });
        /** Removes all access for the user to the given developer account. */
        await gapi.client.androidpublisher.users.delete({
            name: "Test string",
        });
        /** Lists all users with access to a developer account. */
        await gapi.client.androidpublisher.users.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates access for the user to the developer account. */
        await gapi.client.androidpublisher.users.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            accessState: "Test string",
            developerAccountPermissions: [
                "Test string"
            ],
            email: "Test string",
            expirationTime: "Test string",
            grants: [
                {
                    appLevelPermissions: [
                        "Test string"
                    ],
                    name: "Test string",
                    packageName: "Test string",
                }
            ],
            name: "Test string",
            partial: true,
        });
    }
});
