/* Type definitions for non-npm package Google Play Android Developer API v3 0.0 */
// Project: https://developers.google.com/android-publisher
// Definitions by: Maxim Mazurok <https://github.com/Maxim-Mazurok>
//                 Nick Amoscato <https://github.com/namoscato>
//                 Declan Vong <https://github.com/declanvong>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped

// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
// Generated from: https://androidpublisher.googleapis.com/$discovery/rest?version=v3
// Revision: 20230420

/// <reference types="gapi.client" />

declare namespace gapi.client {
    /** Load Google Play Android Developer API v3 */
    function load(urlOrObject: "https://androidpublisher.googleapis.com/$discovery/rest?version=v3"): Promise<void>;
    /** @deprecated Please load APIs with discovery documents. */
    function load(name: "androidpublisher", version: "v3"): Promise<void>;
    /** @deprecated Please load APIs with discovery documents. */
    function load(name: "androidpublisher", version: "v3", callback: () => any): void;

    namespace androidpublisher {
        interface AcquisitionTargetingRule {
            /** Required. The scope of subscriptions this rule considers. Only allows "this subscription" and "any subscription in app". */
            scope?: TargetingRuleScope;
        }
        // tslint:disable-next-line:no-empty-interface
        interface ActivateBasePlanRequest {
        }
        // tslint:disable-next-line:no-empty-interface
        interface ActivateSubscriptionOfferRequest {
        }
        interface Apk {
            /** Information about the binary payload of this APK. */
            binary?: ApkBinary;
            /** The version code of the APK, as specified in the manifest file. */
            versionCode?: number;
        }
        interface ApkBinary {
            /** A sha1 hash of the APK payload, encoded as a hex string and matching the output of the sha1sum command. */
            sha1?: string;
            /** A sha256 hash of the APK payload, encoded as a hex string and matching the output of the sha256sum command. */
            sha256?: string;
        }
        interface ApksAddExternallyHostedRequest {
            /** The definition of the externally-hosted APK and where it is located. */
            externallyHostedApk?: ExternallyHostedApk;
        }
        interface ApksAddExternallyHostedResponse {
            /** The definition of the externally-hosted APK and where it is located. */
            externallyHostedApk?: ExternallyHostedApk;
        }
        interface ApksListResponse {
            /** All APKs. */
            apks?: Apk[];
            /** The kind of this response ("androidpublisher#apksListResponse"). */
            kind?: string;
        }
        interface AppDetails {
            /** The user-visible support email for this app. */
            contactEmail?: string;
            /** The user-visible support telephone number for this app. */
            contactPhone?: string;
            /** The user-visible website for this app. */
            contactWebsite?: string;
            /** Default language code, in BCP 47 format (eg "en-US"). */
            defaultLanguage?: string;
        }
        interface AppEdit {
            /** Output only. The time (as seconds since Epoch) at which the edit will expire and will be no longer valid for use. */
            expiryTimeSeconds?: string;
            /** Output only. Identifier of the edit. Can be used in subsequent API calls. */
            id?: string;
        }
        // tslint:disable-next-line:no-empty-interface
        interface ArchiveSubscriptionRequest {
        }
        interface AutoRenewingBasePlanType {
            /** Required. Subscription period, specified in ISO 8601 format. For a list of acceptable billing periods, refer to the help center. */
            billingPeriodDuration?: string;
            /**
             * Grace period of the subscription, specified in ISO 8601 format. Acceptable values are P0D (zero days), P3D (3 days), P7D (7 days), P14D (14 days), and P30D (30 days). If not
             * specified, a default value will be used based on the recurring period duration.
             */
            gracePeriodDuration?: string;
            /**
             * Whether the renewing base plan is backward compatible. The backward compatible base plan is returned by the Google Play Billing Library deprecated method querySkuDetailsAsync().
             * Only one renewing base plan can be marked as legacy compatible for a given subscription.
             */
            legacyCompatible?: boolean;
            /**
             * Subscription offer id which is legacy compatible. The backward compatible subscription offer is returned by the Google Play Billing Library deprecated method querySkuDetailsAsync().
             * Only one subscription offer can be marked as legacy compatible for a given renewing base plan. To have no Subscription offer as legacy compatible set this field as empty string.
             */
            legacyCompatibleSubscriptionOfferId?: string;
            /** The proration mode for the base plan determines what happens when a user switches to this plan from another base plan. If unspecified, defaults to CHARGE_ON_NEXT_BILLING_DATE. */
            prorationMode?: string;
            /** Whether users should be able to resubscribe to this base plan in Google Play surfaces. Defaults to RESUBSCRIBE_STATE_ACTIVE if not specified. */
            resubscribeState?: string;
        }
        interface AutoRenewingPlan {
            /** If the subscription is currently set to auto-renew, e.g. the user has not canceled the subscription */
            autoRenewEnabled?: boolean;
            /** The information of the last price change for the item since subscription signup. */
            priceChangeDetails?: SubscriptionItemPriceChangeDetails;
        }
        interface BasePlan {
            /** Set when the base plan automatically renews at a regular interval. */
            autoRenewingBasePlanType?: AutoRenewingBasePlanType;
            /**
             * Required. Immutable. The unique identifier of this base plan. Must be unique within the subscription, and conform with RFC-1034. That is, this ID can only contain lower-case letters
             * (a-z), numbers (0-9), and hyphens (-), and be at most 63 characters.
             */
            basePlanId?: string;
            /**
             * List of up to 20 custom tags specified for this base plan, and returned to the app through the billing library. Subscription offers for this base plan will also receive these offer
             * tags in the billing library.
             */
            offerTags?: OfferTag[];
            /**
             * Pricing information for any new locations Play may launch in the future. If omitted, the BasePlan will not be automatically available any new locations Play may launch in the
             * future.
             */
            otherRegionsConfig?: OtherRegionsBasePlanConfig;
            /** Set when the base plan does not automatically renew at the end of the billing period. */
            prepaidBasePlanType?: PrepaidBasePlanType;
            /** Region-specific information for this base plan. */
            regionalConfigs?: RegionalBasePlanConfig[];
            /**
             * Output only. The state of the base plan, i.e. whether it's active. Draft and inactive base plans can be activated or deleted. Active base plans can be made inactive. Inactive base
             * plans can be canceled. This field cannot be changed by updating the resource. Use the dedicated endpoints instead.
             */
            state?: string;
        }
        interface Bundle {
            /** A sha1 hash of the upload payload, encoded as a hex string and matching the output of the sha1sum command. */
            sha1?: string;
            /** A sha256 hash of the upload payload, encoded as a hex string and matching the output of the sha256sum command. */
            sha256?: string;
            /** The version code of the Android App Bundle, as specified in the Android App Bundle's base module APK manifest file. */
            versionCode?: number;
        }
        interface BundlesListResponse {
            /** All app bundles. */
            bundles?: Bundle[];
            /** The kind of this response ("androidpublisher#bundlesListResponse"). */
            kind?: string;
        }
        interface CanceledStateContext {
            /** Subscription was canceled by the developer. */
            developerInitiatedCancellation?: any;
            /** Subscription was replaced by a new subscription. */
            replacementCancellation?: any;
            /** Subscription was canceled by the system, for example because of a billing problem. */
            systemInitiatedCancellation?: any;
            /** Subscription was canceled by user. */
            userInitiatedCancellation?: UserInitiatedCancellation;
        }
        interface CancelSurveyResult {
            /** The reason the user selected in the cancel survey. */
            reason?: string;
            /** Only set for CANCEL_SURVEY_REASON_OTHERS. This is the user's freeform response to the survey. */
            reasonUserInput?: string;
        }
        interface Comment {
            /** A comment from a developer. */
            developerComment?: DeveloperComment;
            /** A comment from a user. */
            userComment?: UserComment;
        }
        interface ConvertedOtherRegionsPrice {
            /** Price in EUR to use for the "Other regions" location exclusive of taxes. */
            eurPrice?: Money;
            /** Price in USD to use for the "Other regions" location exclusive of taxes. */
            usdPrice?: Money;
        }
        interface ConvertedRegionPrice {
            /** The converted price tax inclusive. */
            price?: Money;
            /** The region code of the region. */
            regionCode?: string;
            /** The tax amount of the converted price. */
            taxAmount?: Money;
        }
        interface ConvertRegionPricesRequest {
            /** The intital price to convert other regions from. Tax exclusive. */
            price?: Money;
        }
        interface ConvertRegionPricesResponse {
            /** Converted other regions prices in USD and EUR, to use for countries where Play doesn't support a country's local currency. */
            convertedOtherRegionsPrice?: ConvertedOtherRegionsPrice;
            /** Map from region code to converted region price. */
            convertedRegionPrices?: { [P in string]: ConvertedRegionPrice };
        }
        interface CountryTargeting {
            /** Countries to target, specified as two letter [CLDR codes](https://unicode.org/cldr/charts/latest/supplemental/territory_containment_un_m_49.html). */
            countries?: string[];
            /** Include "rest of world" as well as explicitly targeted countries. */
            includeRestOfWorld?: boolean;
        }
        // tslint:disable-next-line:no-empty-interface
        interface DeactivateBasePlanRequest {
        }
        // tslint:disable-next-line:no-empty-interface
        interface DeactivateSubscriptionOfferRequest {
        }
        interface DeobfuscationFile {
            /** The type of the deobfuscation file. */
            symbolType?: string;
        }
        interface DeobfuscationFilesUploadResponse {
            /** The uploaded Deobfuscation File configuration. */
            deobfuscationFile?: DeobfuscationFile;
        }
        interface DeveloperComment {
            /** The last time at which this comment was updated. */
            lastModified?: Timestamp;
            /** The content of the comment, i.e. reply body. */
            text?: string;
        }
        // tslint:disable-next-line:no-empty-interface
        interface DeveloperInitiatedCancellation {
        }
        interface DeviceGroup {
            /** Device selectors for this group. A device matching any of the selectors is included in this group. */
            deviceSelectors?: DeviceSelector[];
            /** The name of the group. */
            name?: string;
        }
        interface DeviceId {
            /** Value of Build.BRAND. */
            buildBrand?: string;
            /** Value of Build.DEVICE. */
            buildDevice?: string;
        }
        interface DeviceMetadata {
            /** Device CPU make, e.g. "Qualcomm" */
            cpuMake?: string;
            /** Device CPU model, e.g. "MSM8974" */
            cpuModel?: string;
            /** Device class (e.g. tablet) */
            deviceClass?: string;
            /** OpenGL version */
            glEsVersion?: number;
            /** Device manufacturer (e.g. Motorola) */
            manufacturer?: string;
            /** Comma separated list of native platforms (e.g. "arm", "arm7") */
            nativePlatform?: string;
            /** Device model name (e.g. Droid) */
            productName?: string;
            /** Device RAM in Megabytes, e.g. "2048" */
            ramMb?: number;
            /** Screen density in DPI */
            screenDensityDpi?: number;
            /** Screen height in pixels */
            screenHeightPx?: number;
            /** Screen width in pixels */
            screenWidthPx?: number;
        }
        interface DeviceRam {
            /** Maximum RAM in bytes (bound excluded). */
            maxBytes?: string;
            /** Minimum RAM in bytes (bound included). */
            minBytes?: string;
        }
        interface DeviceSelector {
            /** Conditions on the device's RAM. */
            deviceRam?: DeviceRam;
            /** Device models excluded by this selector, even if they match all other conditions. */
            excludedDeviceIds?: DeviceId[];
            /** A device that has any of these system features is excluded by this selector, even if it matches all other conditions. */
            forbiddenSystemFeatures?: SystemFeature[];
            /** Device models included by this selector. */
            includedDeviceIds?: DeviceId[];
            /** A device needs to have all these system features to be included by the selector. */
            requiredSystemFeatures?: SystemFeature[];
        }
        interface DeviceSpec {
            /** Screen dpi. */
            screenDensity?: number;
            /** Supported ABI architectures in the order of preference. The values should be the string as reported by the platform, e.g. "armeabi-v7a", "x86_64". */
            supportedAbis?: string[];
            /** All installed locales represented as BCP-47 strings, e.g. "en-US". */
            supportedLocales?: string[];
        }
        interface DeviceTier {
            /** Groups of devices included in this tier. These groups must be defined explicitly under device_groups in this configuration. */
            deviceGroupNames?: string[];
            /**
             * The priority level of the tier. Tiers are evaluated in descending order of level: the highest level tier has the highest priority. The highest tier matching a given device is
             * selected for that device. You should use a contiguous range of levels for your tiers in a tier set; tier levels in a tier set must be unique. For instance, if your tier set has 4
             * tiers (including the global fallback), you should define tiers 1, 2 and 3 in this configuration. Note: tier 0 is implicitly defined as a global fallback and selected for devices
             * that don't match any of the tiers explicitly defined here. You mustn't define level 0 explicitly in this configuration.
             */
            level?: number;
        }
        interface DeviceTierConfig {
            /** Definition of device groups for the app. */
            deviceGroups?: DeviceGroup[];
            /** Output only. The device tier config ID. */
            deviceTierConfigId?: string;
            /** Definition of the set of device tiers for the app. */
            deviceTierSet?: DeviceTierSet;
            /** Definition of user country sets for the app. */
            userCountrySets?: UserCountrySet[];
        }
        interface DeviceTierSet {
            /** Device tiers belonging to the set. */
            deviceTiers?: DeviceTier[];
        }
        interface ExpansionFile {
            /**
             * If set, this field indicates that this APK has an expansion file uploaded to it: this APK does not reference another APK's expansion file. The field's value is the size of the
             * uploaded expansion file in bytes.
             */
            fileSize?: string;
            /** If set, this APK's expansion file references another APK's expansion file. The file_size field will not be set. */
            referencesVersion?: number;
        }
        interface ExpansionFilesUploadResponse {
            /** The uploaded expansion file configuration. */
            expansionFile?: ExpansionFile;
        }
        interface ExternalAccountIdentifiers {
            /** User account identifier in the third-party service. Only present if account linking happened as part of the subscription purchase flow. */
            externalAccountId?: string;
            /**
             * An obfuscated version of the id that is uniquely associated with the user's account in your app. Present for the following purchases: * If account linking happened as part of the
             * subscription purchase flow. * It was specified using https://developer.android.com/reference/com/android/billingclient/api/BillingFlowParams.Builder#setobfuscatedaccountid when the
             * purchase was made.
             */
            obfuscatedExternalAccountId?: string;
            /**
             * An obfuscated version of the id that is uniquely associated with the user's profile in your app. Only present if specified using
             * https://developer.android.com/reference/com/android/billingclient/api/BillingFlowParams.Builder#setobfuscatedprofileid when the purchase was made.
             */
            obfuscatedExternalProfileId?: string;
        }
        interface ExternallyHostedApk {
            /** The application label. */
            applicationLabel?: string;
            /** A certificate (or array of certificates if a certificate-chain is used) used to sign this APK, represented as a base64 encoded byte array. */
            certificateBase64s?: string[];
            /** The URL at which the APK is hosted. This must be an https URL. */
            externallyHostedUrl?: string;
            /** The sha1 checksum of this APK, represented as a base64 encoded byte array. */
            fileSha1Base64?: string;
            /** The sha256 checksum of this APK, represented as a base64 encoded byte array. */
            fileSha256Base64?: string;
            /** The file size in bytes of this APK. */
            fileSize?: string;
            /** The icon image from the APK, as a base64 encoded byte array. */
            iconBase64?: string;
            /** The maximum SDK supported by this APK (optional). */
            maximumSdk?: number;
            /** The minimum SDK targeted by this APK. */
            minimumSdk?: number;
            /** The native code environments supported by this APK (optional). */
            nativeCodes?: string[];
            /** The package name. */
            packageName?: string;
            /** The features required by this APK (optional). */
            usesFeatures?: string[];
            /** The permissions requested by this APK. */
            usesPermissions?: UsesPermission[];
            /** The version code of this APK. */
            versionCode?: number;
            /** The version name of this APK. */
            versionName?: string;
        }
        interface ExternalSubscription {
            /** Required. The type of the external subscription. */
            subscriptionType?: string;
        }
        interface ExternalTransaction {
            /** Output only. The time when this transaction was created. This is the time when Google was notified of the transaction. */
            createTime?: string;
            /** Output only. The current transaction amount before tax. This represents the current pre-tax amount including any refunds that may have been applied to this transaction. */
            currentPreTaxAmount?: Price;
            /** Output only. The current tax amount. This represents the current tax amount including any refunds that may have been applied to this transaction. */
            currentTaxAmount?: Price;
            /** Output only. The id of this transaction. All transaction ids under the same package name must be unique. Set when creating the external transaction. */
            externalTransactionId?: string;
            /** This is a one-time transaction and not part of a subscription. */
            oneTimeTransaction?: OneTimeExternalTransaction;
            /** Required. The original transaction amount before taxes. This represents the pre-tax amount originally notified to Google before any refunds were applied. */
            originalPreTaxAmount?: Price;
            /** Required. The original tax amount. This represents the tax amount originally notified to Google before any refunds were applied. */
            originalTaxAmount?: Price;
            /** Output only. The resource name of the external transaction. The package name of the application the inapp products were sold (for example, 'com.some.app'). */
            packageName?: string;
            /** This transaction is part of a recurring series of transactions. */
            recurringTransaction?: RecurringExternalTransaction;
            /** Output only. If set, this transaction was a test purchase. Google will not charge for a test transaction. */
            testPurchase?: any;
            /** Output only. The current state of the transaction. */
            transactionState?: string;
            /** Required. The time when the transaction was completed. */
            transactionTime?: string;
            /** Required. User address for tax computation. */
            userTaxAddress?: ExternalTransactionAddress;
        }
        interface ExternalTransactionAddress {
            /** Required. Two letter region code based on ISO-3166-1 Alpha-2 (UN region codes). */
            regionCode?: string;
        }
        // tslint:disable-next-line:no-empty-interface
        interface ExternalTransactionTestPurchase {
        }
        // tslint:disable-next-line:no-empty-interface
        interface FullRefund {
        }
        interface GeneratedApksListResponse {
            /** All generated APKs, grouped by the APK signing key. */
            generatedApks?: GeneratedApksPerSigningKey[];
        }
        interface GeneratedApksPerSigningKey {
            /** SHA256 hash of the APK signing public key certificate. */
            certificateSha256Hash?: string;
            /** List of asset pack slices which will be served for this app bundle, signed with a key corresponding to certificate_sha256_hash. */
            generatedAssetPackSlices?: GeneratedAssetPackSlice[];
            /** List of generated split APKs, signed with a key corresponding to certificate_sha256_hash. */
            generatedSplitApks?: GeneratedSplitApk[];
            /** List of generated standalone APKs, signed with a key corresponding to certificate_sha256_hash. */
            generatedStandaloneApks?: GeneratedStandaloneApk[];
            /** Generated universal APK, signed with a key corresponding to certificate_sha256_hash. This field is not set if no universal APK was generated for this signing key. */
            generatedUniversalApk?: GeneratedUniversalApk;
        }
        interface GeneratedAssetPackSlice {
            /** Download ID, which uniquely identifies the APK to download. Should be supplied to `generatedapks.download` method. */
            downloadId?: string;
            /** Name of the module that this asset slice belongs to. */
            moduleName?: string;
            /** Asset slice ID. */
            sliceId?: string;
            /** Asset module version. */
            version?: string;
        }
        interface GeneratedSplitApk {
            /** Download ID, which uniquely identifies the APK to download. Should be supplied to `generatedapks.download` method. */
            downloadId?: string;
            /** Name of the module that this APK belongs to. */
            moduleName?: string;
            /** Split ID. Empty for the main split of the base module. */
            splitId?: string;
            /** ID of the generated variant. */
            variantId?: number;
        }
        interface GeneratedStandaloneApk {
            /** Download ID, which uniquely identifies the APK to download. Should be supplied to `generatedapks.download` method. */
            downloadId?: string;
            /** ID of the generated variant. */
            variantId?: number;
        }
        interface GeneratedUniversalApk {
            /** Download ID, which uniquely identifies the APK to download. Should be supplied to `generatedapks.download` method. */
            downloadId?: string;
        }
        interface Grant {
            /** The permissions granted to the user for this app. */
            appLevelPermissions?: string[];
            /**
             * Required. Resource name for this grant, following the pattern "developers/{developer}/users/{email}/grants/{package_name}". If this grant is for a draft app, the app ID will be used
             * in this resource name instead of the package name.
             */
            name?: string;
            /** Immutable. The package name of the app. This will be empty for draft apps. */
            packageName?: string;
        }
        interface Image {
            /** A unique id representing this image. */
            id?: string;
            /** A sha1 hash of the image. */
            sha1?: string;
            /** A sha256 hash of the image. */
            sha256?: string;
            /** A URL that will serve a preview of the image. */
            url?: string;
        }
        interface ImagesDeleteAllResponse {
            /** The deleted images. */
            deleted?: Image[];
        }
        interface ImagesListResponse {
            /** All listed Images. */
            images?: Image[];
        }
        interface ImagesUploadResponse {
            /** The uploaded image. */
            image?: Image;
        }
        interface InAppProduct {
            /** Default language of the localized data, as defined by BCP-47. e.g. "en-US". */
            defaultLanguage?: string;
            /** Default price. Cannot be zero, as in-app products are never free. Always in the developer's Checkout merchant currency. */
            defaultPrice?: Price;
            /**
             * Grace period of the subscription, specified in ISO 8601 format. Allows developers to give their subscribers a grace period when the payment for the new recurrence period is
             * declined. Acceptable values are P0D (zero days), P3D (three days), P7D (seven days), P14D (14 days), and P30D (30 days).
             */
            gracePeriod?: string;
            /** List of localized title and description data. Map key is the language of the localized data, as defined by BCP-47, e.g. "en-US". */
            listings?: { [P in string]: InAppProductListing };
            /** Details about taxes and legal compliance. Only applicable to managed products. */
            managedProductTaxesAndComplianceSettings?: ManagedProductTaxAndComplianceSettings;
            /** Package name of the parent app. */
            packageName?: string;
            /** Prices per buyer region. None of these can be zero, as in-app products are never free. Map key is region code, as defined by ISO 3166-2. */
            prices?: { [P in string]: Price };
            /** The type of the product, e.g. a recurring subscription. */
            purchaseType?: string;
            /** Stock-keeping-unit (SKU) of the product, unique within an app. */
            sku?: string;
            /** The status of the product, e.g. whether it's active. */
            status?: string;
            /** Subscription period, specified in ISO 8601 format. Acceptable values are P1W (one week), P1M (one month), P3M (three months), P6M (six months), and P1Y (one year). */
            subscriptionPeriod?: string;
            /** Details about taxes and legal compliance. Only applicable to subscription products. */
            subscriptionTaxesAndComplianceSettings?: SubscriptionTaxAndComplianceSettings;
            /** Trial period, specified in ISO 8601 format. Acceptable values are anything between P7D (seven days) and P999D (999 days). */
            trialPeriod?: string;
        }
        interface InAppProductListing {
            /** Localized entitlement benefits for a subscription. */
            benefits?: string[];
            /** Description for the store listing. */
            description?: string;
            /** Title for the store listing. */
            title?: string;
        }
        interface InappproductsListResponse {
            /** All in-app products. */
            inappproduct?: InAppProduct[];
            /** The kind of this response ("androidpublisher#inappproductsListResponse"). */
            kind?: string;
            /** Deprecated and unset. */
            pageInfo?: PageInfo;
            /** Pagination token, to handle a number of products that is over one page. */
            tokenPagination?: TokenPagination;
        }
        interface InternalAppSharingArtifact {
            /** The sha256 fingerprint of the certificate used to sign the generated artifact. */
            certificateFingerprint?: string;
            /** The download URL generated for the uploaded artifact. Users that are authorized to download can follow the link to the Play Store app to install it. */
            downloadUrl?: string;
            /** The sha256 hash of the artifact represented as a lowercase hexadecimal number, matching the output of the sha256sum command. */
            sha256?: string;
        }
        interface IntroductoryPriceInfo {
            /**
             * Introductory price of the subscription, not including tax. The currency is the same as price_currency_code. Price is expressed in micro-units, where 1,000,000 micro-units represents
             * one unit of the currency. For example, if the subscription price is €1.99, price_amount_micros is 1990000.
             */
            introductoryPriceAmountMicros?: string;
            /** ISO 4217 currency code for the introductory subscription price. For example, if the price is specified in British pounds sterling, price_currency_code is "GBP". */
            introductoryPriceCurrencyCode?: string;
            /** The number of billing period to offer introductory pricing. */
            introductoryPriceCycles?: number;
            /**
             * Introductory price period, specified in ISO 8601 format. Common values are (but not limited to) "P1W" (one week), "P1M" (one month), "P3M" (three months), "P6M" (six months), and
             * "P1Y" (one year).
             */
            introductoryPricePeriod?: string;
        }
        interface ListDeviceTierConfigsResponse {
            /** Device tier configs created by the developer. */
            deviceTierConfigs?: DeviceTierConfig[];
            /** A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages. */
            nextPageToken?: string;
        }
        interface Listing {
            /** Full description of the app. */
            fullDescription?: string;
            /** Language localization code (a BCP-47 language tag; for example, "de-AT" for Austrian German). */
            language?: string;
            /** Short description of the app. */
            shortDescription?: string;
            /** Localized title of the app. */
            title?: string;
            /** URL of a promotional YouTube video for the app. */
            video?: string;
        }
        interface ListingsListResponse {
            /** The kind of this response ("androidpublisher#listingsListResponse"). */
            kind?: string;
            /** All localized listings. */
            listings?: Listing[];
        }
        interface ListSubscriptionOffersResponse {
            /** A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages. */
            nextPageToken?: string;
            /** The subscription offers from the specified subscription. */
            subscriptionOffers?: SubscriptionOffer[];
        }
        interface ListSubscriptionsResponse {
            /** A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages. */
            nextPageToken?: string;
            /** The subscriptions from the specified app. */
            subscriptions?: Subscription[];
        }
        interface ListUsersResponse {
            /** A token to pass to subsequent calls in order to retrieve subsequent results. This will not be set if there are no more results to return. */
            nextPageToken?: string;
            /** The resulting users. */
            users?: User[];
        }
        interface LocalizedText {
            /** Language localization code (a BCP-47 language tag; for example, "de-AT" for Austrian German). */
            language?: string;
            /** The text in the given language. */
            text?: string;
        }
        interface ManagedProductTaxAndComplianceSettings {
            /**
             * Digital content or service classification for products distributed to users in the European Economic Area (EEA). The withdrawal regime under EEA consumer laws depends on this
             * classification. Refer to the [Help Center article](https://support.google.com/googleplay/android-developer/answer/10463498) for more information.
             */
            eeaWithdrawalRightType?: string;
            /** A mapping from region code to tax rate details. The keys are region codes as defined by Unicode's "CLDR". */
            taxRateInfoByRegionCode?: { [P in string]: RegionalTaxRateInfo };
        }
        interface MigrateBasePlanPricesRequest {
            /** Required. The regional prices to update. */
            regionalPriceMigrations?: RegionalPriceMigrationConfig[];
            /** Required. The version of the available regions being used for the regional_price_migrations. */
            regionsVersion?: RegionsVersion;
        }
        // tslint:disable-next-line:no-empty-interface
        interface MigrateBasePlanPricesResponse {
        }
        interface Money {
            /** The three-letter currency code defined in ISO 4217. */
            currencyCode?: string;
            /**
             * Number of nano (10^-9) units of the amount. The value must be between -999,999,999 and +999,999,999 inclusive. If `units` is positive, `nanos` must be positive or zero. If `units`
             * is zero, `nanos` can be positive, zero, or negative. If `units` is negative, `nanos` must be negative or zero. For example $-1.75 is represented as `units`=-1 and
             * `nanos`=-750,000,000.
             */
            nanos?: number;
            /** The whole units of the amount. For example if `currencyCode` is `"USD"`, then 1 unit is one US dollar. */
            units?: string;
        }
        interface OfferDetails {
            /** The base plan ID. Present for all base plan and offers. */
            basePlanId?: string;
            /** The offer ID. Only present for discounted offers. */
            offerId?: string;
            /** The latest offer tags associated with the offer. It includes tags inherited from the base plan. */
            offerTags?: string[];
        }
        interface OfferTag {
            /** Must conform with RFC-1034. That is, this string can only contain lower-case letters (a-z), numbers (0-9), and hyphens (-), and be at most 20 characters. */
            tag?: string;
        }
        interface OneTimeExternalTransaction {
            /** Input only. Provided during the call to Create. Retrieved from the client when the alternative billing flow is launched. */
            externalTransactionToken?: string;
        }
        interface OtherRegionsBasePlanConfig {
            /** Required. Price in EUR to use for any new locations Play may launch in. */
            eurPrice?: Money;
            /** Whether the base plan is available for new subscribers in any new locations Play may launch in. If not specified, this will default to false. */
            newSubscriberAvailability?: boolean;
            /** Required. Price in USD to use for any new locations Play may launch in. */
            usdPrice?: Money;
        }
        interface OtherRegionsSubscriptionOfferConfig {
            /** Whether the subscription offer in any new locations Play may launch in the future. If not specified, this will default to false. */
            otherRegionsNewSubscriberAvailability?: boolean;
        }
        interface OtherRegionsSubscriptionOfferPhaseConfig {
            /**
             * The absolute amount of money subtracted from the base plan price prorated over the phase duration that the user pays for this offer phase. For example, if the base plan price for
             * this region is $12 for a period of 1 year, then a $1 absolute discount for a phase of a duration of 3 months would correspond to a price of $2. The resulting price may not be
             * smaller than the minimum price allowed for any new locations Play may launch in.
             */
            absoluteDiscounts?: OtherRegionsSubscriptionOfferPhasePrices;
            /** The absolute price the user pays for this offer phase. The price must not be smaller than the minimum price allowed for any new locations Play may launch in. */
            otherRegionsPrices?: OtherRegionsSubscriptionOfferPhasePrices;
            /**
             * The fraction of the base plan price prorated over the phase duration that the user pays for this offer phase. For example, if the base plan price for this region is $12 for a period
             * of 1 year, then a 50% discount for a phase of a duration of 3 months would correspond to a price of $1.50. The discount must be specified as a fraction strictly larger than 0 and
             * strictly smaller than 1. The resulting price will be rounded to the nearest billable unit (e.g. cents for USD). The relative discount is considered invalid if the discounted price
             * ends up being smaller than the minimum price allowed in any new locations Play may launch in.
             */
            relativeDiscount?: number;
        }
        interface OtherRegionsSubscriptionOfferPhasePrices {
            /** Required. Price in EUR to use for any new locations Play may launch in. */
            eurPrice?: Money;
            /** Required. Price in USD to use for any new locations Play may launch in. */
            usdPrice?: Money;
        }
        interface PageInfo {
            /** Maximum number of results returned in one page. ! The number of results included in the API response. */
            resultPerPage?: number;
            /** Index of the first result returned in the current page. */
            startIndex?: number;
            /** Total number of results available on the backend ! The total number of results in the result set. */
            totalResults?: number;
        }
        interface PartialRefund {
            /**
             * Required. A unique id distinguishing this partial refund. If the refund is successful, subsequent refunds with the same id will fail. Must be unique across refunds for one
             * individual transaction.
             */
            refundId?: string;
            /** Required. The pre-tax amount of the partial refund. Should be less than the remaining pre-tax amount of the transaction. */
            refundPreTaxAmount?: Price;
        }
        interface PausedStateContext {
            /** Time at which the subscription will be automatically resumed. */
            autoResumeTime?: string;
        }
        interface PrepaidBasePlanType {
            /** Required. Subscription period, specified in ISO 8601 format. For a list of acceptable billing periods, refer to the help center. */
            billingPeriodDuration?: string;
            /** Whether users should be able to extend this prepaid base plan in Google Play surfaces. Defaults to TIME_EXTENSION_ACTIVE if not specified. */
            timeExtension?: string;
        }
        interface PrepaidPlan {
            /** If present, this is the time after which top up purchases are allowed for the prepaid plan. Will not be present for expired prepaid plans. */
            allowExtendAfterTime?: string;
        }
        interface Price {
            /** 3 letter Currency code, as defined by ISO 4217. See java/com/google/common/money/CurrencyCode.java */
            currency?: string;
            /** Price in 1/million of the currency base unit, represented as a string. */
            priceMicros?: string;
        }
        interface ProductPurchase {
            /** The acknowledgement state of the inapp product. Possible values are: 0. Yet to be acknowledged 1. Acknowledged */
            acknowledgementState?: number;
            /** The consumption state of the inapp product. Possible values are: 0. Yet to be consumed 1. Consumed */
            consumptionState?: number;
            /** A developer-specified string that contains supplemental information about an order. */
            developerPayload?: string;
            /** This kind represents an inappPurchase object in the androidpublisher service. */
            kind?: string;
            /**
             * An obfuscated version of the id that is uniquely associated with the user's account in your app. Only present if specified using
             * https://developer.android.com/reference/com/android/billingclient/api/BillingFlowParams.Builder#setobfuscatedaccountid when the purchase was made.
             */
            obfuscatedExternalAccountId?: string;
            /**
             * An obfuscated version of the id that is uniquely associated with the user's profile in your app. Only present if specified using
             * https://developer.android.com/reference/com/android/billingclient/api/BillingFlowParams.Builder#setobfuscatedprofileid when the purchase was made.
             */
            obfuscatedExternalProfileId?: string;
            /** The order id associated with the purchase of the inapp product. */
            orderId?: string;
            /** The inapp product SKU. May not be present. */
            productId?: string;
            /** The purchase state of the order. Possible values are: 0. Purchased 1. Canceled 2. Pending */
            purchaseState?: number;
            /** The time the product was purchased, in milliseconds since the epoch (Jan 1, 1970). */
            purchaseTimeMillis?: string;
            /** The purchase token generated to identify this purchase. May not be present. */
            purchaseToken?: string;
            /**
             * The type of purchase of the inapp product. This field is only set if this purchase was not made using the standard in-app billing flow. Possible values are: 0. Test (i.e. purchased
             * from a license testing account) 1. Promo (i.e. purchased using a promo code) 2. Rewarded (i.e. from watching a video ad instead of paying)
             */
            purchaseType?: number;
            /** The quantity associated with the purchase of the inapp product. If not present, the quantity is 1. */
            quantity?: number;
            /** ISO 3166-1 alpha-2 billing region code of the user at the time the product was granted. */
            regionCode?: string;
        }
        interface ProductPurchasesAcknowledgeRequest {
            /** Payload to attach to the purchase. */
            developerPayload?: string;
        }
        interface RecurringExternalTransaction {
            /** Details of an external subscription. */
            externalSubscription?: ExternalSubscription;
            /** Input only. Provided during the call to Create. Retrieved from the client when the alternative billing flow is launched. Required only for the initial purchase. */
            externalTransactionToken?: string;
            /**
             * The external transaction id of the first transaction of this recurring series of transactions. For example, for a subscription this would be the transaction id of the first payment.
             * Required when creating recurring external transactions.
             */
            initialExternalTransactionId?: string;
        }
        interface RefundExternalTransactionRequest {
            /** A full-amount refund. */
            fullRefund?: any;
            /** A partial refund. */
            partialRefund?: PartialRefund;
            /** Required. The time that the transaction was refunded. */
            refundTime?: string;
        }
        interface RegionalBasePlanConfig {
            /**
             * Whether the base plan in the specified region is available for new subscribers. Existing subscribers will not have their subscription canceled if this value is set to false. If not
             * specified, this will default to false.
             */
            newSubscriberAvailability?: boolean;
            /** The price of the base plan in the specified region. Must be set if the base plan is available to new subscribers. Must be set in the currency that is linked to the specified region. */
            price?: Money;
            /** Required. Region code this configuration applies to, as defined by ISO 3166-2, e.g. "US". */
            regionCode?: string;
        }
        interface RegionalPriceMigrationConfig {
            /**
             * Required. The cutoff time for historical prices that subscribers can remain paying. Subscribers who are on a price that was created before this cutoff time will be migrated to the
             * currently-offered price. These subscribers will receive a notification that they will be paying a different price. Subscribers who do not agree to the new price will have their
             * subscription ended at the next renewal.
             */
            oldestAllowedPriceVersionTime?: string;
            /** Required. Region code this configuration applies to, as defined by ISO 3166-2, e.g. "US". */
            regionCode?: string;
        }
        interface RegionalSubscriptionOfferConfig {
            /**
             * Whether the subscription offer in the specified region is available for new subscribers. Existing subscribers will not have their subscription cancelled if this value is set to
             * false. If not specified, this will default to false.
             */
            newSubscriberAvailability?: boolean;
            /** Required. Immutable. Region code this configuration applies to, as defined by ISO 3166-2, e.g. "US". */
            regionCode?: string;
        }
        interface RegionalSubscriptionOfferPhaseConfig {
            /**
             * The absolute amount of money subtracted from the base plan price prorated over the phase duration that the user pays for this offer phase. For example, if the base plan price for
             * this region is $12 for a period of 1 year, then a $1 absolute discount for a phase of a duration of 3 months would correspond to a price of $2. The resulting price may not be
             * smaller than the minimum price allowed for this region.
             */
            absoluteDiscount?: Money;
            /** The absolute price the user pays for this offer phase. The price must not be smaller than the minimum price allowed for this region. */
            price?: Money;
            /** Required. Immutable. The region to which this config applies. */
            regionCode?: string;
            /**
             * The fraction of the base plan price prorated over the phase duration that the user pays for this offer phase. For example, if the base plan price for this region is $12 for a period
             * of 1 year, then a 50% discount for a phase of a duration of 3 months would correspond to a price of $1.50. The discount must be specified as a fraction strictly larger than 0 and
             * strictly smaller than 1. The resulting price will be rounded to the nearest billable unit (e.g. cents for USD). The relative discount is considered invalid if the discounted price
             * ends up being smaller than the minimum price allowed in this region.
             */
            relativeDiscount?: number;
        }
        interface RegionalTaxRateInfo {
            /** You must tell us if your app contains streaming products to correctly charge US state and local sales tax. Field only supported in United States. */
            eligibleForStreamingServiceTaxRate?: boolean;
            /**
             * To collect communications or amusement taxes in the United States, choose the appropriate tax category. [Learn
             * more](https://support.google.com/googleplay/android-developer/answer/10463498#streaming_tax).
             */
            streamingTaxType?: string;
            /**
             * Tax tier to specify reduced tax rate. Developers who sell digital news, magazines, newspapers, books, or audiobooks in various regions may be eligible for reduced tax rates. [Learn
             * more](https://support.google.com/googleplay/android-developer/answer/10463498).
             */
            taxTier?: string;
        }
        interface RegionsVersion {
            /** Required. A string representing version of the available regions being used for the specified resource. The current version is 2022/02. */
            version?: string;
        }
        // tslint:disable-next-line:no-empty-interface
        interface ReplacementCancellation {
        }
        interface Review {
            /** The name of the user who wrote the review. */
            authorName?: string;
            /** A repeated field containing comments for the review. */
            comments?: Comment[];
            /** Unique identifier for this review. */
            reviewId?: string;
        }
        interface ReviewReplyResult {
            /** The time at which the reply took effect. */
            lastEdited?: Timestamp;
            /** The reply text that was applied. */
            replyText?: string;
        }
        interface ReviewsListResponse {
            /** Information about the current page. */
            pageInfo?: PageInfo;
            /** List of reviews. */
            reviews?: Review[];
            /** Pagination token, to handle a number of products that is over one page. */
            tokenPagination?: TokenPagination;
        }
        interface ReviewsReplyRequest {
            /** The text to set as the reply. Replies of more than approximately 350 characters will be rejected. HTML tags will be stripped. */
            replyText?: string;
        }
        interface ReviewsReplyResponse {
            /** The result of replying/updating a reply to review. */
            result?: ReviewReplyResult;
        }
        interface SubscribeWithGoogleInfo {
            /** The email address of the user when the subscription was purchased. */
            emailAddress?: string;
            /** The family name of the user when the subscription was purchased. */
            familyName?: string;
            /** The given name of the user when the subscription was purchased. */
            givenName?: string;
            /** The Google profile id of the user when the subscription was purchased. */
            profileId?: string;
            /** The profile name of the user when the subscription was purchased. */
            profileName?: string;
        }
        interface Subscription {
            /**
             * Output only. Whether this subscription is archived. Archived subscriptions are not available to any subscriber any longer, cannot be updated, and are not returned in list requests
             * unless the show archived flag is passed in.
             */
            archived?: boolean;
            /** The set of base plans for this subscription. Represents the prices and duration of the subscription if no other offers apply. */
            basePlans?: BasePlan[];
            /** Required. List of localized listings for this subscription. Must contain at least an entry for the default language of the parent app. */
            listings?: SubscriptionListing[];
            /** Immutable. Package name of the parent app. */
            packageName?: string;
            /**
             * Immutable. Unique product ID of the product. Unique within the parent app. Product IDs must be composed of lower-case letters (a-z), numbers (0-9), underscores (_) and dots (.). It
             * must start with a lower-case letter or number, and be between 1 and 40 (inclusive) characters in length.
             */
            productId?: string;
            /** Details about taxes and legal compliance. */
            taxAndComplianceSettings?: SubscriptionTaxAndComplianceSettings;
        }
        interface SubscriptionCancelSurveyResult {
            /**
             * The cancellation reason the user chose in the survey. Possible values are: 0. Other 1. I don't use this service enough 2. Technical issues 3. Cost-related reasons 4. I found a
             * better app
             */
            cancelSurveyReason?: number;
            /** The customized input cancel reason from the user. Only present when cancelReason is 0. */
            userInputCancelReason?: string;
        }
        interface SubscriptionDeferralInfo {
            /** The desired next expiry time to assign to the subscription, in milliseconds since the Epoch. The given time must be later/greater than the current expiry time for the subscription. */
            desiredExpiryTimeMillis?: string;
            /** The expected expiry time for the subscription. If the current expiry time for the subscription is not the value specified here, the deferral will not occur. */
            expectedExpiryTimeMillis?: string;
        }
        interface SubscriptionItemPriceChangeDetails {
            /** The renewal time at which the price change will become effective for the user. This is subject to change(to a future time) due to cases where the renewal time shifts like pause. */
            expectedNewPriceChargeTime?: string;
            /** New recurring price for the subscription item. */
            newPrice?: Money;
            /** Price change mode specifies how the subscription item price is changing. */
            priceChangeMode?: string;
            /** State the price change is currently in. */
            priceChangeState?: string;
        }
        interface SubscriptionListing {
            /** A list of benefits shown to the user on platforms such as the Play Store and in restoration flows in the language of this listing. Plain text. Ordered list of at most four benefits. */
            benefits?: string[];
            /** The description of this subscription in the language of this listing. Maximum length - 80 characters. Plain text. */
            description?: string;
            /** Required. The language of this listing, as defined by BCP-47, e.g. "en-US". */
            languageCode?: string;
            /** Required. The title of this subscription in the language of this listing. Plain text. */
            title?: string;
        }
        interface SubscriptionOffer {
            /** Required. Immutable. The ID of the base plan to which this offer is an extension. */
            basePlanId?: string;
            /** Required. Immutable. Unique ID of this subscription offer. Must be unique within the base plan. */
            offerId?: string;
            /** List of up to 20 custom tags specified for this offer, and returned to the app through the billing library. */
            offerTags?: OfferTag[];
            /** The configuration for any new locations Play may launch in the future. */
            otherRegionsConfig?: OtherRegionsSubscriptionOfferConfig;
            /** Required. Immutable. The package name of the app the parent subscription belongs to. */
            packageName?: string;
            /**
             * Required. The phases of this subscription offer. Must contain at least one entry, and may contain at most five. Users will always receive all these phases in the specified order.
             * Phases may not be added, removed, or reordered after initial creation.
             */
            phases?: SubscriptionOfferPhase[];
            /** Required. Immutable. The ID of the parent subscription this offer belongs to. */
            productId?: string;
            /** Required. The region-specific configuration of this offer. Must contain at least one entry. */
            regionalConfigs?: RegionalSubscriptionOfferConfig[];
            /**
             * Output only. The current state of this offer. Can be changed using Activate and Deactivate actions. NB: the base plan state supersedes this state, so an active offer may not be
             * available if the base plan is not active.
             */
            state?: string;
            /**
             * The requirements that users need to fulfil to be eligible for this offer. Represents the requirements that Play will evaluate to decide whether an offer should be returned.
             * Developers may further filter these offers themselves.
             */
            targeting?: SubscriptionOfferTargeting;
        }
        interface SubscriptionOfferPhase {
            /** Required. The duration of a single recurrence of this phase. Specified in ISO 8601 format. */
            duration?: string;
            /** Pricing information for any new locations Play may launch in. */
            otherRegionsConfig?: OtherRegionsSubscriptionOfferPhaseConfig;
            /** Required. The number of times this phase repeats. If this offer phase is not free, each recurrence charges the user the price of this offer phase. */
            recurrenceCount?: number;
            /** Required. The region-specific configuration of this offer phase. This list must contain exactly one entry for each region for which the subscription offer has a regional config. */
            regionalConfigs?: RegionalSubscriptionOfferPhaseConfig[];
        }
        interface SubscriptionOfferTargeting {
            /** Offer targeting rule for new user acquisition. */
            acquisitionRule?: AcquisitionTargetingRule;
            /** Offer targeting rule for upgrading users' existing plans. */
            upgradeRule?: UpgradeTargetingRule;
        }
        interface SubscriptionPriceChange {
            /** The new price the subscription will renew with if the price change is accepted by the user. */
            newPrice?: Price;
            /**
             * The current state of the price change. Possible values are: 0. Outstanding: State for a pending price change waiting for the user to agree. In this state, you can optionally seek
             * confirmation from the user using the In-App API. 1. Accepted: State for an accepted price change that the subscription will renew with unless it's canceled. The price change takes
             * effect on a future date when the subscription renews. Note that the change might not occur when the subscription is renewed next.
             */
            state?: number;
        }
        interface SubscriptionPurchase {
            /** The acknowledgement state of the subscription product. Possible values are: 0. Yet to be acknowledged 1. Acknowledged */
            acknowledgementState?: number;
            /** Whether the subscription will automatically be renewed when it reaches its current expiry time. */
            autoRenewing?: boolean;
            /** Time at which the subscription will be automatically resumed, in milliseconds since the Epoch. Only present if the user has requested to pause the subscription. */
            autoResumeTimeMillis?: string;
            /**
             * The reason why a subscription was canceled or is not auto-renewing. Possible values are: 0. User canceled the subscription 1. Subscription was canceled by the system, for example
             * because of a billing problem 2. Subscription was replaced with a new subscription 3. Subscription was canceled by the developer
             */
            cancelReason?: number;
            /** Information provided by the user when they complete the subscription cancellation flow (cancellation reason survey). */
            cancelSurveyResult?: SubscriptionCancelSurveyResult;
            /** ISO 3166-1 alpha-2 billing country/region code of the user at the time the subscription was granted. */
            countryCode?: string;
            /** A developer-specified string that contains supplemental information about an order. */
            developerPayload?: string;
            /** The email address of the user when the subscription was purchased. Only present for purchases made with 'Subscribe with Google'. */
            emailAddress?: string;
            /** Time at which the subscription will expire, in milliseconds since the Epoch. */
            expiryTimeMillis?: string;
            /** User account identifier in the third-party service. Only present if account linking happened as part of the subscription purchase flow. */
            externalAccountId?: string;
            /** The family name of the user when the subscription was purchased. Only present for purchases made with 'Subscribe with Google'. */
            familyName?: string;
            /** The given name of the user when the subscription was purchased. Only present for purchases made with 'Subscribe with Google'. */
            givenName?: string;
            /**
             * Introductory price information of the subscription. This is only present when the subscription was purchased with an introductory price. This field does not indicate the
             * subscription is currently in introductory price period.
             */
            introductoryPriceInfo?: IntroductoryPriceInfo;
            /** This kind represents a subscriptionPurchase object in the androidpublisher service. */
            kind?: string;
            /**
             * The purchase token of the originating purchase if this subscription is one of the following: 0. Re-signup of a canceled but non-lapsed subscription 1. Upgrade/downgrade from a
             * previous subscription For example, suppose a user originally signs up and you receive purchase token X, then the user cancels and goes through the resignup flow (before their
             * subscription lapses) and you receive purchase token Y, and finally the user upgrades their subscription and you receive purchase token Z. If you call this API with purchase token Z,
             * this field will be set to Y. If you call this API with purchase token Y, this field will be set to X. If you call this API with purchase token X, this field will not be set.
             */
            linkedPurchaseToken?: string;
            /**
             * An obfuscated version of the id that is uniquely associated with the user's account in your app. Present for the following purchases: * If account linking happened as part of the
             * subscription purchase flow. * It was specified using https://developer.android.com/reference/com/android/billingclient/api/BillingFlowParams.Builder#setobfuscatedaccountid when the
             * purchase was made.
             */
            obfuscatedExternalAccountId?: string;
            /**
             * An obfuscated version of the id that is uniquely associated with the user's profile in your app. Only present if specified using
             * https://developer.android.com/reference/com/android/billingclient/api/BillingFlowParams.Builder#setobfuscatedprofileid when the purchase was made.
             */
            obfuscatedExternalProfileId?: string;
            /**
             * The order id of the latest recurring order associated with the purchase of the subscription. If the subscription was canceled because payment was declined, this will be the order id
             * from the payment declined order.
             */
            orderId?: string;
            /**
             * The payment state of the subscription. Possible values are: 0. Payment pending 1. Payment received 2. Free trial 3. Pending deferred upgrade/downgrade Not present for canceled,
             * expired subscriptions.
             */
            paymentState?: number;
            /**
             * Price of the subscription, For tax exclusive countries, the price doesn't include tax. For tax inclusive countries, the price includes tax. Price is expressed in micro-units, where
             * 1,000,000 micro-units represents one unit of the currency. For example, if the subscription price is €1.99, price_amount_micros is 1990000.
             */
            priceAmountMicros?: string;
            /**
             * The latest price change information available. This is present only when there is an upcoming price change for the subscription yet to be applied. Once the subscription renews with
             * the new price or the subscription is canceled, no price change information will be returned.
             */
            priceChange?: SubscriptionPriceChange;
            /** ISO 4217 currency code for the subscription price. For example, if the price is specified in British pounds sterling, price_currency_code is "GBP". */
            priceCurrencyCode?: string;
            /** The Google profile id of the user when the subscription was purchased. Only present for purchases made with 'Subscribe with Google'. */
            profileId?: string;
            /** The profile name of the user when the subscription was purchased. Only present for purchases made with 'Subscribe with Google'. */
            profileName?: string;
            /** The promotion code applied on this purchase. This field is only set if a vanity code promotion is applied when the subscription was purchased. */
            promotionCode?: string;
            /**
             * The type of promotion applied on this purchase. This field is only set if a promotion is applied when the subscription was purchased. Possible values are: 0. One time code 1. Vanity
             * code
             */
            promotionType?: number;
            /**
             * The type of purchase of the subscription. This field is only set if this purchase was not made using the standard in-app billing flow. Possible values are: 0. Test (i.e. purchased
             * from a license testing account) 1. Promo (i.e. purchased using a promo code)
             */
            purchaseType?: number;
            /** Time at which the subscription was granted, in milliseconds since the Epoch. */
            startTimeMillis?: string;
            /** The time at which the subscription was canceled by the user, in milliseconds since the epoch. Only present if cancelReason is 0. */
            userCancellationTimeMillis?: string;
        }
        interface SubscriptionPurchaseLineItem {
            /** The item is auto renewing. */
            autoRenewingPlan?: AutoRenewingPlan;
            /** Time at which the subscription expired or will expire unless the access is extended (ex. renews). */
            expiryTime?: string;
            /** The offer details for this item. */
            offerDetails?: OfferDetails;
            /** The item is prepaid. */
            prepaidPlan?: PrepaidPlan;
            /** The purchased product ID (for example, 'monthly001'). */
            productId?: string;
        }
        interface SubscriptionPurchasesAcknowledgeRequest {
            /** Payload to attach to the purchase. */
            developerPayload?: string;
        }
        interface SubscriptionPurchasesDeferRequest {
            /** The information about the new desired expiry time for the subscription. */
            deferralInfo?: SubscriptionDeferralInfo;
        }
        interface SubscriptionPurchasesDeferResponse {
            /** The new expiry time for the subscription in milliseconds since the Epoch. */
            newExpiryTimeMillis?: string;
        }
        interface SubscriptionPurchaseV2 {
            /** The acknowledgement state of the subscription. */
            acknowledgementState?: string;
            /** Additional context around canceled subscriptions. Only present if the subscription currently has subscription_state SUBSCRIPTION_STATE_CANCELED. */
            canceledStateContext?: CanceledStateContext;
            /** User account identifier in the third-party service. */
            externalAccountIdentifiers?: ExternalAccountIdentifiers;
            /** This kind represents a SubscriptionPurchaseV2 object in the androidpublisher service. */
            kind?: string;
            /**
             * The order id of the latest order associated with the purchase of the subscription. For autoRenewing subscription, this is the order id of signup order if it is not renewed yet, or
             * the last recurring order id (success, pending, or declined order). For prepaid subscription, this is the order id associated with the queried purchase token.
             */
            latestOrderId?: string;
            /** Item-level info for a subscription purchase. The items in the same purchase should be either all with AutoRenewingPlan or all with PrepaidPlan. */
            lineItems?: SubscriptionPurchaseLineItem[];
            /**
             * The purchase token of the old subscription if this subscription is one of the following: * Re-signup of a canceled but non-lapsed subscription * Upgrade/downgrade from a previous
             * subscription. * Convert from prepaid to auto renewing subscription. * Convert from an auto renewing subscription to prepaid. * Topup a prepaid subscription.
             */
            linkedPurchaseToken?: string;
            /** Additional context around paused subscriptions. Only present if the subscription currently has subscription_state SUBSCRIPTION_STATE_PAUSED. */
            pausedStateContext?: PausedStateContext;
            /** ISO 3166-1 alpha-2 billing country/region code of the user at the time the subscription was granted. */
            regionCode?: string;
            /** Time at which the subscription was granted. Not set for pending subscriptions (subscription was created but awaiting payment during signup). */
            startTime?: string;
            /** User profile associated with purchases made with 'Subscribe with Google'. */
            subscribeWithGoogleInfo?: SubscribeWithGoogleInfo;
            /** The current state of the subscription. */
            subscriptionState?: string;
            /** Only present if this subscription purchase is a test purchase. */
            testPurchase?: any;
        }
        interface SubscriptionTaxAndComplianceSettings {
            /**
             * Digital content or service classification for products distributed to users in the European Economic Area (EEA). The withdrawal regime under EEA consumer laws depends on this
             * classification. Refer to the [Help Center article](https://support.google.com/googleplay/android-developer/answer/10463498) for more information.
             */
            eeaWithdrawalRightType?: string;
            /** A mapping from region code to tax rate details. The keys are region codes as defined by Unicode's "CLDR". */
            taxRateInfoByRegionCode?: { [P in string]: RegionalTaxRateInfo };
        }
        interface SystemApksListResponse {
            /** All system APK variants created. */
            variants?: Variant[];
        }
        interface SystemFeature {
            /** The name of the feature. */
            name?: string;
        }
        // tslint:disable-next-line:no-empty-interface
        interface SystemInitiatedCancellation {
        }
        interface TargetingRuleScope {
            /** The scope of the current targeting rule is the subscription with the specified subscription ID. Must be a subscription within the same parent app. */
            specificSubscriptionInApp?: string;
        }
        interface Testers {
            /** All testing Google Groups, as email addresses. */
            googleGroups?: string[];
        }
        // tslint:disable-next-line:no-empty-interface
        interface TestPurchase {
        }
        interface Timestamp {
            /** Non-negative fractions of a second at nanosecond resolution. Must be from 0 to 999,999,999 inclusive. */
            nanos?: number;
            /** Represents seconds of UTC time since Unix epoch. */
            seconds?: string;
        }
        interface TokenPagination {
            /** Tokens to pass to the standard list field 'page_token'. Whenever available, tokens are preferred over manipulating start_index. */
            nextPageToken?: string;
            previousPageToken?: string;
        }
        interface Track {
            /** In a read request, represents all active releases in the track. In an update request, represents desired changes. */
            releases?: TrackRelease[];
            /**
             * Identifier of the track. Form factor tracks have a special prefix as an identifier, for example `wear:production`, `automotive:production`. [More on track
             * name](https://developers.google.com/android-publisher/tracks#ff-track-name)
             */
            track?: string;
        }
        interface TrackCountryAvailability {
            /**
             * A list of one or more countries where artifacts in this track are available. This list includes all countries that are targeted by the track, even if only specific carriers are
             * targeted in that country.
             */
            countries?: TrackTargetedCountry[];
            /** Whether artifacts in this track are available to "rest of the world" countries. */
            restOfWorld?: boolean;
            /**
             * Whether this track's availability is synced with the default production track. See https://support.google.com/googleplay/android-developer/answer/7550024 for more information on
             * syncing country availability with production. Note that if this is true, the returned "countries" and "rest_of_world" fields will reflect the values for the default production
             * track.
             */
            syncWithProduction?: boolean;
        }
        interface TrackRelease {
            /** Restricts a release to a specific set of countries. */
            countryTargeting?: CountryTargeting;
            /**
             * In-app update priority of the release. All newly added APKs in the release will be considered at this priority. Can take values in the range [0, 5], with 5 the highest priority.
             * Defaults to 0. in_app_update_priority can not be updated once the release is rolled out. See https://developer.android.com/guide/playcore/in-app-updates.
             */
            inAppUpdatePriority?: number;
            /**
             * The release name. Not required to be unique. If not set, the name is generated from the APK's version_name. If the release contains multiple APKs, the name is generated from the
             * date.
             */
            name?: string;
            /** A description of what is new in this release. */
            releaseNotes?: LocalizedText[];
            /** The status of the release. */
            status?: string;
            /** Fraction of users who are eligible for a staged release. 0 < fraction < 1. Can only be set when status is "inProgress" or "halted". */
            userFraction?: number;
            /** Version codes of all APKs in the release. Must include version codes to retain from previous releases. */
            versionCodes?: string[];
        }
        interface TracksListResponse {
            /** The kind of this response ("androidpublisher#tracksListResponse"). */
            kind?: string;
            /** All tracks. */
            tracks?: Track[];
        }
        interface TrackTargetedCountry {
            /** The country to target, as a two-letter CLDR code. */
            countryCode?: string;
        }
        interface UpgradeTargetingRule {
            /**
             * The specific billing period duration, specified in ISO 8601 format, that a user must be currently subscribed to to be eligible for this rule. If not specified, users subscribed to
             * any billing period are matched.
             */
            billingPeriodDuration?: string;
            /** Limit this offer to only once per user. If set to true, a user can never be eligible for this offer again if they ever subscribed to this offer. */
            oncePerUser?: boolean;
            /** Required. The scope of subscriptions this rule considers. Only allows "this subscription" and "specific subscription in app". */
            scope?: TargetingRuleScope;
        }
        interface User {
            /** Output only. The state of the user's access to the Play Console. */
            accessState?: string;
            /** Permissions for the user which apply across the developer account. */
            developerAccountPermissions?: string[];
            /** Immutable. The user's email address. */
            email?: string;
            /** The time at which the user's access expires, if set. When setting this value, it must always be in the future. */
            expirationTime?: string;
            /** Output only. Per-app permissions for the user. */
            grants?: Grant[];
            /** Required. Resource name for this user, following the pattern "developers/{developer}/users/{email}". */
            name?: string;
            /**
             * Output only. Whether there are more permissions for the user that are not represented here. This can happen if the caller does not have permission to manage all apps in the account.
             * This is also `true` if this user is the account owner. If this field is `true`, it should be taken as a signal that this user cannot be fully managed via the API. That is, the API
             * caller is not be able to manage all of the permissions this user holds, either because it doesn't know about them or because the user is the account owner.
             */
            partial?: boolean;
        }
        interface UserComment {
            /** Integer Android SDK version of the user's device at the time the review was written, e.g. 23 is Marshmallow. May be absent. */
            androidOsVersion?: number;
            /** Integer version code of the app as installed at the time the review was written. May be absent. */
            appVersionCode?: number;
            /** String version name of the app as installed at the time the review was written. May be absent. */
            appVersionName?: string;
            /** Codename for the reviewer's device, e.g. klte, flounder. May be absent. */
            device?: string;
            /** Information about the characteristics of the user's device. */
            deviceMetadata?: DeviceMetadata;
            /** The last time at which this comment was updated. */
            lastModified?: Timestamp;
            /** Untranslated text of the review, where the review was translated. If the review was not translated this is left blank. */
            originalText?: string;
            /** Language code for the reviewer. This is taken from the device settings so is not guaranteed to match the language the review is written in. May be absent. */
            reviewerLanguage?: string;
            /** The star rating associated with the review, from 1 to 5. */
            starRating?: number;
            /**
             * The content of the comment, i.e. review body. In some cases users have been able to write a review with separate title and body; in those cases the title and body are concatenated
             * and separated by a tab character.
             */
            text?: string;
            /** Number of users who have given this review a thumbs down. */
            thumbsDownCount?: number;
            /** Number of users who have given this review a thumbs up. */
            thumbsUpCount?: number;
        }
        interface UserCountrySet {
            /** List of country codes representing countries. A Country code is represented in ISO 3166 alpha-2 format. For Example:- "IT" for Italy, "GE" for Georgia. */
            countryCodes?: string[];
            /** Country set name. */
            name?: string;
        }
        interface UserInitiatedCancellation {
            /** Information provided by the user when they complete the subscription cancellation flow (cancellation reason survey). */
            cancelSurveyResult?: CancelSurveyResult;
            /**
             * The time at which the subscription was canceled by the user. The user might still have access to the subscription after this time. Use line_items.expiry_time to determine if a user
             * still has access.
             */
            cancelTime?: string;
        }
        interface UsesPermission {
            /** Optionally, the maximum SDK version for which the permission is required. */
            maxSdkVersion?: number;
            /** The name of the permission requested. */
            name?: string;
        }
        interface Variant {
            /** The device spec used to generate the APK. */
            deviceSpec?: DeviceSpec;
            /** Output only. The ID of a previously created system APK variant. */
            variantId?: number;
        }
        interface VoidedPurchase {
            /** This kind represents a voided purchase object in the androidpublisher service. */
            kind?: string;
            /** The order id which uniquely identifies a one-time purchase, subscription purchase, or subscription renewal. */
            orderId?: string;
            /** The time at which the purchase was made, in milliseconds since the epoch (Jan 1, 1970). */
            purchaseTimeMillis?: string;
            /** The token which uniquely identifies a one-time purchase or subscription. To uniquely identify subscription renewals use order_id (available starting from version 3 of the API). */
            purchaseToken?: string;
            /** The reason why the purchase was voided, possible values are: 0. Other 1. Remorse 2. Not_received 3. Defective 4. Accidental_purchase 5. Fraud 6. Friendly_fraud 7. Chargeback */
            voidedReason?: number;
            /** The initiator of voided purchase, possible values are: 0. User 1. Developer 2. Google */
            voidedSource?: number;
            /** The time at which the purchase was canceled/refunded/charged-back, in milliseconds since the epoch (Jan 1, 1970). */
            voidedTimeMillis?: string;
        }
        interface VoidedPurchasesListResponse {
            /** General pagination information. */
            pageInfo?: PageInfo;
            /** Pagination information for token pagination. */
            tokenPagination?: TokenPagination;
            voidedPurchases?: VoidedPurchase[];
        }
        interface DeviceTierConfigsResource {
            /** Creates a new device tier config for an app. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Whether the service should accept device IDs that are unknown to Play's device catalog. */
                allowUnknownDevices?: boolean;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Package name of the app. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: DeviceTierConfig;
            }): Request<DeviceTierConfig>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Whether the service should accept device IDs that are unknown to Play's device catalog. */
                allowUnknownDevices?: boolean;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Package name of the app. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: DeviceTierConfig): Request<DeviceTierConfig>;
            /** Returns a particular device tier config. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Required. Id of an existing device tier config. */
                deviceTierConfigId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Package name of the app. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<DeviceTierConfig>;
            /** Returns created device tier configs, ordered by descending creation time. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Package name of the app. */
                packageName: string;
                /**
                 * The maximum number of device tier configs to return. The service may return fewer than this value. If unspecified, at most 10 device tier configs will be returned. The maximum
                 * value for this field is 100; values above 100 will be coerced to 100. Device tier configs will be ordered by descending creation time.
                 */
                pageSize?: number;
                /** A page token, received from a previous `ListDeviceTierConfigs` call. Provide this to retrieve the subsequent page. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListDeviceTierConfigsResponse>;
        }
        interface ApplicationsResource {
            deviceTierConfigs: DeviceTierConfigsResource;
        }
        interface ApksResource {
            /**
             * Creates a new APK without uploading the APK itself to Google Play, instead hosting the APK at a specified URL. This function is only available to organizations using Managed Play
             * whose application is configured to restrict distribution to the organizations.
             */
            addexternallyhosted(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Identifier of the edit. */
                editId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Package name of the app. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: ApksAddExternallyHostedRequest;
            }): Request<ApksAddExternallyHostedResponse>;
            addexternallyhosted(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Identifier of the edit. */
                editId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Package name of the app. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: ApksAddExternallyHostedRequest): Request<ApksAddExternallyHostedResponse>;
            /** Lists all current APKs of the app and edit. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Identifier of the edit. */
                editId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Package name of the app. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ApksListResponse>;
            /** Uploads an APK and adds to the current edit. */
            upload(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Identifier of the edit. */
                editId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Package name of the app. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Apk>;
        }
        interface BundlesResource {
            /** Lists all current Android App Bundles of the app and edit. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Identifier of the edit. */
                editId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Package name of the app. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<BundlesListResponse>;
            /**
             * Uploads a new Android App Bundle to this edit. If you are using the Google API client libraries, please increase the timeout of the http request before calling this endpoint (a
             * timeout of 2 minutes is recommended). See [Timeouts and Errors](https://developers.google.com/api-client-library/java/google-api-java-client/errors) for an example in java.
             */
            upload(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Must be set to true if the app bundle installation may trigger a warning on user devices (for example, if installation size may be over a threshold, typically 100 MB). */
                ackBundleInstallationWarning?: boolean;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Device tier config (DTC) to be used for generating deliverables (APKs). Contains id of the DTC or "LATEST" for last uploaded DTC. */
                deviceTierConfigId?: string;
                /** Identifier of the edit. */
                editId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Package name of the app. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Bundle>;
        }
        interface CountryavailabilityResource {
            /** Gets country availability. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Identifier of the edit. */
                editId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Package name of the app. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The track to read from. */
                track: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<TrackCountryAvailability>;
        }
        interface DeobfuscationfilesResource {
            /** Uploads a new deobfuscation file and attaches to the specified APK. */
            upload(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** The version code of the APK whose Deobfuscation File is being uploaded. */
                apkVersionCode: number;
                /** JSONP */
                callback?: string;
                /** The type of the deobfuscation file. */
                deobfuscationFileType: string;
                /** Unique identifier for this edit. */
                editId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Unique identifier for the Android app. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<DeobfuscationFilesUploadResponse>;
        }
        interface DetailsResource {
            /** Gets details of an app. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Identifier of the edit. */
                editId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Package name of the app. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<AppDetails>;
            /** Patches details of an app. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Identifier of the edit. */
                editId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Package name of the app. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: AppDetails;
            }): Request<AppDetails>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Identifier of the edit. */
                editId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Package name of the app. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: AppDetails): Request<AppDetails>;
            /** Updates details of an app. */
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Identifier of the edit. */
                editId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Package name of the app. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: AppDetails;
            }): Request<AppDetails>;
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Identifier of the edit. */
                editId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Package name of the app. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: AppDetails): Request<AppDetails>;
        }
        interface ExpansionfilesResource {
            /** Fetches the expansion file configuration for the specified APK. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** The version code of the APK whose expansion file configuration is being read or modified. */
                apkVersionCode: number;
                /** JSONP */
                callback?: string;
                /** Identifier of the edit. */
                editId: string;
                /** The file type of the file configuration which is being read or modified. */
                expansionFileType: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Package name of the app. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ExpansionFile>;
            /** Patches the APK's expansion file configuration to reference another APK's expansion file. To add a new expansion file use the Upload method. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** The version code of the APK whose expansion file configuration is being read or modified. */
                apkVersionCode: number;
                /** JSONP */
                callback?: string;
                /** Identifier of the edit. */
                editId: string;
                /** The file type of the expansion file configuration which is being updated. */
                expansionFileType: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Package name of the app. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: ExpansionFile;
            }): Request<ExpansionFile>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** The version code of the APK whose expansion file configuration is being read or modified. */
                apkVersionCode: number;
                /** JSONP */
                callback?: string;
                /** Identifier of the edit. */
                editId: string;
                /** The file type of the expansion file configuration which is being updated. */
                expansionFileType: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Package name of the app. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: ExpansionFile): Request<ExpansionFile>;
            /** Updates the APK's expansion file configuration to reference another APK's expansion file. To add a new expansion file use the Upload method. */
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** The version code of the APK whose expansion file configuration is being read or modified. */
                apkVersionCode: number;
                /** JSONP */
                callback?: string;
                /** Identifier of the edit. */
                editId: string;
                /** The file type of the file configuration which is being read or modified. */
                expansionFileType: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Package name of the app. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: ExpansionFile;
            }): Request<ExpansionFile>;
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** The version code of the APK whose expansion file configuration is being read or modified. */
                apkVersionCode: number;
                /** JSONP */
                callback?: string;
                /** Identifier of the edit. */
                editId: string;
                /** The file type of the file configuration which is being read or modified. */
                expansionFileType: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Package name of the app. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: ExpansionFile): Request<ExpansionFile>;
            /** Uploads a new expansion file and attaches to the specified APK. */
            upload(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** The version code of the APK whose expansion file configuration is being read or modified. */
                apkVersionCode: number;
                /** JSONP */
                callback?: string;
                /** Identifier of the edit. */
                editId: string;
                /** The file type of the expansion file configuration which is being updated. */
                expansionFileType: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Package name of the app. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ExpansionFilesUploadResponse>;
        }
        interface ImagesResource {
            /** Deletes the image (specified by id) from the edit. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Identifier of the edit. */
                editId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Unique identifier an image within the set of images attached to this edit. */
                imageId: string;
                /** Type of the Image. */
                imageType: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Language localization code (a BCP-47 language tag; for example, "de-AT" for Austrian German). */
                language: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Package name of the app. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<void>;
            /** Deletes all images for the specified language and image type. Returns an empty response if no images are found. */
            deleteall(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Identifier of the edit. */
                editId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Type of the Image. Providing an image type that refers to no images is a no-op. */
                imageType: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Language localization code (a BCP-47 language tag; for example, "de-AT" for Austrian German). Providing a language that is not supported by the App is a no-op. */
                language: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Package name of the app. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ImagesDeleteAllResponse>;
            /** Lists all images. The response may be empty. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Identifier of the edit. */
                editId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Type of the Image. Providing an image type that refers to no images will return an empty response. */
                imageType: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Language localization code (a BCP-47 language tag; for example, "de-AT" for Austrian German). There must be a store listing for the specified language. */
                language: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Package name of the app. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ImagesListResponse>;
            /** Uploads an image of the specified language and image type, and adds to the edit. */
            upload(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Identifier of the edit. */
                editId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Type of the Image. */
                imageType: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Language localization code (a BCP-47 language tag; for example, "de-AT" for Austrian German). Providing a language that is not supported by the App is a no-op. */
                language: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Package name of the app. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ImagesUploadResponse>;
        }
        interface ListingsResource {
            /** Deletes a localized store listing. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Identifier of the edit. */
                editId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Language localization code (a BCP-47 language tag; for example, "de-AT" for Austrian German). */
                language: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Package name of the app. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<void>;
            /** Deletes all store listings. */
            deleteall(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Identifier of the edit. */
                editId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Package name of the app. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<void>;
            /** Gets a localized store listing. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Identifier of the edit. */
                editId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Language localization code (a BCP-47 language tag; for example, "de-AT" for Austrian German). */
                language: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Package name of the app. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Listing>;
            /** Lists all localized store listings. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Identifier of the edit. */
                editId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Package name of the app. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListingsListResponse>;
            /** Patches a localized store listing. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Identifier of the edit. */
                editId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Language localization code (a BCP-47 language tag; for example, "de-AT" for Austrian German). */
                language: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Package name of the app. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Listing;
            }): Request<Listing>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Identifier of the edit. */
                editId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Language localization code (a BCP-47 language tag; for example, "de-AT" for Austrian German). */
                language: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Package name of the app. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Listing): Request<Listing>;
            /** Creates or updates a localized store listing. */
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Identifier of the edit. */
                editId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Language localization code (a BCP-47 language tag; for example, "de-AT" for Austrian German). */
                language: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Package name of the app. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Listing;
            }): Request<Listing>;
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Identifier of the edit. */
                editId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Language localization code (a BCP-47 language tag; for example, "de-AT" for Austrian German). */
                language: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Package name of the app. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Listing): Request<Listing>;
        }
        interface TestersResource {
            /** Gets testers. Note: Testers resource does not support email lists. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Identifier of the edit. */
                editId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Package name of the app. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The track to read from. */
                track: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Testers>;
            /** Patches testers. Note: Testers resource does not support email lists. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Identifier of the edit. */
                editId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Package name of the app. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The track to update. */
                track: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Testers;
            }): Request<Testers>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Identifier of the edit. */
                editId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Package name of the app. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The track to update. */
                track: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Testers): Request<Testers>;
            /** Updates testers. Note: Testers resource does not support email lists. */
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Identifier of the edit. */
                editId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Package name of the app. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The track to update. */
                track: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Testers;
            }): Request<Testers>;
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Identifier of the edit. */
                editId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Package name of the app. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The track to update. */
                track: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Testers): Request<Testers>;
        }
        interface TracksResource {
            /** Gets a track. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Identifier of the edit. */
                editId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Package name of the app. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Identifier of the track. [More on track name](https://developers.google.com/android-publisher/tracks#ff-track-name) */
                track: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Track>;
            /** Lists all tracks. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Identifier of the edit. */
                editId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Package name of the app. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<TracksListResponse>;
            /** Patches a track. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Identifier of the edit. */
                editId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Package name of the app. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Identifier of the track. [More on track name](https://developers.google.com/android-publisher/tracks#ff-track-name) */
                track: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Track;
            }): Request<Track>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Identifier of the edit. */
                editId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Package name of the app. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Identifier of the track. [More on track name](https://developers.google.com/android-publisher/tracks#ff-track-name) */
                track: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Track): Request<Track>;
            /** Updates a track. */
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Identifier of the edit. */
                editId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Package name of the app. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Identifier of the track. [More on track name](https://developers.google.com/android-publisher/tracks#ff-track-name) */
                track: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Track;
            }): Request<Track>;
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Identifier of the edit. */
                editId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Package name of the app. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Identifier of the track. [More on track name](https://developers.google.com/android-publisher/tracks#ff-track-name) */
                track: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Track): Request<Track>;
        }
        interface EditsResource {
            /** Commits an app edit. */
            commit(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /**
                 * Indicates that the changes in this edit will not be reviewed until they are explicitly sent for review from the Google Play Console UI. These changes will be added to any other
                 * changes that are not yet sent for review.
                 */
                changesNotSentForReview?: boolean;
                /** Identifier of the edit. */
                editId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Package name of the app. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<AppEdit>;
            /** Deletes an app edit. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Identifier of the edit. */
                editId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Package name of the app. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<void>;
            /** Gets an app edit. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Identifier of the edit. */
                editId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Package name of the app. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<AppEdit>;
            /** Creates a new edit for an app. */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Package name of the app. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: AppEdit;
            }): Request<AppEdit>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Package name of the app. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: AppEdit): Request<AppEdit>;
            /** Validates an app edit. */
            validate(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Identifier of the edit. */
                editId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Package name of the app. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<AppEdit>;
            apks: ApksResource;
            bundles: BundlesResource;
            countryavailability: CountryavailabilityResource;
            deobfuscationfiles: DeobfuscationfilesResource;
            details: DetailsResource;
            expansionfiles: ExpansionfilesResource;
            images: ImagesResource;
            listings: ListingsResource;
            testers: TestersResource;
            tracks: TracksResource;
        }
        interface ExternaltransactionsResource {
            /** Creates a new external transaction. */
            createexternaltransaction(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /**
                 * Required. The id to use for the external transaction. Must be unique across all other transactions for the app. This value should be 1-63 characters and valid characters are
                 * /a-z0-9_-/.
                 */
                externalTransactionId?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. The parent resource where this external transaction will be created. Format: applications/{package_name} */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: ExternalTransaction;
            }): Request<ExternalTransaction>;
            createexternaltransaction(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /**
                 * Required. The id to use for the external transaction. Must be unique across all other transactions for the app. This value should be 1-63 characters and valid characters are
                 * /a-z0-9_-/.
                 */
                externalTransactionId?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. The parent resource where this external transaction will be created. Format: applications/{package_name} */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: ExternalTransaction): Request<ExternalTransaction>;
            /** Gets an existing external transaction. */
            getexternaltransaction(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Required. The name of the external transaction to retrieve. Format: applications/{package_name}/externalTransactions/{external_transaction} */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ExternalTransaction>;
            /** Refunds or partially refunds an existing external transaction. */
            refundexternaltransaction(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Required. The name of the external transaction that will be refunded. Format: applications/{package_name}/externalTransactions/{external_transaction} */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: RefundExternalTransactionRequest;
            }): Request<ExternalTransaction>;
            refundexternaltransaction(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Required. The name of the external transaction that will be refunded. Format: applications/{package_name}/externalTransactions/{external_transaction} */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: RefundExternalTransactionRequest): Request<ExternalTransaction>;
        }
        interface GeneratedapksResource {
            /** Downloads a single signed APK generated from an app bundle. */
            download(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Download ID, which uniquely identifies the APK to download. Can be obtained from the response of `generatedapks.list` method. */
                downloadId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Package name of the app. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Version code of the app bundle. */
                versionCode: number;
            }): Request<void>;
            /** Returns download metadata for all APKs that were generated from a given app bundle. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Package name of the app. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Version code of the app bundle. */
                versionCode: number;
            }): Request<GeneratedApksListResponse>;
        }
        interface GrantsResource {
            /** Grant access for a user to the given package. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. The user which needs permission. Format: developers/{developer}/users/{user} */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Grant;
            }): Request<Grant>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. The user which needs permission. Format: developers/{developer}/users/{user} */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Grant): Request<Grant>;
            /** Removes all access for the user to the given package or developer account. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Required. The name of the grant to delete. Format: developers/{developer}/users/{email}/grants/{package_name} */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<void>;
            /** Updates access for the user to the given package. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * Required. Resource name for this grant, following the pattern "developers/{developer}/users/{email}/grants/{package_name}". If this grant is for a draft app, the app ID will be
                 * used in this resource name instead of the package name.
                 */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Optional. The list of fields to be updated. */
                updateMask?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Grant;
            }): Request<Grant>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * Required. Resource name for this grant, following the pattern "developers/{developer}/users/{email}/grants/{package_name}". If this grant is for a draft app, the app ID will be
                 * used in this resource name instead of the package name.
                 */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Optional. The list of fields to be updated. */
                updateMask?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Grant): Request<Grant>;
        }
        interface InappproductsResource {
            /** Deletes an in-app product (i.e. a managed product or a subscription). */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Package name of the app. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Unique identifier for the in-app product. */
                sku: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<void>;
            /** Gets an in-app product, which can be a managed product or a subscription. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Package name of the app. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Unique identifier for the in-app product. */
                sku: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<InAppProduct>;
            /** Creates an in-app product (i.e. a managed product or a subscription). */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /**
                 * If true the prices for all regions targeted by the parent app that don't have a price specified for this in-app product will be auto converted to the target currency based on
                 * the default price. Defaults to false.
                 */
                autoConvertMissingPrices?: boolean;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Package name of the app. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: InAppProduct;
            }): Request<InAppProduct>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /**
                 * If true the prices for all regions targeted by the parent app that don't have a price specified for this in-app product will be auto converted to the target currency based on
                 * the default price. Defaults to false.
                 */
                autoConvertMissingPrices?: boolean;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Package name of the app. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: InAppProduct): Request<InAppProduct>;
            /**
             * Lists all in-app products - both managed products and subscriptions. If an app has a large number of in-app products, the response may be paginated. In this case the response field
             * `tokenPagination.nextPageToken` will be set and the caller should provide its value as a `token` request parameter to retrieve the next page.
             */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Deprecated and ignored. The page size is determined by the server. */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Package name of the app. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Deprecated and ignored. Set the `token` parameter to retrieve the next page. */
                startIndex?: number;
                /** Pagination token. If empty, list starts at the first product. */
                token?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<InappproductsListResponse>;
            /** Patches an in-app product (i.e. a managed product or a subscription). */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /**
                 * If true the prices for all regions targeted by the parent app that don't have a price specified for this in-app product will be auto converted to the target currency based on
                 * the default price. Defaults to false.
                 */
                autoConvertMissingPrices?: boolean;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Package name of the app. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Unique identifier for the in-app product. */
                sku: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: InAppProduct;
            }): Request<InAppProduct>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /**
                 * If true the prices for all regions targeted by the parent app that don't have a price specified for this in-app product will be auto converted to the target currency based on
                 * the default price. Defaults to false.
                 */
                autoConvertMissingPrices?: boolean;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Package name of the app. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Unique identifier for the in-app product. */
                sku: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: InAppProduct): Request<InAppProduct>;
            /** Updates an in-app product (i.e. a managed product or a subscription). */
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** If set to true, and the in-app product with the given package_name and sku doesn't exist, the in-app product will be created. */
                allowMissing?: boolean;
                /** Data format for response. */
                alt?: string;
                /**
                 * If true the prices for all regions targeted by the parent app that don't have a price specified for this in-app product will be auto converted to the target currency based on
                 * the default price. Defaults to false.
                 */
                autoConvertMissingPrices?: boolean;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Package name of the app. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Unique identifier for the in-app product. */
                sku: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: InAppProduct;
            }): Request<InAppProduct>;
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** If set to true, and the in-app product with the given package_name and sku doesn't exist, the in-app product will be created. */
                allowMissing?: boolean;
                /** Data format for response. */
                alt?: string;
                /**
                 * If true the prices for all regions targeted by the parent app that don't have a price specified for this in-app product will be auto converted to the target currency based on
                 * the default price. Defaults to false.
                 */
                autoConvertMissingPrices?: boolean;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Package name of the app. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Unique identifier for the in-app product. */
                sku: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: InAppProduct): Request<InAppProduct>;
        }
        interface InternalappsharingartifactsResource {
            /**
             * Uploads an APK to internal app sharing. If you are using the Google API client libraries, please increase the timeout of the http request before calling this endpoint (a timeout of
             * 2 minutes is recommended). See [Timeouts and Errors](https://developers.google.com/api-client-library/java/google-api-java-client/errors) for an example in java.
             */
            uploadapk(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Package name of the app. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<InternalAppSharingArtifact>;
            /**
             * Uploads an app bundle to internal app sharing. If you are using the Google API client libraries, please increase the timeout of the http request before calling this endpoint (a
             * timeout of 2 minutes is recommended). See [Timeouts and Errors](https://developers.google.com/api-client-library/java/google-api-java-client/errors) for an example in java.
             */
            uploadbundle(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Package name of the app. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<InternalAppSharingArtifact>;
        }
        interface OffersResource {
            /** Activates a subscription offer. Once activated, subscription offers will be available to new subscribers. */
            activate(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** Required. The parent base plan (ID) of the offer to activate. */
                basePlanId: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. The unique offer ID of the offer to activate. */
                offerId: string;
                /** Required. The parent app (package name) of the offer to activate. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Required. The parent subscription (ID) of the offer to activate. */
                productId: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: ActivateSubscriptionOfferRequest;
            }): Request<SubscriptionOffer>;
            activate(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** Required. The parent base plan (ID) of the offer to activate. */
                basePlanId: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. The unique offer ID of the offer to activate. */
                offerId: string;
                /** Required. The parent app (package name) of the offer to activate. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Required. The parent subscription (ID) of the offer to activate. */
                productId: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: ActivateSubscriptionOfferRequest): Request<SubscriptionOffer>;
            /** Creates a new subscription offer. Only auto-renewing base plans can have subscription offers. The offer state will be DRAFT until it is activated. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** Required. The parent base plan (ID) for which the offer should be created. Must be equal to the base_plan_id field on the SubscriptionOffer resource. */
                basePlanId: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. The ID to use for the offer. For the requirements on this format, see the documentation of the offer_id field on the SubscriptionOffer resource. */
                offerId?: string;
                /** Required. The parent app (package name) for which the offer should be created. Must be equal to the package_name field on the Subscription resource. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Required. The parent subscription (ID) for which the offer should be created. Must be equal to the product_id field on the SubscriptionOffer resource. */
                productId: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Required. A string representing version of the available regions being used for the specified resource. The current version is 2022/02. */
                "regionsVersion.version"?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: SubscriptionOffer;
            }): Request<SubscriptionOffer>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** Required. The parent base plan (ID) for which the offer should be created. Must be equal to the base_plan_id field on the SubscriptionOffer resource. */
                basePlanId: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. The ID to use for the offer. For the requirements on this format, see the documentation of the offer_id field on the SubscriptionOffer resource. */
                offerId?: string;
                /** Required. The parent app (package name) for which the offer should be created. Must be equal to the package_name field on the Subscription resource. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Required. The parent subscription (ID) for which the offer should be created. Must be equal to the product_id field on the SubscriptionOffer resource. */
                productId: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Required. A string representing version of the available regions being used for the specified resource. The current version is 2022/02. */
                "regionsVersion.version"?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: SubscriptionOffer): Request<SubscriptionOffer>;
            /** Deactivates a subscription offer. Once deactivated, existing subscribers will maintain their subscription, but the offer will become unavailable to new subscribers. */
            deactivate(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** Required. The parent base plan (ID) of the offer to deactivate. */
                basePlanId: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. The unique offer ID of the offer to deactivate. */
                offerId: string;
                /** Required. The parent app (package name) of the offer to deactivate. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Required. The parent subscription (ID) of the offer to deactivate. */
                productId: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: DeactivateSubscriptionOfferRequest;
            }): Request<SubscriptionOffer>;
            deactivate(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** Required. The parent base plan (ID) of the offer to deactivate. */
                basePlanId: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. The unique offer ID of the offer to deactivate. */
                offerId: string;
                /** Required. The parent app (package name) of the offer to deactivate. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Required. The parent subscription (ID) of the offer to deactivate. */
                productId: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: DeactivateSubscriptionOfferRequest): Request<SubscriptionOffer>;
            /** Deletes a subscription offer. Can only be done for draft offers. This action is irreversible. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** Required. The parent base plan (ID) of the offer to delete. */
                basePlanId: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. The unique offer ID of the offer to delete. */
                offerId: string;
                /** Required. The parent app (package name) of the offer to delete. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Required. The parent subscription (ID) of the offer to delete. */
                productId: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<void>;
            /** Reads a single offer */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** Required. The parent base plan (ID) of the offer to get. */
                basePlanId: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. The unique offer ID of the offer to get. */
                offerId: string;
                /** Required. The parent app (package name) of the offer to get. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Required. The parent subscription (ID) of the offer to get. */
                productId: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<SubscriptionOffer>;
            /** Lists all offers under a given subscription. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** Required. The parent base plan (ID) for which the offers should be read. May be specified as '-' to read all offers under a subscription. */
                basePlanId: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. The parent app (package name) for which the subscriptions should be read. */
                packageName: string;
                /**
                 * The maximum number of subscriptions to return. The service may return fewer than this value. If unspecified, at most 50 subscriptions will be returned. The maximum value is
                 * 1000; values above 1000 will be coerced to 1000.
                 */
                pageSize?: number;
                /**
                 * A page token, received from a previous `ListSubscriptionsOffers` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to
                 * `ListSubscriptionOffers` must match the call that provided the page token.
                 */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Required. The parent subscription (ID) for which the offers should be read. */
                productId: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListSubscriptionOffersResponse>;
            /** Updates an existing subscription offer. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** Required. Immutable. The ID of the base plan to which this offer is an extension. */
                basePlanId: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. Immutable. Unique ID of this subscription offer. Must be unique within the base plan. */
                offerId: string;
                /** Required. Immutable. The package name of the app the parent subscription belongs to. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Required. Immutable. The ID of the parent subscription this offer belongs to. */
                productId: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Required. A string representing version of the available regions being used for the specified resource. The current version is 2022/02. */
                "regionsVersion.version"?: string;
                /** Required. The list of fields to be updated. */
                updateMask?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: SubscriptionOffer;
            }): Request<SubscriptionOffer>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** Required. Immutable. The ID of the base plan to which this offer is an extension. */
                basePlanId: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. Immutable. Unique ID of this subscription offer. Must be unique within the base plan. */
                offerId: string;
                /** Required. Immutable. The package name of the app the parent subscription belongs to. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Required. Immutable. The ID of the parent subscription this offer belongs to. */
                productId: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Required. A string representing version of the available regions being used for the specified resource. The current version is 2022/02. */
                "regionsVersion.version"?: string;
                /** Required. The list of fields to be updated. */
                updateMask?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: SubscriptionOffer): Request<SubscriptionOffer>;
        }
        interface BasePlansResource {
            /** Activates a base plan. Once activated, base plans will be available to new subscribers. */
            activate(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** Required. The unique base plan ID of the base plan to activate. */
                basePlanId: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. The parent app (package name) of the base plan to activate. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Required. The parent subscription (ID) of the base plan to activate. */
                productId: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: ActivateBasePlanRequest;
            }): Request<Subscription>;
            activate(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** Required. The unique base plan ID of the base plan to activate. */
                basePlanId: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. The parent app (package name) of the base plan to activate. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Required. The parent subscription (ID) of the base plan to activate. */
                productId: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: ActivateBasePlanRequest): Request<Subscription>;
            /** Deactivates a base plan. Once deactivated, the base plan will become unavailable to new subscribers, but existing subscribers will maintain their subscription */
            deactivate(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** Required. The unique base plan ID of the base plan to deactivate. */
                basePlanId: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. The parent app (package name) of the base plan to deactivate. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Required. The parent subscription (ID) of the base plan to deactivate. */
                productId: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: DeactivateBasePlanRequest;
            }): Request<Subscription>;
            deactivate(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** Required. The unique base plan ID of the base plan to deactivate. */
                basePlanId: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. The parent app (package name) of the base plan to deactivate. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Required. The parent subscription (ID) of the base plan to deactivate. */
                productId: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: DeactivateBasePlanRequest): Request<Subscription>;
            /** Deletes a base plan. Can only be done for draft base plans. This action is irreversible. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** Required. The unique offer ID of the base plan to delete. */
                basePlanId: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. The parent app (package name) of the base plan to delete. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Required. The parent subscription (ID) of the base plan to delete. */
                productId: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<void>;
            /**
             * Migrates subscribers who are receiving an historical subscription price to the currently-offered price for the specified region. Requests will cause price change notifications to be
             * sent to users who are currently receiving an historical price older than the supplied timestamp. Subscribers who do not agree to the new price will have their subscription ended at
             * the next renewal.
             */
            migratePrices(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** Required. The unique base plan ID of the base plan to update prices on. */
                basePlanId: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. Package name of the parent app. Must be equal to the package_name field on the Subscription resource. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Required. The ID of the subscription to update. Must be equal to the product_id field on the Subscription resource. */
                productId: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: MigrateBasePlanPricesRequest;
            }): Request<{}>;
            migratePrices(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** Required. The unique base plan ID of the base plan to update prices on. */
                basePlanId: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. Package name of the parent app. Must be equal to the package_name field on the Subscription resource. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Required. The ID of the subscription to update. Must be equal to the product_id field on the Subscription resource. */
                productId: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: MigrateBasePlanPricesRequest): Request<{}>;
            offers: OffersResource;
        }
        interface SubscriptionsResource {
            /**
             * Archives a subscription. Can only be done if at least one base plan was active in the past, and no base plan is available for new or existing subscribers currently. This action is
             * irreversible, and the subscription ID will remain reserved.
             */
            archive(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. The parent app (package name) of the app of the subscription to delete. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Required. The unique product ID of the subscription to delete. */
                productId: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: ArchiveSubscriptionRequest;
            }): Request<Subscription>;
            archive(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. The parent app (package name) of the app of the subscription to delete. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Required. The unique product ID of the subscription to delete. */
                productId: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: ArchiveSubscriptionRequest): Request<Subscription>;
            /** Creates a new subscription. Newly added base plans will remain in draft state until activated. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. The parent app (package name) for which the subscription should be created. Must be equal to the package_name field on the Subscription resource. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Required. The ID to use for the subscription. For the requirements on this format, see the documentation of the product_id field on the Subscription resource. */
                productId?: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Required. A string representing version of the available regions being used for the specified resource. The current version is 2022/02. */
                "regionsVersion.version"?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Subscription;
            }): Request<Subscription>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. The parent app (package name) for which the subscription should be created. Must be equal to the package_name field on the Subscription resource. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Required. The ID to use for the subscription. For the requirements on this format, see the documentation of the product_id field on the Subscription resource. */
                productId?: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Required. A string representing version of the available regions being used for the specified resource. The current version is 2022/02. */
                "regionsVersion.version"?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Subscription): Request<Subscription>;
            /** Deletes a subscription. A subscription can only be deleted if it has never had a base plan published. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. The parent app (package name) of the app of the subscription to delete. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Required. The unique product ID of the subscription to delete. */
                productId: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<void>;
            /** Reads a single subscription. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. The parent app (package name) of the subscription to get. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Required. The unique product ID of the subscription to get. */
                productId: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Subscription>;
            /** Lists all subscriptions under a given app. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. The parent app (package name) for which the subscriptions should be read. */
                packageName: string;
                /**
                 * The maximum number of subscriptions to return. The service may return fewer than this value. If unspecified, at most 50 subscriptions will be returned. The maximum value is
                 * 1000; values above 1000 will be coerced to 1000.
                 */
                pageSize?: number;
                /**
                 * A page token, received from a previous `ListSubscriptions` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to
                 * `ListSubscriptions` must match the call that provided the page token.
                 */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Whether archived subscriptions should be included in the response. Defaults to false. */
                showArchived?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListSubscriptionsResponse>;
            /** Updates an existing subscription. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Immutable. Package name of the parent app. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /**
                 * Immutable. Unique product ID of the product. Unique within the parent app. Product IDs must be composed of lower-case letters (a-z), numbers (0-9), underscores (_) and dots (.).
                 * It must start with a lower-case letter or number, and be between 1 and 40 (inclusive) characters in length.
                 */
                productId: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Required. A string representing version of the available regions being used for the specified resource. The current version is 2022/02. */
                "regionsVersion.version"?: string;
                /** Required. The list of fields to be updated. */
                updateMask?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Subscription;
            }): Request<Subscription>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Immutable. Package name of the parent app. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /**
                 * Immutable. Unique product ID of the product. Unique within the parent app. Product IDs must be composed of lower-case letters (a-z), numbers (0-9), underscores (_) and dots (.).
                 * It must start with a lower-case letter or number, and be between 1 and 40 (inclusive) characters in length.
                 */
                productId: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Required. A string representing version of the available regions being used for the specified resource. The current version is 2022/02. */
                "regionsVersion.version"?: string;
                /** Required. The list of fields to be updated. */
                updateMask?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Subscription): Request<Subscription>;
            basePlans: BasePlansResource;
        }
        interface MonetizationResource {
            /** Calculates the region prices, using today's exchange rate and country-specific pricing patterns, based on the price in the request for a set of regions. */
            convertRegionPrices(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. The app package name. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: ConvertRegionPricesRequest;
            }): Request<ConvertRegionPricesResponse>;
            convertRegionPrices(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. The app package name. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: ConvertRegionPricesRequest): Request<ConvertRegionPricesResponse>;
            subscriptions: SubscriptionsResource;
        }
        interface OrdersResource {
            /** Refunds a user's subscription or in-app purchase order. Orders older than 1 year cannot be refunded. */
            refund(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The order ID provided to the user when the subscription or in-app order was purchased. */
                orderId: string;
                /** The package name of the application for which this subscription or in-app item was purchased (for example, 'com.some.thing'). */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * Whether to revoke the purchased item. If set to true, access to the subscription or in-app item will be terminated immediately. If the item is a recurring subscription, all
                 * future payments will also be terminated. Consumed in-app items need to be handled by developer's app. (optional).
                 */
                revoke?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<void>;
        }
        interface ProductsResource {
            /** Acknowledges a purchase of an inapp item. */
            acknowledge(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The package name of the application the inapp product was sold in (for example, 'com.some.thing'). */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** The inapp product SKU (for example, 'com.some.thing.inapp1'). */
                productId: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The token provided to the user's device when the inapp product was purchased. */
                token: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: ProductPurchasesAcknowledgeRequest;
            }): Request<void>;
            acknowledge(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The package name of the application the inapp product was sold in (for example, 'com.some.thing'). */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** The inapp product SKU (for example, 'com.some.thing.inapp1'). */
                productId: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The token provided to the user's device when the inapp product was purchased. */
                token: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: ProductPurchasesAcknowledgeRequest): Request<void>;
            /** Consumes a purchase for an inapp item. */
            consume(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The package name of the application the inapp product was sold in (for example, 'com.some.thing'). */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** The inapp product SKU (for example, 'com.some.thing.inapp1'). */
                productId: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The token provided to the user's device when the inapp product was purchased. */
                token: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<void>;
            /** Checks the purchase and consumption status of an inapp item. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The package name of the application the inapp product was sold in (for example, 'com.some.thing'). */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** The inapp product SKU (for example, 'com.some.thing.inapp1'). */
                productId: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The token provided to the user's device when the inapp product was purchased. */
                token: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ProductPurchase>;
        }
        interface SubscriptionsResource {
            /** Acknowledges a subscription purchase. */
            acknowledge(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The package name of the application for which this subscription was purchased (for example, 'com.some.thing'). */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The purchased subscription ID (for example, 'monthly001'). */
                subscriptionId: string;
                /** The token provided to the user's device when the subscription was purchased. */
                token: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: SubscriptionPurchasesAcknowledgeRequest;
            }): Request<void>;
            acknowledge(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The package name of the application for which this subscription was purchased (for example, 'com.some.thing'). */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The purchased subscription ID (for example, 'monthly001'). */
                subscriptionId: string;
                /** The token provided to the user's device when the subscription was purchased. */
                token: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: SubscriptionPurchasesAcknowledgeRequest): Request<void>;
            /** Cancels a user's subscription purchase. The subscription remains valid until its expiration time. */
            cancel(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The package name of the application for which this subscription was purchased (for example, 'com.some.thing'). */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The purchased subscription ID (for example, 'monthly001'). */
                subscriptionId: string;
                /** The token provided to the user's device when the subscription was purchased. */
                token: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<void>;
            /** Defers a user's subscription purchase until a specified future expiration time. */
            defer(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The package name of the application for which this subscription was purchased (for example, 'com.some.thing'). */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The purchased subscription ID (for example, 'monthly001'). */
                subscriptionId: string;
                /** The token provided to the user's device when the subscription was purchased. */
                token: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: SubscriptionPurchasesDeferRequest;
            }): Request<SubscriptionPurchasesDeferResponse>;
            defer(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The package name of the application for which this subscription was purchased (for example, 'com.some.thing'). */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The purchased subscription ID (for example, 'monthly001'). */
                subscriptionId: string;
                /** The token provided to the user's device when the subscription was purchased. */
                token: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: SubscriptionPurchasesDeferRequest): Request<SubscriptionPurchasesDeferResponse>;
            /** Checks whether a user's subscription purchase is valid and returns its expiry time. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The package name of the application for which this subscription was purchased (for example, 'com.some.thing'). */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The purchased subscription ID (for example, 'monthly001'). */
                subscriptionId: string;
                /** The token provided to the user's device when the subscription was purchased. */
                token: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<SubscriptionPurchase>;
            /** Refunds a user's subscription purchase, but the subscription remains valid until its expiration time and it will continue to recur. */
            refund(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The package name of the application for which this subscription was purchased (for example, 'com.some.thing'). */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** "The purchased subscription ID (for example, 'monthly001'). */
                subscriptionId: string;
                /** The token provided to the user's device when the subscription was purchased. */
                token: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<void>;
            /** Refunds and immediately revokes a user's subscription purchase. Access to the subscription will be terminated immediately and it will stop recurring. */
            revoke(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The package name of the application for which this subscription was purchased (for example, 'com.some.thing'). */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The purchased subscription ID (for example, 'monthly001'). */
                subscriptionId: string;
                /** The token provided to the user's device when the subscription was purchased. */
                token: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<void>;
        }
        interface Subscriptionsv2Resource {
            /** Get metadata about a subscription */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The package of the application for which this subscription was purchased (for example, 'com.some.thing'). */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Required. The token provided to the user's device when the subscription was purchased. */
                token: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<SubscriptionPurchaseV2>;
        }
        interface VoidedpurchasesResource {
            /** Lists the purchases that were canceled, refunded or charged-back. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /**
                 * The time, in milliseconds since the Epoch, of the newest voided purchase that you want to see in the response. The value of this parameter cannot be greater than the current
                 * time and is ignored if a pagination token is set. Default value is current time. Note: This filter is applied on the time at which the record is seen as voided by our systems
                 * and not the actual voided time returned in the response.
                 */
                endTime?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Defines how many results the list operation should return. The default number depends on the resource collection. */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The package name of the application for which voided purchases need to be returned (for example, 'com.some.thing'). */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Defines the index of the first element to return. This can only be used if indexed paging is enabled. */
                startIndex?: number;
                /**
                 * The time, in milliseconds since the Epoch, of the oldest voided purchase that you want to see in the response. The value of this parameter cannot be older than 30 days and is
                 * ignored if a pagination token is set. Default value is current time minus 30 days. Note: This filter is applied on the time at which the record is seen as voided by our systems
                 * and not the actual voided time returned in the response.
                 */
                startTime?: string;
                /** Defines the token of the page to return, usually taken from TokenPagination. This can only be used if token paging is enabled. */
                token?: string;
                /**
                 * The type of voided purchases that you want to see in the response. Possible values are: 0. Only voided in-app product purchases will be returned in the response. This is the
                 * default value. 1. Both voided in-app purchases and voided subscription purchases will be returned in the response. Note: Before requesting to receive voided subscription
                 * purchases, you must switch to use orderId in the response which uniquely identifies one-time purchases and subscriptions. Otherwise, you will receive multiple subscription
                 * orders with the same PurchaseToken, because subscription renewal orders share the same PurchaseToken.
                 */
                type?: number;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<VoidedPurchasesListResponse>;
        }
        interface PurchasesResource {
            products: ProductsResource;
            subscriptions: SubscriptionsResource;
            subscriptionsv2: Subscriptionsv2Resource;
            voidedpurchases: VoidedpurchasesResource;
        }
        interface ReviewsResource {
            /** Gets a single review. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Package name of the app. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Unique identifier for a review. */
                reviewId: string;
                /** Language localization code. */
                translationLanguage?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Review>;
            /** Lists all reviews. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** How many results the list operation should return. */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Package name of the app. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The index of the first element to return. */
                startIndex?: number;
                /** Pagination token. If empty, list starts at the first review. */
                token?: string;
                /** Language localization code. */
                translationLanguage?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ReviewsListResponse>;
            /** Replies to a single review, or updates an existing reply. */
            reply(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Package name of the app. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Unique identifier for a review. */
                reviewId: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: ReviewsReplyRequest;
            }): Request<ReviewsReplyResponse>;
            reply(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Package name of the app. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Unique identifier for a review. */
                reviewId: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: ReviewsReplyRequest): Request<ReviewsReplyResponse>;
        }
        interface VariantsResource {
            /** Creates an APK which is suitable for inclusion in a system image from an already uploaded Android App Bundle. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Package name of the app. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** The version code of the App Bundle. */
                versionCode: string;
                /** Request body */
                resource: Variant;
            }): Request<Variant>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Package name of the app. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** The version code of the App Bundle. */
                versionCode: string;
            },
            body: Variant): Request<Variant>;
            /** Downloads a previously created system APK which is suitable for inclusion in a system image. */
            download(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Package name of the app. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** The ID of a previously created system APK variant. */
                variantId: number;
                /** The version code of the App Bundle. */
                versionCode: string;
            }): Request<void>;
            /** Returns a previously created system APK variant. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Package name of the app. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** The ID of a previously created system APK variant. */
                variantId: number;
                /** The version code of the App Bundle. */
                versionCode: string;
            }): Request<Variant>;
            /** Returns the list of previously created system APK variants. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Package name of the app. */
                packageName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** The version code of the App Bundle. */
                versionCode: string;
            }): Request<SystemApksListResponse>;
        }
        interface SystemapksResource {
            variants: VariantsResource;
        }
        interface UsersResource {
            /** Grant access for a user to the given developer account. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. The developer account to add the user to. Format: developers/{developer} */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: User;
            }): Request<User>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. The developer account to add the user to. Format: developers/{developer} */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: User): Request<User>;
            /** Removes all access for the user to the given developer account. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Required. The name of the user to delete. Format: developers/{developer}/users/{email} */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<void>;
            /** Lists all users with access to a developer account. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The maximum number of results to return. This must be set to -1 to disable pagination. */
                pageSize?: number;
                /** A token received from a previous call to this method, in order to retrieve further results. */
                pageToken?: string;
                /** Required. The developer account to fetch users from. Format: developers/{developer} */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListUsersResponse>;
            /** Updates access for the user to the developer account. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Required. Resource name for this user, following the pattern "developers/{developer}/users/{email}". */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Optional. The list of fields to be updated. */
                updateMask?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: User;
            }): Request<User>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Required. Resource name for this user, following the pattern "developers/{developer}/users/{email}". */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Optional. The list of fields to be updated. */
                updateMask?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: User): Request<User>;
        }

        const applications: ApplicationsResource;

        const edits: EditsResource;

        const externaltransactions: ExternaltransactionsResource;

        const generatedapks: GeneratedapksResource;

        const grants: GrantsResource;

        const inappproducts: InappproductsResource;

        const internalappsharingartifacts: InternalappsharingartifactsResource;

        const monetization: MonetizationResource;

        const orders: OrdersResource;

        const purchases: PurchasesResource;

        const reviews: ReviewsResource;

        const systemapks: SystemapksResource;

        const users: UsersResource;
    }
}
