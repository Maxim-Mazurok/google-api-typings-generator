// Type definitions for non-npm package Cloud DNS API v1 1.0
// Project: http://developers.google.com/cloud-dns
// Definitions by: Maxim Mazurok <https://github.com/Maxim-Mazurok>
//                 Google API Typings Generator <https://github.com/google-api-typings-generator>
//                 Nick Amoscato <https://github.com/namoscato>
//                 Declan Vong <https://github.com/declanvong>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 2.8

// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
// Generated from: https://dns.googleapis.com/$discovery/rest?version=v1
// Revision: 20200811

/// <reference types="gapi.client" />

declare namespace gapi.client {
    /** Load Cloud DNS API v1 */
    function load(name: "dns", version: "v1"): PromiseLike<void>;
    function load(name: "dns", version: "v1", callback: () => any): void;

    namespace dns {
        interface Change {
            /** Which ResourceRecordSets to add? */
            additions?: ResourceRecordSet[];
            /** Which ResourceRecordSets to remove? Must match existing data exactly. */
            deletions?: ResourceRecordSet[];
            /** Unique identifier for the resource; defined by the server (output only). */
            id?: string;
            /** If the DNS queries for the zone will be served. */
            isServing?: boolean;
            kind?: string;
            /** The time that this operation was started by the server (output only). This is in RFC3339 text format. */
            startTime?: string;
            /** Status of the operation (output only). A status of "done" means that the request to update the authoritative servers has been sent but the servers might not be updated yet. */
            status?: string;
        }
        interface ChangesListResponse {
            /** The requested changes. */
            changes?: Change[];
            header?: ResponseHeader;
            /** Type of resource. */
            kind?: string;
            /**
             * The presence of this field indicates that there exist more results following your last page of results in pagination order. To fetch them, make another list request using this value
             * as your pagination token. In this way you can retrieve the complete contents of even very large collections one page at a time. However, if the contents of the collection change
             * between the first and last paginated list request, the set of all elements returned will be an inconsistent view of the collection. There is no way to retrieve a "snapshot" of
             * collections larger than the maximum page size.
             */
            nextPageToken?: string;
        }
        interface DnsKey {
            /** String mnemonic specifying the DNSSEC algorithm of this key. Immutable after creation time. */
            algorithm?: string;
            /** The time that this resource was created in the control plane. This is in RFC3339 text format. Output only. */
            creationTime?: string;
            /** A mutable string of at most 1024 characters associated with this resource for the user's convenience. Has no effect on the resource's function. */
            description?: string;
            /** Cryptographic hashes of the DNSKEY resource record associated with this DnsKey. These digests are needed to construct a DS record that points at this DNS key. Output only. */
            digests?: DnsKeyDigest[];
            /** Unique identifier for the resource; defined by the server (output only). */
            id?: string;
            /**
             * Active keys will be used to sign subsequent changes to the ManagedZone. Inactive keys will still be present as DNSKEY Resource Records for the use of resolvers validating existing
             * signatures.
             */
            isActive?: boolean;
            /** Length of the key in bits. Specified at creation time then immutable. */
            keyLength?: number;
            /**
             * The key tag is a non-cryptographic hash of the a DNSKEY resource record associated with this DnsKey. The key tag can be used to identify a DNSKEY more quickly (but it is not a
             * unique identifier). In particular, the key tag is used in a parent zone's DS record to point at the DNSKEY in this child ManagedZone. The key tag is a number in the range [0, 65535]
             * and the algorithm to calculate it is specified in RFC4034 Appendix B. Output only.
             */
            keyTag?: number;
            kind?: string;
            /** Base64 encoded public half of this key. Output only. */
            publicKey?: string;
            /**
             * One of "KEY_SIGNING" or "ZONE_SIGNING". Keys of type KEY_SIGNING have the Secure Entry Point flag set and, when active, will be used to sign only resource record sets of type
             * DNSKEY. Otherwise, the Secure Entry Point flag will be cleared and this key will be used to sign only resource record sets of other types. Immutable after creation time.
             */
            type?: string;
        }
        interface DnsKeyDigest {
            /** The base-16 encoded bytes of this digest. Suitable for use in a DS resource record. */
            digest?: string;
            /** Specifies the algorithm used to calculate this digest. */
            type?: string;
        }
        interface DnsKeysListResponse {
            /** The requested resources. */
            dnsKeys?: DnsKey[];
            header?: ResponseHeader;
            /** Type of resource. */
            kind?: string;
            /**
             * The presence of this field indicates that there exist more results following your last page of results in pagination order. To fetch them, make another list request using this value
             * as your pagination token. In this way you can retrieve the complete contents of even very large collections one page at a time. However, if the contents of the collection change
             * between the first and last paginated list request, the set of all elements returned will be an inconsistent view of the collection. There is no way to retrieve a "snapshot" of
             * collections larger than the maximum page size.
             */
            nextPageToken?: string;
        }
        interface DnsKeySpec {
            /** String mnemonic specifying the DNSSEC algorithm of this key. */
            algorithm?: string;
            /** Length of the keys in bits. */
            keyLength?: number;
            /**
             * Specifies whether this is a key signing key (KSK) or a zone signing key (ZSK). Key signing keys have the Secure Entry Point flag set and, when active, will only be used to sign
             * resource record sets of type DNSKEY. Zone signing keys do not have the Secure Entry Point flag set and will be used to sign all other types of resource record sets.
             */
            keyType?: string;
            kind?: string;
        }
        interface ManagedZone {
            /** The time that this resource was created on the server. This is in RFC3339 text format. Output only. */
            creationTime?: string;
            /** A mutable string of at most 1024 characters associated with this resource for the user's convenience. Has no effect on the managed zone's function. */
            description?: string;
            /** The DNS name of this managed zone, for instance "example.com.". */
            dnsName?: string;
            /** DNSSEC configuration. */
            dnssecConfig?: ManagedZoneDnsSecConfig;
            /** The presence for this field indicates that outbound forwarding is enabled for this zone. The value of this field contains the set of destinations to forward to. */
            forwardingConfig?: ManagedZoneForwardingConfig;
            /** Unique identifier for the resource; defined by the server (output only) */
            id?: string;
            kind?: string;
            /** User labels. */
            labels?: { [P in string]: string };
            /**
             * User assigned name for this resource. Must be unique within the project. The name must be 1-63 characters long, must begin with a letter, end with a letter or digit, and only
             * contain lowercase letters, digits or dashes.
             */
            name?: string;
            /** Delegate your managed_zone to these virtual name servers; defined by the server (output only) */
            nameServers?: string[];
            /**
             * Optionally specifies the NameServerSet for this ManagedZone. A NameServerSet is a set of DNS name servers that all host the same ManagedZones. Most users will leave this field
             * unset.
             */
            nameServerSet?: string;
            /** The presence of this field indicates that DNS Peering is enabled for this zone. The value of this field contains the network to peer with. */
            peeringConfig?: ManagedZonePeeringConfig;
            /** For privately visible zones, the set of Virtual Private Cloud resources that the zone is visible from. */
            privateVisibilityConfig?: ManagedZonePrivateVisibilityConfig;
            /**
             * The presence of this field indicates that this is a managed reverse lookup zone and Cloud DNS will resolve reverse lookup queries using automatically configured records for VPC
             * resources. This only applies to networks listed under private_visibility_config.
             */
            reverseLookupConfig?: ManagedZoneReverseLookupConfig;
            /** The zone's visibility: public zones are exposed to the Internet, while private zones are visible only to Virtual Private Cloud resources. */
            visibility?: string;
        }
        interface ManagedZoneDnsSecConfig {
            /** Specifies parameters for generating initial DnsKeys for this ManagedZone. Can only be changed while the state is OFF. */
            defaultKeySpecs?: DnsKeySpec[];
            kind?: string;
            /** Specifies the mechanism for authenticated denial-of-existence responses. Can only be changed while the state is OFF. */
            nonExistence?: string;
            /** Specifies whether DNSSEC is enabled, and what mode it is in. */
            state?: string;
        }
        interface ManagedZoneForwardingConfig {
            kind?: string;
            /** List of target name servers to forward to. Cloud DNS will select the best available name server if more than one target is given. */
            targetNameServers?: ManagedZoneForwardingConfigNameServerTarget[];
        }
        interface ManagedZoneForwardingConfigNameServerTarget {
            /**
             * Forwarding path for this NameServerTarget. If unset or set to DEFAULT, Cloud DNS will make forwarding decision based on address ranges, i.e. RFC1918 addresses go to the VPC,
             * non-RFC1918 addresses go to the Internet. When set to PRIVATE, Cloud DNS will always send queries through VPC for this target.
             */
            forwardingPath?: string;
            /** IPv4 address of a target name server. */
            ipv4Address?: string;
            kind?: string;
        }
        interface ManagedZoneOperationsListResponse {
            header?: ResponseHeader;
            kind?: string;
            /**
             * The presence of this field indicates that there exist more results following your last page of results in pagination order. To fetch them, make another list request using this value
             * as your page token. In this way you can retrieve the complete contents of even very large collections one page at a time. However, if the contents of the collection change between
             * the first and last paginated list request, the set of all elements returned will be an inconsistent view of the collection. There is no way to retrieve a consistent snapshot of a
             * collection larger than the maximum page size.
             */
            nextPageToken?: string;
            /** The operation resources. */
            operations?: Operation[];
        }
        interface ManagedZonePeeringConfig {
            kind?: string;
            /** The network with which to peer. */
            targetNetwork?: ManagedZonePeeringConfigTargetNetwork;
        }
        interface ManagedZonePeeringConfigTargetNetwork {
            /**
             * The time at which the zone was deactivated, in RFC 3339 date-time format. An empty string indicates that the peering connection is active. The producer network can deactivate a
             * zone. The zone is automatically deactivated if the producer network that the zone targeted is deleted. Output only.
             */
            deactivateTime?: string;
            kind?: string;
            /** The fully qualified URL of the VPC network to forward queries to. This should be formatted like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network} */
            networkUrl?: string;
        }
        interface ManagedZonePrivateVisibilityConfig {
            kind?: string;
            /** The list of VPC networks that can see this zone. */
            networks?: ManagedZonePrivateVisibilityConfigNetwork[];
        }
        interface ManagedZonePrivateVisibilityConfigNetwork {
            kind?: string;
            /** The fully qualified URL of the VPC network to bind to. This should be formatted like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network} */
            networkUrl?: string;
        }
        interface ManagedZoneReverseLookupConfig {
            kind?: string;
        }
        interface ManagedZonesListResponse {
            header?: ResponseHeader;
            /** Type of resource. */
            kind?: string;
            /** The managed zone resources. */
            managedZones?: ManagedZone[];
            /**
             * The presence of this field indicates that there exist more results following your last page of results in pagination order. To fetch them, make another list request using this value
             * as your page token. In this way you can retrieve the complete contents of even very large collections one page at a time. However, if the contents of the collection change between
             * the first and last paginated list request, the set of all elements returned will be an inconsistent view of the collection. There is no way to retrieve a consistent snapshot of a
             * collection larger than the maximum page size.
             */
            nextPageToken?: string;
        }
        interface Operation {
            /** Only populated if the operation targeted a DnsKey (output only). */
            dnsKeyContext?: OperationDnsKeyContext;
            /**
             * Unique identifier for the resource. This is the client_operation_id if the client specified it when the mutation was initiated, otherwise, it is generated by the server. The name
             * must be 1-63 characters long and match the regular expression [-a-z0-9]? (output only)
             */
            id?: string;
            kind?: string;
            /** The time that this operation was started by the server. This is in RFC3339 text format (output only). */
            startTime?: string;
            /**
             * Status of the operation. Can be one of the following: "PENDING" or "DONE" (output only). A status of "DONE" means that the request to update the authoritative servers has been sent,
             * but the servers might not be updated yet.
             */
            status?: string;
            /** Type of the operation. Operations include insert, update, and delete (output only). */
            type?: string;
            /** User who requested the operation, for example: user@example.com. cloud-dns-system for operations automatically done by the system. (output only) */
            user?: string;
            /** Only populated if the operation targeted a ManagedZone (output only). */
            zoneContext?: OperationManagedZoneContext;
        }
        interface OperationDnsKeyContext {
            /** The post-operation DnsKey resource. */
            newValue?: DnsKey;
            /** The pre-operation DnsKey resource. */
            oldValue?: DnsKey;
        }
        interface OperationManagedZoneContext {
            /** The post-operation ManagedZone resource. */
            newValue?: ManagedZone;
            /** The pre-operation ManagedZone resource. */
            oldValue?: ManagedZone;
        }
        interface PoliciesListResponse {
            header?: ResponseHeader;
            /** Type of resource. */
            kind?: string;
            /**
             * The presence of this field indicates that there exist more results following your last page of results in pagination order. To fetch them, make another list request using this value
             * as your page token. In this way you can retrieve the complete contents of even very large collections one page at a time. However, if the contents of the collection change between
             * the first and last paginated list request, the set of all elements returned will be an inconsistent view of the collection. There is no way to retrieve a consistent snapshot of a
             * collection larger than the maximum page size.
             */
            nextPageToken?: string;
            /** The policy resources. */
            policies?: Policy[];
        }
        interface PoliciesPatchResponse {
            header?: ResponseHeader;
            policy?: Policy;
        }
        interface PoliciesUpdateResponse {
            header?: ResponseHeader;
            policy?: Policy;
        }
        interface Policy {
            /**
             * Sets an alternative name server for the associated networks. When specified, all DNS queries are forwarded to a name server that you choose. Names such as .internal are not
             * available when an alternative name server is specified.
             */
            alternativeNameServerConfig?: PolicyAlternativeNameServerConfig;
            /** A mutable string of at most 1024 characters associated with this resource for the user's convenience. Has no effect on the policy's function. */
            description?: string;
            /**
             * Allows networks bound to this policy to receive DNS queries sent by VMs or applications over VPN connections. When enabled, a virtual IP address will be allocated from each of the
             * sub-networks that are bound to this policy.
             */
            enableInboundForwarding?: boolean;
            /** Controls whether logging is enabled for the networks bound to this policy. Defaults to no logging if not set. */
            enableLogging?: boolean;
            /** Unique identifier for the resource; defined by the server (output only). */
            id?: string;
            kind?: string;
            /** User assigned name for this policy. */
            name?: string;
            /** List of network names specifying networks to which this policy is applied. */
            networks?: PolicyNetwork[];
        }
        interface PolicyAlternativeNameServerConfig {
            kind?: string;
            /**
             * Sets an alternative name server for the associated networks. When specified, all DNS queries are forwarded to a name server that you choose. Names such as .internal are not
             * available when an alternative name server is specified.
             */
            targetNameServers?: PolicyAlternativeNameServerConfigTargetNameServer[];
        }
        interface PolicyAlternativeNameServerConfigTargetNameServer {
            /**
             * Forwarding path for this TargetNameServer. If unset or set to DEFAULT, Cloud DNS will make forwarding decision based on address ranges, i.e. RFC1918 addresses go to the VPC,
             * non-RFC1918 addresses go to the Internet. When set to PRIVATE, Cloud DNS will always send queries through VPC for this target.
             */
            forwardingPath?: string;
            /** IPv4 address to forward to. */
            ipv4Address?: string;
            kind?: string;
        }
        interface PolicyNetwork {
            kind?: string;
            /** The fully qualified URL of the VPC network to bind to. This should be formatted like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network} */
            networkUrl?: string;
        }
        interface Project {
            /** User assigned unique identifier for the resource (output only). */
            id?: string;
            kind?: string;
            /** Unique numeric identifier for the resource; defined by the server (output only). */
            number?: string;
            /** Quotas assigned to this project (output only). */
            quota?: Quota;
        }
        interface Quota {
            /** Maximum allowed number of DnsKeys per ManagedZone. */
            dnsKeysPerManagedZone?: number;
            kind?: string;
            /** Maximum allowed number of managed zones in the project. */
            managedZones?: number;
            /** Maximum allowed number of managed zones which can be attached to a network. */
            managedZonesPerNetwork?: number;
            /** Maximum allowed number of networks to which a privately scoped zone can be attached. */
            networksPerManagedZone?: number;
            /** Maximum allowed number of networks per policy. */
            networksPerPolicy?: number;
            /** Maximum allowed number of policies per project. */
            policies?: number;
            /** Maximum allowed number of ResourceRecords per ResourceRecordSet. */
            resourceRecordsPerRrset?: number;
            /** Maximum allowed number of ResourceRecordSets to add per ChangesCreateRequest. */
            rrsetAdditionsPerChange?: number;
            /** Maximum allowed number of ResourceRecordSets to delete per ChangesCreateRequest. */
            rrsetDeletionsPerChange?: number;
            /** Maximum allowed number of ResourceRecordSets per zone in the project. */
            rrsetsPerManagedZone?: number;
            /** Maximum allowed number of target name servers per managed forwarding zone. */
            targetNameServersPerManagedZone?: number;
            /** Maximum allowed number of alternative target name servers per policy. */
            targetNameServersPerPolicy?: number;
            /** Maximum allowed size for total rrdata in one ChangesCreateRequest in bytes. */
            totalRrdataSizePerChange?: number;
            /** DNSSEC algorithm and key length types that can be used for DnsKeys. */
            whitelistedKeySpecs?: DnsKeySpec[];
        }
        interface ResourceRecordSet {
            kind?: string;
            /** For example, www.example.com. */
            name?: string;
            /** As defined in RFC 1035 (section 5) and RFC 1034 (section 3.6.1) -- see examples. */
            rrdatas?: string[];
            /** As defined in RFC 4034 (section 3.2). */
            signatureRrdatas?: string[];
            /** Number of seconds that this ResourceRecordSet can be cached by resolvers. */
            ttl?: number;
            /** The identifier of a supported record type. See the list of Supported DNS record types. */
            type?: string;
        }
        interface ResourceRecordSetsListResponse {
            header?: ResponseHeader;
            /** Type of resource. */
            kind?: string;
            /**
             * The presence of this field indicates that there exist more results following your last page of results in pagination order. To fetch them, make another list request using this value
             * as your pagination token. In this way you can retrieve the complete contents of even very large collections one page at a time. However, if the contents of the collection change
             * between the first and last paginated list request, the set of all elements returned will be an inconsistent view of the collection. There is no way to retrieve a consistent snapshot
             * of a collection larger than the maximum page size.
             */
            nextPageToken?: string;
            /** The resource record set resources. */
            rrsets?: ResourceRecordSet[];
        }
        interface ResponseHeader {
            /** For mutating operation requests that completed successfully. This is the client_operation_id if the client specified it, otherwise it is generated by the server (output only). */
            operationId?: string;
        }
        interface ChangesResource {
            /** Atomically update the ResourceRecordSet collection. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** For mutating operation requests only. An optional identifier specified by the client. Must be unique for operation resources in the Operations collection. */
                clientOperationId?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Identifies the managed zone addressed by this request. Can be the managed zone name or id. */
                managedZone: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Identifies the project addressed by this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Change;
            }): Request<Change>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** For mutating operation requests only. An optional identifier specified by the client. Must be unique for operation resources in the Operations collection. */
                clientOperationId?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Identifies the managed zone addressed by this request. Can be the managed zone name or id. */
                managedZone: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Identifies the project addressed by this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Change): Request<Change>;
            /** Fetch the representation of an existing Change. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** The identifier of the requested change, from a previous ResourceRecordSetsChangeResponse. */
                changeId: string;
                /** For mutating operation requests only. An optional identifier specified by the client. Must be unique for operation resources in the Operations collection. */
                clientOperationId?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Identifies the managed zone addressed by this request. Can be the managed zone name or id. */
                managedZone: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Identifies the project addressed by this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Change>;
            /** Enumerate Changes to a ResourceRecordSet collection. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Identifies the managed zone addressed by this request. Can be the managed zone name or id. */
                managedZone: string;
                /** Optional. Maximum number of results to be returned. If unspecified, the server will decide how many results to return. */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Optional. A tag returned by a previous list request that was truncated. Use this parameter to continue a previous list request. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Identifies the project addressed by this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Sorting criterion. The only supported value is change sequence. */
                sortBy?: string;
                /** Sorting order direction: 'ascending' or 'descending'. */
                sortOrder?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ChangesListResponse>;
        }
        interface DnsKeysResource {
            /** Fetch the representation of an existing DnsKey. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** For mutating operation requests only. An optional identifier specified by the client. Must be unique for operation resources in the Operations collection. */
                clientOperationId?: string;
                /** An optional comma-separated list of digest types to compute and display for key signing keys. If omitted, the recommended digest type will be computed and displayed. */
                digestType?: string;
                /** The identifier of the requested DnsKey. */
                dnsKeyId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Identifies the managed zone addressed by this request. Can be the managed zone name or id. */
                managedZone: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Identifies the project addressed by this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<DnsKey>;
            /** Enumerate DnsKeys to a ResourceRecordSet collection. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** An optional comma-separated list of digest types to compute and display for key signing keys. If omitted, the recommended digest type will be computed and displayed. */
                digestType?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Identifies the managed zone addressed by this request. Can be the managed zone name or id. */
                managedZone: string;
                /** Optional. Maximum number of results to be returned. If unspecified, the server will decide how many results to return. */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Optional. A tag returned by a previous list request that was truncated. Use this parameter to continue a previous list request. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Identifies the project addressed by this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<DnsKeysListResponse>;
        }
        interface ManagedZoneOperationsResource {
            /** Fetch the representation of an existing Operation. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** For mutating operation requests only. An optional identifier specified by the client. Must be unique for operation resources in the Operations collection. */
                clientOperationId?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Identifies the managed zone addressed by this request. */
                managedZone: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Identifies the operation addressed by this request. */
                operation: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Identifies the project addressed by this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Operation>;
            /** Enumerate Operations for the given ManagedZone. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Identifies the managed zone addressed by this request. */
                managedZone: string;
                /** Optional. Maximum number of results to be returned. If unspecified, the server will decide how many results to return. */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Optional. A tag returned by a previous list request that was truncated. Use this parameter to continue a previous list request. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Identifies the project addressed by this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Sorting criterion. The only supported values are START_TIME and ID. */
                sortBy?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ManagedZoneOperationsListResponse>;
        }
        interface ManagedZonesResource {
            /** Create a new ManagedZone. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** For mutating operation requests only. An optional identifier specified by the client. Must be unique for operation resources in the Operations collection. */
                clientOperationId?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Identifies the project addressed by this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: ManagedZone;
            }): Request<ManagedZone>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** For mutating operation requests only. An optional identifier specified by the client. Must be unique for operation resources in the Operations collection. */
                clientOperationId?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Identifies the project addressed by this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: ManagedZone): Request<ManagedZone>;
            /** Delete a previously created ManagedZone. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** For mutating operation requests only. An optional identifier specified by the client. Must be unique for operation resources in the Operations collection. */
                clientOperationId?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Identifies the managed zone addressed by this request. Can be the managed zone name or id. */
                managedZone: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Identifies the project addressed by this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<void>;
            /** Fetch the representation of an existing ManagedZone. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** For mutating operation requests only. An optional identifier specified by the client. Must be unique for operation resources in the Operations collection. */
                clientOperationId?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Identifies the managed zone addressed by this request. Can be the managed zone name or id. */
                managedZone: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Identifies the project addressed by this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ManagedZone>;
            /** Enumerate ManagedZones that have been created but not yet deleted. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Restricts the list to return only zones with this domain name. */
                dnsName?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Optional. Maximum number of results to be returned. If unspecified, the server will decide how many results to return. */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Optional. A tag returned by a previous list request that was truncated. Use this parameter to continue a previous list request. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Identifies the project addressed by this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ManagedZonesListResponse>;
            /** Apply a partial update to an existing ManagedZone. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** For mutating operation requests only. An optional identifier specified by the client. Must be unique for operation resources in the Operations collection. */
                clientOperationId?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Identifies the managed zone addressed by this request. Can be the managed zone name or id. */
                managedZone: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Identifies the project addressed by this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: ManagedZone;
            }): Request<Operation>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** For mutating operation requests only. An optional identifier specified by the client. Must be unique for operation resources in the Operations collection. */
                clientOperationId?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Identifies the managed zone addressed by this request. Can be the managed zone name or id. */
                managedZone: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Identifies the project addressed by this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: ManagedZone): Request<Operation>;
            /** Update an existing ManagedZone. */
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** For mutating operation requests only. An optional identifier specified by the client. Must be unique for operation resources in the Operations collection. */
                clientOperationId?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Identifies the managed zone addressed by this request. Can be the managed zone name or id. */
                managedZone: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Identifies the project addressed by this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: ManagedZone;
            }): Request<Operation>;
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** For mutating operation requests only. An optional identifier specified by the client. Must be unique for operation resources in the Operations collection. */
                clientOperationId?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Identifies the managed zone addressed by this request. Can be the managed zone name or id. */
                managedZone: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Identifies the project addressed by this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: ManagedZone): Request<Operation>;
        }
        interface PoliciesResource {
            /** Create a new Policy */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** For mutating operation requests only. An optional identifier specified by the client. Must be unique for operation resources in the Operations collection. */
                clientOperationId?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Identifies the project addressed by this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Policy;
            }): Request<Policy>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** For mutating operation requests only. An optional identifier specified by the client. Must be unique for operation resources in the Operations collection. */
                clientOperationId?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Identifies the project addressed by this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Policy): Request<Policy>;
            /** Delete a previously created Policy. Will fail if the policy is still being referenced by a network. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** For mutating operation requests only. An optional identifier specified by the client. Must be unique for operation resources in the Operations collection. */
                clientOperationId?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** User given friendly name of the policy addressed by this request. */
                policy: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Identifies the project addressed by this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<void>;
            /** Fetch the representation of an existing Policy. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** For mutating operation requests only. An optional identifier specified by the client. Must be unique for operation resources in the Operations collection. */
                clientOperationId?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** User given friendly name of the policy addressed by this request. */
                policy: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Identifies the project addressed by this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Policy>;
            /** Enumerate all Policies associated with a project. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Optional. Maximum number of results to be returned. If unspecified, the server will decide how many results to return. */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Optional. A tag returned by a previous list request that was truncated. Use this parameter to continue a previous list request. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Identifies the project addressed by this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<PoliciesListResponse>;
            /** Apply a partial update to an existing Policy. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** For mutating operation requests only. An optional identifier specified by the client. Must be unique for operation resources in the Operations collection. */
                clientOperationId?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** User given friendly name of the policy addressed by this request. */
                policy: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Identifies the project addressed by this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Policy;
            }): Request<PoliciesPatchResponse>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** For mutating operation requests only. An optional identifier specified by the client. Must be unique for operation resources in the Operations collection. */
                clientOperationId?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** User given friendly name of the policy addressed by this request. */
                policy: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Identifies the project addressed by this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Policy): Request<PoliciesPatchResponse>;
            /** Update an existing Policy. */
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** For mutating operation requests only. An optional identifier specified by the client. Must be unique for operation resources in the Operations collection. */
                clientOperationId?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** User given friendly name of the policy addressed by this request. */
                policy: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Identifies the project addressed by this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Policy;
            }): Request<PoliciesUpdateResponse>;
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** For mutating operation requests only. An optional identifier specified by the client. Must be unique for operation resources in the Operations collection. */
                clientOperationId?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** User given friendly name of the policy addressed by this request. */
                policy: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Identifies the project addressed by this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Policy): Request<PoliciesUpdateResponse>;
        }
        interface ProjectsResource {
            /** Fetch the representation of an existing Project. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** For mutating operation requests only. An optional identifier specified by the client. Must be unique for operation resources in the Operations collection. */
                clientOperationId?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Identifies the project addressed by this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Project>;
        }
        interface ResourceRecordSetsResource {
            /** Enumerate ResourceRecordSets that have been created but not yet deleted. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Identifies the managed zone addressed by this request. Can be the managed zone name or id. */
                managedZone: string;
                /** Optional. Maximum number of results to be returned. If unspecified, the server will decide how many results to return. */
                maxResults?: number;
                /** Restricts the list to return only records with this fully qualified domain name. */
                name?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Optional. A tag returned by a previous list request that was truncated. Use this parameter to continue a previous list request. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Identifies the project addressed by this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Restricts the list to return only records of this type. If present, the "name" parameter must also be present. */
                type?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ResourceRecordSetsListResponse>;
        }

        const changes: ChangesResource;

        const dnsKeys: DnsKeysResource;

        const managedZoneOperations: ManagedZoneOperationsResource;

        const managedZones: ManagedZonesResource;

        const policies: PoliciesResource;

        const projects: ProjectsResource;

        const resourceRecordSets: ResourceRecordSetsResource;
    }
}
