/* Type definitions for non-npm package Cloud Datastore API v1beta3 0.0 */
// Project: https://cloud.google.com/datastore/
// Definitions by: Maxim Mazurok <https://github.com/Maxim-Mazurok>
//                 Nick Amoscato <https://github.com/namoscato>
//                 Declan Vong <https://github.com/declanvong>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped

// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
// Generated from: https://datastore.googleapis.com/$discovery/rest?version=v1beta3
// Revision: 20240713

/// <reference types="gapi.client" />

declare namespace gapi.client {
  /** Load Cloud Datastore API v1beta3 */
  function load(
    urlOrObject: 'https://datastore.googleapis.com/$discovery/rest?version=v1beta3'
  ): Promise<void>;
  /** @deprecated Please load APIs with discovery documents. */
  function load(name: 'datastore', version: 'v1beta3'): Promise<void>;
  /** @deprecated Please load APIs with discovery documents. */
  function load(
    name: 'datastore',
    version: 'v1beta3',
    callback: () => any
  ): void;

  namespace datastore {
    interface Aggregation {
      /** Optional. Optional name of the property to store the result of the aggregation. If not provided, Datastore will pick a default name following the format `property_`. For example: ``` AGGREGATE COUNT_UP_TO(1) AS count_up_to_1, COUNT_UP_TO(2), COUNT_UP_TO(3) AS count_up_to_3, COUNT(*) OVER ( ... ); ``` becomes: ``` AGGREGATE COUNT_UP_TO(1) AS count_up_to_1, COUNT_UP_TO(2) AS property_1, COUNT_UP_TO(3) AS count_up_to_3, COUNT(*) AS property_2 OVER ( ... ); ``` Requires: * Must be unique across all aggregation aliases. * Conform to entity property name limitations. */
      alias?: string;
      /** Average aggregator. */
      avg?: Avg;
      /** Count aggregator. */
      count?: Count;
      /** Sum aggregator. */
      sum?: Sum;
    }
    interface AggregationQuery {
      /** Optional. Series of aggregations to apply over the results of the `nested_query`. Requires: * A minimum of one and maximum of five aggregations per query. */
      aggregations?: Aggregation[];
      /** Nested query for aggregation */
      nestedQuery?: Query;
    }
    interface AggregationResult {
      /** The result of the aggregation functions, ex: `COUNT(*) AS total_entities`. The key is the alias assigned to the aggregation function on input and the size of this map equals the number of aggregation functions in the query. */
      aggregateProperties?: {[P in string]: Value};
    }
    interface AggregationResultBatch {
      /** The aggregation results for this batch. */
      aggregationResults?: AggregationResult[];
      /** The state of the query after the current batch. Only COUNT(*) aggregations are supported in the initial launch. Therefore, expected result type is limited to `NO_MORE_RESULTS`. */
      moreResults?: string;
      /** Read timestamp this batch was returned from. In a single transaction, subsequent query result batches for the same query can have a greater timestamp. Each batch's read timestamp is valid for all preceding batches. */
      readTime?: string;
    }
    interface AllocateIdsRequest {
      /** Required. A list of keys with incomplete key paths for which to allocate IDs. No key may be reserved/read-only. */
      keys?: Key[];
    }
    interface AllocateIdsResponse {
      /** The keys specified in the request (in the same order), each with its key path completed with a newly allocated ID. */
      keys?: Key[];
    }
    interface ArrayValue {
      /** Values in the array. The order of values in an array is preserved as long as all values have identical settings for 'exclude_from_indexes'. */
      values?: Value[];
    }
    interface Avg {
      /** The property to aggregate on. */
      property?: PropertyReference;
    }
    interface BeginTransactionRequest {
      /** Options for a new transaction. */
      transactionOptions?: TransactionOptions;
    }
    interface BeginTransactionResponse {
      /** The transaction identifier (always present). */
      transaction?: string;
    }
    interface CommitRequest {
      /** The type of commit to perform. Defaults to `TRANSACTIONAL`. */
      mode?: string;
      /** The mutations to perform. When mode is `TRANSACTIONAL`, mutations affecting a single entity are applied in order. The following sequences of mutations affecting a single entity are not permitted in a single `Commit` request: - `insert` followed by `insert` - `update` followed by `insert` - `upsert` followed by `insert` - `delete` followed by `update` When mode is `NON_TRANSACTIONAL`, no two mutations may affect a single entity. */
      mutations?: Mutation[];
      /** The identifier of the transaction associated with the commit. A transaction identifier is returned by a call to Datastore.BeginTransaction. */
      transaction?: string;
    }
    interface CommitResponse {
      /** The transaction commit timestamp. Not set for non-transactional commits. */
      commitTime?: string;
      /** The number of index entries updated during the commit, or zero if none were updated. */
      indexUpdates?: number;
      /** The result of performing the mutations. The i-th mutation result corresponds to the i-th mutation in the request. */
      mutationResults?: MutationResult[];
    }
    interface CompositeFilter {
      /** The list of filters to combine. Requires: * At least one filter is present. */
      filters?: Filter[];
      /** The operator for combining multiple filters. */
      op?: string;
    }
    interface Count {
      /** Optional. Optional constraint on the maximum number of entities to count. This provides a way to set an upper bound on the number of entities to scan, limiting latency, and cost. Unspecified is interpreted as no bound. If a zero value is provided, a count result of zero should always be expected. High-Level Example: ``` AGGREGATE COUNT_UP_TO(1000) OVER ( SELECT * FROM k ); ``` Requires: * Must be non-negative when present. */
      upTo?: string;
    }
    interface Entity {
      /** The entity's key. An entity must have a key, unless otherwise documented (for example, an entity in `Value.entity_value` may have no key). An entity's kind is its key path's last element's kind, or null if it has no key. */
      key?: Key;
      /** The entity's properties. The map's keys are property names. A property name matching regex `__.*__` is reserved. A reserved property name is forbidden in certain documented contexts. The map keys, represented as UTF-8, must not exceed 1,500 bytes and cannot be empty. */
      properties?: {[P in string]: Value};
    }
    interface EntityResult {
      /** The time at which the entity was created. This field is set for `FULL` entity results. If this entity is missing, this field will not be set. */
      createTime?: string;
      /** A cursor that points to the position after the result entity. Set only when the `EntityResult` is part of a `QueryResultBatch` message. */
      cursor?: string;
      /** The resulting entity. */
      entity?: Entity;
      /** The time at which the entity was last changed. This field is set for `FULL` entity results. If this entity is missing, this field will not be set. */
      updateTime?: string;
      /** The version of the entity, a strictly positive number that monotonically increases with changes to the entity. This field is set for `FULL` entity results. For missing entities in `LookupResponse`, this is the version of the snapshot that was used to look up the entity, and it is always set except for eventually consistent reads. */
      version?: string;
    }
    interface ExecutionStats {
      /** Debugging statistics from the execution of the query. Note that the debugging stats are subject to change as Firestore evolves. It could include: { "indexes_entries_scanned": "1000", "documents_scanned": "20", "billing_details" : { "documents_billable": "20", "index_entries_billable": "1000", "min_query_cost": "0" } } */
      debugStats?: {[P in string]: any};
      /** Total time to execute the query in the backend. */
      executionDuration?: string;
      /** Total billable read operations. */
      readOperations?: string;
      /** Total number of results returned, including documents, projections, aggregation results, keys. */
      resultsReturned?: string;
    }
    interface ExplainMetrics {
      /** Aggregated stats from the execution of the query. Only present when ExplainOptions.analyze is set to true. */
      executionStats?: ExecutionStats;
      /** Planning phase information for the query. */
      planSummary?: PlanSummary;
    }
    interface ExplainOptions {
      /** Optional. Whether to execute this query. When false (the default), the query will be planned, returning only metrics from the planning stages. When true, the query will be planned and executed, returning the full query results along with both planning and execution stage metrics. */
      analyze?: boolean;
    }
    interface Filter {
      /** A composite filter. */
      compositeFilter?: CompositeFilter;
      /** A filter on a property. */
      propertyFilter?: PropertyFilter;
    }
    interface GoogleDatastoreAdminV1beta1CommonMetadata {
      /** The time the operation ended, either successfully or otherwise. */
      endTime?: string;
      /** The client-assigned labels which were provided when the operation was created. May also include additional labels. */
      labels?: {[P in string]: string};
      /** The type of the operation. Can be used as a filter in ListOperationsRequest. */
      operationType?: string;
      /** The time that work began on the operation. */
      startTime?: string;
      /** The current state of the Operation. */
      state?: string;
    }
    interface GoogleDatastoreAdminV1beta1EntityFilter {
      /** If empty, then this represents all kinds. */
      kinds?: string[];
      /** An empty list represents all namespaces. This is the preferred usage for projects that don't use namespaces. An empty string element represents the default namespace. This should be used if the project has data in non-default namespaces, but doesn't want to include them. Each namespace in this list must be unique. */
      namespaceIds?: string[];
    }
    interface GoogleDatastoreAdminV1beta1ExportEntitiesMetadata {
      /** Metadata common to all Datastore Admin operations. */
      common?: GoogleDatastoreAdminV1beta1CommonMetadata;
      /** Description of which entities are being exported. */
      entityFilter?: GoogleDatastoreAdminV1beta1EntityFilter;
      /** Location for the export metadata and data files. This will be the same value as the google.datastore.admin.v1beta1.ExportEntitiesRequest.output_url_prefix field. The final output location is provided in google.datastore.admin.v1beta1.ExportEntitiesResponse.output_url. */
      outputUrlPrefix?: string;
      /** An estimate of the number of bytes processed. */
      progressBytes?: GoogleDatastoreAdminV1beta1Progress;
      /** An estimate of the number of entities processed. */
      progressEntities?: GoogleDatastoreAdminV1beta1Progress;
    }
    interface GoogleDatastoreAdminV1beta1ExportEntitiesResponse {
      /** Location of the output metadata file. This can be used to begin an import into Cloud Datastore (this project or another project). See google.datastore.admin.v1beta1.ImportEntitiesRequest.input_url. Only present if the operation completed successfully. */
      outputUrl?: string;
    }
    interface GoogleDatastoreAdminV1beta1ImportEntitiesMetadata {
      /** Metadata common to all Datastore Admin operations. */
      common?: GoogleDatastoreAdminV1beta1CommonMetadata;
      /** Description of which entities are being imported. */
      entityFilter?: GoogleDatastoreAdminV1beta1EntityFilter;
      /** The location of the import metadata file. This will be the same value as the google.datastore.admin.v1beta1.ExportEntitiesResponse.output_url field. */
      inputUrl?: string;
      /** An estimate of the number of bytes processed. */
      progressBytes?: GoogleDatastoreAdminV1beta1Progress;
      /** An estimate of the number of entities processed. */
      progressEntities?: GoogleDatastoreAdminV1beta1Progress;
    }
    interface GoogleDatastoreAdminV1beta1Progress {
      /** The amount of work that has been completed. Note that this may be greater than work_estimated. */
      workCompleted?: string;
      /** An estimate of how much work needs to be performed. May be zero if the work estimate is unavailable. */
      workEstimated?: string;
    }
    interface GoogleDatastoreAdminV1CommonMetadata {
      /** The time the operation ended, either successfully or otherwise. */
      endTime?: string;
      /** The client-assigned labels which were provided when the operation was created. May also include additional labels. */
      labels?: {[P in string]: string};
      /** The type of the operation. Can be used as a filter in ListOperationsRequest. */
      operationType?: string;
      /** The time that work began on the operation. */
      startTime?: string;
      /** The current state of the Operation. */
      state?: string;
    }
    interface GoogleDatastoreAdminV1DatastoreFirestoreMigrationMetadata {
      /** The current state of migration from Cloud Datastore to Cloud Firestore in Datastore mode. */
      migrationState?: string;
      /** The current step of migration from Cloud Datastore to Cloud Firestore in Datastore mode. */
      migrationStep?: string;
    }
    interface GoogleDatastoreAdminV1EntityFilter {
      /** If empty, then this represents all kinds. */
      kinds?: string[];
      /** An empty list represents all namespaces. This is the preferred usage for projects that don't use namespaces. An empty string element represents the default namespace. This should be used if the project has data in non-default namespaces, but doesn't want to include them. Each namespace in this list must be unique. */
      namespaceIds?: string[];
    }
    interface GoogleDatastoreAdminV1ExportEntitiesMetadata {
      /** Metadata common to all Datastore Admin operations. */
      common?: GoogleDatastoreAdminV1CommonMetadata;
      /** Description of which entities are being exported. */
      entityFilter?: GoogleDatastoreAdminV1EntityFilter;
      /** Location for the export metadata and data files. This will be the same value as the google.datastore.admin.v1.ExportEntitiesRequest.output_url_prefix field. The final output location is provided in google.datastore.admin.v1.ExportEntitiesResponse.output_url. */
      outputUrlPrefix?: string;
      /** An estimate of the number of bytes processed. */
      progressBytes?: GoogleDatastoreAdminV1Progress;
      /** An estimate of the number of entities processed. */
      progressEntities?: GoogleDatastoreAdminV1Progress;
    }
    interface GoogleDatastoreAdminV1ExportEntitiesResponse {
      /** Location of the output metadata file. This can be used to begin an import into Cloud Datastore (this project or another project). See google.datastore.admin.v1.ImportEntitiesRequest.input_url. Only present if the operation completed successfully. */
      outputUrl?: string;
    }
    interface GoogleDatastoreAdminV1ImportEntitiesMetadata {
      /** Metadata common to all Datastore Admin operations. */
      common?: GoogleDatastoreAdminV1CommonMetadata;
      /** Description of which entities are being imported. */
      entityFilter?: GoogleDatastoreAdminV1EntityFilter;
      /** The location of the import metadata file. This will be the same value as the google.datastore.admin.v1.ExportEntitiesResponse.output_url field. */
      inputUrl?: string;
      /** An estimate of the number of bytes processed. */
      progressBytes?: GoogleDatastoreAdminV1Progress;
      /** An estimate of the number of entities processed. */
      progressEntities?: GoogleDatastoreAdminV1Progress;
    }
    interface GoogleDatastoreAdminV1IndexOperationMetadata {
      /** Metadata common to all Datastore Admin operations. */
      common?: GoogleDatastoreAdminV1CommonMetadata;
      /** The index resource ID that this operation is acting on. */
      indexId?: string;
      /** An estimate of the number of entities processed. */
      progressEntities?: GoogleDatastoreAdminV1Progress;
    }
    interface GoogleDatastoreAdminV1MigrationProgressEvent {
      /** Details for the `PREPARE` step. */
      prepareStepDetails?: GoogleDatastoreAdminV1PrepareStepDetails;
      /** Details for the `REDIRECT_WRITES` step. */
      redirectWritesStepDetails?: GoogleDatastoreAdminV1RedirectWritesStepDetails;
      /** The step that is starting. An event with step set to `START` indicates that the migration has been reverted back to the initial pre-migration state. */
      step?: string;
    }
    interface GoogleDatastoreAdminV1MigrationStateEvent {
      /** The new state of the migration. */
      state?: string;
    }
    interface GoogleDatastoreAdminV1PrepareStepDetails {
      /** The concurrency mode this database will use when it reaches the `REDIRECT_WRITES` step. */
      concurrencyMode?: string;
    }
    interface GoogleDatastoreAdminV1Progress {
      /** The amount of work that has been completed. Note that this may be greater than work_estimated. */
      workCompleted?: string;
      /** An estimate of how much work needs to be performed. May be zero if the work estimate is unavailable. */
      workEstimated?: string;
    }
    interface GoogleDatastoreAdminV1RedirectWritesStepDetails {
      /** Ths concurrency mode for this database. */
      concurrencyMode?: string;
    }
    interface GqlQuery {
      /** When false, the query string must not contain any literals and instead must bind all values. For example, `SELECT * FROM Kind WHERE a = 'string literal'` is not allowed, while `SELECT * FROM Kind WHERE a = @value` is. */
      allowLiterals?: boolean;
      /** For each non-reserved named binding site in the query string, there must be a named parameter with that name, but not necessarily the inverse. Key must match regex `A-Za-z_$*`, must not match regex `__.*__`, and must not be `""`. */
      namedBindings?: {[P in string]: GqlQueryParameter};
      /** Numbered binding site @1 references the first numbered parameter, effectively using 1-based indexing, rather than the usual 0. For each binding site numbered i in `query_string`, there must be an i-th numbered parameter. The inverse must also be true. */
      positionalBindings?: GqlQueryParameter[];
      /** A string of the format described [here](https://cloud.google.com/datastore/docs/apis/gql/gql_reference). */
      queryString?: string;
    }
    interface GqlQueryParameter {
      /** A query cursor. Query cursors are returned in query result batches. */
      cursor?: string;
      /** A value parameter. */
      value?: Value;
    }
    interface Key {
      /** Entities are partitioned into subsets, currently identified by a project ID and namespace ID. Queries are scoped to a single partition. */
      partitionId?: PartitionId;
      /** The entity path. An entity path consists of one or more elements composed of a kind and a string or numerical identifier, which identify entities. The first element identifies a _root entity_, the second element identifies a _child_ of the root entity, the third element identifies a child of the second entity, and so forth. The entities identified by all prefixes of the path are called the element's _ancestors_. An entity path is always fully complete: *all* of the entity's ancestors are required to be in the path along with the entity identifier itself. The only exception is that in some documented cases, the identifier in the last path element (for the entity) itself may be omitted. For example, the last path element of the key of `Mutation.insert` may have no identifier. A path can never be empty, and a path can have at most 100 elements. */
      path?: PathElement[];
    }
    interface KindExpression {
      /** The name of the kind. */
      name?: string;
    }
    interface LatLng {
      /** The latitude in degrees. It must be in the range [-90.0, +90.0]. */
      latitude?: number;
      /** The longitude in degrees. It must be in the range [-180.0, +180.0]. */
      longitude?: number;
    }
    interface LookupRequest {
      /** Required. Keys of entities to look up. */
      keys?: Key[];
      /** The properties to return. Defaults to returning all properties. If this field is set and an entity has a property not referenced in the mask, it will be absent from LookupResponse.found.entity.properties. The entity's key is always returned. */
      propertyMask?: PropertyMask;
      /** The options for this lookup request. */
      readOptions?: ReadOptions;
    }
    interface LookupResponse {
      /** A list of keys that were not looked up due to resource constraints. The order of results in this field is undefined and has no relation to the order of the keys in the input. */
      deferred?: Key[];
      /** Entities found as `ResultType.FULL` entities. The order of results in this field is undefined and has no relation to the order of the keys in the input. */
      found?: EntityResult[];
      /** Entities not found as `ResultType.KEY_ONLY` entities. The order of results in this field is undefined and has no relation to the order of the keys in the input. */
      missing?: EntityResult[];
      /** The time at which these entities were read or found missing. */
      readTime?: string;
    }
    interface Mutation {
      /** The version of the entity that this mutation is being applied to. If this does not match the current version on the server, the mutation conflicts. */
      baseVersion?: string;
      /** The key of the entity to delete. The entity may or may not already exist. Must have a complete key path and must not be reserved/read-only. */
      delete?: Key;
      /** The entity to insert. The entity must not already exist. The entity key's final path element may be incomplete. */
      insert?: Entity;
      /** The properties to write in this mutation. None of the properties in the mask may have a reserved name, except for `__key__`. This field is ignored for `delete`. If the entity already exists, only properties referenced in the mask are updated, others are left untouched. Properties referenced in the mask but not in the entity are deleted. */
      propertyMask?: PropertyMask;
      /** The entity to update. The entity must already exist. Must have a complete key path. */
      update?: Entity;
      /** The update time of the entity that this mutation is being applied to. If this does not match the current update time on the server, the mutation conflicts. */
      updateTime?: string;
      /** The entity to upsert. The entity may or may not already exist. The entity key's final path element may be incomplete. */
      upsert?: Entity;
    }
    interface MutationResult {
      /** Whether a conflict was detected for this mutation. Always false when a conflict detection strategy field is not set in the mutation. */
      conflictDetected?: boolean;
      /** The create time of the entity. This field will not be set after a 'delete'. */
      createTime?: string;
      /** The automatically allocated key. Set only when the mutation allocated a key. */
      key?: Key;
      /** The update time of the entity on the server after processing the mutation. If the mutation doesn't change anything on the server, then the timestamp will be the update timestamp of the current entity. This field will not be set after a 'delete'. */
      updateTime?: string;
      /** The version of the entity on the server after processing the mutation. If the mutation doesn't change anything on the server, then the version will be the version of the current entity or, if no entity is present, a version that is strictly greater than the version of any previous entity and less than the version of any possible future entity. */
      version?: string;
    }
    interface PartitionId {
      /** If not empty, the ID of the namespace to which the entities belong. */
      namespaceId?: string;
      /** The ID of the project to which the entities belong. */
      projectId?: string;
    }
    interface PathElement {
      /** The auto-allocated ID of the entity. Never equal to zero. Values less than zero are discouraged and may not be supported in the future. */
      id?: string;
      /** The kind of the entity. A kind matching regex `__.*__` is reserved/read-only. A kind must not contain more than 1500 bytes when UTF-8 encoded. Cannot be `""`. Must be valid UTF-8 bytes. Legacy values that are not valid UTF-8 are encoded as `__bytes__` where `` is the base-64 encoding of the bytes. */
      kind?: string;
      /** The name of the entity. A name matching regex `__.*__` is reserved/read-only. A name must not be more than 1500 bytes when UTF-8 encoded. Cannot be `""`. Must be valid UTF-8 bytes. Legacy values that are not valid UTF-8 are encoded as `__bytes__` where `` is the base-64 encoding of the bytes. */
      name?: string;
    }
    interface PlanSummary {
      /** The indexes selected for the query. For example: [ {"query_scope": "Collection", "properties": "(foo ASC, __name__ ASC)"}, {"query_scope": "Collection", "properties": "(bar ASC, __name__ ASC)"} ] */
      indexesUsed?: Array<{[P in string]: any}>;
    }
    interface Projection {
      /** The property to project. */
      property?: PropertyReference;
    }
    interface PropertyFilter {
      /** The operator to filter by. */
      op?: string;
      /** The property to filter by. */
      property?: PropertyReference;
      /** The value to compare the property to. */
      value?: Value;
    }
    interface PropertyMask {
      /** The paths to the properties covered by this mask. A path is a list of property names separated by dots (`.`), for example `foo.bar` means the property `bar` inside the entity property `foo` inside the entity associated with this path. If a property name contains a dot `.` or a backslash `\`, then that name must be escaped. A path must not be empty, and may not reference a value inside an array value. */
      paths?: string[];
    }
    interface PropertyOrder {
      /** The direction to order by. Defaults to `ASCENDING`. */
      direction?: string;
      /** The property to order by. */
      property?: PropertyReference;
    }
    interface PropertyReference {
      /** A reference to a property. Requires: * MUST be a dot-delimited (`.`) string of segments, where each segment conforms to entity property name limitations. */
      name?: string;
    }
    interface Query {
      /** The properties to make distinct. The query results will contain the first result for each distinct combination of values for the given properties (if empty, all results are returned). Requires: * If `order` is specified, the set of distinct on properties must appear before the non-distinct on properties in `order`. */
      distinctOn?: PropertyReference[];
      /** An ending point for the query results. Query cursors are returned in query result batches and [can only be used to limit the same query](https://cloud.google.com/datastore/docs/concepts/queries#cursors_limits_and_offsets). */
      endCursor?: string;
      /** The filter to apply. */
      filter?: Filter;
      /** The kinds to query (if empty, returns entities of all kinds). Currently at most 1 kind may be specified. */
      kind?: KindExpression[];
      /** The maximum number of results to return. Applies after all other constraints. Optional. Unspecified is interpreted as no limit. Must be >= 0 if specified. */
      limit?: number;
      /** The number of results to skip. Applies before limit, but after all other constraints. Optional. Must be >= 0 if specified. */
      offset?: number;
      /** The order to apply to the query results (if empty, order is unspecified). */
      order?: PropertyOrder[];
      /** The projection to return. Defaults to returning all properties. */
      projection?: Projection[];
      /** A starting point for the query results. Query cursors are returned in query result batches and [can only be used to continue the same query](https://cloud.google.com/datastore/docs/concepts/queries#cursors_limits_and_offsets). */
      startCursor?: string;
    }
    interface QueryResultBatch {
      /** A cursor that points to the position after the last result in the batch. */
      endCursor?: string;
      /** The results for this batch. */
      entityResults?: EntityResult[];
      /** The result type for every entity in `entity_results`. */
      entityResultType?: string;
      /** The state of the query after the current batch. */
      moreResults?: string;
      /** Read timestamp this batch was returned from. This applies to the range of results from the query's `start_cursor` (or the beginning of the query if no cursor was given) to this batch's `end_cursor` (not the query's `end_cursor`). In a single transaction, subsequent query result batches for the same query can have a greater timestamp. Each batch's read timestamp is valid for all preceding batches. This value will not be set for eventually consistent queries in Cloud Datastore. */
      readTime?: string;
      /** A cursor that points to the position after the last skipped result. Will be set when `skipped_results` != 0. */
      skippedCursor?: string;
      /** The number of results skipped, typically because of an offset. */
      skippedResults?: number;
      /** The version number of the snapshot this batch was returned from. This applies to the range of results from the query's `start_cursor` (or the beginning of the query if no cursor was given) to this batch's `end_cursor` (not the query's `end_cursor`). In a single transaction, subsequent query result batches for the same query can have a greater snapshot version number. Each batch's snapshot version is valid for all preceding batches. The value will be zero for eventually consistent queries. */
      snapshotVersion?: string;
    }
    interface ReadOnly {
      /** Reads entities at the given time. This must be a microsecond precision timestamp within the past one hour, or if Point-in-Time Recovery is enabled, can additionally be a whole minute timestamp within the past 7 days. */
      readTime?: string;
    }
    interface ReadOptions {
      /** The non-transactional read consistency to use. */
      readConsistency?: string;
      /** Reads entities as they were at the given time. This value is only supported for Cloud Firestore in Datastore mode. This must be a microsecond precision timestamp within the past one hour, or if Point-in-Time Recovery is enabled, can additionally be a whole minute timestamp within the past 7 days. */
      readTime?: string;
      /** The identifier of the transaction in which to read. A transaction identifier is returned by a call to Datastore.BeginTransaction. */
      transaction?: string;
    }
    interface ReadWrite {
      /** The transaction identifier of the transaction being retried. */
      previousTransaction?: string;
    }
    interface ReserveIdsRequest {
      /** The ID of the database against which to make the request. '(default)' is not allowed; please use empty string '' to refer the default database. */
      databaseId?: string;
      /** Required. A list of keys with complete key paths whose numeric IDs should not be auto-allocated. */
      keys?: Key[];
    }
    interface ReserveIdsResponse {}
    interface RollbackRequest {
      /** Required. The transaction identifier, returned by a call to Datastore.BeginTransaction. */
      transaction?: string;
    }
    interface RollbackResponse {}
    interface RunAggregationQueryRequest {
      /** The query to run. */
      aggregationQuery?: AggregationQuery;
      /** Optional. Explain options for the query. If set, additional query statistics will be returned. If not, only query results will be returned. */
      explainOptions?: ExplainOptions;
      /** The GQL query to run. This query must be an aggregation query. */
      gqlQuery?: GqlQuery;
      /** Entities are partitioned into subsets, identified by a partition ID. Queries are scoped to a single partition. This partition ID is normalized with the standard default context partition ID. */
      partitionId?: PartitionId;
      /** The options for this query. */
      readOptions?: ReadOptions;
    }
    interface RunAggregationQueryResponse {
      /** A batch of aggregation results. Always present. */
      batch?: AggregationResultBatch;
      /** Query explain metrics. This is only present when the RunAggregationQueryRequest.explain_options is provided, and it is sent only once with the last response in the stream. */
      explainMetrics?: ExplainMetrics;
      /** The parsed form of the `GqlQuery` from the request, if it was set. */
      query?: AggregationQuery;
    }
    interface RunQueryRequest {
      /** Optional. Explain options for the query. If set, additional query statistics will be returned. If not, only query results will be returned. */
      explainOptions?: ExplainOptions;
      /** The GQL query to run. This query must be a non-aggregation query. */
      gqlQuery?: GqlQuery;
      /** Entities are partitioned into subsets, identified by a partition ID. Queries are scoped to a single partition. This partition ID is normalized with the standard default context partition ID. */
      partitionId?: PartitionId;
      /** The properties to return. This field must not be set for a projection query. See LookupRequest.property_mask. */
      propertyMask?: PropertyMask;
      /** The query to run. */
      query?: Query;
      /** The options for this query. */
      readOptions?: ReadOptions;
    }
    interface RunQueryResponse {
      /** A batch of query results (always present). */
      batch?: QueryResultBatch;
      /** Query explain metrics. This is only present when the RunQueryRequest.explain_options is provided, and it is sent only once with the last response in the stream. */
      explainMetrics?: ExplainMetrics;
      /** The parsed form of the `GqlQuery` from the request, if it was set. */
      query?: Query;
    }
    interface Sum {
      /** The property to aggregate on. */
      property?: PropertyReference;
    }
    interface TransactionOptions {
      /** The transaction should only allow reads. */
      readOnly?: ReadOnly;
      /** The transaction should allow both reads and writes. */
      readWrite?: ReadWrite;
    }
    interface Value {
      /** An array value. Cannot contain another array value. A `Value` instance that sets field `array_value` must not set fields `meaning` or `exclude_from_indexes`. */
      arrayValue?: ArrayValue;
      /** A blob value. May have at most 1,000,000 bytes. When `exclude_from_indexes` is false, may have at most 1500 bytes. In JSON requests, must be base64-encoded. */
      blobValue?: string;
      /** A boolean value. */
      booleanValue?: boolean;
      /** A double value. */
      doubleValue?: number;
      /** An entity value. - May have no key. - May have a key with an incomplete key path. - May have a reserved/read-only key. */
      entityValue?: Entity;
      /** If the value should be excluded from all indexes including those defined explicitly. */
      excludeFromIndexes?: boolean;
      /** A geo point value representing a point on the surface of Earth. */
      geoPointValue?: LatLng;
      /** An integer value. */
      integerValue?: string;
      /** A key value. */
      keyValue?: Key;
      /** The `meaning` field should only be populated for backwards compatibility. */
      meaning?: number;
      /** A null value. */
      nullValue?: string;
      /** A UTF-8 encoded string value. When `exclude_from_indexes` is false (it is indexed) , may have at most 1500 bytes. Otherwise, may be set to at most 1,000,000 bytes. */
      stringValue?: string;
      /** A timestamp value. When stored in the Datastore, precise only to microseconds; any additional precision is rounded down. */
      timestampValue?: string;
    }
    interface ProjectsResource {
      /** Allocates IDs for the given keys, which is useful for referencing an entity before it is inserted. */
      allocateIds(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Required. The ID of the project against which to make the request. */
        projectId: string;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: AllocateIdsRequest;
      }): Request<AllocateIdsResponse>;
      allocateIds(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Required. The ID of the project against which to make the request. */
          projectId: string;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: AllocateIdsRequest
      ): Request<AllocateIdsResponse>;
      /** Begins a new transaction. */
      beginTransaction(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Required. The ID of the project against which to make the request. */
        projectId: string;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: BeginTransactionRequest;
      }): Request<BeginTransactionResponse>;
      beginTransaction(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Required. The ID of the project against which to make the request. */
          projectId: string;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: BeginTransactionRequest
      ): Request<BeginTransactionResponse>;
      /** Commits a transaction, optionally creating, deleting or modifying some entities. */
      commit(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Required. The ID of the project against which to make the request. */
        projectId: string;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: CommitRequest;
      }): Request<CommitResponse>;
      commit(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Required. The ID of the project against which to make the request. */
          projectId: string;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: CommitRequest
      ): Request<CommitResponse>;
      /** Looks up entities by key. */
      lookup(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Required. The ID of the project against which to make the request. */
        projectId: string;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: LookupRequest;
      }): Request<LookupResponse>;
      lookup(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Required. The ID of the project against which to make the request. */
          projectId: string;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: LookupRequest
      ): Request<LookupResponse>;
      /** Prevents the supplied keys' IDs from being auto-allocated by Cloud Datastore. */
      reserveIds(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Required. The ID of the project against which to make the request. */
        projectId: string;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: ReserveIdsRequest;
      }): Request<{}>;
      reserveIds(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Required. The ID of the project against which to make the request. */
          projectId: string;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: ReserveIdsRequest
      ): Request<{}>;
      /** Rolls back a transaction. */
      rollback(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Required. The ID of the project against which to make the request. */
        projectId: string;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: RollbackRequest;
      }): Request<{}>;
      rollback(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Required. The ID of the project against which to make the request. */
          projectId: string;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: RollbackRequest
      ): Request<{}>;
      /** Runs an aggregation query. */
      runAggregationQuery(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Required. The ID of the project against which to make the request. */
        projectId: string;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: RunAggregationQueryRequest;
      }): Request<RunAggregationQueryResponse>;
      runAggregationQuery(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Required. The ID of the project against which to make the request. */
          projectId: string;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: RunAggregationQueryRequest
      ): Request<RunAggregationQueryResponse>;
      /** Queries for entities. */
      runQuery(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Required. The ID of the project against which to make the request. */
        projectId: string;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: RunQueryRequest;
      }): Request<RunQueryResponse>;
      runQuery(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Required. The ID of the project against which to make the request. */
          projectId: string;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: RunQueryRequest
      ): Request<RunQueryResponse>;
    }

    const projects: ProjectsResource;
  }
}
