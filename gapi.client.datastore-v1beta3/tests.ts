/* This is stub file for gapi.client.datastore-v1beta3 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20250512

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://datastore.googleapis.com/$discovery/rest?version=v1beta3',
  );
  /** now we can use gapi.client.datastore */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
    'https://www.googleapis.com/auth/cloud-platform',
    /** View and manage your Google Cloud Datastore data */
    'https://www.googleapis.com/auth/datastore',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Allocates IDs for the given keys, which is useful for referencing an entity before it is inserted. */
    await gapi.client.datastore.projects.allocateIds(
      {
        projectId: 'Test string',
      },
      {
        keys: [
          {
            partitionId: {
              namespaceId: 'Test string',
              projectId: 'Test string',
            },
            path: [
              {
                id: 'Test string',
                kind: 'Test string',
                name: 'Test string',
              },
            ],
          },
        ],
      },
    );
    /** Begins a new transaction. */
    await gapi.client.datastore.projects.beginTransaction(
      {
        projectId: 'Test string',
      },
      {
        transactionOptions: {
          readOnly: {
            readTime: 'Test string',
          },
          readWrite: {
            previousTransaction: 'Test string',
          },
        },
      },
    );
    /** Commits a transaction, optionally creating, deleting or modifying some entities. */
    await gapi.client.datastore.projects.commit(
      {
        projectId: 'Test string',
      },
      {
        mode: 'Test string',
        mutations: [
          {
            baseVersion: 'Test string',
            conflictResolutionStrategy: 'Test string',
            delete: {
              partitionId: {
                namespaceId: 'Test string',
                projectId: 'Test string',
              },
              path: [
                {
                  id: 'Test string',
                  kind: 'Test string',
                  name: 'Test string',
                },
              ],
            },
            insert: {
              key: {
                partitionId: {
                  namespaceId: 'Test string',
                  projectId: 'Test string',
                },
                path: [
                  {
                    id: 'Test string',
                    kind: 'Test string',
                    name: 'Test string',
                  },
                ],
              },
              properties: {
                A: {
                  arrayValue: {
                    values: undefined,
                  },
                  blobValue: 'Test string',
                  booleanValue: true,
                  doubleValue: 42,
                  entityValue: undefined,
                  excludeFromIndexes: true,
                  geoPointValue: {
                    latitude: 42,
                    longitude: 42,
                  },
                  integerValue: 'Test string',
                  keyValue: {
                    partitionId: {
                      namespaceId: 'Test string',
                      projectId: 'Test string',
                    },
                    path: [
                      {
                        id: 'Test string',
                        kind: 'Test string',
                        name: 'Test string',
                      },
                    ],
                  },
                  meaning: 42,
                  nullValue: 'Test string',
                  stringValue: 'Test string',
                  timestampValue: 'Test string',
                },
              },
            },
            propertyMask: {
              paths: ['Test string'],
            },
            propertyTransforms: [
              {
                appendMissingElements: {
                  values: [
                    {
                      arrayValue: undefined,
                      blobValue: 'Test string',
                      booleanValue: true,
                      doubleValue: 42,
                      entityValue: {
                        key: {
                          partitionId: {
                            namespaceId: 'Test string',
                            projectId: 'Test string',
                          },
                          path: [
                            {
                              id: 'Test string',
                              kind: 'Test string',
                              name: 'Test string',
                            },
                          ],
                        },
                        properties: undefined,
                      },
                      excludeFromIndexes: true,
                      geoPointValue: {
                        latitude: 42,
                        longitude: 42,
                      },
                      integerValue: 'Test string',
                      keyValue: {
                        partitionId: {
                          namespaceId: 'Test string',
                          projectId: 'Test string',
                        },
                        path: [
                          {
                            id: 'Test string',
                            kind: 'Test string',
                            name: 'Test string',
                          },
                        ],
                      },
                      meaning: 42,
                      nullValue: 'Test string',
                      stringValue: 'Test string',
                      timestampValue: 'Test string',
                    },
                  ],
                },
                increment: {
                  arrayValue: {
                    values: undefined,
                  },
                  blobValue: 'Test string',
                  booleanValue: true,
                  doubleValue: 42,
                  entityValue: {
                    key: {
                      partitionId: {
                        namespaceId: 'Test string',
                        projectId: 'Test string',
                      },
                      path: [
                        {
                          id: 'Test string',
                          kind: 'Test string',
                          name: 'Test string',
                        },
                      ],
                    },
                    properties: undefined,
                  },
                  excludeFromIndexes: true,
                  geoPointValue: {
                    latitude: 42,
                    longitude: 42,
                  },
                  integerValue: 'Test string',
                  keyValue: {
                    partitionId: {
                      namespaceId: 'Test string',
                      projectId: 'Test string',
                    },
                    path: [
                      {
                        id: 'Test string',
                        kind: 'Test string',
                        name: 'Test string',
                      },
                    ],
                  },
                  meaning: 42,
                  nullValue: 'Test string',
                  stringValue: 'Test string',
                  timestampValue: 'Test string',
                },
                maximum: {
                  arrayValue: {
                    values: undefined,
                  },
                  blobValue: 'Test string',
                  booleanValue: true,
                  doubleValue: 42,
                  entityValue: {
                    key: {
                      partitionId: {
                        namespaceId: 'Test string',
                        projectId: 'Test string',
                      },
                      path: [
                        {
                          id: 'Test string',
                          kind: 'Test string',
                          name: 'Test string',
                        },
                      ],
                    },
                    properties: undefined,
                  },
                  excludeFromIndexes: true,
                  geoPointValue: {
                    latitude: 42,
                    longitude: 42,
                  },
                  integerValue: 'Test string',
                  keyValue: {
                    partitionId: {
                      namespaceId: 'Test string',
                      projectId: 'Test string',
                    },
                    path: [
                      {
                        id: 'Test string',
                        kind: 'Test string',
                        name: 'Test string',
                      },
                    ],
                  },
                  meaning: 42,
                  nullValue: 'Test string',
                  stringValue: 'Test string',
                  timestampValue: 'Test string',
                },
                minimum: {
                  arrayValue: {
                    values: undefined,
                  },
                  blobValue: 'Test string',
                  booleanValue: true,
                  doubleValue: 42,
                  entityValue: {
                    key: {
                      partitionId: {
                        namespaceId: 'Test string',
                        projectId: 'Test string',
                      },
                      path: [
                        {
                          id: 'Test string',
                          kind: 'Test string',
                          name: 'Test string',
                        },
                      ],
                    },
                    properties: undefined,
                  },
                  excludeFromIndexes: true,
                  geoPointValue: {
                    latitude: 42,
                    longitude: 42,
                  },
                  integerValue: 'Test string',
                  keyValue: {
                    partitionId: {
                      namespaceId: 'Test string',
                      projectId: 'Test string',
                    },
                    path: [
                      {
                        id: 'Test string',
                        kind: 'Test string',
                        name: 'Test string',
                      },
                    ],
                  },
                  meaning: 42,
                  nullValue: 'Test string',
                  stringValue: 'Test string',
                  timestampValue: 'Test string',
                },
                property: 'Test string',
                removeAllFromArray: {
                  values: [
                    {
                      arrayValue: undefined,
                      blobValue: 'Test string',
                      booleanValue: true,
                      doubleValue: 42,
                      entityValue: {
                        key: {
                          partitionId: {
                            namespaceId: 'Test string',
                            projectId: 'Test string',
                          },
                          path: [
                            {
                              id: 'Test string',
                              kind: 'Test string',
                              name: 'Test string',
                            },
                          ],
                        },
                        properties: undefined,
                      },
                      excludeFromIndexes: true,
                      geoPointValue: {
                        latitude: 42,
                        longitude: 42,
                      },
                      integerValue: 'Test string',
                      keyValue: {
                        partitionId: {
                          namespaceId: 'Test string',
                          projectId: 'Test string',
                        },
                        path: [
                          {
                            id: 'Test string',
                            kind: 'Test string',
                            name: 'Test string',
                          },
                        ],
                      },
                      meaning: 42,
                      nullValue: 'Test string',
                      stringValue: 'Test string',
                      timestampValue: 'Test string',
                    },
                  ],
                },
                setToServerValue: 'Test string',
              },
            ],
            update: {
              key: {
                partitionId: {
                  namespaceId: 'Test string',
                  projectId: 'Test string',
                },
                path: [
                  {
                    id: 'Test string',
                    kind: 'Test string',
                    name: 'Test string',
                  },
                ],
              },
              properties: {
                A: {
                  arrayValue: {
                    values: undefined,
                  },
                  blobValue: 'Test string',
                  booleanValue: true,
                  doubleValue: 42,
                  entityValue: undefined,
                  excludeFromIndexes: true,
                  geoPointValue: {
                    latitude: 42,
                    longitude: 42,
                  },
                  integerValue: 'Test string',
                  keyValue: {
                    partitionId: {
                      namespaceId: 'Test string',
                      projectId: 'Test string',
                    },
                    path: [
                      {
                        id: 'Test string',
                        kind: 'Test string',
                        name: 'Test string',
                      },
                    ],
                  },
                  meaning: 42,
                  nullValue: 'Test string',
                  stringValue: 'Test string',
                  timestampValue: 'Test string',
                },
              },
            },
            updateTime: 'Test string',
            upsert: {
              key: {
                partitionId: {
                  namespaceId: 'Test string',
                  projectId: 'Test string',
                },
                path: [
                  {
                    id: 'Test string',
                    kind: 'Test string',
                    name: 'Test string',
                  },
                ],
              },
              properties: {
                A: {
                  arrayValue: {
                    values: undefined,
                  },
                  blobValue: 'Test string',
                  booleanValue: true,
                  doubleValue: 42,
                  entityValue: undefined,
                  excludeFromIndexes: true,
                  geoPointValue: {
                    latitude: 42,
                    longitude: 42,
                  },
                  integerValue: 'Test string',
                  keyValue: {
                    partitionId: {
                      namespaceId: 'Test string',
                      projectId: 'Test string',
                    },
                    path: [
                      {
                        id: 'Test string',
                        kind: 'Test string',
                        name: 'Test string',
                      },
                    ],
                  },
                  meaning: 42,
                  nullValue: 'Test string',
                  stringValue: 'Test string',
                  timestampValue: 'Test string',
                },
              },
            },
          },
        ],
        transaction: 'Test string',
      },
    );
    /** Looks up entities by key. */
    await gapi.client.datastore.projects.lookup(
      {
        projectId: 'Test string',
      },
      {
        keys: [
          {
            partitionId: {
              namespaceId: 'Test string',
              projectId: 'Test string',
            },
            path: [
              {
                id: 'Test string',
                kind: 'Test string',
                name: 'Test string',
              },
            ],
          },
        ],
        propertyMask: {
          paths: ['Test string'],
        },
        readOptions: {
          readConsistency: 'Test string',
          readTime: 'Test string',
          transaction: 'Test string',
        },
      },
    );
    /** Prevents the supplied keys' IDs from being auto-allocated by Cloud Datastore. */
    await gapi.client.datastore.projects.reserveIds(
      {
        projectId: 'Test string',
      },
      {
        databaseId: 'Test string',
        keys: [
          {
            partitionId: {
              namespaceId: 'Test string',
              projectId: 'Test string',
            },
            path: [
              {
                id: 'Test string',
                kind: 'Test string',
                name: 'Test string',
              },
            ],
          },
        ],
      },
    );
    /** Rolls back a transaction. */
    await gapi.client.datastore.projects.rollback(
      {
        projectId: 'Test string',
      },
      {
        transaction: 'Test string',
      },
    );
    /** Runs an aggregation query. */
    await gapi.client.datastore.projects.runAggregationQuery(
      {
        projectId: 'Test string',
      },
      {
        aggregationQuery: {
          aggregations: [
            {
              alias: 'Test string',
              avg: {
                property: {
                  name: 'Test string',
                },
              },
              count: {
                upTo: 'Test string',
              },
              sum: {
                property: {
                  name: 'Test string',
                },
              },
            },
          ],
          nestedQuery: {
            distinctOn: [
              {
                name: 'Test string',
              },
            ],
            endCursor: 'Test string',
            filter: {
              compositeFilter: {
                filters: undefined,
                op: 'Test string',
              },
              propertyFilter: {
                op: 'Test string',
                property: {
                  name: 'Test string',
                },
                value: {
                  arrayValue: {
                    values: undefined,
                  },
                  blobValue: 'Test string',
                  booleanValue: true,
                  doubleValue: 42,
                  entityValue: {
                    key: {
                      partitionId: {
                        namespaceId: 'Test string',
                        projectId: 'Test string',
                      },
                      path: [
                        {
                          id: 'Test string',
                          kind: 'Test string',
                          name: 'Test string',
                        },
                      ],
                    },
                    properties: undefined,
                  },
                  excludeFromIndexes: true,
                  geoPointValue: {
                    latitude: 42,
                    longitude: 42,
                  },
                  integerValue: 'Test string',
                  keyValue: {
                    partitionId: {
                      namespaceId: 'Test string',
                      projectId: 'Test string',
                    },
                    path: [
                      {
                        id: 'Test string',
                        kind: 'Test string',
                        name: 'Test string',
                      },
                    ],
                  },
                  meaning: 42,
                  nullValue: 'Test string',
                  stringValue: 'Test string',
                  timestampValue: 'Test string',
                },
              },
            },
            findNearest: {
              distanceMeasure: 'Test string',
              distanceResultProperty: 'Test string',
              distanceThreshold: 42,
              limit: 42,
              queryVector: {
                arrayValue: {
                  values: undefined,
                },
                blobValue: 'Test string',
                booleanValue: true,
                doubleValue: 42,
                entityValue: {
                  key: {
                    partitionId: {
                      namespaceId: 'Test string',
                      projectId: 'Test string',
                    },
                    path: [
                      {
                        id: 'Test string',
                        kind: 'Test string',
                        name: 'Test string',
                      },
                    ],
                  },
                  properties: undefined,
                },
                excludeFromIndexes: true,
                geoPointValue: {
                  latitude: 42,
                  longitude: 42,
                },
                integerValue: 'Test string',
                keyValue: {
                  partitionId: {
                    namespaceId: 'Test string',
                    projectId: 'Test string',
                  },
                  path: [
                    {
                      id: 'Test string',
                      kind: 'Test string',
                      name: 'Test string',
                    },
                  ],
                },
                meaning: 42,
                nullValue: 'Test string',
                stringValue: 'Test string',
                timestampValue: 'Test string',
              },
              vectorProperty: {
                name: 'Test string',
              },
            },
            kind: [
              {
                name: 'Test string',
              },
            ],
            limit: 42,
            offset: 42,
            order: [
              {
                direction: 'Test string',
                property: {
                  name: 'Test string',
                },
              },
            ],
            projection: [
              {
                property: {
                  name: 'Test string',
                },
              },
            ],
            startCursor: 'Test string',
          },
        },
        explainOptions: {
          analyze: true,
        },
        gqlQuery: {
          allowLiterals: true,
          namedBindings: {
            A: {
              cursor: 'Test string',
              value: {
                arrayValue: {
                  values: undefined,
                },
                blobValue: 'Test string',
                booleanValue: true,
                doubleValue: 42,
                entityValue: {
                  key: {
                    partitionId: {
                      namespaceId: 'Test string',
                      projectId: 'Test string',
                    },
                    path: [
                      {
                        id: 'Test string',
                        kind: 'Test string',
                        name: 'Test string',
                      },
                    ],
                  },
                  properties: undefined,
                },
                excludeFromIndexes: true,
                geoPointValue: {
                  latitude: 42,
                  longitude: 42,
                },
                integerValue: 'Test string',
                keyValue: {
                  partitionId: {
                    namespaceId: 'Test string',
                    projectId: 'Test string',
                  },
                  path: [
                    {
                      id: 'Test string',
                      kind: 'Test string',
                      name: 'Test string',
                    },
                  ],
                },
                meaning: 42,
                nullValue: 'Test string',
                stringValue: 'Test string',
                timestampValue: 'Test string',
              },
            },
          },
          positionalBindings: [
            {
              cursor: 'Test string',
              value: {
                arrayValue: {
                  values: undefined,
                },
                blobValue: 'Test string',
                booleanValue: true,
                doubleValue: 42,
                entityValue: {
                  key: {
                    partitionId: {
                      namespaceId: 'Test string',
                      projectId: 'Test string',
                    },
                    path: [
                      {
                        id: 'Test string',
                        kind: 'Test string',
                        name: 'Test string',
                      },
                    ],
                  },
                  properties: undefined,
                },
                excludeFromIndexes: true,
                geoPointValue: {
                  latitude: 42,
                  longitude: 42,
                },
                integerValue: 'Test string',
                keyValue: {
                  partitionId: {
                    namespaceId: 'Test string',
                    projectId: 'Test string',
                  },
                  path: [
                    {
                      id: 'Test string',
                      kind: 'Test string',
                      name: 'Test string',
                    },
                  ],
                },
                meaning: 42,
                nullValue: 'Test string',
                stringValue: 'Test string',
                timestampValue: 'Test string',
              },
            },
          ],
          queryString: 'Test string',
        },
        partitionId: {
          namespaceId: 'Test string',
          projectId: 'Test string',
        },
        readOptions: {
          readConsistency: 'Test string',
          readTime: 'Test string',
          transaction: 'Test string',
        },
      },
    );
    /** Queries for entities. */
    await gapi.client.datastore.projects.runQuery(
      {
        projectId: 'Test string',
      },
      {
        explainOptions: {
          analyze: true,
        },
        gqlQuery: {
          allowLiterals: true,
          namedBindings: {
            A: {
              cursor: 'Test string',
              value: {
                arrayValue: {
                  values: undefined,
                },
                blobValue: 'Test string',
                booleanValue: true,
                doubleValue: 42,
                entityValue: {
                  key: {
                    partitionId: {
                      namespaceId: 'Test string',
                      projectId: 'Test string',
                    },
                    path: [
                      {
                        id: 'Test string',
                        kind: 'Test string',
                        name: 'Test string',
                      },
                    ],
                  },
                  properties: undefined,
                },
                excludeFromIndexes: true,
                geoPointValue: {
                  latitude: 42,
                  longitude: 42,
                },
                integerValue: 'Test string',
                keyValue: {
                  partitionId: {
                    namespaceId: 'Test string',
                    projectId: 'Test string',
                  },
                  path: [
                    {
                      id: 'Test string',
                      kind: 'Test string',
                      name: 'Test string',
                    },
                  ],
                },
                meaning: 42,
                nullValue: 'Test string',
                stringValue: 'Test string',
                timestampValue: 'Test string',
              },
            },
          },
          positionalBindings: [
            {
              cursor: 'Test string',
              value: {
                arrayValue: {
                  values: undefined,
                },
                blobValue: 'Test string',
                booleanValue: true,
                doubleValue: 42,
                entityValue: {
                  key: {
                    partitionId: {
                      namespaceId: 'Test string',
                      projectId: 'Test string',
                    },
                    path: [
                      {
                        id: 'Test string',
                        kind: 'Test string',
                        name: 'Test string',
                      },
                    ],
                  },
                  properties: undefined,
                },
                excludeFromIndexes: true,
                geoPointValue: {
                  latitude: 42,
                  longitude: 42,
                },
                integerValue: 'Test string',
                keyValue: {
                  partitionId: {
                    namespaceId: 'Test string',
                    projectId: 'Test string',
                  },
                  path: [
                    {
                      id: 'Test string',
                      kind: 'Test string',
                      name: 'Test string',
                    },
                  ],
                },
                meaning: 42,
                nullValue: 'Test string',
                stringValue: 'Test string',
                timestampValue: 'Test string',
              },
            },
          ],
          queryString: 'Test string',
        },
        partitionId: {
          namespaceId: 'Test string',
          projectId: 'Test string',
        },
        propertyMask: {
          paths: ['Test string'],
        },
        query: {
          distinctOn: [
            {
              name: 'Test string',
            },
          ],
          endCursor: 'Test string',
          filter: {
            compositeFilter: {
              filters: undefined,
              op: 'Test string',
            },
            propertyFilter: {
              op: 'Test string',
              property: {
                name: 'Test string',
              },
              value: {
                arrayValue: {
                  values: undefined,
                },
                blobValue: 'Test string',
                booleanValue: true,
                doubleValue: 42,
                entityValue: {
                  key: {
                    partitionId: {
                      namespaceId: 'Test string',
                      projectId: 'Test string',
                    },
                    path: [
                      {
                        id: 'Test string',
                        kind: 'Test string',
                        name: 'Test string',
                      },
                    ],
                  },
                  properties: undefined,
                },
                excludeFromIndexes: true,
                geoPointValue: {
                  latitude: 42,
                  longitude: 42,
                },
                integerValue: 'Test string',
                keyValue: {
                  partitionId: {
                    namespaceId: 'Test string',
                    projectId: 'Test string',
                  },
                  path: [
                    {
                      id: 'Test string',
                      kind: 'Test string',
                      name: 'Test string',
                    },
                  ],
                },
                meaning: 42,
                nullValue: 'Test string',
                stringValue: 'Test string',
                timestampValue: 'Test string',
              },
            },
          },
          findNearest: {
            distanceMeasure: 'Test string',
            distanceResultProperty: 'Test string',
            distanceThreshold: 42,
            limit: 42,
            queryVector: {
              arrayValue: {
                values: undefined,
              },
              blobValue: 'Test string',
              booleanValue: true,
              doubleValue: 42,
              entityValue: {
                key: {
                  partitionId: {
                    namespaceId: 'Test string',
                    projectId: 'Test string',
                  },
                  path: [
                    {
                      id: 'Test string',
                      kind: 'Test string',
                      name: 'Test string',
                    },
                  ],
                },
                properties: undefined,
              },
              excludeFromIndexes: true,
              geoPointValue: {
                latitude: 42,
                longitude: 42,
              },
              integerValue: 'Test string',
              keyValue: {
                partitionId: {
                  namespaceId: 'Test string',
                  projectId: 'Test string',
                },
                path: [
                  {
                    id: 'Test string',
                    kind: 'Test string',
                    name: 'Test string',
                  },
                ],
              },
              meaning: 42,
              nullValue: 'Test string',
              stringValue: 'Test string',
              timestampValue: 'Test string',
            },
            vectorProperty: {
              name: 'Test string',
            },
          },
          kind: [
            {
              name: 'Test string',
            },
          ],
          limit: 42,
          offset: 42,
          order: [
            {
              direction: 'Test string',
              property: {
                name: 'Test string',
              },
            },
          ],
          projection: [
            {
              property: {
                name: 'Test string',
              },
            },
          ],
          startCursor: 'Test string',
        },
        readOptions: {
          readConsistency: 'Test string',
          readTime: 'Test string',
          transaction: 'Test string',
        },
      },
    );
  }
});
