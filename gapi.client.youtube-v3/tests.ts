/* This is stub file for gapi.client.youtube-v3 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20230925

gapi.load('client', async () => {
    /** now we can use gapi.client */

    await gapi.client.load('https://youtube.googleapis.com/$discovery/rest?version=v3');
    /** now we can use gapi.client.youtube */

    /** don't forget to authenticate your client before sending any request to resources: */
    /** declare client_id registered in Google Developers Console */
    const client_id = '<<PUT YOUR CLIENT ID HERE>>';
    const scope = [
        /** Manage your YouTube account */
        'https://www.googleapis.com/auth/youtube',
        /** See a list of your current active channel members, their current level, and when they became a member */
        'https://www.googleapis.com/auth/youtube.channel-memberships.creator',
        /** See, edit, and permanently delete your YouTube videos, ratings, comments and captions */
        'https://www.googleapis.com/auth/youtube.force-ssl',
        /** View your YouTube account */
        'https://www.googleapis.com/auth/youtube.readonly',
        /** Manage your YouTube videos */
        'https://www.googleapis.com/auth/youtube.upload',
        /** View and manage your assets and associated content on YouTube */
        'https://www.googleapis.com/auth/youtubepartner',
        /** View private information of your YouTube channel relevant during the audit process with a YouTube partner */
        'https://www.googleapis.com/auth/youtubepartner-channel-audit',
    ];
    const immediate = false;
    gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
        if (authResult && !authResult.error) {
            /** handle successful authorization */
            run();
        } else {
            /** handle authorization error */
        }
    });

    async function run() {
        /** Inserts a new resource into this collection. */
        await gapi.client.youtube.abuseReports.insert({
            part: "Test string",
        }, {
            abuseTypes: [
                {
                    id: "Test string",
                }
            ],
            description: "Test string",
            relatedEntities: [
                {
                    entity: {
                        id: "Test string",
                        typeId: "Test string",
                        url: "Test string",
                    },
                }
            ],
            subject: {
                id: "Test string",
                typeId: "Test string",
                url: "Test string",
            },
        });
        /** Retrieves a list of resources, possibly filtered. */
        await gapi.client.youtube.activities.list({
            channelId: "Test string",
            home: true,
            maxResults: 42,
            mine: true,
            pageToken: "Test string",
            part: "Test string",
            publishedAfter: "Test string",
            publishedBefore: "Test string",
            regionCode: "Test string",
        });
        /** Deletes a resource. */
        await gapi.client.youtube.captions.delete({
            id: "Test string",
            onBehalfOf: "Test string",
            onBehalfOfContentOwner: "Test string",
        });
        /** Downloads a caption track. */
        await gapi.client.youtube.captions.download({
            id: "Test string",
            onBehalfOf: "Test string",
            onBehalfOfContentOwner: "Test string",
            tfmt: "Test string",
            tlang: "Test string",
        });
        /** Inserts a new resource into this collection. */
        await gapi.client.youtube.captions.insert({
            onBehalfOf: "Test string",
            onBehalfOfContentOwner: "Test string",
            part: "Test string",
            sync: true,
        }, {
            etag: "Test string",
            id: "Test string",
            kind: "Test string",
            snippet: {
                audioTrackType: "Test string",
                failureReason: "Test string",
                isAutoSynced: true,
                isCC: true,
                isDraft: true,
                isEasyReader: true,
                isLarge: true,
                language: "Test string",
                lastUpdated: "Test string",
                name: "Test string",
                status: "Test string",
                trackKind: "Test string",
                videoId: "Test string",
            },
        });
        /** Retrieves a list of resources, possibly filtered. */
        await gapi.client.youtube.captions.list({
            id: "Test string",
            onBehalfOf: "Test string",
            onBehalfOfContentOwner: "Test string",
            part: "Test string",
            videoId: "Test string",
        });
        /** Updates an existing resource. */
        await gapi.client.youtube.captions.update({
            onBehalfOf: "Test string",
            onBehalfOfContentOwner: "Test string",
            part: "Test string",
            sync: true,
        }, {
            etag: "Test string",
            id: "Test string",
            kind: "Test string",
            snippet: {
                audioTrackType: "Test string",
                failureReason: "Test string",
                isAutoSynced: true,
                isCC: true,
                isDraft: true,
                isEasyReader: true,
                isLarge: true,
                language: "Test string",
                lastUpdated: "Test string",
                name: "Test string",
                status: "Test string",
                trackKind: "Test string",
                videoId: "Test string",
            },
        });
        /** Inserts a new resource into this collection. */
        await gapi.client.youtube.channelBanners.insert({
            channelId: "Test string",
            onBehalfOfContentOwner: "Test string",
            onBehalfOfContentOwnerChannel: "Test string",
        }, {
            etag: "Test string",
            kind: "Test string",
            url: "Test string",
        });
        /** Retrieves a list of resources, possibly filtered. */
        await gapi.client.youtube.channels.list({
            categoryId: "Test string",
            forUsername: "Test string",
            hl: "Test string",
            id: "Test string",
            managedByMe: true,
            maxResults: 42,
            mine: true,
            mySubscribers: true,
            onBehalfOfContentOwner: "Test string",
            pageToken: "Test string",
            part: "Test string",
        });
        /** Updates an existing resource. */
        await gapi.client.youtube.channels.update({
            onBehalfOfContentOwner: "Test string",
            part: "Test string",
        }, {
            auditDetails: {
                communityGuidelinesGoodStanding: true,
                contentIdClaimsGoodStanding: true,
                copyrightStrikesGoodStanding: true,
            },
            brandingSettings: {
                channel: {
                    country: "Test string",
                    defaultLanguage: "Test string",
                    defaultTab: "Test string",
                    description: "Test string",
                    featuredChannelsTitle: "Test string",
                    featuredChannelsUrls: [
                        "Test string"
                    ],
                    keywords: "Test string",
                    moderateComments: true,
                    profileColor: "Test string",
                    showBrowseView: true,
                    showRelatedChannels: true,
                    title: "Test string",
                    trackingAnalyticsAccountId: "Test string",
                    unsubscribedTrailer: "Test string",
                },
                hints: [
                    {
                        property: "Test string",
                        value: "Test string",
                    }
                ],
                image: {
                    backgroundImageUrl: {
                        default: "Test string",
                        defaultLanguage: {
                            value: "Test string",
                        },
                        localized: [
                            {
                                language: "Test string",
                                value: "Test string",
                            }
                        ],
                    },
                    bannerExternalUrl: "Test string",
                    bannerImageUrl: "Test string",
                    bannerMobileExtraHdImageUrl: "Test string",
                    bannerMobileHdImageUrl: "Test string",
                    bannerMobileImageUrl: "Test string",
                    bannerMobileLowImageUrl: "Test string",
                    bannerMobileMediumHdImageUrl: "Test string",
                    bannerTabletExtraHdImageUrl: "Test string",
                    bannerTabletHdImageUrl: "Test string",
                    bannerTabletImageUrl: "Test string",
                    bannerTabletLowImageUrl: "Test string",
                    bannerTvHighImageUrl: "Test string",
                    bannerTvImageUrl: "Test string",
                    bannerTvLowImageUrl: "Test string",
                    bannerTvMediumImageUrl: "Test string",
                    largeBrandedBannerImageImapScript: {
                        default: "Test string",
                        defaultLanguage: {
                            value: "Test string",
                        },
                        localized: [
                            {
                                language: "Test string",
                                value: "Test string",
                            }
                        ],
                    },
                    largeBrandedBannerImageUrl: {
                        default: "Test string",
                        defaultLanguage: {
                            value: "Test string",
                        },
                        localized: [
                            {
                                language: "Test string",
                                value: "Test string",
                            }
                        ],
                    },
                    smallBrandedBannerImageImapScript: {
                        default: "Test string",
                        defaultLanguage: {
                            value: "Test string",
                        },
                        localized: [
                            {
                                language: "Test string",
                                value: "Test string",
                            }
                        ],
                    },
                    smallBrandedBannerImageUrl: {
                        default: "Test string",
                        defaultLanguage: {
                            value: "Test string",
                        },
                        localized: [
                            {
                                language: "Test string",
                                value: "Test string",
                            }
                        ],
                    },
                    trackingImageUrl: "Test string",
                    watchIconImageUrl: "Test string",
                },
                watch: {
                    backgroundColor: "Test string",
                    featuredPlaylistId: "Test string",
                    textColor: "Test string",
                },
            },
            contentDetails: {
                relatedPlaylists: {
                    favorites: "Test string",
                    likes: "Test string",
                    uploads: "Test string",
                    watchHistory: "Test string",
                    watchLater: "Test string",
                },
            },
            contentOwnerDetails: {
                contentOwner: "Test string",
                timeLinked: "Test string",
            },
            conversionPings: {
                pings: [
                    {
                        context: "Test string",
                        conversionUrl: "Test string",
                    }
                ],
            },
            etag: "Test string",
            id: "Test string",
            kind: "Test string",
            localizations: {
                A: {
                    description: "Test string",
                    title: "Test string",
                }
            },
            snippet: {
                country: "Test string",
                customUrl: "Test string",
                defaultLanguage: "Test string",
                description: "Test string",
                localized: {
                    description: "Test string",
                    title: "Test string",
                },
                publishedAt: "Test string",
                thumbnails: {
                    default: {
                        height: 42,
                        url: "Test string",
                        width: 42,
                    },
                    high: {
                        height: 42,
                        url: "Test string",
                        width: 42,
                    },
                    maxres: {
                        height: 42,
                        url: "Test string",
                        width: 42,
                    },
                    medium: {
                        height: 42,
                        url: "Test string",
                        width: 42,
                    },
                    standard: {
                        height: 42,
                        url: "Test string",
                        width: 42,
                    },
                },
                title: "Test string",
            },
            statistics: {
                commentCount: "Test string",
                hiddenSubscriberCount: true,
                subscriberCount: "Test string",
                videoCount: "Test string",
                viewCount: "Test string",
            },
            status: {
                isLinked: true,
                longUploadsStatus: "Test string",
                madeForKids: true,
                privacyStatus: "Test string",
                selfDeclaredMadeForKids: true,
            },
            topicDetails: {
                topicCategories: [
                    "Test string"
                ],
                topicIds: [
                    "Test string"
                ],
            },
        });
        /** Deletes a resource. */
        await gapi.client.youtube.channelSections.delete({
            id: "Test string",
            onBehalfOfContentOwner: "Test string",
        });
        /** Inserts a new resource into this collection. */
        await gapi.client.youtube.channelSections.insert({
            onBehalfOfContentOwner: "Test string",
            onBehalfOfContentOwnerChannel: "Test string",
            part: "Test string",
        }, {
            contentDetails: {
                channels: [
                    "Test string"
                ],
                playlists: [
                    "Test string"
                ],
            },
            etag: "Test string",
            id: "Test string",
            kind: "Test string",
            localizations: {
                A: {
                    title: "Test string",
                }
            },
            snippet: {
                channelId: "Test string",
                defaultLanguage: "Test string",
                localized: {
                    title: "Test string",
                },
                position: 42,
                style: "Test string",
                title: "Test string",
                type: "Test string",
            },
            targeting: {
                countries: [
                    "Test string"
                ],
                languages: [
                    "Test string"
                ],
                regions: [
                    "Test string"
                ],
            },
        });
        /** Retrieves a list of resources, possibly filtered. */
        await gapi.client.youtube.channelSections.list({
            channelId: "Test string",
            hl: "Test string",
            id: "Test string",
            mine: true,
            onBehalfOfContentOwner: "Test string",
            part: "Test string",
        });
        /** Updates an existing resource. */
        await gapi.client.youtube.channelSections.update({
            onBehalfOfContentOwner: "Test string",
            part: "Test string",
        }, {
            contentDetails: {
                channels: [
                    "Test string"
                ],
                playlists: [
                    "Test string"
                ],
            },
            etag: "Test string",
            id: "Test string",
            kind: "Test string",
            localizations: {
                A: {
                    title: "Test string",
                }
            },
            snippet: {
                channelId: "Test string",
                defaultLanguage: "Test string",
                localized: {
                    title: "Test string",
                },
                position: 42,
                style: "Test string",
                title: "Test string",
                type: "Test string",
            },
            targeting: {
                countries: [
                    "Test string"
                ],
                languages: [
                    "Test string"
                ],
                regions: [
                    "Test string"
                ],
            },
        });
        /** Deletes a resource. */
        await gapi.client.youtube.comments.delete({
            id: "Test string",
        });
        /** Inserts a new resource into this collection. */
        await gapi.client.youtube.comments.insert({
            part: "Test string",
        }, {
            etag: "Test string",
            id: "Test string",
            kind: "Test string",
            snippet: {
                authorChannelId: {
                    value: "Test string",
                },
                authorChannelUrl: "Test string",
                authorDisplayName: "Test string",
                authorProfileImageUrl: "Test string",
                canRate: true,
                channelId: "Test string",
                likeCount: 42,
                moderationStatus: "Test string",
                parentId: "Test string",
                publishedAt: "Test string",
                textDisplay: "Test string",
                textOriginal: "Test string",
                updatedAt: "Test string",
                videoId: "Test string",
                viewerRating: "Test string",
            },
        });
        /** Retrieves a list of resources, possibly filtered. */
        await gapi.client.youtube.comments.list({
            id: "Test string",
            maxResults: 42,
            pageToken: "Test string",
            parentId: "Test string",
            part: "Test string",
            textFormat: "Test string",
        });
        /** Expresses the caller's opinion that one or more comments should be flagged as spam. */
        await gapi.client.youtube.comments.markAsSpam({
            id: "Test string",
        });
        /** Sets the moderation status of one or more comments. */
        await gapi.client.youtube.comments.setModerationStatus({
            banAuthor: true,
            id: "Test string",
            moderationStatus: "Test string",
        });
        /** Updates an existing resource. */
        await gapi.client.youtube.comments.update({
            part: "Test string",
        }, {
            etag: "Test string",
            id: "Test string",
            kind: "Test string",
            snippet: {
                authorChannelId: {
                    value: "Test string",
                },
                authorChannelUrl: "Test string",
                authorDisplayName: "Test string",
                authorProfileImageUrl: "Test string",
                canRate: true,
                channelId: "Test string",
                likeCount: 42,
                moderationStatus: "Test string",
                parentId: "Test string",
                publishedAt: "Test string",
                textDisplay: "Test string",
                textOriginal: "Test string",
                updatedAt: "Test string",
                videoId: "Test string",
                viewerRating: "Test string",
            },
        });
        /** Inserts a new resource into this collection. */
        await gapi.client.youtube.commentThreads.insert({
            part: "Test string",
        }, {
            etag: "Test string",
            id: "Test string",
            kind: "Test string",
            replies: {
                comments: [
                    {
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        snippet: {
                            authorChannelId: {
                                value: "Test string",
                            },
                            authorChannelUrl: "Test string",
                            authorDisplayName: "Test string",
                            authorProfileImageUrl: "Test string",
                            canRate: true,
                            channelId: "Test string",
                            likeCount: 42,
                            moderationStatus: "Test string",
                            parentId: "Test string",
                            publishedAt: "Test string",
                            textDisplay: "Test string",
                            textOriginal: "Test string",
                            updatedAt: "Test string",
                            videoId: "Test string",
                            viewerRating: "Test string",
                        },
                    }
                ],
            },
            snippet: {
                canReply: true,
                channelId: "Test string",
                isPublic: true,
                topLevelComment: {
                    etag: "Test string",
                    id: "Test string",
                    kind: "Test string",
                    snippet: {
                        authorChannelId: {
                            value: "Test string",
                        },
                        authorChannelUrl: "Test string",
                        authorDisplayName: "Test string",
                        authorProfileImageUrl: "Test string",
                        canRate: true,
                        channelId: "Test string",
                        likeCount: 42,
                        moderationStatus: "Test string",
                        parentId: "Test string",
                        publishedAt: "Test string",
                        textDisplay: "Test string",
                        textOriginal: "Test string",
                        updatedAt: "Test string",
                        videoId: "Test string",
                        viewerRating: "Test string",
                    },
                },
                totalReplyCount: 42,
                videoId: "Test string",
            },
        });
        /** Retrieves a list of resources, possibly filtered. */
        await gapi.client.youtube.commentThreads.list({
            allThreadsRelatedToChannelId: "Test string",
            channelId: "Test string",
            id: "Test string",
            maxResults: 42,
            moderationStatus: "Test string",
            order: "Test string",
            pageToken: "Test string",
            part: "Test string",
            searchTerms: "Test string",
            textFormat: "Test string",
            videoId: "Test string",
        });
        /** Retrieves a list of resources, possibly filtered. */
        await gapi.client.youtube.i18nLanguages.list({
            hl: "Test string",
            part: "Test string",
        });
        /** Retrieves a list of resources, possibly filtered. */
        await gapi.client.youtube.i18nRegions.list({
            hl: "Test string",
            part: "Test string",
        });
        /** Bind a broadcast to a stream. */
        await gapi.client.youtube.liveBroadcasts.bind({
            id: "Test string",
            onBehalfOfContentOwner: "Test string",
            onBehalfOfContentOwnerChannel: "Test string",
            part: "Test string",
            streamId: "Test string",
        });
        /** Delete a given broadcast. */
        await gapi.client.youtube.liveBroadcasts.delete({
            id: "Test string",
            onBehalfOfContentOwner: "Test string",
            onBehalfOfContentOwnerChannel: "Test string",
        });
        /** Inserts a new stream for the authenticated user. */
        await gapi.client.youtube.liveBroadcasts.insert({
            onBehalfOfContentOwner: "Test string",
            onBehalfOfContentOwnerChannel: "Test string",
            part: "Test string",
        }, {
            contentDetails: {
                boundStreamId: "Test string",
                boundStreamLastUpdateTimeMs: "Test string",
                closedCaptionsType: "Test string",
                enableAutoStart: true,
                enableAutoStop: true,
                enableClosedCaptions: true,
                enableContentEncryption: true,
                enableDvr: true,
                enableEmbed: true,
                enableLowLatency: true,
                latencyPreference: "Test string",
                mesh: "Test string",
                monitorStream: {
                    broadcastStreamDelayMs: 42,
                    embedHtml: "Test string",
                    enableMonitorStream: true,
                },
                projection: "Test string",
                recordFromStart: true,
                startWithSlate: true,
                stereoLayout: "Test string",
            },
            etag: "Test string",
            id: "Test string",
            kind: "Test string",
            monetizationDetails: {
                cuepointSchedule: {
                    enabled: true,
                    pauseAdsUntil: "Test string",
                    repeatIntervalSecs: 42,
                    scheduleStrategy: "Test string",
                },
            },
            snippet: {
                actualEndTime: "Test string",
                actualStartTime: "Test string",
                channelId: "Test string",
                description: "Test string",
                isDefaultBroadcast: true,
                liveChatId: "Test string",
                publishedAt: "Test string",
                scheduledEndTime: "Test string",
                scheduledStartTime: "Test string",
                thumbnails: {
                    default: {
                        height: 42,
                        url: "Test string",
                        width: 42,
                    },
                    high: {
                        height: 42,
                        url: "Test string",
                        width: 42,
                    },
                    maxres: {
                        height: 42,
                        url: "Test string",
                        width: 42,
                    },
                    medium: {
                        height: 42,
                        url: "Test string",
                        width: 42,
                    },
                    standard: {
                        height: 42,
                        url: "Test string",
                        width: 42,
                    },
                },
                title: "Test string",
            },
            statistics: {
                concurrentViewers: "Test string",
            },
            status: {
                lifeCycleStatus: "Test string",
                liveBroadcastPriority: "Test string",
                madeForKids: true,
                privacyStatus: "Test string",
                recordingStatus: "Test string",
                selfDeclaredMadeForKids: true,
            },
        });
        /** Insert cuepoints in a broadcast */
        await gapi.client.youtube.liveBroadcasts.insertCuepoint({
            id: "Test string",
            onBehalfOfContentOwner: "Test string",
            onBehalfOfContentOwnerChannel: "Test string",
            part: "Test string",
        }, {
            cueType: "Test string",
            durationSecs: 42,
            etag: "Test string",
            id: "Test string",
            insertionOffsetTimeMs: "Test string",
            walltimeMs: "Test string",
        });
        /** Retrieve the list of broadcasts associated with the given channel. */
        await gapi.client.youtube.liveBroadcasts.list({
            broadcastStatus: "Test string",
            broadcastType: "Test string",
            id: "Test string",
            maxResults: 42,
            mine: true,
            onBehalfOfContentOwner: "Test string",
            onBehalfOfContentOwnerChannel: "Test string",
            pageToken: "Test string",
            part: "Test string",
        });
        /** Transition a broadcast to a given status. */
        await gapi.client.youtube.liveBroadcasts.transition({
            broadcastStatus: "Test string",
            id: "Test string",
            onBehalfOfContentOwner: "Test string",
            onBehalfOfContentOwnerChannel: "Test string",
            part: "Test string",
        });
        /** Updates an existing broadcast for the authenticated user. */
        await gapi.client.youtube.liveBroadcasts.update({
            onBehalfOfContentOwner: "Test string",
            onBehalfOfContentOwnerChannel: "Test string",
            part: "Test string",
        }, {
            contentDetails: {
                boundStreamId: "Test string",
                boundStreamLastUpdateTimeMs: "Test string",
                closedCaptionsType: "Test string",
                enableAutoStart: true,
                enableAutoStop: true,
                enableClosedCaptions: true,
                enableContentEncryption: true,
                enableDvr: true,
                enableEmbed: true,
                enableLowLatency: true,
                latencyPreference: "Test string",
                mesh: "Test string",
                monitorStream: {
                    broadcastStreamDelayMs: 42,
                    embedHtml: "Test string",
                    enableMonitorStream: true,
                },
                projection: "Test string",
                recordFromStart: true,
                startWithSlate: true,
                stereoLayout: "Test string",
            },
            etag: "Test string",
            id: "Test string",
            kind: "Test string",
            monetizationDetails: {
                cuepointSchedule: {
                    enabled: true,
                    pauseAdsUntil: "Test string",
                    repeatIntervalSecs: 42,
                    scheduleStrategy: "Test string",
                },
            },
            snippet: {
                actualEndTime: "Test string",
                actualStartTime: "Test string",
                channelId: "Test string",
                description: "Test string",
                isDefaultBroadcast: true,
                liveChatId: "Test string",
                publishedAt: "Test string",
                scheduledEndTime: "Test string",
                scheduledStartTime: "Test string",
                thumbnails: {
                    default: {
                        height: 42,
                        url: "Test string",
                        width: 42,
                    },
                    high: {
                        height: 42,
                        url: "Test string",
                        width: 42,
                    },
                    maxres: {
                        height: 42,
                        url: "Test string",
                        width: 42,
                    },
                    medium: {
                        height: 42,
                        url: "Test string",
                        width: 42,
                    },
                    standard: {
                        height: 42,
                        url: "Test string",
                        width: 42,
                    },
                },
                title: "Test string",
            },
            statistics: {
                concurrentViewers: "Test string",
            },
            status: {
                lifeCycleStatus: "Test string",
                liveBroadcastPriority: "Test string",
                madeForKids: true,
                privacyStatus: "Test string",
                recordingStatus: "Test string",
                selfDeclaredMadeForKids: true,
            },
        });
        /** Deletes a chat ban. */
        await gapi.client.youtube.liveChatBans.delete({
            id: "Test string",
        });
        /** Inserts a new resource into this collection. */
        await gapi.client.youtube.liveChatBans.insert({
            part: "Test string",
        }, {
            etag: "Test string",
            id: "Test string",
            kind: "Test string",
            snippet: {
                banDurationSeconds: "Test string",
                bannedUserDetails: {
                    channelId: "Test string",
                    channelUrl: "Test string",
                    displayName: "Test string",
                    profileImageUrl: "Test string",
                },
                liveChatId: "Test string",
                type: "Test string",
            },
        });
        /** Deletes a chat message. */
        await gapi.client.youtube.liveChatMessages.delete({
            id: "Test string",
        });
        /** Inserts a new resource into this collection. */
        await gapi.client.youtube.liveChatMessages.insert({
            part: "Test string",
        }, {
            authorDetails: {
                channelId: "Test string",
                channelUrl: "Test string",
                displayName: "Test string",
                isChatModerator: true,
                isChatOwner: true,
                isChatSponsor: true,
                isVerified: true,
                profileImageUrl: "Test string",
            },
            etag: "Test string",
            id: "Test string",
            kind: "Test string",
            snippet: {
                authorChannelId: "Test string",
                displayMessage: "Test string",
                fanFundingEventDetails: {
                    amountDisplayString: "Test string",
                    amountMicros: "Test string",
                    currency: "Test string",
                    userComment: "Test string",
                },
                giftMembershipReceivedDetails: {
                    associatedMembershipGiftingMessageId: "Test string",
                    gifterChannelId: "Test string",
                    memberLevelName: "Test string",
                },
                hasDisplayContent: true,
                liveChatId: "Test string",
                memberMilestoneChatDetails: {
                    memberLevelName: "Test string",
                    memberMonth: 42,
                    userComment: "Test string",
                },
                membershipGiftingDetails: {
                    giftMembershipsCount: 42,
                    giftMembershipsLevelName: "Test string",
                },
                messageDeletedDetails: {
                    deletedMessageId: "Test string",
                },
                messageRetractedDetails: {
                    retractedMessageId: "Test string",
                },
                newSponsorDetails: {
                    isUpgrade: true,
                    memberLevelName: "Test string",
                },
                publishedAt: "Test string",
                superChatDetails: {
                    amountDisplayString: "Test string",
                    amountMicros: "Test string",
                    currency: "Test string",
                    tier: 42,
                    userComment: "Test string",
                },
                superStickerDetails: {
                    amountDisplayString: "Test string",
                    amountMicros: "Test string",
                    currency: "Test string",
                    superStickerMetadata: {
                        altText: "Test string",
                        altTextLanguage: "Test string",
                        stickerId: "Test string",
                    },
                    tier: 42,
                },
                textMessageDetails: {
                    messageText: "Test string",
                },
                type: "Test string",
                userBannedDetails: {
                    banDurationSeconds: "Test string",
                    bannedUserDetails: {
                        channelId: "Test string",
                        channelUrl: "Test string",
                        displayName: "Test string",
                        profileImageUrl: "Test string",
                    },
                    banType: "Test string",
                },
            },
        });
        /** Retrieves a list of resources, possibly filtered. */
        await gapi.client.youtube.liveChatMessages.list({
            hl: "Test string",
            liveChatId: "Test string",
            maxResults: 42,
            pageToken: "Test string",
            part: "Test string",
            profileImageSize: 42,
        });
        /** Deletes a chat moderator. */
        await gapi.client.youtube.liveChatModerators.delete({
            id: "Test string",
        });
        /** Inserts a new resource into this collection. */
        await gapi.client.youtube.liveChatModerators.insert({
            part: "Test string",
        }, {
            etag: "Test string",
            id: "Test string",
            kind: "Test string",
            snippet: {
                liveChatId: "Test string",
                moderatorDetails: {
                    channelId: "Test string",
                    channelUrl: "Test string",
                    displayName: "Test string",
                    profileImageUrl: "Test string",
                },
            },
        });
        /** Retrieves a list of resources, possibly filtered. */
        await gapi.client.youtube.liveChatModerators.list({
            liveChatId: "Test string",
            maxResults: 42,
            pageToken: "Test string",
            part: "Test string",
        });
        /** Deletes an existing stream for the authenticated user. */
        await gapi.client.youtube.liveStreams.delete({
            id: "Test string",
            onBehalfOfContentOwner: "Test string",
            onBehalfOfContentOwnerChannel: "Test string",
        });
        /** Inserts a new stream for the authenticated user. */
        await gapi.client.youtube.liveStreams.insert({
            onBehalfOfContentOwner: "Test string",
            onBehalfOfContentOwnerChannel: "Test string",
            part: "Test string",
        }, {
            cdn: {
                format: "Test string",
                frameRate: "Test string",
                ingestionInfo: {
                    backupIngestionAddress: "Test string",
                    ingestionAddress: "Test string",
                    rtmpsBackupIngestionAddress: "Test string",
                    rtmpsIngestionAddress: "Test string",
                    streamName: "Test string",
                },
                ingestionType: "Test string",
                resolution: "Test string",
            },
            contentDetails: {
                closedCaptionsIngestionUrl: "Test string",
                isReusable: true,
            },
            etag: "Test string",
            id: "Test string",
            kind: "Test string",
            snippet: {
                channelId: "Test string",
                description: "Test string",
                isDefaultStream: true,
                publishedAt: "Test string",
                title: "Test string",
            },
            status: {
                healthStatus: {
                    configurationIssues: [
                        {
                            description: "Test string",
                            reason: "Test string",
                            severity: "Test string",
                            type: "Test string",
                        }
                    ],
                    lastUpdateTimeSeconds: "Test string",
                    status: "Test string",
                },
                streamStatus: "Test string",
            },
        });
        /** Retrieve the list of streams associated with the given channel. -- */
        await gapi.client.youtube.liveStreams.list({
            id: "Test string",
            maxResults: 42,
            mine: true,
            onBehalfOfContentOwner: "Test string",
            onBehalfOfContentOwnerChannel: "Test string",
            pageToken: "Test string",
            part: "Test string",
        });
        /** Updates an existing stream for the authenticated user. */
        await gapi.client.youtube.liveStreams.update({
            onBehalfOfContentOwner: "Test string",
            onBehalfOfContentOwnerChannel: "Test string",
            part: "Test string",
        }, {
            cdn: {
                format: "Test string",
                frameRate: "Test string",
                ingestionInfo: {
                    backupIngestionAddress: "Test string",
                    ingestionAddress: "Test string",
                    rtmpsBackupIngestionAddress: "Test string",
                    rtmpsIngestionAddress: "Test string",
                    streamName: "Test string",
                },
                ingestionType: "Test string",
                resolution: "Test string",
            },
            contentDetails: {
                closedCaptionsIngestionUrl: "Test string",
                isReusable: true,
            },
            etag: "Test string",
            id: "Test string",
            kind: "Test string",
            snippet: {
                channelId: "Test string",
                description: "Test string",
                isDefaultStream: true,
                publishedAt: "Test string",
                title: "Test string",
            },
            status: {
                healthStatus: {
                    configurationIssues: [
                        {
                            description: "Test string",
                            reason: "Test string",
                            severity: "Test string",
                            type: "Test string",
                        }
                    ],
                    lastUpdateTimeSeconds: "Test string",
                    status: "Test string",
                },
                streamStatus: "Test string",
            },
        });
        /** Retrieves a list of members that match the request criteria for a channel. */
        await gapi.client.youtube.members.list({
            filterByMemberChannelId: "Test string",
            hasAccessToLevel: "Test string",
            maxResults: 42,
            mode: "Test string",
            pageToken: "Test string",
            part: "Test string",
        });
        /** Retrieves a list of all pricing levels offered by a creator to the fans. */
        await gapi.client.youtube.membershipsLevels.list({
            part: "Test string",
        });
        /** Deletes a resource. */
        await gapi.client.youtube.playlistItems.delete({
            id: "Test string",
            onBehalfOfContentOwner: "Test string",
        });
        /** Inserts a new resource into this collection. */
        await gapi.client.youtube.playlistItems.insert({
            onBehalfOfContentOwner: "Test string",
            part: "Test string",
        }, {
            contentDetails: {
                endAt: "Test string",
                note: "Test string",
                startAt: "Test string",
                videoId: "Test string",
                videoPublishedAt: "Test string",
            },
            etag: "Test string",
            id: "Test string",
            kind: "Test string",
            snippet: {
                channelId: "Test string",
                channelTitle: "Test string",
                description: "Test string",
                playlistId: "Test string",
                position: 42,
                publishedAt: "Test string",
                resourceId: {
                    channelId: "Test string",
                    kind: "Test string",
                    playlistId: "Test string",
                    videoId: "Test string",
                },
                thumbnails: {
                    default: {
                        height: 42,
                        url: "Test string",
                        width: 42,
                    },
                    high: {
                        height: 42,
                        url: "Test string",
                        width: 42,
                    },
                    maxres: {
                        height: 42,
                        url: "Test string",
                        width: 42,
                    },
                    medium: {
                        height: 42,
                        url: "Test string",
                        width: 42,
                    },
                    standard: {
                        height: 42,
                        url: "Test string",
                        width: 42,
                    },
                },
                title: "Test string",
                videoOwnerChannelId: "Test string",
                videoOwnerChannelTitle: "Test string",
            },
            status: {
                privacyStatus: "Test string",
            },
        });
        /** Retrieves a list of resources, possibly filtered. */
        await gapi.client.youtube.playlistItems.list({
            id: "Test string",
            maxResults: 42,
            onBehalfOfContentOwner: "Test string",
            pageToken: "Test string",
            part: "Test string",
            playlistId: "Test string",
            videoId: "Test string",
        });
        /** Updates an existing resource. */
        await gapi.client.youtube.playlistItems.update({
            onBehalfOfContentOwner: "Test string",
            part: "Test string",
        }, {
            contentDetails: {
                endAt: "Test string",
                note: "Test string",
                startAt: "Test string",
                videoId: "Test string",
                videoPublishedAt: "Test string",
            },
            etag: "Test string",
            id: "Test string",
            kind: "Test string",
            snippet: {
                channelId: "Test string",
                channelTitle: "Test string",
                description: "Test string",
                playlistId: "Test string",
                position: 42,
                publishedAt: "Test string",
                resourceId: {
                    channelId: "Test string",
                    kind: "Test string",
                    playlistId: "Test string",
                    videoId: "Test string",
                },
                thumbnails: {
                    default: {
                        height: 42,
                        url: "Test string",
                        width: 42,
                    },
                    high: {
                        height: 42,
                        url: "Test string",
                        width: 42,
                    },
                    maxres: {
                        height: 42,
                        url: "Test string",
                        width: 42,
                    },
                    medium: {
                        height: 42,
                        url: "Test string",
                        width: 42,
                    },
                    standard: {
                        height: 42,
                        url: "Test string",
                        width: 42,
                    },
                },
                title: "Test string",
                videoOwnerChannelId: "Test string",
                videoOwnerChannelTitle: "Test string",
            },
            status: {
                privacyStatus: "Test string",
            },
        });
        /** Deletes a resource. */
        await gapi.client.youtube.playlists.delete({
            id: "Test string",
            onBehalfOfContentOwner: "Test string",
        });
        /** Inserts a new resource into this collection. */
        await gapi.client.youtube.playlists.insert({
            onBehalfOfContentOwner: "Test string",
            onBehalfOfContentOwnerChannel: "Test string",
            part: "Test string",
        }, {
            contentDetails: {
                itemCount: 42,
            },
            etag: "Test string",
            id: "Test string",
            kind: "Test string",
            localizations: {
                A: {
                    description: "Test string",
                    title: "Test string",
                }
            },
            player: {
                embedHtml: "Test string",
            },
            snippet: {
                channelId: "Test string",
                channelTitle: "Test string",
                defaultLanguage: "Test string",
                description: "Test string",
                localized: {
                    description: "Test string",
                    title: "Test string",
                },
                publishedAt: "Test string",
                tags: [
                    "Test string"
                ],
                thumbnails: {
                    default: {
                        height: 42,
                        url: "Test string",
                        width: 42,
                    },
                    high: {
                        height: 42,
                        url: "Test string",
                        width: 42,
                    },
                    maxres: {
                        height: 42,
                        url: "Test string",
                        width: 42,
                    },
                    medium: {
                        height: 42,
                        url: "Test string",
                        width: 42,
                    },
                    standard: {
                        height: 42,
                        url: "Test string",
                        width: 42,
                    },
                },
                thumbnailVideoId: "Test string",
                title: "Test string",
            },
            status: {
                privacyStatus: "Test string",
            },
        });
        /** Retrieves a list of resources, possibly filtered. */
        await gapi.client.youtube.playlists.list({
            channelId: "Test string",
            hl: "Test string",
            id: "Test string",
            maxResults: 42,
            mine: true,
            onBehalfOfContentOwner: "Test string",
            onBehalfOfContentOwnerChannel: "Test string",
            pageToken: "Test string",
            part: "Test string",
        });
        /** Updates an existing resource. */
        await gapi.client.youtube.playlists.update({
            onBehalfOfContentOwner: "Test string",
            part: "Test string",
        }, {
            contentDetails: {
                itemCount: 42,
            },
            etag: "Test string",
            id: "Test string",
            kind: "Test string",
            localizations: {
                A: {
                    description: "Test string",
                    title: "Test string",
                }
            },
            player: {
                embedHtml: "Test string",
            },
            snippet: {
                channelId: "Test string",
                channelTitle: "Test string",
                defaultLanguage: "Test string",
                description: "Test string",
                localized: {
                    description: "Test string",
                    title: "Test string",
                },
                publishedAt: "Test string",
                tags: [
                    "Test string"
                ],
                thumbnails: {
                    default: {
                        height: 42,
                        url: "Test string",
                        width: 42,
                    },
                    high: {
                        height: 42,
                        url: "Test string",
                        width: 42,
                    },
                    maxres: {
                        height: 42,
                        url: "Test string",
                        width: 42,
                    },
                    medium: {
                        height: 42,
                        url: "Test string",
                        width: 42,
                    },
                    standard: {
                        height: 42,
                        url: "Test string",
                        width: 42,
                    },
                },
                thumbnailVideoId: "Test string",
                title: "Test string",
            },
            status: {
                privacyStatus: "Test string",
            },
        });
        /** Retrieves a list of search resources */
        await gapi.client.youtube.search.list({
            channelId: "Test string",
            channelType: "Test string",
            eventType: "Test string",
            forContentOwner: true,
            forDeveloper: true,
            forMine: true,
            location: "Test string",
            locationRadius: "Test string",
            maxResults: 42,
            onBehalfOfContentOwner: "Test string",
            order: "Test string",
            pageToken: "Test string",
            part: "Test string",
            publishedAfter: "Test string",
            publishedBefore: "Test string",
            q: "Test string",
            regionCode: "Test string",
            relatedToVideoId: "Test string",
            relevanceLanguage: "Test string",
            safeSearch: "Test string",
            topicId: "Test string",
            type: "Test string",
            videoCaption: "Test string",
            videoCategoryId: "Test string",
            videoDefinition: "Test string",
            videoDimension: "Test string",
            videoDuration: "Test string",
            videoEmbeddable: "Test string",
            videoLicense: "Test string",
            videoPaidProductPlacement: "Test string",
            videoSyndicated: "Test string",
            videoType: "Test string",
        });
        /** Deletes a resource. */
        await gapi.client.youtube.subscriptions.delete({
            id: "Test string",
        });
        /** Inserts a new resource into this collection. */
        await gapi.client.youtube.subscriptions.insert({
            part: "Test string",
        }, {
            contentDetails: {
                activityType: "Test string",
                newItemCount: 42,
                totalItemCount: 42,
            },
            etag: "Test string",
            id: "Test string",
            kind: "Test string",
            snippet: {
                channelId: "Test string",
                channelTitle: "Test string",
                description: "Test string",
                publishedAt: "Test string",
                resourceId: {
                    channelId: "Test string",
                    kind: "Test string",
                    playlistId: "Test string",
                    videoId: "Test string",
                },
                thumbnails: {
                    default: {
                        height: 42,
                        url: "Test string",
                        width: 42,
                    },
                    high: {
                        height: 42,
                        url: "Test string",
                        width: 42,
                    },
                    maxres: {
                        height: 42,
                        url: "Test string",
                        width: 42,
                    },
                    medium: {
                        height: 42,
                        url: "Test string",
                        width: 42,
                    },
                    standard: {
                        height: 42,
                        url: "Test string",
                        width: 42,
                    },
                },
                title: "Test string",
            },
            subscriberSnippet: {
                channelId: "Test string",
                description: "Test string",
                thumbnails: {
                    default: {
                        height: 42,
                        url: "Test string",
                        width: 42,
                    },
                    high: {
                        height: 42,
                        url: "Test string",
                        width: 42,
                    },
                    maxres: {
                        height: 42,
                        url: "Test string",
                        width: 42,
                    },
                    medium: {
                        height: 42,
                        url: "Test string",
                        width: 42,
                    },
                    standard: {
                        height: 42,
                        url: "Test string",
                        width: 42,
                    },
                },
                title: "Test string",
            },
        });
        /** Retrieves a list of resources, possibly filtered. */
        await gapi.client.youtube.subscriptions.list({
            channelId: "Test string",
            forChannelId: "Test string",
            id: "Test string",
            maxResults: 42,
            mine: true,
            myRecentSubscribers: true,
            mySubscribers: true,
            onBehalfOfContentOwner: "Test string",
            onBehalfOfContentOwnerChannel: "Test string",
            order: "Test string",
            pageToken: "Test string",
            part: "Test string",
        });
        /** Retrieves a list of resources, possibly filtered. */
        await gapi.client.youtube.superChatEvents.list({
            hl: "Test string",
            maxResults: 42,
            pageToken: "Test string",
            part: "Test string",
        });
        /** POST method. */
        await gapi.client.youtube.tests.insert({
            externalChannelId: "Test string",
            part: "Test string",
        }, {
            featuredPart: true,
            gaia: "Test string",
            id: "Test string",
            snippet: {
            },
        });
        /** Deletes a resource. */
        await gapi.client.youtube.thirdPartyLinks.delete({
            externalChannelId: "Test string",
            linkingToken: "Test string",
            part: "Test string",
            type: "Test string",
        });
        /** Inserts a new resource into this collection. */
        await gapi.client.youtube.thirdPartyLinks.insert({
            externalChannelId: "Test string",
            part: "Test string",
        }, {
            etag: "Test string",
            kind: "Test string",
            linkingToken: "Test string",
            snippet: {
                channelToStoreLink: {
                    merchantId: "Test string",
                    storeName: "Test string",
                    storeUrl: "Test string",
                },
                type: "Test string",
            },
            status: {
                linkStatus: "Test string",
            },
        });
        /** Retrieves a list of resources, possibly filtered. */
        await gapi.client.youtube.thirdPartyLinks.list({
            externalChannelId: "Test string",
            linkingToken: "Test string",
            part: "Test string",
            type: "Test string",
        });
        /** Updates an existing resource. */
        await gapi.client.youtube.thirdPartyLinks.update({
            externalChannelId: "Test string",
            part: "Test string",
        }, {
            etag: "Test string",
            kind: "Test string",
            linkingToken: "Test string",
            snippet: {
                channelToStoreLink: {
                    merchantId: "Test string",
                    storeName: "Test string",
                    storeUrl: "Test string",
                },
                type: "Test string",
            },
            status: {
                linkStatus: "Test string",
            },
        });
        /**
         * As this is not an insert in a strict sense (it supports uploading/setting of a thumbnail for multiple videos, which doesn't result in creation of a single resource), I use a custom verb
         * here.
         */
        await gapi.client.youtube.thumbnails.set({
            onBehalfOfContentOwner: "Test string",
            videoId: "Test string",
        });
        /** Retrieves a list of resources, possibly filtered. */
        await gapi.client.youtube.videoAbuseReportReasons.list({
            hl: "Test string",
            part: "Test string",
        });
        /** Retrieves a list of resources, possibly filtered. */
        await gapi.client.youtube.videoCategories.list({
            hl: "Test string",
            id: "Test string",
            part: "Test string",
            regionCode: "Test string",
        });
        /** Deletes a resource. */
        await gapi.client.youtube.videos.delete({
            id: "Test string",
            onBehalfOfContentOwner: "Test string",
        });
        /** Retrieves the ratings that the authorized user gave to a list of specified videos. */
        await gapi.client.youtube.videos.getRating({
            id: "Test string",
            onBehalfOfContentOwner: "Test string",
        });
        /** Inserts a new resource into this collection. */
        await gapi.client.youtube.videos.insert({
            autoLevels: true,
            notifySubscribers: true,
            onBehalfOfContentOwner: "Test string",
            onBehalfOfContentOwnerChannel: "Test string",
            part: "Test string",
            stabilize: true,
        }, {
            ageGating: {
                alcoholContent: true,
                restricted: true,
                videoGameRating: "Test string",
            },
            contentDetails: {
                caption: "Test string",
                contentRating: {
                    acbRating: "Test string",
                    agcomRating: "Test string",
                    anatelRating: "Test string",
                    bbfcRating: "Test string",
                    bfvcRating: "Test string",
                    bmukkRating: "Test string",
                    catvfrRating: "Test string",
                    catvRating: "Test string",
                    cbfcRating: "Test string",
                    cccRating: "Test string",
                    cceRating: "Test string",
                    chfilmRating: "Test string",
                    chvrsRating: "Test string",
                    cicfRating: "Test string",
                    cnaRating: "Test string",
                    cncRating: "Test string",
                    csaRating: "Test string",
                    cscfRating: "Test string",
                    czfilmRating: "Test string",
                    djctqRating: "Test string",
                    djctqRatingReasons: [
                        "Test string"
                    ],
                    ecbmctRating: "Test string",
                    eefilmRating: "Test string",
                    egfilmRating: "Test string",
                    eirinRating: "Test string",
                    fcbmRating: "Test string",
                    fcoRating: "Test string",
                    fmocRating: "Test string",
                    fpbRating: "Test string",
                    fpbRatingReasons: [
                        "Test string"
                    ],
                    fskRating: "Test string",
                    grfilmRating: "Test string",
                    icaaRating: "Test string",
                    ifcoRating: "Test string",
                    ilfilmRating: "Test string",
                    incaaRating: "Test string",
                    kfcbRating: "Test string",
                    kijkwijzerRating: "Test string",
                    kmrbRating: "Test string",
                    lsfRating: "Test string",
                    mccaaRating: "Test string",
                    mccypRating: "Test string",
                    mcstRating: "Test string",
                    mdaRating: "Test string",
                    medietilsynetRating: "Test string",
                    mekuRating: "Test string",
                    menaMpaaRating: "Test string",
                    mibacRating: "Test string",
                    mocRating: "Test string",
                    moctwRating: "Test string",
                    mpaaRating: "Test string",
                    mpaatRating: "Test string",
                    mtrcbRating: "Test string",
                    nbcplRating: "Test string",
                    nbcRating: "Test string",
                    nfrcRating: "Test string",
                    nfvcbRating: "Test string",
                    nkclvRating: "Test string",
                    nmcRating: "Test string",
                    oflcRating: "Test string",
                    pefilmRating: "Test string",
                    rcnofRating: "Test string",
                    resorteviolenciaRating: "Test string",
                    rtcRating: "Test string",
                    rteRating: "Test string",
                    russiaRating: "Test string",
                    skfilmRating: "Test string",
                    smaisRating: "Test string",
                    smsaRating: "Test string",
                    tvpgRating: "Test string",
                    ytRating: "Test string",
                },
                countryRestriction: {
                    allowed: true,
                    exception: [
                        "Test string"
                    ],
                },
                definition: "Test string",
                dimension: "Test string",
                duration: "Test string",
                hasCustomThumbnail: true,
                licensedContent: true,
                projection: "Test string",
                regionRestriction: {
                    allowed: [
                        "Test string"
                    ],
                    blocked: [
                        "Test string"
                    ],
                },
            },
            etag: "Test string",
            fileDetails: {
                audioStreams: [
                    {
                        bitrateBps: "Test string",
                        channelCount: 42,
                        codec: "Test string",
                        vendor: "Test string",
                    }
                ],
                bitrateBps: "Test string",
                container: "Test string",
                creationTime: "Test string",
                durationMs: "Test string",
                fileName: "Test string",
                fileSize: "Test string",
                fileType: "Test string",
                videoStreams: [
                    {
                        aspectRatio: 42,
                        bitrateBps: "Test string",
                        codec: "Test string",
                        frameRateFps: 42,
                        heightPixels: 42,
                        rotation: "Test string",
                        vendor: "Test string",
                        widthPixels: 42,
                    }
                ],
            },
            id: "Test string",
            kind: "Test string",
            liveStreamingDetails: {
                activeLiveChatId: "Test string",
                actualEndTime: "Test string",
                actualStartTime: "Test string",
                concurrentViewers: "Test string",
                scheduledEndTime: "Test string",
                scheduledStartTime: "Test string",
            },
            localizations: {
                A: {
                    description: "Test string",
                    title: "Test string",
                }
            },
            monetizationDetails: {
                access: {
                    allowed: true,
                    exception: [
                        "Test string"
                    ],
                },
            },
            player: {
                embedHeight: "Test string",
                embedHtml: "Test string",
                embedWidth: "Test string",
            },
            processingDetails: {
                editorSuggestionsAvailability: "Test string",
                fileDetailsAvailability: "Test string",
                processingFailureReason: "Test string",
                processingIssuesAvailability: "Test string",
                processingProgress: {
                    partsProcessed: "Test string",
                    partsTotal: "Test string",
                    timeLeftMs: "Test string",
                },
                processingStatus: "Test string",
                tagSuggestionsAvailability: "Test string",
                thumbnailsAvailability: "Test string",
            },
            projectDetails: {
            },
            recordingDetails: {
                location: {
                    altitude: 42,
                    latitude: 42,
                    longitude: 42,
                },
                locationDescription: "Test string",
                recordingDate: "Test string",
            },
            snippet: {
                categoryId: "Test string",
                channelId: "Test string",
                channelTitle: "Test string",
                defaultAudioLanguage: "Test string",
                defaultLanguage: "Test string",
                description: "Test string",
                liveBroadcastContent: "Test string",
                localized: {
                    description: "Test string",
                    title: "Test string",
                },
                publishedAt: "Test string",
                tags: [
                    "Test string"
                ],
                thumbnails: {
                    default: {
                        height: 42,
                        url: "Test string",
                        width: 42,
                    },
                    high: {
                        height: 42,
                        url: "Test string",
                        width: 42,
                    },
                    maxres: {
                        height: 42,
                        url: "Test string",
                        width: 42,
                    },
                    medium: {
                        height: 42,
                        url: "Test string",
                        width: 42,
                    },
                    standard: {
                        height: 42,
                        url: "Test string",
                        width: 42,
                    },
                },
                title: "Test string",
            },
            statistics: {
                commentCount: "Test string",
                dislikeCount: "Test string",
                favoriteCount: "Test string",
                likeCount: "Test string",
                viewCount: "Test string",
            },
            status: {
                embeddable: true,
                failureReason: "Test string",
                license: "Test string",
                madeForKids: true,
                privacyStatus: "Test string",
                publicStatsViewable: true,
                publishAt: "Test string",
                rejectionReason: "Test string",
                selfDeclaredMadeForKids: true,
                uploadStatus: "Test string",
            },
            suggestions: {
                editorSuggestions: [
                    "Test string"
                ],
                processingErrors: [
                    "Test string"
                ],
                processingHints: [
                    "Test string"
                ],
                processingWarnings: [
                    "Test string"
                ],
                tagSuggestions: [
                    {
                        categoryRestricts: [
                            "Test string"
                        ],
                        tag: "Test string",
                    }
                ],
            },
            topicDetails: {
                relevantTopicIds: [
                    "Test string"
                ],
                topicCategories: [
                    "Test string"
                ],
                topicIds: [
                    "Test string"
                ],
            },
        });
        /** Retrieves a list of resources, possibly filtered. */
        await gapi.client.youtube.videos.list({
            chart: "Test string",
            hl: "Test string",
            id: "Test string",
            locale: "Test string",
            maxHeight: 42,
            maxResults: 42,
            maxWidth: 42,
            myRating: "Test string",
            onBehalfOfContentOwner: "Test string",
            pageToken: "Test string",
            part: "Test string",
            regionCode: "Test string",
            videoCategoryId: "Test string",
        });
        /** Adds a like or dislike rating to a video or removes a rating from a video. */
        await gapi.client.youtube.videos.rate({
            id: "Test string",
            rating: "Test string",
        });
        /** Report abuse for a video. */
        await gapi.client.youtube.videos.reportAbuse({
            onBehalfOfContentOwner: "Test string",
        }, {
            comments: "Test string",
            language: "Test string",
            reasonId: "Test string",
            secondaryReasonId: "Test string",
            videoId: "Test string",
        });
        /** Updates an existing resource. */
        await gapi.client.youtube.videos.update({
            onBehalfOfContentOwner: "Test string",
            part: "Test string",
        }, {
            ageGating: {
                alcoholContent: true,
                restricted: true,
                videoGameRating: "Test string",
            },
            contentDetails: {
                caption: "Test string",
                contentRating: {
                    acbRating: "Test string",
                    agcomRating: "Test string",
                    anatelRating: "Test string",
                    bbfcRating: "Test string",
                    bfvcRating: "Test string",
                    bmukkRating: "Test string",
                    catvfrRating: "Test string",
                    catvRating: "Test string",
                    cbfcRating: "Test string",
                    cccRating: "Test string",
                    cceRating: "Test string",
                    chfilmRating: "Test string",
                    chvrsRating: "Test string",
                    cicfRating: "Test string",
                    cnaRating: "Test string",
                    cncRating: "Test string",
                    csaRating: "Test string",
                    cscfRating: "Test string",
                    czfilmRating: "Test string",
                    djctqRating: "Test string",
                    djctqRatingReasons: [
                        "Test string"
                    ],
                    ecbmctRating: "Test string",
                    eefilmRating: "Test string",
                    egfilmRating: "Test string",
                    eirinRating: "Test string",
                    fcbmRating: "Test string",
                    fcoRating: "Test string",
                    fmocRating: "Test string",
                    fpbRating: "Test string",
                    fpbRatingReasons: [
                        "Test string"
                    ],
                    fskRating: "Test string",
                    grfilmRating: "Test string",
                    icaaRating: "Test string",
                    ifcoRating: "Test string",
                    ilfilmRating: "Test string",
                    incaaRating: "Test string",
                    kfcbRating: "Test string",
                    kijkwijzerRating: "Test string",
                    kmrbRating: "Test string",
                    lsfRating: "Test string",
                    mccaaRating: "Test string",
                    mccypRating: "Test string",
                    mcstRating: "Test string",
                    mdaRating: "Test string",
                    medietilsynetRating: "Test string",
                    mekuRating: "Test string",
                    menaMpaaRating: "Test string",
                    mibacRating: "Test string",
                    mocRating: "Test string",
                    moctwRating: "Test string",
                    mpaaRating: "Test string",
                    mpaatRating: "Test string",
                    mtrcbRating: "Test string",
                    nbcplRating: "Test string",
                    nbcRating: "Test string",
                    nfrcRating: "Test string",
                    nfvcbRating: "Test string",
                    nkclvRating: "Test string",
                    nmcRating: "Test string",
                    oflcRating: "Test string",
                    pefilmRating: "Test string",
                    rcnofRating: "Test string",
                    resorteviolenciaRating: "Test string",
                    rtcRating: "Test string",
                    rteRating: "Test string",
                    russiaRating: "Test string",
                    skfilmRating: "Test string",
                    smaisRating: "Test string",
                    smsaRating: "Test string",
                    tvpgRating: "Test string",
                    ytRating: "Test string",
                },
                countryRestriction: {
                    allowed: true,
                    exception: [
                        "Test string"
                    ],
                },
                definition: "Test string",
                dimension: "Test string",
                duration: "Test string",
                hasCustomThumbnail: true,
                licensedContent: true,
                projection: "Test string",
                regionRestriction: {
                    allowed: [
                        "Test string"
                    ],
                    blocked: [
                        "Test string"
                    ],
                },
            },
            etag: "Test string",
            fileDetails: {
                audioStreams: [
                    {
                        bitrateBps: "Test string",
                        channelCount: 42,
                        codec: "Test string",
                        vendor: "Test string",
                    }
                ],
                bitrateBps: "Test string",
                container: "Test string",
                creationTime: "Test string",
                durationMs: "Test string",
                fileName: "Test string",
                fileSize: "Test string",
                fileType: "Test string",
                videoStreams: [
                    {
                        aspectRatio: 42,
                        bitrateBps: "Test string",
                        codec: "Test string",
                        frameRateFps: 42,
                        heightPixels: 42,
                        rotation: "Test string",
                        vendor: "Test string",
                        widthPixels: 42,
                    }
                ],
            },
            id: "Test string",
            kind: "Test string",
            liveStreamingDetails: {
                activeLiveChatId: "Test string",
                actualEndTime: "Test string",
                actualStartTime: "Test string",
                concurrentViewers: "Test string",
                scheduledEndTime: "Test string",
                scheduledStartTime: "Test string",
            },
            localizations: {
                A: {
                    description: "Test string",
                    title: "Test string",
                }
            },
            monetizationDetails: {
                access: {
                    allowed: true,
                    exception: [
                        "Test string"
                    ],
                },
            },
            player: {
                embedHeight: "Test string",
                embedHtml: "Test string",
                embedWidth: "Test string",
            },
            processingDetails: {
                editorSuggestionsAvailability: "Test string",
                fileDetailsAvailability: "Test string",
                processingFailureReason: "Test string",
                processingIssuesAvailability: "Test string",
                processingProgress: {
                    partsProcessed: "Test string",
                    partsTotal: "Test string",
                    timeLeftMs: "Test string",
                },
                processingStatus: "Test string",
                tagSuggestionsAvailability: "Test string",
                thumbnailsAvailability: "Test string",
            },
            projectDetails: {
            },
            recordingDetails: {
                location: {
                    altitude: 42,
                    latitude: 42,
                    longitude: 42,
                },
                locationDescription: "Test string",
                recordingDate: "Test string",
            },
            snippet: {
                categoryId: "Test string",
                channelId: "Test string",
                channelTitle: "Test string",
                defaultAudioLanguage: "Test string",
                defaultLanguage: "Test string",
                description: "Test string",
                liveBroadcastContent: "Test string",
                localized: {
                    description: "Test string",
                    title: "Test string",
                },
                publishedAt: "Test string",
                tags: [
                    "Test string"
                ],
                thumbnails: {
                    default: {
                        height: 42,
                        url: "Test string",
                        width: 42,
                    },
                    high: {
                        height: 42,
                        url: "Test string",
                        width: 42,
                    },
                    maxres: {
                        height: 42,
                        url: "Test string",
                        width: 42,
                    },
                    medium: {
                        height: 42,
                        url: "Test string",
                        width: 42,
                    },
                    standard: {
                        height: 42,
                        url: "Test string",
                        width: 42,
                    },
                },
                title: "Test string",
            },
            statistics: {
                commentCount: "Test string",
                dislikeCount: "Test string",
                favoriteCount: "Test string",
                likeCount: "Test string",
                viewCount: "Test string",
            },
            status: {
                embeddable: true,
                failureReason: "Test string",
                license: "Test string",
                madeForKids: true,
                privacyStatus: "Test string",
                publicStatsViewable: true,
                publishAt: "Test string",
                rejectionReason: "Test string",
                selfDeclaredMadeForKids: true,
                uploadStatus: "Test string",
            },
            suggestions: {
                editorSuggestions: [
                    "Test string"
                ],
                processingErrors: [
                    "Test string"
                ],
                processingHints: [
                    "Test string"
                ],
                processingWarnings: [
                    "Test string"
                ],
                tagSuggestions: [
                    {
                        categoryRestricts: [
                            "Test string"
                        ],
                        tag: "Test string",
                    }
                ],
            },
            topicDetails: {
                relevantTopicIds: [
                    "Test string"
                ],
                topicCategories: [
                    "Test string"
                ],
                topicIds: [
                    "Test string"
                ],
            },
        });
        /** Allows upload of watermark image and setting it for a channel. */
        await gapi.client.youtube.watermarks.set({
            channelId: "Test string",
            onBehalfOfContentOwner: "Test string",
        }, {
            imageBytes: "Test string",
            imageUrl: "Test string",
            position: {
                cornerPosition: "Test string",
                type: "Test string",
            },
            targetChannelId: "Test string",
            timing: {
                durationMs: "Test string",
                offsetMs: "Test string",
                type: "Test string",
            },
        });
        /** Allows removal of channel watermark. */
        await gapi.client.youtube.watermarks.unset({
            channelId: "Test string",
            onBehalfOfContentOwner: "Test string",
        });
        /** Updates an existing resource. */
        await gapi.client.youtube.youtube.v3.updateCommentThreads({
            part: "Test string",
        }, {
            etag: "Test string",
            id: "Test string",
            kind: "Test string",
            replies: {
                comments: [
                    {
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        snippet: {
                            authorChannelId: {
                                value: "Test string",
                            },
                            authorChannelUrl: "Test string",
                            authorDisplayName: "Test string",
                            authorProfileImageUrl: "Test string",
                            canRate: true,
                            channelId: "Test string",
                            likeCount: 42,
                            moderationStatus: "Test string",
                            parentId: "Test string",
                            publishedAt: "Test string",
                            textDisplay: "Test string",
                            textOriginal: "Test string",
                            updatedAt: "Test string",
                            videoId: "Test string",
                            viewerRating: "Test string",
                        },
                    }
                ],
            },
            snippet: {
                canReply: true,
                channelId: "Test string",
                isPublic: true,
                topLevelComment: {
                    etag: "Test string",
                    id: "Test string",
                    kind: "Test string",
                    snippet: {
                        authorChannelId: {
                            value: "Test string",
                        },
                        authorChannelUrl: "Test string",
                        authorDisplayName: "Test string",
                        authorProfileImageUrl: "Test string",
                        canRate: true,
                        channelId: "Test string",
                        likeCount: 42,
                        moderationStatus: "Test string",
                        parentId: "Test string",
                        publishedAt: "Test string",
                        textDisplay: "Test string",
                        textOriginal: "Test string",
                        updatedAt: "Test string",
                        videoId: "Test string",
                        viewerRating: "Test string",
                    },
                },
                totalReplyCount: 42,
                videoId: "Test string",
            },
        });
    }
});
