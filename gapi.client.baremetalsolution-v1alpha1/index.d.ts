/* Type definitions for non-npm package Bare Metal Solution API v1alpha1 0.0 */
// Project: https://cloud.google.com/bare-metal
// Definitions by: Maxim Mazurok <https://github.com/Maxim-Mazurok>
//                 Nick Amoscato <https://github.com/namoscato>
//                 Declan Vong <https://github.com/declanvong>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 2.8

// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
// Generated from: https://baremetalsolution.googleapis.com/$discovery/rest?version=v1alpha1
// Revision: 20220731

/// <reference types="gapi.client" />

declare namespace gapi.client {
    /** Load Bare Metal Solution API v1alpha1 */
    function load(urlOrObject: "https://baremetalsolution.googleapis.com/$discovery/rest?version=v1alpha1"): Promise<void>;
    /** @deprecated Please load APIs with discovery documents. */
    function load(name: "baremetalsolution", version: "v1alpha1"): Promise<void>;
    /** @deprecated Please load APIs with discovery documents. */
    function load(name: "baremetalsolution", version: "v1alpha1", callback: () => any): void;

    namespace baremetalsolution {
        interface InstanceConfig {
            /** Client network address. */
            clientNetwork?: NetworkAddress;
            /** Whether the instance should be provisioned with Hyperthreading enabled. */
            hyperthreading?: boolean;
            /** A transient unique identifier to idenfity an instance within an ProvisioningConfig request. */
            id?: string;
            /** Instance type. */
            instanceType?: string;
            /** Location where to deploy the instance. */
            location?: string;
            /** OS image to initialize the instance. */
            osImage?: string;
            /** Private network address, if any. */
            privateNetwork?: NetworkAddress;
            /** User note field, it can be used by customers to add additional information for the BMS Ops team (b/194021617). */
            userNote?: string;
        }
        interface InstanceQuota {
            /** Number of machines than can be created for the given location and instance_type. */
            availableMachineCount?: number;
            /** Instance type. */
            instanceType?: string;
            /** Location where the quota applies. */
            location?: string;
        }
        interface ListProvisioningQuotasResponse {
            /** Token to retrieve the next page of results, or empty if there are no more results in the list. */
            nextPageToken?: string;
            /** The provisioning quotas registered in this project. */
            provisioningQuotas?: ProvisioningQuota[];
        }
        interface LunRange {
            /** Number of LUNs to create. */
            quantity?: number;
            /** The requested size of each LUN, in GB. */
            sizeGb?: number;
        }
        interface NetworkAddress {
            /** IP address to be assigned to the server. */
            address?: string;
            /**
             * Name of the existing network to use. Will be of the format at--vlan for pre-intake UI networks like for eg, at-123456-vlan001 or any user-defined name like for eg, my-network-name
             * for networks provisioned using intake UI. The field is exclusively filled only in case of an already existing network. Mutually exclusive with network_id.
             */
            existingNetworkId?: string;
            /**
             * Name of the network to use, within the same ProvisioningConfig request. This represents a new network being provisioned in the same request. Can have any user-defined name like for
             * eg, my-network-name. Mutually exclusive with existing_network_id.
             */
            networkId?: string;
        }
        interface NetworkConfig {
            /** Interconnect bandwidth. Set only when type is CLIENT. */
            bandwidth?: string;
            /** CIDR range of the network. */
            cidr?: string;
            /** A transient unique identifier to identify a volume within an ProvisioningConfig request. */
            id?: string;
            /** Location where to deploy the network. */
            location?: string;
            /** Service CIDR, if any. */
            serviceCidr?: string;
            /** The type of this network. */
            type?: string;
            /** User note field, it can be used by customers to add additional information for the BMS Ops team (b/194021617). */
            userNote?: string;
            /** List of VLAN attachments. As of now there are always 2 attachments, but it is going to change in the future (multi vlan). */
            vlanAttachments?: VlanAttachment[];
        }
        interface NfsExport {
            /** Allow dev. */
            allowDev?: boolean;
            /** Allow the setuid flag. */
            allowSuid?: boolean;
            /** A CIDR range. */
            cidr?: string;
            /** Either a single machine, identified by an ID, or a comma-separated list of machine IDs. */
            machineId?: string;
            /** Network to use to publish the export. */
            networkId?: string;
            /** Disable root squashing. */
            noRootSquash?: boolean;
            /** Export permissions. */
            permissions?: string;
        }
        interface ProvisioningConfig {
            /** Instances to be created. */
            instances?: InstanceConfig[];
            /** Networks to be created. */
            networks?: NetworkConfig[];
            /** A reference to track the request. */
            ticketId?: string;
            /** Volumes to be created. */
            volumes?: VolumeConfig[];
        }
        interface ProvisioningQuota {
            /** Instance quota. */
            instanceQuota?: InstanceQuota;
        }
        interface SubmitProvisioningConfigRequest {
            /** Optional. Email provided to send a confirmation with provisioning config to. */
            email?: string;
            /** Required. The ProvisioningConfig to submit. */
            provisioningConfig?: ProvisioningConfig;
        }
        interface VlanAttachment {
            /** Identifier of the VLAN attachment. */
            id?: string;
            /** Attachment pairing key. */
            pairingKey?: string;
        }
        interface VolumeConfig {
            /** A transient unique identifier to identify a volume within an ProvisioningConfig request. */
            id?: string;
            /** Location where to deploy the volume. */
            location?: string;
            /** LUN ranges to be configured. Set only when protocol is PROTOCOL_FC. */
            lunRanges?: LunRange[];
            /** Machine ids connected to this volume. Set only when protocol is PROTOCOL_FC. */
            machineIds?: string[];
            /** NFS exports. Set only when protocol is PROTOCOL_NFS. */
            nfsExports?: NfsExport[];
            /** Volume protocol. */
            protocol?: string;
            /** The requested size of this volume, in GB. This will be updated in a later iteration with a generic size field. */
            sizeGb?: number;
            /** Whether snapshots should be enabled. */
            snapshotsEnabled?: boolean;
            /** The type of this Volume. */
            type?: string;
            /** User note field, it can be used by customers to add additional information for the BMS Ops team (b/194021617). */
            userNote?: string;
        }
        interface LocationsResource {
            /** Submit a provisiong configuration for a given project. */
            submitProvisioningConfig(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Required. The target location of the provisioning request. */
                location: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Required. The target project of the provisioning request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: SubmitProvisioningConfigRequest;
            }): Request<ProvisioningConfig>;
            submitProvisioningConfig(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Required. The target location of the provisioning request. */
                location: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Required. The target project of the provisioning request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: SubmitProvisioningConfigRequest): Request<ProvisioningConfig>;
        }
        interface ProvisioningQuotasResource {
            /** List the budget details to provision resources on a given project. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The maximum number of items to return. */
                pageSize?: number;
                /** The next_page_token value returned from a previous List request, if any. */
                pageToken?: string;
                /** Required. The parent project containing the provisioning quotas. */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListProvisioningQuotasResponse>;
        }
        interface ProjectsResource {
            locations: LocationsResource;
            provisioningQuotas: ProvisioningQuotasResource;
        }

        const projects: ProjectsResource;
    }
}
