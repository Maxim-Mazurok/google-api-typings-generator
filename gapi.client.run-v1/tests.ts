/* This is stub file for gapi.client.run-v1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20230924

gapi.load('client', async () => {
    /** now we can use gapi.client */

    await gapi.client.load('https://run.googleapis.com/$discovery/rest?version=v1');
    /** now we can use gapi.client.run */

    /** don't forget to authenticate your client before sending any request to resources: */
    /** declare client_id registered in Google Developers Console */
    const client_id = '<<PUT YOUR CLIENT ID HERE>>';
    const scope = [
        /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
        'https://www.googleapis.com/auth/cloud-platform',
    ];
    const immediate = false;
    gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
        if (authResult && !authResult.error) {
            /** handle successful authorization */
            run();
        } else {
            /** handle authorization error */
        }
    });

    async function run() {
        /** List authorized domains. */
        await gapi.client.run.namespaces.authorizeddomains.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Get information about a configuration. */
        await gapi.client.run.namespaces.configurations.get({
            name: "Test string",
        });
        /** List configurations. */
        await gapi.client.run.namespaces.configurations.list({
            continue: "Test string",
            fieldSelector: "Test string",
            includeUninitialized: true,
            labelSelector: "Test string",
            limit: 42,
            parent: "Test string",
            resourceVersion: "Test string",
            watch: true,
        });
        /** Create a new domain mapping. */
        await gapi.client.run.namespaces.domainmappings.create({
            dryRun: "Test string",
            parent: "Test string",
        }, {
            apiVersion: "Test string",
            kind: "Test string",
            metadata: {
                annotations: {
                    A: "Test string"
                },
                clusterName: "Test string",
                creationTimestamp: "Test string",
                deletionGracePeriodSeconds: 42,
                deletionTimestamp: "Test string",
                finalizers: [
                    "Test string"
                ],
                generateName: "Test string",
                generation: 42,
                labels: {
                    A: "Test string"
                },
                name: "Test string",
                namespace: "Test string",
                ownerReferences: [
                    {
                        apiVersion: "Test string",
                        blockOwnerDeletion: true,
                        controller: true,
                        kind: "Test string",
                        name: "Test string",
                        uid: "Test string",
                    }
                ],
                resourceVersion: "Test string",
                selfLink: "Test string",
                uid: "Test string",
            },
            spec: {
                certificateMode: "Test string",
                forceOverride: true,
                routeName: "Test string",
            },
            status: {
                conditions: [
                    {
                        lastTransitionTime: "Test string",
                        message: "Test string",
                        reason: "Test string",
                        severity: "Test string",
                        status: "Test string",
                        type: "Test string",
                    }
                ],
                mappedRouteName: "Test string",
                observedGeneration: 42,
                resourceRecords: [
                    {
                        name: "Test string",
                        rrdata: "Test string",
                        type: "Test string",
                    }
                ],
                url: "Test string",
            },
        });
        /** Delete a domain mapping. */
        await gapi.client.run.namespaces.domainmappings.delete({
            apiVersion: "Test string",
            dryRun: "Test string",
            kind: "Test string",
            name: "Test string",
            propagationPolicy: "Test string",
        });
        /** Get information about a domain mapping. */
        await gapi.client.run.namespaces.domainmappings.get({
            name: "Test string",
        });
        /** List all domain mappings. */
        await gapi.client.run.namespaces.domainmappings.list({
            continue: "Test string",
            fieldSelector: "Test string",
            includeUninitialized: true,
            labelSelector: "Test string",
            limit: 42,
            parent: "Test string",
            resourceVersion: "Test string",
            watch: true,
        });
        /** Cancel an execution. */
        await gapi.client.run.namespaces.executions.cancel({
            name: "Test string",
        }, {
        });
        /** Delete an execution. */
        await gapi.client.run.namespaces.executions.delete({
            apiVersion: "Test string",
            kind: "Test string",
            name: "Test string",
            propagationPolicy: "Test string",
        });
        /** Get information about an execution. */
        await gapi.client.run.namespaces.executions.get({
            name: "Test string",
        });
        /** List executions. */
        await gapi.client.run.namespaces.executions.list({
            continue: "Test string",
            fieldSelector: "Test string",
            includeUninitialized: true,
            labelSelector: "Test string",
            limit: 42,
            parent: "Test string",
            resourceVersion: "Test string",
            watch: true,
        });
        /** Create a job. */
        await gapi.client.run.namespaces.jobs.create({
            parent: "Test string",
        }, {
            apiVersion: "Test string",
            kind: "Test string",
            metadata: {
                annotations: {
                    A: "Test string"
                },
                clusterName: "Test string",
                creationTimestamp: "Test string",
                deletionGracePeriodSeconds: 42,
                deletionTimestamp: "Test string",
                finalizers: [
                    "Test string"
                ],
                generateName: "Test string",
                generation: 42,
                labels: {
                    A: "Test string"
                },
                name: "Test string",
                namespace: "Test string",
                ownerReferences: [
                    {
                        apiVersion: "Test string",
                        blockOwnerDeletion: true,
                        controller: true,
                        kind: "Test string",
                        name: "Test string",
                        uid: "Test string",
                    }
                ],
                resourceVersion: "Test string",
                selfLink: "Test string",
                uid: "Test string",
            },
            spec: {
                template: {
                    metadata: {
                        annotations: {
                            A: "Test string"
                        },
                        clusterName: "Test string",
                        creationTimestamp: "Test string",
                        deletionGracePeriodSeconds: 42,
                        deletionTimestamp: "Test string",
                        finalizers: [
                            "Test string"
                        ],
                        generateName: "Test string",
                        generation: 42,
                        labels: {
                            A: "Test string"
                        },
                        name: "Test string",
                        namespace: "Test string",
                        ownerReferences: [
                            {
                                apiVersion: "Test string",
                                blockOwnerDeletion: true,
                                controller: true,
                                kind: "Test string",
                                name: "Test string",
                                uid: "Test string",
                            }
                        ],
                        resourceVersion: "Test string",
                        selfLink: "Test string",
                        uid: "Test string",
                    },
                    spec: {
                        parallelism: 42,
                        taskCount: 42,
                        template: {
                            spec: {
                                containers: [
                                    {
                                        args: [
                                            "Test string"
                                        ],
                                        command: [
                                            "Test string"
                                        ],
                                        env: [
                                            {
                                                name: "Test string",
                                                value: "Test string",
                                                valueFrom: {
                                                    configMapKeyRef: {
                                                        key: "Test string",
                                                        localObjectReference: {
                                                            name: "Test string",
                                                        },
                                                        name: "Test string",
                                                        optional: true,
                                                    },
                                                    secretKeyRef: {
                                                        key: "Test string",
                                                        localObjectReference: {
                                                            name: "Test string",
                                                        },
                                                        name: "Test string",
                                                        optional: true,
                                                    },
                                                },
                                            }
                                        ],
                                        envFrom: [
                                            {
                                                configMapRef: {
                                                    localObjectReference: {
                                                        name: "Test string",
                                                    },
                                                    name: "Test string",
                                                    optional: true,
                                                },
                                                prefix: "Test string",
                                                secretRef: {
                                                    localObjectReference: {
                                                        name: "Test string",
                                                    },
                                                    name: "Test string",
                                                    optional: true,
                                                },
                                            }
                                        ],
                                        image: "Test string",
                                        imagePullPolicy: "Test string",
                                        livenessProbe: {
                                            exec: {
                                                command: [
                                                    "Test string"
                                                ],
                                            },
                                            failureThreshold: 42,
                                            grpc: {
                                                port: 42,
                                                service: "Test string",
                                            },
                                            httpGet: {
                                                host: "Test string",
                                                httpHeaders: [
                                                    {
                                                        name: "Test string",
                                                        value: "Test string",
                                                    }
                                                ],
                                                path: "Test string",
                                                port: 42,
                                                scheme: "Test string",
                                            },
                                            initialDelaySeconds: 42,
                                            periodSeconds: 42,
                                            successThreshold: 42,
                                            tcpSocket: {
                                                host: "Test string",
                                                port: 42,
                                            },
                                            timeoutSeconds: 42,
                                        },
                                        name: "Test string",
                                        ports: [
                                            {
                                                containerPort: 42,
                                                name: "Test string",
                                                protocol: "Test string",
                                            }
                                        ],
                                        readinessProbe: {
                                            exec: {
                                                command: [
                                                    "Test string"
                                                ],
                                            },
                                            failureThreshold: 42,
                                            grpc: {
                                                port: 42,
                                                service: "Test string",
                                            },
                                            httpGet: {
                                                host: "Test string",
                                                httpHeaders: [
                                                    {
                                                        name: "Test string",
                                                        value: "Test string",
                                                    }
                                                ],
                                                path: "Test string",
                                                port: 42,
                                                scheme: "Test string",
                                            },
                                            initialDelaySeconds: 42,
                                            periodSeconds: 42,
                                            successThreshold: 42,
                                            tcpSocket: {
                                                host: "Test string",
                                                port: 42,
                                            },
                                            timeoutSeconds: 42,
                                        },
                                        resources: {
                                            limits: {
                                                A: "Test string"
                                            },
                                            requests: {
                                                A: "Test string"
                                            },
                                        },
                                        securityContext: {
                                            runAsUser: 42,
                                        },
                                        startupProbe: {
                                            exec: {
                                                command: [
                                                    "Test string"
                                                ],
                                            },
                                            failureThreshold: 42,
                                            grpc: {
                                                port: 42,
                                                service: "Test string",
                                            },
                                            httpGet: {
                                                host: "Test string",
                                                httpHeaders: [
                                                    {
                                                        name: "Test string",
                                                        value: "Test string",
                                                    }
                                                ],
                                                path: "Test string",
                                                port: 42,
                                                scheme: "Test string",
                                            },
                                            initialDelaySeconds: 42,
                                            periodSeconds: 42,
                                            successThreshold: 42,
                                            tcpSocket: {
                                                host: "Test string",
                                                port: 42,
                                            },
                                            timeoutSeconds: 42,
                                        },
                                        terminationMessagePath: "Test string",
                                        terminationMessagePolicy: "Test string",
                                        volumeMounts: [
                                            {
                                                mountPath: "Test string",
                                                name: "Test string",
                                                readOnly: true,
                                                subPath: "Test string",
                                            }
                                        ],
                                        workingDir: "Test string",
                                    }
                                ],
                                maxRetries: 42,
                                serviceAccountName: "Test string",
                                timeoutSeconds: "Test string",
                                volumes: [
                                    {
                                        configMap: {
                                            defaultMode: 42,
                                            items: [
                                                {
                                                    key: "Test string",
                                                    mode: 42,
                                                    path: "Test string",
                                                }
                                            ],
                                            name: "Test string",
                                            optional: true,
                                        },
                                        emptyDir: {
                                            medium: "Test string",
                                            sizeLimit: "Test string",
                                        },
                                        name: "Test string",
                                        secret: {
                                            defaultMode: 42,
                                            items: [
                                                {
                                                    key: "Test string",
                                                    mode: 42,
                                                    path: "Test string",
                                                }
                                            ],
                                            optional: true,
                                            secretName: "Test string",
                                        },
                                    }
                                ],
                            },
                        },
                    },
                },
            },
            status: {
                conditions: [
                    {
                        lastTransitionTime: "Test string",
                        message: "Test string",
                        reason: "Test string",
                        severity: "Test string",
                        status: "Test string",
                        type: "Test string",
                    }
                ],
                executionCount: 42,
                latestCreatedExecution: {
                    completionTimestamp: "Test string",
                    creationTimestamp: "Test string",
                    name: "Test string",
                },
                observedGeneration: 42,
            },
        });
        /** Delete a job. */
        await gapi.client.run.namespaces.jobs.delete({
            apiVersion: "Test string",
            kind: "Test string",
            name: "Test string",
            propagationPolicy: "Test string",
        });
        /** Get information about a job. */
        await gapi.client.run.namespaces.jobs.get({
            name: "Test string",
        });
        /** List jobs. */
        await gapi.client.run.namespaces.jobs.list({
            continue: "Test string",
            fieldSelector: "Test string",
            includeUninitialized: true,
            labelSelector: "Test string",
            limit: 42,
            parent: "Test string",
            resourceVersion: "Test string",
            watch: true,
        });
        /**
         * Replace a job. Only the spec and metadata labels and annotations are modifiable. After the Replace request, Cloud Run will work to make the 'status' match the requested 'spec'. May
         * provide metadata.resourceVersion to enforce update from last read for optimistic concurrency control.
         */
        await gapi.client.run.namespaces.jobs.replaceJob({
            name: "Test string",
        }, {
            apiVersion: "Test string",
            kind: "Test string",
            metadata: {
                annotations: {
                    A: "Test string"
                },
                clusterName: "Test string",
                creationTimestamp: "Test string",
                deletionGracePeriodSeconds: 42,
                deletionTimestamp: "Test string",
                finalizers: [
                    "Test string"
                ],
                generateName: "Test string",
                generation: 42,
                labels: {
                    A: "Test string"
                },
                name: "Test string",
                namespace: "Test string",
                ownerReferences: [
                    {
                        apiVersion: "Test string",
                        blockOwnerDeletion: true,
                        controller: true,
                        kind: "Test string",
                        name: "Test string",
                        uid: "Test string",
                    }
                ],
                resourceVersion: "Test string",
                selfLink: "Test string",
                uid: "Test string",
            },
            spec: {
                template: {
                    metadata: {
                        annotations: {
                            A: "Test string"
                        },
                        clusterName: "Test string",
                        creationTimestamp: "Test string",
                        deletionGracePeriodSeconds: 42,
                        deletionTimestamp: "Test string",
                        finalizers: [
                            "Test string"
                        ],
                        generateName: "Test string",
                        generation: 42,
                        labels: {
                            A: "Test string"
                        },
                        name: "Test string",
                        namespace: "Test string",
                        ownerReferences: [
                            {
                                apiVersion: "Test string",
                                blockOwnerDeletion: true,
                                controller: true,
                                kind: "Test string",
                                name: "Test string",
                                uid: "Test string",
                            }
                        ],
                        resourceVersion: "Test string",
                        selfLink: "Test string",
                        uid: "Test string",
                    },
                    spec: {
                        parallelism: 42,
                        taskCount: 42,
                        template: {
                            spec: {
                                containers: [
                                    {
                                        args: [
                                            "Test string"
                                        ],
                                        command: [
                                            "Test string"
                                        ],
                                        env: [
                                            {
                                                name: "Test string",
                                                value: "Test string",
                                                valueFrom: {
                                                    configMapKeyRef: {
                                                        key: "Test string",
                                                        localObjectReference: {
                                                            name: "Test string",
                                                        },
                                                        name: "Test string",
                                                        optional: true,
                                                    },
                                                    secretKeyRef: {
                                                        key: "Test string",
                                                        localObjectReference: {
                                                            name: "Test string",
                                                        },
                                                        name: "Test string",
                                                        optional: true,
                                                    },
                                                },
                                            }
                                        ],
                                        envFrom: [
                                            {
                                                configMapRef: {
                                                    localObjectReference: {
                                                        name: "Test string",
                                                    },
                                                    name: "Test string",
                                                    optional: true,
                                                },
                                                prefix: "Test string",
                                                secretRef: {
                                                    localObjectReference: {
                                                        name: "Test string",
                                                    },
                                                    name: "Test string",
                                                    optional: true,
                                                },
                                            }
                                        ],
                                        image: "Test string",
                                        imagePullPolicy: "Test string",
                                        livenessProbe: {
                                            exec: {
                                                command: [
                                                    "Test string"
                                                ],
                                            },
                                            failureThreshold: 42,
                                            grpc: {
                                                port: 42,
                                                service: "Test string",
                                            },
                                            httpGet: {
                                                host: "Test string",
                                                httpHeaders: [
                                                    {
                                                        name: "Test string",
                                                        value: "Test string",
                                                    }
                                                ],
                                                path: "Test string",
                                                port: 42,
                                                scheme: "Test string",
                                            },
                                            initialDelaySeconds: 42,
                                            periodSeconds: 42,
                                            successThreshold: 42,
                                            tcpSocket: {
                                                host: "Test string",
                                                port: 42,
                                            },
                                            timeoutSeconds: 42,
                                        },
                                        name: "Test string",
                                        ports: [
                                            {
                                                containerPort: 42,
                                                name: "Test string",
                                                protocol: "Test string",
                                            }
                                        ],
                                        readinessProbe: {
                                            exec: {
                                                command: [
                                                    "Test string"
                                                ],
                                            },
                                            failureThreshold: 42,
                                            grpc: {
                                                port: 42,
                                                service: "Test string",
                                            },
                                            httpGet: {
                                                host: "Test string",
                                                httpHeaders: [
                                                    {
                                                        name: "Test string",
                                                        value: "Test string",
                                                    }
                                                ],
                                                path: "Test string",
                                                port: 42,
                                                scheme: "Test string",
                                            },
                                            initialDelaySeconds: 42,
                                            periodSeconds: 42,
                                            successThreshold: 42,
                                            tcpSocket: {
                                                host: "Test string",
                                                port: 42,
                                            },
                                            timeoutSeconds: 42,
                                        },
                                        resources: {
                                            limits: {
                                                A: "Test string"
                                            },
                                            requests: {
                                                A: "Test string"
                                            },
                                        },
                                        securityContext: {
                                            runAsUser: 42,
                                        },
                                        startupProbe: {
                                            exec: {
                                                command: [
                                                    "Test string"
                                                ],
                                            },
                                            failureThreshold: 42,
                                            grpc: {
                                                port: 42,
                                                service: "Test string",
                                            },
                                            httpGet: {
                                                host: "Test string",
                                                httpHeaders: [
                                                    {
                                                        name: "Test string",
                                                        value: "Test string",
                                                    }
                                                ],
                                                path: "Test string",
                                                port: 42,
                                                scheme: "Test string",
                                            },
                                            initialDelaySeconds: 42,
                                            periodSeconds: 42,
                                            successThreshold: 42,
                                            tcpSocket: {
                                                host: "Test string",
                                                port: 42,
                                            },
                                            timeoutSeconds: 42,
                                        },
                                        terminationMessagePath: "Test string",
                                        terminationMessagePolicy: "Test string",
                                        volumeMounts: [
                                            {
                                                mountPath: "Test string",
                                                name: "Test string",
                                                readOnly: true,
                                                subPath: "Test string",
                                            }
                                        ],
                                        workingDir: "Test string",
                                    }
                                ],
                                maxRetries: 42,
                                serviceAccountName: "Test string",
                                timeoutSeconds: "Test string",
                                volumes: [
                                    {
                                        configMap: {
                                            defaultMode: 42,
                                            items: [
                                                {
                                                    key: "Test string",
                                                    mode: 42,
                                                    path: "Test string",
                                                }
                                            ],
                                            name: "Test string",
                                            optional: true,
                                        },
                                        emptyDir: {
                                            medium: "Test string",
                                            sizeLimit: "Test string",
                                        },
                                        name: "Test string",
                                        secret: {
                                            defaultMode: 42,
                                            items: [
                                                {
                                                    key: "Test string",
                                                    mode: 42,
                                                    path: "Test string",
                                                }
                                            ],
                                            optional: true,
                                            secretName: "Test string",
                                        },
                                    }
                                ],
                            },
                        },
                    },
                },
            },
            status: {
                conditions: [
                    {
                        lastTransitionTime: "Test string",
                        message: "Test string",
                        reason: "Test string",
                        severity: "Test string",
                        status: "Test string",
                        type: "Test string",
                    }
                ],
                executionCount: 42,
                latestCreatedExecution: {
                    completionTimestamp: "Test string",
                    creationTimestamp: "Test string",
                    name: "Test string",
                },
                observedGeneration: 42,
            },
        });
        /** Trigger creation of a new execution of this job. */
        await gapi.client.run.namespaces.jobs.run({
            name: "Test string",
        }, {
            overrides: {
                containerOverrides: [
                    {
                        args: [
                            "Test string"
                        ],
                        clearArgs: true,
                        env: [
                            {
                                name: "Test string",
                                value: "Test string",
                                valueFrom: {
                                    configMapKeyRef: {
                                        key: "Test string",
                                        localObjectReference: {
                                            name: "Test string",
                                        },
                                        name: "Test string",
                                        optional: true,
                                    },
                                    secretKeyRef: {
                                        key: "Test string",
                                        localObjectReference: {
                                            name: "Test string",
                                        },
                                        name: "Test string",
                                        optional: true,
                                    },
                                },
                            }
                        ],
                        name: "Test string",
                    }
                ],
                taskCount: 42,
                timeoutSeconds: 42,
            },
        });
        /** Delete a revision. */
        await gapi.client.run.namespaces.revisions.delete({
            apiVersion: "Test string",
            dryRun: "Test string",
            kind: "Test string",
            name: "Test string",
            propagationPolicy: "Test string",
        });
        /** Get information about a revision. */
        await gapi.client.run.namespaces.revisions.get({
            name: "Test string",
        });
        /** List revisions. */
        await gapi.client.run.namespaces.revisions.list({
            continue: "Test string",
            fieldSelector: "Test string",
            includeUninitialized: true,
            labelSelector: "Test string",
            limit: 42,
            parent: "Test string",
            resourceVersion: "Test string",
            watch: true,
        });
        /** Get information about a route. */
        await gapi.client.run.namespaces.routes.get({
            name: "Test string",
        });
        /** List routes. */
        await gapi.client.run.namespaces.routes.list({
            continue: "Test string",
            fieldSelector: "Test string",
            includeUninitialized: true,
            labelSelector: "Test string",
            limit: 42,
            parent: "Test string",
            resourceVersion: "Test string",
            watch: true,
        });
        /** Creates a new Service. Service creation will trigger a new deployment. Use GetService, and check service.status to determine if the Service is ready. */
        await gapi.client.run.namespaces.services.create({
            dryRun: "Test string",
            parent: "Test string",
        }, {
            apiVersion: "Test string",
            kind: "Test string",
            metadata: {
                annotations: {
                    A: "Test string"
                },
                clusterName: "Test string",
                creationTimestamp: "Test string",
                deletionGracePeriodSeconds: 42,
                deletionTimestamp: "Test string",
                finalizers: [
                    "Test string"
                ],
                generateName: "Test string",
                generation: 42,
                labels: {
                    A: "Test string"
                },
                name: "Test string",
                namespace: "Test string",
                ownerReferences: [
                    {
                        apiVersion: "Test string",
                        blockOwnerDeletion: true,
                        controller: true,
                        kind: "Test string",
                        name: "Test string",
                        uid: "Test string",
                    }
                ],
                resourceVersion: "Test string",
                selfLink: "Test string",
                uid: "Test string",
            },
            spec: {
                template: {
                    metadata: {
                        annotations: {
                            A: "Test string"
                        },
                        clusterName: "Test string",
                        creationTimestamp: "Test string",
                        deletionGracePeriodSeconds: 42,
                        deletionTimestamp: "Test string",
                        finalizers: [
                            "Test string"
                        ],
                        generateName: "Test string",
                        generation: 42,
                        labels: {
                            A: "Test string"
                        },
                        name: "Test string",
                        namespace: "Test string",
                        ownerReferences: [
                            {
                                apiVersion: "Test string",
                                blockOwnerDeletion: true,
                                controller: true,
                                kind: "Test string",
                                name: "Test string",
                                uid: "Test string",
                            }
                        ],
                        resourceVersion: "Test string",
                        selfLink: "Test string",
                        uid: "Test string",
                    },
                    spec: {
                        containerConcurrency: 42,
                        containers: [
                            {
                                args: [
                                    "Test string"
                                ],
                                command: [
                                    "Test string"
                                ],
                                env: [
                                    {
                                        name: "Test string",
                                        value: "Test string",
                                        valueFrom: {
                                            configMapKeyRef: {
                                                key: "Test string",
                                                localObjectReference: {
                                                    name: "Test string",
                                                },
                                                name: "Test string",
                                                optional: true,
                                            },
                                            secretKeyRef: {
                                                key: "Test string",
                                                localObjectReference: {
                                                    name: "Test string",
                                                },
                                                name: "Test string",
                                                optional: true,
                                            },
                                        },
                                    }
                                ],
                                envFrom: [
                                    {
                                        configMapRef: {
                                            localObjectReference: {
                                                name: "Test string",
                                            },
                                            name: "Test string",
                                            optional: true,
                                        },
                                        prefix: "Test string",
                                        secretRef: {
                                            localObjectReference: {
                                                name: "Test string",
                                            },
                                            name: "Test string",
                                            optional: true,
                                        },
                                    }
                                ],
                                image: "Test string",
                                imagePullPolicy: "Test string",
                                livenessProbe: {
                                    exec: {
                                        command: [
                                            "Test string"
                                        ],
                                    },
                                    failureThreshold: 42,
                                    grpc: {
                                        port: 42,
                                        service: "Test string",
                                    },
                                    httpGet: {
                                        host: "Test string",
                                        httpHeaders: [
                                            {
                                                name: "Test string",
                                                value: "Test string",
                                            }
                                        ],
                                        path: "Test string",
                                        port: 42,
                                        scheme: "Test string",
                                    },
                                    initialDelaySeconds: 42,
                                    periodSeconds: 42,
                                    successThreshold: 42,
                                    tcpSocket: {
                                        host: "Test string",
                                        port: 42,
                                    },
                                    timeoutSeconds: 42,
                                },
                                name: "Test string",
                                ports: [
                                    {
                                        containerPort: 42,
                                        name: "Test string",
                                        protocol: "Test string",
                                    }
                                ],
                                readinessProbe: {
                                    exec: {
                                        command: [
                                            "Test string"
                                        ],
                                    },
                                    failureThreshold: 42,
                                    grpc: {
                                        port: 42,
                                        service: "Test string",
                                    },
                                    httpGet: {
                                        host: "Test string",
                                        httpHeaders: [
                                            {
                                                name: "Test string",
                                                value: "Test string",
                                            }
                                        ],
                                        path: "Test string",
                                        port: 42,
                                        scheme: "Test string",
                                    },
                                    initialDelaySeconds: 42,
                                    periodSeconds: 42,
                                    successThreshold: 42,
                                    tcpSocket: {
                                        host: "Test string",
                                        port: 42,
                                    },
                                    timeoutSeconds: 42,
                                },
                                resources: {
                                    limits: {
                                        A: "Test string"
                                    },
                                    requests: {
                                        A: "Test string"
                                    },
                                },
                                securityContext: {
                                    runAsUser: 42,
                                },
                                startupProbe: {
                                    exec: {
                                        command: [
                                            "Test string"
                                        ],
                                    },
                                    failureThreshold: 42,
                                    grpc: {
                                        port: 42,
                                        service: "Test string",
                                    },
                                    httpGet: {
                                        host: "Test string",
                                        httpHeaders: [
                                            {
                                                name: "Test string",
                                                value: "Test string",
                                            }
                                        ],
                                        path: "Test string",
                                        port: 42,
                                        scheme: "Test string",
                                    },
                                    initialDelaySeconds: 42,
                                    periodSeconds: 42,
                                    successThreshold: 42,
                                    tcpSocket: {
                                        host: "Test string",
                                        port: 42,
                                    },
                                    timeoutSeconds: 42,
                                },
                                terminationMessagePath: "Test string",
                                terminationMessagePolicy: "Test string",
                                volumeMounts: [
                                    {
                                        mountPath: "Test string",
                                        name: "Test string",
                                        readOnly: true,
                                        subPath: "Test string",
                                    }
                                ],
                                workingDir: "Test string",
                            }
                        ],
                        enableServiceLinks: true,
                        imagePullSecrets: [
                            {
                                name: "Test string",
                            }
                        ],
                        serviceAccountName: "Test string",
                        timeoutSeconds: 42,
                        volumes: [
                            {
                                configMap: {
                                    defaultMode: 42,
                                    items: [
                                        {
                                            key: "Test string",
                                            mode: 42,
                                            path: "Test string",
                                        }
                                    ],
                                    name: "Test string",
                                    optional: true,
                                },
                                emptyDir: {
                                    medium: "Test string",
                                    sizeLimit: "Test string",
                                },
                                name: "Test string",
                                secret: {
                                    defaultMode: 42,
                                    items: [
                                        {
                                            key: "Test string",
                                            mode: 42,
                                            path: "Test string",
                                        }
                                    ],
                                    optional: true,
                                    secretName: "Test string",
                                },
                            }
                        ],
                    },
                },
                traffic: [
                    {
                        configurationName: "Test string",
                        latestRevision: true,
                        percent: 42,
                        revisionName: "Test string",
                        tag: "Test string",
                        url: "Test string",
                    }
                ],
            },
            status: {
                address: {
                    url: "Test string",
                },
                conditions: [
                    {
                        lastTransitionTime: "Test string",
                        message: "Test string",
                        reason: "Test string",
                        severity: "Test string",
                        status: "Test string",
                        type: "Test string",
                    }
                ],
                latestCreatedRevisionName: "Test string",
                latestReadyRevisionName: "Test string",
                observedGeneration: 42,
                traffic: [
                    {
                        configurationName: "Test string",
                        latestRevision: true,
                        percent: 42,
                        revisionName: "Test string",
                        tag: "Test string",
                        url: "Test string",
                    }
                ],
                url: "Test string",
            },
        });
        /** Deletes the provided service. This will cause the Service to stop serving traffic and will delete all associated Revisions. */
        await gapi.client.run.namespaces.services.delete({
            apiVersion: "Test string",
            dryRun: "Test string",
            kind: "Test string",
            name: "Test string",
            propagationPolicy: "Test string",
        });
        /** Gets information about a service. */
        await gapi.client.run.namespaces.services.get({
            name: "Test string",
        });
        /** Lists services for the given project and region. */
        await gapi.client.run.namespaces.services.list({
            continue: "Test string",
            fieldSelector: "Test string",
            includeUninitialized: true,
            labelSelector: "Test string",
            limit: 42,
            parent: "Test string",
            resourceVersion: "Test string",
            watch: true,
        });
        /**
         * Replaces a service. Only the spec and metadata labels and annotations are modifiable. After the Update request, Cloud Run will work to make the 'status' match the requested 'spec'. May
         * provide metadata.resourceVersion to enforce update from last read for optimistic concurrency control.
         */
        await gapi.client.run.namespaces.services.replaceService({
            dryRun: "Test string",
            name: "Test string",
        }, {
            apiVersion: "Test string",
            kind: "Test string",
            metadata: {
                annotations: {
                    A: "Test string"
                },
                clusterName: "Test string",
                creationTimestamp: "Test string",
                deletionGracePeriodSeconds: 42,
                deletionTimestamp: "Test string",
                finalizers: [
                    "Test string"
                ],
                generateName: "Test string",
                generation: 42,
                labels: {
                    A: "Test string"
                },
                name: "Test string",
                namespace: "Test string",
                ownerReferences: [
                    {
                        apiVersion: "Test string",
                        blockOwnerDeletion: true,
                        controller: true,
                        kind: "Test string",
                        name: "Test string",
                        uid: "Test string",
                    }
                ],
                resourceVersion: "Test string",
                selfLink: "Test string",
                uid: "Test string",
            },
            spec: {
                template: {
                    metadata: {
                        annotations: {
                            A: "Test string"
                        },
                        clusterName: "Test string",
                        creationTimestamp: "Test string",
                        deletionGracePeriodSeconds: 42,
                        deletionTimestamp: "Test string",
                        finalizers: [
                            "Test string"
                        ],
                        generateName: "Test string",
                        generation: 42,
                        labels: {
                            A: "Test string"
                        },
                        name: "Test string",
                        namespace: "Test string",
                        ownerReferences: [
                            {
                                apiVersion: "Test string",
                                blockOwnerDeletion: true,
                                controller: true,
                                kind: "Test string",
                                name: "Test string",
                                uid: "Test string",
                            }
                        ],
                        resourceVersion: "Test string",
                        selfLink: "Test string",
                        uid: "Test string",
                    },
                    spec: {
                        containerConcurrency: 42,
                        containers: [
                            {
                                args: [
                                    "Test string"
                                ],
                                command: [
                                    "Test string"
                                ],
                                env: [
                                    {
                                        name: "Test string",
                                        value: "Test string",
                                        valueFrom: {
                                            configMapKeyRef: {
                                                key: "Test string",
                                                localObjectReference: {
                                                    name: "Test string",
                                                },
                                                name: "Test string",
                                                optional: true,
                                            },
                                            secretKeyRef: {
                                                key: "Test string",
                                                localObjectReference: {
                                                    name: "Test string",
                                                },
                                                name: "Test string",
                                                optional: true,
                                            },
                                        },
                                    }
                                ],
                                envFrom: [
                                    {
                                        configMapRef: {
                                            localObjectReference: {
                                                name: "Test string",
                                            },
                                            name: "Test string",
                                            optional: true,
                                        },
                                        prefix: "Test string",
                                        secretRef: {
                                            localObjectReference: {
                                                name: "Test string",
                                            },
                                            name: "Test string",
                                            optional: true,
                                        },
                                    }
                                ],
                                image: "Test string",
                                imagePullPolicy: "Test string",
                                livenessProbe: {
                                    exec: {
                                        command: [
                                            "Test string"
                                        ],
                                    },
                                    failureThreshold: 42,
                                    grpc: {
                                        port: 42,
                                        service: "Test string",
                                    },
                                    httpGet: {
                                        host: "Test string",
                                        httpHeaders: [
                                            {
                                                name: "Test string",
                                                value: "Test string",
                                            }
                                        ],
                                        path: "Test string",
                                        port: 42,
                                        scheme: "Test string",
                                    },
                                    initialDelaySeconds: 42,
                                    periodSeconds: 42,
                                    successThreshold: 42,
                                    tcpSocket: {
                                        host: "Test string",
                                        port: 42,
                                    },
                                    timeoutSeconds: 42,
                                },
                                name: "Test string",
                                ports: [
                                    {
                                        containerPort: 42,
                                        name: "Test string",
                                        protocol: "Test string",
                                    }
                                ],
                                readinessProbe: {
                                    exec: {
                                        command: [
                                            "Test string"
                                        ],
                                    },
                                    failureThreshold: 42,
                                    grpc: {
                                        port: 42,
                                        service: "Test string",
                                    },
                                    httpGet: {
                                        host: "Test string",
                                        httpHeaders: [
                                            {
                                                name: "Test string",
                                                value: "Test string",
                                            }
                                        ],
                                        path: "Test string",
                                        port: 42,
                                        scheme: "Test string",
                                    },
                                    initialDelaySeconds: 42,
                                    periodSeconds: 42,
                                    successThreshold: 42,
                                    tcpSocket: {
                                        host: "Test string",
                                        port: 42,
                                    },
                                    timeoutSeconds: 42,
                                },
                                resources: {
                                    limits: {
                                        A: "Test string"
                                    },
                                    requests: {
                                        A: "Test string"
                                    },
                                },
                                securityContext: {
                                    runAsUser: 42,
                                },
                                startupProbe: {
                                    exec: {
                                        command: [
                                            "Test string"
                                        ],
                                    },
                                    failureThreshold: 42,
                                    grpc: {
                                        port: 42,
                                        service: "Test string",
                                    },
                                    httpGet: {
                                        host: "Test string",
                                        httpHeaders: [
                                            {
                                                name: "Test string",
                                                value: "Test string",
                                            }
                                        ],
                                        path: "Test string",
                                        port: 42,
                                        scheme: "Test string",
                                    },
                                    initialDelaySeconds: 42,
                                    periodSeconds: 42,
                                    successThreshold: 42,
                                    tcpSocket: {
                                        host: "Test string",
                                        port: 42,
                                    },
                                    timeoutSeconds: 42,
                                },
                                terminationMessagePath: "Test string",
                                terminationMessagePolicy: "Test string",
                                volumeMounts: [
                                    {
                                        mountPath: "Test string",
                                        name: "Test string",
                                        readOnly: true,
                                        subPath: "Test string",
                                    }
                                ],
                                workingDir: "Test string",
                            }
                        ],
                        enableServiceLinks: true,
                        imagePullSecrets: [
                            {
                                name: "Test string",
                            }
                        ],
                        serviceAccountName: "Test string",
                        timeoutSeconds: 42,
                        volumes: [
                            {
                                configMap: {
                                    defaultMode: 42,
                                    items: [
                                        {
                                            key: "Test string",
                                            mode: 42,
                                            path: "Test string",
                                        }
                                    ],
                                    name: "Test string",
                                    optional: true,
                                },
                                emptyDir: {
                                    medium: "Test string",
                                    sizeLimit: "Test string",
                                },
                                name: "Test string",
                                secret: {
                                    defaultMode: 42,
                                    items: [
                                        {
                                            key: "Test string",
                                            mode: 42,
                                            path: "Test string",
                                        }
                                    ],
                                    optional: true,
                                    secretName: "Test string",
                                },
                            }
                        ],
                    },
                },
                traffic: [
                    {
                        configurationName: "Test string",
                        latestRevision: true,
                        percent: 42,
                        revisionName: "Test string",
                        tag: "Test string",
                        url: "Test string",
                    }
                ],
            },
            status: {
                address: {
                    url: "Test string",
                },
                conditions: [
                    {
                        lastTransitionTime: "Test string",
                        message: "Test string",
                        reason: "Test string",
                        severity: "Test string",
                        status: "Test string",
                        type: "Test string",
                    }
                ],
                latestCreatedRevisionName: "Test string",
                latestReadyRevisionName: "Test string",
                observedGeneration: 42,
                traffic: [
                    {
                        configurationName: "Test string",
                        latestRevision: true,
                        percent: 42,
                        revisionName: "Test string",
                        tag: "Test string",
                        url: "Test string",
                    }
                ],
                url: "Test string",
            },
        });
        /** Get information about a task. */
        await gapi.client.run.namespaces.tasks.get({
            name: "Test string",
        });
        /** List tasks. */
        await gapi.client.run.namespaces.tasks.list({
            continue: "Test string",
            fieldSelector: "Test string",
            includeUninitialized: true,
            labelSelector: "Test string",
            limit: 42,
            parent: "Test string",
            resourceVersion: "Test string",
            watch: true,
        });
        /** List authorized domains. */
        await gapi.client.run.projects.authorizeddomains.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Lists information about the supported locations for this service. */
        await gapi.client.run.projects.locations.list({
            filter: "Test string",
            name: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** List authorized domains. */
        await gapi.client.run.projects.locations.authorizeddomains.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Get information about a configuration. */
        await gapi.client.run.projects.locations.configurations.get({
            name: "Test string",
        });
        /** List configurations. */
        await gapi.client.run.projects.locations.configurations.list({
            continue: "Test string",
            fieldSelector: "Test string",
            includeUninitialized: true,
            labelSelector: "Test string",
            limit: 42,
            parent: "Test string",
            resourceVersion: "Test string",
            watch: true,
        });
        /** Create a new domain mapping. */
        await gapi.client.run.projects.locations.domainmappings.create({
            dryRun: "Test string",
            parent: "Test string",
        }, {
            apiVersion: "Test string",
            kind: "Test string",
            metadata: {
                annotations: {
                    A: "Test string"
                },
                clusterName: "Test string",
                creationTimestamp: "Test string",
                deletionGracePeriodSeconds: 42,
                deletionTimestamp: "Test string",
                finalizers: [
                    "Test string"
                ],
                generateName: "Test string",
                generation: 42,
                labels: {
                    A: "Test string"
                },
                name: "Test string",
                namespace: "Test string",
                ownerReferences: [
                    {
                        apiVersion: "Test string",
                        blockOwnerDeletion: true,
                        controller: true,
                        kind: "Test string",
                        name: "Test string",
                        uid: "Test string",
                    }
                ],
                resourceVersion: "Test string",
                selfLink: "Test string",
                uid: "Test string",
            },
            spec: {
                certificateMode: "Test string",
                forceOverride: true,
                routeName: "Test string",
            },
            status: {
                conditions: [
                    {
                        lastTransitionTime: "Test string",
                        message: "Test string",
                        reason: "Test string",
                        severity: "Test string",
                        status: "Test string",
                        type: "Test string",
                    }
                ],
                mappedRouteName: "Test string",
                observedGeneration: 42,
                resourceRecords: [
                    {
                        name: "Test string",
                        rrdata: "Test string",
                        type: "Test string",
                    }
                ],
                url: "Test string",
            },
        });
        /** Delete a domain mapping. */
        await gapi.client.run.projects.locations.domainmappings.delete({
            apiVersion: "Test string",
            dryRun: "Test string",
            kind: "Test string",
            name: "Test string",
            propagationPolicy: "Test string",
        });
        /** Get information about a domain mapping. */
        await gapi.client.run.projects.locations.domainmappings.get({
            name: "Test string",
        });
        /** List all domain mappings. */
        await gapi.client.run.projects.locations.domainmappings.list({
            continue: "Test string",
            fieldSelector: "Test string",
            includeUninitialized: true,
            labelSelector: "Test string",
            limit: 42,
            parent: "Test string",
            resourceVersion: "Test string",
            watch: true,
        });
        /** Get the IAM Access Control policy currently in effect for the given job. This result does not include any inherited policies. */
        await gapi.client.run.projects.locations.jobs.getIamPolicy({
            "options.requestedPolicyVersion": 42,
            resource: "Test string",
        });
        /** Sets the IAM Access control policy for the specified job. Overwrites any existing policy. */
        await gapi.client.run.projects.locations.jobs.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                auditConfigs: [
                    {
                        auditLogConfigs: [
                            {
                                exemptedMembers: [
                                    "Test string"
                                ],
                                logType: "Test string",
                            }
                        ],
                        service: "Test string",
                    }
                ],
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"
                        ],
                        role: "Test string",
                    }
                ],
                etag: "Test string",
                version: 42,
            },
            updateMask: "Test string",
        });
        /** Returns permissions that a caller has on the specified job. There are no permissions required for making this API call. */
        await gapi.client.run.projects.locations.jobs.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"
            ],
        });
        /** Delete a revision. */
        await gapi.client.run.projects.locations.revisions.delete({
            apiVersion: "Test string",
            dryRun: "Test string",
            kind: "Test string",
            name: "Test string",
            propagationPolicy: "Test string",
        });
        /** Get information about a revision. */
        await gapi.client.run.projects.locations.revisions.get({
            name: "Test string",
        });
        /** List revisions. */
        await gapi.client.run.projects.locations.revisions.list({
            continue: "Test string",
            fieldSelector: "Test string",
            includeUninitialized: true,
            labelSelector: "Test string",
            limit: 42,
            parent: "Test string",
            resourceVersion: "Test string",
            watch: true,
        });
        /** Get information about a route. */
        await gapi.client.run.projects.locations.routes.get({
            name: "Test string",
        });
        /** List routes. */
        await gapi.client.run.projects.locations.routes.list({
            continue: "Test string",
            fieldSelector: "Test string",
            includeUninitialized: true,
            labelSelector: "Test string",
            limit: 42,
            parent: "Test string",
            resourceVersion: "Test string",
            watch: true,
        });
        /** Creates a new Service. Service creation will trigger a new deployment. Use GetService, and check service.status to determine if the Service is ready. */
        await gapi.client.run.projects.locations.services.create({
            dryRun: "Test string",
            parent: "Test string",
        }, {
            apiVersion: "Test string",
            kind: "Test string",
            metadata: {
                annotations: {
                    A: "Test string"
                },
                clusterName: "Test string",
                creationTimestamp: "Test string",
                deletionGracePeriodSeconds: 42,
                deletionTimestamp: "Test string",
                finalizers: [
                    "Test string"
                ],
                generateName: "Test string",
                generation: 42,
                labels: {
                    A: "Test string"
                },
                name: "Test string",
                namespace: "Test string",
                ownerReferences: [
                    {
                        apiVersion: "Test string",
                        blockOwnerDeletion: true,
                        controller: true,
                        kind: "Test string",
                        name: "Test string",
                        uid: "Test string",
                    }
                ],
                resourceVersion: "Test string",
                selfLink: "Test string",
                uid: "Test string",
            },
            spec: {
                template: {
                    metadata: {
                        annotations: {
                            A: "Test string"
                        },
                        clusterName: "Test string",
                        creationTimestamp: "Test string",
                        deletionGracePeriodSeconds: 42,
                        deletionTimestamp: "Test string",
                        finalizers: [
                            "Test string"
                        ],
                        generateName: "Test string",
                        generation: 42,
                        labels: {
                            A: "Test string"
                        },
                        name: "Test string",
                        namespace: "Test string",
                        ownerReferences: [
                            {
                                apiVersion: "Test string",
                                blockOwnerDeletion: true,
                                controller: true,
                                kind: "Test string",
                                name: "Test string",
                                uid: "Test string",
                            }
                        ],
                        resourceVersion: "Test string",
                        selfLink: "Test string",
                        uid: "Test string",
                    },
                    spec: {
                        containerConcurrency: 42,
                        containers: [
                            {
                                args: [
                                    "Test string"
                                ],
                                command: [
                                    "Test string"
                                ],
                                env: [
                                    {
                                        name: "Test string",
                                        value: "Test string",
                                        valueFrom: {
                                            configMapKeyRef: {
                                                key: "Test string",
                                                localObjectReference: {
                                                    name: "Test string",
                                                },
                                                name: "Test string",
                                                optional: true,
                                            },
                                            secretKeyRef: {
                                                key: "Test string",
                                                localObjectReference: {
                                                    name: "Test string",
                                                },
                                                name: "Test string",
                                                optional: true,
                                            },
                                        },
                                    }
                                ],
                                envFrom: [
                                    {
                                        configMapRef: {
                                            localObjectReference: {
                                                name: "Test string",
                                            },
                                            name: "Test string",
                                            optional: true,
                                        },
                                        prefix: "Test string",
                                        secretRef: {
                                            localObjectReference: {
                                                name: "Test string",
                                            },
                                            name: "Test string",
                                            optional: true,
                                        },
                                    }
                                ],
                                image: "Test string",
                                imagePullPolicy: "Test string",
                                livenessProbe: {
                                    exec: {
                                        command: [
                                            "Test string"
                                        ],
                                    },
                                    failureThreshold: 42,
                                    grpc: {
                                        port: 42,
                                        service: "Test string",
                                    },
                                    httpGet: {
                                        host: "Test string",
                                        httpHeaders: [
                                            {
                                                name: "Test string",
                                                value: "Test string",
                                            }
                                        ],
                                        path: "Test string",
                                        port: 42,
                                        scheme: "Test string",
                                    },
                                    initialDelaySeconds: 42,
                                    periodSeconds: 42,
                                    successThreshold: 42,
                                    tcpSocket: {
                                        host: "Test string",
                                        port: 42,
                                    },
                                    timeoutSeconds: 42,
                                },
                                name: "Test string",
                                ports: [
                                    {
                                        containerPort: 42,
                                        name: "Test string",
                                        protocol: "Test string",
                                    }
                                ],
                                readinessProbe: {
                                    exec: {
                                        command: [
                                            "Test string"
                                        ],
                                    },
                                    failureThreshold: 42,
                                    grpc: {
                                        port: 42,
                                        service: "Test string",
                                    },
                                    httpGet: {
                                        host: "Test string",
                                        httpHeaders: [
                                            {
                                                name: "Test string",
                                                value: "Test string",
                                            }
                                        ],
                                        path: "Test string",
                                        port: 42,
                                        scheme: "Test string",
                                    },
                                    initialDelaySeconds: 42,
                                    periodSeconds: 42,
                                    successThreshold: 42,
                                    tcpSocket: {
                                        host: "Test string",
                                        port: 42,
                                    },
                                    timeoutSeconds: 42,
                                },
                                resources: {
                                    limits: {
                                        A: "Test string"
                                    },
                                    requests: {
                                        A: "Test string"
                                    },
                                },
                                securityContext: {
                                    runAsUser: 42,
                                },
                                startupProbe: {
                                    exec: {
                                        command: [
                                            "Test string"
                                        ],
                                    },
                                    failureThreshold: 42,
                                    grpc: {
                                        port: 42,
                                        service: "Test string",
                                    },
                                    httpGet: {
                                        host: "Test string",
                                        httpHeaders: [
                                            {
                                                name: "Test string",
                                                value: "Test string",
                                            }
                                        ],
                                        path: "Test string",
                                        port: 42,
                                        scheme: "Test string",
                                    },
                                    initialDelaySeconds: 42,
                                    periodSeconds: 42,
                                    successThreshold: 42,
                                    tcpSocket: {
                                        host: "Test string",
                                        port: 42,
                                    },
                                    timeoutSeconds: 42,
                                },
                                terminationMessagePath: "Test string",
                                terminationMessagePolicy: "Test string",
                                volumeMounts: [
                                    {
                                        mountPath: "Test string",
                                        name: "Test string",
                                        readOnly: true,
                                        subPath: "Test string",
                                    }
                                ],
                                workingDir: "Test string",
                            }
                        ],
                        enableServiceLinks: true,
                        imagePullSecrets: [
                            {
                                name: "Test string",
                            }
                        ],
                        serviceAccountName: "Test string",
                        timeoutSeconds: 42,
                        volumes: [
                            {
                                configMap: {
                                    defaultMode: 42,
                                    items: [
                                        {
                                            key: "Test string",
                                            mode: 42,
                                            path: "Test string",
                                        }
                                    ],
                                    name: "Test string",
                                    optional: true,
                                },
                                emptyDir: {
                                    medium: "Test string",
                                    sizeLimit: "Test string",
                                },
                                name: "Test string",
                                secret: {
                                    defaultMode: 42,
                                    items: [
                                        {
                                            key: "Test string",
                                            mode: 42,
                                            path: "Test string",
                                        }
                                    ],
                                    optional: true,
                                    secretName: "Test string",
                                },
                            }
                        ],
                    },
                },
                traffic: [
                    {
                        configurationName: "Test string",
                        latestRevision: true,
                        percent: 42,
                        revisionName: "Test string",
                        tag: "Test string",
                        url: "Test string",
                    }
                ],
            },
            status: {
                address: {
                    url: "Test string",
                },
                conditions: [
                    {
                        lastTransitionTime: "Test string",
                        message: "Test string",
                        reason: "Test string",
                        severity: "Test string",
                        status: "Test string",
                        type: "Test string",
                    }
                ],
                latestCreatedRevisionName: "Test string",
                latestReadyRevisionName: "Test string",
                observedGeneration: 42,
                traffic: [
                    {
                        configurationName: "Test string",
                        latestRevision: true,
                        percent: 42,
                        revisionName: "Test string",
                        tag: "Test string",
                        url: "Test string",
                    }
                ],
                url: "Test string",
            },
        });
        /** Deletes the provided service. This will cause the Service to stop serving traffic and will delete all associated Revisions. */
        await gapi.client.run.projects.locations.services.delete({
            apiVersion: "Test string",
            dryRun: "Test string",
            kind: "Test string",
            name: "Test string",
            propagationPolicy: "Test string",
        });
        /** Gets information about a service. */
        await gapi.client.run.projects.locations.services.get({
            name: "Test string",
        });
        /** Gets the IAM Access Control policy currently in effect for the given Cloud Run service. This result does not include any inherited policies. */
        await gapi.client.run.projects.locations.services.getIamPolicy({
            "options.requestedPolicyVersion": 42,
            resource: "Test string",
        });
        /** Lists services for the given project and region. */
        await gapi.client.run.projects.locations.services.list({
            continue: "Test string",
            fieldSelector: "Test string",
            includeUninitialized: true,
            labelSelector: "Test string",
            limit: 42,
            parent: "Test string",
            resourceVersion: "Test string",
            watch: true,
        });
        /**
         * Replaces a service. Only the spec and metadata labels and annotations are modifiable. After the Update request, Cloud Run will work to make the 'status' match the requested 'spec'. May
         * provide metadata.resourceVersion to enforce update from last read for optimistic concurrency control.
         */
        await gapi.client.run.projects.locations.services.replaceService({
            dryRun: "Test string",
            name: "Test string",
        }, {
            apiVersion: "Test string",
            kind: "Test string",
            metadata: {
                annotations: {
                    A: "Test string"
                },
                clusterName: "Test string",
                creationTimestamp: "Test string",
                deletionGracePeriodSeconds: 42,
                deletionTimestamp: "Test string",
                finalizers: [
                    "Test string"
                ],
                generateName: "Test string",
                generation: 42,
                labels: {
                    A: "Test string"
                },
                name: "Test string",
                namespace: "Test string",
                ownerReferences: [
                    {
                        apiVersion: "Test string",
                        blockOwnerDeletion: true,
                        controller: true,
                        kind: "Test string",
                        name: "Test string",
                        uid: "Test string",
                    }
                ],
                resourceVersion: "Test string",
                selfLink: "Test string",
                uid: "Test string",
            },
            spec: {
                template: {
                    metadata: {
                        annotations: {
                            A: "Test string"
                        },
                        clusterName: "Test string",
                        creationTimestamp: "Test string",
                        deletionGracePeriodSeconds: 42,
                        deletionTimestamp: "Test string",
                        finalizers: [
                            "Test string"
                        ],
                        generateName: "Test string",
                        generation: 42,
                        labels: {
                            A: "Test string"
                        },
                        name: "Test string",
                        namespace: "Test string",
                        ownerReferences: [
                            {
                                apiVersion: "Test string",
                                blockOwnerDeletion: true,
                                controller: true,
                                kind: "Test string",
                                name: "Test string",
                                uid: "Test string",
                            }
                        ],
                        resourceVersion: "Test string",
                        selfLink: "Test string",
                        uid: "Test string",
                    },
                    spec: {
                        containerConcurrency: 42,
                        containers: [
                            {
                                args: [
                                    "Test string"
                                ],
                                command: [
                                    "Test string"
                                ],
                                env: [
                                    {
                                        name: "Test string",
                                        value: "Test string",
                                        valueFrom: {
                                            configMapKeyRef: {
                                                key: "Test string",
                                                localObjectReference: {
                                                    name: "Test string",
                                                },
                                                name: "Test string",
                                                optional: true,
                                            },
                                            secretKeyRef: {
                                                key: "Test string",
                                                localObjectReference: {
                                                    name: "Test string",
                                                },
                                                name: "Test string",
                                                optional: true,
                                            },
                                        },
                                    }
                                ],
                                envFrom: [
                                    {
                                        configMapRef: {
                                            localObjectReference: {
                                                name: "Test string",
                                            },
                                            name: "Test string",
                                            optional: true,
                                        },
                                        prefix: "Test string",
                                        secretRef: {
                                            localObjectReference: {
                                                name: "Test string",
                                            },
                                            name: "Test string",
                                            optional: true,
                                        },
                                    }
                                ],
                                image: "Test string",
                                imagePullPolicy: "Test string",
                                livenessProbe: {
                                    exec: {
                                        command: [
                                            "Test string"
                                        ],
                                    },
                                    failureThreshold: 42,
                                    grpc: {
                                        port: 42,
                                        service: "Test string",
                                    },
                                    httpGet: {
                                        host: "Test string",
                                        httpHeaders: [
                                            {
                                                name: "Test string",
                                                value: "Test string",
                                            }
                                        ],
                                        path: "Test string",
                                        port: 42,
                                        scheme: "Test string",
                                    },
                                    initialDelaySeconds: 42,
                                    periodSeconds: 42,
                                    successThreshold: 42,
                                    tcpSocket: {
                                        host: "Test string",
                                        port: 42,
                                    },
                                    timeoutSeconds: 42,
                                },
                                name: "Test string",
                                ports: [
                                    {
                                        containerPort: 42,
                                        name: "Test string",
                                        protocol: "Test string",
                                    }
                                ],
                                readinessProbe: {
                                    exec: {
                                        command: [
                                            "Test string"
                                        ],
                                    },
                                    failureThreshold: 42,
                                    grpc: {
                                        port: 42,
                                        service: "Test string",
                                    },
                                    httpGet: {
                                        host: "Test string",
                                        httpHeaders: [
                                            {
                                                name: "Test string",
                                                value: "Test string",
                                            }
                                        ],
                                        path: "Test string",
                                        port: 42,
                                        scheme: "Test string",
                                    },
                                    initialDelaySeconds: 42,
                                    periodSeconds: 42,
                                    successThreshold: 42,
                                    tcpSocket: {
                                        host: "Test string",
                                        port: 42,
                                    },
                                    timeoutSeconds: 42,
                                },
                                resources: {
                                    limits: {
                                        A: "Test string"
                                    },
                                    requests: {
                                        A: "Test string"
                                    },
                                },
                                securityContext: {
                                    runAsUser: 42,
                                },
                                startupProbe: {
                                    exec: {
                                        command: [
                                            "Test string"
                                        ],
                                    },
                                    failureThreshold: 42,
                                    grpc: {
                                        port: 42,
                                        service: "Test string",
                                    },
                                    httpGet: {
                                        host: "Test string",
                                        httpHeaders: [
                                            {
                                                name: "Test string",
                                                value: "Test string",
                                            }
                                        ],
                                        path: "Test string",
                                        port: 42,
                                        scheme: "Test string",
                                    },
                                    initialDelaySeconds: 42,
                                    periodSeconds: 42,
                                    successThreshold: 42,
                                    tcpSocket: {
                                        host: "Test string",
                                        port: 42,
                                    },
                                    timeoutSeconds: 42,
                                },
                                terminationMessagePath: "Test string",
                                terminationMessagePolicy: "Test string",
                                volumeMounts: [
                                    {
                                        mountPath: "Test string",
                                        name: "Test string",
                                        readOnly: true,
                                        subPath: "Test string",
                                    }
                                ],
                                workingDir: "Test string",
                            }
                        ],
                        enableServiceLinks: true,
                        imagePullSecrets: [
                            {
                                name: "Test string",
                            }
                        ],
                        serviceAccountName: "Test string",
                        timeoutSeconds: 42,
                        volumes: [
                            {
                                configMap: {
                                    defaultMode: 42,
                                    items: [
                                        {
                                            key: "Test string",
                                            mode: 42,
                                            path: "Test string",
                                        }
                                    ],
                                    name: "Test string",
                                    optional: true,
                                },
                                emptyDir: {
                                    medium: "Test string",
                                    sizeLimit: "Test string",
                                },
                                name: "Test string",
                                secret: {
                                    defaultMode: 42,
                                    items: [
                                        {
                                            key: "Test string",
                                            mode: 42,
                                            path: "Test string",
                                        }
                                    ],
                                    optional: true,
                                    secretName: "Test string",
                                },
                            }
                        ],
                    },
                },
                traffic: [
                    {
                        configurationName: "Test string",
                        latestRevision: true,
                        percent: 42,
                        revisionName: "Test string",
                        tag: "Test string",
                        url: "Test string",
                    }
                ],
            },
            status: {
                address: {
                    url: "Test string",
                },
                conditions: [
                    {
                        lastTransitionTime: "Test string",
                        message: "Test string",
                        reason: "Test string",
                        severity: "Test string",
                        status: "Test string",
                        type: "Test string",
                    }
                ],
                latestCreatedRevisionName: "Test string",
                latestReadyRevisionName: "Test string",
                observedGeneration: 42,
                traffic: [
                    {
                        configurationName: "Test string",
                        latestRevision: true,
                        percent: 42,
                        revisionName: "Test string",
                        tag: "Test string",
                        url: "Test string",
                    }
                ],
                url: "Test string",
            },
        });
        /** Sets the IAM Access control policy for the specified Service. Overwrites any existing policy. */
        await gapi.client.run.projects.locations.services.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                auditConfigs: [
                    {
                        auditLogConfigs: [
                            {
                                exemptedMembers: [
                                    "Test string"
                                ],
                                logType: "Test string",
                            }
                        ],
                        service: "Test string",
                    }
                ],
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"
                        ],
                        role: "Test string",
                    }
                ],
                etag: "Test string",
                version: 42,
            },
            updateMask: "Test string",
        });
        /** Returns permissions that a caller has on the specified Project. There are no permissions required for making this API call. */
        await gapi.client.run.projects.locations.services.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"
            ],
        });
    }
});
