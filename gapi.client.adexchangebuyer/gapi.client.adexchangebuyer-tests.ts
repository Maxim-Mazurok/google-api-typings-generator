/* This is stub file for gapi.client.adexchangebuyer definition tests */
/* IMPORTANT.
* This file was automatically generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
* In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
**/
gapi.load('client', () => {
    /** now we can use gapi.client */
    gapi.client.load('adexchangebuyer', 'v1.4', () => {
        /** now we can use gapi.client.adexchangebuyer */

        /** don't forget to authenticate your client before sending any request to resources: */
        /** declare client_id registered in Google Developers Console */
        const client_id = '<<PUT YOUR CLIENT ID HERE>>';
        const scope = [
            /** Manage your Ad Exchange buyer account configuration */
            'https://www.googleapis.com/auth/adexchange.buyer',
        ];
        const immediate = false;
        gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
            if (authResult && !authResult.error) {
                /** handle successful authorization */
                run();
            } else {
                /** handle authorization error */
            }
        });
    });

    async function run() {
        /** Gets one account by ID. */
        await gapi.client.adexchangebuyer.accounts.get({
            id: 42,
        });
        /** Retrieves the authenticated user's list of accounts. */
        await gapi.client.adexchangebuyer.accounts.list();
        /** Updates an existing account. This method supports patch semantics. */
        await gapi.client.adexchangebuyer.accounts.patch({
            confirmUnsafeAccountChange: true,
            id: 42,
        }, {
            applyPretargetingToNonGuaranteedDeals: true,
            bidderLocation: [
                {
                    bidProtocol: "Test string",
                    maximumQps: 42,
                    region: "Test string",
                    url: "Test string",
                }            ],
            cookieMatchingNid: "Test string",
            cookieMatchingUrl: "Test string",
            id: 42,
            kind: "Test string",
            maximumActiveCreatives: 42,
            maximumTotalQps: 42,
            numberActiveCreatives: 42,
        });
        /** Updates an existing account. */
        await gapi.client.adexchangebuyer.accounts.update({
            confirmUnsafeAccountChange: true,
            id: 42,
        }, {
            applyPretargetingToNonGuaranteedDeals: true,
            bidderLocation: [
                {
                    bidProtocol: "Test string",
                    maximumQps: 42,
                    region: "Test string",
                    url: "Test string",
                }            ],
            cookieMatchingNid: "Test string",
            cookieMatchingUrl: "Test string",
            id: 42,
            kind: "Test string",
            maximumActiveCreatives: 42,
            maximumTotalQps: 42,
            numberActiveCreatives: 42,
        });
        /** Returns the billing information for one account specified by account ID. */
        await gapi.client.adexchangebuyer.billingInfo.get({
            accountId: 42,
        });
        /** Retrieves a list of billing information for all accounts of the authenticated user. */
        await gapi.client.adexchangebuyer.billingInfo.list();
        /** Returns the budget information for the adgroup specified by the accountId and billingId. */
        await gapi.client.adexchangebuyer.budget.get({
            accountId: "Test string",
            billingId: "Test string",
        });
        /** Updates the budget amount for the budget of the adgroup specified by the accountId and billingId, with the budget amount in the request. This method supports patch semantics. */
        await gapi.client.adexchangebuyer.budget.patch({
            accountId: "Test string",
            billingId: "Test string",
        }, {
            accountId: "Test string",
            billingId: "Test string",
            budgetAmount: "Test string",
            currencyCode: "Test string",
            id: "Test string",
            kind: "Test string",
        });
        /** Updates the budget amount for the budget of the adgroup specified by the accountId and billingId, with the budget amount in the request. */
        await gapi.client.adexchangebuyer.budget.update({
            accountId: "Test string",
            billingId: "Test string",
        }, {
            accountId: "Test string",
            billingId: "Test string",
            budgetAmount: "Test string",
            currencyCode: "Test string",
            id: "Test string",
            kind: "Test string",
        });
        /** Add a deal id association for the creative. */
        await gapi.client.adexchangebuyer.creatives.addDeal({
            accountId: 42,
            buyerCreativeId: "Test string",
            dealId: "Test string",
        });
        /** Gets the status for a single creative. A creative will be available 30-40 minutes after submission. */
        await gapi.client.adexchangebuyer.creatives.get({
            accountId: 42,
            buyerCreativeId: "Test string",
        });
        /** Submit a new creative. */
        await gapi.client.adexchangebuyer.creatives.insert({} , {
            accountId: 42,
            adChoicesDestinationUrl: "Test string",
            adTechnologyProviders: {
                detectedProviderIds: [
                    "Test string"                ],
                hasUnidentifiedProvider: true,
            },
            advertiserId: [
                "Test string"            ],
            advertiserName: "Test string",
            agencyId: "Test string",
            apiUploadTimestamp: "Test string",
            attribute: [
                42            ],
            buyerCreativeId: "Test string",
            clickThroughUrl: [
                "Test string"            ],
            corrections: [
                {
                    contexts: [
                        {
                            auctionType: [
                                "Test string"                            ],
                            contextType: "Test string",
                            geoCriteriaId: [
                                42                            ],
                            platform: [
                                "Test string"                            ],
                        }                    ],
                    details: [
                        "Test string"                    ],
                    reason: "Test string",
                }            ],
            creativeStatusIdentityType: "Test string",
            dealsStatus: "Test string",
            detectedDomains: [
                "Test string"            ],
            filteringReasons: {
                date: "Test string",
                reasons: [
                    {
                        filteringCount: "Test string",
                        filteringStatus: 42,
                    }                ],
            },
            height: 42,
            HTMLSnippet: "Test string",
            impressionTrackingUrl: [
                "Test string"            ],
            kind: "Test string",
            languages: [
                "Test string"            ],
            nativeAd: {
                advertiser: "Test string",
                appIcon: {
                    height: 42,
                    url: "Test string",
                    width: 42,
                },
                body: "Test string",
                callToAction: "Test string",
                clickLinkUrl: "Test string",
                clickTrackingUrl: "Test string",
                headline: "Test string",
                image: {
                    height: 42,
                    url: "Test string",
                    width: 42,
                },
                impressionTrackingUrl: [
                    "Test string"                ],
                logo: {
                    height: 42,
                    url: "Test string",
                    width: 42,
                },
                price: "Test string",
                starRating: 42,
                videoURL: "Test string",
            },
            openAuctionStatus: "Test string",
            productCategories: [
                42            ],
            restrictedCategories: [
                42            ],
            sensitiveCategories: [
                42            ],
            servingRestrictions: [
                {
                    contexts: [
                        {
                            auctionType: [
                                "Test string"                            ],
                            contextType: "Test string",
                            geoCriteriaId: [
                                42                            ],
                            platform: [
                                "Test string"                            ],
                        }                    ],
                    disapprovalReasons: [
                        {
                            details: [
                                "Test string"                            ],
                            reason: "Test string",
                        }                    ],
                    reason: "Test string",
                }            ],
            vendorType: [
                42            ],
            version: 42,
            videoURL: "Test string",
            videoVastXML: "Test string",
            width: 42,
        });
        /** Retrieves a list of the authenticated user's active creatives. A creative will be available 30-40 minutes after submission. */
        await gapi.client.adexchangebuyer.creatives.list({
            accountId: 42,
            buyerCreativeId: "Test string",
            dealsStatusFilter: "Test string",
            maxResults: 42,
            openAuctionStatusFilter: "Test string",
            pageToken: "Test string",
        });
        /** Lists the external deal ids associated with the creative. */
        await gapi.client.adexchangebuyer.creatives.listDeals({
            accountId: 42,
            buyerCreativeId: "Test string",
        });
        /** Remove a deal id associated with the creative. */
        await gapi.client.adexchangebuyer.creatives.removeDeal({
            accountId: 42,
            buyerCreativeId: "Test string",
            dealId: "Test string",
        });
        /** Delete the specified deals from the proposal */
        await gapi.client.adexchangebuyer.marketplacedeals.delete({
            proposalId: "Test string",
        }, {
            dealIds: [
                "Test string"            ],
            proposalRevisionNumber: "Test string",
            updateAction: "Test string",
        });
        /** Add new deals for the specified proposal */
        await gapi.client.adexchangebuyer.marketplacedeals.insert({
            proposalId: "Test string",
        }, {
            deals: [
                {
                    buyerPrivateData: {
                        referenceId: "Test string",
                        referencePayload: "Test string",
                    },
                    creationTimeMs: "Test string",
                    creativePreApprovalPolicy: "Test string",
                    creativeSafeFrameCompatibility: "Test string",
                    dealId: "Test string",
                    dealServingMetadata: {
                        alcoholAdsAllowed: true,
                        dealPauseStatus: {
                            buyerPauseReason: "Test string",
                            firstPausedBy: "Test string",
                            hasBuyerPaused: true,
                            hasSellerPaused: true,
                            sellerPauseReason: "Test string",
                        },
                    },
                    deliveryControl: {
                        creativeBlockingLevel: "Test string",
                        deliveryRateType: "Test string",
                        frequencyCaps: [
                            {
                                maxImpressions: 42,
                                numTimeUnits: 42,
                                timeUnitType: "Test string",
                            }                        ],
                    },
                    externalDealId: "Test string",
                    flightEndTimeMs: "Test string",
                    flightStartTimeMs: "Test string",
                    inventoryDescription: "Test string",
                    isRfpTemplate: true,
                    isSetupComplete: true,
                    kind: "Test string",
                    lastUpdateTimeMs: "Test string",
                    name: "Test string",
                    productId: "Test string",
                    productRevisionNumber: "Test string",
                    programmaticCreativeSource: "Test string",
                    proposalId: "Test string",
                    sellerContacts: [
                        {
                            email: "Test string",
                            name: "Test string",
                        }                    ],
                    sharedTargetings: [
                        {
                            exclusions: [
                                {
                                    creativeSizeValue: {
                                        allowedFormats: [
                                            "Test string"                                        ],
                                        companionSizes: [
                                            {
                                                height: 42,
                                                width: 42,
                                            }                                        ],
                                        creativeSizeType: "Test string",
                                        nativeTemplate: "Test string",
                                        size: {
                                            height: 42,
                                            width: 42,
                                        },
                                        skippableAdType: "Test string",
                                    },
                                    dayPartTargetingValue: {
                                        dayParts: [
                                            {
                                                dayOfWeek: "Test string",
                                                endHour: 42,
                                                endMinute: 42,
                                                startHour: 42,
                                                startMinute: 42,
                                            }                                        ],
                                        timeZoneType: "Test string",
                                    },
                                    demogAgeCriteriaValue: {
                                        demogAgeCriteriaIds: [
                                            "Test string"                                        ],
                                    },
                                    demogGenderCriteriaValue: {
                                        demogGenderCriteriaIds: [
                                            "Test string"                                        ],
                                    },
                                    longValue: "Test string",
                                    stringValue: "Test string",
                                }                            ],
                            inclusions: [
                                {
                                    creativeSizeValue: {
                                        allowedFormats: [
                                            "Test string"                                        ],
                                        companionSizes: [
                                            {
                                                height: 42,
                                                width: 42,
                                            }                                        ],
                                        creativeSizeType: "Test string",
                                        nativeTemplate: "Test string",
                                        size: {
                                            height: 42,
                                            width: 42,
                                        },
                                        skippableAdType: "Test string",
                                    },
                                    dayPartTargetingValue: {
                                        dayParts: [
                                            {
                                                dayOfWeek: "Test string",
                                                endHour: 42,
                                                endMinute: 42,
                                                startHour: 42,
                                                startMinute: 42,
                                            }                                        ],
                                        timeZoneType: "Test string",
                                    },
                                    demogAgeCriteriaValue: {
                                        demogAgeCriteriaIds: [
                                            "Test string"                                        ],
                                    },
                                    demogGenderCriteriaValue: {
                                        demogGenderCriteriaIds: [
                                            "Test string"                                        ],
                                    },
                                    longValue: "Test string",
                                    stringValue: "Test string",
                                }                            ],
                            key: "Test string",
                        }                    ],
                    syndicationProduct: "Test string",
                    terms: {
                        brandingType: "Test string",
                        crossListedExternalDealIdType: "Test string",
                        description: "Test string",
                        estimatedGrossSpend: {
                            amountMicros: 42,
                            currencyCode: "Test string",
                            expectedCpmMicros: 42,
                            pricingType: "Test string",
                        },
                        estimatedImpressionsPerDay: "Test string",
                        guaranteedFixedPriceTerms: {
                            billingInfo: {
                                currencyConversionTimeMs: "Test string",
                                dfpLineItemId: "Test string",
                                originalContractedQuantity: "Test string",
                                price: {
                                    amountMicros: 42,
                                    currencyCode: "Test string",
                                    expectedCpmMicros: 42,
                                    pricingType: "Test string",
                                },
                            },
                            fixedPrices: [
                                {
                                    auctionTier: "Test string",
                                    billedBuyer: {
                                        accountId: "Test string",
                                    },
                                    buyer: {
                                        accountId: "Test string",
                                    },
                                    price: {
                                        amountMicros: 42,
                                        currencyCode: "Test string",
                                        expectedCpmMicros: 42,
                                        pricingType: "Test string",
                                    },
                                }                            ],
                            guaranteedImpressions: "Test string",
                            guaranteedLooks: "Test string",
                            minimumDailyLooks: "Test string",
                        },
                        nonGuaranteedAuctionTerms: {
                            autoOptimizePrivateAuction: true,
                            reservePricePerBuyers: [
                                {
                                    auctionTier: "Test string",
                                    billedBuyer: {
                                        accountId: "Test string",
                                    },
                                    buyer: {
                                        accountId: "Test string",
                                    },
                                    price: {
                                        amountMicros: 42,
                                        currencyCode: "Test string",
                                        expectedCpmMicros: 42,
                                        pricingType: "Test string",
                                    },
                                }                            ],
                        },
                        nonGuaranteedFixedPriceTerms: {
                            fixedPrices: [
                                {
                                    auctionTier: "Test string",
                                    billedBuyer: {
                                        accountId: "Test string",
                                    },
                                    buyer: {
                                        accountId: "Test string",
                                    },
                                    price: {
                                        amountMicros: 42,
                                        currencyCode: "Test string",
                                        expectedCpmMicros: 42,
                                        pricingType: "Test string",
                                    },
                                }                            ],
                        },
                        rubiconNonGuaranteedTerms: {
                            priorityPrice: {
                                amountMicros: 42,
                                currencyCode: "Test string",
                                expectedCpmMicros: 42,
                                pricingType: "Test string",
                            },
                            standardPrice: {
                                amountMicros: 42,
                                currencyCode: "Test string",
                                expectedCpmMicros: 42,
                                pricingType: "Test string",
                            },
                        },
                        sellerTimeZone: "Test string",
                    },
                    webPropertyCode: "Test string",
                }            ],
            proposalRevisionNumber: "Test string",
            updateAction: "Test string",
        });
        /** List all the deals for a given proposal */
        await gapi.client.adexchangebuyer.marketplacedeals.list({
            pqlQuery: "Test string",
            proposalId: "Test string",
        });
        /** Replaces all the deals in the proposal with the passed in deals */
        await gapi.client.adexchangebuyer.marketplacedeals.update({
            proposalId: "Test string",
        }, {
            deals: [
                {
                    buyerPrivateData: {
                        referenceId: "Test string",
                        referencePayload: "Test string",
                    },
                    creationTimeMs: "Test string",
                    creativePreApprovalPolicy: "Test string",
                    creativeSafeFrameCompatibility: "Test string",
                    dealId: "Test string",
                    dealServingMetadata: {
                        alcoholAdsAllowed: true,
                        dealPauseStatus: {
                            buyerPauseReason: "Test string",
                            firstPausedBy: "Test string",
                            hasBuyerPaused: true,
                            hasSellerPaused: true,
                            sellerPauseReason: "Test string",
                        },
                    },
                    deliveryControl: {
                        creativeBlockingLevel: "Test string",
                        deliveryRateType: "Test string",
                        frequencyCaps: [
                            {
                                maxImpressions: 42,
                                numTimeUnits: 42,
                                timeUnitType: "Test string",
                            }                        ],
                    },
                    externalDealId: "Test string",
                    flightEndTimeMs: "Test string",
                    flightStartTimeMs: "Test string",
                    inventoryDescription: "Test string",
                    isRfpTemplate: true,
                    isSetupComplete: true,
                    kind: "Test string",
                    lastUpdateTimeMs: "Test string",
                    name: "Test string",
                    productId: "Test string",
                    productRevisionNumber: "Test string",
                    programmaticCreativeSource: "Test string",
                    proposalId: "Test string",
                    sellerContacts: [
                        {
                            email: "Test string",
                            name: "Test string",
                        }                    ],
                    sharedTargetings: [
                        {
                            exclusions: [
                                {
                                    creativeSizeValue: {
                                        allowedFormats: [
                                            "Test string"                                        ],
                                        companionSizes: [
                                            {
                                                height: 42,
                                                width: 42,
                                            }                                        ],
                                        creativeSizeType: "Test string",
                                        nativeTemplate: "Test string",
                                        size: {
                                            height: 42,
                                            width: 42,
                                        },
                                        skippableAdType: "Test string",
                                    },
                                    dayPartTargetingValue: {
                                        dayParts: [
                                            {
                                                dayOfWeek: "Test string",
                                                endHour: 42,
                                                endMinute: 42,
                                                startHour: 42,
                                                startMinute: 42,
                                            }                                        ],
                                        timeZoneType: "Test string",
                                    },
                                    demogAgeCriteriaValue: {
                                        demogAgeCriteriaIds: [
                                            "Test string"                                        ],
                                    },
                                    demogGenderCriteriaValue: {
                                        demogGenderCriteriaIds: [
                                            "Test string"                                        ],
                                    },
                                    longValue: "Test string",
                                    stringValue: "Test string",
                                }                            ],
                            inclusions: [
                                {
                                    creativeSizeValue: {
                                        allowedFormats: [
                                            "Test string"                                        ],
                                        companionSizes: [
                                            {
                                                height: 42,
                                                width: 42,
                                            }                                        ],
                                        creativeSizeType: "Test string",
                                        nativeTemplate: "Test string",
                                        size: {
                                            height: 42,
                                            width: 42,
                                        },
                                        skippableAdType: "Test string",
                                    },
                                    dayPartTargetingValue: {
                                        dayParts: [
                                            {
                                                dayOfWeek: "Test string",
                                                endHour: 42,
                                                endMinute: 42,
                                                startHour: 42,
                                                startMinute: 42,
                                            }                                        ],
                                        timeZoneType: "Test string",
                                    },
                                    demogAgeCriteriaValue: {
                                        demogAgeCriteriaIds: [
                                            "Test string"                                        ],
                                    },
                                    demogGenderCriteriaValue: {
                                        demogGenderCriteriaIds: [
                                            "Test string"                                        ],
                                    },
                                    longValue: "Test string",
                                    stringValue: "Test string",
                                }                            ],
                            key: "Test string",
                        }                    ],
                    syndicationProduct: "Test string",
                    terms: {
                        brandingType: "Test string",
                        crossListedExternalDealIdType: "Test string",
                        description: "Test string",
                        estimatedGrossSpend: {
                            amountMicros: 42,
                            currencyCode: "Test string",
                            expectedCpmMicros: 42,
                            pricingType: "Test string",
                        },
                        estimatedImpressionsPerDay: "Test string",
                        guaranteedFixedPriceTerms: {
                            billingInfo: {
                                currencyConversionTimeMs: "Test string",
                                dfpLineItemId: "Test string",
                                originalContractedQuantity: "Test string",
                                price: {
                                    amountMicros: 42,
                                    currencyCode: "Test string",
                                    expectedCpmMicros: 42,
                                    pricingType: "Test string",
                                },
                            },
                            fixedPrices: [
                                {
                                    auctionTier: "Test string",
                                    billedBuyer: {
                                        accountId: "Test string",
                                    },
                                    buyer: {
                                        accountId: "Test string",
                                    },
                                    price: {
                                        amountMicros: 42,
                                        currencyCode: "Test string",
                                        expectedCpmMicros: 42,
                                        pricingType: "Test string",
                                    },
                                }                            ],
                            guaranteedImpressions: "Test string",
                            guaranteedLooks: "Test string",
                            minimumDailyLooks: "Test string",
                        },
                        nonGuaranteedAuctionTerms: {
                            autoOptimizePrivateAuction: true,
                            reservePricePerBuyers: [
                                {
                                    auctionTier: "Test string",
                                    billedBuyer: {
                                        accountId: "Test string",
                                    },
                                    buyer: {
                                        accountId: "Test string",
                                    },
                                    price: {
                                        amountMicros: 42,
                                        currencyCode: "Test string",
                                        expectedCpmMicros: 42,
                                        pricingType: "Test string",
                                    },
                                }                            ],
                        },
                        nonGuaranteedFixedPriceTerms: {
                            fixedPrices: [
                                {
                                    auctionTier: "Test string",
                                    billedBuyer: {
                                        accountId: "Test string",
                                    },
                                    buyer: {
                                        accountId: "Test string",
                                    },
                                    price: {
                                        amountMicros: 42,
                                        currencyCode: "Test string",
                                        expectedCpmMicros: 42,
                                        pricingType: "Test string",
                                    },
                                }                            ],
                        },
                        rubiconNonGuaranteedTerms: {
                            priorityPrice: {
                                amountMicros: 42,
                                currencyCode: "Test string",
                                expectedCpmMicros: 42,
                                pricingType: "Test string",
                            },
                            standardPrice: {
                                amountMicros: 42,
                                currencyCode: "Test string",
                                expectedCpmMicros: 42,
                                pricingType: "Test string",
                            },
                        },
                        sellerTimeZone: "Test string",
                    },
                    webPropertyCode: "Test string",
                }            ],
            proposal: {
                billedBuyer: {
                    accountId: "Test string",
                },
                buyer: {
                    accountId: "Test string",
                },
                buyerContacts: [
                    {
                        email: "Test string",
                        name: "Test string",
                    }                ],
                buyerPrivateData: {
                    referenceId: "Test string",
                    referencePayload: "Test string",
                },
                dbmAdvertiserIds: [
                    "Test string"                ],
                hasBuyerSignedOff: true,
                hasSellerSignedOff: true,
                inventorySource: "Test string",
                isRenegotiating: true,
                isSetupComplete: true,
                kind: "Test string",
                labels: [
                    {
                        accountId: "Test string",
                        createTimeMs: "Test string",
                        deprecatedMarketplaceDealParty: {
                            buyer: {
                                accountId: "Test string",
                            },
                            seller: {
                                accountId: "Test string",
                                subAccountId: "Test string",
                            },
                        },
                        label: "Test string",
                    }                ],
                lastUpdaterOrCommentorRole: "Test string",
                name: "Test string",
                negotiationId: "Test string",
                originatorRole: "Test string",
                privateAuctionId: "Test string",
                proposalId: "Test string",
                proposalState: "Test string",
                revisionNumber: "Test string",
                revisionTimeMs: "Test string",
                seller: {
                    accountId: "Test string",
                    subAccountId: "Test string",
                },
                sellerContacts: [
                    {
                        email: "Test string",
                        name: "Test string",
                    }                ],
            },
            proposalRevisionNumber: "Test string",
            updateAction: "Test string",
        });
        /** Add notes to the proposal */
        await gapi.client.adexchangebuyer.marketplacenotes.insert({
            proposalId: "Test string",
        }, {
            notes: [
                {
                    creatorRole: "Test string",
                    dealId: "Test string",
                    kind: "Test string",
                    note: "Test string",
                    noteId: "Test string",
                    proposalId: "Test string",
                    proposalRevisionNumber: "Test string",
                    timestampMs: "Test string",
                }            ],
        });
        /** Get all the notes associated with a proposal */
        await gapi.client.adexchangebuyer.marketplacenotes.list({
            pqlQuery: "Test string",
            proposalId: "Test string",
        });
        /** Update a given private auction proposal */
        await gapi.client.adexchangebuyer.marketplaceprivateauction.updateproposal({
            privateAuctionId: "Test string",
        }, {
            externalDealId: "Test string",
            note: {
                creatorRole: "Test string",
                dealId: "Test string",
                kind: "Test string",
                note: "Test string",
                noteId: "Test string",
                proposalId: "Test string",
                proposalRevisionNumber: "Test string",
                timestampMs: "Test string",
            },
            proposalRevisionNumber: "Test string",
            updateAction: "Test string",
        });
        /** Retrieves the authenticated user's list of performance metrics. */
        await gapi.client.adexchangebuyer.performanceReport.list({
            accountId: "Test string",
            endDateTime: "Test string",
            maxResults: 42,
            pageToken: "Test string",
            startDateTime: "Test string",
        });
        /** Deletes an existing pretargeting config. */
        await gapi.client.adexchangebuyer.pretargetingConfig.delete({
            accountId: "Test string",
            configId: "Test string",
        });
        /** Gets a specific pretargeting configuration */
        await gapi.client.adexchangebuyer.pretargetingConfig.get({
            accountId: "Test string",
            configId: "Test string",
        });
        /** Inserts a new pretargeting configuration. */
        await gapi.client.adexchangebuyer.pretargetingConfig.insert({
            accountId: "Test string",
        }, {
            billingId: "Test string",
            configId: "Test string",
            configName: "Test string",
            creativeType: [
                "Test string"            ],
            dimensions: [
                {
                    height: "Test string",
                    width: "Test string",
                }            ],
            excludedContentLabels: [
                "Test string"            ],
            excludedGeoCriteriaIds: [
                "Test string"            ],
            excludedPlacements: [
                {
                    token: "Test string",
                    type: "Test string",
                }            ],
            excludedUserLists: [
                "Test string"            ],
            excludedVerticals: [
                "Test string"            ],
            geoCriteriaIds: [
                "Test string"            ],
            isActive: true,
            kind: "Test string",
            languages: [
                "Test string"            ],
            maximumQps: "Test string",
            minimumViewabilityDecile: 42,
            mobileCarriers: [
                "Test string"            ],
            mobileDevices: [
                "Test string"            ],
            mobileOperatingSystemVersions: [
                "Test string"            ],
            placements: [
                {
                    token: "Test string",
                    type: "Test string",
                }            ],
            platforms: [
                "Test string"            ],
            supportedCreativeAttributes: [
                "Test string"            ],
            userIdentifierDataRequired: [
                "Test string"            ],
            userLists: [
                "Test string"            ],
            vendorTypes: [
                "Test string"            ],
            verticals: [
                "Test string"            ],
            videoPlayerSizes: [
                {
                    aspectRatio: "Test string",
                    minHeight: "Test string",
                    minWidth: "Test string",
                }            ],
        });
        /** Retrieves a list of the authenticated user's pretargeting configurations. */
        await gapi.client.adexchangebuyer.pretargetingConfig.list({
            accountId: "Test string",
        });
        /** Updates an existing pretargeting config. This method supports patch semantics. */
        await gapi.client.adexchangebuyer.pretargetingConfig.patch({
            accountId: "Test string",
            configId: "Test string",
        }, {
            billingId: "Test string",
            configId: "Test string",
            configName: "Test string",
            creativeType: [
                "Test string"            ],
            dimensions: [
                {
                    height: "Test string",
                    width: "Test string",
                }            ],
            excludedContentLabels: [
                "Test string"            ],
            excludedGeoCriteriaIds: [
                "Test string"            ],
            excludedPlacements: [
                {
                    token: "Test string",
                    type: "Test string",
                }            ],
            excludedUserLists: [
                "Test string"            ],
            excludedVerticals: [
                "Test string"            ],
            geoCriteriaIds: [
                "Test string"            ],
            isActive: true,
            kind: "Test string",
            languages: [
                "Test string"            ],
            maximumQps: "Test string",
            minimumViewabilityDecile: 42,
            mobileCarriers: [
                "Test string"            ],
            mobileDevices: [
                "Test string"            ],
            mobileOperatingSystemVersions: [
                "Test string"            ],
            placements: [
                {
                    token: "Test string",
                    type: "Test string",
                }            ],
            platforms: [
                "Test string"            ],
            supportedCreativeAttributes: [
                "Test string"            ],
            userIdentifierDataRequired: [
                "Test string"            ],
            userLists: [
                "Test string"            ],
            vendorTypes: [
                "Test string"            ],
            verticals: [
                "Test string"            ],
            videoPlayerSizes: [
                {
                    aspectRatio: "Test string",
                    minHeight: "Test string",
                    minWidth: "Test string",
                }            ],
        });
        /** Updates an existing pretargeting config. */
        await gapi.client.adexchangebuyer.pretargetingConfig.update({
            accountId: "Test string",
            configId: "Test string",
        }, {
            billingId: "Test string",
            configId: "Test string",
            configName: "Test string",
            creativeType: [
                "Test string"            ],
            dimensions: [
                {
                    height: "Test string",
                    width: "Test string",
                }            ],
            excludedContentLabels: [
                "Test string"            ],
            excludedGeoCriteriaIds: [
                "Test string"            ],
            excludedPlacements: [
                {
                    token: "Test string",
                    type: "Test string",
                }            ],
            excludedUserLists: [
                "Test string"            ],
            excludedVerticals: [
                "Test string"            ],
            geoCriteriaIds: [
                "Test string"            ],
            isActive: true,
            kind: "Test string",
            languages: [
                "Test string"            ],
            maximumQps: "Test string",
            minimumViewabilityDecile: 42,
            mobileCarriers: [
                "Test string"            ],
            mobileDevices: [
                "Test string"            ],
            mobileOperatingSystemVersions: [
                "Test string"            ],
            placements: [
                {
                    token: "Test string",
                    type: "Test string",
                }            ],
            platforms: [
                "Test string"            ],
            supportedCreativeAttributes: [
                "Test string"            ],
            userIdentifierDataRequired: [
                "Test string"            ],
            userLists: [
                "Test string"            ],
            vendorTypes: [
                "Test string"            ],
            verticals: [
                "Test string"            ],
            videoPlayerSizes: [
                {
                    aspectRatio: "Test string",
                    minHeight: "Test string",
                    minWidth: "Test string",
                }            ],
        });
        /** Gets the requested product by id. */
        await gapi.client.adexchangebuyer.products.get({
            productId: "Test string",
        });
        /** Gets the requested product. */
        await gapi.client.adexchangebuyer.products.search({
            pqlQuery: "Test string",
        });
        /** Get a proposal given its id */
        await gapi.client.adexchangebuyer.proposals.get({
            proposalId: "Test string",
        });
        /** Create the given list of proposals */
        await gapi.client.adexchangebuyer.proposals.insert({} , {
            proposals: [
                {
                    billedBuyer: {
                        accountId: "Test string",
                    },
                    buyer: {
                        accountId: "Test string",
                    },
                    buyerContacts: [
                        {
                            email: "Test string",
                            name: "Test string",
                        }                    ],
                    buyerPrivateData: {
                        referenceId: "Test string",
                        referencePayload: "Test string",
                    },
                    dbmAdvertiserIds: [
                        "Test string"                    ],
                    hasBuyerSignedOff: true,
                    hasSellerSignedOff: true,
                    inventorySource: "Test string",
                    isRenegotiating: true,
                    isSetupComplete: true,
                    kind: "Test string",
                    labels: [
                        {
                            accountId: "Test string",
                            createTimeMs: "Test string",
                            deprecatedMarketplaceDealParty: {
                                buyer: {
                                    accountId: "Test string",
                                },
                                seller: {
                                    accountId: "Test string",
                                    subAccountId: "Test string",
                                },
                            },
                            label: "Test string",
                        }                    ],
                    lastUpdaterOrCommentorRole: "Test string",
                    name: "Test string",
                    negotiationId: "Test string",
                    originatorRole: "Test string",
                    privateAuctionId: "Test string",
                    proposalId: "Test string",
                    proposalState: "Test string",
                    revisionNumber: "Test string",
                    revisionTimeMs: "Test string",
                    seller: {
                        accountId: "Test string",
                        subAccountId: "Test string",
                    },
                    sellerContacts: [
                        {
                            email: "Test string",
                            name: "Test string",
                        }                    ],
                }            ],
            webPropertyCode: "Test string",
        });
        /** Update the given proposal. This method supports patch semantics. */
        await gapi.client.adexchangebuyer.proposals.patch({
            proposalId: "Test string",
            revisionNumber: "Test string",
            updateAction: "Test string",
        }, {
            billedBuyer: {
                accountId: "Test string",
            },
            buyer: {
                accountId: "Test string",
            },
            buyerContacts: [
                {
                    email: "Test string",
                    name: "Test string",
                }            ],
            buyerPrivateData: {
                referenceId: "Test string",
                referencePayload: "Test string",
            },
            dbmAdvertiserIds: [
                "Test string"            ],
            hasBuyerSignedOff: true,
            hasSellerSignedOff: true,
            inventorySource: "Test string",
            isRenegotiating: true,
            isSetupComplete: true,
            kind: "Test string",
            labels: [
                {
                    accountId: "Test string",
                    createTimeMs: "Test string",
                    deprecatedMarketplaceDealParty: {
                        buyer: {
                            accountId: "Test string",
                        },
                        seller: {
                            accountId: "Test string",
                            subAccountId: "Test string",
                        },
                    },
                    label: "Test string",
                }            ],
            lastUpdaterOrCommentorRole: "Test string",
            name: "Test string",
            negotiationId: "Test string",
            originatorRole: "Test string",
            privateAuctionId: "Test string",
            proposalId: "Test string",
            proposalState: "Test string",
            revisionNumber: "Test string",
            revisionTimeMs: "Test string",
            seller: {
                accountId: "Test string",
                subAccountId: "Test string",
            },
            sellerContacts: [
                {
                    email: "Test string",
                    name: "Test string",
                }            ],
        });
        /** Search for proposals using pql query */
        await gapi.client.adexchangebuyer.proposals.search({
            pqlQuery: "Test string",
        });
        /** Update the given proposal to indicate that setup has been completed. */
        await gapi.client.adexchangebuyer.proposals.setupcomplete({
            proposalId: "Test string",
        });
        /** Update the given proposal */
        await gapi.client.adexchangebuyer.proposals.update({
            proposalId: "Test string",
            revisionNumber: "Test string",
            updateAction: "Test string",
        }, {
            billedBuyer: {
                accountId: "Test string",
            },
            buyer: {
                accountId: "Test string",
            },
            buyerContacts: [
                {
                    email: "Test string",
                    name: "Test string",
                }            ],
            buyerPrivateData: {
                referenceId: "Test string",
                referencePayload: "Test string",
            },
            dbmAdvertiserIds: [
                "Test string"            ],
            hasBuyerSignedOff: true,
            hasSellerSignedOff: true,
            inventorySource: "Test string",
            isRenegotiating: true,
            isSetupComplete: true,
            kind: "Test string",
            labels: [
                {
                    accountId: "Test string",
                    createTimeMs: "Test string",
                    deprecatedMarketplaceDealParty: {
                        buyer: {
                            accountId: "Test string",
                        },
                        seller: {
                            accountId: "Test string",
                            subAccountId: "Test string",
                        },
                    },
                    label: "Test string",
                }            ],
            lastUpdaterOrCommentorRole: "Test string",
            name: "Test string",
            negotiationId: "Test string",
            originatorRole: "Test string",
            privateAuctionId: "Test string",
            proposalId: "Test string",
            proposalState: "Test string",
            revisionNumber: "Test string",
            revisionTimeMs: "Test string",
            seller: {
                accountId: "Test string",
                subAccountId: "Test string",
            },
            sellerContacts: [
                {
                    email: "Test string",
                    name: "Test string",
                }            ],
        });
        /** Gets the requested publisher profile(s) by publisher accountId. */
        await gapi.client.adexchangebuyer.pubprofiles.list({
            accountId: 42,
        });
    }
});
