/* This is stub file for gapi.client.firebaseapphosting-v1beta definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20250515

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://firebaseapphosting.googleapis.com/$discovery/rest?version=v1beta',
  );
  /** now we can use gapi.client.firebaseapphosting */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
    'https://www.googleapis.com/auth/cloud-platform',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Gets information about a location. */
    await gapi.client.firebaseapphosting.projects.locations.get({
      name: 'Test string',
    });
    /** Lists information about the supported locations for this service. */
    await gapi.client.firebaseapphosting.projects.locations.list({
      extraLocationTypes: 'Test string',
      filter: 'Test string',
      name: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Creates a new backend in a given project and location. */
    await gapi.client.firebaseapphosting.projects.locations.backends.create(
      {
        backendId: 'Test string',
        parent: 'Test string',
        requestId: 'Test string',
        validateOnly: true,
      },
      {
        annotations: {
          A: 'Test string',
        },
        appId: 'Test string',
        codebase: {
          repository: 'Test string',
          rootDirectory: 'Test string',
        },
        createTime: 'Test string',
        deleteTime: 'Test string',
        displayName: 'Test string',
        environment: 'Test string',
        etag: 'Test string',
        labels: {
          A: 'Test string',
        },
        managedResources: [
          {
            runService: {
              service: 'Test string',
            },
          },
        ],
        mode: 'Test string',
        name: 'Test string',
        reconciling: true,
        serviceAccount: 'Test string',
        servingLocality: 'Test string',
        uid: 'Test string',
        updateTime: 'Test string',
        uri: 'Test string',
      },
    );
    /** Deletes a single backend. */
    await gapi.client.firebaseapphosting.projects.locations.backends.delete({
      etag: 'Test string',
      force: true,
      name: 'Test string',
      requestId: 'Test string',
      validateOnly: true,
    });
    /** Gets information about a backend. */
    await gapi.client.firebaseapphosting.projects.locations.backends.get({
      name: 'Test string',
    });
    /** Lists backends in a given project and location. */
    await gapi.client.firebaseapphosting.projects.locations.backends.list({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
      showDeleted: true,
    });
    /** Updates the information for a single backend. */
    await gapi.client.firebaseapphosting.projects.locations.backends.patch(
      {
        allowMissing: true,
        name: 'Test string',
        requestId: 'Test string',
        updateMask: 'Test string',
        validateOnly: true,
      },
      {
        annotations: {
          A: 'Test string',
        },
        appId: 'Test string',
        codebase: {
          repository: 'Test string',
          rootDirectory: 'Test string',
        },
        createTime: 'Test string',
        deleteTime: 'Test string',
        displayName: 'Test string',
        environment: 'Test string',
        etag: 'Test string',
        labels: {
          A: 'Test string',
        },
        managedResources: [
          {
            runService: {
              service: 'Test string',
            },
          },
        ],
        mode: 'Test string',
        name: 'Test string',
        reconciling: true,
        serviceAccount: 'Test string',
        servingLocality: 'Test string',
        uid: 'Test string',
        updateTime: 'Test string',
        uri: 'Test string',
      },
    );
    /** Creates a new build for a backend. */
    await gapi.client.firebaseapphosting.projects.locations.backends.builds.create(
      {
        buildId: 'Test string',
        parent: 'Test string',
        requestId: 'Test string',
        validateOnly: true,
      },
      {
        annotations: {
          A: 'Test string',
        },
        buildLogsUri: 'Test string',
        config: {
          env: [
            {
              availability: ['Test string'],
              secret: 'Test string',
              value: 'Test string',
              variable: 'Test string',
            },
          ],
          runConfig: {
            concurrency: 42,
            cpu: 42,
            maxInstances: 42,
            memoryMib: 42,
            minInstances: 42,
          },
        },
        createTime: 'Test string',
        deleteTime: 'Test string',
        displayName: 'Test string',
        environment: 'Test string',
        error: {
          code: 42,
          details: [
            {
              A: 42,
            },
          ],
          message: 'Test string',
        },
        errors: [
          {
            cloudResource: 'Test string',
            error: {
              code: 42,
              details: [
                {
                  A: 42,
                },
              ],
              message: 'Test string',
            },
            errorSource: 'Test string',
          },
        ],
        errorSource: 'Test string',
        etag: 'Test string',
        image: 'Test string',
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        reconciling: true,
        source: {
          archive: {
            author: {
              displayName: 'Test string',
              email: 'Test string',
              imageUri: 'Test string',
            },
            description: 'Test string',
            externalSignedUri: 'Test string',
            rootDirectory: 'Test string',
            userStorageUri: 'Test string',
          },
          codebase: {
            author: {
              displayName: 'Test string',
              email: 'Test string',
              imageUri: 'Test string',
            },
            branch: 'Test string',
            commit: 'Test string',
            commitMessage: 'Test string',
            commitTime: 'Test string',
            displayName: 'Test string',
            hash: 'Test string',
            uri: 'Test string',
          },
          container: {
            image: 'Test string',
          },
        },
        state: 'Test string',
        uid: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Deletes a single build. */
    await gapi.client.firebaseapphosting.projects.locations.backends.builds.delete(
      {
        etag: 'Test string',
        name: 'Test string',
        requestId: 'Test string',
        validateOnly: true,
      },
    );
    /** Gets information about a build. */
    await gapi.client.firebaseapphosting.projects.locations.backends.builds.get(
      {
        name: 'Test string',
      },
    );
    /** Lists builds in a given project, location, and backend. */
    await gapi.client.firebaseapphosting.projects.locations.backends.builds.list(
      {
        filter: 'Test string',
        orderBy: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
        showDeleted: true,
      },
    );
    /** Links a new domain to a backend. */
    await gapi.client.firebaseapphosting.projects.locations.backends.domains.create(
      {
        domainId: 'Test string',
        parent: 'Test string',
        requestId: 'Test string',
        validateOnly: true,
      },
      {
        annotations: {
          A: 'Test string',
        },
        createTime: 'Test string',
        customDomainStatus: {
          certState: 'Test string',
          hostState: 'Test string',
          issues: [
            {
              code: 42,
              details: [
                {
                  A: 42,
                },
              ],
              message: 'Test string',
            },
          ],
          ownershipState: 'Test string',
          requiredDnsUpdates: [
            {
              checkTime: 'Test string',
              desired: [
                {
                  checkError: {
                    code: 42,
                    details: [
                      {
                        A: 42,
                      },
                    ],
                    message: 'Test string',
                  },
                  domainName: 'Test string',
                  records: [
                    {
                      domainName: 'Test string',
                      rdata: 'Test string',
                      relevantState: ['Test string'],
                      requiredAction: 'Test string',
                      type: 'Test string',
                    },
                  ],
                },
              ],
              discovered: [
                {
                  checkError: {
                    code: 42,
                    details: [
                      {
                        A: 42,
                      },
                    ],
                    message: 'Test string',
                  },
                  domainName: 'Test string',
                  records: [
                    {
                      domainName: 'Test string',
                      rdata: 'Test string',
                      relevantState: ['Test string'],
                      requiredAction: 'Test string',
                      type: 'Test string',
                    },
                  ],
                },
              ],
              domainName: 'Test string',
            },
          ],
        },
        deleteTime: 'Test string',
        disabled: true,
        displayName: 'Test string',
        etag: 'Test string',
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        purgeTime: 'Test string',
        reconciling: true,
        serve: {
          redirect: {
            status: 'Test string',
            uri: 'Test string',
          },
        },
        type: 'Test string',
        uid: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Deletes a single domain. */
    await gapi.client.firebaseapphosting.projects.locations.backends.domains.delete(
      {
        etag: 'Test string',
        name: 'Test string',
        requestId: 'Test string',
        validateOnly: true,
      },
    );
    /** Gets information about a domain. */
    await gapi.client.firebaseapphosting.projects.locations.backends.domains.get(
      {
        name: 'Test string',
      },
    );
    /** Lists domains of a backend. */
    await gapi.client.firebaseapphosting.projects.locations.backends.domains.list(
      {
        filter: 'Test string',
        orderBy: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
        showDeleted: true,
      },
    );
    /** Updates the information for a single domain. */
    await gapi.client.firebaseapphosting.projects.locations.backends.domains.patch(
      {
        allowMissing: true,
        name: 'Test string',
        requestId: 'Test string',
        updateMask: 'Test string',
        validateOnly: true,
      },
      {
        annotations: {
          A: 'Test string',
        },
        createTime: 'Test string',
        customDomainStatus: {
          certState: 'Test string',
          hostState: 'Test string',
          issues: [
            {
              code: 42,
              details: [
                {
                  A: 42,
                },
              ],
              message: 'Test string',
            },
          ],
          ownershipState: 'Test string',
          requiredDnsUpdates: [
            {
              checkTime: 'Test string',
              desired: [
                {
                  checkError: {
                    code: 42,
                    details: [
                      {
                        A: 42,
                      },
                    ],
                    message: 'Test string',
                  },
                  domainName: 'Test string',
                  records: [
                    {
                      domainName: 'Test string',
                      rdata: 'Test string',
                      relevantState: ['Test string'],
                      requiredAction: 'Test string',
                      type: 'Test string',
                    },
                  ],
                },
              ],
              discovered: [
                {
                  checkError: {
                    code: 42,
                    details: [
                      {
                        A: 42,
                      },
                    ],
                    message: 'Test string',
                  },
                  domainName: 'Test string',
                  records: [
                    {
                      domainName: 'Test string',
                      rdata: 'Test string',
                      relevantState: ['Test string'],
                      requiredAction: 'Test string',
                      type: 'Test string',
                    },
                  ],
                },
              ],
              domainName: 'Test string',
            },
          ],
        },
        deleteTime: 'Test string',
        disabled: true,
        displayName: 'Test string',
        etag: 'Test string',
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        purgeTime: 'Test string',
        reconciling: true,
        serve: {
          redirect: {
            status: 'Test string',
            uri: 'Test string',
          },
        },
        type: 'Test string',
        uid: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Creates a new rollout for a backend. */
    await gapi.client.firebaseapphosting.projects.locations.backends.rollouts.create(
      {
        parent: 'Test string',
        requestId: 'Test string',
        rolloutId: 'Test string',
        validateOnly: true,
      },
      {
        annotations: {
          A: 'Test string',
        },
        build: 'Test string',
        createTime: 'Test string',
        deleteTime: 'Test string',
        displayName: 'Test string',
        error: {
          code: 42,
          details: [
            {
              A: 42,
            },
          ],
          message: 'Test string',
        },
        etag: 'Test string',
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        reconciling: true,
        state: 'Test string',
        uid: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Gets information about a rollout. */
    await gapi.client.firebaseapphosting.projects.locations.backends.rollouts.get(
      {
        name: 'Test string',
      },
    );
    /** Lists rollouts for a backend. */
    await gapi.client.firebaseapphosting.projects.locations.backends.rollouts.list(
      {
        filter: 'Test string',
        orderBy: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
        showDeleted: true,
      },
    );
    /** Gets information about a backend's traffic. */
    await gapi.client.firebaseapphosting.projects.locations.backends.traffic.get(
      {
        name: 'Test string',
      },
    );
    /** Updates a backend's traffic. */
    await gapi.client.firebaseapphosting.projects.locations.backends.traffic.patch(
      {
        name: 'Test string',
        requestId: 'Test string',
        updateMask: 'Test string',
        validateOnly: true,
      },
      {
        annotations: {
          A: 'Test string',
        },
        createTime: 'Test string',
        current: {
          splits: [
            {
              build: 'Test string',
              percent: 42,
            },
          ],
        },
        etag: 'Test string',
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        reconciling: true,
        rolloutPolicy: {
          codebaseBranch: 'Test string',
          disabled: true,
          disabledTime: 'Test string',
        },
        target: {
          splits: [
            {
              build: 'Test string',
              percent: 42,
            },
          ],
        },
        uid: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of `1`, corresponding to `Code.CANCELLED`. */
    await gapi.client.firebaseapphosting.projects.locations.operations.cancel({
      name: 'Test string',
    });
    /** Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. */
    await gapi.client.firebaseapphosting.projects.locations.operations.delete({
      name: 'Test string',
    });
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.firebaseapphosting.projects.locations.operations.get({
      name: 'Test string',
    });
    /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
    await gapi.client.firebaseapphosting.projects.locations.operations.list({
      filter: 'Test string',
      name: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
  }
});
