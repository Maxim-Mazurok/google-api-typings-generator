/* This is stub file for gapi.client.authorizedbuyersmarketplace-v1alpha definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20250708

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://authorizedbuyersmarketplace.googleapis.com/$discovery/rest?version=v1alpha',
  );
  /** now we can use gapi.client.authorizedbuyersmarketplace */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** See, create, edit, and delete your Authorized Buyers Marketplace entities. */
    'https://www.googleapis.com/auth/authorized-buyers-marketplace',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** List the auction packages. Buyers can use the URL path "/v1alpha/buyers/{accountId}/auctionPackages" to list auction packages for the current buyer and its clients. Bidders can use the URL path "/v1alpha/bidders/{accountId}/auctionPackages" to list auction packages for the bidder, its media planners, its buyers, and all their clients. */
    await gapi.client.authorizedbuyersmarketplace.bidders.auctionPackages.list({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Lists finalized deals. Use the URL path "/v1alpha/buyers/{accountId}/finalizedDeals" to list finalized deals for the current buyer and its clients. Bidders can use the URL path "/v1alpha/bidders/{accountId}/finalizedDeals" to list finalized deals for the bidder, its buyers and all their clients. */
    await gapi.client.authorizedbuyersmarketplace.bidders.finalizedDeals.list({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Gets an auction package given its name. */
    await gapi.client.authorizedbuyersmarketplace.buyers.auctionPackages.get({
      name: 'Test string',
    });
    /** List the auction packages. Buyers can use the URL path "/v1alpha/buyers/{accountId}/auctionPackages" to list auction packages for the current buyer and its clients. Bidders can use the URL path "/v1alpha/bidders/{accountId}/auctionPackages" to list auction packages for the bidder, its media planners, its buyers, and all their clients. */
    await gapi.client.authorizedbuyersmarketplace.buyers.auctionPackages.list({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Subscribe to the auction package for the specified buyer. Once subscribed, the bidder will receive a call out for inventory matching the auction package targeting criteria with the auction package deal ID and the specified buyer. */
    await gapi.client.authorizedbuyersmarketplace.buyers.auctionPackages.subscribe(
      {
        name: 'Test string',
      },
      {},
    );
    /** Subscribe the specified clients of the buyer to the auction package. If a client in the list does not belong to the buyer, an error response will be returned, and all of the following clients in the list will not be subscribed. Subscribing an already subscribed client will have no effect. */
    await gapi.client.authorizedbuyersmarketplace.buyers.auctionPackages.subscribeClients(
      {
        auctionPackage: 'Test string',
      },
      {
        clients: ['Test string'],
      },
    );
    /** Unsubscribe from the auction package for the specified buyer. Once unsubscribed, the bidder will no longer receive a call out for the auction package deal ID and the specified buyer. */
    await gapi.client.authorizedbuyersmarketplace.buyers.auctionPackages.unsubscribe(
      {
        name: 'Test string',
      },
      {},
    );
    /** Unsubscribe from the auction package for the specified clients of the buyer. Unsubscribing a client that is not subscribed will have no effect. */
    await gapi.client.authorizedbuyersmarketplace.buyers.auctionPackages.unsubscribeClients(
      {
        auctionPackage: 'Test string',
      },
      {
        clients: ['Test string'],
      },
    );
    /** Activates an existing client. The state of the client will be updated to "ACTIVE". This method has no effect if the client is already in "ACTIVE" state. */
    await gapi.client.authorizedbuyersmarketplace.buyers.clients.activate(
      {
        name: 'Test string',
      },
      {},
    );
    /** Creates a new client. */
    await gapi.client.authorizedbuyersmarketplace.buyers.clients.create(
      {
        parent: 'Test string',
      },
      {
        displayName: 'Test string',
        name: 'Test string',
        partnerClientId: 'Test string',
        role: 'Test string',
        sellerVisible: true,
        state: 'Test string',
      },
    );
    /** Deactivates an existing client. The state of the client will be updated to "INACTIVE". This method has no effect if the client is already in "INACTIVE" state. */
    await gapi.client.authorizedbuyersmarketplace.buyers.clients.deactivate(
      {
        name: 'Test string',
      },
      {},
    );
    /** Gets a client with a given resource name. */
    await gapi.client.authorizedbuyersmarketplace.buyers.clients.get({
      name: 'Test string',
    });
    /** Lists all the clients for the current buyer. */
    await gapi.client.authorizedbuyersmarketplace.buyers.clients.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates an existing client. */
    await gapi.client.authorizedbuyersmarketplace.buyers.clients.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        displayName: 'Test string',
        name: 'Test string',
        partnerClientId: 'Test string',
        role: 'Test string',
        sellerVisible: true,
        state: 'Test string',
      },
    );
    /** Activates an existing client user. The state of the client user will be updated from "INACTIVE" to "ACTIVE". This method has no effect if the client user is already in "ACTIVE" state. An error will be returned if the client user to activate is still in "INVITED" state. */
    await gapi.client.authorizedbuyersmarketplace.buyers.clients.users.activate(
      {
        name: 'Test string',
      },
      {},
    );
    /** Creates a new client user in "INVITED" state. An email invitation will be sent to the new user, once accepted the user will become active. */
    await gapi.client.authorizedbuyersmarketplace.buyers.clients.users.create(
      {
        parent: 'Test string',
      },
      {
        email: 'Test string',
        name: 'Test string',
        state: 'Test string',
      },
    );
    /** Deactivates an existing client user. The state of the client user will be updated from "ACTIVE" to "INACTIVE". This method has no effect if the client user is already in "INACTIVE" state. An error will be returned if the client user to deactivate is still in "INVITED" state. */
    await gapi.client.authorizedbuyersmarketplace.buyers.clients.users.deactivate(
      {
        name: 'Test string',
      },
      {},
    );
    /** Deletes an existing client user. The client user will lose access to the Authorized Buyers UI. Note that if a client user is deleted, the user's access to the UI can't be restored unless a new client user is created and activated. */
    await gapi.client.authorizedbuyersmarketplace.buyers.clients.users.delete({
      name: 'Test string',
    });
    /** Retrieves an existing client user. */
    await gapi.client.authorizedbuyersmarketplace.buyers.clients.users.get({
      name: 'Test string',
    });
    /** Lists all client users for a specified client. */
    await gapi.client.authorizedbuyersmarketplace.buyers.clients.users.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Activates a data segment. */
    await gapi.client.authorizedbuyersmarketplace.buyers.dataSegments.activate(
      {
        name: 'Test string',
      },
      {},
    );
    /** Creates a data segment owned by the listed curator. The data segment will be created in the `ACTIVE` state, meaning it will be immediately available for buyers to use in preferred deals, private auction deals, and auction packages. */
    await gapi.client.authorizedbuyersmarketplace.buyers.dataSegments.create(
      {
        parent: 'Test string',
      },
      {
        cpmFee: {
          currencyCode: 'Test string',
          nanos: 42,
          units: 'Test string',
        },
        createTime: 'Test string',
        name: 'Test string',
        state: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Deactivates a data segment. */
    await gapi.client.authorizedbuyersmarketplace.buyers.dataSegments.deactivate(
      {
        name: 'Test string',
      },
      {},
    );
    /** Gets a data segment given its name. */
    await gapi.client.authorizedbuyersmarketplace.buyers.dataSegments.get({
      name: 'Test string',
    });
    /** List the data segments owned by a curator. */
    await gapi.client.authorizedbuyersmarketplace.buyers.dataSegments.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates a data segment. */
    await gapi.client.authorizedbuyersmarketplace.buyers.dataSegments.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        cpmFee: {
          currencyCode: 'Test string',
          nanos: 42,
          units: 'Test string',
        },
        createTime: 'Test string',
        name: 'Test string',
        state: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Add creative to be used in the bidding process for a finalized deal. For programmatic guaranteed deals, it's recommended that you associate at least one approved creative with the deal before calling SetReadyToServe, to help reduce the number of bid responses filtered because they don't contain approved creatives. Creatives successfully added to a deal can be found in the Realtime-bidding Creatives API creative.deal_ids. This method only applies to programmatic guaranteed deals. Maximum number of 1000 creatives can be added to a finalized deal. */
    await gapi.client.authorizedbuyersmarketplace.buyers.finalizedDeals.addCreative(
      {
        deal: 'Test string',
      },
      {
        creative: 'Test string',
      },
    );
    /** Gets a finalized deal given its name. */
    await gapi.client.authorizedbuyersmarketplace.buyers.finalizedDeals.get({
      name: 'Test string',
    });
    /** Lists finalized deals. Use the URL path "/v1alpha/buyers/{accountId}/finalizedDeals" to list finalized deals for the current buyer and its clients. Bidders can use the URL path "/v1alpha/bidders/{accountId}/finalizedDeals" to list finalized deals for the bidder, its buyers and all their clients. */
    await gapi.client.authorizedbuyersmarketplace.buyers.finalizedDeals.list({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Pauses serving of the given finalized deal. This call only pauses the serving status, and does not affect other fields of the finalized deal. Calling this method for an already paused deal has no effect. This method only applies to programmatic guaranteed deals and preferred deals. */
    await gapi.client.authorizedbuyersmarketplace.buyers.finalizedDeals.pause(
      {
        name: 'Test string',
      },
      {
        reason: 'Test string',
      },
    );
    /** Resumes serving of the given finalized deal. Calling this method for an running deal has no effect. If a deal is initially paused by the seller, calling this method will not resume serving of the deal until the seller also resumes the deal. This method only applies to programmatic guaranteed deals and preferred deals. */
    await gapi.client.authorizedbuyersmarketplace.buyers.finalizedDeals.resume(
      {
        name: 'Test string',
      },
      {},
    );
    /** Sets the given finalized deal as ready to serve. By default, deals are set as ready to serve as soon as they're finalized. If you want to opt out of the default behavior, and manually indicate that deals are ready to serve, ask your Technical Account Manager to add you to the allowlist. If you choose to use this method, finalized deals belonging to the bidder and its child seats don't start serving until after you call `setReadyToServe`, and after the deals become active. For example, you can use this method to delay receiving bid requests until your creative is ready. This method only applies to programmatic guaranteed deals. */
    await gapi.client.authorizedbuyersmarketplace.buyers.finalizedDeals.setReadyToServe(
      {
        deal: 'Test string',
      },
      {},
    );
    /** Accepts the proposal at the given revision number. If the revision number in the request is behind the latest from the server, an error message will be returned. This call updates the Proposal.state from `BUYER_ACCEPTANCE_REQUESTED` to `FINALIZED`; it has no side effect if the Proposal.state is already `FINALIZED` and throws exception if the Proposal.state is not either `BUYER_ACCEPTANCE_REQUESTED` or `FINALIZED`. Accepting a proposal means the buyer understands and accepts the Proposal.terms_and_conditions proposed by the seller. */
    await gapi.client.authorizedbuyersmarketplace.buyers.proposals.accept(
      {
        name: 'Test string',
      },
      {
        proposalRevision: 'Test string',
      },
    );
    /** Creates a note for this proposal and sends to the seller. This method is not supported for proposals with DealType set to 'PRIVATE_AUCTION'. */
    await gapi.client.authorizedbuyersmarketplace.buyers.proposals.addNote(
      {
        proposal: 'Test string',
      },
      {
        note: {
          createTime: 'Test string',
          creatorRole: 'Test string',
          note: 'Test string',
        },
      },
    );
    /** Cancels an ongoing negotiation on a proposal. This does not cancel or end serving for the deals if the proposal has been finalized. If the proposal has not been finalized before, calling this method will set the Proposal.state to `TERMINATED` and increment the Proposal.proposal_revision. If the proposal has been finalized before and is under renegotiation now, calling this method will reset the Proposal.state to `FINALIZED` and increment the Proposal.proposal_revision. This method does not support private auction proposals whose Proposal.deal_type is 'PRIVATE_AUCTION'. */
    await gapi.client.authorizedbuyersmarketplace.buyers.proposals.cancelNegotiation(
      {
        proposal: 'Test string',
      },
      {},
    );
    /** Gets a proposal using its resource name. The proposal is returned at the latest revision. */
    await gapi.client.authorizedbuyersmarketplace.buyers.proposals.get({
      name: 'Test string',
    });
    /** Lists proposals. A filter expression using [Cloud API list filtering syntax](https://developers.google.com/authorized-buyers/apis/guides/list-filters) may be specified to filter the results. */
    await gapi.client.authorizedbuyersmarketplace.buyers.proposals.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates the proposal at the given revision number. If the revision number in the request is behind the latest one kept in the server, an error message will be returned. See FieldMask for how to use FieldMask. Only fields specified in the UpdateProposalRequest.update_mask will be updated; Fields noted as 'Immutable' or 'Output only' yet specified in the UpdateProposalRequest.update_mask will be ignored and left unchanged. Updating a private auction proposal is only allowed for buyer private data, all other fields are immutable. */
    await gapi.client.authorizedbuyersmarketplace.buyers.proposals.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        billedBuyer: 'Test string',
        buyer: 'Test string',
        buyerContacts: [
          {
            displayName: 'Test string',
            email: 'Test string',
          },
        ],
        buyerPrivateData: {
          referenceId: 'Test string',
        },
        client: 'Test string',
        dealType: 'Test string',
        displayName: 'Test string',
        isRenegotiating: true,
        lastUpdaterOrCommentorRole: 'Test string',
        name: 'Test string',
        notes: [
          {
            createTime: 'Test string',
            creatorRole: 'Test string',
            note: 'Test string',
          },
        ],
        originatorRole: 'Test string',
        pausingConsented: true,
        proposalRevision: 'Test string',
        publisherProfile: 'Test string',
        sellerContacts: [
          {
            displayName: 'Test string',
            email: 'Test string',
          },
        ],
        state: 'Test string',
        termsAndConditions: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Sends a request for proposal (RFP) to a publisher to initiate the negotiation regarding certain inventory. In the RFP, buyers can specify the deal type, deal terms, start and end dates, targeting, and a message to the publisher. Once the RFP is sent, a proposal in `SELLER_REVIEW_REQUESTED` state will be created and returned in the response. The publisher may review your request and respond with detailed deals in the proposal. */
    await gapi.client.authorizedbuyersmarketplace.buyers.proposals.sendRfp(
      {
        buyer: 'Test string',
      },
      {
        buyerContacts: [
          {
            displayName: 'Test string',
            email: 'Test string',
          },
        ],
        client: 'Test string',
        displayName: 'Test string',
        estimatedGrossSpend: {
          currencyCode: 'Test string',
          nanos: 42,
          units: 'Test string',
        },
        flightEndTime: 'Test string',
        flightStartTime: 'Test string',
        geoTargeting: {
          excludedCriteriaIds: ['Test string'],
          targetedCriteriaIds: ['Test string'],
        },
        inventorySizeTargeting: {
          excludedInventorySizes: [
            {
              height: 'Test string',
              type: 'Test string',
              width: 'Test string',
            },
          ],
          targetedInventorySizes: [
            {
              height: 'Test string',
              type: 'Test string',
              width: 'Test string',
            },
          ],
        },
        note: 'Test string',
        preferredDealTerms: {
          fixedPrice: {
            amount: {
              currencyCode: 'Test string',
              nanos: 42,
              units: 'Test string',
            },
            type: 'Test string',
          },
        },
        programmaticGuaranteedTerms: {
          fixedPrice: {
            amount: {
              currencyCode: 'Test string',
              nanos: 42,
              units: 'Test string',
            },
            type: 'Test string',
          },
          guaranteedLooks: 'Test string',
          impressionCap: 'Test string',
          minimumDailyLooks: 'Test string',
          percentShareOfVoice: 'Test string',
          reservationType: 'Test string',
        },
        publisherProfile: 'Test string',
      },
    );
    /** Batch updates multiple deals in the same proposal. */
    await gapi.client.authorizedbuyersmarketplace.buyers.proposals.deals.batchUpdate(
      {
        parent: 'Test string',
      },
      {
        requests: [
          {
            deal: {
              billedBuyer: 'Test string',
              buyer: 'Test string',
              buyerPermissionType: 'Test string',
              client: 'Test string',
              createTime: 'Test string',
              creativeRequirements: {
                creativeFormat: 'Test string',
                creativePreApprovalPolicy: 'Test string',
                creativeSafeFrameCompatibility: 'Test string',
                maxAdDurationMs: 'Test string',
                programmaticCreativeSource: 'Test string',
                skippableAdType: 'Test string',
              },
              dealType: 'Test string',
              deliveryControl: {
                companionDeliveryType: 'Test string',
                creativeRotationType: 'Test string',
                deliveryRateType: 'Test string',
                frequencyCap: [
                  {
                    maxImpressions: 42,
                    timeUnitsCount: 42,
                    timeUnitType: 'Test string',
                  },
                ],
                roadblockingType: 'Test string',
              },
              description: 'Test string',
              displayName: 'Test string',
              eligibleSeatIds: ['Test string'],
              estimatedGrossSpend: {
                currencyCode: 'Test string',
                nanos: 42,
                units: 'Test string',
              },
              flightEndTime: 'Test string',
              flightStartTime: 'Test string',
              mediaPlanner: {
                accountId: 'Test string',
              },
              name: 'Test string',
              preferredDealTerms: {
                fixedPrice: {
                  amount: {
                    currencyCode: 'Test string',
                    nanos: 42,
                    units: 'Test string',
                  },
                  type: 'Test string',
                },
              },
              privateAuctionTerms: {
                floorPrice: {
                  amount: {
                    currencyCode: 'Test string',
                    nanos: 42,
                    units: 'Test string',
                  },
                  type: 'Test string',
                },
                openAuctionAllowed: true,
              },
              programmaticGuaranteedTerms: {
                fixedPrice: {
                  amount: {
                    currencyCode: 'Test string',
                    nanos: 42,
                    units: 'Test string',
                  },
                  type: 'Test string',
                },
                guaranteedLooks: 'Test string',
                impressionCap: 'Test string',
                minimumDailyLooks: 'Test string',
                percentShareOfVoice: 'Test string',
                reservationType: 'Test string',
              },
              proposalRevision: 'Test string',
              publisherProfile: 'Test string',
              sellerTimeZone: {
                id: 'Test string',
                version: 'Test string',
              },
              targeting: {
                daypartTargeting: {
                  dayParts: [
                    {
                      dayOfWeek: 'Test string',
                      endTime: {
                        hours: 42,
                        minutes: 42,
                        nanos: 42,
                        seconds: 42,
                      },
                      startTime: {
                        hours: 42,
                        minutes: 42,
                        nanos: 42,
                        seconds: 42,
                      },
                    },
                  ],
                  timeZoneType: 'Test string',
                },
                excludedSensitiveCategoryIds: ['Test string'],
                geoTargeting: {
                  excludedCriteriaIds: ['Test string'],
                  targetedCriteriaIds: ['Test string'],
                },
                inventorySizeTargeting: {
                  excludedInventorySizes: [
                    {
                      height: 'Test string',
                      type: 'Test string',
                      width: 'Test string',
                    },
                  ],
                  targetedInventorySizes: [
                    {
                      height: 'Test string',
                      type: 'Test string',
                      width: 'Test string',
                    },
                  ],
                },
                inventoryTypeTargeting: {
                  inventoryTypes: ['Test string'],
                },
                placementTargeting: {
                  mobileApplicationTargeting: {
                    firstPartyTargeting: {
                      excludedAppIds: ['Test string'],
                      targetedAppIds: ['Test string'],
                    },
                  },
                  uriTargeting: {
                    excludedUris: ['Test string'],
                    targetedUris: ['Test string'],
                  },
                },
                technologyTargeting: {
                  deviceCapabilityTargeting: {
                    excludedCriteriaIds: ['Test string'],
                    targetedCriteriaIds: ['Test string'],
                  },
                  deviceCategoryTargeting: {
                    excludedCriteriaIds: ['Test string'],
                    targetedCriteriaIds: ['Test string'],
                  },
                  operatingSystemTargeting: {
                    operatingSystemCriteria: {
                      excludedCriteriaIds: ['Test string'],
                      targetedCriteriaIds: ['Test string'],
                    },
                    operatingSystemVersionCriteria: {
                      excludedCriteriaIds: ['Test string'],
                      targetedCriteriaIds: ['Test string'],
                    },
                  },
                },
                userListTargeting: {
                  excludedCriteriaIds: ['Test string'],
                  targetedCriteriaIds: ['Test string'],
                },
                verticalTargeting: {
                  excludedCriteriaIds: ['Test string'],
                  targetedCriteriaIds: ['Test string'],
                },
                videoTargeting: {
                  excludedPositionTypes: ['Test string'],
                  targetedPositionTypes: ['Test string'],
                },
              },
              updateTime: 'Test string',
            },
            updateMask: 'Test string',
          },
        ],
      },
    );
    /** Gets a deal given its name. The deal is returned at its head revision. */
    await gapi.client.authorizedbuyersmarketplace.buyers.proposals.deals.get({
      name: 'Test string',
    });
    /** Lists all deals in a proposal. To retrieve only the finalized revision deals regardless if a deal is being renegotiated, see the FinalizedDeals resource. */
    await gapi.client.authorizedbuyersmarketplace.buyers.proposals.deals.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates the given deal at the buyer known revision number. If the server revision has advanced since the passed-in proposal.proposal_revision an ABORTED error message will be returned. The revision number is incremented by the server whenever the proposal or its constituent deals are updated. Note: The revision number is kept at a proposal level. The buyer of the API is expected to keep track of the revision number after the last update operation and send it in as part of the next update request. This way, if there are further changes on the server (for example, seller making new updates), then the server can detect conflicts and reject the proposed changes. */
    await gapi.client.authorizedbuyersmarketplace.buyers.proposals.deals.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        billedBuyer: 'Test string',
        buyer: 'Test string',
        buyerPermissionType: 'Test string',
        client: 'Test string',
        createTime: 'Test string',
        creativeRequirements: {
          creativeFormat: 'Test string',
          creativePreApprovalPolicy: 'Test string',
          creativeSafeFrameCompatibility: 'Test string',
          maxAdDurationMs: 'Test string',
          programmaticCreativeSource: 'Test string',
          skippableAdType: 'Test string',
        },
        dealType: 'Test string',
        deliveryControl: {
          companionDeliveryType: 'Test string',
          creativeRotationType: 'Test string',
          deliveryRateType: 'Test string',
          frequencyCap: [
            {
              maxImpressions: 42,
              timeUnitsCount: 42,
              timeUnitType: 'Test string',
            },
          ],
          roadblockingType: 'Test string',
        },
        description: 'Test string',
        displayName: 'Test string',
        eligibleSeatIds: ['Test string'],
        estimatedGrossSpend: {
          currencyCode: 'Test string',
          nanos: 42,
          units: 'Test string',
        },
        flightEndTime: 'Test string',
        flightStartTime: 'Test string',
        mediaPlanner: {
          accountId: 'Test string',
        },
        name: 'Test string',
        preferredDealTerms: {
          fixedPrice: {
            amount: {
              currencyCode: 'Test string',
              nanos: 42,
              units: 'Test string',
            },
            type: 'Test string',
          },
        },
        privateAuctionTerms: {
          floorPrice: {
            amount: {
              currencyCode: 'Test string',
              nanos: 42,
              units: 'Test string',
            },
            type: 'Test string',
          },
          openAuctionAllowed: true,
        },
        programmaticGuaranteedTerms: {
          fixedPrice: {
            amount: {
              currencyCode: 'Test string',
              nanos: 42,
              units: 'Test string',
            },
            type: 'Test string',
          },
          guaranteedLooks: 'Test string',
          impressionCap: 'Test string',
          minimumDailyLooks: 'Test string',
          percentShareOfVoice: 'Test string',
          reservationType: 'Test string',
        },
        proposalRevision: 'Test string',
        publisherProfile: 'Test string',
        sellerTimeZone: {
          id: 'Test string',
          version: 'Test string',
        },
        targeting: {
          daypartTargeting: {
            dayParts: [
              {
                dayOfWeek: 'Test string',
                endTime: {
                  hours: 42,
                  minutes: 42,
                  nanos: 42,
                  seconds: 42,
                },
                startTime: {
                  hours: 42,
                  minutes: 42,
                  nanos: 42,
                  seconds: 42,
                },
              },
            ],
            timeZoneType: 'Test string',
          },
          excludedSensitiveCategoryIds: ['Test string'],
          geoTargeting: {
            excludedCriteriaIds: ['Test string'],
            targetedCriteriaIds: ['Test string'],
          },
          inventorySizeTargeting: {
            excludedInventorySizes: [
              {
                height: 'Test string',
                type: 'Test string',
                width: 'Test string',
              },
            ],
            targetedInventorySizes: [
              {
                height: 'Test string',
                type: 'Test string',
                width: 'Test string',
              },
            ],
          },
          inventoryTypeTargeting: {
            inventoryTypes: ['Test string'],
          },
          placementTargeting: {
            mobileApplicationTargeting: {
              firstPartyTargeting: {
                excludedAppIds: ['Test string'],
                targetedAppIds: ['Test string'],
              },
            },
            uriTargeting: {
              excludedUris: ['Test string'],
              targetedUris: ['Test string'],
            },
          },
          technologyTargeting: {
            deviceCapabilityTargeting: {
              excludedCriteriaIds: ['Test string'],
              targetedCriteriaIds: ['Test string'],
            },
            deviceCategoryTargeting: {
              excludedCriteriaIds: ['Test string'],
              targetedCriteriaIds: ['Test string'],
            },
            operatingSystemTargeting: {
              operatingSystemCriteria: {
                excludedCriteriaIds: ['Test string'],
                targetedCriteriaIds: ['Test string'],
              },
              operatingSystemVersionCriteria: {
                excludedCriteriaIds: ['Test string'],
                targetedCriteriaIds: ['Test string'],
              },
            },
          },
          userListTargeting: {
            excludedCriteriaIds: ['Test string'],
            targetedCriteriaIds: ['Test string'],
          },
          verticalTargeting: {
            excludedCriteriaIds: ['Test string'],
            targetedCriteriaIds: ['Test string'],
          },
          videoTargeting: {
            excludedPositionTypes: ['Test string'],
            targetedPositionTypes: ['Test string'],
          },
        },
        updateTime: 'Test string',
      },
    );
    /** Gets the requested publisher profile by name. */
    await gapi.client.authorizedbuyersmarketplace.buyers.publisherProfiles.get({
      name: 'Test string',
    });
    /** Lists publisher profiles. The returned publisher profiles aren't in any defined order. The order of the results might change. A new publisher profile can appear in any place in the list of returned results. */
    await gapi.client.authorizedbuyersmarketplace.buyers.publisherProfiles.list(
      {
        filter: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
  }
});
