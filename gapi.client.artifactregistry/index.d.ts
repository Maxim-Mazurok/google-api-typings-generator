/* Type definitions for non-npm package Artifact Registry API v1 1.0 */
// Project: https://cloud.google.com/artifacts/docs/
// Definitions by: Maxim Mazurok <https://github.com/Maxim-Mazurok>
//                 Nick Amoscato <https://github.com/namoscato>
//                 Declan Vong <https://github.com/declanvong>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 2.8

// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
// Generated from: https://artifactregistry.googleapis.com/$discovery/rest?version=v1
// Revision: 20211203

/// <reference types="gapi.client" />

declare namespace gapi.client {
    /** Load Artifact Registry API v1 */
    function load(name: "artifactregistry", version: "v1"): PromiseLike<void>;
    function load(name: "artifactregistry", version: "v1", callback: () => any): void;

    namespace artifactregistry {
        interface AptArtifact {
            /** Output only. Operating system architecture of the artifact. */
            architecture?: string;
            /** Output only. Repository component of the artifact. */
            component?: string;
            /** Output only. Contents of the artifact's control metadata file. */
            controlFile?: string;
            /** Output only. The Artifact Registry resource name of the artifact. */
            name?: string;
            /** Output only. The Apt package name of the artifact. */
            packageName?: string;
            /** Output only. An artifact is a binary or source package. */
            packageType?: string;
        }
        interface DockerImage {
            /**
             * The time this image was built. This field is returned as the 'metadata.buildTime' field in the Version resource. The build time is returned to the client as an RFC 3339 string,
             * which can be easily used with the JavaScript Date constructor.
             */
            buildTime?: string;
            /** Calculated size of the image. This field is returned as the 'metadata.imageSizeBytes' field in the Version resource. */
            imageSizeBytes?: string;
            /** Media type of this image, e.g. "application/vnd.docker.distribution.manifest.v2+json". This field is returned as the 'metadata.mediaType' field in the Version resource. */
            mediaType?: string;
            /**
             * Required. registry_location, project_id, repository_name and image id forms a unique image name:`projects//locations//repository//dockerImages/`. For example,
             * "projects/test-project/locations/us-west4/repositories/test-repo/dockerImages/ nginx@sha256:e9954c1fc875017be1c3e36eca16be2d9e9bccc4bf072163515467d6a823c7cf", where "us-west4" is
             * the registry_location, "test-project" is the project_id, "test-repo" is the repository_name and "nginx@sha256:e9954c1fc875017be1c3e36eca16be2d9e9bccc4bf072163515467d6a823c7cf" is
             * the image's digest.
             */
            name?: string;
            /** Tags attached to this image. */
            tags?: string[];
            /** Time the image was uploaded. */
            uploadTime?: string;
            /** Required. URL to access the image. Example: us-west4-docker.pkg.dev/test-project/test-repo/nginx@sha256:e9954c1fc875017be1c3e36eca16be2d9e9bccc4bf072163515467d6a823c7cf */
            uri?: string;
        }
        interface ImportAptArtifactsErrorInfo {
            /** The detailed error status. */
            error?: Status;
            /** Google Cloud Storage location requested. */
            gcsSource?: ImportAptArtifactsGcsSource;
        }
        interface ImportAptArtifactsGcsSource {
            /** Cloud Storage paths URI (e.g., gs://my_bucket//my_object). */
            uris?: string[];
            /** Supports URI wildcards for matching multiple objects from a single URI. */
            useWildcards?: boolean;
        }
        interface ImportAptArtifactsResponse {
            /** The Apt artifacts updated. */
            aptArtifacts?: AptArtifact[];
            /** Detailed error info for packages that were not imported. */
            errors?: ImportAptArtifactsErrorInfo[];
        }
        interface ImportYumArtifactsErrorInfo {
            /** The detailed error status. */
            error?: Status;
            /** Google Cloud Storage location requested. */
            gcsSource?: ImportYumArtifactsGcsSource;
        }
        interface ImportYumArtifactsGcsSource {
            /** Cloud Storage paths URI (e.g., gs://my_bucket//my_object). */
            uris?: string[];
            /** Supports URI wildcards for matching multiple objects from a single URI. */
            useWildcards?: boolean;
        }
        interface ImportYumArtifactsResponse {
            /** Detailed error info for packages that were not imported. */
            errors?: ImportYumArtifactsErrorInfo[];
            /** The yum artifacts updated. */
            yumArtifacts?: YumArtifact[];
        }
        interface ListDockerImagesResponse {
            /** The docker images returned. */
            dockerImages?: DockerImage[];
            /** The token to retrieve the next page of artifacts, or empty if there are no more artifacts to return. */
            nextPageToken?: string;
        }
        interface ListRepositoriesResponse {
            /** The token to retrieve the next page of repositories, or empty if there are no more repositories to return. */
            nextPageToken?: string;
            /** The repositories returned. */
            repositories?: Repository[];
        }
        interface Operation {
            /** If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available. */
            done?: boolean;
            /** The error result of the operation in case of failure or cancellation. */
            error?: Status;
            /**
             * Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such
             * metadata. Any method that returns a long-running operation should document the metadata type, if any.
             */
            metadata?: { [P in string]: any };
            /**
             * The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending
             * with `operations/{unique_id}`.
             */
            name?: string;
            /**
             * The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the
             * original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the
             * original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
             */
            response?: { [P in string]: any };
        }
        interface Repository {
            /** The time when the repository was created. */
            createTime?: string;
            /** The user-provided description of the repository. */
            description?: string;
            /** The format of packages that are stored in the repository. */
            format?: string;
            /**
             * The Cloud KMS resource name of the customer managed encryption key thatâ€™s used to encrypt the contents of the Repository. Has the form:
             * `projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key`. This value may not be changed after the Repository has been created.
             */
            kmsKeyName?: string;
            /**
             * Labels with user-defined metadata. This field may contain up to 64 entries. Label keys and values may be no longer than 63 characters. Label keys must begin with a lowercase letter
             * and may only contain lowercase letters, numeric characters, underscores, and dashes.
             */
            labels?: { [P in string]: string };
            /** The name of the repository, for example: "projects/p1/locations/us-central1/repositories/repo1". */
            name?: string;
            /** The time when the repository was last updated. */
            updateTime?: string;
        }
        interface Status {
            /** The status code, which should be an enum value of google.rpc.Code. */
            code?: number;
            /** A list of messages that carry the error details. There is a common set of message types for APIs to use. */
            details?: Array<{ [P in string]: any }>;
            /**
             * A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the
             * client.
             */
            message?: string;
        }
        interface UploadAptArtifactMediaResponse {
            /** Operation to be returned to the user. */
            operation?: Operation;
        }
        interface UploadAptArtifactResponse {
            /** The Apt artifacts updated. */
            aptArtifacts?: AptArtifact[];
        }
        interface UploadYumArtifactMediaResponse {
            /** Operation to be returned to the user. */
            operation?: Operation;
        }
        interface UploadYumArtifactResponse {
            /** The Apt artifacts updated. */
            yumArtifacts?: YumArtifact[];
        }
        interface YumArtifact {
            /** Output only. Operating system architecture of the artifact. */
            architecture?: string;
            /** Output only. The Artifact Registry resource name of the artifact. */
            name?: string;
            /** Output only. The yum package name of the artifact. */
            packageName?: string;
            /** Output only. An artifact is a binary or source package. */
            packageType?: string;
        }
        interface OperationsResource {
            /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the operation resource. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Operation>;
        }
        interface DockerImagesResource {
            /** Gets a docker image. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Required. The name of the docker images. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<DockerImage>;
            /** Lists docker images. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The maximum number of artifacts to return. */
                pageSize?: number;
                /** The next_page_token value returned from a previous list request, if any. */
                pageToken?: string;
                /** Required. The name of the parent resource whose docker images will be listed. */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListDockerImagesResponse>;
        }
        interface RepositoriesResource {
            /** Gets a repository. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Required. The name of the repository to retrieve. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Repository>;
            /** Lists repositories. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The maximum number of repositories to return. */
                pageSize?: number;
                /** The next_page_token value returned from a previous list request, if any. */
                pageToken?: string;
                /** Required. The name of the parent resource whose repositories will be listed. */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListRepositoriesResponse>;
            dockerImages: DockerImagesResource;
        }
        interface LocationsResource {
            repositories: RepositoriesResource;
        }
        interface ProjectsResource {
            locations: LocationsResource;
        }

        const operations: OperationsResource;

        const projects: ProjectsResource;
    }
}
