/* This is stub file for gapi.client.osconfig-v1alpha definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20240728

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://osconfig.googleapis.com/$discovery/rest?version=v1alpha'
  );
  /** now we can use gapi.client.osconfig */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
    'https://www.googleapis.com/auth/cloud-platform',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Get OS policies compliance data for the specified Compute Engine VM instance. */
    await gapi.client.osconfig.projects.locations.instanceOSPoliciesCompliances.get(
      {
        name: 'Test string',
      }
    );
    /** List OS policies compliance data for all Compute Engine VM instances in the specified zone. */
    await gapi.client.osconfig.projects.locations.instanceOSPoliciesCompliances.list(
      {
        filter: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Get inventory data for the specified VM instance. If the VM has no associated inventory, the message `NOT_FOUND` is returned. */
    await gapi.client.osconfig.projects.locations.instances.inventories.get({
      name: 'Test string',
      view: 'Test string',
    });
    /** List inventory data for all VM instances in the specified zone. */
    await gapi.client.osconfig.projects.locations.instances.inventories.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
      view: 'Test string',
    });
    /** Get the OS policy assignment report for the specified Compute Engine VM instance. */
    await gapi.client.osconfig.projects.locations.instances.osPolicyAssignments.reports.get(
      {
        name: 'Test string',
      }
    );
    /** List OS policy assignment reports for all Compute Engine VM instances in the specified zone. */
    await gapi.client.osconfig.projects.locations.instances.osPolicyAssignments.reports.list(
      {
        filter: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Gets the vulnerability report for the specified VM instance. Only VMs with inventory data have vulnerability reports associated with them. */
    await gapi.client.osconfig.projects.locations.instances.vulnerabilityReports.get(
      {
        name: 'Test string',
      }
    );
    /** List vulnerability reports for all VM instances in the specified zone. */
    await gapi.client.osconfig.projects.locations.instances.vulnerabilityReports.list(
      {
        filter: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Create an OS policy assignment. This method also creates the first revision of the OS policy assignment. This method returns a long running operation (LRO) that contains the rollout details. The rollout can be cancelled by cancelling the LRO. For more information, see [Method: projects.locations.osPolicyAssignments.operations.cancel](https://cloud.google.com/compute/docs/osconfig/rest/v1alpha/projects.locations.osPolicyAssignments.operations/cancel). */
    await gapi.client.osconfig.projects.locations.osPolicyAssignments.create(
      {
        osPolicyAssignmentId: 'Test string',
        parent: 'Test string',
        requestId: 'Test string',
      },
      {
        baseline: true,
        deleted: true,
        description: 'Test string',
        etag: 'Test string',
        instanceFilter: {
          all: true,
          exclusionLabels: [
            {
              labels: {
                A: 'Test string',
              },
            },
          ],
          inclusionLabels: [
            {
              labels: {
                A: 'Test string',
              },
            },
          ],
          inventories: [
            {
              osShortName: 'Test string',
              osVersion: 'Test string',
            },
          ],
          osShortNames: ['Test string'],
        },
        name: 'Test string',
        osPolicies: [
          {
            allowNoResourceGroupMatch: true,
            description: 'Test string',
            id: 'Test string',
            mode: 'Test string',
            resourceGroups: [
              {
                inventoryFilters: [
                  {
                    osShortName: 'Test string',
                    osVersion: 'Test string',
                  },
                ],
                osFilter: {
                  osShortName: 'Test string',
                  osVersion: 'Test string',
                },
                resources: [
                  {
                    exec: {
                      enforce: {
                        args: ['Test string'],
                        file: {
                          allowInsecure: true,
                          gcs: {
                            bucket: 'Test string',
                            generation: 'Test string',
                            object: 'Test string',
                          },
                          localPath: 'Test string',
                          remote: {
                            sha256Checksum: 'Test string',
                            uri: 'Test string',
                          },
                        },
                        interpreter: 'Test string',
                        outputFilePath: 'Test string',
                        script: 'Test string',
                      },
                      validate: {
                        args: ['Test string'],
                        file: {
                          allowInsecure: true,
                          gcs: {
                            bucket: 'Test string',
                            generation: 'Test string',
                            object: 'Test string',
                          },
                          localPath: 'Test string',
                          remote: {
                            sha256Checksum: 'Test string',
                            uri: 'Test string',
                          },
                        },
                        interpreter: 'Test string',
                        outputFilePath: 'Test string',
                        script: 'Test string',
                      },
                    },
                    file: {
                      content: 'Test string',
                      file: {
                        allowInsecure: true,
                        gcs: {
                          bucket: 'Test string',
                          generation: 'Test string',
                          object: 'Test string',
                        },
                        localPath: 'Test string',
                        remote: {
                          sha256Checksum: 'Test string',
                          uri: 'Test string',
                        },
                      },
                      path: 'Test string',
                      permissions: 'Test string',
                      state: 'Test string',
                    },
                    id: 'Test string',
                    pkg: {
                      apt: {
                        name: 'Test string',
                      },
                      deb: {
                        pullDeps: true,
                        source: {
                          allowInsecure: true,
                          gcs: {
                            bucket: 'Test string',
                            generation: 'Test string',
                            object: 'Test string',
                          },
                          localPath: 'Test string',
                          remote: {
                            sha256Checksum: 'Test string',
                            uri: 'Test string',
                          },
                        },
                      },
                      desiredState: 'Test string',
                      googet: {
                        name: 'Test string',
                      },
                      msi: {
                        properties: ['Test string'],
                        source: {
                          allowInsecure: true,
                          gcs: {
                            bucket: 'Test string',
                            generation: 'Test string',
                            object: 'Test string',
                          },
                          localPath: 'Test string',
                          remote: {
                            sha256Checksum: 'Test string',
                            uri: 'Test string',
                          },
                        },
                      },
                      rpm: {
                        pullDeps: true,
                        source: {
                          allowInsecure: true,
                          gcs: {
                            bucket: 'Test string',
                            generation: 'Test string',
                            object: 'Test string',
                          },
                          localPath: 'Test string',
                          remote: {
                            sha256Checksum: 'Test string',
                            uri: 'Test string',
                          },
                        },
                      },
                      yum: {
                        name: 'Test string',
                      },
                      zypper: {
                        name: 'Test string',
                      },
                    },
                    repository: {
                      apt: {
                        archiveType: 'Test string',
                        components: ['Test string'],
                        distribution: 'Test string',
                        gpgKey: 'Test string',
                        uri: 'Test string',
                      },
                      goo: {
                        name: 'Test string',
                        url: 'Test string',
                      },
                      yum: {
                        baseUrl: 'Test string',
                        displayName: 'Test string',
                        gpgKeys: ['Test string'],
                        id: 'Test string',
                      },
                      zypper: {
                        baseUrl: 'Test string',
                        displayName: 'Test string',
                        gpgKeys: ['Test string'],
                        id: 'Test string',
                      },
                    },
                  },
                ],
              },
            ],
          },
        ],
        reconciling: true,
        revisionCreateTime: 'Test string',
        revisionId: 'Test string',
        rollout: {
          disruptionBudget: {
            fixed: 42,
            percent: 42,
          },
          minWaitDuration: 'Test string',
        },
        rolloutState: 'Test string',
        uid: 'Test string',
      }
    );
    /** Delete the OS policy assignment. This method creates a new revision of the OS policy assignment. This method returns a long running operation (LRO) that contains the rollout details. The rollout can be cancelled by cancelling the LRO. If the LRO completes and is not cancelled, all revisions associated with the OS policy assignment are deleted. For more information, see [Method: projects.locations.osPolicyAssignments.operations.cancel](https://cloud.google.com/compute/docs/osconfig/rest/v1alpha/projects.locations.osPolicyAssignments.operations/cancel). */
    await gapi.client.osconfig.projects.locations.osPolicyAssignments.delete({
      name: 'Test string',
      requestId: 'Test string',
    });
    /** Retrieve an existing OS policy assignment. This method always returns the latest revision. In order to retrieve a previous revision of the assignment, also provide the revision ID in the `name` parameter. */
    await gapi.client.osconfig.projects.locations.osPolicyAssignments.get({
      name: 'Test string',
    });
    /** List the OS policy assignments under the parent resource. For each OS policy assignment, the latest revision is returned. */
    await gapi.client.osconfig.projects.locations.osPolicyAssignments.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** List the OS policy assignment revisions for a given OS policy assignment. */
    await gapi.client.osconfig.projects.locations.osPolicyAssignments.listRevisions(
      {
        name: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
      }
    );
    /** Update an existing OS policy assignment. This method creates a new revision of the OS policy assignment. This method returns a long running operation (LRO) that contains the rollout details. The rollout can be cancelled by cancelling the LRO. For more information, see [Method: projects.locations.osPolicyAssignments.operations.cancel](https://cloud.google.com/compute/docs/osconfig/rest/v1alpha/projects.locations.osPolicyAssignments.operations/cancel). */
    await gapi.client.osconfig.projects.locations.osPolicyAssignments.patch(
      {
        allowMissing: true,
        name: 'Test string',
        requestId: 'Test string',
        updateMask: 'Test string',
      },
      {
        baseline: true,
        deleted: true,
        description: 'Test string',
        etag: 'Test string',
        instanceFilter: {
          all: true,
          exclusionLabels: [
            {
              labels: {
                A: 'Test string',
              },
            },
          ],
          inclusionLabels: [
            {
              labels: {
                A: 'Test string',
              },
            },
          ],
          inventories: [
            {
              osShortName: 'Test string',
              osVersion: 'Test string',
            },
          ],
          osShortNames: ['Test string'],
        },
        name: 'Test string',
        osPolicies: [
          {
            allowNoResourceGroupMatch: true,
            description: 'Test string',
            id: 'Test string',
            mode: 'Test string',
            resourceGroups: [
              {
                inventoryFilters: [
                  {
                    osShortName: 'Test string',
                    osVersion: 'Test string',
                  },
                ],
                osFilter: {
                  osShortName: 'Test string',
                  osVersion: 'Test string',
                },
                resources: [
                  {
                    exec: {
                      enforce: {
                        args: ['Test string'],
                        file: {
                          allowInsecure: true,
                          gcs: {
                            bucket: 'Test string',
                            generation: 'Test string',
                            object: 'Test string',
                          },
                          localPath: 'Test string',
                          remote: {
                            sha256Checksum: 'Test string',
                            uri: 'Test string',
                          },
                        },
                        interpreter: 'Test string',
                        outputFilePath: 'Test string',
                        script: 'Test string',
                      },
                      validate: {
                        args: ['Test string'],
                        file: {
                          allowInsecure: true,
                          gcs: {
                            bucket: 'Test string',
                            generation: 'Test string',
                            object: 'Test string',
                          },
                          localPath: 'Test string',
                          remote: {
                            sha256Checksum: 'Test string',
                            uri: 'Test string',
                          },
                        },
                        interpreter: 'Test string',
                        outputFilePath: 'Test string',
                        script: 'Test string',
                      },
                    },
                    file: {
                      content: 'Test string',
                      file: {
                        allowInsecure: true,
                        gcs: {
                          bucket: 'Test string',
                          generation: 'Test string',
                          object: 'Test string',
                        },
                        localPath: 'Test string',
                        remote: {
                          sha256Checksum: 'Test string',
                          uri: 'Test string',
                        },
                      },
                      path: 'Test string',
                      permissions: 'Test string',
                      state: 'Test string',
                    },
                    id: 'Test string',
                    pkg: {
                      apt: {
                        name: 'Test string',
                      },
                      deb: {
                        pullDeps: true,
                        source: {
                          allowInsecure: true,
                          gcs: {
                            bucket: 'Test string',
                            generation: 'Test string',
                            object: 'Test string',
                          },
                          localPath: 'Test string',
                          remote: {
                            sha256Checksum: 'Test string',
                            uri: 'Test string',
                          },
                        },
                      },
                      desiredState: 'Test string',
                      googet: {
                        name: 'Test string',
                      },
                      msi: {
                        properties: ['Test string'],
                        source: {
                          allowInsecure: true,
                          gcs: {
                            bucket: 'Test string',
                            generation: 'Test string',
                            object: 'Test string',
                          },
                          localPath: 'Test string',
                          remote: {
                            sha256Checksum: 'Test string',
                            uri: 'Test string',
                          },
                        },
                      },
                      rpm: {
                        pullDeps: true,
                        source: {
                          allowInsecure: true,
                          gcs: {
                            bucket: 'Test string',
                            generation: 'Test string',
                            object: 'Test string',
                          },
                          localPath: 'Test string',
                          remote: {
                            sha256Checksum: 'Test string',
                            uri: 'Test string',
                          },
                        },
                      },
                      yum: {
                        name: 'Test string',
                      },
                      zypper: {
                        name: 'Test string',
                      },
                    },
                    repository: {
                      apt: {
                        archiveType: 'Test string',
                        components: ['Test string'],
                        distribution: 'Test string',
                        gpgKey: 'Test string',
                        uri: 'Test string',
                      },
                      goo: {
                        name: 'Test string',
                        url: 'Test string',
                      },
                      yum: {
                        baseUrl: 'Test string',
                        displayName: 'Test string',
                        gpgKeys: ['Test string'],
                        id: 'Test string',
                      },
                      zypper: {
                        baseUrl: 'Test string',
                        displayName: 'Test string',
                        gpgKeys: ['Test string'],
                        id: 'Test string',
                      },
                    },
                  },
                ],
              },
            ],
          },
        ],
        reconciling: true,
        revisionCreateTime: 'Test string',
        revisionId: 'Test string',
        rollout: {
          disruptionBudget: {
            fixed: 42,
            percent: 42,
          },
          minWaitDuration: 'Test string',
        },
        rolloutState: 'Test string',
        uid: 'Test string',
      }
    );
    /** Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`. */
    await gapi.client.osconfig.projects.locations.osPolicyAssignments.operations.cancel(
      {
        name: 'Test string',
      },
      {}
    );
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.osconfig.projects.locations.osPolicyAssignments.operations.get(
      {
        name: 'Test string',
      }
    );
  }
});
