/* This is stub file for gapi.client.firestore-v1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20250714

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://firestore.googleapis.com/$discovery/rest?version=v1',
  );
  /** now we can use gapi.client.firestore */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
    'https://www.googleapis.com/auth/cloud-platform',
    /** View and manage your Google Cloud Datastore data */
    'https://www.googleapis.com/auth/datastore',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Bulk deletes a subset of documents from Google Cloud Firestore. Documents created or updated after the underlying system starts to process the request will not be deleted. The bulk delete occurs in the background and its progress can be monitored and managed via the Operation resource that is created. For more details on bulk delete behavior, refer to: https://cloud.google.com/firestore/docs/manage-data/bulk-delete */
    await gapi.client.firestore.projects.databases.bulkDeleteDocuments(
      {
        name: 'Test string',
      },
      {
        collectionIds: ['Test string'],
        namespaceIds: ['Test string'],
      },
    );
    /** Creates a new database by cloning an existing one. The new database must be in the same cloud region or multi-region location as the existing database. This behaves similar to FirestoreAdmin.CreateDatabase except instead of creating a new empty database, a new database is created with the database type, index configuration, and documents from an existing database. The long-running operation can be used to track the progress of the clone, with the Operation's metadata field type being the CloneDatabaseMetadata. The response type is the Database if the clone was successful. The new database is not readable or writeable until the LRO has completed. */
    await gapi.client.firestore.projects.databases.clone(
      {
        parent: 'Test string',
      },
      {
        databaseId: 'Test string',
        encryptionConfig: {
          customerManagedEncryption: {
            kmsKeyName: 'Test string',
          },
          googleDefaultEncryption: {},
          useSourceEncryption: {},
        },
        pitrSnapshot: {
          database: 'Test string',
          databaseUid: 'Test string',
          snapshotTime: 'Test string',
        },
        tags: {
          A: 'Test string',
        },
      },
    );
    /** Create a database. */
    await gapi.client.firestore.projects.databases.create(
      {
        databaseId: 'Test string',
        parent: 'Test string',
      },
      {
        appEngineIntegrationMode: 'Test string',
        cmekConfig: {
          activeKeyVersion: ['Test string'],
          kmsKeyName: 'Test string',
        },
        concurrencyMode: 'Test string',
        createTime: 'Test string',
        databaseEdition: 'Test string',
        deleteProtectionState: 'Test string',
        deleteTime: 'Test string',
        earliestVersionTime: 'Test string',
        etag: 'Test string',
        freeTier: true,
        keyPrefix: 'Test string',
        locationId: 'Test string',
        name: 'Test string',
        pointInTimeRecoveryEnablement: 'Test string',
        previousId: 'Test string',
        sourceInfo: {
          backup: {
            backup: 'Test string',
          },
          operation: 'Test string',
        },
        tags: {
          A: 'Test string',
        },
        type: 'Test string',
        uid: 'Test string',
        updateTime: 'Test string',
        versionRetentionPeriod: 'Test string',
      },
    );
    /** Deletes a database. */
    await gapi.client.firestore.projects.databases.delete({
      etag: 'Test string',
      name: 'Test string',
    });
    /** Exports a copy of all or a subset of documents from Google Cloud Firestore to another storage system, such as Google Cloud Storage. Recent updates to documents may not be reflected in the export. The export occurs in the background and its progress can be monitored and managed via the Operation resource that is created. The output of an export may only be used once the associated operation is done. If an export operation is cancelled before completion it may leave partial data behind in Google Cloud Storage. For more details on export behavior and output format, refer to: https://cloud.google.com/firestore/docs/manage-data/export-import */
    await gapi.client.firestore.projects.databases.exportDocuments(
      {
        name: 'Test string',
      },
      {
        collectionIds: ['Test string'],
        namespaceIds: ['Test string'],
        outputUriPrefix: 'Test string',
        snapshotTime: 'Test string',
      },
    );
    /** Gets information about a database. */
    await gapi.client.firestore.projects.databases.get({
      name: 'Test string',
    });
    /** Imports documents into Google Cloud Firestore. Existing documents with the same name are overwritten. The import occurs in the background and its progress can be monitored and managed via the Operation resource that is created. If an ImportDocuments operation is cancelled, it is possible that a subset of the data has already been imported to Cloud Firestore. */
    await gapi.client.firestore.projects.databases.importDocuments(
      {
        name: 'Test string',
      },
      {
        collectionIds: ['Test string'],
        inputUriPrefix: 'Test string',
        namespaceIds: ['Test string'],
      },
    );
    /** List all the databases in the project. */
    await gapi.client.firestore.projects.databases.list({
      parent: 'Test string',
      showDeleted: true,
    });
    /** Updates a database. */
    await gapi.client.firestore.projects.databases.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        appEngineIntegrationMode: 'Test string',
        cmekConfig: {
          activeKeyVersion: ['Test string'],
          kmsKeyName: 'Test string',
        },
        concurrencyMode: 'Test string',
        createTime: 'Test string',
        databaseEdition: 'Test string',
        deleteProtectionState: 'Test string',
        deleteTime: 'Test string',
        earliestVersionTime: 'Test string',
        etag: 'Test string',
        freeTier: true,
        keyPrefix: 'Test string',
        locationId: 'Test string',
        name: 'Test string',
        pointInTimeRecoveryEnablement: 'Test string',
        previousId: 'Test string',
        sourceInfo: {
          backup: {
            backup: 'Test string',
          },
          operation: 'Test string',
        },
        tags: {
          A: 'Test string',
        },
        type: 'Test string',
        uid: 'Test string',
        updateTime: 'Test string',
        versionRetentionPeriod: 'Test string',
      },
    );
    /** Creates a new database by restoring from an existing backup. The new database must be in the same cloud region or multi-region location as the existing backup. This behaves similar to FirestoreAdmin.CreateDatabase except instead of creating a new empty database, a new database is created with the database type, index configuration, and documents from an existing backup. The long-running operation can be used to track the progress of the restore, with the Operation's metadata field type being the RestoreDatabaseMetadata. The response type is the Database if the restore was successful. The new database is not readable or writeable until the LRO has completed. */
    await gapi.client.firestore.projects.databases.restore(
      {
        parent: 'Test string',
      },
      {
        backup: 'Test string',
        databaseId: 'Test string',
        encryptionConfig: {
          customerManagedEncryption: {
            kmsKeyName: 'Test string',
          },
          googleDefaultEncryption: {},
          useSourceEncryption: {},
        },
        tags: {
          A: 'Test string',
        },
      },
    );
    /** Creates a backup schedule on a database. At most two backup schedules can be configured on a database, one daily backup schedule and one weekly backup schedule. */
    await gapi.client.firestore.projects.databases.backupSchedules.create(
      {
        parent: 'Test string',
      },
      {
        createTime: 'Test string',
        dailyRecurrence: {},
        name: 'Test string',
        retention: 'Test string',
        updateTime: 'Test string',
        weeklyRecurrence: {
          day: 'Test string',
        },
      },
    );
    /** Deletes a backup schedule. */
    await gapi.client.firestore.projects.databases.backupSchedules.delete({
      name: 'Test string',
    });
    /** Gets information about a backup schedule. */
    await gapi.client.firestore.projects.databases.backupSchedules.get({
      name: 'Test string',
    });
    /** List backup schedules. */
    await gapi.client.firestore.projects.databases.backupSchedules.list({
      parent: 'Test string',
    });
    /** Updates a backup schedule. */
    await gapi.client.firestore.projects.databases.backupSchedules.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        createTime: 'Test string',
        dailyRecurrence: {},
        name: 'Test string',
        retention: 'Test string',
        updateTime: 'Test string',
        weeklyRecurrence: {
          day: 'Test string',
        },
      },
    );
    /** Gets the metadata and configuration for a Field. */
    await gapi.client.firestore.projects.databases.collectionGroups.fields.get({
      name: 'Test string',
    });
    /** Lists the field configuration and metadata for this database. Currently, FirestoreAdmin.ListFields only supports listing fields that have been explicitly overridden. To issue this query, call FirestoreAdmin.ListFields with the filter set to `indexConfig.usesAncestorConfig:false` or `ttlConfig:*`. */
    await gapi.client.firestore.projects.databases.collectionGroups.fields.list(
      {
        filter: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
    /** Updates a field configuration. Currently, field updates apply only to single field index configuration. However, calls to FirestoreAdmin.UpdateField should provide a field mask to avoid changing any configuration that the caller isn't aware of. The field mask should be specified as: `{ paths: "index_config" }`. This call returns a google.longrunning.Operation which may be used to track the status of the field update. The metadata for the operation will be the type FieldOperationMetadata. To configure the default field settings for the database, use the special `Field` with resource name: `projects/{project_id}/databases/{database_id}/collectionGroups/__default__/fields/*`. */
    await gapi.client.firestore.projects.databases.collectionGroups.fields.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        indexConfig: {
          ancestorField: 'Test string',
          indexes: [
            {
              apiScope: 'Test string',
              density: 'Test string',
              fields: [
                {
                  arrayConfig: 'Test string',
                  fieldPath: 'Test string',
                  order: 'Test string',
                  vectorConfig: {
                    dimension: 42,
                    flat: {},
                  },
                },
              ],
              multikey: true,
              name: 'Test string',
              queryScope: 'Test string',
              shardCount: 42,
              state: 'Test string',
            },
          ],
          reverting: true,
          usesAncestorConfig: true,
        },
        name: 'Test string',
        ttlConfig: {
          state: 'Test string',
        },
      },
    );
    /** Creates a composite index. This returns a google.longrunning.Operation which may be used to track the status of the creation. The metadata for the operation will be the type IndexOperationMetadata. */
    await gapi.client.firestore.projects.databases.collectionGroups.indexes.create(
      {
        parent: 'Test string',
      },
      {
        apiScope: 'Test string',
        density: 'Test string',
        fields: [
          {
            arrayConfig: 'Test string',
            fieldPath: 'Test string',
            order: 'Test string',
            vectorConfig: {
              dimension: 42,
              flat: {},
            },
          },
        ],
        multikey: true,
        name: 'Test string',
        queryScope: 'Test string',
        shardCount: 42,
        state: 'Test string',
      },
    );
    /** Deletes a composite index. */
    await gapi.client.firestore.projects.databases.collectionGroups.indexes.delete(
      {
        name: 'Test string',
      },
    );
    /** Gets a composite index. */
    await gapi.client.firestore.projects.databases.collectionGroups.indexes.get(
      {
        name: 'Test string',
      },
    );
    /** Lists composite indexes. */
    await gapi.client.firestore.projects.databases.collectionGroups.indexes.list(
      {
        filter: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
    /** Gets multiple documents. Documents returned by this method are not guaranteed to be returned in the same order that they were requested. */
    await gapi.client.firestore.projects.databases.documents.batchGet(
      {
        database: 'Test string',
      },
      {
        documents: ['Test string'],
        mask: {
          fieldPaths: ['Test string'],
        },
        newTransaction: {
          readOnly: {
            readTime: 'Test string',
          },
          readWrite: {
            retryTransaction: 'Test string',
          },
        },
        readTime: 'Test string',
        transaction: 'Test string',
      },
    );
    /** Applies a batch of write operations. The BatchWrite method does not apply the write operations atomically and can apply them out of order. Method does not allow more than one write per document. Each write succeeds or fails independently. See the BatchWriteResponse for the success status of each write. If you require an atomically applied set of writes, use Commit instead. */
    await gapi.client.firestore.projects.databases.documents.batchWrite(
      {
        database: 'Test string',
      },
      {
        labels: {
          A: 'Test string',
        },
        writes: [
          {
            currentDocument: {
              exists: true,
              updateTime: 'Test string',
            },
            delete: 'Test string',
            transform: {
              document: 'Test string',
              fieldTransforms: [
                {
                  appendMissingElements: {
                    values: [
                      {
                        arrayValue: undefined,
                        booleanValue: true,
                        bytesValue: 'Test string',
                        doubleValue: 42,
                        geoPointValue: {
                          latitude: 42,
                          longitude: 42,
                        },
                        integerValue: 'Test string',
                        mapValue: {
                          fields: undefined,
                        },
                        nullValue: 'Test string',
                        referenceValue: 'Test string',
                        stringValue: 'Test string',
                        timestampValue: 'Test string',
                      },
                    ],
                  },
                  fieldPath: 'Test string',
                  increment: {
                    arrayValue: {
                      values: undefined,
                    },
                    booleanValue: true,
                    bytesValue: 'Test string',
                    doubleValue: 42,
                    geoPointValue: {
                      latitude: 42,
                      longitude: 42,
                    },
                    integerValue: 'Test string',
                    mapValue: {
                      fields: undefined,
                    },
                    nullValue: 'Test string',
                    referenceValue: 'Test string',
                    stringValue: 'Test string',
                    timestampValue: 'Test string',
                  },
                  maximum: {
                    arrayValue: {
                      values: undefined,
                    },
                    booleanValue: true,
                    bytesValue: 'Test string',
                    doubleValue: 42,
                    geoPointValue: {
                      latitude: 42,
                      longitude: 42,
                    },
                    integerValue: 'Test string',
                    mapValue: {
                      fields: undefined,
                    },
                    nullValue: 'Test string',
                    referenceValue: 'Test string',
                    stringValue: 'Test string',
                    timestampValue: 'Test string',
                  },
                  minimum: {
                    arrayValue: {
                      values: undefined,
                    },
                    booleanValue: true,
                    bytesValue: 'Test string',
                    doubleValue: 42,
                    geoPointValue: {
                      latitude: 42,
                      longitude: 42,
                    },
                    integerValue: 'Test string',
                    mapValue: {
                      fields: undefined,
                    },
                    nullValue: 'Test string',
                    referenceValue: 'Test string',
                    stringValue: 'Test string',
                    timestampValue: 'Test string',
                  },
                  removeAllFromArray: {
                    values: [
                      {
                        arrayValue: undefined,
                        booleanValue: true,
                        bytesValue: 'Test string',
                        doubleValue: 42,
                        geoPointValue: {
                          latitude: 42,
                          longitude: 42,
                        },
                        integerValue: 'Test string',
                        mapValue: {
                          fields: undefined,
                        },
                        nullValue: 'Test string',
                        referenceValue: 'Test string',
                        stringValue: 'Test string',
                        timestampValue: 'Test string',
                      },
                    ],
                  },
                  setToServerValue: 'Test string',
                },
              ],
            },
            update: {
              createTime: 'Test string',
              fields: {
                A: {
                  arrayValue: {
                    values: undefined,
                  },
                  booleanValue: true,
                  bytesValue: 'Test string',
                  doubleValue: 42,
                  geoPointValue: {
                    latitude: 42,
                    longitude: 42,
                  },
                  integerValue: 'Test string',
                  mapValue: {
                    fields: undefined,
                  },
                  nullValue: 'Test string',
                  referenceValue: 'Test string',
                  stringValue: 'Test string',
                  timestampValue: 'Test string',
                },
              },
              name: 'Test string',
              updateTime: 'Test string',
            },
            updateMask: {
              fieldPaths: ['Test string'],
            },
            updateTransforms: [
              {
                appendMissingElements: {
                  values: [
                    {
                      arrayValue: undefined,
                      booleanValue: true,
                      bytesValue: 'Test string',
                      doubleValue: 42,
                      geoPointValue: {
                        latitude: 42,
                        longitude: 42,
                      },
                      integerValue: 'Test string',
                      mapValue: {
                        fields: undefined,
                      },
                      nullValue: 'Test string',
                      referenceValue: 'Test string',
                      stringValue: 'Test string',
                      timestampValue: 'Test string',
                    },
                  ],
                },
                fieldPath: 'Test string',
                increment: {
                  arrayValue: {
                    values: undefined,
                  },
                  booleanValue: true,
                  bytesValue: 'Test string',
                  doubleValue: 42,
                  geoPointValue: {
                    latitude: 42,
                    longitude: 42,
                  },
                  integerValue: 'Test string',
                  mapValue: {
                    fields: undefined,
                  },
                  nullValue: 'Test string',
                  referenceValue: 'Test string',
                  stringValue: 'Test string',
                  timestampValue: 'Test string',
                },
                maximum: {
                  arrayValue: {
                    values: undefined,
                  },
                  booleanValue: true,
                  bytesValue: 'Test string',
                  doubleValue: 42,
                  geoPointValue: {
                    latitude: 42,
                    longitude: 42,
                  },
                  integerValue: 'Test string',
                  mapValue: {
                    fields: undefined,
                  },
                  nullValue: 'Test string',
                  referenceValue: 'Test string',
                  stringValue: 'Test string',
                  timestampValue: 'Test string',
                },
                minimum: {
                  arrayValue: {
                    values: undefined,
                  },
                  booleanValue: true,
                  bytesValue: 'Test string',
                  doubleValue: 42,
                  geoPointValue: {
                    latitude: 42,
                    longitude: 42,
                  },
                  integerValue: 'Test string',
                  mapValue: {
                    fields: undefined,
                  },
                  nullValue: 'Test string',
                  referenceValue: 'Test string',
                  stringValue: 'Test string',
                  timestampValue: 'Test string',
                },
                removeAllFromArray: {
                  values: [
                    {
                      arrayValue: undefined,
                      booleanValue: true,
                      bytesValue: 'Test string',
                      doubleValue: 42,
                      geoPointValue: {
                        latitude: 42,
                        longitude: 42,
                      },
                      integerValue: 'Test string',
                      mapValue: {
                        fields: undefined,
                      },
                      nullValue: 'Test string',
                      referenceValue: 'Test string',
                      stringValue: 'Test string',
                      timestampValue: 'Test string',
                    },
                  ],
                },
                setToServerValue: 'Test string',
              },
            ],
          },
        ],
      },
    );
    /** Starts a new transaction. */
    await gapi.client.firestore.projects.databases.documents.beginTransaction(
      {
        database: 'Test string',
      },
      {
        options: {
          readOnly: {
            readTime: 'Test string',
          },
          readWrite: {
            retryTransaction: 'Test string',
          },
        },
      },
    );
    /** Commits a transaction, while optionally updating documents. */
    await gapi.client.firestore.projects.databases.documents.commit(
      {
        database: 'Test string',
      },
      {
        transaction: 'Test string',
        writes: [
          {
            currentDocument: {
              exists: true,
              updateTime: 'Test string',
            },
            delete: 'Test string',
            transform: {
              document: 'Test string',
              fieldTransforms: [
                {
                  appendMissingElements: {
                    values: [
                      {
                        arrayValue: undefined,
                        booleanValue: true,
                        bytesValue: 'Test string',
                        doubleValue: 42,
                        geoPointValue: {
                          latitude: 42,
                          longitude: 42,
                        },
                        integerValue: 'Test string',
                        mapValue: {
                          fields: undefined,
                        },
                        nullValue: 'Test string',
                        referenceValue: 'Test string',
                        stringValue: 'Test string',
                        timestampValue: 'Test string',
                      },
                    ],
                  },
                  fieldPath: 'Test string',
                  increment: {
                    arrayValue: {
                      values: undefined,
                    },
                    booleanValue: true,
                    bytesValue: 'Test string',
                    doubleValue: 42,
                    geoPointValue: {
                      latitude: 42,
                      longitude: 42,
                    },
                    integerValue: 'Test string',
                    mapValue: {
                      fields: undefined,
                    },
                    nullValue: 'Test string',
                    referenceValue: 'Test string',
                    stringValue: 'Test string',
                    timestampValue: 'Test string',
                  },
                  maximum: {
                    arrayValue: {
                      values: undefined,
                    },
                    booleanValue: true,
                    bytesValue: 'Test string',
                    doubleValue: 42,
                    geoPointValue: {
                      latitude: 42,
                      longitude: 42,
                    },
                    integerValue: 'Test string',
                    mapValue: {
                      fields: undefined,
                    },
                    nullValue: 'Test string',
                    referenceValue: 'Test string',
                    stringValue: 'Test string',
                    timestampValue: 'Test string',
                  },
                  minimum: {
                    arrayValue: {
                      values: undefined,
                    },
                    booleanValue: true,
                    bytesValue: 'Test string',
                    doubleValue: 42,
                    geoPointValue: {
                      latitude: 42,
                      longitude: 42,
                    },
                    integerValue: 'Test string',
                    mapValue: {
                      fields: undefined,
                    },
                    nullValue: 'Test string',
                    referenceValue: 'Test string',
                    stringValue: 'Test string',
                    timestampValue: 'Test string',
                  },
                  removeAllFromArray: {
                    values: [
                      {
                        arrayValue: undefined,
                        booleanValue: true,
                        bytesValue: 'Test string',
                        doubleValue: 42,
                        geoPointValue: {
                          latitude: 42,
                          longitude: 42,
                        },
                        integerValue: 'Test string',
                        mapValue: {
                          fields: undefined,
                        },
                        nullValue: 'Test string',
                        referenceValue: 'Test string',
                        stringValue: 'Test string',
                        timestampValue: 'Test string',
                      },
                    ],
                  },
                  setToServerValue: 'Test string',
                },
              ],
            },
            update: {
              createTime: 'Test string',
              fields: {
                A: {
                  arrayValue: {
                    values: undefined,
                  },
                  booleanValue: true,
                  bytesValue: 'Test string',
                  doubleValue: 42,
                  geoPointValue: {
                    latitude: 42,
                    longitude: 42,
                  },
                  integerValue: 'Test string',
                  mapValue: {
                    fields: undefined,
                  },
                  nullValue: 'Test string',
                  referenceValue: 'Test string',
                  stringValue: 'Test string',
                  timestampValue: 'Test string',
                },
              },
              name: 'Test string',
              updateTime: 'Test string',
            },
            updateMask: {
              fieldPaths: ['Test string'],
            },
            updateTransforms: [
              {
                appendMissingElements: {
                  values: [
                    {
                      arrayValue: undefined,
                      booleanValue: true,
                      bytesValue: 'Test string',
                      doubleValue: 42,
                      geoPointValue: {
                        latitude: 42,
                        longitude: 42,
                      },
                      integerValue: 'Test string',
                      mapValue: {
                        fields: undefined,
                      },
                      nullValue: 'Test string',
                      referenceValue: 'Test string',
                      stringValue: 'Test string',
                      timestampValue: 'Test string',
                    },
                  ],
                },
                fieldPath: 'Test string',
                increment: {
                  arrayValue: {
                    values: undefined,
                  },
                  booleanValue: true,
                  bytesValue: 'Test string',
                  doubleValue: 42,
                  geoPointValue: {
                    latitude: 42,
                    longitude: 42,
                  },
                  integerValue: 'Test string',
                  mapValue: {
                    fields: undefined,
                  },
                  nullValue: 'Test string',
                  referenceValue: 'Test string',
                  stringValue: 'Test string',
                  timestampValue: 'Test string',
                },
                maximum: {
                  arrayValue: {
                    values: undefined,
                  },
                  booleanValue: true,
                  bytesValue: 'Test string',
                  doubleValue: 42,
                  geoPointValue: {
                    latitude: 42,
                    longitude: 42,
                  },
                  integerValue: 'Test string',
                  mapValue: {
                    fields: undefined,
                  },
                  nullValue: 'Test string',
                  referenceValue: 'Test string',
                  stringValue: 'Test string',
                  timestampValue: 'Test string',
                },
                minimum: {
                  arrayValue: {
                    values: undefined,
                  },
                  booleanValue: true,
                  bytesValue: 'Test string',
                  doubleValue: 42,
                  geoPointValue: {
                    latitude: 42,
                    longitude: 42,
                  },
                  integerValue: 'Test string',
                  mapValue: {
                    fields: undefined,
                  },
                  nullValue: 'Test string',
                  referenceValue: 'Test string',
                  stringValue: 'Test string',
                  timestampValue: 'Test string',
                },
                removeAllFromArray: {
                  values: [
                    {
                      arrayValue: undefined,
                      booleanValue: true,
                      bytesValue: 'Test string',
                      doubleValue: 42,
                      geoPointValue: {
                        latitude: 42,
                        longitude: 42,
                      },
                      integerValue: 'Test string',
                      mapValue: {
                        fields: undefined,
                      },
                      nullValue: 'Test string',
                      referenceValue: 'Test string',
                      stringValue: 'Test string',
                      timestampValue: 'Test string',
                    },
                  ],
                },
                setToServerValue: 'Test string',
              },
            ],
          },
        ],
      },
    );
    /** Creates a new document. */
    await gapi.client.firestore.projects.databases.documents.createDocument(
      {
        collectionId: 'Test string',
        documentId: 'Test string',
        'mask.fieldPaths': 'Test string',
        parent: 'Test string',
      },
      {
        createTime: 'Test string',
        fields: {
          A: {
            arrayValue: {
              values: undefined,
            },
            booleanValue: true,
            bytesValue: 'Test string',
            doubleValue: 42,
            geoPointValue: {
              latitude: 42,
              longitude: 42,
            },
            integerValue: 'Test string',
            mapValue: {
              fields: undefined,
            },
            nullValue: 'Test string',
            referenceValue: 'Test string',
            stringValue: 'Test string',
            timestampValue: 'Test string',
          },
        },
        name: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Deletes a document. */
    await gapi.client.firestore.projects.databases.documents.delete({
      'currentDocument.exists': true,
      'currentDocument.updateTime': 'Test string',
      name: 'Test string',
    });
    /** Gets a single document. */
    await gapi.client.firestore.projects.databases.documents.get({
      'mask.fieldPaths': 'Test string',
      name: 'Test string',
      readTime: 'Test string',
      transaction: 'Test string',
    });
    /** Lists documents. */
    await gapi.client.firestore.projects.databases.documents.list({
      collectionId: 'Test string',
      'mask.fieldPaths': 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
      readTime: 'Test string',
      showMissing: true,
      transaction: 'Test string',
    });
    /** Lists all the collection IDs underneath a document. */
    await gapi.client.firestore.projects.databases.documents.listCollectionIds(
      {
        parent: 'Test string',
      },
      {
        pageSize: 42,
        pageToken: 'Test string',
        readTime: 'Test string',
      },
    );
    /** Lists documents. */
    await gapi.client.firestore.projects.databases.documents.listDocuments({
      collectionId: 'Test string',
      'mask.fieldPaths': 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
      readTime: 'Test string',
      showMissing: true,
      transaction: 'Test string',
    });
    /** Listens to changes. This method is only available via gRPC or WebChannel (not REST). */
    await gapi.client.firestore.projects.databases.documents.listen(
      {
        database: 'Test string',
      },
      {
        addTarget: {
          documents: {
            documents: ['Test string'],
          },
          expectedCount: 42,
          once: true,
          query: {
            parent: 'Test string',
            structuredQuery: {
              endAt: {
                before: true,
                values: [
                  {
                    arrayValue: {
                      values: undefined,
                    },
                    booleanValue: true,
                    bytesValue: 'Test string',
                    doubleValue: 42,
                    geoPointValue: {
                      latitude: 42,
                      longitude: 42,
                    },
                    integerValue: 'Test string',
                    mapValue: {
                      fields: undefined,
                    },
                    nullValue: 'Test string',
                    referenceValue: 'Test string',
                    stringValue: 'Test string',
                    timestampValue: 'Test string',
                  },
                ],
              },
              findNearest: {
                distanceMeasure: 'Test string',
                distanceResultField: 'Test string',
                distanceThreshold: 42,
                limit: 42,
                queryVector: {
                  arrayValue: {
                    values: undefined,
                  },
                  booleanValue: true,
                  bytesValue: 'Test string',
                  doubleValue: 42,
                  geoPointValue: {
                    latitude: 42,
                    longitude: 42,
                  },
                  integerValue: 'Test string',
                  mapValue: {
                    fields: undefined,
                  },
                  nullValue: 'Test string',
                  referenceValue: 'Test string',
                  stringValue: 'Test string',
                  timestampValue: 'Test string',
                },
                vectorField: {
                  fieldPath: 'Test string',
                },
              },
              from: [
                {
                  allDescendants: true,
                  collectionId: 'Test string',
                },
              ],
              limit: 42,
              offset: 42,
              orderBy: [
                {
                  direction: 'Test string',
                  field: {
                    fieldPath: 'Test string',
                  },
                },
              ],
              select: {
                fields: [
                  {
                    fieldPath: 'Test string',
                  },
                ],
              },
              startAt: {
                before: true,
                values: [
                  {
                    arrayValue: {
                      values: undefined,
                    },
                    booleanValue: true,
                    bytesValue: 'Test string',
                    doubleValue: 42,
                    geoPointValue: {
                      latitude: 42,
                      longitude: 42,
                    },
                    integerValue: 'Test string',
                    mapValue: {
                      fields: undefined,
                    },
                    nullValue: 'Test string',
                    referenceValue: 'Test string',
                    stringValue: 'Test string',
                    timestampValue: 'Test string',
                  },
                ],
              },
              where: {
                compositeFilter: {
                  filters: undefined,
                  op: 'Test string',
                },
                fieldFilter: {
                  field: {
                    fieldPath: 'Test string',
                  },
                  op: 'Test string',
                  value: {
                    arrayValue: {
                      values: undefined,
                    },
                    booleanValue: true,
                    bytesValue: 'Test string',
                    doubleValue: 42,
                    geoPointValue: {
                      latitude: 42,
                      longitude: 42,
                    },
                    integerValue: 'Test string',
                    mapValue: {
                      fields: undefined,
                    },
                    nullValue: 'Test string',
                    referenceValue: 'Test string',
                    stringValue: 'Test string',
                    timestampValue: 'Test string',
                  },
                },
                unaryFilter: {
                  field: {
                    fieldPath: 'Test string',
                  },
                  op: 'Test string',
                },
              },
            },
          },
          readTime: 'Test string',
          resumeToken: 'Test string',
          targetId: 42,
        },
        labels: {
          A: 'Test string',
        },
        removeTarget: 42,
      },
    );
    /** Partitions a query by returning partition cursors that can be used to run the query in parallel. The returned partition cursors are split points that can be used by RunQuery as starting/end points for the query results. */
    await gapi.client.firestore.projects.databases.documents.partitionQuery(
      {
        parent: 'Test string',
      },
      {
        pageSize: 42,
        pageToken: 'Test string',
        partitionCount: 'Test string',
        readTime: 'Test string',
        structuredQuery: {
          endAt: {
            before: true,
            values: [
              {
                arrayValue: {
                  values: undefined,
                },
                booleanValue: true,
                bytesValue: 'Test string',
                doubleValue: 42,
                geoPointValue: {
                  latitude: 42,
                  longitude: 42,
                },
                integerValue: 'Test string',
                mapValue: {
                  fields: undefined,
                },
                nullValue: 'Test string',
                referenceValue: 'Test string',
                stringValue: 'Test string',
                timestampValue: 'Test string',
              },
            ],
          },
          findNearest: {
            distanceMeasure: 'Test string',
            distanceResultField: 'Test string',
            distanceThreshold: 42,
            limit: 42,
            queryVector: {
              arrayValue: {
                values: undefined,
              },
              booleanValue: true,
              bytesValue: 'Test string',
              doubleValue: 42,
              geoPointValue: {
                latitude: 42,
                longitude: 42,
              },
              integerValue: 'Test string',
              mapValue: {
                fields: undefined,
              },
              nullValue: 'Test string',
              referenceValue: 'Test string',
              stringValue: 'Test string',
              timestampValue: 'Test string',
            },
            vectorField: {
              fieldPath: 'Test string',
            },
          },
          from: [
            {
              allDescendants: true,
              collectionId: 'Test string',
            },
          ],
          limit: 42,
          offset: 42,
          orderBy: [
            {
              direction: 'Test string',
              field: {
                fieldPath: 'Test string',
              },
            },
          ],
          select: {
            fields: [
              {
                fieldPath: 'Test string',
              },
            ],
          },
          startAt: {
            before: true,
            values: [
              {
                arrayValue: {
                  values: undefined,
                },
                booleanValue: true,
                bytesValue: 'Test string',
                doubleValue: 42,
                geoPointValue: {
                  latitude: 42,
                  longitude: 42,
                },
                integerValue: 'Test string',
                mapValue: {
                  fields: undefined,
                },
                nullValue: 'Test string',
                referenceValue: 'Test string',
                stringValue: 'Test string',
                timestampValue: 'Test string',
              },
            ],
          },
          where: {
            compositeFilter: {
              filters: undefined,
              op: 'Test string',
            },
            fieldFilter: {
              field: {
                fieldPath: 'Test string',
              },
              op: 'Test string',
              value: {
                arrayValue: {
                  values: undefined,
                },
                booleanValue: true,
                bytesValue: 'Test string',
                doubleValue: 42,
                geoPointValue: {
                  latitude: 42,
                  longitude: 42,
                },
                integerValue: 'Test string',
                mapValue: {
                  fields: undefined,
                },
                nullValue: 'Test string',
                referenceValue: 'Test string',
                stringValue: 'Test string',
                timestampValue: 'Test string',
              },
            },
            unaryFilter: {
              field: {
                fieldPath: 'Test string',
              },
              op: 'Test string',
            },
          },
        },
      },
    );
    /** Updates or inserts a document. */
    await gapi.client.firestore.projects.databases.documents.patch(
      {
        'currentDocument.exists': true,
        'currentDocument.updateTime': 'Test string',
        'mask.fieldPaths': 'Test string',
        name: 'Test string',
        'updateMask.fieldPaths': 'Test string',
      },
      {
        createTime: 'Test string',
        fields: {
          A: {
            arrayValue: {
              values: undefined,
            },
            booleanValue: true,
            bytesValue: 'Test string',
            doubleValue: 42,
            geoPointValue: {
              latitude: 42,
              longitude: 42,
            },
            integerValue: 'Test string',
            mapValue: {
              fields: undefined,
            },
            nullValue: 'Test string',
            referenceValue: 'Test string',
            stringValue: 'Test string',
            timestampValue: 'Test string',
          },
        },
        name: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Rolls back a transaction. */
    await gapi.client.firestore.projects.databases.documents.rollback(
      {
        database: 'Test string',
      },
      {
        transaction: 'Test string',
      },
    );
    /** Runs an aggregation query. Rather than producing Document results like Firestore.RunQuery, this API allows running an aggregation to produce a series of AggregationResult server-side. High-Level Example: ``` -- Return the number of documents in table given a filter. SELECT COUNT(*) FROM ( SELECT * FROM k where a = true ); ``` */
    await gapi.client.firestore.projects.databases.documents.runAggregationQuery(
      {
        parent: 'Test string',
      },
      {
        explainOptions: {
          analyze: true,
        },
        newTransaction: {
          readOnly: {
            readTime: 'Test string',
          },
          readWrite: {
            retryTransaction: 'Test string',
          },
        },
        readTime: 'Test string',
        structuredAggregationQuery: {
          aggregations: [
            {
              alias: 'Test string',
              avg: {
                field: {
                  fieldPath: 'Test string',
                },
              },
              count: {
                upTo: 'Test string',
              },
              sum: {
                field: {
                  fieldPath: 'Test string',
                },
              },
            },
          ],
          structuredQuery: {
            endAt: {
              before: true,
              values: [
                {
                  arrayValue: {
                    values: undefined,
                  },
                  booleanValue: true,
                  bytesValue: 'Test string',
                  doubleValue: 42,
                  geoPointValue: {
                    latitude: 42,
                    longitude: 42,
                  },
                  integerValue: 'Test string',
                  mapValue: {
                    fields: undefined,
                  },
                  nullValue: 'Test string',
                  referenceValue: 'Test string',
                  stringValue: 'Test string',
                  timestampValue: 'Test string',
                },
              ],
            },
            findNearest: {
              distanceMeasure: 'Test string',
              distanceResultField: 'Test string',
              distanceThreshold: 42,
              limit: 42,
              queryVector: {
                arrayValue: {
                  values: undefined,
                },
                booleanValue: true,
                bytesValue: 'Test string',
                doubleValue: 42,
                geoPointValue: {
                  latitude: 42,
                  longitude: 42,
                },
                integerValue: 'Test string',
                mapValue: {
                  fields: undefined,
                },
                nullValue: 'Test string',
                referenceValue: 'Test string',
                stringValue: 'Test string',
                timestampValue: 'Test string',
              },
              vectorField: {
                fieldPath: 'Test string',
              },
            },
            from: [
              {
                allDescendants: true,
                collectionId: 'Test string',
              },
            ],
            limit: 42,
            offset: 42,
            orderBy: [
              {
                direction: 'Test string',
                field: {
                  fieldPath: 'Test string',
                },
              },
            ],
            select: {
              fields: [
                {
                  fieldPath: 'Test string',
                },
              ],
            },
            startAt: {
              before: true,
              values: [
                {
                  arrayValue: {
                    values: undefined,
                  },
                  booleanValue: true,
                  bytesValue: 'Test string',
                  doubleValue: 42,
                  geoPointValue: {
                    latitude: 42,
                    longitude: 42,
                  },
                  integerValue: 'Test string',
                  mapValue: {
                    fields: undefined,
                  },
                  nullValue: 'Test string',
                  referenceValue: 'Test string',
                  stringValue: 'Test string',
                  timestampValue: 'Test string',
                },
              ],
            },
            where: {
              compositeFilter: {
                filters: undefined,
                op: 'Test string',
              },
              fieldFilter: {
                field: {
                  fieldPath: 'Test string',
                },
                op: 'Test string',
                value: {
                  arrayValue: {
                    values: undefined,
                  },
                  booleanValue: true,
                  bytesValue: 'Test string',
                  doubleValue: 42,
                  geoPointValue: {
                    latitude: 42,
                    longitude: 42,
                  },
                  integerValue: 'Test string',
                  mapValue: {
                    fields: undefined,
                  },
                  nullValue: 'Test string',
                  referenceValue: 'Test string',
                  stringValue: 'Test string',
                  timestampValue: 'Test string',
                },
              },
              unaryFilter: {
                field: {
                  fieldPath: 'Test string',
                },
                op: 'Test string',
              },
            },
          },
        },
        transaction: 'Test string',
      },
    );
    /** Runs a query. */
    await gapi.client.firestore.projects.databases.documents.runQuery(
      {
        parent: 'Test string',
      },
      {
        explainOptions: {
          analyze: true,
        },
        newTransaction: {
          readOnly: {
            readTime: 'Test string',
          },
          readWrite: {
            retryTransaction: 'Test string',
          },
        },
        readTime: 'Test string',
        structuredQuery: {
          endAt: {
            before: true,
            values: [
              {
                arrayValue: {
                  values: undefined,
                },
                booleanValue: true,
                bytesValue: 'Test string',
                doubleValue: 42,
                geoPointValue: {
                  latitude: 42,
                  longitude: 42,
                },
                integerValue: 'Test string',
                mapValue: {
                  fields: undefined,
                },
                nullValue: 'Test string',
                referenceValue: 'Test string',
                stringValue: 'Test string',
                timestampValue: 'Test string',
              },
            ],
          },
          findNearest: {
            distanceMeasure: 'Test string',
            distanceResultField: 'Test string',
            distanceThreshold: 42,
            limit: 42,
            queryVector: {
              arrayValue: {
                values: undefined,
              },
              booleanValue: true,
              bytesValue: 'Test string',
              doubleValue: 42,
              geoPointValue: {
                latitude: 42,
                longitude: 42,
              },
              integerValue: 'Test string',
              mapValue: {
                fields: undefined,
              },
              nullValue: 'Test string',
              referenceValue: 'Test string',
              stringValue: 'Test string',
              timestampValue: 'Test string',
            },
            vectorField: {
              fieldPath: 'Test string',
            },
          },
          from: [
            {
              allDescendants: true,
              collectionId: 'Test string',
            },
          ],
          limit: 42,
          offset: 42,
          orderBy: [
            {
              direction: 'Test string',
              field: {
                fieldPath: 'Test string',
              },
            },
          ],
          select: {
            fields: [
              {
                fieldPath: 'Test string',
              },
            ],
          },
          startAt: {
            before: true,
            values: [
              {
                arrayValue: {
                  values: undefined,
                },
                booleanValue: true,
                bytesValue: 'Test string',
                doubleValue: 42,
                geoPointValue: {
                  latitude: 42,
                  longitude: 42,
                },
                integerValue: 'Test string',
                mapValue: {
                  fields: undefined,
                },
                nullValue: 'Test string',
                referenceValue: 'Test string',
                stringValue: 'Test string',
                timestampValue: 'Test string',
              },
            ],
          },
          where: {
            compositeFilter: {
              filters: undefined,
              op: 'Test string',
            },
            fieldFilter: {
              field: {
                fieldPath: 'Test string',
              },
              op: 'Test string',
              value: {
                arrayValue: {
                  values: undefined,
                },
                booleanValue: true,
                bytesValue: 'Test string',
                doubleValue: 42,
                geoPointValue: {
                  latitude: 42,
                  longitude: 42,
                },
                integerValue: 'Test string',
                mapValue: {
                  fields: undefined,
                },
                nullValue: 'Test string',
                referenceValue: 'Test string',
                stringValue: 'Test string',
                timestampValue: 'Test string',
              },
            },
            unaryFilter: {
              field: {
                fieldPath: 'Test string',
              },
              op: 'Test string',
            },
          },
        },
        transaction: 'Test string',
      },
    );
    /** Streams batches of document updates and deletes, in order. This method is only available via gRPC or WebChannel (not REST). */
    await gapi.client.firestore.projects.databases.documents.write(
      {
        database: 'Test string',
      },
      {
        labels: {
          A: 'Test string',
        },
        streamId: 'Test string',
        streamToken: 'Test string',
        writes: [
          {
            currentDocument: {
              exists: true,
              updateTime: 'Test string',
            },
            delete: 'Test string',
            transform: {
              document: 'Test string',
              fieldTransforms: [
                {
                  appendMissingElements: {
                    values: [
                      {
                        arrayValue: undefined,
                        booleanValue: true,
                        bytesValue: 'Test string',
                        doubleValue: 42,
                        geoPointValue: {
                          latitude: 42,
                          longitude: 42,
                        },
                        integerValue: 'Test string',
                        mapValue: {
                          fields: undefined,
                        },
                        nullValue: 'Test string',
                        referenceValue: 'Test string',
                        stringValue: 'Test string',
                        timestampValue: 'Test string',
                      },
                    ],
                  },
                  fieldPath: 'Test string',
                  increment: {
                    arrayValue: {
                      values: undefined,
                    },
                    booleanValue: true,
                    bytesValue: 'Test string',
                    doubleValue: 42,
                    geoPointValue: {
                      latitude: 42,
                      longitude: 42,
                    },
                    integerValue: 'Test string',
                    mapValue: {
                      fields: undefined,
                    },
                    nullValue: 'Test string',
                    referenceValue: 'Test string',
                    stringValue: 'Test string',
                    timestampValue: 'Test string',
                  },
                  maximum: {
                    arrayValue: {
                      values: undefined,
                    },
                    booleanValue: true,
                    bytesValue: 'Test string',
                    doubleValue: 42,
                    geoPointValue: {
                      latitude: 42,
                      longitude: 42,
                    },
                    integerValue: 'Test string',
                    mapValue: {
                      fields: undefined,
                    },
                    nullValue: 'Test string',
                    referenceValue: 'Test string',
                    stringValue: 'Test string',
                    timestampValue: 'Test string',
                  },
                  minimum: {
                    arrayValue: {
                      values: undefined,
                    },
                    booleanValue: true,
                    bytesValue: 'Test string',
                    doubleValue: 42,
                    geoPointValue: {
                      latitude: 42,
                      longitude: 42,
                    },
                    integerValue: 'Test string',
                    mapValue: {
                      fields: undefined,
                    },
                    nullValue: 'Test string',
                    referenceValue: 'Test string',
                    stringValue: 'Test string',
                    timestampValue: 'Test string',
                  },
                  removeAllFromArray: {
                    values: [
                      {
                        arrayValue: undefined,
                        booleanValue: true,
                        bytesValue: 'Test string',
                        doubleValue: 42,
                        geoPointValue: {
                          latitude: 42,
                          longitude: 42,
                        },
                        integerValue: 'Test string',
                        mapValue: {
                          fields: undefined,
                        },
                        nullValue: 'Test string',
                        referenceValue: 'Test string',
                        stringValue: 'Test string',
                        timestampValue: 'Test string',
                      },
                    ],
                  },
                  setToServerValue: 'Test string',
                },
              ],
            },
            update: {
              createTime: 'Test string',
              fields: {
                A: {
                  arrayValue: {
                    values: undefined,
                  },
                  booleanValue: true,
                  bytesValue: 'Test string',
                  doubleValue: 42,
                  geoPointValue: {
                    latitude: 42,
                    longitude: 42,
                  },
                  integerValue: 'Test string',
                  mapValue: {
                    fields: undefined,
                  },
                  nullValue: 'Test string',
                  referenceValue: 'Test string',
                  stringValue: 'Test string',
                  timestampValue: 'Test string',
                },
              },
              name: 'Test string',
              updateTime: 'Test string',
            },
            updateMask: {
              fieldPaths: ['Test string'],
            },
            updateTransforms: [
              {
                appendMissingElements: {
                  values: [
                    {
                      arrayValue: undefined,
                      booleanValue: true,
                      bytesValue: 'Test string',
                      doubleValue: 42,
                      geoPointValue: {
                        latitude: 42,
                        longitude: 42,
                      },
                      integerValue: 'Test string',
                      mapValue: {
                        fields: undefined,
                      },
                      nullValue: 'Test string',
                      referenceValue: 'Test string',
                      stringValue: 'Test string',
                      timestampValue: 'Test string',
                    },
                  ],
                },
                fieldPath: 'Test string',
                increment: {
                  arrayValue: {
                    values: undefined,
                  },
                  booleanValue: true,
                  bytesValue: 'Test string',
                  doubleValue: 42,
                  geoPointValue: {
                    latitude: 42,
                    longitude: 42,
                  },
                  integerValue: 'Test string',
                  mapValue: {
                    fields: undefined,
                  },
                  nullValue: 'Test string',
                  referenceValue: 'Test string',
                  stringValue: 'Test string',
                  timestampValue: 'Test string',
                },
                maximum: {
                  arrayValue: {
                    values: undefined,
                  },
                  booleanValue: true,
                  bytesValue: 'Test string',
                  doubleValue: 42,
                  geoPointValue: {
                    latitude: 42,
                    longitude: 42,
                  },
                  integerValue: 'Test string',
                  mapValue: {
                    fields: undefined,
                  },
                  nullValue: 'Test string',
                  referenceValue: 'Test string',
                  stringValue: 'Test string',
                  timestampValue: 'Test string',
                },
                minimum: {
                  arrayValue: {
                    values: undefined,
                  },
                  booleanValue: true,
                  bytesValue: 'Test string',
                  doubleValue: 42,
                  geoPointValue: {
                    latitude: 42,
                    longitude: 42,
                  },
                  integerValue: 'Test string',
                  mapValue: {
                    fields: undefined,
                  },
                  nullValue: 'Test string',
                  referenceValue: 'Test string',
                  stringValue: 'Test string',
                  timestampValue: 'Test string',
                },
                removeAllFromArray: {
                  values: [
                    {
                      arrayValue: undefined,
                      booleanValue: true,
                      bytesValue: 'Test string',
                      doubleValue: 42,
                      geoPointValue: {
                        latitude: 42,
                        longitude: 42,
                      },
                      integerValue: 'Test string',
                      mapValue: {
                        fields: undefined,
                      },
                      nullValue: 'Test string',
                      referenceValue: 'Test string',
                      stringValue: 'Test string',
                      timestampValue: 'Test string',
                    },
                  ],
                },
                setToServerValue: 'Test string',
              },
            ],
          },
        ],
      },
    );
    /** Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of `1`, corresponding to `Code.CANCELLED`. */
    await gapi.client.firestore.projects.databases.operations.cancel(
      {
        name: 'Test string',
      },
      {},
    );
    /** Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. */
    await gapi.client.firestore.projects.databases.operations.delete({
      name: 'Test string',
    });
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.firestore.projects.databases.operations.get({
      name: 'Test string',
    });
    /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
    await gapi.client.firestore.projects.databases.operations.list({
      filter: 'Test string',
      name: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Create a user creds. */
    await gapi.client.firestore.projects.databases.userCreds.create(
      {
        parent: 'Test string',
        userCredsId: 'Test string',
      },
      {
        createTime: 'Test string',
        name: 'Test string',
        resourceIdentity: {
          principal: 'Test string',
        },
        securePassword: 'Test string',
        state: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Deletes a user creds. */
    await gapi.client.firestore.projects.databases.userCreds.delete({
      name: 'Test string',
    });
    /** Disables a user creds. No-op if the user creds are already disabled. */
    await gapi.client.firestore.projects.databases.userCreds.disable(
      {
        name: 'Test string',
      },
      {},
    );
    /** Enables a user creds. No-op if the user creds are already enabled. */
    await gapi.client.firestore.projects.databases.userCreds.enable(
      {
        name: 'Test string',
      },
      {},
    );
    /** Gets a user creds resource. Note that the returned resource does not contain the secret value itself. */
    await gapi.client.firestore.projects.databases.userCreds.get({
      name: 'Test string',
    });
    /** List all user creds in the database. Note that the returned resource does not contain the secret value itself. */
    await gapi.client.firestore.projects.databases.userCreds.list({
      parent: 'Test string',
    });
    /** Resets the password of a user creds. */
    await gapi.client.firestore.projects.databases.userCreds.resetPassword(
      {
        name: 'Test string',
      },
      {},
    );
    /** Gets information about a location. */
    await gapi.client.firestore.projects.locations.get({
      name: 'Test string',
    });
    /** Lists information about the supported locations for this service. */
    await gapi.client.firestore.projects.locations.list({
      extraLocationTypes: 'Test string',
      filter: 'Test string',
      name: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Deletes a backup. */
    await gapi.client.firestore.projects.locations.backups.delete({
      name: 'Test string',
    });
    /** Gets information about a backup. */
    await gapi.client.firestore.projects.locations.backups.get({
      name: 'Test string',
    });
    /** Lists all the backups. */
    await gapi.client.firestore.projects.locations.backups.list({
      filter: 'Test string',
      parent: 'Test string',
    });
  }
});
