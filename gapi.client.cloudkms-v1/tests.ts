/* This is stub file for gapi.client.cloudkms-v1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20240131

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://cloudkms.googleapis.com/$discovery/rest?version=v1'
  );
  /** now we can use gapi.client.cloudkms */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
    'https://www.googleapis.com/auth/cloud-platform',
    /** View and manage your keys and secrets stored in Cloud Key Management Service */
    'https://www.googleapis.com/auth/cloudkms',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Generate random bytes using the Cloud KMS randomness source in the provided location. */
    await gapi.client.cloudkms.projects.locations.generateRandomBytes(
      {
        location: 'Test string',
      },
      {
        lengthBytes: 42,
        protectionLevel: 'Test string',
      }
    );
    /** Gets information about a location. */
    await gapi.client.cloudkms.projects.locations.get({
      name: 'Test string',
    });
    /** Returns the EkmConfig singleton resource for a given project and location. */
    await gapi.client.cloudkms.projects.locations.getEkmConfig({
      name: 'Test string',
    });
    /** Lists information about the supported locations for this service. */
    await gapi.client.cloudkms.projects.locations.list({
      filter: 'Test string',
      name: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Updates the EkmConfig singleton resource for a given project and location. */
    await gapi.client.cloudkms.projects.locations.updateEkmConfig(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        defaultEkmConnection: 'Test string',
        name: 'Test string',
      }
    );
    /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
    await gapi.client.cloudkms.projects.locations.ekmConfig.getIamPolicy({
      'options.requestedPolicyVersion': 42,
      resource: 'Test string',
    });
    /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
    await gapi.client.cloudkms.projects.locations.ekmConfig.setIamPolicy(
      {
        resource: 'Test string',
      },
      {
        policy: {
          auditConfigs: [
            {
              auditLogConfigs: [
                {
                  exemptedMembers: ['Test string'],
                  logType: 'Test string',
                },
              ],
              service: 'Test string',
            },
          ],
          bindings: [
            {
              condition: {
                description: 'Test string',
                expression: 'Test string',
                location: 'Test string',
                title: 'Test string',
              },
              members: ['Test string'],
              role: 'Test string',
            },
          ],
          etag: 'Test string',
          version: 42,
        },
        updateMask: 'Test string',
      }
    );
    /** Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning. */
    await gapi.client.cloudkms.projects.locations.ekmConfig.testIamPermissions(
      {
        resource: 'Test string',
      },
      {
        permissions: ['Test string'],
      }
    );
    /** Creates a new EkmConnection in a given Project and Location. */
    await gapi.client.cloudkms.projects.locations.ekmConnections.create(
      {
        ekmConnectionId: 'Test string',
        parent: 'Test string',
      },
      {
        createTime: 'Test string',
        cryptoSpacePath: 'Test string',
        etag: 'Test string',
        keyManagementMode: 'Test string',
        name: 'Test string',
        serviceResolvers: [
          {
            endpointFilter: 'Test string',
            hostname: 'Test string',
            serverCertificates: [
              {
                issuer: 'Test string',
                notAfterTime: 'Test string',
                notBeforeTime: 'Test string',
                parsed: true,
                rawDer: 'Test string',
                serialNumber: 'Test string',
                sha256Fingerprint: 'Test string',
                subject: 'Test string',
                subjectAlternativeDnsNames: ['Test string'],
              },
            ],
            serviceDirectoryService: 'Test string',
          },
        ],
      }
    );
    /** Returns metadata for a given EkmConnection. */
    await gapi.client.cloudkms.projects.locations.ekmConnections.get({
      name: 'Test string',
    });
    /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
    await gapi.client.cloudkms.projects.locations.ekmConnections.getIamPolicy({
      'options.requestedPolicyVersion': 42,
      resource: 'Test string',
    });
    /** Lists EkmConnections. */
    await gapi.client.cloudkms.projects.locations.ekmConnections.list({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates an EkmConnection's metadata. */
    await gapi.client.cloudkms.projects.locations.ekmConnections.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        createTime: 'Test string',
        cryptoSpacePath: 'Test string',
        etag: 'Test string',
        keyManagementMode: 'Test string',
        name: 'Test string',
        serviceResolvers: [
          {
            endpointFilter: 'Test string',
            hostname: 'Test string',
            serverCertificates: [
              {
                issuer: 'Test string',
                notAfterTime: 'Test string',
                notBeforeTime: 'Test string',
                parsed: true,
                rawDer: 'Test string',
                serialNumber: 'Test string',
                sha256Fingerprint: 'Test string',
                subject: 'Test string',
                subjectAlternativeDnsNames: ['Test string'],
              },
            ],
            serviceDirectoryService: 'Test string',
          },
        ],
      }
    );
    /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
    await gapi.client.cloudkms.projects.locations.ekmConnections.setIamPolicy(
      {
        resource: 'Test string',
      },
      {
        policy: {
          auditConfigs: [
            {
              auditLogConfigs: [
                {
                  exemptedMembers: ['Test string'],
                  logType: 'Test string',
                },
              ],
              service: 'Test string',
            },
          ],
          bindings: [
            {
              condition: {
                description: 'Test string',
                expression: 'Test string',
                location: 'Test string',
                title: 'Test string',
              },
              members: ['Test string'],
              role: 'Test string',
            },
          ],
          etag: 'Test string',
          version: 42,
        },
        updateMask: 'Test string',
      }
    );
    /** Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning. */
    await gapi.client.cloudkms.projects.locations.ekmConnections.testIamPermissions(
      {
        resource: 'Test string',
      },
      {
        permissions: ['Test string'],
      }
    );
    /** Verifies that Cloud KMS can successfully connect to the external key manager specified by an EkmConnection. If there is an error connecting to the EKM, this method returns a FAILED_PRECONDITION status containing structured information as described at https://cloud.google.com/kms/docs/reference/ekm_errors. */
    await gapi.client.cloudkms.projects.locations.ekmConnections.verifyConnectivity(
      {
        name: 'Test string',
      }
    );
    /** Create a new KeyRing in a given Project and Location. */
    await gapi.client.cloudkms.projects.locations.keyRings.create(
      {
        keyRingId: 'Test string',
        parent: 'Test string',
      },
      {
        createTime: 'Test string',
        name: 'Test string',
      }
    );
    /** Returns metadata for a given KeyRing. */
    await gapi.client.cloudkms.projects.locations.keyRings.get({
      name: 'Test string',
    });
    /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
    await gapi.client.cloudkms.projects.locations.keyRings.getIamPolicy({
      'options.requestedPolicyVersion': 42,
      resource: 'Test string',
    });
    /** Lists KeyRings. */
    await gapi.client.cloudkms.projects.locations.keyRings.list({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
    await gapi.client.cloudkms.projects.locations.keyRings.setIamPolicy(
      {
        resource: 'Test string',
      },
      {
        policy: {
          auditConfigs: [
            {
              auditLogConfigs: [
                {
                  exemptedMembers: ['Test string'],
                  logType: 'Test string',
                },
              ],
              service: 'Test string',
            },
          ],
          bindings: [
            {
              condition: {
                description: 'Test string',
                expression: 'Test string',
                location: 'Test string',
                title: 'Test string',
              },
              members: ['Test string'],
              role: 'Test string',
            },
          ],
          etag: 'Test string',
          version: 42,
        },
        updateMask: 'Test string',
      }
    );
    /** Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning. */
    await gapi.client.cloudkms.projects.locations.keyRings.testIamPermissions(
      {
        resource: 'Test string',
      },
      {
        permissions: ['Test string'],
      }
    );
    /** Create a new CryptoKey within a KeyRing. CryptoKey.purpose and CryptoKey.version_template.algorithm are required. */
    await gapi.client.cloudkms.projects.locations.keyRings.cryptoKeys.create(
      {
        cryptoKeyId: 'Test string',
        parent: 'Test string',
        skipInitialVersionCreation: true,
      },
      {
        createTime: 'Test string',
        cryptoKeyBackend: 'Test string',
        destroyScheduledDuration: 'Test string',
        importOnly: true,
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        nextRotationTime: 'Test string',
        primary: {
          algorithm: 'Test string',
          attestation: {
            certChains: {
              caviumCerts: ['Test string'],
              googleCardCerts: ['Test string'],
              googlePartitionCerts: ['Test string'],
            },
            content: 'Test string',
            format: 'Test string',
          },
          createTime: 'Test string',
          destroyEventTime: 'Test string',
          destroyTime: 'Test string',
          externalDestructionFailureReason: 'Test string',
          externalProtectionLevelOptions: {
            ekmConnectionKeyPath: 'Test string',
            externalKeyUri: 'Test string',
          },
          generateTime: 'Test string',
          generationFailureReason: 'Test string',
          importFailureReason: 'Test string',
          importJob: 'Test string',
          importTime: 'Test string',
          name: 'Test string',
          protectionLevel: 'Test string',
          reimportEligible: true,
          state: 'Test string',
        },
        purpose: 'Test string',
        rotationPeriod: 'Test string',
        versionTemplate: {
          algorithm: 'Test string',
          protectionLevel: 'Test string',
        },
      }
    );
    /** Decrypts data that was protected by Encrypt. The CryptoKey.purpose must be ENCRYPT_DECRYPT. */
    await gapi.client.cloudkms.projects.locations.keyRings.cryptoKeys.decrypt(
      {
        name: 'Test string',
      },
      {
        additionalAuthenticatedData: 'Test string',
        additionalAuthenticatedDataCrc32c: 'Test string',
        ciphertext: 'Test string',
        ciphertextCrc32c: 'Test string',
      }
    );
    /** Encrypts data, so that it can only be recovered by a call to Decrypt. The CryptoKey.purpose must be ENCRYPT_DECRYPT. */
    await gapi.client.cloudkms.projects.locations.keyRings.cryptoKeys.encrypt(
      {
        name: 'Test string',
      },
      {
        additionalAuthenticatedData: 'Test string',
        additionalAuthenticatedDataCrc32c: 'Test string',
        plaintext: 'Test string',
        plaintextCrc32c: 'Test string',
      }
    );
    /** Returns metadata for a given CryptoKey, as well as its primary CryptoKeyVersion. */
    await gapi.client.cloudkms.projects.locations.keyRings.cryptoKeys.get({
      name: 'Test string',
    });
    /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
    await gapi.client.cloudkms.projects.locations.keyRings.cryptoKeys.getIamPolicy(
      {
        'options.requestedPolicyVersion': 42,
        resource: 'Test string',
      }
    );
    /** Lists CryptoKeys. */
    await gapi.client.cloudkms.projects.locations.keyRings.cryptoKeys.list({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
      versionView: 'Test string',
    });
    /** Update a CryptoKey. */
    await gapi.client.cloudkms.projects.locations.keyRings.cryptoKeys.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        createTime: 'Test string',
        cryptoKeyBackend: 'Test string',
        destroyScheduledDuration: 'Test string',
        importOnly: true,
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        nextRotationTime: 'Test string',
        primary: {
          algorithm: 'Test string',
          attestation: {
            certChains: {
              caviumCerts: ['Test string'],
              googleCardCerts: ['Test string'],
              googlePartitionCerts: ['Test string'],
            },
            content: 'Test string',
            format: 'Test string',
          },
          createTime: 'Test string',
          destroyEventTime: 'Test string',
          destroyTime: 'Test string',
          externalDestructionFailureReason: 'Test string',
          externalProtectionLevelOptions: {
            ekmConnectionKeyPath: 'Test string',
            externalKeyUri: 'Test string',
          },
          generateTime: 'Test string',
          generationFailureReason: 'Test string',
          importFailureReason: 'Test string',
          importJob: 'Test string',
          importTime: 'Test string',
          name: 'Test string',
          protectionLevel: 'Test string',
          reimportEligible: true,
          state: 'Test string',
        },
        purpose: 'Test string',
        rotationPeriod: 'Test string',
        versionTemplate: {
          algorithm: 'Test string',
          protectionLevel: 'Test string',
        },
      }
    );
    /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
    await gapi.client.cloudkms.projects.locations.keyRings.cryptoKeys.setIamPolicy(
      {
        resource: 'Test string',
      },
      {
        policy: {
          auditConfigs: [
            {
              auditLogConfigs: [
                {
                  exemptedMembers: ['Test string'],
                  logType: 'Test string',
                },
              ],
              service: 'Test string',
            },
          ],
          bindings: [
            {
              condition: {
                description: 'Test string',
                expression: 'Test string',
                location: 'Test string',
                title: 'Test string',
              },
              members: ['Test string'],
              role: 'Test string',
            },
          ],
          etag: 'Test string',
          version: 42,
        },
        updateMask: 'Test string',
      }
    );
    /** Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning. */
    await gapi.client.cloudkms.projects.locations.keyRings.cryptoKeys.testIamPermissions(
      {
        resource: 'Test string',
      },
      {
        permissions: ['Test string'],
      }
    );
    /** Update the version of a CryptoKey that will be used in Encrypt. Returns an error if called on a key whose purpose is not ENCRYPT_DECRYPT. */
    await gapi.client.cloudkms.projects.locations.keyRings.cryptoKeys.updatePrimaryVersion(
      {
        name: 'Test string',
      },
      {
        cryptoKeyVersionId: 'Test string',
      }
    );
    /** Decrypts data that was encrypted with a public key retrieved from GetPublicKey corresponding to a CryptoKeyVersion with CryptoKey.purpose ASYMMETRIC_DECRYPT. */
    await gapi.client.cloudkms.projects.locations.keyRings.cryptoKeys.cryptoKeyVersions.asymmetricDecrypt(
      {
        name: 'Test string',
      },
      {
        ciphertext: 'Test string',
        ciphertextCrc32c: 'Test string',
      }
    );
    /** Signs data using a CryptoKeyVersion with CryptoKey.purpose ASYMMETRIC_SIGN, producing a signature that can be verified with the public key retrieved from GetPublicKey. */
    await gapi.client.cloudkms.projects.locations.keyRings.cryptoKeys.cryptoKeyVersions.asymmetricSign(
      {
        name: 'Test string',
      },
      {
        data: 'Test string',
        dataCrc32c: 'Test string',
        digest: {
          sha256: 'Test string',
          sha384: 'Test string',
          sha512: 'Test string',
        },
        digestCrc32c: 'Test string',
      }
    );
    /** Create a new CryptoKeyVersion in a CryptoKey. The server will assign the next sequential id. If unset, state will be set to ENABLED. */
    await gapi.client.cloudkms.projects.locations.keyRings.cryptoKeys.cryptoKeyVersions.create(
      {
        parent: 'Test string',
      },
      {
        algorithm: 'Test string',
        attestation: {
          certChains: {
            caviumCerts: ['Test string'],
            googleCardCerts: ['Test string'],
            googlePartitionCerts: ['Test string'],
          },
          content: 'Test string',
          format: 'Test string',
        },
        createTime: 'Test string',
        destroyEventTime: 'Test string',
        destroyTime: 'Test string',
        externalDestructionFailureReason: 'Test string',
        externalProtectionLevelOptions: {
          ekmConnectionKeyPath: 'Test string',
          externalKeyUri: 'Test string',
        },
        generateTime: 'Test string',
        generationFailureReason: 'Test string',
        importFailureReason: 'Test string',
        importJob: 'Test string',
        importTime: 'Test string',
        name: 'Test string',
        protectionLevel: 'Test string',
        reimportEligible: true,
        state: 'Test string',
      }
    );
    /** Schedule a CryptoKeyVersion for destruction. Upon calling this method, CryptoKeyVersion.state will be set to DESTROY_SCHEDULED, and destroy_time will be set to the time destroy_scheduled_duration in the future. At that time, the state will automatically change to DESTROYED, and the key material will be irrevocably destroyed. Before the destroy_time is reached, RestoreCryptoKeyVersion may be called to reverse the process. */
    await gapi.client.cloudkms.projects.locations.keyRings.cryptoKeys.cryptoKeyVersions.destroy(
      {
        name: 'Test string',
      },
      {}
    );
    /** Returns metadata for a given CryptoKeyVersion. */
    await gapi.client.cloudkms.projects.locations.keyRings.cryptoKeys.cryptoKeyVersions.get(
      {
        name: 'Test string',
      }
    );
    /** Returns the public key for the given CryptoKeyVersion. The CryptoKey.purpose must be ASYMMETRIC_SIGN or ASYMMETRIC_DECRYPT. */
    await gapi.client.cloudkms.projects.locations.keyRings.cryptoKeys.cryptoKeyVersions.getPublicKey(
      {
        name: 'Test string',
      }
    );
    /** Import wrapped key material into a CryptoKeyVersion. All requests must specify a CryptoKey. If a CryptoKeyVersion is additionally specified in the request, key material will be reimported into that version. Otherwise, a new version will be created, and will be assigned the next sequential id within the CryptoKey. */
    await gapi.client.cloudkms.projects.locations.keyRings.cryptoKeys.cryptoKeyVersions.import(
      {
        parent: 'Test string',
      },
      {
        algorithm: 'Test string',
        cryptoKeyVersion: 'Test string',
        importJob: 'Test string',
        rsaAesWrappedKey: 'Test string',
        wrappedKey: 'Test string',
      }
    );
    /** Lists CryptoKeyVersions. */
    await gapi.client.cloudkms.projects.locations.keyRings.cryptoKeys.cryptoKeyVersions.list(
      {
        filter: 'Test string',
        orderBy: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
        view: 'Test string',
      }
    );
    /** Signs data using a CryptoKeyVersion with CryptoKey.purpose MAC, producing a tag that can be verified by another source with the same key. */
    await gapi.client.cloudkms.projects.locations.keyRings.cryptoKeys.cryptoKeyVersions.macSign(
      {
        name: 'Test string',
      },
      {
        data: 'Test string',
        dataCrc32c: 'Test string',
      }
    );
    /** Verifies MAC tag using a CryptoKeyVersion with CryptoKey.purpose MAC, and returns a response that indicates whether or not the verification was successful. */
    await gapi.client.cloudkms.projects.locations.keyRings.cryptoKeys.cryptoKeyVersions.macVerify(
      {
        name: 'Test string',
      },
      {
        data: 'Test string',
        dataCrc32c: 'Test string',
        mac: 'Test string',
        macCrc32c: 'Test string',
      }
    );
    /** Update a CryptoKeyVersion's metadata. state may be changed between ENABLED and DISABLED using this method. See DestroyCryptoKeyVersion and RestoreCryptoKeyVersion to move between other states. */
    await gapi.client.cloudkms.projects.locations.keyRings.cryptoKeys.cryptoKeyVersions.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        algorithm: 'Test string',
        attestation: {
          certChains: {
            caviumCerts: ['Test string'],
            googleCardCerts: ['Test string'],
            googlePartitionCerts: ['Test string'],
          },
          content: 'Test string',
          format: 'Test string',
        },
        createTime: 'Test string',
        destroyEventTime: 'Test string',
        destroyTime: 'Test string',
        externalDestructionFailureReason: 'Test string',
        externalProtectionLevelOptions: {
          ekmConnectionKeyPath: 'Test string',
          externalKeyUri: 'Test string',
        },
        generateTime: 'Test string',
        generationFailureReason: 'Test string',
        importFailureReason: 'Test string',
        importJob: 'Test string',
        importTime: 'Test string',
        name: 'Test string',
        protectionLevel: 'Test string',
        reimportEligible: true,
        state: 'Test string',
      }
    );
    /** Decrypts data that was originally encrypted using a raw cryptographic mechanism. The CryptoKey.purpose must be RAW_ENCRYPT_DECRYPT. */
    await gapi.client.cloudkms.projects.locations.keyRings.cryptoKeys.cryptoKeyVersions.rawDecrypt(
      {
        name: 'Test string',
      },
      {
        additionalAuthenticatedData: 'Test string',
        additionalAuthenticatedDataCrc32c: 'Test string',
        ciphertext: 'Test string',
        ciphertextCrc32c: 'Test string',
        initializationVector: 'Test string',
        initializationVectorCrc32c: 'Test string',
        tagLength: 42,
      }
    );
    /** Encrypts data using portable cryptographic primitives. Most users should choose Encrypt and Decrypt rather than their raw counterparts. The CryptoKey.purpose must be RAW_ENCRYPT_DECRYPT. */
    await gapi.client.cloudkms.projects.locations.keyRings.cryptoKeys.cryptoKeyVersions.rawEncrypt(
      {
        name: 'Test string',
      },
      {
        additionalAuthenticatedData: 'Test string',
        additionalAuthenticatedDataCrc32c: 'Test string',
        initializationVector: 'Test string',
        initializationVectorCrc32c: 'Test string',
        plaintext: 'Test string',
        plaintextCrc32c: 'Test string',
      }
    );
    /** Restore a CryptoKeyVersion in the DESTROY_SCHEDULED state. Upon restoration of the CryptoKeyVersion, state will be set to DISABLED, and destroy_time will be cleared. */
    await gapi.client.cloudkms.projects.locations.keyRings.cryptoKeys.cryptoKeyVersions.restore(
      {
        name: 'Test string',
      },
      {}
    );
    /** Create a new ImportJob within a KeyRing. ImportJob.import_method is required. */
    await gapi.client.cloudkms.projects.locations.keyRings.importJobs.create(
      {
        importJobId: 'Test string',
        parent: 'Test string',
      },
      {
        attestation: {
          certChains: {
            caviumCerts: ['Test string'],
            googleCardCerts: ['Test string'],
            googlePartitionCerts: ['Test string'],
          },
          content: 'Test string',
          format: 'Test string',
        },
        createTime: 'Test string',
        expireEventTime: 'Test string',
        expireTime: 'Test string',
        generateTime: 'Test string',
        importMethod: 'Test string',
        name: 'Test string',
        protectionLevel: 'Test string',
        publicKey: {
          pem: 'Test string',
        },
        state: 'Test string',
      }
    );
    /** Returns metadata for a given ImportJob. */
    await gapi.client.cloudkms.projects.locations.keyRings.importJobs.get({
      name: 'Test string',
    });
    /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
    await gapi.client.cloudkms.projects.locations.keyRings.importJobs.getIamPolicy(
      {
        'options.requestedPolicyVersion': 42,
        resource: 'Test string',
      }
    );
    /** Lists ImportJobs. */
    await gapi.client.cloudkms.projects.locations.keyRings.importJobs.list({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
    await gapi.client.cloudkms.projects.locations.keyRings.importJobs.setIamPolicy(
      {
        resource: 'Test string',
      },
      {
        policy: {
          auditConfigs: [
            {
              auditLogConfigs: [
                {
                  exemptedMembers: ['Test string'],
                  logType: 'Test string',
                },
              ],
              service: 'Test string',
            },
          ],
          bindings: [
            {
              condition: {
                description: 'Test string',
                expression: 'Test string',
                location: 'Test string',
                title: 'Test string',
              },
              members: ['Test string'],
              role: 'Test string',
            },
          ],
          etag: 'Test string',
          version: 42,
        },
        updateMask: 'Test string',
      }
    );
    /** Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning. */
    await gapi.client.cloudkms.projects.locations.keyRings.importJobs.testIamPermissions(
      {
        resource: 'Test string',
      },
      {
        permissions: ['Test string'],
      }
    );
  }
});
