/* This is stub file for gapi.client.managedidentities-v1beta1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20230323

gapi.load('client', async () => {
    /** now we can use gapi.client */

    await gapi.client.load('https://managedidentities.googleapis.com/$discovery/rest?version=v1beta1');
    /** now we can use gapi.client.managedidentities */

    /** don't forget to authenticate your client before sending any request to resources: */
    /** declare client_id registered in Google Developers Console */
    const client_id = '<<PUT YOUR CLIENT ID HERE>>';
    const scope = [
        /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
        'https://www.googleapis.com/auth/cloud-platform',
    ];
    const immediate = false;
    gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
        if (authResult && !authResult.error) {
            /** handle successful authorization */
            run();
        } else {
            /** handle authorization error */
        }
    });

    async function run() {
        /** Gets information about a location. */
        await gapi.client.managedidentities.projects.locations.get({
            name: "Test string",
        });
        /** Lists information about the supported locations for this service. */
        await gapi.client.managedidentities.projects.locations.list({
            filter: "Test string",
            name: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Adds an AD trust to a domain. */
        await gapi.client.managedidentities.projects.locations.global.domains.attachTrust({
            name: "Test string",
        }, {
            trust: {
                createTime: "Test string",
                lastTrustHeartbeatTime: "Test string",
                selectiveAuthentication: true,
                state: "Test string",
                stateDescription: "Test string",
                targetDnsIpAddresses: [
                    "Test string"
                ],
                targetDomainName: "Test string",
                trustDirection: "Test string",
                trustHandshakeSecret: "Test string",
                trustType: "Test string",
                updateTime: "Test string",
            },
        });
        /** CheckMigrationPermission API gets the current state of DomainMigration */
        await gapi.client.managedidentities.projects.locations.global.domains.checkMigrationPermission({
            domain: "Test string",
        }, {
        });
        /** Creates a Microsoft AD domain. */
        await gapi.client.managedidentities.projects.locations.global.domains.create({
            domainName: "Test string",
            parent: "Test string",
        }, {
            admin: "Test string",
            auditLogsEnabled: true,
            authorizedNetworks: [
                "Test string"
            ],
            createTime: "Test string",
            fqdn: "Test string",
            labels: {
                A: "Test string"
            },
            locations: [
                "Test string"
            ],
            name: "Test string",
            reservedIpRange: "Test string",
            state: "Test string",
            statusMessage: "Test string",
            trusts: [
                {
                    createTime: "Test string",
                    lastTrustHeartbeatTime: "Test string",
                    selectiveAuthentication: true,
                    state: "Test string",
                    stateDescription: "Test string",
                    targetDnsIpAddresses: [
                        "Test string"
                    ],
                    targetDomainName: "Test string",
                    trustDirection: "Test string",
                    trustHandshakeSecret: "Test string",
                    trustType: "Test string",
                    updateTime: "Test string",
                }
            ],
            updateTime: "Test string",
        });
        /** Deletes a domain. */
        await gapi.client.managedidentities.projects.locations.global.domains.delete({
            name: "Test string",
        });
        /** Removes an AD trust. */
        await gapi.client.managedidentities.projects.locations.global.domains.detachTrust({
            name: "Test string",
        }, {
            trust: {
                createTime: "Test string",
                lastTrustHeartbeatTime: "Test string",
                selectiveAuthentication: true,
                state: "Test string",
                stateDescription: "Test string",
                targetDnsIpAddresses: [
                    "Test string"
                ],
                targetDomainName: "Test string",
                trustDirection: "Test string",
                trustHandshakeSecret: "Test string",
                trustType: "Test string",
                updateTime: "Test string",
            },
        });
        /** Disable Domain Migration */
        await gapi.client.managedidentities.projects.locations.global.domains.disableMigration({
            domain: "Test string",
        }, {
        });
        /** DomainJoinMachine API joins a Compute Engine VM to the domain */
        await gapi.client.managedidentities.projects.locations.global.domains.domainJoinMachine({
            domain: "Test string",
        }, {
            force: true,
            ouName: "Test string",
            vmIdToken: "Test string",
        });
        /** Enable Domain Migration */
        await gapi.client.managedidentities.projects.locations.global.domains.enableMigration({
            domain: "Test string",
        }, {
            migratingDomains: [
                {
                    disableSidFiltering: true,
                    domainName: "Test string",
                }
            ],
        });
        /** Extend Schema for Domain */
        await gapi.client.managedidentities.projects.locations.global.domains.extendSchema({
            domain: "Test string",
        }, {
            description: "Test string",
            fileContents: "Test string",
            gcsPath: "Test string",
        });
        /** Gets information about a domain. */
        await gapi.client.managedidentities.projects.locations.global.domains.get({
            name: "Test string",
        });
        /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
        await gapi.client.managedidentities.projects.locations.global.domains.getIamPolicy({
            "options.requestedPolicyVersion": 42,
            resource: "Test string",
        });
        /** Gets the domain ldaps settings. */
        await gapi.client.managedidentities.projects.locations.global.domains.getLdapssettings({
            name: "Test string",
        });
        /** Lists domains in a project. */
        await gapi.client.managedidentities.projects.locations.global.domains.list({
            filter: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the metadata and configuration of a domain. */
        await gapi.client.managedidentities.projects.locations.global.domains.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            admin: "Test string",
            auditLogsEnabled: true,
            authorizedNetworks: [
                "Test string"
            ],
            createTime: "Test string",
            fqdn: "Test string",
            labels: {
                A: "Test string"
            },
            locations: [
                "Test string"
            ],
            name: "Test string",
            reservedIpRange: "Test string",
            state: "Test string",
            statusMessage: "Test string",
            trusts: [
                {
                    createTime: "Test string",
                    lastTrustHeartbeatTime: "Test string",
                    selectiveAuthentication: true,
                    state: "Test string",
                    stateDescription: "Test string",
                    targetDnsIpAddresses: [
                        "Test string"
                    ],
                    targetDomainName: "Test string",
                    trustDirection: "Test string",
                    trustHandshakeSecret: "Test string",
                    trustType: "Test string",
                    updateTime: "Test string",
                }
            ],
            updateTime: "Test string",
        });
        /** Updates the DNS conditional forwarder. */
        await gapi.client.managedidentities.projects.locations.global.domains.reconfigureTrust({
            name: "Test string",
        }, {
            targetDnsIpAddresses: [
                "Test string"
            ],
            targetDomainName: "Test string",
        });
        /** Resets a domain's administrator password. */
        await gapi.client.managedidentities.projects.locations.global.domains.resetAdminPassword({
            name: "Test string",
        }, {
        });
        /** RestoreBackup restores domain mentioned in the RestoreBackupRequest */
        await gapi.client.managedidentities.projects.locations.global.domains.restore({
            name: "Test string",
        }, {
            backupId: "Test string",
        });
        /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
        await gapi.client.managedidentities.projects.locations.global.domains.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"
                        ],
                        role: "Test string",
                    }
                ],
                etag: "Test string",
                version: 42,
            },
        });
        /**
         * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This
         * operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
         */
        await gapi.client.managedidentities.projects.locations.global.domains.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"
            ],
        });
        /** Patches a single ldaps settings. */
        await gapi.client.managedidentities.projects.locations.global.domains.updateLdapssettings({
            name: "Test string",
            updateMask: "Test string",
        }, {
            certificate: {
                expireTime: "Test string",
                issuingCertificate: undefined,
                subject: "Test string",
                subjectAlternativeName: [
                    "Test string"
                ],
                thumbprint: "Test string",
            },
            certificatePassword: "Test string",
            certificatePfx: "Test string",
            name: "Test string",
            state: "Test string",
            updateTime: "Test string",
        });
        /** Validates a trust state, that the target domain is reachable, and that the target domain is able to accept incoming trust requests. */
        await gapi.client.managedidentities.projects.locations.global.domains.validateTrust({
            name: "Test string",
        }, {
            trust: {
                createTime: "Test string",
                lastTrustHeartbeatTime: "Test string",
                selectiveAuthentication: true,
                state: "Test string",
                stateDescription: "Test string",
                targetDnsIpAddresses: [
                    "Test string"
                ],
                targetDomainName: "Test string",
                trustDirection: "Test string",
                trustHandshakeSecret: "Test string",
                trustType: "Test string",
                updateTime: "Test string",
            },
        });
        /** Creates a Backup for a domain. */
        await gapi.client.managedidentities.projects.locations.global.domains.backups.create({
            backupId: "Test string",
            parent: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            labels: {
                A: "Test string"
            },
            name: "Test string",
            state: "Test string",
            statusMessage: "Test string",
            type: "Test string",
            updateTime: "Test string",
        });
        /** Deletes identified Backup. */
        await gapi.client.managedidentities.projects.locations.global.domains.backups.delete({
            name: "Test string",
        });
        /** Gets details of a single Backup. */
        await gapi.client.managedidentities.projects.locations.global.domains.backups.get({
            name: "Test string",
        });
        /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
        await gapi.client.managedidentities.projects.locations.global.domains.backups.getIamPolicy({
            "options.requestedPolicyVersion": 42,
            resource: "Test string",
        });
        /** Lists Backup in a given project. */
        await gapi.client.managedidentities.projects.locations.global.domains.backups.list({
            filter: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the labels for specified Backup. */
        await gapi.client.managedidentities.projects.locations.global.domains.backups.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            labels: {
                A: "Test string"
            },
            name: "Test string",
            state: "Test string",
            statusMessage: "Test string",
            type: "Test string",
            updateTime: "Test string",
        });
        /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
        await gapi.client.managedidentities.projects.locations.global.domains.backups.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"
                        ],
                        role: "Test string",
                    }
                ],
                etag: "Test string",
                version: 42,
            },
        });
        /**
         * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This
         * operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
         */
        await gapi.client.managedidentities.projects.locations.global.domains.backups.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"
            ],
        });
        /** Gets details of a single sqlIntegration. */
        await gapi.client.managedidentities.projects.locations.global.domains.sqlIntegrations.get({
            name: "Test string",
        });
        /** Lists SqlIntegrations in a given domain. */
        await gapi.client.managedidentities.projects.locations.global.domains.sqlIntegrations.list({
            filter: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this
         * method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation
         * completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of
         * 1, corresponding to `Code.CANCELLED`.
         */
        await gapi.client.managedidentities.projects.locations.global.operations.cancel({
            name: "Test string",
        }, {
        });
        /**
         * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support
         * this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
         */
        await gapi.client.managedidentities.projects.locations.global.operations.delete({
            name: "Test string",
        });
        /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
        await gapi.client.managedidentities.projects.locations.global.operations.get({
            name: "Test string",
        });
        /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
        await gapi.client.managedidentities.projects.locations.global.operations.list({
            filter: "Test string",
            name: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Creates a Peering for Managed AD instance. */
        await gapi.client.managedidentities.projects.locations.global.peerings.create({
            parent: "Test string",
            peeringId: "Test string",
        }, {
            authorizedNetwork: "Test string",
            createTime: "Test string",
            domainResource: "Test string",
            labels: {
                A: "Test string"
            },
            name: "Test string",
            state: "Test string",
            statusMessage: "Test string",
            updateTime: "Test string",
        });
        /** Deletes identified Peering. */
        await gapi.client.managedidentities.projects.locations.global.peerings.delete({
            name: "Test string",
        });
        /** Gets details of a single Peering. */
        await gapi.client.managedidentities.projects.locations.global.peerings.get({
            name: "Test string",
        });
        /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
        await gapi.client.managedidentities.projects.locations.global.peerings.getIamPolicy({
            "options.requestedPolicyVersion": 42,
            resource: "Test string",
        });
        /** Lists Peerings in a given project. */
        await gapi.client.managedidentities.projects.locations.global.peerings.list({
            filter: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the labels for specified Peering. */
        await gapi.client.managedidentities.projects.locations.global.peerings.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            authorizedNetwork: "Test string",
            createTime: "Test string",
            domainResource: "Test string",
            labels: {
                A: "Test string"
            },
            name: "Test string",
            state: "Test string",
            statusMessage: "Test string",
            updateTime: "Test string",
        });
        /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
        await gapi.client.managedidentities.projects.locations.global.peerings.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"
                        ],
                        role: "Test string",
                    }
                ],
                etag: "Test string",
                version: 42,
            },
        });
        /**
         * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This
         * operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
         */
        await gapi.client.managedidentities.projects.locations.global.peerings.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"
            ],
        });
    }
});
