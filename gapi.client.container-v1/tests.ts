/* This is stub file for gapi.client.container-v1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20230620

gapi.load('client', async () => {
    /** now we can use gapi.client */

    await gapi.client.load('https://container.googleapis.com/$discovery/rest?version=v1');
    /** now we can use gapi.client.container */

    /** don't forget to authenticate your client before sending any request to resources: */
    /** declare client_id registered in Google Developers Console */
    const client_id = '<<PUT YOUR CLIENT ID HERE>>';
    const scope = [
        /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
        'https://www.googleapis.com/auth/cloud-platform',
    ];
    const immediate = false;
    gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
        if (authResult && !authResult.error) {
            /** handle successful authorization */
            run();
        } else {
            /** handle authorization error */
        }
    });

    async function run() {
        /** Lists subnetworks that are usable for creating clusters in a project. */
        await gapi.client.container.projects.aggregated.usableSubnetworks.list({
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Returns configuration info about the Google Kubernetes Engine service. */
        await gapi.client.container.projects.locations.getServerConfig({
            name: "Test string",
            projectId: "Test string",
            zone: "Test string",
        });
        /** Checks the cluster compatibility with Autopilot mode, and returns a list of compatibility issues. */
        await gapi.client.container.projects.locations.clusters.checkAutopilotCompatibility({
            name: "Test string",
        });
        /** Completes master IP rotation. */
        await gapi.client.container.projects.locations.clusters.completeIpRotation({
            name: "Test string",
        }, {
            clusterId: "Test string",
            name: "Test string",
            projectId: "Test string",
            zone: "Test string",
        });
        /**
         * Creates a cluster, consisting of the specified number and type of Google Compute Engine instances. By default, the cluster is created in the project's [default
         * network](https://cloud.google.com/compute/docs/networks-and-firewalls#networks). One firewall is added for the cluster. After cluster creation, the Kubelet creates routes for each node
         * to allow the containers on that node to communicate with all other instances in the cluster. Finally, an entry is added to the project's global metadata indicating which CIDR range the
         * cluster is using.
         */
        await gapi.client.container.projects.locations.clusters.create({
            parent: "Test string",
        }, {
            cluster: {
                addonsConfig: {
                    cloudRunConfig: {
                        disabled: true,
                        loadBalancerType: "Test string",
                    },
                    configConnectorConfig: {
                        enabled: true,
                    },
                    dnsCacheConfig: {
                        enabled: true,
                    },
                    gcePersistentDiskCsiDriverConfig: {
                        enabled: true,
                    },
                    gcpFilestoreCsiDriverConfig: {
                        enabled: true,
                    },
                    gcsFuseCsiDriverConfig: {
                        enabled: true,
                    },
                    gkeBackupAgentConfig: {
                        enabled: true,
                    },
                    horizontalPodAutoscaling: {
                        disabled: true,
                    },
                    httpLoadBalancing: {
                        disabled: true,
                    },
                    kubernetesDashboard: {
                        disabled: true,
                    },
                    networkPolicyConfig: {
                        disabled: true,
                    },
                },
                authenticatorGroupsConfig: {
                    enabled: true,
                    securityGroup: "Test string",
                },
                autopilot: {
                    enabled: true,
                    workloadPolicyConfig: {
                        allowNetAdmin: true,
                    },
                },
                autoscaling: {
                    autoprovisioningLocations: [
                        "Test string"
                    ],
                    autoprovisioningNodePoolDefaults: {
                        bootDiskKmsKey: "Test string",
                        diskSizeGb: 42,
                        diskType: "Test string",
                        imageType: "Test string",
                        insecureKubeletReadonlyPortEnabled: true,
                        management: {
                            autoRepair: true,
                            autoUpgrade: true,
                            upgradeOptions: {
                                autoUpgradeStartTime: "Test string",
                                description: "Test string",
                            },
                        },
                        minCpuPlatform: "Test string",
                        oauthScopes: [
                            "Test string"
                        ],
                        serviceAccount: "Test string",
                        shieldedInstanceConfig: {
                            enableIntegrityMonitoring: true,
                            enableSecureBoot: true,
                        },
                        upgradeSettings: {
                            blueGreenSettings: {
                                nodePoolSoakDuration: "Test string",
                                standardRolloutPolicy: {
                                    batchNodeCount: 42,
                                    batchPercentage: 42,
                                    batchSoakDuration: "Test string",
                                },
                            },
                            maxSurge: 42,
                            maxUnavailable: 42,
                            strategy: "Test string",
                        },
                    },
                    autoscalingProfile: "Test string",
                    enableNodeAutoprovisioning: true,
                    resourceLimits: [
                        {
                            maximum: "Test string",
                            minimum: "Test string",
                            resourceType: "Test string",
                        }
                    ],
                },
                binaryAuthorization: {
                    enabled: true,
                    evaluationMode: "Test string",
                },
                clusterIpv4Cidr: "Test string",
                conditions: [
                    {
                        canonicalCode: "Test string",
                        code: "Test string",
                        message: "Test string",
                    }
                ],
                confidentialNodes: {
                    enabled: true,
                },
                costManagementConfig: {
                    enabled: true,
                },
                createTime: "Test string",
                currentMasterVersion: "Test string",
                currentNodeCount: 42,
                currentNodeVersion: "Test string",
                databaseEncryption: {
                    keyName: "Test string",
                    state: "Test string",
                },
                defaultMaxPodsConstraint: {
                    maxPodsPerNode: "Test string",
                },
                description: "Test string",
                enableK8sBetaApis: {
                    enabledApis: [
                        "Test string"
                    ],
                },
                enableKubernetesAlpha: true,
                enableTpu: true,
                endpoint: "Test string",
                etag: "Test string",
                expireTime: "Test string",
                fleet: {
                    membership: "Test string",
                    preRegistered: true,
                    project: "Test string",
                },
                id: "Test string",
                identityServiceConfig: {
                    enabled: true,
                },
                initialClusterVersion: "Test string",
                initialNodeCount: 42,
                instanceGroupUrls: [
                    "Test string"
                ],
                ipAllocationPolicy: {
                    additionalPodRangesConfig: {
                        podRangeInfo: [
                            {
                                rangeName: "Test string",
                                utilization: 42,
                            }
                        ],
                        podRangeNames: [
                            "Test string"
                        ],
                    },
                    clusterIpv4Cidr: "Test string",
                    clusterIpv4CidrBlock: "Test string",
                    clusterSecondaryRangeName: "Test string",
                    createSubnetwork: true,
                    defaultPodIpv4RangeUtilization: 42,
                    ipv6AccessType: "Test string",
                    nodeIpv4Cidr: "Test string",
                    nodeIpv4CidrBlock: "Test string",
                    podCidrOverprovisionConfig: {
                        disable: true,
                    },
                    servicesIpv4Cidr: "Test string",
                    servicesIpv4CidrBlock: "Test string",
                    servicesIpv6CidrBlock: "Test string",
                    servicesSecondaryRangeName: "Test string",
                    stackType: "Test string",
                    subnetIpv6CidrBlock: "Test string",
                    subnetworkName: "Test string",
                    tpuIpv4CidrBlock: "Test string",
                    useIpAliases: true,
                    useRoutes: true,
                },
                labelFingerprint: "Test string",
                legacyAbac: {
                    enabled: true,
                },
                location: "Test string",
                locations: [
                    "Test string"
                ],
                loggingConfig: {
                    componentConfig: {
                        enableComponents: [
                            "Test string"
                        ],
                    },
                },
                loggingService: "Test string",
                maintenancePolicy: {
                    resourceVersion: "Test string",
                    window: {
                        dailyMaintenanceWindow: {
                            duration: "Test string",
                            startTime: "Test string",
                        },
                        maintenanceExclusions: {
                            A: {
                                endTime: "Test string",
                                maintenanceExclusionOptions: {
                                    scope: "Test string",
                                },
                                startTime: "Test string",
                            }
                        },
                        recurringWindow: {
                            recurrence: "Test string",
                            window: {
                                endTime: "Test string",
                                maintenanceExclusionOptions: {
                                    scope: "Test string",
                                },
                                startTime: "Test string",
                            },
                        },
                    },
                },
                masterAuth: {
                    clientCertificate: "Test string",
                    clientCertificateConfig: {
                        issueClientCertificate: true,
                    },
                    clientKey: "Test string",
                    clusterCaCertificate: "Test string",
                    password: "Test string",
                    username: "Test string",
                },
                masterAuthorizedNetworksConfig: {
                    cidrBlocks: [
                        {
                            cidrBlock: "Test string",
                            displayName: "Test string",
                        }
                    ],
                    enabled: true,
                    gcpPublicCidrsAccessEnabled: true,
                },
                meshCertificates: {
                    enableCertificates: true,
                },
                monitoringConfig: {
                    componentConfig: {
                        enableComponents: [
                            "Test string"
                        ],
                    },
                    managedPrometheusConfig: {
                        enabled: true,
                    },
                },
                monitoringService: "Test string",
                name: "Test string",
                network: "Test string",
                networkConfig: {
                    datapathProvider: "Test string",
                    defaultSnatStatus: {
                        disabled: true,
                    },
                    dnsConfig: {
                        clusterDns: "Test string",
                        clusterDnsDomain: "Test string",
                        clusterDnsScope: "Test string",
                    },
                    enableFqdnNetworkPolicy: true,
                    enableIntraNodeVisibility: true,
                    enableL4ilbSubsetting: true,
                    gatewayApiConfig: {
                        channel: "Test string",
                    },
                    network: "Test string",
                    networkPerformanceConfig: {
                        totalEgressBandwidthTier: "Test string",
                    },
                    privateIpv6GoogleAccess: "Test string",
                    serviceExternalIpsConfig: {
                        enabled: true,
                    },
                    subnetwork: "Test string",
                },
                networkPolicy: {
                    enabled: true,
                    provider: "Test string",
                },
                nodeConfig: {
                    accelerators: [
                        {
                            acceleratorCount: "Test string",
                            acceleratorType: "Test string",
                            gpuDriverInstallationConfig: {
                                gpuDriverVersion: "Test string",
                            },
                            gpuPartitionSize: "Test string",
                            gpuSharingConfig: {
                                gpuSharingStrategy: "Test string",
                                maxSharedClientsPerGpu: "Test string",
                            },
                        }
                    ],
                    advancedMachineFeatures: {
                        threadsPerCore: "Test string",
                    },
                    bootDiskKmsKey: "Test string",
                    confidentialNodes: {
                        enabled: true,
                    },
                    diskSizeGb: 42,
                    diskType: "Test string",
                    ephemeralStorageLocalSsdConfig: {
                        localSsdCount: 42,
                    },
                    fastSocket: {
                        enabled: true,
                    },
                    gcfsConfig: {
                        enabled: true,
                    },
                    gvnic: {
                        enabled: true,
                    },
                    imageType: "Test string",
                    kubeletConfig: {
                        cpuCfsQuota: true,
                        cpuCfsQuotaPeriod: "Test string",
                        cpuManagerPolicy: "Test string",
                        insecureKubeletReadonlyPortEnabled: true,
                        podPidsLimit: "Test string",
                    },
                    labels: {
                        A: "Test string"
                    },
                    linuxNodeConfig: {
                        cgroupMode: "Test string",
                        sysctls: {
                            A: "Test string"
                        },
                    },
                    localNvmeSsdBlockConfig: {
                        localSsdCount: 42,
                    },
                    localSsdCount: 42,
                    loggingConfig: {
                        variantConfig: {
                            variant: "Test string",
                        },
                    },
                    machineType: "Test string",
                    metadata: {
                        A: "Test string"
                    },
                    minCpuPlatform: "Test string",
                    nodeGroup: "Test string",
                    oauthScopes: [
                        "Test string"
                    ],
                    preemptible: true,
                    reservationAffinity: {
                        consumeReservationType: "Test string",
                        key: "Test string",
                        values: [
                            "Test string"
                        ],
                    },
                    resourceLabels: {
                        A: "Test string"
                    },
                    sandboxConfig: {
                        type: "Test string",
                    },
                    serviceAccount: "Test string",
                    shieldedInstanceConfig: {
                        enableIntegrityMonitoring: true,
                        enableSecureBoot: true,
                    },
                    soleTenantConfig: {
                        nodeAffinities: [
                            {
                                key: "Test string",
                                operator: "Test string",
                                values: [
                                    "Test string"
                                ],
                            }
                        ],
                    },
                    spot: true,
                    tags: [
                        "Test string"
                    ],
                    taints: [
                        {
                            effect: "Test string",
                            key: "Test string",
                            value: "Test string",
                        }
                    ],
                    windowsNodeConfig: {
                        osVersion: "Test string",
                    },
                    workloadMetadataConfig: {
                        mode: "Test string",
                    },
                },
                nodeIpv4CidrSize: 42,
                nodePoolAutoConfig: {
                    networkTags: {
                        tags: [
                            "Test string"
                        ],
                    },
                },
                nodePoolDefaults: {
                    nodeConfigDefaults: {
                        gcfsConfig: {
                            enabled: true,
                        },
                        loggingConfig: {
                            variantConfig: {
                                variant: "Test string",
                            },
                        },
                    },
                },
                nodePools: [
                    {
                        autoscaling: {
                            autoprovisioned: true,
                            enabled: true,
                            locationPolicy: "Test string",
                            maxNodeCount: 42,
                            minNodeCount: 42,
                            totalMaxNodeCount: 42,
                            totalMinNodeCount: 42,
                        },
                        bestEffortProvisioning: {
                            enabled: true,
                            minProvisionNodes: 42,
                        },
                        conditions: [
                            {
                                canonicalCode: "Test string",
                                code: "Test string",
                                message: "Test string",
                            }
                        ],
                        config: {
                            accelerators: [
                                {
                                    acceleratorCount: "Test string",
                                    acceleratorType: "Test string",
                                    gpuDriverInstallationConfig: {
                                        gpuDriverVersion: "Test string",
                                    },
                                    gpuPartitionSize: "Test string",
                                    gpuSharingConfig: {
                                        gpuSharingStrategy: "Test string",
                                        maxSharedClientsPerGpu: "Test string",
                                    },
                                }
                            ],
                            advancedMachineFeatures: {
                                threadsPerCore: "Test string",
                            },
                            bootDiskKmsKey: "Test string",
                            confidentialNodes: {
                                enabled: true,
                            },
                            diskSizeGb: 42,
                            diskType: "Test string",
                            ephemeralStorageLocalSsdConfig: {
                                localSsdCount: 42,
                            },
                            fastSocket: {
                                enabled: true,
                            },
                            gcfsConfig: {
                                enabled: true,
                            },
                            gvnic: {
                                enabled: true,
                            },
                            imageType: "Test string",
                            kubeletConfig: {
                                cpuCfsQuota: true,
                                cpuCfsQuotaPeriod: "Test string",
                                cpuManagerPolicy: "Test string",
                                insecureKubeletReadonlyPortEnabled: true,
                                podPidsLimit: "Test string",
                            },
                            labels: {
                                A: "Test string"
                            },
                            linuxNodeConfig: {
                                cgroupMode: "Test string",
                                sysctls: {
                                    A: "Test string"
                                },
                            },
                            localNvmeSsdBlockConfig: {
                                localSsdCount: 42,
                            },
                            localSsdCount: 42,
                            loggingConfig: {
                                variantConfig: {
                                    variant: "Test string",
                                },
                            },
                            machineType: "Test string",
                            metadata: {
                                A: "Test string"
                            },
                            minCpuPlatform: "Test string",
                            nodeGroup: "Test string",
                            oauthScopes: [
                                "Test string"
                            ],
                            preemptible: true,
                            reservationAffinity: {
                                consumeReservationType: "Test string",
                                key: "Test string",
                                values: [
                                    "Test string"
                                ],
                            },
                            resourceLabels: {
                                A: "Test string"
                            },
                            sandboxConfig: {
                                type: "Test string",
                            },
                            serviceAccount: "Test string",
                            shieldedInstanceConfig: {
                                enableIntegrityMonitoring: true,
                                enableSecureBoot: true,
                            },
                            soleTenantConfig: {
                                nodeAffinities: [
                                    {
                                        key: "Test string",
                                        operator: "Test string",
                                        values: [
                                            "Test string"
                                        ],
                                    }
                                ],
                            },
                            spot: true,
                            tags: [
                                "Test string"
                            ],
                            taints: [
                                {
                                    effect: "Test string",
                                    key: "Test string",
                                    value: "Test string",
                                }
                            ],
                            windowsNodeConfig: {
                                osVersion: "Test string",
                            },
                            workloadMetadataConfig: {
                                mode: "Test string",
                            },
                        },
                        etag: "Test string",
                        initialNodeCount: 42,
                        instanceGroupUrls: [
                            "Test string"
                        ],
                        locations: [
                            "Test string"
                        ],
                        management: {
                            autoRepair: true,
                            autoUpgrade: true,
                            upgradeOptions: {
                                autoUpgradeStartTime: "Test string",
                                description: "Test string",
                            },
                        },
                        maxPodsConstraint: {
                            maxPodsPerNode: "Test string",
                        },
                        name: "Test string",
                        networkConfig: {
                            createPodRange: true,
                            enablePrivateNodes: true,
                            networkPerformanceConfig: {
                                totalEgressBandwidthTier: "Test string",
                            },
                            podCidrOverprovisionConfig: {
                                disable: true,
                            },
                            podIpv4CidrBlock: "Test string",
                            podIpv4RangeUtilization: 42,
                            podRange: "Test string",
                        },
                        placementPolicy: {
                            type: "Test string",
                        },
                        podIpv4CidrSize: 42,
                        selfLink: "Test string",
                        status: "Test string",
                        statusMessage: "Test string",
                        updateInfo: {
                            blueGreenInfo: {
                                blueInstanceGroupUrls: [
                                    "Test string"
                                ],
                                bluePoolDeletionStartTime: "Test string",
                                greenInstanceGroupUrls: [
                                    "Test string"
                                ],
                                greenPoolVersion: "Test string",
                                phase: "Test string",
                            },
                        },
                        upgradeSettings: {
                            blueGreenSettings: {
                                nodePoolSoakDuration: "Test string",
                                standardRolloutPolicy: {
                                    batchNodeCount: 42,
                                    batchPercentage: 42,
                                    batchSoakDuration: "Test string",
                                },
                            },
                            maxSurge: 42,
                            maxUnavailable: 42,
                            strategy: "Test string",
                        },
                        version: "Test string",
                    }
                ],
                notificationConfig: {
                    pubsub: {
                        enabled: true,
                        filter: {
                            eventType: [
                                "Test string"
                            ],
                        },
                        topic: "Test string",
                    },
                },
                privateClusterConfig: {
                    enablePrivateEndpoint: true,
                    enablePrivateNodes: true,
                    masterGlobalAccessConfig: {
                        enabled: true,
                    },
                    masterIpv4CidrBlock: "Test string",
                    peeringName: "Test string",
                    privateEndpoint: "Test string",
                    privateEndpointSubnetwork: "Test string",
                    publicEndpoint: "Test string",
                },
                releaseChannel: {
                    channel: "Test string",
                },
                resourceLabels: {
                    A: "Test string"
                },
                resourceUsageExportConfig: {
                    bigqueryDestination: {
                        datasetId: "Test string",
                    },
                    consumptionMeteringConfig: {
                        enabled: true,
                    },
                    enableNetworkEgressMetering: true,
                },
                securityPostureConfig: {
                    mode: "Test string",
                    vulnerabilityMode: "Test string",
                },
                selfLink: "Test string",
                servicesIpv4Cidr: "Test string",
                shieldedNodes: {
                    enabled: true,
                },
                status: "Test string",
                statusMessage: "Test string",
                subnetwork: "Test string",
                tpuIpv4CidrBlock: "Test string",
                verticalPodAutoscaling: {
                    enabled: true,
                },
                workloadIdentityConfig: {
                    workloadPool: "Test string",
                },
                zone: "Test string",
            },
            parent: "Test string",
            projectId: "Test string",
            zone: "Test string",
        });
        /**
         * Deletes the cluster, including the Kubernetes endpoint and all worker nodes. Firewalls and routes that were configured during cluster creation are also deleted. Other Google Compute
         * Engine resources that might be in use by the cluster, such as load balancer resources, are not deleted if they weren't present when the cluster was initially created.
         */
        await gapi.client.container.projects.locations.clusters.delete({
            clusterId: "Test string",
            name: "Test string",
            projectId: "Test string",
            zone: "Test string",
        });
        /** Gets the details of a specific cluster. */
        await gapi.client.container.projects.locations.clusters.get({
            clusterId: "Test string",
            name: "Test string",
            projectId: "Test string",
            zone: "Test string",
        });
        /** Gets the public component of the cluster signing keys in JSON Web Key format. This API is not yet intended for general use, and is not available for all clusters. */
        await gapi.client.container.projects.locations.clusters.getJwks({
            parent: "Test string",
        });
        /** Lists all clusters owned by a project in either the specified zone or all zones. */
        await gapi.client.container.projects.locations.clusters.list({
            parent: "Test string",
            projectId: "Test string",
            zone: "Test string",
        });
        /** Sets the addons for a specific cluster. */
        await gapi.client.container.projects.locations.clusters.setAddons({
            name: "Test string",
        }, {
            addonsConfig: {
                cloudRunConfig: {
                    disabled: true,
                    loadBalancerType: "Test string",
                },
                configConnectorConfig: {
                    enabled: true,
                },
                dnsCacheConfig: {
                    enabled: true,
                },
                gcePersistentDiskCsiDriverConfig: {
                    enabled: true,
                },
                gcpFilestoreCsiDriverConfig: {
                    enabled: true,
                },
                gcsFuseCsiDriverConfig: {
                    enabled: true,
                },
                gkeBackupAgentConfig: {
                    enabled: true,
                },
                horizontalPodAutoscaling: {
                    disabled: true,
                },
                httpLoadBalancing: {
                    disabled: true,
                },
                kubernetesDashboard: {
                    disabled: true,
                },
                networkPolicyConfig: {
                    disabled: true,
                },
            },
            clusterId: "Test string",
            name: "Test string",
            projectId: "Test string",
            zone: "Test string",
        });
        /** Enables or disables the ABAC authorization mechanism on a cluster. */
        await gapi.client.container.projects.locations.clusters.setLegacyAbac({
            name: "Test string",
        }, {
            clusterId: "Test string",
            enabled: true,
            name: "Test string",
            projectId: "Test string",
            zone: "Test string",
        });
        /**
         * Sets the locations for a specific cluster. Deprecated. Use
         * [projects.locations.clusters.update](https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters/update) instead.
         */
        await gapi.client.container.projects.locations.clusters.setLocations({
            name: "Test string",
        }, {
            clusterId: "Test string",
            locations: [
                "Test string"
            ],
            name: "Test string",
            projectId: "Test string",
            zone: "Test string",
        });
        /** Sets the logging service for a specific cluster. */
        await gapi.client.container.projects.locations.clusters.setLogging({
            name: "Test string",
        }, {
            clusterId: "Test string",
            loggingService: "Test string",
            name: "Test string",
            projectId: "Test string",
            zone: "Test string",
        });
        /** Sets the maintenance policy for a cluster. */
        await gapi.client.container.projects.locations.clusters.setMaintenancePolicy({
            name: "Test string",
        }, {
            clusterId: "Test string",
            maintenancePolicy: {
                resourceVersion: "Test string",
                window: {
                    dailyMaintenanceWindow: {
                        duration: "Test string",
                        startTime: "Test string",
                    },
                    maintenanceExclusions: {
                        A: {
                            endTime: "Test string",
                            maintenanceExclusionOptions: {
                                scope: "Test string",
                            },
                            startTime: "Test string",
                        }
                    },
                    recurringWindow: {
                        recurrence: "Test string",
                        window: {
                            endTime: "Test string",
                            maintenanceExclusionOptions: {
                                scope: "Test string",
                            },
                            startTime: "Test string",
                        },
                    },
                },
            },
            name: "Test string",
            projectId: "Test string",
            zone: "Test string",
        });
        /** Sets master auth materials. Currently supports changing the admin password or a specific cluster, either via password generation or explicitly setting the password. */
        await gapi.client.container.projects.locations.clusters.setMasterAuth({
            name: "Test string",
        }, {
            action: "Test string",
            clusterId: "Test string",
            name: "Test string",
            projectId: "Test string",
            update: {
                clientCertificate: "Test string",
                clientCertificateConfig: {
                    issueClientCertificate: true,
                },
                clientKey: "Test string",
                clusterCaCertificate: "Test string",
                password: "Test string",
                username: "Test string",
            },
            zone: "Test string",
        });
        /** Sets the monitoring service for a specific cluster. */
        await gapi.client.container.projects.locations.clusters.setMonitoring({
            name: "Test string",
        }, {
            clusterId: "Test string",
            monitoringService: "Test string",
            name: "Test string",
            projectId: "Test string",
            zone: "Test string",
        });
        /** Enables or disables Network Policy for a cluster. */
        await gapi.client.container.projects.locations.clusters.setNetworkPolicy({
            name: "Test string",
        }, {
            clusterId: "Test string",
            name: "Test string",
            networkPolicy: {
                enabled: true,
                provider: "Test string",
            },
            projectId: "Test string",
            zone: "Test string",
        });
        /** Sets labels on a cluster. */
        await gapi.client.container.projects.locations.clusters.setResourceLabels({
            name: "Test string",
        }, {
            clusterId: "Test string",
            labelFingerprint: "Test string",
            name: "Test string",
            projectId: "Test string",
            resourceLabels: {
                A: "Test string"
            },
            zone: "Test string",
        });
        /** Starts master IP rotation. */
        await gapi.client.container.projects.locations.clusters.startIpRotation({
            name: "Test string",
        }, {
            clusterId: "Test string",
            name: "Test string",
            projectId: "Test string",
            rotateCredentials: true,
            zone: "Test string",
        });
        /** Updates the settings of a specific cluster. */
        await gapi.client.container.projects.locations.clusters.update({
            name: "Test string",
        }, {
            clusterId: "Test string",
            name: "Test string",
            projectId: "Test string",
            update: {
                additionalPodRangesConfig: {
                    podRangeInfo: [
                        {
                            rangeName: "Test string",
                            utilization: 42,
                        }
                    ],
                    podRangeNames: [
                        "Test string"
                    ],
                },
                desiredAddonsConfig: {
                    cloudRunConfig: {
                        disabled: true,
                        loadBalancerType: "Test string",
                    },
                    configConnectorConfig: {
                        enabled: true,
                    },
                    dnsCacheConfig: {
                        enabled: true,
                    },
                    gcePersistentDiskCsiDriverConfig: {
                        enabled: true,
                    },
                    gcpFilestoreCsiDriverConfig: {
                        enabled: true,
                    },
                    gcsFuseCsiDriverConfig: {
                        enabled: true,
                    },
                    gkeBackupAgentConfig: {
                        enabled: true,
                    },
                    horizontalPodAutoscaling: {
                        disabled: true,
                    },
                    httpLoadBalancing: {
                        disabled: true,
                    },
                    kubernetesDashboard: {
                        disabled: true,
                    },
                    networkPolicyConfig: {
                        disabled: true,
                    },
                },
                desiredAuthenticatorGroupsConfig: {
                    enabled: true,
                    securityGroup: "Test string",
                },
                desiredAutopilotWorkloadPolicyConfig: {
                    allowNetAdmin: true,
                },
                desiredBinaryAuthorization: {
                    enabled: true,
                    evaluationMode: "Test string",
                },
                desiredClusterAutoscaling: {
                    autoprovisioningLocations: [
                        "Test string"
                    ],
                    autoprovisioningNodePoolDefaults: {
                        bootDiskKmsKey: "Test string",
                        diskSizeGb: 42,
                        diskType: "Test string",
                        imageType: "Test string",
                        insecureKubeletReadonlyPortEnabled: true,
                        management: {
                            autoRepair: true,
                            autoUpgrade: true,
                            upgradeOptions: {
                                autoUpgradeStartTime: "Test string",
                                description: "Test string",
                            },
                        },
                        minCpuPlatform: "Test string",
                        oauthScopes: [
                            "Test string"
                        ],
                        serviceAccount: "Test string",
                        shieldedInstanceConfig: {
                            enableIntegrityMonitoring: true,
                            enableSecureBoot: true,
                        },
                        upgradeSettings: {
                            blueGreenSettings: {
                                nodePoolSoakDuration: "Test string",
                                standardRolloutPolicy: {
                                    batchNodeCount: 42,
                                    batchPercentage: 42,
                                    batchSoakDuration: "Test string",
                                },
                            },
                            maxSurge: 42,
                            maxUnavailable: 42,
                            strategy: "Test string",
                        },
                    },
                    autoscalingProfile: "Test string",
                    enableNodeAutoprovisioning: true,
                    resourceLimits: [
                        {
                            maximum: "Test string",
                            minimum: "Test string",
                            resourceType: "Test string",
                        }
                    ],
                },
                desiredCostManagementConfig: {
                    enabled: true,
                },
                desiredDatabaseEncryption: {
                    keyName: "Test string",
                    state: "Test string",
                },
                desiredDatapathProvider: "Test string",
                desiredDefaultSnatStatus: {
                    disabled: true,
                },
                desiredDnsConfig: {
                    clusterDns: "Test string",
                    clusterDnsDomain: "Test string",
                    clusterDnsScope: "Test string",
                },
                desiredEnableFqdnNetworkPolicy: true,
                desiredEnablePrivateEndpoint: true,
                desiredFleet: {
                    membership: "Test string",
                    preRegistered: true,
                    project: "Test string",
                },
                desiredGatewayApiConfig: {
                    channel: "Test string",
                },
                desiredGcfsConfig: {
                    enabled: true,
                },
                desiredIdentityServiceConfig: {
                    enabled: true,
                },
                desiredImageType: "Test string",
                desiredIntraNodeVisibilityConfig: {
                    enabled: true,
                },
                desiredK8sBetaApis: {
                    enabledApis: [
                        "Test string"
                    ],
                },
                desiredL4ilbSubsettingConfig: {
                    enabled: true,
                },
                desiredLocations: [
                    "Test string"
                ],
                desiredLoggingConfig: {
                    componentConfig: {
                        enableComponents: [
                            "Test string"
                        ],
                    },
                },
                desiredLoggingService: "Test string",
                desiredMasterAuthorizedNetworksConfig: {
                    cidrBlocks: [
                        {
                            cidrBlock: "Test string",
                            displayName: "Test string",
                        }
                    ],
                    enabled: true,
                    gcpPublicCidrsAccessEnabled: true,
                },
                desiredMasterVersion: "Test string",
                desiredMeshCertificates: {
                    enableCertificates: true,
                },
                desiredMonitoringConfig: {
                    componentConfig: {
                        enableComponents: [
                            "Test string"
                        ],
                    },
                    managedPrometheusConfig: {
                        enabled: true,
                    },
                },
                desiredMonitoringService: "Test string",
                desiredNetworkPerformanceConfig: {
                    totalEgressBandwidthTier: "Test string",
                },
                desiredNodePoolAutoConfigNetworkTags: {
                    tags: [
                        "Test string"
                    ],
                },
                desiredNodePoolAutoscaling: {
                    autoprovisioned: true,
                    enabled: true,
                    locationPolicy: "Test string",
                    maxNodeCount: 42,
                    minNodeCount: 42,
                    totalMaxNodeCount: 42,
                    totalMinNodeCount: 42,
                },
                desiredNodePoolId: "Test string",
                desiredNodePoolLoggingConfig: {
                    variantConfig: {
                        variant: "Test string",
                    },
                },
                desiredNodeVersion: "Test string",
                desiredNotificationConfig: {
                    pubsub: {
                        enabled: true,
                        filter: {
                            eventType: [
                                "Test string"
                            ],
                        },
                        topic: "Test string",
                    },
                },
                desiredPrivateClusterConfig: {
                    enablePrivateEndpoint: true,
                    enablePrivateNodes: true,
                    masterGlobalAccessConfig: {
                        enabled: true,
                    },
                    masterIpv4CidrBlock: "Test string",
                    peeringName: "Test string",
                    privateEndpoint: "Test string",
                    privateEndpointSubnetwork: "Test string",
                    publicEndpoint: "Test string",
                },
                desiredPrivateIpv6GoogleAccess: "Test string",
                desiredReleaseChannel: {
                    channel: "Test string",
                },
                desiredResourceUsageExportConfig: {
                    bigqueryDestination: {
                        datasetId: "Test string",
                    },
                    consumptionMeteringConfig: {
                        enabled: true,
                    },
                    enableNetworkEgressMetering: true,
                },
                desiredSecurityPostureConfig: {
                    mode: "Test string",
                    vulnerabilityMode: "Test string",
                },
                desiredServiceExternalIpsConfig: {
                    enabled: true,
                },
                desiredShieldedNodes: {
                    enabled: true,
                },
                desiredStackType: "Test string",
                desiredVerticalPodAutoscaling: {
                    enabled: true,
                },
                desiredWorkloadIdentityConfig: {
                    workloadPool: "Test string",
                },
                enableK8sBetaApis: {
                    enabledApis: [
                        "Test string"
                    ],
                },
                etag: "Test string",
                removedAdditionalPodRangesConfig: {
                    podRangeInfo: [
                        {
                            rangeName: "Test string",
                            utilization: 42,
                        }
                    ],
                    podRangeNames: [
                        "Test string"
                    ],
                },
            },
            zone: "Test string",
        });
        /** Updates the master for a specific cluster. */
        await gapi.client.container.projects.locations.clusters.updateMaster({
            name: "Test string",
        }, {
            clusterId: "Test string",
            masterVersion: "Test string",
            name: "Test string",
            projectId: "Test string",
            zone: "Test string",
        });
        /** CompleteNodePoolUpgrade will signal an on-going node pool upgrade to complete. */
        await gapi.client.container.projects.locations.clusters.nodePools.completeUpgrade({
            name: "Test string",
        }, {
        });
        /** Creates a node pool for a cluster. */
        await gapi.client.container.projects.locations.clusters.nodePools.create({
            parent: "Test string",
        }, {
            clusterId: "Test string",
            nodePool: {
                autoscaling: {
                    autoprovisioned: true,
                    enabled: true,
                    locationPolicy: "Test string",
                    maxNodeCount: 42,
                    minNodeCount: 42,
                    totalMaxNodeCount: 42,
                    totalMinNodeCount: 42,
                },
                bestEffortProvisioning: {
                    enabled: true,
                    minProvisionNodes: 42,
                },
                conditions: [
                    {
                        canonicalCode: "Test string",
                        code: "Test string",
                        message: "Test string",
                    }
                ],
                config: {
                    accelerators: [
                        {
                            acceleratorCount: "Test string",
                            acceleratorType: "Test string",
                            gpuDriverInstallationConfig: {
                                gpuDriverVersion: "Test string",
                            },
                            gpuPartitionSize: "Test string",
                            gpuSharingConfig: {
                                gpuSharingStrategy: "Test string",
                                maxSharedClientsPerGpu: "Test string",
                            },
                        }
                    ],
                    advancedMachineFeatures: {
                        threadsPerCore: "Test string",
                    },
                    bootDiskKmsKey: "Test string",
                    confidentialNodes: {
                        enabled: true,
                    },
                    diskSizeGb: 42,
                    diskType: "Test string",
                    ephemeralStorageLocalSsdConfig: {
                        localSsdCount: 42,
                    },
                    fastSocket: {
                        enabled: true,
                    },
                    gcfsConfig: {
                        enabled: true,
                    },
                    gvnic: {
                        enabled: true,
                    },
                    imageType: "Test string",
                    kubeletConfig: {
                        cpuCfsQuota: true,
                        cpuCfsQuotaPeriod: "Test string",
                        cpuManagerPolicy: "Test string",
                        insecureKubeletReadonlyPortEnabled: true,
                        podPidsLimit: "Test string",
                    },
                    labels: {
                        A: "Test string"
                    },
                    linuxNodeConfig: {
                        cgroupMode: "Test string",
                        sysctls: {
                            A: "Test string"
                        },
                    },
                    localNvmeSsdBlockConfig: {
                        localSsdCount: 42,
                    },
                    localSsdCount: 42,
                    loggingConfig: {
                        variantConfig: {
                            variant: "Test string",
                        },
                    },
                    machineType: "Test string",
                    metadata: {
                        A: "Test string"
                    },
                    minCpuPlatform: "Test string",
                    nodeGroup: "Test string",
                    oauthScopes: [
                        "Test string"
                    ],
                    preemptible: true,
                    reservationAffinity: {
                        consumeReservationType: "Test string",
                        key: "Test string",
                        values: [
                            "Test string"
                        ],
                    },
                    resourceLabels: {
                        A: "Test string"
                    },
                    sandboxConfig: {
                        type: "Test string",
                    },
                    serviceAccount: "Test string",
                    shieldedInstanceConfig: {
                        enableIntegrityMonitoring: true,
                        enableSecureBoot: true,
                    },
                    soleTenantConfig: {
                        nodeAffinities: [
                            {
                                key: "Test string",
                                operator: "Test string",
                                values: [
                                    "Test string"
                                ],
                            }
                        ],
                    },
                    spot: true,
                    tags: [
                        "Test string"
                    ],
                    taints: [
                        {
                            effect: "Test string",
                            key: "Test string",
                            value: "Test string",
                        }
                    ],
                    windowsNodeConfig: {
                        osVersion: "Test string",
                    },
                    workloadMetadataConfig: {
                        mode: "Test string",
                    },
                },
                etag: "Test string",
                initialNodeCount: 42,
                instanceGroupUrls: [
                    "Test string"
                ],
                locations: [
                    "Test string"
                ],
                management: {
                    autoRepair: true,
                    autoUpgrade: true,
                    upgradeOptions: {
                        autoUpgradeStartTime: "Test string",
                        description: "Test string",
                    },
                },
                maxPodsConstraint: {
                    maxPodsPerNode: "Test string",
                },
                name: "Test string",
                networkConfig: {
                    createPodRange: true,
                    enablePrivateNodes: true,
                    networkPerformanceConfig: {
                        totalEgressBandwidthTier: "Test string",
                    },
                    podCidrOverprovisionConfig: {
                        disable: true,
                    },
                    podIpv4CidrBlock: "Test string",
                    podIpv4RangeUtilization: 42,
                    podRange: "Test string",
                },
                placementPolicy: {
                    type: "Test string",
                },
                podIpv4CidrSize: 42,
                selfLink: "Test string",
                status: "Test string",
                statusMessage: "Test string",
                updateInfo: {
                    blueGreenInfo: {
                        blueInstanceGroupUrls: [
                            "Test string"
                        ],
                        bluePoolDeletionStartTime: "Test string",
                        greenInstanceGroupUrls: [
                            "Test string"
                        ],
                        greenPoolVersion: "Test string",
                        phase: "Test string",
                    },
                },
                upgradeSettings: {
                    blueGreenSettings: {
                        nodePoolSoakDuration: "Test string",
                        standardRolloutPolicy: {
                            batchNodeCount: 42,
                            batchPercentage: 42,
                            batchSoakDuration: "Test string",
                        },
                    },
                    maxSurge: 42,
                    maxUnavailable: 42,
                    strategy: "Test string",
                },
                version: "Test string",
            },
            parent: "Test string",
            projectId: "Test string",
            zone: "Test string",
        });
        /** Deletes a node pool from a cluster. */
        await gapi.client.container.projects.locations.clusters.nodePools.delete({
            clusterId: "Test string",
            name: "Test string",
            nodePoolId: "Test string",
            projectId: "Test string",
            zone: "Test string",
        });
        /** Retrieves the requested node pool. */
        await gapi.client.container.projects.locations.clusters.nodePools.get({
            clusterId: "Test string",
            name: "Test string",
            nodePoolId: "Test string",
            projectId: "Test string",
            zone: "Test string",
        });
        /** Lists the node pools for a cluster. */
        await gapi.client.container.projects.locations.clusters.nodePools.list({
            clusterId: "Test string",
            parent: "Test string",
            projectId: "Test string",
            zone: "Test string",
        });
        /** Rolls back a previously Aborted or Failed NodePool upgrade. This makes no changes if the last upgrade successfully completed. */
        await gapi.client.container.projects.locations.clusters.nodePools.rollback({
            name: "Test string",
        }, {
            clusterId: "Test string",
            name: "Test string",
            nodePoolId: "Test string",
            projectId: "Test string",
            respectPdb: true,
            zone: "Test string",
        });
        /** Sets the autoscaling settings for the specified node pool. */
        await gapi.client.container.projects.locations.clusters.nodePools.setAutoscaling({
            name: "Test string",
        }, {
            autoscaling: {
                autoprovisioned: true,
                enabled: true,
                locationPolicy: "Test string",
                maxNodeCount: 42,
                minNodeCount: 42,
                totalMaxNodeCount: 42,
                totalMinNodeCount: 42,
            },
            clusterId: "Test string",
            name: "Test string",
            nodePoolId: "Test string",
            projectId: "Test string",
            zone: "Test string",
        });
        /** Sets the NodeManagement options for a node pool. */
        await gapi.client.container.projects.locations.clusters.nodePools.setManagement({
            name: "Test string",
        }, {
            clusterId: "Test string",
            management: {
                autoRepair: true,
                autoUpgrade: true,
                upgradeOptions: {
                    autoUpgradeStartTime: "Test string",
                    description: "Test string",
                },
            },
            name: "Test string",
            nodePoolId: "Test string",
            projectId: "Test string",
            zone: "Test string",
        });
        /** Sets the size for a specific node pool. The new size will be used for all replicas, including future replicas created by modifying NodePool.locations. */
        await gapi.client.container.projects.locations.clusters.nodePools.setSize({
            name: "Test string",
        }, {
            clusterId: "Test string",
            name: "Test string",
            nodeCount: 42,
            nodePoolId: "Test string",
            projectId: "Test string",
            zone: "Test string",
        });
        /** Updates the version and/or image type for the specified node pool. */
        await gapi.client.container.projects.locations.clusters.nodePools.update({
            name: "Test string",
        }, {
            clusterId: "Test string",
            confidentialNodes: {
                enabled: true,
            },
            etag: "Test string",
            fastSocket: {
                enabled: true,
            },
            gcfsConfig: {
                enabled: true,
            },
            gvnic: {
                enabled: true,
            },
            imageType: "Test string",
            kubeletConfig: {
                cpuCfsQuota: true,
                cpuCfsQuotaPeriod: "Test string",
                cpuManagerPolicy: "Test string",
                insecureKubeletReadonlyPortEnabled: true,
                podPidsLimit: "Test string",
            },
            labels: {
                labels: {
                    A: "Test string"
                },
            },
            linuxNodeConfig: {
                cgroupMode: "Test string",
                sysctls: {
                    A: "Test string"
                },
            },
            locations: [
                "Test string"
            ],
            loggingConfig: {
                variantConfig: {
                    variant: "Test string",
                },
            },
            name: "Test string",
            nodeNetworkConfig: {
                createPodRange: true,
                enablePrivateNodes: true,
                networkPerformanceConfig: {
                    totalEgressBandwidthTier: "Test string",
                },
                podCidrOverprovisionConfig: {
                    disable: true,
                },
                podIpv4CidrBlock: "Test string",
                podIpv4RangeUtilization: 42,
                podRange: "Test string",
            },
            nodePoolId: "Test string",
            nodeVersion: "Test string",
            projectId: "Test string",
            resourceLabels: {
                labels: {
                    A: "Test string"
                },
            },
            tags: {
                tags: [
                    "Test string"
                ],
            },
            taints: {
                taints: [
                    {
                        effect: "Test string",
                        key: "Test string",
                        value: "Test string",
                    }
                ],
            },
            upgradeSettings: {
                blueGreenSettings: {
                    nodePoolSoakDuration: "Test string",
                    standardRolloutPolicy: {
                        batchNodeCount: 42,
                        batchPercentage: 42,
                        batchSoakDuration: "Test string",
                    },
                },
                maxSurge: 42,
                maxUnavailable: 42,
                strategy: "Test string",
            },
            windowsNodeConfig: {
                osVersion: "Test string",
            },
            workloadMetadataConfig: {
                mode: "Test string",
            },
            zone: "Test string",
        });
        /**
         * Gets the OIDC discovery document for the cluster. See the [OpenID Connect Discovery 1.0 specification](https://openid.net/specs/openid-connect-discovery-1_0.html) for details. This API
         * is not yet intended for general use, and is not available for all clusters.
         */
        await gapi.client.container.projects.locations.clusters["well-known"]["getOpenid-configuration"]({
            parent: "Test string",
        });
        /** Cancels the specified operation. */
        await gapi.client.container.projects.locations.operations.cancel({
            name: "Test string",
        }, {
            name: "Test string",
            operationId: "Test string",
            projectId: "Test string",
            zone: "Test string",
        });
        /** Gets the specified operation. */
        await gapi.client.container.projects.locations.operations.get({
            name: "Test string",
            operationId: "Test string",
            projectId: "Test string",
            zone: "Test string",
        });
        /** Lists all operations in a project in a specific zone or all zones. */
        await gapi.client.container.projects.locations.operations.list({
            parent: "Test string",
            projectId: "Test string",
            zone: "Test string",
        });
        /** Returns configuration info about the Google Kubernetes Engine service. */
        await gapi.client.container.projects.zones.getServerconfig({
            name: "Test string",
            projectId: "Test string",
            zone: "Test string",
        });
        /** Sets the addons for a specific cluster. */
        await gapi.client.container.projects.zones.clusters.addons({
            clusterId: "Test string",
            projectId: "Test string",
            zone: "Test string",
        }, {
            addonsConfig: {
                cloudRunConfig: {
                    disabled: true,
                    loadBalancerType: "Test string",
                },
                configConnectorConfig: {
                    enabled: true,
                },
                dnsCacheConfig: {
                    enabled: true,
                },
                gcePersistentDiskCsiDriverConfig: {
                    enabled: true,
                },
                gcpFilestoreCsiDriverConfig: {
                    enabled: true,
                },
                gcsFuseCsiDriverConfig: {
                    enabled: true,
                },
                gkeBackupAgentConfig: {
                    enabled: true,
                },
                horizontalPodAutoscaling: {
                    disabled: true,
                },
                httpLoadBalancing: {
                    disabled: true,
                },
                kubernetesDashboard: {
                    disabled: true,
                },
                networkPolicyConfig: {
                    disabled: true,
                },
            },
            clusterId: "Test string",
            name: "Test string",
            projectId: "Test string",
            zone: "Test string",
        });
        /** Completes master IP rotation. */
        await gapi.client.container.projects.zones.clusters.completeIpRotation({
            clusterId: "Test string",
            projectId: "Test string",
            zone: "Test string",
        }, {
            clusterId: "Test string",
            name: "Test string",
            projectId: "Test string",
            zone: "Test string",
        });
        /**
         * Creates a cluster, consisting of the specified number and type of Google Compute Engine instances. By default, the cluster is created in the project's [default
         * network](https://cloud.google.com/compute/docs/networks-and-firewalls#networks). One firewall is added for the cluster. After cluster creation, the Kubelet creates routes for each node
         * to allow the containers on that node to communicate with all other instances in the cluster. Finally, an entry is added to the project's global metadata indicating which CIDR range the
         * cluster is using.
         */
        await gapi.client.container.projects.zones.clusters.create({
            projectId: "Test string",
            zone: "Test string",
        }, {
            cluster: {
                addonsConfig: {
                    cloudRunConfig: {
                        disabled: true,
                        loadBalancerType: "Test string",
                    },
                    configConnectorConfig: {
                        enabled: true,
                    },
                    dnsCacheConfig: {
                        enabled: true,
                    },
                    gcePersistentDiskCsiDriverConfig: {
                        enabled: true,
                    },
                    gcpFilestoreCsiDriverConfig: {
                        enabled: true,
                    },
                    gcsFuseCsiDriverConfig: {
                        enabled: true,
                    },
                    gkeBackupAgentConfig: {
                        enabled: true,
                    },
                    horizontalPodAutoscaling: {
                        disabled: true,
                    },
                    httpLoadBalancing: {
                        disabled: true,
                    },
                    kubernetesDashboard: {
                        disabled: true,
                    },
                    networkPolicyConfig: {
                        disabled: true,
                    },
                },
                authenticatorGroupsConfig: {
                    enabled: true,
                    securityGroup: "Test string",
                },
                autopilot: {
                    enabled: true,
                    workloadPolicyConfig: {
                        allowNetAdmin: true,
                    },
                },
                autoscaling: {
                    autoprovisioningLocations: [
                        "Test string"
                    ],
                    autoprovisioningNodePoolDefaults: {
                        bootDiskKmsKey: "Test string",
                        diskSizeGb: 42,
                        diskType: "Test string",
                        imageType: "Test string",
                        insecureKubeletReadonlyPortEnabled: true,
                        management: {
                            autoRepair: true,
                            autoUpgrade: true,
                            upgradeOptions: {
                                autoUpgradeStartTime: "Test string",
                                description: "Test string",
                            },
                        },
                        minCpuPlatform: "Test string",
                        oauthScopes: [
                            "Test string"
                        ],
                        serviceAccount: "Test string",
                        shieldedInstanceConfig: {
                            enableIntegrityMonitoring: true,
                            enableSecureBoot: true,
                        },
                        upgradeSettings: {
                            blueGreenSettings: {
                                nodePoolSoakDuration: "Test string",
                                standardRolloutPolicy: {
                                    batchNodeCount: 42,
                                    batchPercentage: 42,
                                    batchSoakDuration: "Test string",
                                },
                            },
                            maxSurge: 42,
                            maxUnavailable: 42,
                            strategy: "Test string",
                        },
                    },
                    autoscalingProfile: "Test string",
                    enableNodeAutoprovisioning: true,
                    resourceLimits: [
                        {
                            maximum: "Test string",
                            minimum: "Test string",
                            resourceType: "Test string",
                        }
                    ],
                },
                binaryAuthorization: {
                    enabled: true,
                    evaluationMode: "Test string",
                },
                clusterIpv4Cidr: "Test string",
                conditions: [
                    {
                        canonicalCode: "Test string",
                        code: "Test string",
                        message: "Test string",
                    }
                ],
                confidentialNodes: {
                    enabled: true,
                },
                costManagementConfig: {
                    enabled: true,
                },
                createTime: "Test string",
                currentMasterVersion: "Test string",
                currentNodeCount: 42,
                currentNodeVersion: "Test string",
                databaseEncryption: {
                    keyName: "Test string",
                    state: "Test string",
                },
                defaultMaxPodsConstraint: {
                    maxPodsPerNode: "Test string",
                },
                description: "Test string",
                enableK8sBetaApis: {
                    enabledApis: [
                        "Test string"
                    ],
                },
                enableKubernetesAlpha: true,
                enableTpu: true,
                endpoint: "Test string",
                etag: "Test string",
                expireTime: "Test string",
                fleet: {
                    membership: "Test string",
                    preRegistered: true,
                    project: "Test string",
                },
                id: "Test string",
                identityServiceConfig: {
                    enabled: true,
                },
                initialClusterVersion: "Test string",
                initialNodeCount: 42,
                instanceGroupUrls: [
                    "Test string"
                ],
                ipAllocationPolicy: {
                    additionalPodRangesConfig: {
                        podRangeInfo: [
                            {
                                rangeName: "Test string",
                                utilization: 42,
                            }
                        ],
                        podRangeNames: [
                            "Test string"
                        ],
                    },
                    clusterIpv4Cidr: "Test string",
                    clusterIpv4CidrBlock: "Test string",
                    clusterSecondaryRangeName: "Test string",
                    createSubnetwork: true,
                    defaultPodIpv4RangeUtilization: 42,
                    ipv6AccessType: "Test string",
                    nodeIpv4Cidr: "Test string",
                    nodeIpv4CidrBlock: "Test string",
                    podCidrOverprovisionConfig: {
                        disable: true,
                    },
                    servicesIpv4Cidr: "Test string",
                    servicesIpv4CidrBlock: "Test string",
                    servicesIpv6CidrBlock: "Test string",
                    servicesSecondaryRangeName: "Test string",
                    stackType: "Test string",
                    subnetIpv6CidrBlock: "Test string",
                    subnetworkName: "Test string",
                    tpuIpv4CidrBlock: "Test string",
                    useIpAliases: true,
                    useRoutes: true,
                },
                labelFingerprint: "Test string",
                legacyAbac: {
                    enabled: true,
                },
                location: "Test string",
                locations: [
                    "Test string"
                ],
                loggingConfig: {
                    componentConfig: {
                        enableComponents: [
                            "Test string"
                        ],
                    },
                },
                loggingService: "Test string",
                maintenancePolicy: {
                    resourceVersion: "Test string",
                    window: {
                        dailyMaintenanceWindow: {
                            duration: "Test string",
                            startTime: "Test string",
                        },
                        maintenanceExclusions: {
                            A: {
                                endTime: "Test string",
                                maintenanceExclusionOptions: {
                                    scope: "Test string",
                                },
                                startTime: "Test string",
                            }
                        },
                        recurringWindow: {
                            recurrence: "Test string",
                            window: {
                                endTime: "Test string",
                                maintenanceExclusionOptions: {
                                    scope: "Test string",
                                },
                                startTime: "Test string",
                            },
                        },
                    },
                },
                masterAuth: {
                    clientCertificate: "Test string",
                    clientCertificateConfig: {
                        issueClientCertificate: true,
                    },
                    clientKey: "Test string",
                    clusterCaCertificate: "Test string",
                    password: "Test string",
                    username: "Test string",
                },
                masterAuthorizedNetworksConfig: {
                    cidrBlocks: [
                        {
                            cidrBlock: "Test string",
                            displayName: "Test string",
                        }
                    ],
                    enabled: true,
                    gcpPublicCidrsAccessEnabled: true,
                },
                meshCertificates: {
                    enableCertificates: true,
                },
                monitoringConfig: {
                    componentConfig: {
                        enableComponents: [
                            "Test string"
                        ],
                    },
                    managedPrometheusConfig: {
                        enabled: true,
                    },
                },
                monitoringService: "Test string",
                name: "Test string",
                network: "Test string",
                networkConfig: {
                    datapathProvider: "Test string",
                    defaultSnatStatus: {
                        disabled: true,
                    },
                    dnsConfig: {
                        clusterDns: "Test string",
                        clusterDnsDomain: "Test string",
                        clusterDnsScope: "Test string",
                    },
                    enableFqdnNetworkPolicy: true,
                    enableIntraNodeVisibility: true,
                    enableL4ilbSubsetting: true,
                    gatewayApiConfig: {
                        channel: "Test string",
                    },
                    network: "Test string",
                    networkPerformanceConfig: {
                        totalEgressBandwidthTier: "Test string",
                    },
                    privateIpv6GoogleAccess: "Test string",
                    serviceExternalIpsConfig: {
                        enabled: true,
                    },
                    subnetwork: "Test string",
                },
                networkPolicy: {
                    enabled: true,
                    provider: "Test string",
                },
                nodeConfig: {
                    accelerators: [
                        {
                            acceleratorCount: "Test string",
                            acceleratorType: "Test string",
                            gpuDriverInstallationConfig: {
                                gpuDriverVersion: "Test string",
                            },
                            gpuPartitionSize: "Test string",
                            gpuSharingConfig: {
                                gpuSharingStrategy: "Test string",
                                maxSharedClientsPerGpu: "Test string",
                            },
                        }
                    ],
                    advancedMachineFeatures: {
                        threadsPerCore: "Test string",
                    },
                    bootDiskKmsKey: "Test string",
                    confidentialNodes: {
                        enabled: true,
                    },
                    diskSizeGb: 42,
                    diskType: "Test string",
                    ephemeralStorageLocalSsdConfig: {
                        localSsdCount: 42,
                    },
                    fastSocket: {
                        enabled: true,
                    },
                    gcfsConfig: {
                        enabled: true,
                    },
                    gvnic: {
                        enabled: true,
                    },
                    imageType: "Test string",
                    kubeletConfig: {
                        cpuCfsQuota: true,
                        cpuCfsQuotaPeriod: "Test string",
                        cpuManagerPolicy: "Test string",
                        insecureKubeletReadonlyPortEnabled: true,
                        podPidsLimit: "Test string",
                    },
                    labels: {
                        A: "Test string"
                    },
                    linuxNodeConfig: {
                        cgroupMode: "Test string",
                        sysctls: {
                            A: "Test string"
                        },
                    },
                    localNvmeSsdBlockConfig: {
                        localSsdCount: 42,
                    },
                    localSsdCount: 42,
                    loggingConfig: {
                        variantConfig: {
                            variant: "Test string",
                        },
                    },
                    machineType: "Test string",
                    metadata: {
                        A: "Test string"
                    },
                    minCpuPlatform: "Test string",
                    nodeGroup: "Test string",
                    oauthScopes: [
                        "Test string"
                    ],
                    preemptible: true,
                    reservationAffinity: {
                        consumeReservationType: "Test string",
                        key: "Test string",
                        values: [
                            "Test string"
                        ],
                    },
                    resourceLabels: {
                        A: "Test string"
                    },
                    sandboxConfig: {
                        type: "Test string",
                    },
                    serviceAccount: "Test string",
                    shieldedInstanceConfig: {
                        enableIntegrityMonitoring: true,
                        enableSecureBoot: true,
                    },
                    soleTenantConfig: {
                        nodeAffinities: [
                            {
                                key: "Test string",
                                operator: "Test string",
                                values: [
                                    "Test string"
                                ],
                            }
                        ],
                    },
                    spot: true,
                    tags: [
                        "Test string"
                    ],
                    taints: [
                        {
                            effect: "Test string",
                            key: "Test string",
                            value: "Test string",
                        }
                    ],
                    windowsNodeConfig: {
                        osVersion: "Test string",
                    },
                    workloadMetadataConfig: {
                        mode: "Test string",
                    },
                },
                nodeIpv4CidrSize: 42,
                nodePoolAutoConfig: {
                    networkTags: {
                        tags: [
                            "Test string"
                        ],
                    },
                },
                nodePoolDefaults: {
                    nodeConfigDefaults: {
                        gcfsConfig: {
                            enabled: true,
                        },
                        loggingConfig: {
                            variantConfig: {
                                variant: "Test string",
                            },
                        },
                    },
                },
                nodePools: [
                    {
                        autoscaling: {
                            autoprovisioned: true,
                            enabled: true,
                            locationPolicy: "Test string",
                            maxNodeCount: 42,
                            minNodeCount: 42,
                            totalMaxNodeCount: 42,
                            totalMinNodeCount: 42,
                        },
                        bestEffortProvisioning: {
                            enabled: true,
                            minProvisionNodes: 42,
                        },
                        conditions: [
                            {
                                canonicalCode: "Test string",
                                code: "Test string",
                                message: "Test string",
                            }
                        ],
                        config: {
                            accelerators: [
                                {
                                    acceleratorCount: "Test string",
                                    acceleratorType: "Test string",
                                    gpuDriverInstallationConfig: {
                                        gpuDriverVersion: "Test string",
                                    },
                                    gpuPartitionSize: "Test string",
                                    gpuSharingConfig: {
                                        gpuSharingStrategy: "Test string",
                                        maxSharedClientsPerGpu: "Test string",
                                    },
                                }
                            ],
                            advancedMachineFeatures: {
                                threadsPerCore: "Test string",
                            },
                            bootDiskKmsKey: "Test string",
                            confidentialNodes: {
                                enabled: true,
                            },
                            diskSizeGb: 42,
                            diskType: "Test string",
                            ephemeralStorageLocalSsdConfig: {
                                localSsdCount: 42,
                            },
                            fastSocket: {
                                enabled: true,
                            },
                            gcfsConfig: {
                                enabled: true,
                            },
                            gvnic: {
                                enabled: true,
                            },
                            imageType: "Test string",
                            kubeletConfig: {
                                cpuCfsQuota: true,
                                cpuCfsQuotaPeriod: "Test string",
                                cpuManagerPolicy: "Test string",
                                insecureKubeletReadonlyPortEnabled: true,
                                podPidsLimit: "Test string",
                            },
                            labels: {
                                A: "Test string"
                            },
                            linuxNodeConfig: {
                                cgroupMode: "Test string",
                                sysctls: {
                                    A: "Test string"
                                },
                            },
                            localNvmeSsdBlockConfig: {
                                localSsdCount: 42,
                            },
                            localSsdCount: 42,
                            loggingConfig: {
                                variantConfig: {
                                    variant: "Test string",
                                },
                            },
                            machineType: "Test string",
                            metadata: {
                                A: "Test string"
                            },
                            minCpuPlatform: "Test string",
                            nodeGroup: "Test string",
                            oauthScopes: [
                                "Test string"
                            ],
                            preemptible: true,
                            reservationAffinity: {
                                consumeReservationType: "Test string",
                                key: "Test string",
                                values: [
                                    "Test string"
                                ],
                            },
                            resourceLabels: {
                                A: "Test string"
                            },
                            sandboxConfig: {
                                type: "Test string",
                            },
                            serviceAccount: "Test string",
                            shieldedInstanceConfig: {
                                enableIntegrityMonitoring: true,
                                enableSecureBoot: true,
                            },
                            soleTenantConfig: {
                                nodeAffinities: [
                                    {
                                        key: "Test string",
                                        operator: "Test string",
                                        values: [
                                            "Test string"
                                        ],
                                    }
                                ],
                            },
                            spot: true,
                            tags: [
                                "Test string"
                            ],
                            taints: [
                                {
                                    effect: "Test string",
                                    key: "Test string",
                                    value: "Test string",
                                }
                            ],
                            windowsNodeConfig: {
                                osVersion: "Test string",
                            },
                            workloadMetadataConfig: {
                                mode: "Test string",
                            },
                        },
                        etag: "Test string",
                        initialNodeCount: 42,
                        instanceGroupUrls: [
                            "Test string"
                        ],
                        locations: [
                            "Test string"
                        ],
                        management: {
                            autoRepair: true,
                            autoUpgrade: true,
                            upgradeOptions: {
                                autoUpgradeStartTime: "Test string",
                                description: "Test string",
                            },
                        },
                        maxPodsConstraint: {
                            maxPodsPerNode: "Test string",
                        },
                        name: "Test string",
                        networkConfig: {
                            createPodRange: true,
                            enablePrivateNodes: true,
                            networkPerformanceConfig: {
                                totalEgressBandwidthTier: "Test string",
                            },
                            podCidrOverprovisionConfig: {
                                disable: true,
                            },
                            podIpv4CidrBlock: "Test string",
                            podIpv4RangeUtilization: 42,
                            podRange: "Test string",
                        },
                        placementPolicy: {
                            type: "Test string",
                        },
                        podIpv4CidrSize: 42,
                        selfLink: "Test string",
                        status: "Test string",
                        statusMessage: "Test string",
                        updateInfo: {
                            blueGreenInfo: {
                                blueInstanceGroupUrls: [
                                    "Test string"
                                ],
                                bluePoolDeletionStartTime: "Test string",
                                greenInstanceGroupUrls: [
                                    "Test string"
                                ],
                                greenPoolVersion: "Test string",
                                phase: "Test string",
                            },
                        },
                        upgradeSettings: {
                            blueGreenSettings: {
                                nodePoolSoakDuration: "Test string",
                                standardRolloutPolicy: {
                                    batchNodeCount: 42,
                                    batchPercentage: 42,
                                    batchSoakDuration: "Test string",
                                },
                            },
                            maxSurge: 42,
                            maxUnavailable: 42,
                            strategy: "Test string",
                        },
                        version: "Test string",
                    }
                ],
                notificationConfig: {
                    pubsub: {
                        enabled: true,
                        filter: {
                            eventType: [
                                "Test string"
                            ],
                        },
                        topic: "Test string",
                    },
                },
                privateClusterConfig: {
                    enablePrivateEndpoint: true,
                    enablePrivateNodes: true,
                    masterGlobalAccessConfig: {
                        enabled: true,
                    },
                    masterIpv4CidrBlock: "Test string",
                    peeringName: "Test string",
                    privateEndpoint: "Test string",
                    privateEndpointSubnetwork: "Test string",
                    publicEndpoint: "Test string",
                },
                releaseChannel: {
                    channel: "Test string",
                },
                resourceLabels: {
                    A: "Test string"
                },
                resourceUsageExportConfig: {
                    bigqueryDestination: {
                        datasetId: "Test string",
                    },
                    consumptionMeteringConfig: {
                        enabled: true,
                    },
                    enableNetworkEgressMetering: true,
                },
                securityPostureConfig: {
                    mode: "Test string",
                    vulnerabilityMode: "Test string",
                },
                selfLink: "Test string",
                servicesIpv4Cidr: "Test string",
                shieldedNodes: {
                    enabled: true,
                },
                status: "Test string",
                statusMessage: "Test string",
                subnetwork: "Test string",
                tpuIpv4CidrBlock: "Test string",
                verticalPodAutoscaling: {
                    enabled: true,
                },
                workloadIdentityConfig: {
                    workloadPool: "Test string",
                },
                zone: "Test string",
            },
            parent: "Test string",
            projectId: "Test string",
            zone: "Test string",
        });
        /**
         * Deletes the cluster, including the Kubernetes endpoint and all worker nodes. Firewalls and routes that were configured during cluster creation are also deleted. Other Google Compute
         * Engine resources that might be in use by the cluster, such as load balancer resources, are not deleted if they weren't present when the cluster was initially created.
         */
        await gapi.client.container.projects.zones.clusters.delete({
            clusterId: "Test string",
            name: "Test string",
            projectId: "Test string",
            zone: "Test string",
        });
        /** Gets the details of a specific cluster. */
        await gapi.client.container.projects.zones.clusters.get({
            clusterId: "Test string",
            name: "Test string",
            projectId: "Test string",
            zone: "Test string",
        });
        /** Enables or disables the ABAC authorization mechanism on a cluster. */
        await gapi.client.container.projects.zones.clusters.legacyAbac({
            clusterId: "Test string",
            projectId: "Test string",
            zone: "Test string",
        }, {
            clusterId: "Test string",
            enabled: true,
            name: "Test string",
            projectId: "Test string",
            zone: "Test string",
        });
        /** Lists all clusters owned by a project in either the specified zone or all zones. */
        await gapi.client.container.projects.zones.clusters.list({
            parent: "Test string",
            projectId: "Test string",
            zone: "Test string",
        });
        /**
         * Sets the locations for a specific cluster. Deprecated. Use
         * [projects.locations.clusters.update](https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters/update) instead.
         */
        await gapi.client.container.projects.zones.clusters.locations({
            clusterId: "Test string",
            projectId: "Test string",
            zone: "Test string",
        }, {
            clusterId: "Test string",
            locations: [
                "Test string"
            ],
            name: "Test string",
            projectId: "Test string",
            zone: "Test string",
        });
        /** Sets the logging service for a specific cluster. */
        await gapi.client.container.projects.zones.clusters.logging({
            clusterId: "Test string",
            projectId: "Test string",
            zone: "Test string",
        }, {
            clusterId: "Test string",
            loggingService: "Test string",
            name: "Test string",
            projectId: "Test string",
            zone: "Test string",
        });
        /** Updates the master for a specific cluster. */
        await gapi.client.container.projects.zones.clusters.master({
            clusterId: "Test string",
            projectId: "Test string",
            zone: "Test string",
        }, {
            clusterId: "Test string",
            masterVersion: "Test string",
            name: "Test string",
            projectId: "Test string",
            zone: "Test string",
        });
        /** Sets the monitoring service for a specific cluster. */
        await gapi.client.container.projects.zones.clusters.monitoring({
            clusterId: "Test string",
            projectId: "Test string",
            zone: "Test string",
        }, {
            clusterId: "Test string",
            monitoringService: "Test string",
            name: "Test string",
            projectId: "Test string",
            zone: "Test string",
        });
        /** Sets labels on a cluster. */
        await gapi.client.container.projects.zones.clusters.resourceLabels({
            clusterId: "Test string",
            projectId: "Test string",
            zone: "Test string",
        }, {
            clusterId: "Test string",
            labelFingerprint: "Test string",
            name: "Test string",
            projectId: "Test string",
            resourceLabels: {
                A: "Test string"
            },
            zone: "Test string",
        });
        /** Sets the maintenance policy for a cluster. */
        await gapi.client.container.projects.zones.clusters.setMaintenancePolicy({
            clusterId: "Test string",
            projectId: "Test string",
            zone: "Test string",
        }, {
            clusterId: "Test string",
            maintenancePolicy: {
                resourceVersion: "Test string",
                window: {
                    dailyMaintenanceWindow: {
                        duration: "Test string",
                        startTime: "Test string",
                    },
                    maintenanceExclusions: {
                        A: {
                            endTime: "Test string",
                            maintenanceExclusionOptions: {
                                scope: "Test string",
                            },
                            startTime: "Test string",
                        }
                    },
                    recurringWindow: {
                        recurrence: "Test string",
                        window: {
                            endTime: "Test string",
                            maintenanceExclusionOptions: {
                                scope: "Test string",
                            },
                            startTime: "Test string",
                        },
                    },
                },
            },
            name: "Test string",
            projectId: "Test string",
            zone: "Test string",
        });
        /** Sets master auth materials. Currently supports changing the admin password or a specific cluster, either via password generation or explicitly setting the password. */
        await gapi.client.container.projects.zones.clusters.setMasterAuth({
            clusterId: "Test string",
            projectId: "Test string",
            zone: "Test string",
        }, {
            action: "Test string",
            clusterId: "Test string",
            name: "Test string",
            projectId: "Test string",
            update: {
                clientCertificate: "Test string",
                clientCertificateConfig: {
                    issueClientCertificate: true,
                },
                clientKey: "Test string",
                clusterCaCertificate: "Test string",
                password: "Test string",
                username: "Test string",
            },
            zone: "Test string",
        });
        /** Enables or disables Network Policy for a cluster. */
        await gapi.client.container.projects.zones.clusters.setNetworkPolicy({
            clusterId: "Test string",
            projectId: "Test string",
            zone: "Test string",
        }, {
            clusterId: "Test string",
            name: "Test string",
            networkPolicy: {
                enabled: true,
                provider: "Test string",
            },
            projectId: "Test string",
            zone: "Test string",
        });
        /** Starts master IP rotation. */
        await gapi.client.container.projects.zones.clusters.startIpRotation({
            clusterId: "Test string",
            projectId: "Test string",
            zone: "Test string",
        }, {
            clusterId: "Test string",
            name: "Test string",
            projectId: "Test string",
            rotateCredentials: true,
            zone: "Test string",
        });
        /** Updates the settings of a specific cluster. */
        await gapi.client.container.projects.zones.clusters.update({
            clusterId: "Test string",
            projectId: "Test string",
            zone: "Test string",
        }, {
            clusterId: "Test string",
            name: "Test string",
            projectId: "Test string",
            update: {
                additionalPodRangesConfig: {
                    podRangeInfo: [
                        {
                            rangeName: "Test string",
                            utilization: 42,
                        }
                    ],
                    podRangeNames: [
                        "Test string"
                    ],
                },
                desiredAddonsConfig: {
                    cloudRunConfig: {
                        disabled: true,
                        loadBalancerType: "Test string",
                    },
                    configConnectorConfig: {
                        enabled: true,
                    },
                    dnsCacheConfig: {
                        enabled: true,
                    },
                    gcePersistentDiskCsiDriverConfig: {
                        enabled: true,
                    },
                    gcpFilestoreCsiDriverConfig: {
                        enabled: true,
                    },
                    gcsFuseCsiDriverConfig: {
                        enabled: true,
                    },
                    gkeBackupAgentConfig: {
                        enabled: true,
                    },
                    horizontalPodAutoscaling: {
                        disabled: true,
                    },
                    httpLoadBalancing: {
                        disabled: true,
                    },
                    kubernetesDashboard: {
                        disabled: true,
                    },
                    networkPolicyConfig: {
                        disabled: true,
                    },
                },
                desiredAuthenticatorGroupsConfig: {
                    enabled: true,
                    securityGroup: "Test string",
                },
                desiredAutopilotWorkloadPolicyConfig: {
                    allowNetAdmin: true,
                },
                desiredBinaryAuthorization: {
                    enabled: true,
                    evaluationMode: "Test string",
                },
                desiredClusterAutoscaling: {
                    autoprovisioningLocations: [
                        "Test string"
                    ],
                    autoprovisioningNodePoolDefaults: {
                        bootDiskKmsKey: "Test string",
                        diskSizeGb: 42,
                        diskType: "Test string",
                        imageType: "Test string",
                        insecureKubeletReadonlyPortEnabled: true,
                        management: {
                            autoRepair: true,
                            autoUpgrade: true,
                            upgradeOptions: {
                                autoUpgradeStartTime: "Test string",
                                description: "Test string",
                            },
                        },
                        minCpuPlatform: "Test string",
                        oauthScopes: [
                            "Test string"
                        ],
                        serviceAccount: "Test string",
                        shieldedInstanceConfig: {
                            enableIntegrityMonitoring: true,
                            enableSecureBoot: true,
                        },
                        upgradeSettings: {
                            blueGreenSettings: {
                                nodePoolSoakDuration: "Test string",
                                standardRolloutPolicy: {
                                    batchNodeCount: 42,
                                    batchPercentage: 42,
                                    batchSoakDuration: "Test string",
                                },
                            },
                            maxSurge: 42,
                            maxUnavailable: 42,
                            strategy: "Test string",
                        },
                    },
                    autoscalingProfile: "Test string",
                    enableNodeAutoprovisioning: true,
                    resourceLimits: [
                        {
                            maximum: "Test string",
                            minimum: "Test string",
                            resourceType: "Test string",
                        }
                    ],
                },
                desiredCostManagementConfig: {
                    enabled: true,
                },
                desiredDatabaseEncryption: {
                    keyName: "Test string",
                    state: "Test string",
                },
                desiredDatapathProvider: "Test string",
                desiredDefaultSnatStatus: {
                    disabled: true,
                },
                desiredDnsConfig: {
                    clusterDns: "Test string",
                    clusterDnsDomain: "Test string",
                    clusterDnsScope: "Test string",
                },
                desiredEnableFqdnNetworkPolicy: true,
                desiredEnablePrivateEndpoint: true,
                desiredFleet: {
                    membership: "Test string",
                    preRegistered: true,
                    project: "Test string",
                },
                desiredGatewayApiConfig: {
                    channel: "Test string",
                },
                desiredGcfsConfig: {
                    enabled: true,
                },
                desiredIdentityServiceConfig: {
                    enabled: true,
                },
                desiredImageType: "Test string",
                desiredIntraNodeVisibilityConfig: {
                    enabled: true,
                },
                desiredK8sBetaApis: {
                    enabledApis: [
                        "Test string"
                    ],
                },
                desiredL4ilbSubsettingConfig: {
                    enabled: true,
                },
                desiredLocations: [
                    "Test string"
                ],
                desiredLoggingConfig: {
                    componentConfig: {
                        enableComponents: [
                            "Test string"
                        ],
                    },
                },
                desiredLoggingService: "Test string",
                desiredMasterAuthorizedNetworksConfig: {
                    cidrBlocks: [
                        {
                            cidrBlock: "Test string",
                            displayName: "Test string",
                        }
                    ],
                    enabled: true,
                    gcpPublicCidrsAccessEnabled: true,
                },
                desiredMasterVersion: "Test string",
                desiredMeshCertificates: {
                    enableCertificates: true,
                },
                desiredMonitoringConfig: {
                    componentConfig: {
                        enableComponents: [
                            "Test string"
                        ],
                    },
                    managedPrometheusConfig: {
                        enabled: true,
                    },
                },
                desiredMonitoringService: "Test string",
                desiredNetworkPerformanceConfig: {
                    totalEgressBandwidthTier: "Test string",
                },
                desiredNodePoolAutoConfigNetworkTags: {
                    tags: [
                        "Test string"
                    ],
                },
                desiredNodePoolAutoscaling: {
                    autoprovisioned: true,
                    enabled: true,
                    locationPolicy: "Test string",
                    maxNodeCount: 42,
                    minNodeCount: 42,
                    totalMaxNodeCount: 42,
                    totalMinNodeCount: 42,
                },
                desiredNodePoolId: "Test string",
                desiredNodePoolLoggingConfig: {
                    variantConfig: {
                        variant: "Test string",
                    },
                },
                desiredNodeVersion: "Test string",
                desiredNotificationConfig: {
                    pubsub: {
                        enabled: true,
                        filter: {
                            eventType: [
                                "Test string"
                            ],
                        },
                        topic: "Test string",
                    },
                },
                desiredPrivateClusterConfig: {
                    enablePrivateEndpoint: true,
                    enablePrivateNodes: true,
                    masterGlobalAccessConfig: {
                        enabled: true,
                    },
                    masterIpv4CidrBlock: "Test string",
                    peeringName: "Test string",
                    privateEndpoint: "Test string",
                    privateEndpointSubnetwork: "Test string",
                    publicEndpoint: "Test string",
                },
                desiredPrivateIpv6GoogleAccess: "Test string",
                desiredReleaseChannel: {
                    channel: "Test string",
                },
                desiredResourceUsageExportConfig: {
                    bigqueryDestination: {
                        datasetId: "Test string",
                    },
                    consumptionMeteringConfig: {
                        enabled: true,
                    },
                    enableNetworkEgressMetering: true,
                },
                desiredSecurityPostureConfig: {
                    mode: "Test string",
                    vulnerabilityMode: "Test string",
                },
                desiredServiceExternalIpsConfig: {
                    enabled: true,
                },
                desiredShieldedNodes: {
                    enabled: true,
                },
                desiredStackType: "Test string",
                desiredVerticalPodAutoscaling: {
                    enabled: true,
                },
                desiredWorkloadIdentityConfig: {
                    workloadPool: "Test string",
                },
                enableK8sBetaApis: {
                    enabledApis: [
                        "Test string"
                    ],
                },
                etag: "Test string",
                removedAdditionalPodRangesConfig: {
                    podRangeInfo: [
                        {
                            rangeName: "Test string",
                            utilization: 42,
                        }
                    ],
                    podRangeNames: [
                        "Test string"
                    ],
                },
            },
            zone: "Test string",
        });
        /** Sets the autoscaling settings for the specified node pool. */
        await gapi.client.container.projects.zones.clusters.nodePools.autoscaling({
            clusterId: "Test string",
            nodePoolId: "Test string",
            projectId: "Test string",
            zone: "Test string",
        }, {
            autoscaling: {
                autoprovisioned: true,
                enabled: true,
                locationPolicy: "Test string",
                maxNodeCount: 42,
                minNodeCount: 42,
                totalMaxNodeCount: 42,
                totalMinNodeCount: 42,
            },
            clusterId: "Test string",
            name: "Test string",
            nodePoolId: "Test string",
            projectId: "Test string",
            zone: "Test string",
        });
        /** Creates a node pool for a cluster. */
        await gapi.client.container.projects.zones.clusters.nodePools.create({
            clusterId: "Test string",
            projectId: "Test string",
            zone: "Test string",
        }, {
            clusterId: "Test string",
            nodePool: {
                autoscaling: {
                    autoprovisioned: true,
                    enabled: true,
                    locationPolicy: "Test string",
                    maxNodeCount: 42,
                    minNodeCount: 42,
                    totalMaxNodeCount: 42,
                    totalMinNodeCount: 42,
                },
                bestEffortProvisioning: {
                    enabled: true,
                    minProvisionNodes: 42,
                },
                conditions: [
                    {
                        canonicalCode: "Test string",
                        code: "Test string",
                        message: "Test string",
                    }
                ],
                config: {
                    accelerators: [
                        {
                            acceleratorCount: "Test string",
                            acceleratorType: "Test string",
                            gpuDriverInstallationConfig: {
                                gpuDriverVersion: "Test string",
                            },
                            gpuPartitionSize: "Test string",
                            gpuSharingConfig: {
                                gpuSharingStrategy: "Test string",
                                maxSharedClientsPerGpu: "Test string",
                            },
                        }
                    ],
                    advancedMachineFeatures: {
                        threadsPerCore: "Test string",
                    },
                    bootDiskKmsKey: "Test string",
                    confidentialNodes: {
                        enabled: true,
                    },
                    diskSizeGb: 42,
                    diskType: "Test string",
                    ephemeralStorageLocalSsdConfig: {
                        localSsdCount: 42,
                    },
                    fastSocket: {
                        enabled: true,
                    },
                    gcfsConfig: {
                        enabled: true,
                    },
                    gvnic: {
                        enabled: true,
                    },
                    imageType: "Test string",
                    kubeletConfig: {
                        cpuCfsQuota: true,
                        cpuCfsQuotaPeriod: "Test string",
                        cpuManagerPolicy: "Test string",
                        insecureKubeletReadonlyPortEnabled: true,
                        podPidsLimit: "Test string",
                    },
                    labels: {
                        A: "Test string"
                    },
                    linuxNodeConfig: {
                        cgroupMode: "Test string",
                        sysctls: {
                            A: "Test string"
                        },
                    },
                    localNvmeSsdBlockConfig: {
                        localSsdCount: 42,
                    },
                    localSsdCount: 42,
                    loggingConfig: {
                        variantConfig: {
                            variant: "Test string",
                        },
                    },
                    machineType: "Test string",
                    metadata: {
                        A: "Test string"
                    },
                    minCpuPlatform: "Test string",
                    nodeGroup: "Test string",
                    oauthScopes: [
                        "Test string"
                    ],
                    preemptible: true,
                    reservationAffinity: {
                        consumeReservationType: "Test string",
                        key: "Test string",
                        values: [
                            "Test string"
                        ],
                    },
                    resourceLabels: {
                        A: "Test string"
                    },
                    sandboxConfig: {
                        type: "Test string",
                    },
                    serviceAccount: "Test string",
                    shieldedInstanceConfig: {
                        enableIntegrityMonitoring: true,
                        enableSecureBoot: true,
                    },
                    soleTenantConfig: {
                        nodeAffinities: [
                            {
                                key: "Test string",
                                operator: "Test string",
                                values: [
                                    "Test string"
                                ],
                            }
                        ],
                    },
                    spot: true,
                    tags: [
                        "Test string"
                    ],
                    taints: [
                        {
                            effect: "Test string",
                            key: "Test string",
                            value: "Test string",
                        }
                    ],
                    windowsNodeConfig: {
                        osVersion: "Test string",
                    },
                    workloadMetadataConfig: {
                        mode: "Test string",
                    },
                },
                etag: "Test string",
                initialNodeCount: 42,
                instanceGroupUrls: [
                    "Test string"
                ],
                locations: [
                    "Test string"
                ],
                management: {
                    autoRepair: true,
                    autoUpgrade: true,
                    upgradeOptions: {
                        autoUpgradeStartTime: "Test string",
                        description: "Test string",
                    },
                },
                maxPodsConstraint: {
                    maxPodsPerNode: "Test string",
                },
                name: "Test string",
                networkConfig: {
                    createPodRange: true,
                    enablePrivateNodes: true,
                    networkPerformanceConfig: {
                        totalEgressBandwidthTier: "Test string",
                    },
                    podCidrOverprovisionConfig: {
                        disable: true,
                    },
                    podIpv4CidrBlock: "Test string",
                    podIpv4RangeUtilization: 42,
                    podRange: "Test string",
                },
                placementPolicy: {
                    type: "Test string",
                },
                podIpv4CidrSize: 42,
                selfLink: "Test string",
                status: "Test string",
                statusMessage: "Test string",
                updateInfo: {
                    blueGreenInfo: {
                        blueInstanceGroupUrls: [
                            "Test string"
                        ],
                        bluePoolDeletionStartTime: "Test string",
                        greenInstanceGroupUrls: [
                            "Test string"
                        ],
                        greenPoolVersion: "Test string",
                        phase: "Test string",
                    },
                },
                upgradeSettings: {
                    blueGreenSettings: {
                        nodePoolSoakDuration: "Test string",
                        standardRolloutPolicy: {
                            batchNodeCount: 42,
                            batchPercentage: 42,
                            batchSoakDuration: "Test string",
                        },
                    },
                    maxSurge: 42,
                    maxUnavailable: 42,
                    strategy: "Test string",
                },
                version: "Test string",
            },
            parent: "Test string",
            projectId: "Test string",
            zone: "Test string",
        });
        /** Deletes a node pool from a cluster. */
        await gapi.client.container.projects.zones.clusters.nodePools.delete({
            clusterId: "Test string",
            name: "Test string",
            nodePoolId: "Test string",
            projectId: "Test string",
            zone: "Test string",
        });
        /** Retrieves the requested node pool. */
        await gapi.client.container.projects.zones.clusters.nodePools.get({
            clusterId: "Test string",
            name: "Test string",
            nodePoolId: "Test string",
            projectId: "Test string",
            zone: "Test string",
        });
        /** Lists the node pools for a cluster. */
        await gapi.client.container.projects.zones.clusters.nodePools.list({
            clusterId: "Test string",
            parent: "Test string",
            projectId: "Test string",
            zone: "Test string",
        });
        /** Rolls back a previously Aborted or Failed NodePool upgrade. This makes no changes if the last upgrade successfully completed. */
        await gapi.client.container.projects.zones.clusters.nodePools.rollback({
            clusterId: "Test string",
            nodePoolId: "Test string",
            projectId: "Test string",
            zone: "Test string",
        }, {
            clusterId: "Test string",
            name: "Test string",
            nodePoolId: "Test string",
            projectId: "Test string",
            respectPdb: true,
            zone: "Test string",
        });
        /** Sets the NodeManagement options for a node pool. */
        await gapi.client.container.projects.zones.clusters.nodePools.setManagement({
            clusterId: "Test string",
            nodePoolId: "Test string",
            projectId: "Test string",
            zone: "Test string",
        }, {
            clusterId: "Test string",
            management: {
                autoRepair: true,
                autoUpgrade: true,
                upgradeOptions: {
                    autoUpgradeStartTime: "Test string",
                    description: "Test string",
                },
            },
            name: "Test string",
            nodePoolId: "Test string",
            projectId: "Test string",
            zone: "Test string",
        });
        /** Sets the size for a specific node pool. The new size will be used for all replicas, including future replicas created by modifying NodePool.locations. */
        await gapi.client.container.projects.zones.clusters.nodePools.setSize({
            clusterId: "Test string",
            nodePoolId: "Test string",
            projectId: "Test string",
            zone: "Test string",
        }, {
            clusterId: "Test string",
            name: "Test string",
            nodeCount: 42,
            nodePoolId: "Test string",
            projectId: "Test string",
            zone: "Test string",
        });
        /** Updates the version and/or image type for the specified node pool. */
        await gapi.client.container.projects.zones.clusters.nodePools.update({
            clusterId: "Test string",
            nodePoolId: "Test string",
            projectId: "Test string",
            zone: "Test string",
        }, {
            clusterId: "Test string",
            confidentialNodes: {
                enabled: true,
            },
            etag: "Test string",
            fastSocket: {
                enabled: true,
            },
            gcfsConfig: {
                enabled: true,
            },
            gvnic: {
                enabled: true,
            },
            imageType: "Test string",
            kubeletConfig: {
                cpuCfsQuota: true,
                cpuCfsQuotaPeriod: "Test string",
                cpuManagerPolicy: "Test string",
                insecureKubeletReadonlyPortEnabled: true,
                podPidsLimit: "Test string",
            },
            labels: {
                labels: {
                    A: "Test string"
                },
            },
            linuxNodeConfig: {
                cgroupMode: "Test string",
                sysctls: {
                    A: "Test string"
                },
            },
            locations: [
                "Test string"
            ],
            loggingConfig: {
                variantConfig: {
                    variant: "Test string",
                },
            },
            name: "Test string",
            nodeNetworkConfig: {
                createPodRange: true,
                enablePrivateNodes: true,
                networkPerformanceConfig: {
                    totalEgressBandwidthTier: "Test string",
                },
                podCidrOverprovisionConfig: {
                    disable: true,
                },
                podIpv4CidrBlock: "Test string",
                podIpv4RangeUtilization: 42,
                podRange: "Test string",
            },
            nodePoolId: "Test string",
            nodeVersion: "Test string",
            projectId: "Test string",
            resourceLabels: {
                labels: {
                    A: "Test string"
                },
            },
            tags: {
                tags: [
                    "Test string"
                ],
            },
            taints: {
                taints: [
                    {
                        effect: "Test string",
                        key: "Test string",
                        value: "Test string",
                    }
                ],
            },
            upgradeSettings: {
                blueGreenSettings: {
                    nodePoolSoakDuration: "Test string",
                    standardRolloutPolicy: {
                        batchNodeCount: 42,
                        batchPercentage: 42,
                        batchSoakDuration: "Test string",
                    },
                },
                maxSurge: 42,
                maxUnavailable: 42,
                strategy: "Test string",
            },
            windowsNodeConfig: {
                osVersion: "Test string",
            },
            workloadMetadataConfig: {
                mode: "Test string",
            },
            zone: "Test string",
        });
        /** Cancels the specified operation. */
        await gapi.client.container.projects.zones.operations.cancel({
            operationId: "Test string",
            projectId: "Test string",
            zone: "Test string",
        }, {
            name: "Test string",
            operationId: "Test string",
            projectId: "Test string",
            zone: "Test string",
        });
        /** Gets the specified operation. */
        await gapi.client.container.projects.zones.operations.get({
            name: "Test string",
            operationId: "Test string",
            projectId: "Test string",
            zone: "Test string",
        });
        /** Lists all operations in a project in a specific zone or all zones. */
        await gapi.client.container.projects.zones.operations.list({
            parent: "Test string",
            projectId: "Test string",
            zone: "Test string",
        });
    }
});
