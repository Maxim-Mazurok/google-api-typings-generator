/* This is stub file for gapi.client.redis-v1beta1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20231009

gapi.load('client', async () => {
    /** now we can use gapi.client */

    await gapi.client.load('https://redis.googleapis.com/$discovery/rest?version=v1beta1');
    /** now we can use gapi.client.redis */

    /** don't forget to authenticate your client before sending any request to resources: */
    /** declare client_id registered in Google Developers Console */
    const client_id = '<<PUT YOUR CLIENT ID HERE>>';
    const scope = [
        /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
        'https://www.googleapis.com/auth/cloud-platform',
    ];
    const immediate = false;
    gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
        if (authResult && !authResult.error) {
            /** handle successful authorization */
            run();
        } else {
            /** handle authorization error */
        }
    });

    async function run() {
        /** Gets information about a location. */
        await gapi.client.redis.projects.locations.get({
            name: "Test string",
        });
        /** Lists information about the supported locations for this service. */
        await gapi.client.redis.projects.locations.list({
            filter: "Test string",
            name: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /**
         * Creates a Redis cluster based on the specified properties. The creation is executed asynchronously and callers may check the returned operation to track its progress. Once the operation
         * is completed the Redis cluster will be fully functional. The completed longrunning.Operation will contain the new cluster object in the response field. The returned operation is
         * automatically deleted after a few hours, so there is no need to call DeleteOperation.
         */
        await gapi.client.redis.projects.locations.clusters.create({
            clusterId: "Test string",
            parent: "Test string",
            requestId: "Test string",
        }, {
            authorizationMode: "Test string",
            createTime: "Test string",
            discoveryEndpoints: [
                {
                    address: "Test string",
                    port: 42,
                    pscConfig: {
                        network: "Test string",
                    },
                }
            ],
            name: "Test string",
            pscConfigs: [
                {
                    network: "Test string",
                }
            ],
            pscConnections: [
                {
                    address: "Test string",
                    forwardingRule: "Test string",
                    network: "Test string",
                    projectId: "Test string",
                    pscConnectionId: "Test string",
                }
            ],
            replicaCount: 42,
            shardCount: 42,
            sizeGb: 42,
            state: "Test string",
            stateInfo: {
                updateInfo: {
                    targetReplicaCount: 42,
                    targetShardCount: 42,
                },
            },
            transitEncryptionMode: "Test string",
            uid: "Test string",
        });
        /** Deletes a specific Redis cluster. Cluster stops serving and data is deleted. */
        await gapi.client.redis.projects.locations.clusters.delete({
            name: "Test string",
            requestId: "Test string",
        });
        /** Gets the details of a specific Redis cluster. */
        await gapi.client.redis.projects.locations.clusters.get({
            name: "Test string",
        });
        /** Gets the details of certificate authority information for Redis cluster. */
        await gapi.client.redis.projects.locations.clusters.getCertificateAuthority({
            name: "Test string",
        });
        /**
         * Lists all Redis clusters owned by a project in either the specified location (region) or all locations. The location should have the following format: *
         * `projects/{project_id}/locations/{location_id}` If `location_id` is specified as `-` (wildcard), then all regions available to the project are queried, and the results are aggregated.
         */
        await gapi.client.redis.projects.locations.clusters.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Updates the metadata and configuration of a specific Redis cluster. Completed longrunning.Operation will contain the new cluster object in the response field. The returned operation is
         * automatically deleted after a few hours, so there is no need to call DeleteOperation.
         */
        await gapi.client.redis.projects.locations.clusters.patch({
            name: "Test string",
            requestId: "Test string",
            updateMask: "Test string",
        }, {
            authorizationMode: "Test string",
            createTime: "Test string",
            discoveryEndpoints: [
                {
                    address: "Test string",
                    port: 42,
                    pscConfig: {
                        network: "Test string",
                    },
                }
            ],
            name: "Test string",
            pscConfigs: [
                {
                    network: "Test string",
                }
            ],
            pscConnections: [
                {
                    address: "Test string",
                    forwardingRule: "Test string",
                    network: "Test string",
                    projectId: "Test string",
                    pscConnectionId: "Test string",
                }
            ],
            replicaCount: 42,
            shardCount: 42,
            sizeGb: 42,
            state: "Test string",
            stateInfo: {
                updateInfo: {
                    targetReplicaCount: 42,
                    targetShardCount: 42,
                },
            },
            transitEncryptionMode: "Test string",
            uid: "Test string",
        });
        /**
         * Creates a Redis instance based on the specified tier and memory size. By default, the instance is accessible from the project's [default network](https://cloud.google.com/vpc/docs/vpc).
         * The creation is executed asynchronously and callers may check the returned operation to track its progress. Once the operation is completed the Redis instance will be fully functional.
         * The completed longrunning.Operation will contain the new instance object in the response field. The returned operation is automatically deleted after a few hours, so there is no need to
         * call DeleteOperation.
         */
        await gapi.client.redis.projects.locations.instances.create({
            instanceId: "Test string",
            parent: "Test string",
        }, {
            alternativeLocationId: "Test string",
            authEnabled: true,
            authorizedNetwork: "Test string",
            availableMaintenanceVersions: [
                "Test string"
            ],
            connectMode: "Test string",
            createTime: "Test string",
            currentLocationId: "Test string",
            customerManagedKey: "Test string",
            displayName: "Test string",
            host: "Test string",
            labels: {
                A: "Test string"
            },
            locationId: "Test string",
            maintenancePolicy: {
                createTime: "Test string",
                description: "Test string",
                updateTime: "Test string",
                weeklyMaintenanceWindow: [
                    {
                        day: "Test string",
                        duration: "Test string",
                        startTime: {
                            hours: 42,
                            minutes: 42,
                            nanos: 42,
                            seconds: 42,
                        },
                    }
                ],
            },
            maintenanceSchedule: {
                canReschedule: true,
                endTime: "Test string",
                scheduleDeadlineTime: "Test string",
                startTime: "Test string",
            },
            maintenanceVersion: "Test string",
            memorySizeGb: 42,
            name: "Test string",
            nodes: [
                {
                    id: "Test string",
                    zone: "Test string",
                }
            ],
            persistenceConfig: {
                persistenceMode: "Test string",
                rdbNextSnapshotTime: "Test string",
                rdbSnapshotPeriod: "Test string",
                rdbSnapshotStartTime: "Test string",
            },
            persistenceIamIdentity: "Test string",
            port: 42,
            readEndpoint: "Test string",
            readEndpointPort: 42,
            readReplicasMode: "Test string",
            redisConfigs: {
                A: "Test string"
            },
            redisVersion: "Test string",
            replicaCount: 42,
            reservedIpRange: "Test string",
            secondaryIpRange: "Test string",
            serverCaCerts: [
                {
                    cert: "Test string",
                    createTime: "Test string",
                    expireTime: "Test string",
                    serialNumber: "Test string",
                    sha1Fingerprint: "Test string",
                }
            ],
            state: "Test string",
            statusMessage: "Test string",
            suspensionReasons: [
                "Test string"
            ],
            tier: "Test string",
            transitEncryptionMode: "Test string",
        });
        /** Deletes a specific Redis instance. Instance stops serving and data is deleted. */
        await gapi.client.redis.projects.locations.instances.delete({
            name: "Test string",
        });
        /**
         * Export Redis instance data into a Redis RDB format file in Cloud Storage. Redis will continue serving during this operation. The returned operation is automatically deleted after a few
         * hours, so there is no need to call DeleteOperation.
         */
        await gapi.client.redis.projects.locations.instances.export({
            name: "Test string",
        }, {
            outputConfig: {
                gcsDestination: {
                    uri: "Test string",
                },
            },
        });
        /** Initiates a failover of the primary node to current replica node for a specific STANDARD tier Cloud Memorystore for Redis instance. */
        await gapi.client.redis.projects.locations.instances.failover({
            name: "Test string",
        }, {
            dataProtectionMode: "Test string",
        });
        /** Gets the details of a specific Redis instance. */
        await gapi.client.redis.projects.locations.instances.get({
            name: "Test string",
        });
        /** Gets the AUTH string for a Redis instance. If AUTH is not enabled for the instance the response will be empty. This information is not included in the details returned to GetInstance. */
        await gapi.client.redis.projects.locations.instances.getAuthString({
            name: "Test string",
        });
        /**
         * Import a Redis RDB snapshot file from Cloud Storage into a Redis instance. Redis may stop serving during this operation. Instance state will be IMPORTING for entire operation. When
         * complete, the instance will contain only data from the imported file. The returned operation is automatically deleted after a few hours, so there is no need to call DeleteOperation.
         */
        await gapi.client.redis.projects.locations.instances.import({
            name: "Test string",
        }, {
            inputConfig: {
                gcsSource: {
                    uri: "Test string",
                },
            },
        });
        /**
         * Lists all Redis instances owned by a project in either the specified location (region) or all locations. The location should have the following format: *
         * `projects/{project_id}/locations/{location_id}` If `location_id` is specified as `-` (wildcard), then all regions available to the project are queried, and the results are aggregated.
         */
        await gapi.client.redis.projects.locations.instances.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Updates the metadata and configuration of a specific Redis instance. Completed longrunning.Operation will contain the new instance object in the response field. The returned operation
         * is automatically deleted after a few hours, so there is no need to call DeleteOperation.
         */
        await gapi.client.redis.projects.locations.instances.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            alternativeLocationId: "Test string",
            authEnabled: true,
            authorizedNetwork: "Test string",
            availableMaintenanceVersions: [
                "Test string"
            ],
            connectMode: "Test string",
            createTime: "Test string",
            currentLocationId: "Test string",
            customerManagedKey: "Test string",
            displayName: "Test string",
            host: "Test string",
            labels: {
                A: "Test string"
            },
            locationId: "Test string",
            maintenancePolicy: {
                createTime: "Test string",
                description: "Test string",
                updateTime: "Test string",
                weeklyMaintenanceWindow: [
                    {
                        day: "Test string",
                        duration: "Test string",
                        startTime: {
                            hours: 42,
                            minutes: 42,
                            nanos: 42,
                            seconds: 42,
                        },
                    }
                ],
            },
            maintenanceSchedule: {
                canReschedule: true,
                endTime: "Test string",
                scheduleDeadlineTime: "Test string",
                startTime: "Test string",
            },
            maintenanceVersion: "Test string",
            memorySizeGb: 42,
            name: "Test string",
            nodes: [
                {
                    id: "Test string",
                    zone: "Test string",
                }
            ],
            persistenceConfig: {
                persistenceMode: "Test string",
                rdbNextSnapshotTime: "Test string",
                rdbSnapshotPeriod: "Test string",
                rdbSnapshotStartTime: "Test string",
            },
            persistenceIamIdentity: "Test string",
            port: 42,
            readEndpoint: "Test string",
            readEndpointPort: 42,
            readReplicasMode: "Test string",
            redisConfigs: {
                A: "Test string"
            },
            redisVersion: "Test string",
            replicaCount: 42,
            reservedIpRange: "Test string",
            secondaryIpRange: "Test string",
            serverCaCerts: [
                {
                    cert: "Test string",
                    createTime: "Test string",
                    expireTime: "Test string",
                    serialNumber: "Test string",
                    sha1Fingerprint: "Test string",
                }
            ],
            state: "Test string",
            statusMessage: "Test string",
            suspensionReasons: [
                "Test string"
            ],
            tier: "Test string",
            transitEncryptionMode: "Test string",
        });
        /** Reschedule maintenance for a given instance in a given project and location. */
        await gapi.client.redis.projects.locations.instances.rescheduleMaintenance({
            name: "Test string",
        }, {
            rescheduleType: "Test string",
            scheduleTime: "Test string",
        });
        /** Upgrades Redis instance to the newer Redis version specified in the request. */
        await gapi.client.redis.projects.locations.instances.upgrade({
            name: "Test string",
        }, {
            redisVersion: "Test string",
        });
        /**
         * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this
         * method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation
         * completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of
         * 1, corresponding to `Code.CANCELLED`.
         */
        await gapi.client.redis.projects.locations.operations.cancel({
            name: "Test string",
        });
        /**
         * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support
         * this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
         */
        await gapi.client.redis.projects.locations.operations.delete({
            name: "Test string",
        });
        /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
        await gapi.client.redis.projects.locations.operations.get({
            name: "Test string",
        });
        /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
        await gapi.client.redis.projects.locations.operations.list({
            filter: "Test string",
            name: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
    }
});
