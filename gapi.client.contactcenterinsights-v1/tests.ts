/* This is stub file for gapi.client.contactcenterinsights-v1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20240611

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://contactcenterinsights.googleapis.com/$discovery/rest?version=v1'
  );
  /** now we can use gapi.client.contactcenterinsights */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
    'https://www.googleapis.com/auth/cloud-platform',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Gets project-level settings. */
    await gapi.client.contactcenterinsights.projects.locations.getSettings({
      name: 'Test string',
    });
    /** Updates project-level settings. */
    await gapi.client.contactcenterinsights.projects.locations.updateSettings(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        analysisConfig: {
          annotatorSelector: {
            issueModels: ['Test string'],
            phraseMatchers: ['Test string'],
            runEntityAnnotator: true,
            runIntentAnnotator: true,
            runInterruptionAnnotator: true,
            runIssueModelAnnotator: true,
            runPhraseMatcherAnnotator: true,
            runSentimentAnnotator: true,
            runSilenceAnnotator: true,
            runSummarizationAnnotator: true,
            summarizationConfig: {
              conversationProfile: 'Test string',
              summarizationModel: 'Test string',
            },
          },
          runtimeIntegrationAnalysisPercentage: 42,
          uploadConversationAnalysisPercentage: 42,
        },
        conversationTtl: 'Test string',
        createTime: 'Test string',
        languageCode: 'Test string',
        name: 'Test string',
        pubsubNotificationSettings: {
          A: 'Test string',
        },
        redactionConfig: {
          deidentifyTemplate: 'Test string',
          inspectTemplate: 'Test string',
        },
        speechConfig: {
          speechRecognizer: 'Test string',
        },
        updateTime: 'Test string',
      }
    );
    /** Analyzes multiple conversations in a single request. */
    await gapi.client.contactcenterinsights.projects.locations.conversations.bulkAnalyze(
      {
        parent: 'Test string',
      },
      {
        analysisPercentage: 42,
        annotatorSelector: {
          issueModels: ['Test string'],
          phraseMatchers: ['Test string'],
          runEntityAnnotator: true,
          runIntentAnnotator: true,
          runInterruptionAnnotator: true,
          runIssueModelAnnotator: true,
          runPhraseMatcherAnnotator: true,
          runSentimentAnnotator: true,
          runSilenceAnnotator: true,
          runSummarizationAnnotator: true,
          summarizationConfig: {
            conversationProfile: 'Test string',
            summarizationModel: 'Test string',
          },
        },
        filter: 'Test string',
        parent: 'Test string',
      }
    );
    /** Deletes multiple conversations in a single request. */
    await gapi.client.contactcenterinsights.projects.locations.conversations.bulkDelete(
      {
        parent: 'Test string',
      },
      {
        filter: 'Test string',
        force: true,
        maxDeleteCount: 42,
        parent: 'Test string',
      }
    );
    /** Gets conversation statistics. */
    await gapi.client.contactcenterinsights.projects.locations.conversations.calculateStats(
      {
        filter: 'Test string',
        location: 'Test string',
      }
    );
    /** Creates a conversation. Does not support audio transcription or DLP redaction. Use `conversations.upload` instead. */
    await gapi.client.contactcenterinsights.projects.locations.conversations.create(
      {
        conversationId: 'Test string',
        parent: 'Test string',
      },
      {
        agentId: 'Test string',
        callMetadata: {
          agentChannel: 42,
          customerChannel: 42,
        },
        createTime: 'Test string',
        dataSource: {
          dialogflowSource: {
            audioUri: 'Test string',
            dialogflowConversation: 'Test string',
          },
          gcsSource: {
            audioUri: 'Test string',
            transcriptUri: 'Test string',
          },
        },
        dialogflowIntents: {
          A: {
            displayName: 'Test string',
          },
        },
        duration: 'Test string',
        expireTime: 'Test string',
        labels: {
          A: 'Test string',
        },
        languageCode: 'Test string',
        latestAnalysis: {
          analysisResult: {
            callAnalysisMetadata: {
              annotations: [
                {
                  annotationEndBoundary: {
                    transcriptIndex: 42,
                    wordIndex: 42,
                  },
                  annotationStartBoundary: {
                    transcriptIndex: 42,
                    wordIndex: 42,
                  },
                  channelTag: 42,
                  entityMentionData: {
                    entityUniqueId: 'Test string',
                    sentiment: {
                      magnitude: 42,
                      score: 42,
                    },
                    type: 'Test string',
                  },
                  holdData: {},
                  intentMatchData: {
                    intentUniqueId: 'Test string',
                  },
                  interruptionData: {},
                  issueMatchData: {
                    issueAssignment: {
                      displayName: 'Test string',
                      issue: 'Test string',
                      score: 42,
                    },
                  },
                  phraseMatchData: {
                    displayName: 'Test string',
                    phraseMatcher: 'Test string',
                  },
                  sentimentData: {
                    magnitude: 42,
                    score: 42,
                  },
                  silenceData: {},
                },
              ],
              entities: {
                A: {
                  displayName: 'Test string',
                  metadata: {
                    A: 'Test string',
                  },
                  salience: 42,
                  sentiment: {
                    magnitude: 42,
                    score: 42,
                  },
                  type: 'Test string',
                },
              },
              intents: {
                A: {
                  displayName: 'Test string',
                  id: 'Test string',
                },
              },
              issueModelResult: {
                issueModel: 'Test string',
                issues: [
                  {
                    displayName: 'Test string',
                    issue: 'Test string',
                    score: 42,
                  },
                ],
              },
              phraseMatchers: {
                A: {
                  displayName: 'Test string',
                  phraseMatcher: 'Test string',
                },
              },
              sentiments: [
                {
                  channelTag: 42,
                  sentimentData: {
                    magnitude: 42,
                    score: 42,
                  },
                },
              ],
              silence: {
                silenceDuration: 'Test string',
                silencePercentage: 42,
              },
            },
            endTime: 'Test string',
          },
          annotatorSelector: {
            issueModels: ['Test string'],
            phraseMatchers: ['Test string'],
            runEntityAnnotator: true,
            runIntentAnnotator: true,
            runInterruptionAnnotator: true,
            runIssueModelAnnotator: true,
            runPhraseMatcherAnnotator: true,
            runSentimentAnnotator: true,
            runSilenceAnnotator: true,
            runSummarizationAnnotator: true,
            summarizationConfig: {
              conversationProfile: 'Test string',
              summarizationModel: 'Test string',
            },
          },
          createTime: 'Test string',
          name: 'Test string',
          requestTime: 'Test string',
        },
        latestSummary: {
          answerRecord: 'Test string',
          confidence: 42,
          conversationModel: 'Test string',
          metadata: {
            A: 'Test string',
          },
          text: 'Test string',
          textSections: {
            A: 'Test string',
          },
        },
        medium: 'Test string',
        name: 'Test string',
        obfuscatedUserId: 'Test string',
        qualityMetadata: {
          agentInfo: [
            {
              agentId: 'Test string',
              displayName: 'Test string',
              dispositionCode: 'Test string',
              team: 'Test string',
            },
          ],
          customerSatisfactionRating: 42,
          menuPath: 'Test string',
          waitDuration: 'Test string',
        },
        runtimeAnnotations: [
          {
            annotationId: 'Test string',
            answerFeedback: {
              clicked: true,
              correctnessLevel: 'Test string',
              displayed: true,
            },
            articleSuggestion: {
              confidenceScore: 42,
              metadata: {
                A: 'Test string',
              },
              queryRecord: 'Test string',
              source: 'Test string',
              title: 'Test string',
              uri: 'Test string',
            },
            conversationSummarizationSuggestion: {
              answerRecord: 'Test string',
              confidence: 42,
              conversationModel: 'Test string',
              metadata: {
                A: 'Test string',
              },
              text: 'Test string',
              textSections: {
                A: 'Test string',
              },
            },
            createTime: 'Test string',
            dialogflowInteraction: {
              confidence: 42,
              dialogflowIntentId: 'Test string',
            },
            endBoundary: {
              transcriptIndex: 42,
              wordIndex: 42,
            },
            faqAnswer: {
              answer: 'Test string',
              confidenceScore: 42,
              metadata: {
                A: 'Test string',
              },
              queryRecord: 'Test string',
              question: 'Test string',
              source: 'Test string',
            },
            smartComposeSuggestion: {
              confidenceScore: 42,
              metadata: {
                A: 'Test string',
              },
              queryRecord: 'Test string',
              suggestion: 'Test string',
            },
            smartReply: {
              confidenceScore: 42,
              metadata: {
                A: 'Test string',
              },
              queryRecord: 'Test string',
              reply: 'Test string',
            },
            startBoundary: {
              transcriptIndex: 42,
              wordIndex: 42,
            },
            userInput: {
              generatorName: 'Test string',
              query: 'Test string',
            },
          },
        ],
        startTime: 'Test string',
        transcript: {
          transcriptSegments: [
            {
              channelTag: 42,
              confidence: 42,
              dialogflowSegmentMetadata: {
                smartReplyAllowlistCovered: true,
              },
              languageCode: 'Test string',
              messageTime: 'Test string',
              segmentParticipant: {
                dialogflowParticipant: 'Test string',
                dialogflowParticipantName: 'Test string',
                obfuscatedExternalUserId: 'Test string',
                role: 'Test string',
                userId: 'Test string',
              },
              sentiment: {
                magnitude: 42,
                score: 42,
              },
              text: 'Test string',
              words: [
                {
                  confidence: 42,
                  endOffset: 'Test string',
                  startOffset: 'Test string',
                  word: 'Test string',
                },
              ],
            },
          ],
        },
        ttl: 'Test string',
        turnCount: 42,
        updateTime: 'Test string',
      }
    );
    /** Deletes a conversation. */
    await gapi.client.contactcenterinsights.projects.locations.conversations.delete(
      {
        force: true,
        name: 'Test string',
      }
    );
    /** Gets a conversation. */
    await gapi.client.contactcenterinsights.projects.locations.conversations.get(
      {
        name: 'Test string',
        view: 'Test string',
      }
    );
    /** Imports conversations and processes them according to the user's configuration. */
    await gapi.client.contactcenterinsights.projects.locations.conversations.ingest(
      {
        parent: 'Test string',
      },
      {
        conversationConfig: {
          agentChannel: 42,
          agentId: 'Test string',
          customerChannel: 42,
        },
        gcsSource: {
          bucketObjectType: 'Test string',
          bucketUri: 'Test string',
          customMetadataKeys: ['Test string'],
          metadataBucketUri: 'Test string',
        },
        parent: 'Test string',
        redactionConfig: {
          deidentifyTemplate: 'Test string',
          inspectTemplate: 'Test string',
        },
        sampleSize: 42,
        speechConfig: {
          speechRecognizer: 'Test string',
        },
        transcriptObjectConfig: {
          medium: 'Test string',
        },
      }
    );
    /** Lists conversations. */
    await gapi.client.contactcenterinsights.projects.locations.conversations.list(
      {
        filter: 'Test string',
        orderBy: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
        view: 'Test string',
      }
    );
    /** Updates a conversation. */
    await gapi.client.contactcenterinsights.projects.locations.conversations.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        agentId: 'Test string',
        callMetadata: {
          agentChannel: 42,
          customerChannel: 42,
        },
        createTime: 'Test string',
        dataSource: {
          dialogflowSource: {
            audioUri: 'Test string',
            dialogflowConversation: 'Test string',
          },
          gcsSource: {
            audioUri: 'Test string',
            transcriptUri: 'Test string',
          },
        },
        dialogflowIntents: {
          A: {
            displayName: 'Test string',
          },
        },
        duration: 'Test string',
        expireTime: 'Test string',
        labels: {
          A: 'Test string',
        },
        languageCode: 'Test string',
        latestAnalysis: {
          analysisResult: {
            callAnalysisMetadata: {
              annotations: [
                {
                  annotationEndBoundary: {
                    transcriptIndex: 42,
                    wordIndex: 42,
                  },
                  annotationStartBoundary: {
                    transcriptIndex: 42,
                    wordIndex: 42,
                  },
                  channelTag: 42,
                  entityMentionData: {
                    entityUniqueId: 'Test string',
                    sentiment: {
                      magnitude: 42,
                      score: 42,
                    },
                    type: 'Test string',
                  },
                  holdData: {},
                  intentMatchData: {
                    intentUniqueId: 'Test string',
                  },
                  interruptionData: {},
                  issueMatchData: {
                    issueAssignment: {
                      displayName: 'Test string',
                      issue: 'Test string',
                      score: 42,
                    },
                  },
                  phraseMatchData: {
                    displayName: 'Test string',
                    phraseMatcher: 'Test string',
                  },
                  sentimentData: {
                    magnitude: 42,
                    score: 42,
                  },
                  silenceData: {},
                },
              ],
              entities: {
                A: {
                  displayName: 'Test string',
                  metadata: {
                    A: 'Test string',
                  },
                  salience: 42,
                  sentiment: {
                    magnitude: 42,
                    score: 42,
                  },
                  type: 'Test string',
                },
              },
              intents: {
                A: {
                  displayName: 'Test string',
                  id: 'Test string',
                },
              },
              issueModelResult: {
                issueModel: 'Test string',
                issues: [
                  {
                    displayName: 'Test string',
                    issue: 'Test string',
                    score: 42,
                  },
                ],
              },
              phraseMatchers: {
                A: {
                  displayName: 'Test string',
                  phraseMatcher: 'Test string',
                },
              },
              sentiments: [
                {
                  channelTag: 42,
                  sentimentData: {
                    magnitude: 42,
                    score: 42,
                  },
                },
              ],
              silence: {
                silenceDuration: 'Test string',
                silencePercentage: 42,
              },
            },
            endTime: 'Test string',
          },
          annotatorSelector: {
            issueModels: ['Test string'],
            phraseMatchers: ['Test string'],
            runEntityAnnotator: true,
            runIntentAnnotator: true,
            runInterruptionAnnotator: true,
            runIssueModelAnnotator: true,
            runPhraseMatcherAnnotator: true,
            runSentimentAnnotator: true,
            runSilenceAnnotator: true,
            runSummarizationAnnotator: true,
            summarizationConfig: {
              conversationProfile: 'Test string',
              summarizationModel: 'Test string',
            },
          },
          createTime: 'Test string',
          name: 'Test string',
          requestTime: 'Test string',
        },
        latestSummary: {
          answerRecord: 'Test string',
          confidence: 42,
          conversationModel: 'Test string',
          metadata: {
            A: 'Test string',
          },
          text: 'Test string',
          textSections: {
            A: 'Test string',
          },
        },
        medium: 'Test string',
        name: 'Test string',
        obfuscatedUserId: 'Test string',
        qualityMetadata: {
          agentInfo: [
            {
              agentId: 'Test string',
              displayName: 'Test string',
              dispositionCode: 'Test string',
              team: 'Test string',
            },
          ],
          customerSatisfactionRating: 42,
          menuPath: 'Test string',
          waitDuration: 'Test string',
        },
        runtimeAnnotations: [
          {
            annotationId: 'Test string',
            answerFeedback: {
              clicked: true,
              correctnessLevel: 'Test string',
              displayed: true,
            },
            articleSuggestion: {
              confidenceScore: 42,
              metadata: {
                A: 'Test string',
              },
              queryRecord: 'Test string',
              source: 'Test string',
              title: 'Test string',
              uri: 'Test string',
            },
            conversationSummarizationSuggestion: {
              answerRecord: 'Test string',
              confidence: 42,
              conversationModel: 'Test string',
              metadata: {
                A: 'Test string',
              },
              text: 'Test string',
              textSections: {
                A: 'Test string',
              },
            },
            createTime: 'Test string',
            dialogflowInteraction: {
              confidence: 42,
              dialogflowIntentId: 'Test string',
            },
            endBoundary: {
              transcriptIndex: 42,
              wordIndex: 42,
            },
            faqAnswer: {
              answer: 'Test string',
              confidenceScore: 42,
              metadata: {
                A: 'Test string',
              },
              queryRecord: 'Test string',
              question: 'Test string',
              source: 'Test string',
            },
            smartComposeSuggestion: {
              confidenceScore: 42,
              metadata: {
                A: 'Test string',
              },
              queryRecord: 'Test string',
              suggestion: 'Test string',
            },
            smartReply: {
              confidenceScore: 42,
              metadata: {
                A: 'Test string',
              },
              queryRecord: 'Test string',
              reply: 'Test string',
            },
            startBoundary: {
              transcriptIndex: 42,
              wordIndex: 42,
            },
            userInput: {
              generatorName: 'Test string',
              query: 'Test string',
            },
          },
        ],
        startTime: 'Test string',
        transcript: {
          transcriptSegments: [
            {
              channelTag: 42,
              confidence: 42,
              dialogflowSegmentMetadata: {
                smartReplyAllowlistCovered: true,
              },
              languageCode: 'Test string',
              messageTime: 'Test string',
              segmentParticipant: {
                dialogflowParticipant: 'Test string',
                dialogflowParticipantName: 'Test string',
                obfuscatedExternalUserId: 'Test string',
                role: 'Test string',
                userId: 'Test string',
              },
              sentiment: {
                magnitude: 42,
                score: 42,
              },
              text: 'Test string',
              words: [
                {
                  confidence: 42,
                  endOffset: 'Test string',
                  startOffset: 'Test string',
                  word: 'Test string',
                },
              ],
            },
          ],
        },
        ttl: 'Test string',
        turnCount: 42,
        updateTime: 'Test string',
      }
    );
    /** Create a long-running conversation upload operation. This method differs from `CreateConversation` by allowing audio transcription and optional DLP redaction. */
    await gapi.client.contactcenterinsights.projects.locations.conversations.upload(
      {
        parent: 'Test string',
      },
      {
        conversation: {
          agentId: 'Test string',
          callMetadata: {
            agentChannel: 42,
            customerChannel: 42,
          },
          createTime: 'Test string',
          dataSource: {
            dialogflowSource: {
              audioUri: 'Test string',
              dialogflowConversation: 'Test string',
            },
            gcsSource: {
              audioUri: 'Test string',
              transcriptUri: 'Test string',
            },
          },
          dialogflowIntents: {
            A: {
              displayName: 'Test string',
            },
          },
          duration: 'Test string',
          expireTime: 'Test string',
          labels: {
            A: 'Test string',
          },
          languageCode: 'Test string',
          latestAnalysis: {
            analysisResult: {
              callAnalysisMetadata: {
                annotations: [
                  {
                    annotationEndBoundary: {
                      transcriptIndex: 42,
                      wordIndex: 42,
                    },
                    annotationStartBoundary: {
                      transcriptIndex: 42,
                      wordIndex: 42,
                    },
                    channelTag: 42,
                    entityMentionData: {
                      entityUniqueId: 'Test string',
                      sentiment: {
                        magnitude: 42,
                        score: 42,
                      },
                      type: 'Test string',
                    },
                    holdData: {},
                    intentMatchData: {
                      intentUniqueId: 'Test string',
                    },
                    interruptionData: {},
                    issueMatchData: {
                      issueAssignment: {
                        displayName: 'Test string',
                        issue: 'Test string',
                        score: 42,
                      },
                    },
                    phraseMatchData: {
                      displayName: 'Test string',
                      phraseMatcher: 'Test string',
                    },
                    sentimentData: {
                      magnitude: 42,
                      score: 42,
                    },
                    silenceData: {},
                  },
                ],
                entities: {
                  A: {
                    displayName: 'Test string',
                    metadata: {
                      A: 'Test string',
                    },
                    salience: 42,
                    sentiment: {
                      magnitude: 42,
                      score: 42,
                    },
                    type: 'Test string',
                  },
                },
                intents: {
                  A: {
                    displayName: 'Test string',
                    id: 'Test string',
                  },
                },
                issueModelResult: {
                  issueModel: 'Test string',
                  issues: [
                    {
                      displayName: 'Test string',
                      issue: 'Test string',
                      score: 42,
                    },
                  ],
                },
                phraseMatchers: {
                  A: {
                    displayName: 'Test string',
                    phraseMatcher: 'Test string',
                  },
                },
                sentiments: [
                  {
                    channelTag: 42,
                    sentimentData: {
                      magnitude: 42,
                      score: 42,
                    },
                  },
                ],
                silence: {
                  silenceDuration: 'Test string',
                  silencePercentage: 42,
                },
              },
              endTime: 'Test string',
            },
            annotatorSelector: {
              issueModels: ['Test string'],
              phraseMatchers: ['Test string'],
              runEntityAnnotator: true,
              runIntentAnnotator: true,
              runInterruptionAnnotator: true,
              runIssueModelAnnotator: true,
              runPhraseMatcherAnnotator: true,
              runSentimentAnnotator: true,
              runSilenceAnnotator: true,
              runSummarizationAnnotator: true,
              summarizationConfig: {
                conversationProfile: 'Test string',
                summarizationModel: 'Test string',
              },
            },
            createTime: 'Test string',
            name: 'Test string',
            requestTime: 'Test string',
          },
          latestSummary: {
            answerRecord: 'Test string',
            confidence: 42,
            conversationModel: 'Test string',
            metadata: {
              A: 'Test string',
            },
            text: 'Test string',
            textSections: {
              A: 'Test string',
            },
          },
          medium: 'Test string',
          name: 'Test string',
          obfuscatedUserId: 'Test string',
          qualityMetadata: {
            agentInfo: [
              {
                agentId: 'Test string',
                displayName: 'Test string',
                dispositionCode: 'Test string',
                team: 'Test string',
              },
            ],
            customerSatisfactionRating: 42,
            menuPath: 'Test string',
            waitDuration: 'Test string',
          },
          runtimeAnnotations: [
            {
              annotationId: 'Test string',
              answerFeedback: {
                clicked: true,
                correctnessLevel: 'Test string',
                displayed: true,
              },
              articleSuggestion: {
                confidenceScore: 42,
                metadata: {
                  A: 'Test string',
                },
                queryRecord: 'Test string',
                source: 'Test string',
                title: 'Test string',
                uri: 'Test string',
              },
              conversationSummarizationSuggestion: {
                answerRecord: 'Test string',
                confidence: 42,
                conversationModel: 'Test string',
                metadata: {
                  A: 'Test string',
                },
                text: 'Test string',
                textSections: {
                  A: 'Test string',
                },
              },
              createTime: 'Test string',
              dialogflowInteraction: {
                confidence: 42,
                dialogflowIntentId: 'Test string',
              },
              endBoundary: {
                transcriptIndex: 42,
                wordIndex: 42,
              },
              faqAnswer: {
                answer: 'Test string',
                confidenceScore: 42,
                metadata: {
                  A: 'Test string',
                },
                queryRecord: 'Test string',
                question: 'Test string',
                source: 'Test string',
              },
              smartComposeSuggestion: {
                confidenceScore: 42,
                metadata: {
                  A: 'Test string',
                },
                queryRecord: 'Test string',
                suggestion: 'Test string',
              },
              smartReply: {
                confidenceScore: 42,
                metadata: {
                  A: 'Test string',
                },
                queryRecord: 'Test string',
                reply: 'Test string',
              },
              startBoundary: {
                transcriptIndex: 42,
                wordIndex: 42,
              },
              userInput: {
                generatorName: 'Test string',
                query: 'Test string',
              },
            },
          ],
          startTime: 'Test string',
          transcript: {
            transcriptSegments: [
              {
                channelTag: 42,
                confidence: 42,
                dialogflowSegmentMetadata: {
                  smartReplyAllowlistCovered: true,
                },
                languageCode: 'Test string',
                messageTime: 'Test string',
                segmentParticipant: {
                  dialogflowParticipant: 'Test string',
                  dialogflowParticipantName: 'Test string',
                  obfuscatedExternalUserId: 'Test string',
                  role: 'Test string',
                  userId: 'Test string',
                },
                sentiment: {
                  magnitude: 42,
                  score: 42,
                },
                text: 'Test string',
                words: [
                  {
                    confidence: 42,
                    endOffset: 'Test string',
                    startOffset: 'Test string',
                    word: 'Test string',
                  },
                ],
              },
            ],
          },
          ttl: 'Test string',
          turnCount: 42,
          updateTime: 'Test string',
        },
        conversationId: 'Test string',
        parent: 'Test string',
        redactionConfig: {
          deidentifyTemplate: 'Test string',
          inspectTemplate: 'Test string',
        },
        speechConfig: {
          speechRecognizer: 'Test string',
        },
      }
    );
    /** Creates an analysis. The long running operation is done when the analysis has completed. */
    await gapi.client.contactcenterinsights.projects.locations.conversations.analyses.create(
      {
        parent: 'Test string',
      },
      {
        analysisResult: {
          callAnalysisMetadata: {
            annotations: [
              {
                annotationEndBoundary: {
                  transcriptIndex: 42,
                  wordIndex: 42,
                },
                annotationStartBoundary: {
                  transcriptIndex: 42,
                  wordIndex: 42,
                },
                channelTag: 42,
                entityMentionData: {
                  entityUniqueId: 'Test string',
                  sentiment: {
                    magnitude: 42,
                    score: 42,
                  },
                  type: 'Test string',
                },
                holdData: {},
                intentMatchData: {
                  intentUniqueId: 'Test string',
                },
                interruptionData: {},
                issueMatchData: {
                  issueAssignment: {
                    displayName: 'Test string',
                    issue: 'Test string',
                    score: 42,
                  },
                },
                phraseMatchData: {
                  displayName: 'Test string',
                  phraseMatcher: 'Test string',
                },
                sentimentData: {
                  magnitude: 42,
                  score: 42,
                },
                silenceData: {},
              },
            ],
            entities: {
              A: {
                displayName: 'Test string',
                metadata: {
                  A: 'Test string',
                },
                salience: 42,
                sentiment: {
                  magnitude: 42,
                  score: 42,
                },
                type: 'Test string',
              },
            },
            intents: {
              A: {
                displayName: 'Test string',
                id: 'Test string',
              },
            },
            issueModelResult: {
              issueModel: 'Test string',
              issues: [
                {
                  displayName: 'Test string',
                  issue: 'Test string',
                  score: 42,
                },
              ],
            },
            phraseMatchers: {
              A: {
                displayName: 'Test string',
                phraseMatcher: 'Test string',
              },
            },
            sentiments: [
              {
                channelTag: 42,
                sentimentData: {
                  magnitude: 42,
                  score: 42,
                },
              },
            ],
            silence: {
              silenceDuration: 'Test string',
              silencePercentage: 42,
            },
          },
          endTime: 'Test string',
        },
        annotatorSelector: {
          issueModels: ['Test string'],
          phraseMatchers: ['Test string'],
          runEntityAnnotator: true,
          runIntentAnnotator: true,
          runInterruptionAnnotator: true,
          runIssueModelAnnotator: true,
          runPhraseMatcherAnnotator: true,
          runSentimentAnnotator: true,
          runSilenceAnnotator: true,
          runSummarizationAnnotator: true,
          summarizationConfig: {
            conversationProfile: 'Test string',
            summarizationModel: 'Test string',
          },
        },
        createTime: 'Test string',
        name: 'Test string',
        requestTime: 'Test string',
      }
    );
    /** Deletes an analysis. */
    await gapi.client.contactcenterinsights.projects.locations.conversations.analyses.delete(
      {
        name: 'Test string',
      }
    );
    /** Gets an analysis. */
    await gapi.client.contactcenterinsights.projects.locations.conversations.analyses.get(
      {
        name: 'Test string',
      }
    );
    /** Lists analyses. */
    await gapi.client.contactcenterinsights.projects.locations.conversations.analyses.list(
      {
        filter: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Export insights data to a destination defined in the request body. */
    await gapi.client.contactcenterinsights.projects.locations.insightsdata.export(
      {
        parent: 'Test string',
      },
      {
        bigQueryDestination: {
          dataset: 'Test string',
          projectId: 'Test string',
          table: 'Test string',
        },
        filter: 'Test string',
        kmsKey: 'Test string',
        parent: 'Test string',
        writeDisposition: 'Test string',
      }
    );
    /** Gets an issue model's statistics. */
    await gapi.client.contactcenterinsights.projects.locations.issueModels.calculateIssueModelStats(
      {
        issueModel: 'Test string',
      }
    );
    /** Creates an issue model. */
    await gapi.client.contactcenterinsights.projects.locations.issueModels.create(
      {
        parent: 'Test string',
      },
      {
        createTime: 'Test string',
        displayName: 'Test string',
        inputDataConfig: {
          filter: 'Test string',
          medium: 'Test string',
          trainingConversationsCount: 'Test string',
        },
        issueCount: 'Test string',
        languageCode: 'Test string',
        modelType: 'Test string',
        name: 'Test string',
        state: 'Test string',
        trainingStats: {
          analyzedConversationsCount: 'Test string',
          issueStats: {
            A: {
              displayName: 'Test string',
              issue: 'Test string',
              labeledConversationsCount: 'Test string',
            },
          },
          unclassifiedConversationsCount: 'Test string',
        },
        updateTime: 'Test string',
      }
    );
    /** Deletes an issue model. */
    await gapi.client.contactcenterinsights.projects.locations.issueModels.delete(
      {
        name: 'Test string',
      }
    );
    /** Deploys an issue model. Returns an error if a model is already deployed. An issue model can only be used in analysis after it has been deployed. */
    await gapi.client.contactcenterinsights.projects.locations.issueModels.deploy(
      {
        name: 'Test string',
      },
      {
        name: 'Test string',
      }
    );
    /** Exports an issue model to the provided destination. */
    await gapi.client.contactcenterinsights.projects.locations.issueModels.export(
      {
        name: 'Test string',
      },
      {
        gcsDestination: {
          objectUri: 'Test string',
        },
        name: 'Test string',
      }
    );
    /** Gets an issue model. */
    await gapi.client.contactcenterinsights.projects.locations.issueModels.get({
      name: 'Test string',
    });
    /** Imports an issue model from a Cloud Storage bucket. */
    await gapi.client.contactcenterinsights.projects.locations.issueModels.import(
      {
        parent: 'Test string',
      },
      {
        createNewModel: true,
        gcsSource: {
          objectUri: 'Test string',
        },
        parent: 'Test string',
      }
    );
    /** Lists issue models. */
    await gapi.client.contactcenterinsights.projects.locations.issueModels.list(
      {
        parent: 'Test string',
      }
    );
    /** Updates an issue model. */
    await gapi.client.contactcenterinsights.projects.locations.issueModels.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        createTime: 'Test string',
        displayName: 'Test string',
        inputDataConfig: {
          filter: 'Test string',
          medium: 'Test string',
          trainingConversationsCount: 'Test string',
        },
        issueCount: 'Test string',
        languageCode: 'Test string',
        modelType: 'Test string',
        name: 'Test string',
        state: 'Test string',
        trainingStats: {
          analyzedConversationsCount: 'Test string',
          issueStats: {
            A: {
              displayName: 'Test string',
              issue: 'Test string',
              labeledConversationsCount: 'Test string',
            },
          },
          unclassifiedConversationsCount: 'Test string',
        },
        updateTime: 'Test string',
      }
    );
    /** Undeploys an issue model. An issue model can not be used in analysis after it has been undeployed. */
    await gapi.client.contactcenterinsights.projects.locations.issueModels.undeploy(
      {
        name: 'Test string',
      },
      {
        name: 'Test string',
      }
    );
    /** Deletes an issue. */
    await gapi.client.contactcenterinsights.projects.locations.issueModels.issues.delete(
      {
        name: 'Test string',
      }
    );
    /** Gets an issue. */
    await gapi.client.contactcenterinsights.projects.locations.issueModels.issues.get(
      {
        name: 'Test string',
      }
    );
    /** Lists issues. */
    await gapi.client.contactcenterinsights.projects.locations.issueModels.issues.list(
      {
        parent: 'Test string',
      }
    );
    /** Updates an issue. */
    await gapi.client.contactcenterinsights.projects.locations.issueModels.issues.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        createTime: 'Test string',
        displayName: 'Test string',
        name: 'Test string',
        sampleUtterances: ['Test string'],
        updateTime: 'Test string',
      }
    );
    /** Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`. */
    await gapi.client.contactcenterinsights.projects.locations.operations.cancel(
      {
        name: 'Test string',
      }
    );
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.contactcenterinsights.projects.locations.operations.get({
      name: 'Test string',
    });
    /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
    await gapi.client.contactcenterinsights.projects.locations.operations.list({
      filter: 'Test string',
      name: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Creates a phrase matcher. */
    await gapi.client.contactcenterinsights.projects.locations.phraseMatchers.create(
      {
        parent: 'Test string',
      },
      {
        activationUpdateTime: 'Test string',
        active: true,
        displayName: 'Test string',
        name: 'Test string',
        phraseMatchRuleGroups: [
          {
            phraseMatchRules: [
              {
                config: {
                  exactMatchConfig: {
                    caseSensitive: true,
                  },
                },
                negated: true,
                query: 'Test string',
              },
            ],
            type: 'Test string',
          },
        ],
        revisionCreateTime: 'Test string',
        revisionId: 'Test string',
        roleMatch: 'Test string',
        type: 'Test string',
        updateTime: 'Test string',
        versionTag: 'Test string',
      }
    );
    /** Deletes a phrase matcher. */
    await gapi.client.contactcenterinsights.projects.locations.phraseMatchers.delete(
      {
        name: 'Test string',
      }
    );
    /** Gets a phrase matcher. */
    await gapi.client.contactcenterinsights.projects.locations.phraseMatchers.get(
      {
        name: 'Test string',
      }
    );
    /** Lists phrase matchers. */
    await gapi.client.contactcenterinsights.projects.locations.phraseMatchers.list(
      {
        filter: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Updates a phrase matcher. */
    await gapi.client.contactcenterinsights.projects.locations.phraseMatchers.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        activationUpdateTime: 'Test string',
        active: true,
        displayName: 'Test string',
        name: 'Test string',
        phraseMatchRuleGroups: [
          {
            phraseMatchRules: [
              {
                config: {
                  exactMatchConfig: {
                    caseSensitive: true,
                  },
                },
                negated: true,
                query: 'Test string',
              },
            ],
            type: 'Test string',
          },
        ],
        revisionCreateTime: 'Test string',
        revisionId: 'Test string',
        roleMatch: 'Test string',
        type: 'Test string',
        updateTime: 'Test string',
        versionTag: 'Test string',
      }
    );
    /** Creates a view. */
    await gapi.client.contactcenterinsights.projects.locations.views.create(
      {
        parent: 'Test string',
      },
      {
        createTime: 'Test string',
        displayName: 'Test string',
        name: 'Test string',
        updateTime: 'Test string',
        value: 'Test string',
      }
    );
    /** Deletes a view. */
    await gapi.client.contactcenterinsights.projects.locations.views.delete({
      name: 'Test string',
    });
    /** Gets a view. */
    await gapi.client.contactcenterinsights.projects.locations.views.get({
      name: 'Test string',
    });
    /** Lists views. */
    await gapi.client.contactcenterinsights.projects.locations.views.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates a view. */
    await gapi.client.contactcenterinsights.projects.locations.views.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        createTime: 'Test string',
        displayName: 'Test string',
        name: 'Test string',
        updateTime: 'Test string',
        value: 'Test string',
      }
    );
  }
});
