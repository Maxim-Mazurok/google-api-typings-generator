/* Type definitions for non-npm package My Business Verifications API v1 0.0 */
// Project: https://developers.google.com/my-business/
// Definitions by: Maxim Mazurok <https://github.com/Maxim-Mazurok>
//                 Nick Amoscato <https://github.com/namoscato>
//                 Declan Vong <https://github.com/declanvong>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped

// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
// Generated from: https://mybusinessverifications.googleapis.com/$discovery/rest?version=v1
// Revision: 20241209

/// <reference types="gapi.client" />

declare namespace gapi.client {
  /** Load My Business Verifications API v1 */
  function load(
    urlOrObject: 'https://mybusinessverifications.googleapis.com/$discovery/rest?version=v1'
  ): Promise<void>;
  /** @deprecated Please load APIs with discovery documents. */
  function load(name: 'mybusinessverifications', version: 'v1'): Promise<void>;
  /** @deprecated Please load APIs with discovery documents. */
  function load(
    name: 'mybusinessverifications',
    version: 'v1',
    callback: () => any
  ): void;

  namespace mybusinessverifications {
    interface AddressVerificationData {
      /** Address that a postcard can be sent to. */
      address?: PostalAddress;
      /** Merchant's business name. */
      business?: string;
      /** Expected number of days it takes to deliver a postcard to the address's region. */
      expectedDeliveryDaysRegion?: number;
    }
    interface CompleteVerificationRequest {
      /** Required. PIN code received by the merchant to complete the verification. */
      pin?: string;
    }
    interface CompleteVerificationResponse {
      /** The completed verification. */
      verification?: Verification;
    }
    interface ComplyWithGuidelines {
      /** The reason why the location is being recommended to comply with guidelines. */
      recommendationReason?: string;
    }
    interface EmailVerificationData {
      /** Domain name in the email address. e.g. "gmail.com" in foo@gmail.com */
      domain?: string;
      /** Whether client is allowed to provide a different user name. */
      isUserNameEditable?: boolean;
      /** User name in the email address. e.g. "foo" in foo@gmail.com */
      user?: string;
    }
    interface FetchVerificationOptionsRequest {
      /** Optional. Extra context information for the verification of service businesses. Can only be applied to the locations whose business type is CUSTOMER_LOCATION_ONLY. Specifying an accurate address could enable more options. INVALID_ARGUMENT will be thrown if it is set for other business types of locations. */
      context?: ServiceBusinessContext;
      /** Required. The BCP 47 language code representing the language that is to be used for the verification process. Available options vary by language. */
      languageCode?: string;
    }
    interface FetchVerificationOptionsResponse {
      /** The available verification options. */
      options?: VerificationOption[];
    }
    interface ListVerificationsResponse {
      /** If the number of verifications exceeded the requested page size, this field will be populated with a token to fetch the next page of verification on a subsequent call. If there are no more attributes, this field will not be present in the response. */
      nextPageToken?: string;
      /** List of the verifications. */
      verifications?: Verification[];
    }
    interface PostalAddress {
      /** Unstructured address lines describing the lower levels of an address. Because values in address_lines do not have type information and may sometimes contain multiple values in a single field (For example "Austin, TX"), it is important that the line order is clear. The order of address lines should be "envelope order" for the country/region of the address. In places where this can vary (For example Japan), address_language is used to make it explicit (For example "ja" for large-to-small ordering and "ja-Latn" or "en" for small-to-large). This way, the most specific line of an address can be selected based on the language. The minimum permitted structural representation of an address consists of a region_code with all remaining information placed in the address_lines. It would be possible to format such an address very approximately without geocoding, but no semantic reasoning could be made about any of the address components until it was at least partially resolved. Creating an address only containing a region_code and address_lines, and then geocoding is the recommended way to handle completely unstructured addresses (as opposed to guessing which parts of the address should be localities or administrative areas). */
      addressLines?: string[];
      /** Optional. Highest administrative subdivision which is used for postal addresses of a country or region. For example, this can be a state, a province, an oblast, or a prefecture. Specifically, for Spain this is the province and not the autonomous community (For example "Barcelona" and not "Catalonia"). Many countries don't use an administrative area in postal addresses. For example in Switzerland this should be left unpopulated. */
      administrativeArea?: string;
      /** Optional. BCP-47 language code of the contents of this address (if known). This is often the UI language of the input form or is expected to match one of the languages used in the address' country/region, or their transliterated equivalents. This can affect formatting in certain countries, but is not critical to the correctness of the data and will never affect any validation or other non-formatting related operations. If this value is not known, it should be omitted (rather than specifying a possibly incorrect default). Examples: "zh-Hant", "ja", "ja-Latn", "en". */
      languageCode?: string;
      /** Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do not fit into this structure well, leave locality empty and use address_lines. */
      locality?: string;
      /** Optional. The name of the organization at the address. */
      organization?: string;
      /** Optional. Postal code of the address. Not all countries use or require postal codes to be present, but where they are used, they may trigger additional validation with other parts of the address (For example state/zip validation in the U.S.A.). */
      postalCode?: string;
      /** Optional. The recipient at the address. This field may, under certain circumstances, contain multiline information. For example, it might contain "care of" information. */
      recipients?: string[];
      /** Required. CLDR region code of the country/region of the address. This is never inferred and it is up to the user to ensure the value is correct. See https://cldr.unicode.org/ and https://www.unicode.org/cldr/charts/30/supplemental/territory_information.html for details. Example: "CH" for Switzerland. */
      regionCode?: string;
      /** The schema revision of the `PostalAddress`. This must be set to 0, which is the latest revision. All new revisions **must** be backward compatible with old revisions. */
      revision?: number;
      /** Optional. Additional, country-specific, sorting code. This is not used in most regions. Where it is used, the value is either a string like "CEDEX", optionally followed by a number (For example "CEDEX 7"), or just a number alone, representing the "sector code" (Jamaica), "delivery area indicator" (Malawi) or "post office indicator" (For example CÃ´te d'Ivoire). */
      sortingCode?: string;
      /** Optional. Sublocality of the address. For example, this can be neighborhoods, boroughs, districts. */
      sublocality?: string;
    }
    interface ResolveOwnershipConflict {}
    interface ServiceBusinessContext {
      /** The verification address of the location. It is used to either enable more verification options or send a postcard. */
      address?: PostalAddress;
    }
    interface Verification {
      /** Optional. Response announcement set only if the method is VETTED_PARTNER. */
      announcement?: string;
      /** The timestamp when the verification is requested. */
      createTime?: string;
      /** The method of the verification. */
      method?: string;
      /** Resource name of the verification. */
      name?: string;
      /** The state of the verification. */
      state?: string;
    }
    interface VerificationOption {
      /** Set only if the method is MAIL. */
      addressData?: AddressVerificationData;
      /** Set only if the method is VETTED_PARTNER. */
      announcement?: string;
      /** Set only if the method is EMAIL. */
      emailData?: EmailVerificationData;
      /** Set only if the method is PHONE_CALL or SMS. Phone number that the PIN will be sent to. */
      phoneNumber?: string;
      /** Method to verify the location. */
      verificationMethod?: string;
    }
    interface VerificationToken {
      /** The token string. */
      tokenString?: string;
    }
    interface Verify {
      /** Indicates whether a verification process has already started, and can be completed by the location. */
      hasPendingVerification?: boolean;
    }
    interface VerifyLocationRequest {
      /** Optional. Extra context information for the verification of service businesses. It is only required for the locations whose business type is CUSTOMER_LOCATION_ONLY. For ADDRESS verification, the address will be used to send out postcard. For other methods, it should be the same as the one that is passed to GetVerificationOptions. INVALID_ARGUMENT will be thrown if it is set for other types of business locations. */
      context?: ServiceBusinessContext;
      /** Optional. The input for EMAIL method. Email address where the PIN should be sent to. An email address is accepted only if it is one of the addresses provided by FetchVerificationOptions. If the EmailVerificationData has is_user_name_editable set to true, the client may specify a different user name (local-part) but must match the domain name. */
      emailAddress?: string;
      /** Optional. The BCP 47 language code representing the language that is to be used for the verification process. */
      languageCode?: string;
      /** Optional. The input for ADDRESS method. Contact name the mail should be sent to. */
      mailerContact?: string;
      /** Required. Verification method. */
      method?: string;
      /** Optional. The input for PHONE_CALL/SMS method The phone number that should be called or be sent SMS to. It must be one of the phone numbers in the eligible options. */
      phoneNumber?: string;
      /** Optional. The input for VETTED_PARTNER method available to select [partners.](https://support.google.com/business/answer/7674102) The input is not needed for a vetted account. Token that is associated to the location. Token that is associated to the location. */
      token?: VerificationToken;
    }
    interface VerifyLocationResponse {
      /** The created verification request. */
      verification?: Verification;
    }
    interface VoiceOfMerchantState {
      /** The location fails to comply with our [guidelines](https://support.google.com/business/answer/3038177) and requires additional steps for reinstatement. To fix this issue, consult the [Help Center Article](https://support.google.com/business/answer/4569145). */
      complyWithGuidelines?: ComplyWithGuidelines;
      /** Indicates whether the location has the authority (ownership) over the business on Google. If true, another location cannot take over and become the dominant listing on Maps. However, edits will not become live unless Voice of Merchant is gained (i.e. has_voice_of_merchant is true). */
      hasBusinessAuthority?: boolean;
      /** Indicates whether the location is in good standing and has control over the business on Google. Any edits made to the location will propagate to Maps after passing the review phase. */
      hasVoiceOfMerchant?: boolean;
      /** This location duplicates another location that is in good standing. If you have access to the location in good standing, use that location's id to perform operations. Otherwise, request access from the current owner. */
      resolveOwnershipConflict?: any;
      /** Start or continue the verification process. */
      verify?: Verify;
      /** Wait to gain Voice of Merchant. The location is under review for quality purposes. */
      waitForVoiceOfMerchant?: any;
    }
    interface WaitForVoiceOfMerchant {}
    interface VerificationsResource {
      /** Completes a `PENDING` verification. It is only necessary for non `AUTO` verification methods. `AUTO` verification request is instantly `VERIFIED` upon creation. */
      complete(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. Resource name of the verification to complete. */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: CompleteVerificationRequest;
      }): Request<CompleteVerificationResponse>;
      complete(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** Required. Resource name of the verification to complete. */
          name: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: CompleteVerificationRequest
      ): Request<CompleteVerificationResponse>;
      /** List verifications of a location, ordered by create time. */
      list(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** How many verification to include per page. Minimum is 1, and the default and maximum page size is 100. */
        pageSize?: number;
        /** If specified, returns the next page of verifications. */
        pageToken?: string;
        /** Required. Resource name of the location that verification requests belong to. */
        parent: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<ListVerificationsResponse>;
    }
    interface LocationsResource {
      /** Reports all eligible verification options for a location in a specific language. */
      fetchVerificationOptions(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. The location to verify. */
        location: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: FetchVerificationOptionsRequest;
      }): Request<FetchVerificationOptionsResponse>;
      fetchVerificationOptions(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** Required. The location to verify. */
          location: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: FetchVerificationOptionsRequest
      ): Request<FetchVerificationOptionsResponse>;
      /** Gets the VoiceOfMerchant state. */
      getVoiceOfMerchantState(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. Resource name of the location. */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<VoiceOfMerchantState>;
      /** Starts the verification process for a location. */
      verify(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. Resource name of the location to verify. */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: VerifyLocationRequest;
      }): Request<VerifyLocationResponse>;
      verify(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** Required. Resource name of the location to verify. */
          name: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: VerifyLocationRequest
      ): Request<VerifyLocationResponse>;
      verifications: VerificationsResource;
    }

    const locations: LocationsResource;
  }
}
