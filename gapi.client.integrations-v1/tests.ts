/* This is stub file for gapi.client.integrations-v1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20250711

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://integrations.googleapis.com/$discovery/rest?version=v1',
  );
  /** now we can use gapi.client.integrations */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
    'https://www.googleapis.com/auth/cloud-platform',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Receives the auth code and auth config id to combine that with the client id and secret to retrieve access tokens from the token endpoint. Returns either a success or error message when it's done. */
    await gapi.client.integrations.callback.generateToken({
      code: 'Test string',
      gcpProjectId: 'Test string',
      product: 'Test string',
      redirectUri: 'Test string',
      state: 'Test string',
    });
    /** Enumerates the regions for which Connector Platform is provisioned. */
    await gapi.client.integrations.connectorPlatformRegions.enumerate({});
    /** Gets the metadata info for the requested client */
    await gapi.client.integrations.projects.getClientmetadata({
      parent: 'Test string',
    });
    /** Generate OpenAPI spec for the requested integrations and api triggers */
    await gapi.client.integrations.projects.locations.generateOpenApiSpec(
      {
        name: 'Test string',
      },
      {
        apiTriggerResources: [
          {
            integrationResource: 'Test string',
            triggerId: ['Test string'],
          },
        ],
        fileFormat: 'Test string',
      },
    );
    /** Gets the client configuration for the given project and location resource name */
    await gapi.client.integrations.projects.locations.getClients({
      parent: 'Test string',
    });
    /** Creates an Apps Script project. */
    await gapi.client.integrations.projects.locations.appsScriptProjects.create(
      {
        parent: 'Test string',
      },
      {
        appsScriptProject: 'Test string',
        authConfigId: 'Test string',
      },
    );
    /** Links a existing Apps Script project. */
    await gapi.client.integrations.projects.locations.appsScriptProjects.link(
      {
        parent: 'Test string',
      },
      {
        scriptId: 'Test string',
      },
    );
    /** Creates an auth config record. Fetch corresponding credentials for specific auth types, e.g. access token for OAuth 2.0, JWT token for JWT. Encrypt the auth config with Cloud KMS and store the encrypted credentials in Spanner. Returns the encrypted auth config. */
    await gapi.client.integrations.projects.locations.authConfigs.create(
      {
        'clientCertificate.encryptedPrivateKey': 'Test string',
        'clientCertificate.passphrase': 'Test string',
        'clientCertificate.sslCertificate': 'Test string',
        parent: 'Test string',
      },
      {
        certificateId: 'Test string',
        createTime: 'Test string',
        creatorEmail: 'Test string',
        credentialType: 'Test string',
        decryptedCredential: {
          authToken: {
            token: 'Test string',
            type: 'Test string',
          },
          credentialType: 'Test string',
          jwt: {
            jwt: 'Test string',
            jwtHeader: 'Test string',
            jwtPayload: 'Test string',
            secret: 'Test string',
          },
          oauth2AuthorizationCode: {
            accessToken: {
              accessToken: 'Test string',
              accessTokenExpireTime: 'Test string',
              refreshToken: 'Test string',
              refreshTokenExpireTime: 'Test string',
              tokenType: 'Test string',
            },
            applyReauthPolicy: true,
            authCode: 'Test string',
            authEndpoint: 'Test string',
            authParams: {
              entries: [
                {
                  key: {
                    literalValue: {
                      booleanArray: {
                        booleanValues: [true],
                      },
                      booleanValue: true,
                      doubleArray: {
                        doubleValues: [42],
                      },
                      doubleValue: 42,
                      intArray: {
                        intValues: ['Test string'],
                      },
                      intValue: 'Test string',
                      jsonValue: 'Test string',
                      stringArray: {
                        stringValues: ['Test string'],
                      },
                      stringValue: 'Test string',
                    },
                    referenceKey: 'Test string',
                  },
                  value: {
                    literalValue: {
                      booleanArray: {
                        booleanValues: [true],
                      },
                      booleanValue: true,
                      doubleArray: {
                        doubleValues: [42],
                      },
                      doubleValue: 42,
                      intArray: {
                        intValues: ['Test string'],
                      },
                      intValue: 'Test string',
                      jsonValue: 'Test string',
                      stringArray: {
                        stringValues: ['Test string'],
                      },
                      stringValue: 'Test string',
                    },
                    referenceKey: 'Test string',
                  },
                },
              ],
              keyType: 'Test string',
              valueType: 'Test string',
            },
            clientId: 'Test string',
            clientSecret: 'Test string',
            requestType: 'Test string',
            scope: 'Test string',
            tokenEndpoint: 'Test string',
            tokenParams: {
              entries: [
                {
                  key: {
                    literalValue: {
                      booleanArray: {
                        booleanValues: [true],
                      },
                      booleanValue: true,
                      doubleArray: {
                        doubleValues: [42],
                      },
                      doubleValue: 42,
                      intArray: {
                        intValues: ['Test string'],
                      },
                      intValue: 'Test string',
                      jsonValue: 'Test string',
                      stringArray: {
                        stringValues: ['Test string'],
                      },
                      stringValue: 'Test string',
                    },
                    referenceKey: 'Test string',
                  },
                  value: {
                    literalValue: {
                      booleanArray: {
                        booleanValues: [true],
                      },
                      booleanValue: true,
                      doubleArray: {
                        doubleValues: [42],
                      },
                      doubleValue: 42,
                      intArray: {
                        intValues: ['Test string'],
                      },
                      intValue: 'Test string',
                      jsonValue: 'Test string',
                      stringArray: {
                        stringValues: ['Test string'],
                      },
                      stringValue: 'Test string',
                    },
                    referenceKey: 'Test string',
                  },
                },
              ],
              keyType: 'Test string',
              valueType: 'Test string',
            },
          },
          oauth2ClientCredentials: {
            accessToken: {
              accessToken: 'Test string',
              accessTokenExpireTime: 'Test string',
              refreshToken: 'Test string',
              refreshTokenExpireTime: 'Test string',
              tokenType: 'Test string',
            },
            clientId: 'Test string',
            clientSecret: 'Test string',
            requestType: 'Test string',
            scope: 'Test string',
            tokenEndpoint: 'Test string',
            tokenParams: {
              entries: [
                {
                  key: {
                    literalValue: {
                      booleanArray: {
                        booleanValues: [true],
                      },
                      booleanValue: true,
                      doubleArray: {
                        doubleValues: [42],
                      },
                      doubleValue: 42,
                      intArray: {
                        intValues: ['Test string'],
                      },
                      intValue: 'Test string',
                      jsonValue: 'Test string',
                      stringArray: {
                        stringValues: ['Test string'],
                      },
                      stringValue: 'Test string',
                    },
                    referenceKey: 'Test string',
                  },
                  value: {
                    literalValue: {
                      booleanArray: {
                        booleanValues: [true],
                      },
                      booleanValue: true,
                      doubleArray: {
                        doubleValues: [42],
                      },
                      doubleValue: 42,
                      intArray: {
                        intValues: ['Test string'],
                      },
                      intValue: 'Test string',
                      jsonValue: 'Test string',
                      stringArray: {
                        stringValues: ['Test string'],
                      },
                      stringValue: 'Test string',
                    },
                    referenceKey: 'Test string',
                  },
                },
              ],
              keyType: 'Test string',
              valueType: 'Test string',
            },
          },
          oauth2ResourceOwnerCredentials: {
            accessToken: {
              accessToken: 'Test string',
              accessTokenExpireTime: 'Test string',
              refreshToken: 'Test string',
              refreshTokenExpireTime: 'Test string',
              tokenType: 'Test string',
            },
            clientId: 'Test string',
            clientSecret: 'Test string',
            password: 'Test string',
            requestType: 'Test string',
            scope: 'Test string',
            tokenEndpoint: 'Test string',
            tokenParams: {
              entries: [
                {
                  key: {
                    literalValue: {
                      booleanArray: {
                        booleanValues: [true],
                      },
                      booleanValue: true,
                      doubleArray: {
                        doubleValues: [42],
                      },
                      doubleValue: 42,
                      intArray: {
                        intValues: ['Test string'],
                      },
                      intValue: 'Test string',
                      jsonValue: 'Test string',
                      stringArray: {
                        stringValues: ['Test string'],
                      },
                      stringValue: 'Test string',
                    },
                    referenceKey: 'Test string',
                  },
                  value: {
                    literalValue: {
                      booleanArray: {
                        booleanValues: [true],
                      },
                      booleanValue: true,
                      doubleArray: {
                        doubleValues: [42],
                      },
                      doubleValue: 42,
                      intArray: {
                        intValues: ['Test string'],
                      },
                      intValue: 'Test string',
                      jsonValue: 'Test string',
                      stringArray: {
                        stringValues: ['Test string'],
                      },
                      stringValue: 'Test string',
                    },
                    referenceKey: 'Test string',
                  },
                },
              ],
              keyType: 'Test string',
              valueType: 'Test string',
            },
            username: 'Test string',
          },
          oidcToken: {
            audience: 'Test string',
            serviceAccountEmail: 'Test string',
            token: 'Test string',
            tokenExpireTime: 'Test string',
          },
          serviceAccountCredentials: {
            scope: 'Test string',
            serviceAccount: 'Test string',
          },
          usernameAndPassword: {
            password: 'Test string',
            username: 'Test string',
          },
        },
        description: 'Test string',
        displayName: 'Test string',
        encryptedCredential: 'Test string',
        expiryNotificationDuration: ['Test string'],
        lastModifierEmail: 'Test string',
        name: 'Test string',
        overrideValidTime: 'Test string',
        reason: 'Test string',
        state: 'Test string',
        updateTime: 'Test string',
        validTime: 'Test string',
        visibility: 'Test string',
      },
    );
    /** Deletes an auth config. */
    await gapi.client.integrations.projects.locations.authConfigs.delete({
      name: 'Test string',
    });
    /** Gets a complete auth config. If the auth config doesn't exist, Code.NOT_FOUND exception will be thrown. Returns the decrypted auth config. */
    await gapi.client.integrations.projects.locations.authConfigs.get({
      name: 'Test string',
    });
    /** Lists all auth configs that match the filter. Restrict to auth configs belong to the current client only. */
    await gapi.client.integrations.projects.locations.authConfigs.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
      readMask: 'Test string',
    });
    /** Updates an auth config. If credential is updated, fetch the encrypted auth config from Spanner, decrypt with Cloud KMS key, update the credential fields, re-encrypt with Cloud KMS key and update the Spanner record. For other fields, directly update the Spanner record. Returns the encrypted auth config. */
    await gapi.client.integrations.projects.locations.authConfigs.patch(
      {
        'clientCertificate.encryptedPrivateKey': 'Test string',
        'clientCertificate.passphrase': 'Test string',
        'clientCertificate.sslCertificate': 'Test string',
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        certificateId: 'Test string',
        createTime: 'Test string',
        creatorEmail: 'Test string',
        credentialType: 'Test string',
        decryptedCredential: {
          authToken: {
            token: 'Test string',
            type: 'Test string',
          },
          credentialType: 'Test string',
          jwt: {
            jwt: 'Test string',
            jwtHeader: 'Test string',
            jwtPayload: 'Test string',
            secret: 'Test string',
          },
          oauth2AuthorizationCode: {
            accessToken: {
              accessToken: 'Test string',
              accessTokenExpireTime: 'Test string',
              refreshToken: 'Test string',
              refreshTokenExpireTime: 'Test string',
              tokenType: 'Test string',
            },
            applyReauthPolicy: true,
            authCode: 'Test string',
            authEndpoint: 'Test string',
            authParams: {
              entries: [
                {
                  key: {
                    literalValue: {
                      booleanArray: {
                        booleanValues: [true],
                      },
                      booleanValue: true,
                      doubleArray: {
                        doubleValues: [42],
                      },
                      doubleValue: 42,
                      intArray: {
                        intValues: ['Test string'],
                      },
                      intValue: 'Test string',
                      jsonValue: 'Test string',
                      stringArray: {
                        stringValues: ['Test string'],
                      },
                      stringValue: 'Test string',
                    },
                    referenceKey: 'Test string',
                  },
                  value: {
                    literalValue: {
                      booleanArray: {
                        booleanValues: [true],
                      },
                      booleanValue: true,
                      doubleArray: {
                        doubleValues: [42],
                      },
                      doubleValue: 42,
                      intArray: {
                        intValues: ['Test string'],
                      },
                      intValue: 'Test string',
                      jsonValue: 'Test string',
                      stringArray: {
                        stringValues: ['Test string'],
                      },
                      stringValue: 'Test string',
                    },
                    referenceKey: 'Test string',
                  },
                },
              ],
              keyType: 'Test string',
              valueType: 'Test string',
            },
            clientId: 'Test string',
            clientSecret: 'Test string',
            requestType: 'Test string',
            scope: 'Test string',
            tokenEndpoint: 'Test string',
            tokenParams: {
              entries: [
                {
                  key: {
                    literalValue: {
                      booleanArray: {
                        booleanValues: [true],
                      },
                      booleanValue: true,
                      doubleArray: {
                        doubleValues: [42],
                      },
                      doubleValue: 42,
                      intArray: {
                        intValues: ['Test string'],
                      },
                      intValue: 'Test string',
                      jsonValue: 'Test string',
                      stringArray: {
                        stringValues: ['Test string'],
                      },
                      stringValue: 'Test string',
                    },
                    referenceKey: 'Test string',
                  },
                  value: {
                    literalValue: {
                      booleanArray: {
                        booleanValues: [true],
                      },
                      booleanValue: true,
                      doubleArray: {
                        doubleValues: [42],
                      },
                      doubleValue: 42,
                      intArray: {
                        intValues: ['Test string'],
                      },
                      intValue: 'Test string',
                      jsonValue: 'Test string',
                      stringArray: {
                        stringValues: ['Test string'],
                      },
                      stringValue: 'Test string',
                    },
                    referenceKey: 'Test string',
                  },
                },
              ],
              keyType: 'Test string',
              valueType: 'Test string',
            },
          },
          oauth2ClientCredentials: {
            accessToken: {
              accessToken: 'Test string',
              accessTokenExpireTime: 'Test string',
              refreshToken: 'Test string',
              refreshTokenExpireTime: 'Test string',
              tokenType: 'Test string',
            },
            clientId: 'Test string',
            clientSecret: 'Test string',
            requestType: 'Test string',
            scope: 'Test string',
            tokenEndpoint: 'Test string',
            tokenParams: {
              entries: [
                {
                  key: {
                    literalValue: {
                      booleanArray: {
                        booleanValues: [true],
                      },
                      booleanValue: true,
                      doubleArray: {
                        doubleValues: [42],
                      },
                      doubleValue: 42,
                      intArray: {
                        intValues: ['Test string'],
                      },
                      intValue: 'Test string',
                      jsonValue: 'Test string',
                      stringArray: {
                        stringValues: ['Test string'],
                      },
                      stringValue: 'Test string',
                    },
                    referenceKey: 'Test string',
                  },
                  value: {
                    literalValue: {
                      booleanArray: {
                        booleanValues: [true],
                      },
                      booleanValue: true,
                      doubleArray: {
                        doubleValues: [42],
                      },
                      doubleValue: 42,
                      intArray: {
                        intValues: ['Test string'],
                      },
                      intValue: 'Test string',
                      jsonValue: 'Test string',
                      stringArray: {
                        stringValues: ['Test string'],
                      },
                      stringValue: 'Test string',
                    },
                    referenceKey: 'Test string',
                  },
                },
              ],
              keyType: 'Test string',
              valueType: 'Test string',
            },
          },
          oauth2ResourceOwnerCredentials: {
            accessToken: {
              accessToken: 'Test string',
              accessTokenExpireTime: 'Test string',
              refreshToken: 'Test string',
              refreshTokenExpireTime: 'Test string',
              tokenType: 'Test string',
            },
            clientId: 'Test string',
            clientSecret: 'Test string',
            password: 'Test string',
            requestType: 'Test string',
            scope: 'Test string',
            tokenEndpoint: 'Test string',
            tokenParams: {
              entries: [
                {
                  key: {
                    literalValue: {
                      booleanArray: {
                        booleanValues: [true],
                      },
                      booleanValue: true,
                      doubleArray: {
                        doubleValues: [42],
                      },
                      doubleValue: 42,
                      intArray: {
                        intValues: ['Test string'],
                      },
                      intValue: 'Test string',
                      jsonValue: 'Test string',
                      stringArray: {
                        stringValues: ['Test string'],
                      },
                      stringValue: 'Test string',
                    },
                    referenceKey: 'Test string',
                  },
                  value: {
                    literalValue: {
                      booleanArray: {
                        booleanValues: [true],
                      },
                      booleanValue: true,
                      doubleArray: {
                        doubleValues: [42],
                      },
                      doubleValue: 42,
                      intArray: {
                        intValues: ['Test string'],
                      },
                      intValue: 'Test string',
                      jsonValue: 'Test string',
                      stringArray: {
                        stringValues: ['Test string'],
                      },
                      stringValue: 'Test string',
                    },
                    referenceKey: 'Test string',
                  },
                },
              ],
              keyType: 'Test string',
              valueType: 'Test string',
            },
            username: 'Test string',
          },
          oidcToken: {
            audience: 'Test string',
            serviceAccountEmail: 'Test string',
            token: 'Test string',
            tokenExpireTime: 'Test string',
          },
          serviceAccountCredentials: {
            scope: 'Test string',
            serviceAccount: 'Test string',
          },
          usernameAndPassword: {
            password: 'Test string',
            username: 'Test string',
          },
        },
        description: 'Test string',
        displayName: 'Test string',
        encryptedCredential: 'Test string',
        expiryNotificationDuration: ['Test string'],
        lastModifierEmail: 'Test string',
        name: 'Test string',
        overrideValidTime: 'Test string',
        reason: 'Test string',
        state: 'Test string',
        updateTime: 'Test string',
        validTime: 'Test string',
        visibility: 'Test string',
      },
    );
    /** Creates a new certificate. The certificate will be registered to the trawler service and will be encrypted using cloud KMS and stored in Spanner Returns the certificate. */
    await gapi.client.integrations.projects.locations.certificates.create(
      {
        parent: 'Test string',
      },
      {
        certificateStatus: 'Test string',
        credentialId: 'Test string',
        description: 'Test string',
        displayName: 'Test string',
        name: 'Test string',
        rawCertificate: {
          encryptedPrivateKey: 'Test string',
          passphrase: 'Test string',
          sslCertificate: 'Test string',
        },
        requestorId: 'Test string',
        validEndTime: 'Test string',
        validStartTime: 'Test string',
      },
    );
    /** Delete a certificate */
    await gapi.client.integrations.projects.locations.certificates.delete({
      name: 'Test string',
    });
    /** Get a certificates in the specified project. */
    await gapi.client.integrations.projects.locations.certificates.get({
      name: 'Test string',
    });
    /** List all the certificates that match the filter. Restrict to certificate of current client only. */
    await gapi.client.integrations.projects.locations.certificates.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
      readMask: 'Test string',
    });
    /** Updates the certificate by id. If new certificate file is updated, it will register with the trawler service, re-encrypt with cloud KMS and update the Spanner record. Other fields will directly update the Spanner record. Returns the Certificate. */
    await gapi.client.integrations.projects.locations.certificates.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        certificateStatus: 'Test string',
        credentialId: 'Test string',
        description: 'Test string',
        displayName: 'Test string',
        name: 'Test string',
        rawCertificate: {
          encryptedPrivateKey: 'Test string',
          passphrase: 'Test string',
          sslCertificate: 'Test string',
        },
        requestorId: 'Test string',
        validEndTime: 'Test string',
        validStartTime: 'Test string',
      },
    );
    /** Updates the client customer configuration for the given project and location resource name */
    await gapi.client.integrations.projects.locations.clients.changeConfig(
      {
        parent: 'Test string',
      },
      {
        customerConfig: {
          cloudKmsConfig: {
            key: 'Test string',
            keyVersion: 'Test string',
            kmsLocation: 'Test string',
            kmsProjectId: 'Test string',
            kmsRing: 'Test string',
          },
          enableHttpCall: true,
          enableManagedAiFeatures: true,
          enableVariableMasking: true,
          runAsServiceAccount: 'Test string',
        },
        updateMask: 'Test string',
      },
    );
    /** Perform the deprovisioning steps to disable a user GCP project to use IP and purge all related data in a wipeout-compliant way. */
    await gapi.client.integrations.projects.locations.clients.deprovision(
      {
        parent: 'Test string',
      },
      {},
    );
    /** Perform the provisioning steps to enable a user GCP project to use IP. If GCP project already registered on IP end via Apigee Integration, provisioning will fail. */
    await gapi.client.integrations.projects.locations.clients.provision(
      {
        parent: 'Test string',
      },
      {
        cloudKmsConfig: {
          key: 'Test string',
          keyVersion: 'Test string',
          kmsLocation: 'Test string',
          kmsProjectId: 'Test string',
          kmsRing: 'Test string',
        },
        createSampleWorkflows: true,
        enableHttpCall: true,
        enableManagedAiFeatures: true,
        provisionGmek: true,
        runAsServiceAccount: 'Test string',
        skipCpProvision: true,
      },
    );
    /** Perform post provisioning steps after client is provisioned. */
    await gapi.client.integrations.projects.locations.clients.provisionClientPostProcessor(
      {
        parent: 'Test string',
      },
      {
        workflows: ['Test string'],
      },
    );
    /** Update run-as service account for provisioned client */
    await gapi.client.integrations.projects.locations.clients.replace(
      {
        parent: 'Test string',
      },
      {
        runAsServiceAccount: 'Test string',
      },
    );
    /** Update client from GMEK to CMEK */
    await gapi.client.integrations.projects.locations.clients.switch(
      {
        parent: 'Test string',
      },
      {
        cloudKmsConfig: {
          key: 'Test string',
          keyVersion: 'Test string',
          kmsLocation: 'Test string',
          kmsProjectId: 'Test string',
          kmsRing: 'Test string',
        },
      },
    );
    /** Update variable masking for provisioned client */
    await gapi.client.integrations.projects.locations.clients.switchVariableMasking(
      {
        parent: 'Test string',
      },
      {
        enableVariableMasking: true,
      },
    );
    /** Enable/Disable http call for provisioned client */
    await gapi.client.integrations.projects.locations.clients.toggleHttp(
      {
        parent: 'Test string',
      },
      {
        enableHttpCall: true,
      },
    );
    /** Creates a cloud function project. */
    await gapi.client.integrations.projects.locations.cloudFunctions.create(
      {
        parent: 'Test string',
      },
      {
        functionName: 'Test string',
        functionRegion: 'Test string',
        gcfApiVersion: 'Test string',
        projectId: 'Test string',
      },
    );
    /** Request to create a new AgentFlow with user-provided flow configuration. */
    await gapi.client.integrations.projects.locations.collections.engines.assistants.agentFlows.create(
      {
        parent: 'Test string',
      },
      {
        createTime: 'Test string',
        creator: 'Test string',
        description: 'Test string',
        displayName: 'Test string',
        flowConfig: 'Test string',
        name: 'Test string',
        noCodeAgent: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Deletes an existing AgentFlow. */
    await gapi.client.integrations.projects.locations.collections.engines.assistants.agentFlows.delete(
      {
        name: 'Test string',
      },
    );
    /** Uses Natural Language (NL) to generate an AgentFlow configuration and create a new AgentFlow. */
    await gapi.client.integrations.projects.locations.collections.engines.assistants.agentFlows.generate(
      {
        parent: 'Test string',
      },
      {
        creator: 'Test string',
        description: 'Test string',
        displayName: 'Test string',
        intent: 'Test string',
      },
    );
    /** Uses Natural Language (NL) to generate an AgentFlow configuration and update an existing AgentFlow. */
    await gapi.client.integrations.projects.locations.collections.engines.assistants.agentFlows.generateAndUpdate(
      {
        name: 'Test string',
      },
      {
        intent: 'Test string',
        updater: 'Test string',
      },
    );
    /** Gets an existing AgentFlow. */
    await gapi.client.integrations.projects.locations.collections.engines.assistants.agentFlows.get(
      {
        name: 'Test string',
      },
    );
    /** Lists all AgentFlows. */
    await gapi.client.integrations.projects.locations.collections.engines.assistants.agentFlows.list(
      {
        filter: 'Test string',
        orderBy: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
        readMask: 'Test string',
      },
    );
    /** Updates an existing AgentFlow. */
    await gapi.client.integrations.projects.locations.collections.engines.assistants.agentFlows.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        createTime: 'Test string',
        creator: 'Test string',
        description: 'Test string',
        displayName: 'Test string',
        flowConfig: 'Test string',
        name: 'Test string',
        noCodeAgent: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Lists the available entities and actions associated with a Connection. */
    await gapi.client.integrations.projects.locations.connections.getConnectionSchemaMetadata(
      {
        name: 'Test string',
      },
    );
    /** Lists Connections in a given project and location. */
    await gapi.client.integrations.projects.locations.connections.list({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Lists the JSON schemas for the inputs and outputs of actions, filtered by action name. */
    await gapi.client.integrations.projects.locations.connections.runtimeActionSchemas.list(
      {
        filter: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
    /** Lists the JSON schemas for the properties of runtime entities, filtered by entity name. */
    await gapi.client.integrations.projects.locations.connections.runtimeEntitySchemas.list(
      {
        filter: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
    /** Delete the selected integration and all versions inside */
    await gapi.client.integrations.projects.locations.integrations.delete({
      name: 'Test string',
    });
    /** Executes integrations synchronously by passing the trigger id in the request body. The request is not returned until the requested executions are either fulfilled or experienced an error. If the integration name is not specified (passing `-`), all of the associated integration under the given trigger_id will be executed. Otherwise only the specified integration for the given `trigger_id` is executed. This is helpful for execution the integration from UI. */
    await gapi.client.integrations.projects.locations.integrations.execute(
      {
        name: 'Test string',
      },
      {
        doNotPropagateError: true,
        executionId: 'Test string',
        inputParameters: {
          A: {
            booleanArray: {
              booleanValues: [true],
            },
            booleanValue: true,
            doubleArray: {
              doubleValues: [42],
            },
            doubleValue: 42,
            intArray: {
              intValues: ['Test string'],
            },
            intValue: 'Test string',
            jsonValue: 'Test string',
            stringArray: {
              stringValues: ['Test string'],
            },
            stringValue: 'Test string',
          },
        },
        parameterEntries: [
          {
            dataType: 'Test string',
            key: 'Test string',
            masked: true,
            value: {
              booleanArray: {
                booleanValues: [true],
              },
              booleanValue: true,
              doubleArray: {
                doubleValues: [42],
              },
              doubleValue: 42,
              intArray: {
                intValues: ['Test string'],
              },
              intValue: 'Test string',
              jsonValue: 'Test string',
              protoArray: {
                protoValues: [
                  {
                    A: 42,
                  },
                ],
              },
              protoValue: {
                A: 42,
              },
              serializedObjectValue: {
                objectValue: 'Test string',
              },
              stringArray: {
                stringValues: ['Test string'],
              },
              stringValue: 'Test string',
            },
          },
        ],
        parameters: {
          parameters: [
            {
              dataType: 'Test string',
              key: 'Test string',
              masked: true,
              value: {
                booleanArray: {
                  booleanValues: [true],
                },
                booleanValue: true,
                doubleArray: {
                  doubleValues: [42],
                },
                doubleValue: 42,
                intArray: {
                  intValues: ['Test string'],
                },
                intValue: 'Test string',
                jsonValue: 'Test string',
                protoArray: {
                  protoValues: [
                    {
                      A: 42,
                    },
                  ],
                },
                protoValue: {
                  A: 42,
                },
                serializedObjectValue: {
                  objectValue: 'Test string',
                },
                stringArray: {
                  stringValues: ['Test string'],
                },
                stringValue: 'Test string',
              },
            },
          ],
        },
        requestId: 'Test string',
        triggerId: 'Test string',
      },
    );
    /** Executes an integration on receiving events from Integration Connector triggers, Eventarc or CPS Trigger. Input data to integration is received in body in json format */
    await gapi.client.integrations.projects.locations.integrations.executeEvent(
      {
        name: 'Test string',
        triggerId: 'Test string',
      },
    );
    /** Returns the list of all integrations in the specified project. */
    await gapi.client.integrations.projects.locations.integrations.list({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Schedules an integration for execution by passing the trigger id and the scheduled time in the request body. */
    await gapi.client.integrations.projects.locations.integrations.schedule(
      {
        name: 'Test string',
      },
      {
        inputParameters: {
          A: {
            booleanArray: {
              booleanValues: [true],
            },
            booleanValue: true,
            doubleArray: {
              doubleValues: [42],
            },
            doubleValue: 42,
            intArray: {
              intValues: ['Test string'],
            },
            intValue: 'Test string',
            jsonValue: 'Test string',
            stringArray: {
              stringValues: ['Test string'],
            },
            stringValue: 'Test string',
          },
        },
        parameterEntries: [
          {
            dataType: 'Test string',
            key: 'Test string',
            masked: true,
            value: {
              booleanArray: {
                booleanValues: [true],
              },
              booleanValue: true,
              doubleArray: {
                doubleValues: [42],
              },
              doubleValue: 42,
              intArray: {
                intValues: ['Test string'],
              },
              intValue: 'Test string',
              jsonValue: 'Test string',
              protoArray: {
                protoValues: [
                  {
                    A: 42,
                  },
                ],
              },
              protoValue: {
                A: 42,
              },
              serializedObjectValue: {
                objectValue: 'Test string',
              },
              stringArray: {
                stringValues: ['Test string'],
              },
              stringValue: 'Test string',
            },
          },
        ],
        parameters: {
          parameters: [
            {
              key: 'Test string',
              masked: true,
              value: {
                booleanArray: {
                  booleanValues: [true],
                },
                booleanValue: true,
                doubleArray: {
                  doubleValues: [42],
                },
                doubleValue: 42,
                intArray: {
                  intValues: ['Test string'],
                },
                intValue: 'Test string',
                protoArray: {
                  protoValues: [
                    {
                      A: 42,
                    },
                  ],
                },
                protoValue: {
                  A: 42,
                },
                serializedObjectValue: {
                  objectValue: 'Test string',
                },
                stringArray: {
                  stringValues: ['Test string'],
                },
                stringValue: 'Test string',
              },
            },
          ],
        },
        requestId: 'Test string',
        scheduleTime: 'Test string',
        triggerId: 'Test string',
        userGeneratedExecutionId: 'Test string',
      },
    );
    /** Searches and returns the list of integrations in the specified project. */
    await gapi.client.integrations.projects.locations.integrations.search({
      enableNaturalLanguageQueryUnderstanding: true,
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
      query: 'Test string',
    });
    /** Execute the integration in draft state */
    await gapi.client.integrations.projects.locations.integrations.test(
      {
        name: 'Test string',
      },
      {
        clientId: 'Test string',
        configParameters: {
          A: 42,
        },
        deadlineSecondsTime: 'Test string',
        inputParameters: {
          A: {
            booleanArray: {
              booleanValues: [true],
            },
            booleanValue: true,
            doubleArray: {
              doubleValues: [42],
            },
            doubleValue: 42,
            intArray: {
              intValues: ['Test string'],
            },
            intValue: 'Test string',
            jsonValue: 'Test string',
            stringArray: {
              stringValues: ['Test string'],
            },
            stringValue: 'Test string',
          },
        },
        integrationVersion: {
          cloudKmsKey: 'Test string',
          cloudLoggingDetails: {
            cloudLoggingSeverity: 'Test string',
            enableCloudLogging: true,
          },
          createdFromTemplate: 'Test string',
          createTime: 'Test string',
          databasePersistencePolicy: 'Test string',
          description: 'Test string',
          enableVariableMasking: true,
          errorCatcherConfigs: [
            {
              description: 'Test string',
              errorCatcherId: 'Test string',
              errorCatcherNumber: 'Test string',
              label: 'Test string',
              position: {
                x: 42,
                y: 42,
              },
              startErrorTasks: [
                {
                  condition: 'Test string',
                  description: 'Test string',
                  displayName: 'Test string',
                  taskConfigId: 'Test string',
                  taskId: 'Test string',
                },
              ],
            },
          ],
          integrationConfigParameters: [
            {
              parameter: {
                containsLargeData: true,
                dataType: 'Test string',
                defaultValue: {
                  booleanArray: {
                    booleanValues: [true],
                  },
                  booleanValue: true,
                  doubleArray: {
                    doubleValues: [42],
                  },
                  doubleValue: 42,
                  intArray: {
                    intValues: ['Test string'],
                  },
                  intValue: 'Test string',
                  jsonValue: 'Test string',
                  stringArray: {
                    stringValues: ['Test string'],
                  },
                  stringValue: 'Test string',
                },
                description: 'Test string',
                displayName: 'Test string',
                inputOutputType: 'Test string',
                isTransient: true,
                jsonSchema: 'Test string',
                key: 'Test string',
                masked: true,
                producer: 'Test string',
                searchable: true,
              },
              value: {
                booleanArray: {
                  booleanValues: [true],
                },
                booleanValue: true,
                doubleArray: {
                  doubleValues: [42],
                },
                doubleValue: 42,
                intArray: {
                  intValues: ['Test string'],
                },
                intValue: 'Test string',
                jsonValue: 'Test string',
                stringArray: {
                  stringValues: ['Test string'],
                },
                stringValue: 'Test string',
              },
            },
          ],
          integrationParameters: [
            {
              containsLargeData: true,
              dataType: 'Test string',
              defaultValue: {
                booleanArray: {
                  booleanValues: [true],
                },
                booleanValue: true,
                doubleArray: {
                  doubleValues: [42],
                },
                doubleValue: 42,
                intArray: {
                  intValues: ['Test string'],
                },
                intValue: 'Test string',
                jsonValue: 'Test string',
                stringArray: {
                  stringValues: ['Test string'],
                },
                stringValue: 'Test string',
              },
              description: 'Test string',
              displayName: 'Test string',
              inputOutputType: 'Test string',
              isTransient: true,
              jsonSchema: 'Test string',
              key: 'Test string',
              masked: true,
              producer: 'Test string',
              searchable: true,
            },
          ],
          integrationParametersInternal: {
            parameters: [
              {
                attributes: {
                  dataType: 'Test string',
                  defaultValue: {
                    booleanValue: true,
                    doubleArray: {
                      values: [42],
                    },
                    doubleValue: 42,
                    intArray: {
                      values: ['Test string'],
                    },
                    intValue: 'Test string',
                    protoValue: {
                      A: 42,
                    },
                    stringArray: {
                      values: ['Test string'],
                    },
                    stringValue: 'Test string',
                  },
                  isRequired: true,
                  isSearchable: true,
                  logSettings: {
                    logFieldName: 'Test string',
                    seedPeriod: 'Test string',
                    seedScope: 'Test string',
                  },
                  masked: true,
                  readOnly: true,
                  searchable: 'Test string',
                  taskVisibility: ['Test string'],
                },
                children: undefined,
                containsLargeData: true,
                dataType: 'Test string',
                defaultValue: {
                  booleanArray: {
                    booleanValues: [true],
                  },
                  booleanValue: true,
                  doubleArray: {
                    doubleValues: [42],
                  },
                  doubleValue: 42,
                  intArray: {
                    intValues: ['Test string'],
                  },
                  intValue: 'Test string',
                  jsonValue: 'Test string',
                  protoArray: {
                    protoValues: [
                      {
                        A: 42,
                      },
                    ],
                  },
                  protoValue: {
                    A: 42,
                  },
                  serializedObjectValue: {
                    objectValue: 'Test string',
                  },
                  stringArray: {
                    stringValues: ['Test string'],
                  },
                  stringValue: 'Test string',
                },
                description: 'Test string',
                inOutType: 'Test string',
                isTransient: true,
                jsonSchema: 'Test string',
                key: 'Test string',
                name: 'Test string',
                producedBy: {
                  elementIdentifier: 'Test string',
                  elementType: 'Test string',
                },
                producer: 'Test string',
                protoDefName: 'Test string',
                protoDefPath: 'Test string',
                required: true,
              },
            ],
          },
          lastModifierEmail: 'Test string',
          lockHolder: 'Test string',
          name: 'Test string',
          origin: 'Test string',
          parentTemplateId: 'Test string',
          runAsServiceAccount: 'Test string',
          snapshotNumber: 'Test string',
          state: 'Test string',
          status: 'Test string',
          taskConfigs: [
            {
              conditionalFailurePolicies: {
                defaultFailurePolicy: {
                  condition: 'Test string',
                  intervalTime: 'Test string',
                  maxRetries: 42,
                  retryStrategy: 'Test string',
                },
                failurePolicies: [
                  {
                    condition: 'Test string',
                    intervalTime: 'Test string',
                    maxRetries: 42,
                    retryStrategy: 'Test string',
                  },
                ],
              },
              description: 'Test string',
              displayName: 'Test string',
              errorCatcherId: 'Test string',
              externalTaskType: 'Test string',
              failurePolicy: {
                condition: 'Test string',
                intervalTime: 'Test string',
                maxRetries: 42,
                retryStrategy: 'Test string',
              },
              jsonValidationOption: 'Test string',
              nextTasks: [
                {
                  condition: 'Test string',
                  description: 'Test string',
                  displayName: 'Test string',
                  taskConfigId: 'Test string',
                  taskId: 'Test string',
                },
              ],
              nextTasksExecutionPolicy: 'Test string',
              parameters: {
                A: {
                  key: 'Test string',
                  masked: true,
                  value: {
                    booleanArray: {
                      booleanValues: [true],
                    },
                    booleanValue: true,
                    doubleArray: {
                      doubleValues: [42],
                    },
                    doubleValue: 42,
                    intArray: {
                      intValues: ['Test string'],
                    },
                    intValue: 'Test string',
                    jsonValue: 'Test string',
                    stringArray: {
                      stringValues: ['Test string'],
                    },
                    stringValue: 'Test string',
                  },
                },
              },
              position: {
                x: 42,
                y: 42,
              },
              successPolicy: {
                finalState: 'Test string',
              },
              synchronousCallFailurePolicy: {
                condition: 'Test string',
                intervalTime: 'Test string',
                maxRetries: 42,
                retryStrategy: 'Test string',
              },
              task: 'Test string',
              taskExecutionStrategy: 'Test string',
              taskId: 'Test string',
              taskTemplate: 'Test string',
            },
          ],
          taskConfigsInternal: [
            {
              alertConfigs: [
                {
                  aggregationPeriod: 'Test string',
                  alertDisabled: true,
                  alertName: 'Test string',
                  clientId: 'Test string',
                  durationThresholdMs: 'Test string',
                  errorEnumList: {
                    enumStrings: ['Test string'],
                    filterType: 'Test string',
                  },
                  metricType: 'Test string',
                  numAggregationPeriods: 42,
                  onlyFinalAttempt: true,
                  playbookUrl: 'Test string',
                  thresholdType: 'Test string',
                  thresholdValue: {
                    absolute: 'Test string',
                    percentage: 42,
                  },
                  warningEnumList: {
                    enumStrings: ['Test string'],
                    filterType: 'Test string',
                  },
                },
              ],
              conditionalFailurePolicies: {
                defaultFailurePolicy: {
                  intervalInSeconds: 'Test string',
                  maxNumRetries: 42,
                  retryCondition: 'Test string',
                  retryStrategy: 'Test string',
                },
                failurePolicies: [
                  {
                    intervalInSeconds: 'Test string',
                    maxNumRetries: 42,
                    retryCondition: 'Test string',
                    retryStrategy: 'Test string',
                  },
                ],
              },
              createTime: 'Test string',
              creatorEmail: 'Test string',
              description: 'Test string',
              disableStrictTypeValidation: true,
              errorCatcherId: 'Test string',
              externalTaskType: 'Test string',
              failurePolicy: {
                intervalInSeconds: 'Test string',
                maxNumRetries: 42,
                retryCondition: 'Test string',
                retryStrategy: 'Test string',
              },
              incomingEdgeCount: 42,
              jsonValidationOption: 'Test string',
              label: 'Test string',
              lastModifiedTime: 'Test string',
              nextTasks: [
                {
                  combinedConditions: [
                    {
                      conditions: [
                        {
                          eventPropertyKey: 'Test string',
                          operator: 'Test string',
                          value: {
                            booleanValue: true,
                            doubleArray: {
                              values: [42],
                            },
                            doubleValue: 42,
                            intArray: {
                              values: ['Test string'],
                            },
                            intValue: 'Test string',
                            protoValue: {
                              A: 42,
                            },
                            stringArray: {
                              values: ['Test string'],
                            },
                            stringValue: 'Test string',
                          },
                        },
                      ],
                    },
                  ],
                  condition: 'Test string',
                  description: 'Test string',
                  label: 'Test string',
                  taskConfigId: 'Test string',
                  taskNumber: 'Test string',
                },
              ],
              nextTasksExecutionPolicy: 'Test string',
              parameters: {
                A: {
                  dataType: 'Test string',
                  key: 'Test string',
                  masked: true,
                  value: {
                    booleanArray: {
                      booleanValues: [true],
                    },
                    booleanValue: true,
                    doubleArray: {
                      doubleValues: [42],
                    },
                    doubleValue: 42,
                    intArray: {
                      intValues: ['Test string'],
                    },
                    intValue: 'Test string',
                    jsonValue: 'Test string',
                    protoArray: {
                      protoValues: [
                        {
                          A: 42,
                        },
                      ],
                    },
                    protoValue: {
                      A: 42,
                    },
                    serializedObjectValue: {
                      objectValue: 'Test string',
                    },
                    stringArray: {
                      stringValues: ['Test string'],
                    },
                    stringValue: 'Test string',
                  },
                },
              },
              position: {
                x: 42,
                y: 42,
              },
              precondition: 'Test string',
              preconditionLabel: 'Test string',
              rollbackStrategy: {
                parameters: {
                  parameters: [
                    {
                      dataType: 'Test string',
                      key: 'Test string',
                      masked: true,
                      value: {
                        booleanArray: {
                          booleanValues: [true],
                        },
                        booleanValue: true,
                        doubleArray: {
                          doubleValues: [42],
                        },
                        doubleValue: 42,
                        intArray: {
                          intValues: ['Test string'],
                        },
                        intValue: 'Test string',
                        jsonValue: 'Test string',
                        protoArray: {
                          protoValues: [
                            {
                              A: 42,
                            },
                          ],
                        },
                        protoValue: {
                          A: 42,
                        },
                        serializedObjectValue: {
                          objectValue: 'Test string',
                        },
                        stringArray: {
                          stringValues: ['Test string'],
                        },
                        stringValue: 'Test string',
                      },
                    },
                  ],
                },
                rollbackTaskImplementationClassName: 'Test string',
                taskNumbersToRollback: ['Test string'],
              },
              successPolicy: {
                finalState: 'Test string',
              },
              synchronousCallFailurePolicy: {
                intervalInSeconds: 'Test string',
                maxNumRetries: 42,
                retryCondition: 'Test string',
                retryStrategy: 'Test string',
              },
              taskEntity: {
                disabledForVpcSc: true,
                metadata: {
                  activeTaskName: 'Test string',
                  admins: [
                    {
                      googleGroupEmail: 'Test string',
                      userEmail: 'Test string',
                    },
                  ],
                  category: 'Test string',
                  codeSearchLink: 'Test string',
                  defaultJsonValidationOption: 'Test string',
                  defaultSpec: 'Test string',
                  description: 'Test string',
                  descriptiveName: 'Test string',
                  docMarkdown: 'Test string',
                  externalCategory: 'Test string',
                  externalCategorySequence: 42,
                  externalDocHtml: 'Test string',
                  externalDocLink: 'Test string',
                  externalDocMarkdown: 'Test string',
                  g3DocLink: 'Test string',
                  iconLink: 'Test string',
                  isDeprecated: true,
                  name: 'Test string',
                  standaloneExternalDocHtml: 'Test string',
                  status: 'Test string',
                  system: 'Test string',
                  tags: ['Test string'],
                },
                paramSpecs: {
                  parameters: [
                    {
                      className: 'Test string',
                      collectionElementClassName: 'Test string',
                      config: {
                        descriptivePhrase: 'Test string',
                        helpText: 'Test string',
                        hideDefaultValue: true,
                        inputDisplayOption: 'Test string',
                        isHidden: true,
                        label: 'Test string',
                        parameterNameOption: 'Test string',
                        subSectionLabel: 'Test string',
                        uiPlaceholderText: 'Test string',
                      },
                      dataType: 'Test string',
                      defaultValue: {
                        booleanArray: {
                          booleanValues: [true],
                        },
                        booleanValue: true,
                        doubleArray: {
                          doubleValues: [42],
                        },
                        doubleValue: 42,
                        intArray: {
                          intValues: ['Test string'],
                        },
                        intValue: 'Test string',
                        jsonValue: 'Test string',
                        protoArray: {
                          protoValues: [
                            {
                              A: 42,
                            },
                          ],
                        },
                        protoValue: {
                          A: 42,
                        },
                        serializedObjectValue: {
                          objectValue: 'Test string',
                        },
                        stringArray: {
                          stringValues: ['Test string'],
                        },
                        stringValue: 'Test string',
                      },
                      isDeprecated: true,
                      isOutput: true,
                      jsonSchema: 'Test string',
                      key: 'Test string',
                      protoDef: {
                        fullName: 'Test string',
                        path: 'Test string',
                      },
                      required: true,
                      validationRule: {
                        doubleRange: {
                          max: 42,
                          min: 42,
                        },
                        intRange: {
                          max: 'Test string',
                          min: 'Test string',
                        },
                        stringRegex: {
                          exclusive: true,
                          regex: 'Test string',
                        },
                      },
                    },
                  ],
                },
                stats: {
                  dimensions: {
                    clientId: 'Test string',
                    enumFilterType: 'Test string',
                    errorEnumString: 'Test string',
                    retryAttempt: 'Test string',
                    taskName: 'Test string',
                    taskNumber: 'Test string',
                    triggerId: 'Test string',
                    warningEnumString: 'Test string',
                    workflowId: 'Test string',
                    workflowName: 'Test string',
                  },
                  durationInSeconds: 42,
                  errorRate: 42,
                  qps: 42,
                  warningRate: 42,
                },
                taskType: 'Test string',
                uiConfig: {
                  taskUiModuleConfigs: [
                    {
                      moduleId: 'Test string',
                    },
                  ],
                },
              },
              taskExecutionStrategy: 'Test string',
              taskName: 'Test string',
              taskNumber: 'Test string',
              taskSpec: 'Test string',
              taskTemplateName: 'Test string',
              taskType: 'Test string',
            },
          ],
          teardown: {
            teardownTaskConfigs: [
              {
                creatorEmail: 'Test string',
                name: 'Test string',
                nextTeardownTask: {
                  name: 'Test string',
                },
                parameters: {
                  parameters: [
                    {
                      key: 'Test string',
                      masked: true,
                      value: {
                        booleanArray: {
                          booleanValues: [true],
                        },
                        booleanValue: true,
                        doubleArray: {
                          doubleValues: [42],
                        },
                        doubleValue: 42,
                        intArray: {
                          intValues: ['Test string'],
                        },
                        intValue: 'Test string',
                        protoArray: {
                          protoValues: [
                            {
                              A: 42,
                            },
                          ],
                        },
                        protoValue: {
                          A: 42,
                        },
                        serializedObjectValue: {
                          objectValue: 'Test string',
                        },
                        stringArray: {
                          stringValues: ['Test string'],
                        },
                        stringValue: 'Test string',
                      },
                    },
                  ],
                },
                properties: {
                  properties: [
                    {
                      key: 'Test string',
                      value: {
                        booleanValue: true,
                        doubleArray: {
                          values: [42],
                        },
                        doubleValue: 42,
                        intArray: {
                          values: ['Test string'],
                        },
                        intValue: 'Test string',
                        protoValue: {
                          A: 42,
                        },
                        stringArray: {
                          values: ['Test string'],
                        },
                        stringValue: 'Test string',
                      },
                    },
                  ],
                },
                teardownTaskImplementationClassName: 'Test string',
              },
            ],
          },
          triggerConfigs: [
            {
              alertConfig: [
                {
                  aggregationPeriod: 'Test string',
                  alertThreshold: 42,
                  disableAlert: true,
                  displayName: 'Test string',
                  durationThreshold: 'Test string',
                  metricType: 'Test string',
                  onlyFinalAttempt: true,
                  thresholdType: 'Test string',
                  thresholdValue: {
                    absolute: 'Test string',
                    percentage: 42,
                  },
                },
              ],
              cloudSchedulerConfig: {
                cronTab: 'Test string',
                errorMessage: 'Test string',
                location: 'Test string',
                serviceAccountEmail: 'Test string',
              },
              description: 'Test string',
              errorCatcherId: 'Test string',
              inputVariables: {
                names: ['Test string'],
              },
              label: 'Test string',
              nextTasksExecutionPolicy: 'Test string',
              outputVariables: {
                names: ['Test string'],
              },
              position: {
                x: 42,
                y: 42,
              },
              properties: {
                A: 'Test string',
              },
              startTasks: [
                {
                  condition: 'Test string',
                  description: 'Test string',
                  displayName: 'Test string',
                  taskConfigId: 'Test string',
                  taskId: 'Test string',
                },
              ],
              trigger: 'Test string',
              triggerId: 'Test string',
              triggerNumber: 'Test string',
              triggerType: 'Test string',
            },
          ],
          triggerConfigsInternal: [
            {
              alertConfig: [
                {
                  aggregationPeriod: 'Test string',
                  alertDisabled: true,
                  alertName: 'Test string',
                  clientId: 'Test string',
                  durationThresholdMs: 'Test string',
                  errorEnumList: {
                    enumStrings: ['Test string'],
                    filterType: 'Test string',
                  },
                  metricType: 'Test string',
                  numAggregationPeriods: 42,
                  onlyFinalAttempt: true,
                  playbookUrl: 'Test string',
                  thresholdType: 'Test string',
                  thresholdValue: {
                    absolute: 'Test string',
                    percentage: 42,
                  },
                  warningEnumList: {
                    enumStrings: ['Test string'],
                    filterType: 'Test string',
                  },
                },
              ],
              cloudSchedulerConfig: {
                cronTab: 'Test string',
                errorMessage: 'Test string',
                location: 'Test string',
                serviceAccountEmail: 'Test string',
              },
              description: 'Test string',
              enabledClients: ['Test string'],
              errorCatcherId: 'Test string',
              inputVariables: {
                names: ['Test string'],
              },
              label: 'Test string',
              nextTasksExecutionPolicy: 'Test string',
              outputVariables: {
                names: ['Test string'],
              },
              pauseWorkflowExecutions: true,
              position: {
                x: 42,
                y: 42,
              },
              properties: {
                A: 'Test string',
              },
              startTasks: [
                {
                  combinedConditions: [
                    {
                      conditions: [
                        {
                          eventPropertyKey: 'Test string',
                          operator: 'Test string',
                          value: {
                            booleanValue: true,
                            doubleArray: {
                              values: [42],
                            },
                            doubleValue: 42,
                            intArray: {
                              values: ['Test string'],
                            },
                            intValue: 'Test string',
                            protoValue: {
                              A: 42,
                            },
                            stringArray: {
                              values: ['Test string'],
                            },
                            stringValue: 'Test string',
                          },
                        },
                      ],
                    },
                  ],
                  condition: 'Test string',
                  description: 'Test string',
                  label: 'Test string',
                  taskConfigId: 'Test string',
                  taskNumber: 'Test string',
                },
              ],
              triggerCriteria: {
                condition: 'Test string',
                parameters: {
                  parameters: [
                    {
                      key: 'Test string',
                      masked: true,
                      value: {
                        booleanArray: {
                          booleanValues: [true],
                        },
                        booleanValue: true,
                        doubleArray: {
                          doubleValues: [42],
                        },
                        doubleValue: 42,
                        intArray: {
                          intValues: ['Test string'],
                        },
                        intValue: 'Test string',
                        protoArray: {
                          protoValues: [
                            {
                              A: 42,
                            },
                          ],
                        },
                        protoValue: {
                          A: 42,
                        },
                        serializedObjectValue: {
                          objectValue: 'Test string',
                        },
                        stringArray: {
                          stringValues: ['Test string'],
                        },
                        stringValue: 'Test string',
                      },
                    },
                  ],
                },
                triggerCriteriaTaskImplementationClassName: 'Test string',
              },
              triggerId: 'Test string',
              triggerName: 'Test string',
              triggerNumber: 'Test string',
              triggerType: 'Test string',
            },
          ],
          updateTime: 'Test string',
          userLabel: 'Test string',
        },
        parameters: {
          parameters: [
            {
              dataType: 'Test string',
              key: 'Test string',
              masked: true,
              value: {
                booleanArray: {
                  booleanValues: [true],
                },
                booleanValue: true,
                doubleArray: {
                  doubleValues: [42],
                },
                doubleValue: 42,
                intArray: {
                  intValues: ['Test string'],
                },
                intValue: 'Test string',
                jsonValue: 'Test string',
                protoArray: {
                  protoValues: [
                    {
                      A: 42,
                    },
                  ],
                },
                protoValue: {
                  A: 42,
                },
                serializedObjectValue: {
                  objectValue: 'Test string',
                },
                stringArray: {
                  stringValues: ['Test string'],
                },
                stringValue: 'Test string',
              },
            },
          ],
        },
        testMode: true,
        triggerId: 'Test string',
      },
    );
    /** Cancellation of an execution and associated sub-executions. This will not cancel an IN_PROCESS or completed(SUCCESSFUL, FAILED or CANCELLED) executions. */
    await gapi.client.integrations.projects.locations.integrations.executions.cancel(
      {
        name: 'Test string',
      },
      {
        cancelReason: 'Test string',
      },
    );
    /** Download the execution. */
    await gapi.client.integrations.projects.locations.integrations.executions.download(
      {
        name: 'Test string',
      },
    );
    /** Get an execution in the specified project. */
    await gapi.client.integrations.projects.locations.integrations.executions.get(
      {
        name: 'Test string',
      },
    );
    /** Lists the results of all the integration executions. The response includes the same information as the [execution log](https://cloud.google.com/application-integration/docs/viewing-logs) in the Integration UI. */
    await gapi.client.integrations.projects.locations.integrations.executions.list(
      {
        filter: 'Test string',
        'filterParams.customFilter': 'Test string',
        'filterParams.endTime': 'Test string',
        'filterParams.eventStatuses': 'Test string',
        'filterParams.executionId': 'Test string',
        'filterParams.parameterKey': 'Test string',
        'filterParams.parameterPairKey': 'Test string',
        'filterParams.parameterPairValue': 'Test string',
        'filterParams.parameterType': 'Test string',
        'filterParams.parameterValue': 'Test string',
        'filterParams.startTime': 'Test string',
        'filterParams.taskStatuses': 'Test string',
        'filterParams.workflowName': 'Test string',
        orderBy: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
        readMask: 'Test string',
        refreshAcl: true,
        snapshotMetadataWithoutParams: true,
        truncateParams: true,
      },
    );
    /** Re-execute an existing execution, with same request parameters and execution strategy. */
    await gapi.client.integrations.projects.locations.integrations.executions.replay(
      {
        name: 'Test string',
      },
      {
        modifiedParameters: {
          A: {
            booleanArray: {
              booleanValues: [true],
            },
            booleanValue: true,
            doubleArray: {
              doubleValues: [42],
            },
            doubleValue: 42,
            intArray: {
              intValues: ['Test string'],
            },
            intValue: 'Test string',
            jsonValue: 'Test string',
            stringArray: {
              stringValues: ['Test string'],
            },
            stringValue: 'Test string',
          },
        },
        replayMode: 'Test string',
        replayReason: 'Test string',
        updateMask: 'Test string',
      },
    );
    /** * Lifts suspension for the Suspension task. Fetch corresponding suspension with provided suspension Id, resolve suspension, and set up suspension result for the Suspension Task. */
    await gapi.client.integrations.projects.locations.integrations.executions.suspensions.lift(
      {
        name: 'Test string',
      },
      {
        suspensionResult: 'Test string',
      },
    );
    /** * Lists suspensions associated with a specific execution. Only those with permissions to resolve the relevant suspensions will be able to view them. */
    await gapi.client.integrations.projects.locations.integrations.executions.suspensions.list(
      {
        filter: 'Test string',
        orderBy: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
    /** * Resolves (lifts/rejects) any number of suspensions. If the integration is already running, only the status of the suspension is updated. Otherwise, the suspended integration will begin execution again. */
    await gapi.client.integrations.projects.locations.integrations.executions.suspensions.resolve(
      {
        name: 'Test string',
      },
      {
        suspension: {
          approvalConfig: {
            customMessage: 'Test string',
            emailAddresses: ['Test string'],
            expiration: {
              expireTime: 'Test string',
              liftWhenExpired: true,
              remindTime: 'Test string',
            },
          },
          audit: {
            resolver: 'Test string',
            resolveTime: 'Test string',
          },
          createTime: 'Test string',
          eventExecutionInfoId: 'Test string',
          integration: 'Test string',
          lastModifyTime: 'Test string',
          name: 'Test string',
          state: 'Test string',
          suspensionConfig: {
            customMessage: 'Test string',
            notifications: [
              {
                buganizerNotification: {
                  assigneeEmailAddress: 'Test string',
                  componentId: 'Test string',
                  templateId: 'Test string',
                  title: 'Test string',
                },
                emailAddress: {
                  email: 'Test string',
                  name: 'Test string',
                  tokens: [
                    {
                      name: 'Test string',
                      value: 'Test string',
                    },
                  ],
                },
                escalatorQueue: 'Test string',
                pubsubTopic: 'Test string',
                request: {
                  postToQueueWithTriggerIdRequest: {
                    clientId: 'Test string',
                    ignoreErrorIfNoActiveWorkflow: true,
                    parameters: {
                      parameters: [
                        {
                          key: 'Test string',
                          masked: true,
                          value: {
                            booleanArray: {
                              booleanValues: [true],
                            },
                            booleanValue: true,
                            doubleArray: {
                              doubleValues: [42],
                            },
                            doubleValue: 42,
                            intArray: {
                              intValues: ['Test string'],
                            },
                            intValue: 'Test string',
                            protoArray: {
                              protoValues: [
                                {
                                  A: 42,
                                },
                              ],
                            },
                            protoValue: {
                              A: 42,
                            },
                            serializedObjectValue: {
                              objectValue: 'Test string',
                            },
                            stringArray: {
                              stringValues: ['Test string'],
                            },
                            stringValue: 'Test string',
                          },
                        },
                      ],
                    },
                    priority: 'Test string',
                    quotaRetryCount: 42,
                    requestId: 'Test string',
                    resourceName: 'Test string',
                    scheduledTime: 'Test string',
                    testMode: true,
                    triggerId: 'Test string',
                    userGeneratedExecutionId: 'Test string',
                    workflowName: 'Test string',
                  },
                  suspensionInfoEventParameterKey: 'Test string',
                },
              },
            ],
            suspensionExpiration: {
              expireAfterMs: 42,
              liftWhenExpired: true,
              remindAfterMs: 42,
            },
            whoMayResolve: [
              {
                gaiaIdentity: {
                  emailAddress: 'Test string',
                  gaiaId: 'Test string',
                },
                googleGroup: {
                  emailAddress: 'Test string',
                  gaiaId: 'Test string',
                },
                loasRole: 'Test string',
                mdbGroup: 'Test string',
              },
            ],
          },
          taskId: 'Test string',
        },
      },
    );
    /** Create a integration with a draft version in the specified project. */
    await gapi.client.integrations.projects.locations.integrations.versions.create(
      {
        createSampleIntegrations: true,
        newIntegration: true,
        parent: 'Test string',
      },
      {
        cloudKmsKey: 'Test string',
        cloudLoggingDetails: {
          cloudLoggingSeverity: 'Test string',
          enableCloudLogging: true,
        },
        createdFromTemplate: 'Test string',
        createTime: 'Test string',
        databasePersistencePolicy: 'Test string',
        description: 'Test string',
        enableVariableMasking: true,
        errorCatcherConfigs: [
          {
            description: 'Test string',
            errorCatcherId: 'Test string',
            errorCatcherNumber: 'Test string',
            label: 'Test string',
            position: {
              x: 42,
              y: 42,
            },
            startErrorTasks: [
              {
                condition: 'Test string',
                description: 'Test string',
                displayName: 'Test string',
                taskConfigId: 'Test string',
                taskId: 'Test string',
              },
            ],
          },
        ],
        integrationConfigParameters: [
          {
            parameter: {
              containsLargeData: true,
              dataType: 'Test string',
              defaultValue: {
                booleanArray: {
                  booleanValues: [true],
                },
                booleanValue: true,
                doubleArray: {
                  doubleValues: [42],
                },
                doubleValue: 42,
                intArray: {
                  intValues: ['Test string'],
                },
                intValue: 'Test string',
                jsonValue: 'Test string',
                stringArray: {
                  stringValues: ['Test string'],
                },
                stringValue: 'Test string',
              },
              description: 'Test string',
              displayName: 'Test string',
              inputOutputType: 'Test string',
              isTransient: true,
              jsonSchema: 'Test string',
              key: 'Test string',
              masked: true,
              producer: 'Test string',
              searchable: true,
            },
            value: {
              booleanArray: {
                booleanValues: [true],
              },
              booleanValue: true,
              doubleArray: {
                doubleValues: [42],
              },
              doubleValue: 42,
              intArray: {
                intValues: ['Test string'],
              },
              intValue: 'Test string',
              jsonValue: 'Test string',
              stringArray: {
                stringValues: ['Test string'],
              },
              stringValue: 'Test string',
            },
          },
        ],
        integrationParameters: [
          {
            containsLargeData: true,
            dataType: 'Test string',
            defaultValue: {
              booleanArray: {
                booleanValues: [true],
              },
              booleanValue: true,
              doubleArray: {
                doubleValues: [42],
              },
              doubleValue: 42,
              intArray: {
                intValues: ['Test string'],
              },
              intValue: 'Test string',
              jsonValue: 'Test string',
              stringArray: {
                stringValues: ['Test string'],
              },
              stringValue: 'Test string',
            },
            description: 'Test string',
            displayName: 'Test string',
            inputOutputType: 'Test string',
            isTransient: true,
            jsonSchema: 'Test string',
            key: 'Test string',
            masked: true,
            producer: 'Test string',
            searchable: true,
          },
        ],
        integrationParametersInternal: {
          parameters: [
            {
              attributes: {
                dataType: 'Test string',
                defaultValue: {
                  booleanValue: true,
                  doubleArray: {
                    values: [42],
                  },
                  doubleValue: 42,
                  intArray: {
                    values: ['Test string'],
                  },
                  intValue: 'Test string',
                  protoValue: {
                    A: 42,
                  },
                  stringArray: {
                    values: ['Test string'],
                  },
                  stringValue: 'Test string',
                },
                isRequired: true,
                isSearchable: true,
                logSettings: {
                  logFieldName: 'Test string',
                  seedPeriod: 'Test string',
                  seedScope: 'Test string',
                },
                masked: true,
                readOnly: true,
                searchable: 'Test string',
                taskVisibility: ['Test string'],
              },
              children: undefined,
              containsLargeData: true,
              dataType: 'Test string',
              defaultValue: {
                booleanArray: {
                  booleanValues: [true],
                },
                booleanValue: true,
                doubleArray: {
                  doubleValues: [42],
                },
                doubleValue: 42,
                intArray: {
                  intValues: ['Test string'],
                },
                intValue: 'Test string',
                jsonValue: 'Test string',
                protoArray: {
                  protoValues: [
                    {
                      A: 42,
                    },
                  ],
                },
                protoValue: {
                  A: 42,
                },
                serializedObjectValue: {
                  objectValue: 'Test string',
                },
                stringArray: {
                  stringValues: ['Test string'],
                },
                stringValue: 'Test string',
              },
              description: 'Test string',
              inOutType: 'Test string',
              isTransient: true,
              jsonSchema: 'Test string',
              key: 'Test string',
              name: 'Test string',
              producedBy: {
                elementIdentifier: 'Test string',
                elementType: 'Test string',
              },
              producer: 'Test string',
              protoDefName: 'Test string',
              protoDefPath: 'Test string',
              required: true,
            },
          ],
        },
        lastModifierEmail: 'Test string',
        lockHolder: 'Test string',
        name: 'Test string',
        origin: 'Test string',
        parentTemplateId: 'Test string',
        runAsServiceAccount: 'Test string',
        snapshotNumber: 'Test string',
        state: 'Test string',
        status: 'Test string',
        taskConfigs: [
          {
            conditionalFailurePolicies: {
              defaultFailurePolicy: {
                condition: 'Test string',
                intervalTime: 'Test string',
                maxRetries: 42,
                retryStrategy: 'Test string',
              },
              failurePolicies: [
                {
                  condition: 'Test string',
                  intervalTime: 'Test string',
                  maxRetries: 42,
                  retryStrategy: 'Test string',
                },
              ],
            },
            description: 'Test string',
            displayName: 'Test string',
            errorCatcherId: 'Test string',
            externalTaskType: 'Test string',
            failurePolicy: {
              condition: 'Test string',
              intervalTime: 'Test string',
              maxRetries: 42,
              retryStrategy: 'Test string',
            },
            jsonValidationOption: 'Test string',
            nextTasks: [
              {
                condition: 'Test string',
                description: 'Test string',
                displayName: 'Test string',
                taskConfigId: 'Test string',
                taskId: 'Test string',
              },
            ],
            nextTasksExecutionPolicy: 'Test string',
            parameters: {
              A: {
                key: 'Test string',
                masked: true,
                value: {
                  booleanArray: {
                    booleanValues: [true],
                  },
                  booleanValue: true,
                  doubleArray: {
                    doubleValues: [42],
                  },
                  doubleValue: 42,
                  intArray: {
                    intValues: ['Test string'],
                  },
                  intValue: 'Test string',
                  jsonValue: 'Test string',
                  stringArray: {
                    stringValues: ['Test string'],
                  },
                  stringValue: 'Test string',
                },
              },
            },
            position: {
              x: 42,
              y: 42,
            },
            successPolicy: {
              finalState: 'Test string',
            },
            synchronousCallFailurePolicy: {
              condition: 'Test string',
              intervalTime: 'Test string',
              maxRetries: 42,
              retryStrategy: 'Test string',
            },
            task: 'Test string',
            taskExecutionStrategy: 'Test string',
            taskId: 'Test string',
            taskTemplate: 'Test string',
          },
        ],
        taskConfigsInternal: [
          {
            alertConfigs: [
              {
                aggregationPeriod: 'Test string',
                alertDisabled: true,
                alertName: 'Test string',
                clientId: 'Test string',
                durationThresholdMs: 'Test string',
                errorEnumList: {
                  enumStrings: ['Test string'],
                  filterType: 'Test string',
                },
                metricType: 'Test string',
                numAggregationPeriods: 42,
                onlyFinalAttempt: true,
                playbookUrl: 'Test string',
                thresholdType: 'Test string',
                thresholdValue: {
                  absolute: 'Test string',
                  percentage: 42,
                },
                warningEnumList: {
                  enumStrings: ['Test string'],
                  filterType: 'Test string',
                },
              },
            ],
            conditionalFailurePolicies: {
              defaultFailurePolicy: {
                intervalInSeconds: 'Test string',
                maxNumRetries: 42,
                retryCondition: 'Test string',
                retryStrategy: 'Test string',
              },
              failurePolicies: [
                {
                  intervalInSeconds: 'Test string',
                  maxNumRetries: 42,
                  retryCondition: 'Test string',
                  retryStrategy: 'Test string',
                },
              ],
            },
            createTime: 'Test string',
            creatorEmail: 'Test string',
            description: 'Test string',
            disableStrictTypeValidation: true,
            errorCatcherId: 'Test string',
            externalTaskType: 'Test string',
            failurePolicy: {
              intervalInSeconds: 'Test string',
              maxNumRetries: 42,
              retryCondition: 'Test string',
              retryStrategy: 'Test string',
            },
            incomingEdgeCount: 42,
            jsonValidationOption: 'Test string',
            label: 'Test string',
            lastModifiedTime: 'Test string',
            nextTasks: [
              {
                combinedConditions: [
                  {
                    conditions: [
                      {
                        eventPropertyKey: 'Test string',
                        operator: 'Test string',
                        value: {
                          booleanValue: true,
                          doubleArray: {
                            values: [42],
                          },
                          doubleValue: 42,
                          intArray: {
                            values: ['Test string'],
                          },
                          intValue: 'Test string',
                          protoValue: {
                            A: 42,
                          },
                          stringArray: {
                            values: ['Test string'],
                          },
                          stringValue: 'Test string',
                        },
                      },
                    ],
                  },
                ],
                condition: 'Test string',
                description: 'Test string',
                label: 'Test string',
                taskConfigId: 'Test string',
                taskNumber: 'Test string',
              },
            ],
            nextTasksExecutionPolicy: 'Test string',
            parameters: {
              A: {
                dataType: 'Test string',
                key: 'Test string',
                masked: true,
                value: {
                  booleanArray: {
                    booleanValues: [true],
                  },
                  booleanValue: true,
                  doubleArray: {
                    doubleValues: [42],
                  },
                  doubleValue: 42,
                  intArray: {
                    intValues: ['Test string'],
                  },
                  intValue: 'Test string',
                  jsonValue: 'Test string',
                  protoArray: {
                    protoValues: [
                      {
                        A: 42,
                      },
                    ],
                  },
                  protoValue: {
                    A: 42,
                  },
                  serializedObjectValue: {
                    objectValue: 'Test string',
                  },
                  stringArray: {
                    stringValues: ['Test string'],
                  },
                  stringValue: 'Test string',
                },
              },
            },
            position: {
              x: 42,
              y: 42,
            },
            precondition: 'Test string',
            preconditionLabel: 'Test string',
            rollbackStrategy: {
              parameters: {
                parameters: [
                  {
                    dataType: 'Test string',
                    key: 'Test string',
                    masked: true,
                    value: {
                      booleanArray: {
                        booleanValues: [true],
                      },
                      booleanValue: true,
                      doubleArray: {
                        doubleValues: [42],
                      },
                      doubleValue: 42,
                      intArray: {
                        intValues: ['Test string'],
                      },
                      intValue: 'Test string',
                      jsonValue: 'Test string',
                      protoArray: {
                        protoValues: [
                          {
                            A: 42,
                          },
                        ],
                      },
                      protoValue: {
                        A: 42,
                      },
                      serializedObjectValue: {
                        objectValue: 'Test string',
                      },
                      stringArray: {
                        stringValues: ['Test string'],
                      },
                      stringValue: 'Test string',
                    },
                  },
                ],
              },
              rollbackTaskImplementationClassName: 'Test string',
              taskNumbersToRollback: ['Test string'],
            },
            successPolicy: {
              finalState: 'Test string',
            },
            synchronousCallFailurePolicy: {
              intervalInSeconds: 'Test string',
              maxNumRetries: 42,
              retryCondition: 'Test string',
              retryStrategy: 'Test string',
            },
            taskEntity: {
              disabledForVpcSc: true,
              metadata: {
                activeTaskName: 'Test string',
                admins: [
                  {
                    googleGroupEmail: 'Test string',
                    userEmail: 'Test string',
                  },
                ],
                category: 'Test string',
                codeSearchLink: 'Test string',
                defaultJsonValidationOption: 'Test string',
                defaultSpec: 'Test string',
                description: 'Test string',
                descriptiveName: 'Test string',
                docMarkdown: 'Test string',
                externalCategory: 'Test string',
                externalCategorySequence: 42,
                externalDocHtml: 'Test string',
                externalDocLink: 'Test string',
                externalDocMarkdown: 'Test string',
                g3DocLink: 'Test string',
                iconLink: 'Test string',
                isDeprecated: true,
                name: 'Test string',
                standaloneExternalDocHtml: 'Test string',
                status: 'Test string',
                system: 'Test string',
                tags: ['Test string'],
              },
              paramSpecs: {
                parameters: [
                  {
                    className: 'Test string',
                    collectionElementClassName: 'Test string',
                    config: {
                      descriptivePhrase: 'Test string',
                      helpText: 'Test string',
                      hideDefaultValue: true,
                      inputDisplayOption: 'Test string',
                      isHidden: true,
                      label: 'Test string',
                      parameterNameOption: 'Test string',
                      subSectionLabel: 'Test string',
                      uiPlaceholderText: 'Test string',
                    },
                    dataType: 'Test string',
                    defaultValue: {
                      booleanArray: {
                        booleanValues: [true],
                      },
                      booleanValue: true,
                      doubleArray: {
                        doubleValues: [42],
                      },
                      doubleValue: 42,
                      intArray: {
                        intValues: ['Test string'],
                      },
                      intValue: 'Test string',
                      jsonValue: 'Test string',
                      protoArray: {
                        protoValues: [
                          {
                            A: 42,
                          },
                        ],
                      },
                      protoValue: {
                        A: 42,
                      },
                      serializedObjectValue: {
                        objectValue: 'Test string',
                      },
                      stringArray: {
                        stringValues: ['Test string'],
                      },
                      stringValue: 'Test string',
                    },
                    isDeprecated: true,
                    isOutput: true,
                    jsonSchema: 'Test string',
                    key: 'Test string',
                    protoDef: {
                      fullName: 'Test string',
                      path: 'Test string',
                    },
                    required: true,
                    validationRule: {
                      doubleRange: {
                        max: 42,
                        min: 42,
                      },
                      intRange: {
                        max: 'Test string',
                        min: 'Test string',
                      },
                      stringRegex: {
                        exclusive: true,
                        regex: 'Test string',
                      },
                    },
                  },
                ],
              },
              stats: {
                dimensions: {
                  clientId: 'Test string',
                  enumFilterType: 'Test string',
                  errorEnumString: 'Test string',
                  retryAttempt: 'Test string',
                  taskName: 'Test string',
                  taskNumber: 'Test string',
                  triggerId: 'Test string',
                  warningEnumString: 'Test string',
                  workflowId: 'Test string',
                  workflowName: 'Test string',
                },
                durationInSeconds: 42,
                errorRate: 42,
                qps: 42,
                warningRate: 42,
              },
              taskType: 'Test string',
              uiConfig: {
                taskUiModuleConfigs: [
                  {
                    moduleId: 'Test string',
                  },
                ],
              },
            },
            taskExecutionStrategy: 'Test string',
            taskName: 'Test string',
            taskNumber: 'Test string',
            taskSpec: 'Test string',
            taskTemplateName: 'Test string',
            taskType: 'Test string',
          },
        ],
        teardown: {
          teardownTaskConfigs: [
            {
              creatorEmail: 'Test string',
              name: 'Test string',
              nextTeardownTask: {
                name: 'Test string',
              },
              parameters: {
                parameters: [
                  {
                    key: 'Test string',
                    masked: true,
                    value: {
                      booleanArray: {
                        booleanValues: [true],
                      },
                      booleanValue: true,
                      doubleArray: {
                        doubleValues: [42],
                      },
                      doubleValue: 42,
                      intArray: {
                        intValues: ['Test string'],
                      },
                      intValue: 'Test string',
                      protoArray: {
                        protoValues: [
                          {
                            A: 42,
                          },
                        ],
                      },
                      protoValue: {
                        A: 42,
                      },
                      serializedObjectValue: {
                        objectValue: 'Test string',
                      },
                      stringArray: {
                        stringValues: ['Test string'],
                      },
                      stringValue: 'Test string',
                    },
                  },
                ],
              },
              properties: {
                properties: [
                  {
                    key: 'Test string',
                    value: {
                      booleanValue: true,
                      doubleArray: {
                        values: [42],
                      },
                      doubleValue: 42,
                      intArray: {
                        values: ['Test string'],
                      },
                      intValue: 'Test string',
                      protoValue: {
                        A: 42,
                      },
                      stringArray: {
                        values: ['Test string'],
                      },
                      stringValue: 'Test string',
                    },
                  },
                ],
              },
              teardownTaskImplementationClassName: 'Test string',
            },
          ],
        },
        triggerConfigs: [
          {
            alertConfig: [
              {
                aggregationPeriod: 'Test string',
                alertThreshold: 42,
                disableAlert: true,
                displayName: 'Test string',
                durationThreshold: 'Test string',
                metricType: 'Test string',
                onlyFinalAttempt: true,
                thresholdType: 'Test string',
                thresholdValue: {
                  absolute: 'Test string',
                  percentage: 42,
                },
              },
            ],
            cloudSchedulerConfig: {
              cronTab: 'Test string',
              errorMessage: 'Test string',
              location: 'Test string',
              serviceAccountEmail: 'Test string',
            },
            description: 'Test string',
            errorCatcherId: 'Test string',
            inputVariables: {
              names: ['Test string'],
            },
            label: 'Test string',
            nextTasksExecutionPolicy: 'Test string',
            outputVariables: {
              names: ['Test string'],
            },
            position: {
              x: 42,
              y: 42,
            },
            properties: {
              A: 'Test string',
            },
            startTasks: [
              {
                condition: 'Test string',
                description: 'Test string',
                displayName: 'Test string',
                taskConfigId: 'Test string',
                taskId: 'Test string',
              },
            ],
            trigger: 'Test string',
            triggerId: 'Test string',
            triggerNumber: 'Test string',
            triggerType: 'Test string',
          },
        ],
        triggerConfigsInternal: [
          {
            alertConfig: [
              {
                aggregationPeriod: 'Test string',
                alertDisabled: true,
                alertName: 'Test string',
                clientId: 'Test string',
                durationThresholdMs: 'Test string',
                errorEnumList: {
                  enumStrings: ['Test string'],
                  filterType: 'Test string',
                },
                metricType: 'Test string',
                numAggregationPeriods: 42,
                onlyFinalAttempt: true,
                playbookUrl: 'Test string',
                thresholdType: 'Test string',
                thresholdValue: {
                  absolute: 'Test string',
                  percentage: 42,
                },
                warningEnumList: {
                  enumStrings: ['Test string'],
                  filterType: 'Test string',
                },
              },
            ],
            cloudSchedulerConfig: {
              cronTab: 'Test string',
              errorMessage: 'Test string',
              location: 'Test string',
              serviceAccountEmail: 'Test string',
            },
            description: 'Test string',
            enabledClients: ['Test string'],
            errorCatcherId: 'Test string',
            inputVariables: {
              names: ['Test string'],
            },
            label: 'Test string',
            nextTasksExecutionPolicy: 'Test string',
            outputVariables: {
              names: ['Test string'],
            },
            pauseWorkflowExecutions: true,
            position: {
              x: 42,
              y: 42,
            },
            properties: {
              A: 'Test string',
            },
            startTasks: [
              {
                combinedConditions: [
                  {
                    conditions: [
                      {
                        eventPropertyKey: 'Test string',
                        operator: 'Test string',
                        value: {
                          booleanValue: true,
                          doubleArray: {
                            values: [42],
                          },
                          doubleValue: 42,
                          intArray: {
                            values: ['Test string'],
                          },
                          intValue: 'Test string',
                          protoValue: {
                            A: 42,
                          },
                          stringArray: {
                            values: ['Test string'],
                          },
                          stringValue: 'Test string',
                        },
                      },
                    ],
                  },
                ],
                condition: 'Test string',
                description: 'Test string',
                label: 'Test string',
                taskConfigId: 'Test string',
                taskNumber: 'Test string',
              },
            ],
            triggerCriteria: {
              condition: 'Test string',
              parameters: {
                parameters: [
                  {
                    key: 'Test string',
                    masked: true,
                    value: {
                      booleanArray: {
                        booleanValues: [true],
                      },
                      booleanValue: true,
                      doubleArray: {
                        doubleValues: [42],
                      },
                      doubleValue: 42,
                      intArray: {
                        intValues: ['Test string'],
                      },
                      intValue: 'Test string',
                      protoArray: {
                        protoValues: [
                          {
                            A: 42,
                          },
                        ],
                      },
                      protoValue: {
                        A: 42,
                      },
                      serializedObjectValue: {
                        objectValue: 'Test string',
                      },
                      stringArray: {
                        stringValues: ['Test string'],
                      },
                      stringValue: 'Test string',
                    },
                  },
                ],
              },
              triggerCriteriaTaskImplementationClassName: 'Test string',
            },
            triggerId: 'Test string',
            triggerName: 'Test string',
            triggerNumber: 'Test string',
            triggerType: 'Test string',
          },
        ],
        updateTime: 'Test string',
        userLabel: 'Test string',
      },
    );
    /** Soft-deletes the integration. Changes the status of the integration to ARCHIVED. If the integration being ARCHIVED is tagged as "HEAD", the tag is removed from this snapshot and set to the previous non-ARCHIVED snapshot. The PUBLISH_REQUESTED, DUE_FOR_DELETION tags are removed too. This RPC throws an exception if the version being deleted is DRAFT, and if the `locked_by` user is not the same as the user performing the Delete. Audit fields updated include last_modified_timestamp, last_modified_by. Any existing lock is released when Deleting a integration. Currently, there is no undelete mechanism. */
    await gapi.client.integrations.projects.locations.integrations.versions.delete(
      {
        name: 'Test string',
      },
    );
    /** Downloads an integration. Retrieves the `IntegrationVersion` for a given `integration_id` and returns the response as a string. */
    await gapi.client.integrations.projects.locations.integrations.versions.download(
      {
        fileFormat: 'Test string',
        files: 'Test string',
        name: 'Test string',
      },
    );
    /** Downloads an Integration version package like IntegrationVersion,Integration Config etc. Retrieves the IntegrationVersion package for a given `integration_id` and returns the response as a JSON. */
    await gapi.client.integrations.projects.locations.integrations.versions.downloadJsonPackage(
      {
        files: 'Test string',
        name: 'Test string',
      },
    );
    /** Get a integration in the specified project. */
    await gapi.client.integrations.projects.locations.integrations.versions.get(
      {
        name: 'Test string',
      },
    );
    /** Returns the list of all integration versions in the specified project. */
    await gapi.client.integrations.projects.locations.integrations.versions.list(
      {
        fieldMask: 'Test string',
        filter: 'Test string',
        orderBy: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
    /** Update a integration with a draft version in the specified project. */
    await gapi.client.integrations.projects.locations.integrations.versions.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        cloudKmsKey: 'Test string',
        cloudLoggingDetails: {
          cloudLoggingSeverity: 'Test string',
          enableCloudLogging: true,
        },
        createdFromTemplate: 'Test string',
        createTime: 'Test string',
        databasePersistencePolicy: 'Test string',
        description: 'Test string',
        enableVariableMasking: true,
        errorCatcherConfigs: [
          {
            description: 'Test string',
            errorCatcherId: 'Test string',
            errorCatcherNumber: 'Test string',
            label: 'Test string',
            position: {
              x: 42,
              y: 42,
            },
            startErrorTasks: [
              {
                condition: 'Test string',
                description: 'Test string',
                displayName: 'Test string',
                taskConfigId: 'Test string',
                taskId: 'Test string',
              },
            ],
          },
        ],
        integrationConfigParameters: [
          {
            parameter: {
              containsLargeData: true,
              dataType: 'Test string',
              defaultValue: {
                booleanArray: {
                  booleanValues: [true],
                },
                booleanValue: true,
                doubleArray: {
                  doubleValues: [42],
                },
                doubleValue: 42,
                intArray: {
                  intValues: ['Test string'],
                },
                intValue: 'Test string',
                jsonValue: 'Test string',
                stringArray: {
                  stringValues: ['Test string'],
                },
                stringValue: 'Test string',
              },
              description: 'Test string',
              displayName: 'Test string',
              inputOutputType: 'Test string',
              isTransient: true,
              jsonSchema: 'Test string',
              key: 'Test string',
              masked: true,
              producer: 'Test string',
              searchable: true,
            },
            value: {
              booleanArray: {
                booleanValues: [true],
              },
              booleanValue: true,
              doubleArray: {
                doubleValues: [42],
              },
              doubleValue: 42,
              intArray: {
                intValues: ['Test string'],
              },
              intValue: 'Test string',
              jsonValue: 'Test string',
              stringArray: {
                stringValues: ['Test string'],
              },
              stringValue: 'Test string',
            },
          },
        ],
        integrationParameters: [
          {
            containsLargeData: true,
            dataType: 'Test string',
            defaultValue: {
              booleanArray: {
                booleanValues: [true],
              },
              booleanValue: true,
              doubleArray: {
                doubleValues: [42],
              },
              doubleValue: 42,
              intArray: {
                intValues: ['Test string'],
              },
              intValue: 'Test string',
              jsonValue: 'Test string',
              stringArray: {
                stringValues: ['Test string'],
              },
              stringValue: 'Test string',
            },
            description: 'Test string',
            displayName: 'Test string',
            inputOutputType: 'Test string',
            isTransient: true,
            jsonSchema: 'Test string',
            key: 'Test string',
            masked: true,
            producer: 'Test string',
            searchable: true,
          },
        ],
        integrationParametersInternal: {
          parameters: [
            {
              attributes: {
                dataType: 'Test string',
                defaultValue: {
                  booleanValue: true,
                  doubleArray: {
                    values: [42],
                  },
                  doubleValue: 42,
                  intArray: {
                    values: ['Test string'],
                  },
                  intValue: 'Test string',
                  protoValue: {
                    A: 42,
                  },
                  stringArray: {
                    values: ['Test string'],
                  },
                  stringValue: 'Test string',
                },
                isRequired: true,
                isSearchable: true,
                logSettings: {
                  logFieldName: 'Test string',
                  seedPeriod: 'Test string',
                  seedScope: 'Test string',
                },
                masked: true,
                readOnly: true,
                searchable: 'Test string',
                taskVisibility: ['Test string'],
              },
              children: undefined,
              containsLargeData: true,
              dataType: 'Test string',
              defaultValue: {
                booleanArray: {
                  booleanValues: [true],
                },
                booleanValue: true,
                doubleArray: {
                  doubleValues: [42],
                },
                doubleValue: 42,
                intArray: {
                  intValues: ['Test string'],
                },
                intValue: 'Test string',
                jsonValue: 'Test string',
                protoArray: {
                  protoValues: [
                    {
                      A: 42,
                    },
                  ],
                },
                protoValue: {
                  A: 42,
                },
                serializedObjectValue: {
                  objectValue: 'Test string',
                },
                stringArray: {
                  stringValues: ['Test string'],
                },
                stringValue: 'Test string',
              },
              description: 'Test string',
              inOutType: 'Test string',
              isTransient: true,
              jsonSchema: 'Test string',
              key: 'Test string',
              name: 'Test string',
              producedBy: {
                elementIdentifier: 'Test string',
                elementType: 'Test string',
              },
              producer: 'Test string',
              protoDefName: 'Test string',
              protoDefPath: 'Test string',
              required: true,
            },
          ],
        },
        lastModifierEmail: 'Test string',
        lockHolder: 'Test string',
        name: 'Test string',
        origin: 'Test string',
        parentTemplateId: 'Test string',
        runAsServiceAccount: 'Test string',
        snapshotNumber: 'Test string',
        state: 'Test string',
        status: 'Test string',
        taskConfigs: [
          {
            conditionalFailurePolicies: {
              defaultFailurePolicy: {
                condition: 'Test string',
                intervalTime: 'Test string',
                maxRetries: 42,
                retryStrategy: 'Test string',
              },
              failurePolicies: [
                {
                  condition: 'Test string',
                  intervalTime: 'Test string',
                  maxRetries: 42,
                  retryStrategy: 'Test string',
                },
              ],
            },
            description: 'Test string',
            displayName: 'Test string',
            errorCatcherId: 'Test string',
            externalTaskType: 'Test string',
            failurePolicy: {
              condition: 'Test string',
              intervalTime: 'Test string',
              maxRetries: 42,
              retryStrategy: 'Test string',
            },
            jsonValidationOption: 'Test string',
            nextTasks: [
              {
                condition: 'Test string',
                description: 'Test string',
                displayName: 'Test string',
                taskConfigId: 'Test string',
                taskId: 'Test string',
              },
            ],
            nextTasksExecutionPolicy: 'Test string',
            parameters: {
              A: {
                key: 'Test string',
                masked: true,
                value: {
                  booleanArray: {
                    booleanValues: [true],
                  },
                  booleanValue: true,
                  doubleArray: {
                    doubleValues: [42],
                  },
                  doubleValue: 42,
                  intArray: {
                    intValues: ['Test string'],
                  },
                  intValue: 'Test string',
                  jsonValue: 'Test string',
                  stringArray: {
                    stringValues: ['Test string'],
                  },
                  stringValue: 'Test string',
                },
              },
            },
            position: {
              x: 42,
              y: 42,
            },
            successPolicy: {
              finalState: 'Test string',
            },
            synchronousCallFailurePolicy: {
              condition: 'Test string',
              intervalTime: 'Test string',
              maxRetries: 42,
              retryStrategy: 'Test string',
            },
            task: 'Test string',
            taskExecutionStrategy: 'Test string',
            taskId: 'Test string',
            taskTemplate: 'Test string',
          },
        ],
        taskConfigsInternal: [
          {
            alertConfigs: [
              {
                aggregationPeriod: 'Test string',
                alertDisabled: true,
                alertName: 'Test string',
                clientId: 'Test string',
                durationThresholdMs: 'Test string',
                errorEnumList: {
                  enumStrings: ['Test string'],
                  filterType: 'Test string',
                },
                metricType: 'Test string',
                numAggregationPeriods: 42,
                onlyFinalAttempt: true,
                playbookUrl: 'Test string',
                thresholdType: 'Test string',
                thresholdValue: {
                  absolute: 'Test string',
                  percentage: 42,
                },
                warningEnumList: {
                  enumStrings: ['Test string'],
                  filterType: 'Test string',
                },
              },
            ],
            conditionalFailurePolicies: {
              defaultFailurePolicy: {
                intervalInSeconds: 'Test string',
                maxNumRetries: 42,
                retryCondition: 'Test string',
                retryStrategy: 'Test string',
              },
              failurePolicies: [
                {
                  intervalInSeconds: 'Test string',
                  maxNumRetries: 42,
                  retryCondition: 'Test string',
                  retryStrategy: 'Test string',
                },
              ],
            },
            createTime: 'Test string',
            creatorEmail: 'Test string',
            description: 'Test string',
            disableStrictTypeValidation: true,
            errorCatcherId: 'Test string',
            externalTaskType: 'Test string',
            failurePolicy: {
              intervalInSeconds: 'Test string',
              maxNumRetries: 42,
              retryCondition: 'Test string',
              retryStrategy: 'Test string',
            },
            incomingEdgeCount: 42,
            jsonValidationOption: 'Test string',
            label: 'Test string',
            lastModifiedTime: 'Test string',
            nextTasks: [
              {
                combinedConditions: [
                  {
                    conditions: [
                      {
                        eventPropertyKey: 'Test string',
                        operator: 'Test string',
                        value: {
                          booleanValue: true,
                          doubleArray: {
                            values: [42],
                          },
                          doubleValue: 42,
                          intArray: {
                            values: ['Test string'],
                          },
                          intValue: 'Test string',
                          protoValue: {
                            A: 42,
                          },
                          stringArray: {
                            values: ['Test string'],
                          },
                          stringValue: 'Test string',
                        },
                      },
                    ],
                  },
                ],
                condition: 'Test string',
                description: 'Test string',
                label: 'Test string',
                taskConfigId: 'Test string',
                taskNumber: 'Test string',
              },
            ],
            nextTasksExecutionPolicy: 'Test string',
            parameters: {
              A: {
                dataType: 'Test string',
                key: 'Test string',
                masked: true,
                value: {
                  booleanArray: {
                    booleanValues: [true],
                  },
                  booleanValue: true,
                  doubleArray: {
                    doubleValues: [42],
                  },
                  doubleValue: 42,
                  intArray: {
                    intValues: ['Test string'],
                  },
                  intValue: 'Test string',
                  jsonValue: 'Test string',
                  protoArray: {
                    protoValues: [
                      {
                        A: 42,
                      },
                    ],
                  },
                  protoValue: {
                    A: 42,
                  },
                  serializedObjectValue: {
                    objectValue: 'Test string',
                  },
                  stringArray: {
                    stringValues: ['Test string'],
                  },
                  stringValue: 'Test string',
                },
              },
            },
            position: {
              x: 42,
              y: 42,
            },
            precondition: 'Test string',
            preconditionLabel: 'Test string',
            rollbackStrategy: {
              parameters: {
                parameters: [
                  {
                    dataType: 'Test string',
                    key: 'Test string',
                    masked: true,
                    value: {
                      booleanArray: {
                        booleanValues: [true],
                      },
                      booleanValue: true,
                      doubleArray: {
                        doubleValues: [42],
                      },
                      doubleValue: 42,
                      intArray: {
                        intValues: ['Test string'],
                      },
                      intValue: 'Test string',
                      jsonValue: 'Test string',
                      protoArray: {
                        protoValues: [
                          {
                            A: 42,
                          },
                        ],
                      },
                      protoValue: {
                        A: 42,
                      },
                      serializedObjectValue: {
                        objectValue: 'Test string',
                      },
                      stringArray: {
                        stringValues: ['Test string'],
                      },
                      stringValue: 'Test string',
                    },
                  },
                ],
              },
              rollbackTaskImplementationClassName: 'Test string',
              taskNumbersToRollback: ['Test string'],
            },
            successPolicy: {
              finalState: 'Test string',
            },
            synchronousCallFailurePolicy: {
              intervalInSeconds: 'Test string',
              maxNumRetries: 42,
              retryCondition: 'Test string',
              retryStrategy: 'Test string',
            },
            taskEntity: {
              disabledForVpcSc: true,
              metadata: {
                activeTaskName: 'Test string',
                admins: [
                  {
                    googleGroupEmail: 'Test string',
                    userEmail: 'Test string',
                  },
                ],
                category: 'Test string',
                codeSearchLink: 'Test string',
                defaultJsonValidationOption: 'Test string',
                defaultSpec: 'Test string',
                description: 'Test string',
                descriptiveName: 'Test string',
                docMarkdown: 'Test string',
                externalCategory: 'Test string',
                externalCategorySequence: 42,
                externalDocHtml: 'Test string',
                externalDocLink: 'Test string',
                externalDocMarkdown: 'Test string',
                g3DocLink: 'Test string',
                iconLink: 'Test string',
                isDeprecated: true,
                name: 'Test string',
                standaloneExternalDocHtml: 'Test string',
                status: 'Test string',
                system: 'Test string',
                tags: ['Test string'],
              },
              paramSpecs: {
                parameters: [
                  {
                    className: 'Test string',
                    collectionElementClassName: 'Test string',
                    config: {
                      descriptivePhrase: 'Test string',
                      helpText: 'Test string',
                      hideDefaultValue: true,
                      inputDisplayOption: 'Test string',
                      isHidden: true,
                      label: 'Test string',
                      parameterNameOption: 'Test string',
                      subSectionLabel: 'Test string',
                      uiPlaceholderText: 'Test string',
                    },
                    dataType: 'Test string',
                    defaultValue: {
                      booleanArray: {
                        booleanValues: [true],
                      },
                      booleanValue: true,
                      doubleArray: {
                        doubleValues: [42],
                      },
                      doubleValue: 42,
                      intArray: {
                        intValues: ['Test string'],
                      },
                      intValue: 'Test string',
                      jsonValue: 'Test string',
                      protoArray: {
                        protoValues: [
                          {
                            A: 42,
                          },
                        ],
                      },
                      protoValue: {
                        A: 42,
                      },
                      serializedObjectValue: {
                        objectValue: 'Test string',
                      },
                      stringArray: {
                        stringValues: ['Test string'],
                      },
                      stringValue: 'Test string',
                    },
                    isDeprecated: true,
                    isOutput: true,
                    jsonSchema: 'Test string',
                    key: 'Test string',
                    protoDef: {
                      fullName: 'Test string',
                      path: 'Test string',
                    },
                    required: true,
                    validationRule: {
                      doubleRange: {
                        max: 42,
                        min: 42,
                      },
                      intRange: {
                        max: 'Test string',
                        min: 'Test string',
                      },
                      stringRegex: {
                        exclusive: true,
                        regex: 'Test string',
                      },
                    },
                  },
                ],
              },
              stats: {
                dimensions: {
                  clientId: 'Test string',
                  enumFilterType: 'Test string',
                  errorEnumString: 'Test string',
                  retryAttempt: 'Test string',
                  taskName: 'Test string',
                  taskNumber: 'Test string',
                  triggerId: 'Test string',
                  warningEnumString: 'Test string',
                  workflowId: 'Test string',
                  workflowName: 'Test string',
                },
                durationInSeconds: 42,
                errorRate: 42,
                qps: 42,
                warningRate: 42,
              },
              taskType: 'Test string',
              uiConfig: {
                taskUiModuleConfigs: [
                  {
                    moduleId: 'Test string',
                  },
                ],
              },
            },
            taskExecutionStrategy: 'Test string',
            taskName: 'Test string',
            taskNumber: 'Test string',
            taskSpec: 'Test string',
            taskTemplateName: 'Test string',
            taskType: 'Test string',
          },
        ],
        teardown: {
          teardownTaskConfigs: [
            {
              creatorEmail: 'Test string',
              name: 'Test string',
              nextTeardownTask: {
                name: 'Test string',
              },
              parameters: {
                parameters: [
                  {
                    key: 'Test string',
                    masked: true,
                    value: {
                      booleanArray: {
                        booleanValues: [true],
                      },
                      booleanValue: true,
                      doubleArray: {
                        doubleValues: [42],
                      },
                      doubleValue: 42,
                      intArray: {
                        intValues: ['Test string'],
                      },
                      intValue: 'Test string',
                      protoArray: {
                        protoValues: [
                          {
                            A: 42,
                          },
                        ],
                      },
                      protoValue: {
                        A: 42,
                      },
                      serializedObjectValue: {
                        objectValue: 'Test string',
                      },
                      stringArray: {
                        stringValues: ['Test string'],
                      },
                      stringValue: 'Test string',
                    },
                  },
                ],
              },
              properties: {
                properties: [
                  {
                    key: 'Test string',
                    value: {
                      booleanValue: true,
                      doubleArray: {
                        values: [42],
                      },
                      doubleValue: 42,
                      intArray: {
                        values: ['Test string'],
                      },
                      intValue: 'Test string',
                      protoValue: {
                        A: 42,
                      },
                      stringArray: {
                        values: ['Test string'],
                      },
                      stringValue: 'Test string',
                    },
                  },
                ],
              },
              teardownTaskImplementationClassName: 'Test string',
            },
          ],
        },
        triggerConfigs: [
          {
            alertConfig: [
              {
                aggregationPeriod: 'Test string',
                alertThreshold: 42,
                disableAlert: true,
                displayName: 'Test string',
                durationThreshold: 'Test string',
                metricType: 'Test string',
                onlyFinalAttempt: true,
                thresholdType: 'Test string',
                thresholdValue: {
                  absolute: 'Test string',
                  percentage: 42,
                },
              },
            ],
            cloudSchedulerConfig: {
              cronTab: 'Test string',
              errorMessage: 'Test string',
              location: 'Test string',
              serviceAccountEmail: 'Test string',
            },
            description: 'Test string',
            errorCatcherId: 'Test string',
            inputVariables: {
              names: ['Test string'],
            },
            label: 'Test string',
            nextTasksExecutionPolicy: 'Test string',
            outputVariables: {
              names: ['Test string'],
            },
            position: {
              x: 42,
              y: 42,
            },
            properties: {
              A: 'Test string',
            },
            startTasks: [
              {
                condition: 'Test string',
                description: 'Test string',
                displayName: 'Test string',
                taskConfigId: 'Test string',
                taskId: 'Test string',
              },
            ],
            trigger: 'Test string',
            triggerId: 'Test string',
            triggerNumber: 'Test string',
            triggerType: 'Test string',
          },
        ],
        triggerConfigsInternal: [
          {
            alertConfig: [
              {
                aggregationPeriod: 'Test string',
                alertDisabled: true,
                alertName: 'Test string',
                clientId: 'Test string',
                durationThresholdMs: 'Test string',
                errorEnumList: {
                  enumStrings: ['Test string'],
                  filterType: 'Test string',
                },
                metricType: 'Test string',
                numAggregationPeriods: 42,
                onlyFinalAttempt: true,
                playbookUrl: 'Test string',
                thresholdType: 'Test string',
                thresholdValue: {
                  absolute: 'Test string',
                  percentage: 42,
                },
                warningEnumList: {
                  enumStrings: ['Test string'],
                  filterType: 'Test string',
                },
              },
            ],
            cloudSchedulerConfig: {
              cronTab: 'Test string',
              errorMessage: 'Test string',
              location: 'Test string',
              serviceAccountEmail: 'Test string',
            },
            description: 'Test string',
            enabledClients: ['Test string'],
            errorCatcherId: 'Test string',
            inputVariables: {
              names: ['Test string'],
            },
            label: 'Test string',
            nextTasksExecutionPolicy: 'Test string',
            outputVariables: {
              names: ['Test string'],
            },
            pauseWorkflowExecutions: true,
            position: {
              x: 42,
              y: 42,
            },
            properties: {
              A: 'Test string',
            },
            startTasks: [
              {
                combinedConditions: [
                  {
                    conditions: [
                      {
                        eventPropertyKey: 'Test string',
                        operator: 'Test string',
                        value: {
                          booleanValue: true,
                          doubleArray: {
                            values: [42],
                          },
                          doubleValue: 42,
                          intArray: {
                            values: ['Test string'],
                          },
                          intValue: 'Test string',
                          protoValue: {
                            A: 42,
                          },
                          stringArray: {
                            values: ['Test string'],
                          },
                          stringValue: 'Test string',
                        },
                      },
                    ],
                  },
                ],
                condition: 'Test string',
                description: 'Test string',
                label: 'Test string',
                taskConfigId: 'Test string',
                taskNumber: 'Test string',
              },
            ],
            triggerCriteria: {
              condition: 'Test string',
              parameters: {
                parameters: [
                  {
                    key: 'Test string',
                    masked: true,
                    value: {
                      booleanArray: {
                        booleanValues: [true],
                      },
                      booleanValue: true,
                      doubleArray: {
                        doubleValues: [42],
                      },
                      doubleValue: 42,
                      intArray: {
                        intValues: ['Test string'],
                      },
                      intValue: 'Test string',
                      protoArray: {
                        protoValues: [
                          {
                            A: 42,
                          },
                        ],
                      },
                      protoValue: {
                        A: 42,
                      },
                      serializedObjectValue: {
                        objectValue: 'Test string',
                      },
                      stringArray: {
                        stringValues: ['Test string'],
                      },
                      stringValue: 'Test string',
                    },
                  },
                ],
              },
              triggerCriteriaTaskImplementationClassName: 'Test string',
            },
            triggerId: 'Test string',
            triggerName: 'Test string',
            triggerNumber: 'Test string',
            triggerType: 'Test string',
          },
        ],
        updateTime: 'Test string',
        userLabel: 'Test string',
      },
    );
    /** This RPC throws an exception if the integration is in ARCHIVED or ACTIVE state. This RPC throws an exception if the version being published is DRAFT, and if the `locked_by` user is not the same as the user performing the Publish. Audit fields updated include last_published_timestamp, last_published_by, last_modified_timestamp, last_modified_by. Any existing lock is on this integration is released. */
    await gapi.client.integrations.projects.locations.integrations.versions.publish(
      {
        name: 'Test string',
      },
      {
        configParameters: {
          A: 42,
        },
      },
    );
    /** Sets the status of the ACTIVE integration to SNAPSHOT with a new tag "PREVIOUSLY_PUBLISHED" after validating it. The "HEAD" and "PUBLISH_REQUESTED" tags do not change. This RPC throws an exception if the version being snapshot is not ACTIVE. Audit fields added include action, action_by, action_timestamp. */
    await gapi.client.integrations.projects.locations.integrations.versions.unpublish(
      {
        name: 'Test string',
      },
      {},
    );
    /** Uploads an integration. The content can be a previously downloaded integration. Performs the same function as CreateDraftIntegrationVersion, but accepts input in a string format, which holds the complete representation of the IntegrationVersion content. */
    await gapi.client.integrations.projects.locations.integrations.versions.upload(
      {
        parent: 'Test string',
      },
      {
        content: 'Test string',
        fileFormat: 'Test string',
      },
    );
    /** Creates a new test case */
    await gapi.client.integrations.projects.locations.integrations.versions.testCases.create(
      {
        parent: 'Test string',
        testCaseId: 'Test string',
      },
      {
        createTime: 'Test string',
        creatorEmail: 'Test string',
        databasePersistencePolicy: 'Test string',
        description: 'Test string',
        displayName: 'Test string',
        lastModifierEmail: 'Test string',
        lockHolderEmail: 'Test string',
        name: 'Test string',
        testInputParameters: [
          {
            containsLargeData: true,
            dataType: 'Test string',
            defaultValue: {
              booleanArray: {
                booleanValues: [true],
              },
              booleanValue: true,
              doubleArray: {
                doubleValues: [42],
              },
              doubleValue: 42,
              intArray: {
                intValues: ['Test string'],
              },
              intValue: 'Test string',
              jsonValue: 'Test string',
              stringArray: {
                stringValues: ['Test string'],
              },
              stringValue: 'Test string',
            },
            description: 'Test string',
            displayName: 'Test string',
            inputOutputType: 'Test string',
            isTransient: true,
            jsonSchema: 'Test string',
            key: 'Test string',
            masked: true,
            producer: 'Test string',
            searchable: true,
          },
        ],
        testTaskConfigs: [
          {
            assertions: [
              {
                assertionStrategy: 'Test string',
                condition: 'Test string',
                parameter: {
                  key: 'Test string',
                  masked: true,
                  value: {
                    booleanArray: {
                      booleanValues: [true],
                    },
                    booleanValue: true,
                    doubleArray: {
                      doubleValues: [42],
                    },
                    doubleValue: 42,
                    intArray: {
                      intValues: ['Test string'],
                    },
                    intValue: 'Test string',
                    jsonValue: 'Test string',
                    stringArray: {
                      stringValues: ['Test string'],
                    },
                    stringValue: 'Test string',
                  },
                },
                retryCount: 42,
              },
            ],
            mockConfig: {
              failedExecutions: 'Test string',
              mockStrategy: 'Test string',
              parameters: [
                {
                  key: 'Test string',
                  masked: true,
                  value: {
                    booleanArray: {
                      booleanValues: [true],
                    },
                    booleanValue: true,
                    doubleArray: {
                      doubleValues: [42],
                    },
                    doubleValue: 42,
                    intArray: {
                      intValues: ['Test string'],
                    },
                    intValue: 'Test string',
                    jsonValue: 'Test string',
                    stringArray: {
                      stringValues: ['Test string'],
                    },
                    stringValue: 'Test string',
                  },
                },
              ],
            },
            task: 'Test string',
            taskConfig: {
              conditionalFailurePolicies: {
                defaultFailurePolicy: {
                  condition: 'Test string',
                  intervalTime: 'Test string',
                  maxRetries: 42,
                  retryStrategy: 'Test string',
                },
                failurePolicies: [
                  {
                    condition: 'Test string',
                    intervalTime: 'Test string',
                    maxRetries: 42,
                    retryStrategy: 'Test string',
                  },
                ],
              },
              description: 'Test string',
              displayName: 'Test string',
              errorCatcherId: 'Test string',
              externalTaskType: 'Test string',
              failurePolicy: {
                condition: 'Test string',
                intervalTime: 'Test string',
                maxRetries: 42,
                retryStrategy: 'Test string',
              },
              jsonValidationOption: 'Test string',
              nextTasks: [
                {
                  condition: 'Test string',
                  description: 'Test string',
                  displayName: 'Test string',
                  taskConfigId: 'Test string',
                  taskId: 'Test string',
                },
              ],
              nextTasksExecutionPolicy: 'Test string',
              parameters: {
                A: {
                  key: 'Test string',
                  masked: true,
                  value: {
                    booleanArray: {
                      booleanValues: [true],
                    },
                    booleanValue: true,
                    doubleArray: {
                      doubleValues: [42],
                    },
                    doubleValue: 42,
                    intArray: {
                      intValues: ['Test string'],
                    },
                    intValue: 'Test string',
                    jsonValue: 'Test string',
                    stringArray: {
                      stringValues: ['Test string'],
                    },
                    stringValue: 'Test string',
                  },
                },
              },
              position: {
                x: 42,
                y: 42,
              },
              successPolicy: {
                finalState: 'Test string',
              },
              synchronousCallFailurePolicy: {
                condition: 'Test string',
                intervalTime: 'Test string',
                maxRetries: 42,
                retryStrategy: 'Test string',
              },
              task: 'Test string',
              taskExecutionStrategy: 'Test string',
              taskId: 'Test string',
              taskTemplate: 'Test string',
            },
            taskNumber: 'Test string',
          },
        ],
        triggerConfig: {
          alertConfig: [
            {
              aggregationPeriod: 'Test string',
              alertThreshold: 42,
              disableAlert: true,
              displayName: 'Test string',
              durationThreshold: 'Test string',
              metricType: 'Test string',
              onlyFinalAttempt: true,
              thresholdType: 'Test string',
              thresholdValue: {
                absolute: 'Test string',
                percentage: 42,
              },
            },
          ],
          cloudSchedulerConfig: {
            cronTab: 'Test string',
            errorMessage: 'Test string',
            location: 'Test string',
            serviceAccountEmail: 'Test string',
          },
          description: 'Test string',
          errorCatcherId: 'Test string',
          inputVariables: {
            names: ['Test string'],
          },
          label: 'Test string',
          nextTasksExecutionPolicy: 'Test string',
          outputVariables: {
            names: ['Test string'],
          },
          position: {
            x: 42,
            y: 42,
          },
          properties: {
            A: 'Test string',
          },
          startTasks: [
            {
              condition: 'Test string',
              description: 'Test string',
              displayName: 'Test string',
              taskConfigId: 'Test string',
              taskId: 'Test string',
            },
          ],
          trigger: 'Test string',
          triggerId: 'Test string',
          triggerNumber: 'Test string',
          triggerType: 'Test string',
        },
        triggerId: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Deletes a test case */
    await gapi.client.integrations.projects.locations.integrations.versions.testCases.delete(
      {
        name: 'Test string',
      },
    );
    /** Downloads a test case. Retrieves the `TestCase` for a given `test_case_id` and returns the response as a string. */
    await gapi.client.integrations.projects.locations.integrations.versions.testCases.download(
      {
        fileFormat: 'Test string',
        name: 'Test string',
      },
    );
    /** Executes all test cases in an integration version. */
    await gapi.client.integrations.projects.locations.integrations.versions.testCases.execute(
      {
        parent: 'Test string',
      },
      {},
    );
    /** Executes functional test */
    await gapi.client.integrations.projects.locations.integrations.versions.testCases.executeTest(
      {
        testCaseName: 'Test string',
      },
      {
        inputParameters: {
          A: {
            booleanArray: {
              booleanValues: [true],
            },
            booleanValue: true,
            doubleArray: {
              doubleValues: [42],
            },
            doubleValue: 42,
            intArray: {
              intValues: ['Test string'],
            },
            intValue: 'Test string',
            jsonValue: 'Test string',
            stringArray: {
              stringValues: ['Test string'],
            },
            stringValue: 'Test string',
          },
        },
      },
    );
    /** Get a test case */
    await gapi.client.integrations.projects.locations.integrations.versions.testCases.get(
      {
        name: 'Test string',
      },
    );
    /** Lists all the test cases that satisfy the filters. */
    await gapi.client.integrations.projects.locations.integrations.versions.testCases.list(
      {
        filter: 'Test string',
        orderBy: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
        readMask: 'Test string',
      },
    );
    /** Updates a test case */
    await gapi.client.integrations.projects.locations.integrations.versions.testCases.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        createTime: 'Test string',
        creatorEmail: 'Test string',
        databasePersistencePolicy: 'Test string',
        description: 'Test string',
        displayName: 'Test string',
        lastModifierEmail: 'Test string',
        lockHolderEmail: 'Test string',
        name: 'Test string',
        testInputParameters: [
          {
            containsLargeData: true,
            dataType: 'Test string',
            defaultValue: {
              booleanArray: {
                booleanValues: [true],
              },
              booleanValue: true,
              doubleArray: {
                doubleValues: [42],
              },
              doubleValue: 42,
              intArray: {
                intValues: ['Test string'],
              },
              intValue: 'Test string',
              jsonValue: 'Test string',
              stringArray: {
                stringValues: ['Test string'],
              },
              stringValue: 'Test string',
            },
            description: 'Test string',
            displayName: 'Test string',
            inputOutputType: 'Test string',
            isTransient: true,
            jsonSchema: 'Test string',
            key: 'Test string',
            masked: true,
            producer: 'Test string',
            searchable: true,
          },
        ],
        testTaskConfigs: [
          {
            assertions: [
              {
                assertionStrategy: 'Test string',
                condition: 'Test string',
                parameter: {
                  key: 'Test string',
                  masked: true,
                  value: {
                    booleanArray: {
                      booleanValues: [true],
                    },
                    booleanValue: true,
                    doubleArray: {
                      doubleValues: [42],
                    },
                    doubleValue: 42,
                    intArray: {
                      intValues: ['Test string'],
                    },
                    intValue: 'Test string',
                    jsonValue: 'Test string',
                    stringArray: {
                      stringValues: ['Test string'],
                    },
                    stringValue: 'Test string',
                  },
                },
                retryCount: 42,
              },
            ],
            mockConfig: {
              failedExecutions: 'Test string',
              mockStrategy: 'Test string',
              parameters: [
                {
                  key: 'Test string',
                  masked: true,
                  value: {
                    booleanArray: {
                      booleanValues: [true],
                    },
                    booleanValue: true,
                    doubleArray: {
                      doubleValues: [42],
                    },
                    doubleValue: 42,
                    intArray: {
                      intValues: ['Test string'],
                    },
                    intValue: 'Test string',
                    jsonValue: 'Test string',
                    stringArray: {
                      stringValues: ['Test string'],
                    },
                    stringValue: 'Test string',
                  },
                },
              ],
            },
            task: 'Test string',
            taskConfig: {
              conditionalFailurePolicies: {
                defaultFailurePolicy: {
                  condition: 'Test string',
                  intervalTime: 'Test string',
                  maxRetries: 42,
                  retryStrategy: 'Test string',
                },
                failurePolicies: [
                  {
                    condition: 'Test string',
                    intervalTime: 'Test string',
                    maxRetries: 42,
                    retryStrategy: 'Test string',
                  },
                ],
              },
              description: 'Test string',
              displayName: 'Test string',
              errorCatcherId: 'Test string',
              externalTaskType: 'Test string',
              failurePolicy: {
                condition: 'Test string',
                intervalTime: 'Test string',
                maxRetries: 42,
                retryStrategy: 'Test string',
              },
              jsonValidationOption: 'Test string',
              nextTasks: [
                {
                  condition: 'Test string',
                  description: 'Test string',
                  displayName: 'Test string',
                  taskConfigId: 'Test string',
                  taskId: 'Test string',
                },
              ],
              nextTasksExecutionPolicy: 'Test string',
              parameters: {
                A: {
                  key: 'Test string',
                  masked: true,
                  value: {
                    booleanArray: {
                      booleanValues: [true],
                    },
                    booleanValue: true,
                    doubleArray: {
                      doubleValues: [42],
                    },
                    doubleValue: 42,
                    intArray: {
                      intValues: ['Test string'],
                    },
                    intValue: 'Test string',
                    jsonValue: 'Test string',
                    stringArray: {
                      stringValues: ['Test string'],
                    },
                    stringValue: 'Test string',
                  },
                },
              },
              position: {
                x: 42,
                y: 42,
              },
              successPolicy: {
                finalState: 'Test string',
              },
              synchronousCallFailurePolicy: {
                condition: 'Test string',
                intervalTime: 'Test string',
                maxRetries: 42,
                retryStrategy: 'Test string',
              },
              task: 'Test string',
              taskExecutionStrategy: 'Test string',
              taskId: 'Test string',
              taskTemplate: 'Test string',
            },
            taskNumber: 'Test string',
          },
        ],
        triggerConfig: {
          alertConfig: [
            {
              aggregationPeriod: 'Test string',
              alertThreshold: 42,
              disableAlert: true,
              displayName: 'Test string',
              durationThreshold: 'Test string',
              metricType: 'Test string',
              onlyFinalAttempt: true,
              thresholdType: 'Test string',
              thresholdValue: {
                absolute: 'Test string',
                percentage: 42,
              },
            },
          ],
          cloudSchedulerConfig: {
            cronTab: 'Test string',
            errorMessage: 'Test string',
            location: 'Test string',
            serviceAccountEmail: 'Test string',
          },
          description: 'Test string',
          errorCatcherId: 'Test string',
          inputVariables: {
            names: ['Test string'],
          },
          label: 'Test string',
          nextTasksExecutionPolicy: 'Test string',
          outputVariables: {
            names: ['Test string'],
          },
          position: {
            x: 42,
            y: 42,
          },
          properties: {
            A: 'Test string',
          },
          startTasks: [
            {
              condition: 'Test string',
              description: 'Test string',
              displayName: 'Test string',
              taskConfigId: 'Test string',
              taskId: 'Test string',
            },
          ],
          trigger: 'Test string',
          triggerId: 'Test string',
          triggerNumber: 'Test string',
          triggerType: 'Test string',
        },
        triggerId: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Clear the lock fields and assign them to current user */
    await gapi.client.integrations.projects.locations.integrations.versions.testCases.takeoverEditLock(
      {
        name: 'Test string',
      },
      {},
    );
    /** Uploads a test case. The content can be a previously downloaded test case. Performs the same function as CreateTestCase, but accepts input in a string format, which holds the complete representation of the TestCase content. */
    await gapi.client.integrations.projects.locations.integrations.versions.testCases.upload(
      {
        parent: 'Test string',
      },
      {
        content: 'Test string',
        fileFormat: 'Test string',
      },
    );
    /** Creates an auth config record. Fetch corresponding credentials for specific auth types, e.g. access token for OAuth 2.0, JWT token for JWT. Encrypt the auth config with Cloud KMS and store the encrypted credentials in Spanner. Returns the encrypted auth config. */
    await gapi.client.integrations.projects.locations.products.authConfigs.create(
      {
        'clientCertificate.encryptedPrivateKey': 'Test string',
        'clientCertificate.passphrase': 'Test string',
        'clientCertificate.sslCertificate': 'Test string',
        parent: 'Test string',
      },
      {
        certificateId: 'Test string',
        createTime: 'Test string',
        creatorEmail: 'Test string',
        credentialType: 'Test string',
        decryptedCredential: {
          authToken: {
            token: 'Test string',
            type: 'Test string',
          },
          credentialType: 'Test string',
          jwt: {
            jwt: 'Test string',
            jwtHeader: 'Test string',
            jwtPayload: 'Test string',
            secret: 'Test string',
          },
          oauth2AuthorizationCode: {
            accessToken: {
              accessToken: 'Test string',
              accessTokenExpireTime: 'Test string',
              refreshToken: 'Test string',
              refreshTokenExpireTime: 'Test string',
              tokenType: 'Test string',
            },
            applyReauthPolicy: true,
            authCode: 'Test string',
            authEndpoint: 'Test string',
            authParams: {
              entries: [
                {
                  key: {
                    literalValue: {
                      booleanArray: {
                        booleanValues: [true],
                      },
                      booleanValue: true,
                      doubleArray: {
                        doubleValues: [42],
                      },
                      doubleValue: 42,
                      intArray: {
                        intValues: ['Test string'],
                      },
                      intValue: 'Test string',
                      jsonValue: 'Test string',
                      stringArray: {
                        stringValues: ['Test string'],
                      },
                      stringValue: 'Test string',
                    },
                    referenceKey: 'Test string',
                  },
                  value: {
                    literalValue: {
                      booleanArray: {
                        booleanValues: [true],
                      },
                      booleanValue: true,
                      doubleArray: {
                        doubleValues: [42],
                      },
                      doubleValue: 42,
                      intArray: {
                        intValues: ['Test string'],
                      },
                      intValue: 'Test string',
                      jsonValue: 'Test string',
                      stringArray: {
                        stringValues: ['Test string'],
                      },
                      stringValue: 'Test string',
                    },
                    referenceKey: 'Test string',
                  },
                },
              ],
              keyType: 'Test string',
              valueType: 'Test string',
            },
            clientId: 'Test string',
            clientSecret: 'Test string',
            requestType: 'Test string',
            scope: 'Test string',
            tokenEndpoint: 'Test string',
            tokenParams: {
              entries: [
                {
                  key: {
                    literalValue: {
                      booleanArray: {
                        booleanValues: [true],
                      },
                      booleanValue: true,
                      doubleArray: {
                        doubleValues: [42],
                      },
                      doubleValue: 42,
                      intArray: {
                        intValues: ['Test string'],
                      },
                      intValue: 'Test string',
                      jsonValue: 'Test string',
                      stringArray: {
                        stringValues: ['Test string'],
                      },
                      stringValue: 'Test string',
                    },
                    referenceKey: 'Test string',
                  },
                  value: {
                    literalValue: {
                      booleanArray: {
                        booleanValues: [true],
                      },
                      booleanValue: true,
                      doubleArray: {
                        doubleValues: [42],
                      },
                      doubleValue: 42,
                      intArray: {
                        intValues: ['Test string'],
                      },
                      intValue: 'Test string',
                      jsonValue: 'Test string',
                      stringArray: {
                        stringValues: ['Test string'],
                      },
                      stringValue: 'Test string',
                    },
                    referenceKey: 'Test string',
                  },
                },
              ],
              keyType: 'Test string',
              valueType: 'Test string',
            },
          },
          oauth2ClientCredentials: {
            accessToken: {
              accessToken: 'Test string',
              accessTokenExpireTime: 'Test string',
              refreshToken: 'Test string',
              refreshTokenExpireTime: 'Test string',
              tokenType: 'Test string',
            },
            clientId: 'Test string',
            clientSecret: 'Test string',
            requestType: 'Test string',
            scope: 'Test string',
            tokenEndpoint: 'Test string',
            tokenParams: {
              entries: [
                {
                  key: {
                    literalValue: {
                      booleanArray: {
                        booleanValues: [true],
                      },
                      booleanValue: true,
                      doubleArray: {
                        doubleValues: [42],
                      },
                      doubleValue: 42,
                      intArray: {
                        intValues: ['Test string'],
                      },
                      intValue: 'Test string',
                      jsonValue: 'Test string',
                      stringArray: {
                        stringValues: ['Test string'],
                      },
                      stringValue: 'Test string',
                    },
                    referenceKey: 'Test string',
                  },
                  value: {
                    literalValue: {
                      booleanArray: {
                        booleanValues: [true],
                      },
                      booleanValue: true,
                      doubleArray: {
                        doubleValues: [42],
                      },
                      doubleValue: 42,
                      intArray: {
                        intValues: ['Test string'],
                      },
                      intValue: 'Test string',
                      jsonValue: 'Test string',
                      stringArray: {
                        stringValues: ['Test string'],
                      },
                      stringValue: 'Test string',
                    },
                    referenceKey: 'Test string',
                  },
                },
              ],
              keyType: 'Test string',
              valueType: 'Test string',
            },
          },
          oauth2ResourceOwnerCredentials: {
            accessToken: {
              accessToken: 'Test string',
              accessTokenExpireTime: 'Test string',
              refreshToken: 'Test string',
              refreshTokenExpireTime: 'Test string',
              tokenType: 'Test string',
            },
            clientId: 'Test string',
            clientSecret: 'Test string',
            password: 'Test string',
            requestType: 'Test string',
            scope: 'Test string',
            tokenEndpoint: 'Test string',
            tokenParams: {
              entries: [
                {
                  key: {
                    literalValue: {
                      booleanArray: {
                        booleanValues: [true],
                      },
                      booleanValue: true,
                      doubleArray: {
                        doubleValues: [42],
                      },
                      doubleValue: 42,
                      intArray: {
                        intValues: ['Test string'],
                      },
                      intValue: 'Test string',
                      jsonValue: 'Test string',
                      stringArray: {
                        stringValues: ['Test string'],
                      },
                      stringValue: 'Test string',
                    },
                    referenceKey: 'Test string',
                  },
                  value: {
                    literalValue: {
                      booleanArray: {
                        booleanValues: [true],
                      },
                      booleanValue: true,
                      doubleArray: {
                        doubleValues: [42],
                      },
                      doubleValue: 42,
                      intArray: {
                        intValues: ['Test string'],
                      },
                      intValue: 'Test string',
                      jsonValue: 'Test string',
                      stringArray: {
                        stringValues: ['Test string'],
                      },
                      stringValue: 'Test string',
                    },
                    referenceKey: 'Test string',
                  },
                },
              ],
              keyType: 'Test string',
              valueType: 'Test string',
            },
            username: 'Test string',
          },
          oidcToken: {
            audience: 'Test string',
            serviceAccountEmail: 'Test string',
            token: 'Test string',
            tokenExpireTime: 'Test string',
          },
          serviceAccountCredentials: {
            scope: 'Test string',
            serviceAccount: 'Test string',
          },
          usernameAndPassword: {
            password: 'Test string',
            username: 'Test string',
          },
        },
        description: 'Test string',
        displayName: 'Test string',
        encryptedCredential: 'Test string',
        expiryNotificationDuration: ['Test string'],
        lastModifierEmail: 'Test string',
        name: 'Test string',
        overrideValidTime: 'Test string',
        reason: 'Test string',
        state: 'Test string',
        updateTime: 'Test string',
        validTime: 'Test string',
        visibility: 'Test string',
      },
    );
    /** Deletes an auth config. */
    await gapi.client.integrations.projects.locations.products.authConfigs.delete(
      {
        name: 'Test string',
      },
    );
    /** Gets a complete auth config. If the auth config doesn't exist, Code.NOT_FOUND exception will be thrown. Returns the decrypted auth config. */
    await gapi.client.integrations.projects.locations.products.authConfigs.get({
      name: 'Test string',
    });
    /** Lists all auth configs that match the filter. Restrict to auth configs belong to the current client only. */
    await gapi.client.integrations.projects.locations.products.authConfigs.list(
      {
        filter: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
        readMask: 'Test string',
      },
    );
    /** Updates an auth config. If credential is updated, fetch the encrypted auth config from Spanner, decrypt with Cloud KMS key, update the credential fields, re-encrypt with Cloud KMS key and update the Spanner record. For other fields, directly update the Spanner record. Returns the encrypted auth config. */
    await gapi.client.integrations.projects.locations.products.authConfigs.patch(
      {
        'clientCertificate.encryptedPrivateKey': 'Test string',
        'clientCertificate.passphrase': 'Test string',
        'clientCertificate.sslCertificate': 'Test string',
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        certificateId: 'Test string',
        createTime: 'Test string',
        creatorEmail: 'Test string',
        credentialType: 'Test string',
        decryptedCredential: {
          authToken: {
            token: 'Test string',
            type: 'Test string',
          },
          credentialType: 'Test string',
          jwt: {
            jwt: 'Test string',
            jwtHeader: 'Test string',
            jwtPayload: 'Test string',
            secret: 'Test string',
          },
          oauth2AuthorizationCode: {
            accessToken: {
              accessToken: 'Test string',
              accessTokenExpireTime: 'Test string',
              refreshToken: 'Test string',
              refreshTokenExpireTime: 'Test string',
              tokenType: 'Test string',
            },
            applyReauthPolicy: true,
            authCode: 'Test string',
            authEndpoint: 'Test string',
            authParams: {
              entries: [
                {
                  key: {
                    literalValue: {
                      booleanArray: {
                        booleanValues: [true],
                      },
                      booleanValue: true,
                      doubleArray: {
                        doubleValues: [42],
                      },
                      doubleValue: 42,
                      intArray: {
                        intValues: ['Test string'],
                      },
                      intValue: 'Test string',
                      jsonValue: 'Test string',
                      stringArray: {
                        stringValues: ['Test string'],
                      },
                      stringValue: 'Test string',
                    },
                    referenceKey: 'Test string',
                  },
                  value: {
                    literalValue: {
                      booleanArray: {
                        booleanValues: [true],
                      },
                      booleanValue: true,
                      doubleArray: {
                        doubleValues: [42],
                      },
                      doubleValue: 42,
                      intArray: {
                        intValues: ['Test string'],
                      },
                      intValue: 'Test string',
                      jsonValue: 'Test string',
                      stringArray: {
                        stringValues: ['Test string'],
                      },
                      stringValue: 'Test string',
                    },
                    referenceKey: 'Test string',
                  },
                },
              ],
              keyType: 'Test string',
              valueType: 'Test string',
            },
            clientId: 'Test string',
            clientSecret: 'Test string',
            requestType: 'Test string',
            scope: 'Test string',
            tokenEndpoint: 'Test string',
            tokenParams: {
              entries: [
                {
                  key: {
                    literalValue: {
                      booleanArray: {
                        booleanValues: [true],
                      },
                      booleanValue: true,
                      doubleArray: {
                        doubleValues: [42],
                      },
                      doubleValue: 42,
                      intArray: {
                        intValues: ['Test string'],
                      },
                      intValue: 'Test string',
                      jsonValue: 'Test string',
                      stringArray: {
                        stringValues: ['Test string'],
                      },
                      stringValue: 'Test string',
                    },
                    referenceKey: 'Test string',
                  },
                  value: {
                    literalValue: {
                      booleanArray: {
                        booleanValues: [true],
                      },
                      booleanValue: true,
                      doubleArray: {
                        doubleValues: [42],
                      },
                      doubleValue: 42,
                      intArray: {
                        intValues: ['Test string'],
                      },
                      intValue: 'Test string',
                      jsonValue: 'Test string',
                      stringArray: {
                        stringValues: ['Test string'],
                      },
                      stringValue: 'Test string',
                    },
                    referenceKey: 'Test string',
                  },
                },
              ],
              keyType: 'Test string',
              valueType: 'Test string',
            },
          },
          oauth2ClientCredentials: {
            accessToken: {
              accessToken: 'Test string',
              accessTokenExpireTime: 'Test string',
              refreshToken: 'Test string',
              refreshTokenExpireTime: 'Test string',
              tokenType: 'Test string',
            },
            clientId: 'Test string',
            clientSecret: 'Test string',
            requestType: 'Test string',
            scope: 'Test string',
            tokenEndpoint: 'Test string',
            tokenParams: {
              entries: [
                {
                  key: {
                    literalValue: {
                      booleanArray: {
                        booleanValues: [true],
                      },
                      booleanValue: true,
                      doubleArray: {
                        doubleValues: [42],
                      },
                      doubleValue: 42,
                      intArray: {
                        intValues: ['Test string'],
                      },
                      intValue: 'Test string',
                      jsonValue: 'Test string',
                      stringArray: {
                        stringValues: ['Test string'],
                      },
                      stringValue: 'Test string',
                    },
                    referenceKey: 'Test string',
                  },
                  value: {
                    literalValue: {
                      booleanArray: {
                        booleanValues: [true],
                      },
                      booleanValue: true,
                      doubleArray: {
                        doubleValues: [42],
                      },
                      doubleValue: 42,
                      intArray: {
                        intValues: ['Test string'],
                      },
                      intValue: 'Test string',
                      jsonValue: 'Test string',
                      stringArray: {
                        stringValues: ['Test string'],
                      },
                      stringValue: 'Test string',
                    },
                    referenceKey: 'Test string',
                  },
                },
              ],
              keyType: 'Test string',
              valueType: 'Test string',
            },
          },
          oauth2ResourceOwnerCredentials: {
            accessToken: {
              accessToken: 'Test string',
              accessTokenExpireTime: 'Test string',
              refreshToken: 'Test string',
              refreshTokenExpireTime: 'Test string',
              tokenType: 'Test string',
            },
            clientId: 'Test string',
            clientSecret: 'Test string',
            password: 'Test string',
            requestType: 'Test string',
            scope: 'Test string',
            tokenEndpoint: 'Test string',
            tokenParams: {
              entries: [
                {
                  key: {
                    literalValue: {
                      booleanArray: {
                        booleanValues: [true],
                      },
                      booleanValue: true,
                      doubleArray: {
                        doubleValues: [42],
                      },
                      doubleValue: 42,
                      intArray: {
                        intValues: ['Test string'],
                      },
                      intValue: 'Test string',
                      jsonValue: 'Test string',
                      stringArray: {
                        stringValues: ['Test string'],
                      },
                      stringValue: 'Test string',
                    },
                    referenceKey: 'Test string',
                  },
                  value: {
                    literalValue: {
                      booleanArray: {
                        booleanValues: [true],
                      },
                      booleanValue: true,
                      doubleArray: {
                        doubleValues: [42],
                      },
                      doubleValue: 42,
                      intArray: {
                        intValues: ['Test string'],
                      },
                      intValue: 'Test string',
                      jsonValue: 'Test string',
                      stringArray: {
                        stringValues: ['Test string'],
                      },
                      stringValue: 'Test string',
                    },
                    referenceKey: 'Test string',
                  },
                },
              ],
              keyType: 'Test string',
              valueType: 'Test string',
            },
            username: 'Test string',
          },
          oidcToken: {
            audience: 'Test string',
            serviceAccountEmail: 'Test string',
            token: 'Test string',
            tokenExpireTime: 'Test string',
          },
          serviceAccountCredentials: {
            scope: 'Test string',
            serviceAccount: 'Test string',
          },
          usernameAndPassword: {
            password: 'Test string',
            username: 'Test string',
          },
        },
        description: 'Test string',
        displayName: 'Test string',
        encryptedCredential: 'Test string',
        expiryNotificationDuration: ['Test string'],
        lastModifierEmail: 'Test string',
        name: 'Test string',
        overrideValidTime: 'Test string',
        reason: 'Test string',
        state: 'Test string',
        updateTime: 'Test string',
        validTime: 'Test string',
        visibility: 'Test string',
      },
    );
    /** Creates a new certificate. The certificate will be registered to the trawler service and will be encrypted using cloud KMS and stored in Spanner Returns the certificate. */
    await gapi.client.integrations.projects.locations.products.certificates.create(
      {
        parent: 'Test string',
      },
      {
        certificateStatus: 'Test string',
        credentialId: 'Test string',
        description: 'Test string',
        displayName: 'Test string',
        name: 'Test string',
        rawCertificate: {
          encryptedPrivateKey: 'Test string',
          passphrase: 'Test string',
          sslCertificate: 'Test string',
        },
        requestorId: 'Test string',
        validEndTime: 'Test string',
        validStartTime: 'Test string',
      },
    );
    /** Delete a certificate */
    await gapi.client.integrations.projects.locations.products.certificates.delete(
      {
        name: 'Test string',
      },
    );
    /** Get a certificates in the specified project. */
    await gapi.client.integrations.projects.locations.products.certificates.get(
      {
        name: 'Test string',
      },
    );
    /** List all the certificates that match the filter. Restrict to certificate of current client only. */
    await gapi.client.integrations.projects.locations.products.certificates.list(
      {
        filter: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
        readMask: 'Test string',
      },
    );
    /** Updates the certificate by id. If new certificate file is updated, it will register with the trawler service, re-encrypt with cloud KMS and update the Spanner record. Other fields will directly update the Spanner record. Returns the Certificate. */
    await gapi.client.integrations.projects.locations.products.certificates.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        certificateStatus: 'Test string',
        credentialId: 'Test string',
        description: 'Test string',
        displayName: 'Test string',
        name: 'Test string',
        rawCertificate: {
          encryptedPrivateKey: 'Test string',
          passphrase: 'Test string',
          sslCertificate: 'Test string',
        },
        requestorId: 'Test string',
        validEndTime: 'Test string',
        validStartTime: 'Test string',
      },
    );
    /** Creates a cloud function project. */
    await gapi.client.integrations.projects.locations.products.cloudFunctions.create(
      {
        parent: 'Test string',
      },
      {
        functionName: 'Test string',
        functionRegion: 'Test string',
        gcfApiVersion: 'Test string',
        projectId: 'Test string',
      },
    );
    /** Executes integrations synchronously by passing the trigger id in the request body. The request is not returned until the requested executions are either fulfilled or experienced an error. If the integration name is not specified (passing `-`), all of the associated integration under the given trigger_id will be executed. Otherwise only the specified integration for the given `trigger_id` is executed. This is helpful for execution the integration from UI. */
    await gapi.client.integrations.projects.locations.products.integrations.execute(
      {
        name: 'Test string',
      },
      {
        doNotPropagateError: true,
        executionId: 'Test string',
        inputParameters: {
          A: {
            booleanArray: {
              booleanValues: [true],
            },
            booleanValue: true,
            doubleArray: {
              doubleValues: [42],
            },
            doubleValue: 42,
            intArray: {
              intValues: ['Test string'],
            },
            intValue: 'Test string',
            jsonValue: 'Test string',
            stringArray: {
              stringValues: ['Test string'],
            },
            stringValue: 'Test string',
          },
        },
        parameterEntries: [
          {
            dataType: 'Test string',
            key: 'Test string',
            masked: true,
            value: {
              booleanArray: {
                booleanValues: [true],
              },
              booleanValue: true,
              doubleArray: {
                doubleValues: [42],
              },
              doubleValue: 42,
              intArray: {
                intValues: ['Test string'],
              },
              intValue: 'Test string',
              jsonValue: 'Test string',
              protoArray: {
                protoValues: [
                  {
                    A: 42,
                  },
                ],
              },
              protoValue: {
                A: 42,
              },
              serializedObjectValue: {
                objectValue: 'Test string',
              },
              stringArray: {
                stringValues: ['Test string'],
              },
              stringValue: 'Test string',
            },
          },
        ],
        parameters: {
          parameters: [
            {
              dataType: 'Test string',
              key: 'Test string',
              masked: true,
              value: {
                booleanArray: {
                  booleanValues: [true],
                },
                booleanValue: true,
                doubleArray: {
                  doubleValues: [42],
                },
                doubleValue: 42,
                intArray: {
                  intValues: ['Test string'],
                },
                intValue: 'Test string',
                jsonValue: 'Test string',
                protoArray: {
                  protoValues: [
                    {
                      A: 42,
                    },
                  ],
                },
                protoValue: {
                  A: 42,
                },
                serializedObjectValue: {
                  objectValue: 'Test string',
                },
                stringArray: {
                  stringValues: ['Test string'],
                },
                stringValue: 'Test string',
              },
            },
          ],
        },
        requestId: 'Test string',
        triggerId: 'Test string',
      },
    );
    /** Returns the list of all integrations in the specified project. */
    await gapi.client.integrations.projects.locations.products.integrations.list(
      {
        filter: 'Test string',
        orderBy: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
    /** Schedules an integration for execution by passing the trigger id and the scheduled time in the request body. */
    await gapi.client.integrations.projects.locations.products.integrations.schedule(
      {
        name: 'Test string',
      },
      {
        inputParameters: {
          A: {
            booleanArray: {
              booleanValues: [true],
            },
            booleanValue: true,
            doubleArray: {
              doubleValues: [42],
            },
            doubleValue: 42,
            intArray: {
              intValues: ['Test string'],
            },
            intValue: 'Test string',
            jsonValue: 'Test string',
            stringArray: {
              stringValues: ['Test string'],
            },
            stringValue: 'Test string',
          },
        },
        parameterEntries: [
          {
            dataType: 'Test string',
            key: 'Test string',
            masked: true,
            value: {
              booleanArray: {
                booleanValues: [true],
              },
              booleanValue: true,
              doubleArray: {
                doubleValues: [42],
              },
              doubleValue: 42,
              intArray: {
                intValues: ['Test string'],
              },
              intValue: 'Test string',
              jsonValue: 'Test string',
              protoArray: {
                protoValues: [
                  {
                    A: 42,
                  },
                ],
              },
              protoValue: {
                A: 42,
              },
              serializedObjectValue: {
                objectValue: 'Test string',
              },
              stringArray: {
                stringValues: ['Test string'],
              },
              stringValue: 'Test string',
            },
          },
        ],
        parameters: {
          parameters: [
            {
              key: 'Test string',
              masked: true,
              value: {
                booleanArray: {
                  booleanValues: [true],
                },
                booleanValue: true,
                doubleArray: {
                  doubleValues: [42],
                },
                doubleValue: 42,
                intArray: {
                  intValues: ['Test string'],
                },
                intValue: 'Test string',
                protoArray: {
                  protoValues: [
                    {
                      A: 42,
                    },
                  ],
                },
                protoValue: {
                  A: 42,
                },
                serializedObjectValue: {
                  objectValue: 'Test string',
                },
                stringArray: {
                  stringValues: ['Test string'],
                },
                stringValue: 'Test string',
              },
            },
          ],
        },
        requestId: 'Test string',
        scheduleTime: 'Test string',
        triggerId: 'Test string',
        userGeneratedExecutionId: 'Test string',
      },
    );
    /** Execute the integration in draft state */
    await gapi.client.integrations.projects.locations.products.integrations.test(
      {
        name: 'Test string',
      },
      {
        clientId: 'Test string',
        configParameters: {
          A: 42,
        },
        deadlineSecondsTime: 'Test string',
        inputParameters: {
          A: {
            booleanArray: {
              booleanValues: [true],
            },
            booleanValue: true,
            doubleArray: {
              doubleValues: [42],
            },
            doubleValue: 42,
            intArray: {
              intValues: ['Test string'],
            },
            intValue: 'Test string',
            jsonValue: 'Test string',
            stringArray: {
              stringValues: ['Test string'],
            },
            stringValue: 'Test string',
          },
        },
        integrationVersion: {
          cloudKmsKey: 'Test string',
          cloudLoggingDetails: {
            cloudLoggingSeverity: 'Test string',
            enableCloudLogging: true,
          },
          createdFromTemplate: 'Test string',
          createTime: 'Test string',
          databasePersistencePolicy: 'Test string',
          description: 'Test string',
          enableVariableMasking: true,
          errorCatcherConfigs: [
            {
              description: 'Test string',
              errorCatcherId: 'Test string',
              errorCatcherNumber: 'Test string',
              label: 'Test string',
              position: {
                x: 42,
                y: 42,
              },
              startErrorTasks: [
                {
                  condition: 'Test string',
                  description: 'Test string',
                  displayName: 'Test string',
                  taskConfigId: 'Test string',
                  taskId: 'Test string',
                },
              ],
            },
          ],
          integrationConfigParameters: [
            {
              parameter: {
                containsLargeData: true,
                dataType: 'Test string',
                defaultValue: {
                  booleanArray: {
                    booleanValues: [true],
                  },
                  booleanValue: true,
                  doubleArray: {
                    doubleValues: [42],
                  },
                  doubleValue: 42,
                  intArray: {
                    intValues: ['Test string'],
                  },
                  intValue: 'Test string',
                  jsonValue: 'Test string',
                  stringArray: {
                    stringValues: ['Test string'],
                  },
                  stringValue: 'Test string',
                },
                description: 'Test string',
                displayName: 'Test string',
                inputOutputType: 'Test string',
                isTransient: true,
                jsonSchema: 'Test string',
                key: 'Test string',
                masked: true,
                producer: 'Test string',
                searchable: true,
              },
              value: {
                booleanArray: {
                  booleanValues: [true],
                },
                booleanValue: true,
                doubleArray: {
                  doubleValues: [42],
                },
                doubleValue: 42,
                intArray: {
                  intValues: ['Test string'],
                },
                intValue: 'Test string',
                jsonValue: 'Test string',
                stringArray: {
                  stringValues: ['Test string'],
                },
                stringValue: 'Test string',
              },
            },
          ],
          integrationParameters: [
            {
              containsLargeData: true,
              dataType: 'Test string',
              defaultValue: {
                booleanArray: {
                  booleanValues: [true],
                },
                booleanValue: true,
                doubleArray: {
                  doubleValues: [42],
                },
                doubleValue: 42,
                intArray: {
                  intValues: ['Test string'],
                },
                intValue: 'Test string',
                jsonValue: 'Test string',
                stringArray: {
                  stringValues: ['Test string'],
                },
                stringValue: 'Test string',
              },
              description: 'Test string',
              displayName: 'Test string',
              inputOutputType: 'Test string',
              isTransient: true,
              jsonSchema: 'Test string',
              key: 'Test string',
              masked: true,
              producer: 'Test string',
              searchable: true,
            },
          ],
          integrationParametersInternal: {
            parameters: [
              {
                attributes: {
                  dataType: 'Test string',
                  defaultValue: {
                    booleanValue: true,
                    doubleArray: {
                      values: [42],
                    },
                    doubleValue: 42,
                    intArray: {
                      values: ['Test string'],
                    },
                    intValue: 'Test string',
                    protoValue: {
                      A: 42,
                    },
                    stringArray: {
                      values: ['Test string'],
                    },
                    stringValue: 'Test string',
                  },
                  isRequired: true,
                  isSearchable: true,
                  logSettings: {
                    logFieldName: 'Test string',
                    seedPeriod: 'Test string',
                    seedScope: 'Test string',
                  },
                  masked: true,
                  readOnly: true,
                  searchable: 'Test string',
                  taskVisibility: ['Test string'],
                },
                children: undefined,
                containsLargeData: true,
                dataType: 'Test string',
                defaultValue: {
                  booleanArray: {
                    booleanValues: [true],
                  },
                  booleanValue: true,
                  doubleArray: {
                    doubleValues: [42],
                  },
                  doubleValue: 42,
                  intArray: {
                    intValues: ['Test string'],
                  },
                  intValue: 'Test string',
                  jsonValue: 'Test string',
                  protoArray: {
                    protoValues: [
                      {
                        A: 42,
                      },
                    ],
                  },
                  protoValue: {
                    A: 42,
                  },
                  serializedObjectValue: {
                    objectValue: 'Test string',
                  },
                  stringArray: {
                    stringValues: ['Test string'],
                  },
                  stringValue: 'Test string',
                },
                description: 'Test string',
                inOutType: 'Test string',
                isTransient: true,
                jsonSchema: 'Test string',
                key: 'Test string',
                name: 'Test string',
                producedBy: {
                  elementIdentifier: 'Test string',
                  elementType: 'Test string',
                },
                producer: 'Test string',
                protoDefName: 'Test string',
                protoDefPath: 'Test string',
                required: true,
              },
            ],
          },
          lastModifierEmail: 'Test string',
          lockHolder: 'Test string',
          name: 'Test string',
          origin: 'Test string',
          parentTemplateId: 'Test string',
          runAsServiceAccount: 'Test string',
          snapshotNumber: 'Test string',
          state: 'Test string',
          status: 'Test string',
          taskConfigs: [
            {
              conditionalFailurePolicies: {
                defaultFailurePolicy: {
                  condition: 'Test string',
                  intervalTime: 'Test string',
                  maxRetries: 42,
                  retryStrategy: 'Test string',
                },
                failurePolicies: [
                  {
                    condition: 'Test string',
                    intervalTime: 'Test string',
                    maxRetries: 42,
                    retryStrategy: 'Test string',
                  },
                ],
              },
              description: 'Test string',
              displayName: 'Test string',
              errorCatcherId: 'Test string',
              externalTaskType: 'Test string',
              failurePolicy: {
                condition: 'Test string',
                intervalTime: 'Test string',
                maxRetries: 42,
                retryStrategy: 'Test string',
              },
              jsonValidationOption: 'Test string',
              nextTasks: [
                {
                  condition: 'Test string',
                  description: 'Test string',
                  displayName: 'Test string',
                  taskConfigId: 'Test string',
                  taskId: 'Test string',
                },
              ],
              nextTasksExecutionPolicy: 'Test string',
              parameters: {
                A: {
                  key: 'Test string',
                  masked: true,
                  value: {
                    booleanArray: {
                      booleanValues: [true],
                    },
                    booleanValue: true,
                    doubleArray: {
                      doubleValues: [42],
                    },
                    doubleValue: 42,
                    intArray: {
                      intValues: ['Test string'],
                    },
                    intValue: 'Test string',
                    jsonValue: 'Test string',
                    stringArray: {
                      stringValues: ['Test string'],
                    },
                    stringValue: 'Test string',
                  },
                },
              },
              position: {
                x: 42,
                y: 42,
              },
              successPolicy: {
                finalState: 'Test string',
              },
              synchronousCallFailurePolicy: {
                condition: 'Test string',
                intervalTime: 'Test string',
                maxRetries: 42,
                retryStrategy: 'Test string',
              },
              task: 'Test string',
              taskExecutionStrategy: 'Test string',
              taskId: 'Test string',
              taskTemplate: 'Test string',
            },
          ],
          taskConfigsInternal: [
            {
              alertConfigs: [
                {
                  aggregationPeriod: 'Test string',
                  alertDisabled: true,
                  alertName: 'Test string',
                  clientId: 'Test string',
                  durationThresholdMs: 'Test string',
                  errorEnumList: {
                    enumStrings: ['Test string'],
                    filterType: 'Test string',
                  },
                  metricType: 'Test string',
                  numAggregationPeriods: 42,
                  onlyFinalAttempt: true,
                  playbookUrl: 'Test string',
                  thresholdType: 'Test string',
                  thresholdValue: {
                    absolute: 'Test string',
                    percentage: 42,
                  },
                  warningEnumList: {
                    enumStrings: ['Test string'],
                    filterType: 'Test string',
                  },
                },
              ],
              conditionalFailurePolicies: {
                defaultFailurePolicy: {
                  intervalInSeconds: 'Test string',
                  maxNumRetries: 42,
                  retryCondition: 'Test string',
                  retryStrategy: 'Test string',
                },
                failurePolicies: [
                  {
                    intervalInSeconds: 'Test string',
                    maxNumRetries: 42,
                    retryCondition: 'Test string',
                    retryStrategy: 'Test string',
                  },
                ],
              },
              createTime: 'Test string',
              creatorEmail: 'Test string',
              description: 'Test string',
              disableStrictTypeValidation: true,
              errorCatcherId: 'Test string',
              externalTaskType: 'Test string',
              failurePolicy: {
                intervalInSeconds: 'Test string',
                maxNumRetries: 42,
                retryCondition: 'Test string',
                retryStrategy: 'Test string',
              },
              incomingEdgeCount: 42,
              jsonValidationOption: 'Test string',
              label: 'Test string',
              lastModifiedTime: 'Test string',
              nextTasks: [
                {
                  combinedConditions: [
                    {
                      conditions: [
                        {
                          eventPropertyKey: 'Test string',
                          operator: 'Test string',
                          value: {
                            booleanValue: true,
                            doubleArray: {
                              values: [42],
                            },
                            doubleValue: 42,
                            intArray: {
                              values: ['Test string'],
                            },
                            intValue: 'Test string',
                            protoValue: {
                              A: 42,
                            },
                            stringArray: {
                              values: ['Test string'],
                            },
                            stringValue: 'Test string',
                          },
                        },
                      ],
                    },
                  ],
                  condition: 'Test string',
                  description: 'Test string',
                  label: 'Test string',
                  taskConfigId: 'Test string',
                  taskNumber: 'Test string',
                },
              ],
              nextTasksExecutionPolicy: 'Test string',
              parameters: {
                A: {
                  dataType: 'Test string',
                  key: 'Test string',
                  masked: true,
                  value: {
                    booleanArray: {
                      booleanValues: [true],
                    },
                    booleanValue: true,
                    doubleArray: {
                      doubleValues: [42],
                    },
                    doubleValue: 42,
                    intArray: {
                      intValues: ['Test string'],
                    },
                    intValue: 'Test string',
                    jsonValue: 'Test string',
                    protoArray: {
                      protoValues: [
                        {
                          A: 42,
                        },
                      ],
                    },
                    protoValue: {
                      A: 42,
                    },
                    serializedObjectValue: {
                      objectValue: 'Test string',
                    },
                    stringArray: {
                      stringValues: ['Test string'],
                    },
                    stringValue: 'Test string',
                  },
                },
              },
              position: {
                x: 42,
                y: 42,
              },
              precondition: 'Test string',
              preconditionLabel: 'Test string',
              rollbackStrategy: {
                parameters: {
                  parameters: [
                    {
                      dataType: 'Test string',
                      key: 'Test string',
                      masked: true,
                      value: {
                        booleanArray: {
                          booleanValues: [true],
                        },
                        booleanValue: true,
                        doubleArray: {
                          doubleValues: [42],
                        },
                        doubleValue: 42,
                        intArray: {
                          intValues: ['Test string'],
                        },
                        intValue: 'Test string',
                        jsonValue: 'Test string',
                        protoArray: {
                          protoValues: [
                            {
                              A: 42,
                            },
                          ],
                        },
                        protoValue: {
                          A: 42,
                        },
                        serializedObjectValue: {
                          objectValue: 'Test string',
                        },
                        stringArray: {
                          stringValues: ['Test string'],
                        },
                        stringValue: 'Test string',
                      },
                    },
                  ],
                },
                rollbackTaskImplementationClassName: 'Test string',
                taskNumbersToRollback: ['Test string'],
              },
              successPolicy: {
                finalState: 'Test string',
              },
              synchronousCallFailurePolicy: {
                intervalInSeconds: 'Test string',
                maxNumRetries: 42,
                retryCondition: 'Test string',
                retryStrategy: 'Test string',
              },
              taskEntity: {
                disabledForVpcSc: true,
                metadata: {
                  activeTaskName: 'Test string',
                  admins: [
                    {
                      googleGroupEmail: 'Test string',
                      userEmail: 'Test string',
                    },
                  ],
                  category: 'Test string',
                  codeSearchLink: 'Test string',
                  defaultJsonValidationOption: 'Test string',
                  defaultSpec: 'Test string',
                  description: 'Test string',
                  descriptiveName: 'Test string',
                  docMarkdown: 'Test string',
                  externalCategory: 'Test string',
                  externalCategorySequence: 42,
                  externalDocHtml: 'Test string',
                  externalDocLink: 'Test string',
                  externalDocMarkdown: 'Test string',
                  g3DocLink: 'Test string',
                  iconLink: 'Test string',
                  isDeprecated: true,
                  name: 'Test string',
                  standaloneExternalDocHtml: 'Test string',
                  status: 'Test string',
                  system: 'Test string',
                  tags: ['Test string'],
                },
                paramSpecs: {
                  parameters: [
                    {
                      className: 'Test string',
                      collectionElementClassName: 'Test string',
                      config: {
                        descriptivePhrase: 'Test string',
                        helpText: 'Test string',
                        hideDefaultValue: true,
                        inputDisplayOption: 'Test string',
                        isHidden: true,
                        label: 'Test string',
                        parameterNameOption: 'Test string',
                        subSectionLabel: 'Test string',
                        uiPlaceholderText: 'Test string',
                      },
                      dataType: 'Test string',
                      defaultValue: {
                        booleanArray: {
                          booleanValues: [true],
                        },
                        booleanValue: true,
                        doubleArray: {
                          doubleValues: [42],
                        },
                        doubleValue: 42,
                        intArray: {
                          intValues: ['Test string'],
                        },
                        intValue: 'Test string',
                        jsonValue: 'Test string',
                        protoArray: {
                          protoValues: [
                            {
                              A: 42,
                            },
                          ],
                        },
                        protoValue: {
                          A: 42,
                        },
                        serializedObjectValue: {
                          objectValue: 'Test string',
                        },
                        stringArray: {
                          stringValues: ['Test string'],
                        },
                        stringValue: 'Test string',
                      },
                      isDeprecated: true,
                      isOutput: true,
                      jsonSchema: 'Test string',
                      key: 'Test string',
                      protoDef: {
                        fullName: 'Test string',
                        path: 'Test string',
                      },
                      required: true,
                      validationRule: {
                        doubleRange: {
                          max: 42,
                          min: 42,
                        },
                        intRange: {
                          max: 'Test string',
                          min: 'Test string',
                        },
                        stringRegex: {
                          exclusive: true,
                          regex: 'Test string',
                        },
                      },
                    },
                  ],
                },
                stats: {
                  dimensions: {
                    clientId: 'Test string',
                    enumFilterType: 'Test string',
                    errorEnumString: 'Test string',
                    retryAttempt: 'Test string',
                    taskName: 'Test string',
                    taskNumber: 'Test string',
                    triggerId: 'Test string',
                    warningEnumString: 'Test string',
                    workflowId: 'Test string',
                    workflowName: 'Test string',
                  },
                  durationInSeconds: 42,
                  errorRate: 42,
                  qps: 42,
                  warningRate: 42,
                },
                taskType: 'Test string',
                uiConfig: {
                  taskUiModuleConfigs: [
                    {
                      moduleId: 'Test string',
                    },
                  ],
                },
              },
              taskExecutionStrategy: 'Test string',
              taskName: 'Test string',
              taskNumber: 'Test string',
              taskSpec: 'Test string',
              taskTemplateName: 'Test string',
              taskType: 'Test string',
            },
          ],
          teardown: {
            teardownTaskConfigs: [
              {
                creatorEmail: 'Test string',
                name: 'Test string',
                nextTeardownTask: {
                  name: 'Test string',
                },
                parameters: {
                  parameters: [
                    {
                      key: 'Test string',
                      masked: true,
                      value: {
                        booleanArray: {
                          booleanValues: [true],
                        },
                        booleanValue: true,
                        doubleArray: {
                          doubleValues: [42],
                        },
                        doubleValue: 42,
                        intArray: {
                          intValues: ['Test string'],
                        },
                        intValue: 'Test string',
                        protoArray: {
                          protoValues: [
                            {
                              A: 42,
                            },
                          ],
                        },
                        protoValue: {
                          A: 42,
                        },
                        serializedObjectValue: {
                          objectValue: 'Test string',
                        },
                        stringArray: {
                          stringValues: ['Test string'],
                        },
                        stringValue: 'Test string',
                      },
                    },
                  ],
                },
                properties: {
                  properties: [
                    {
                      key: 'Test string',
                      value: {
                        booleanValue: true,
                        doubleArray: {
                          values: [42],
                        },
                        doubleValue: 42,
                        intArray: {
                          values: ['Test string'],
                        },
                        intValue: 'Test string',
                        protoValue: {
                          A: 42,
                        },
                        stringArray: {
                          values: ['Test string'],
                        },
                        stringValue: 'Test string',
                      },
                    },
                  ],
                },
                teardownTaskImplementationClassName: 'Test string',
              },
            ],
          },
          triggerConfigs: [
            {
              alertConfig: [
                {
                  aggregationPeriod: 'Test string',
                  alertThreshold: 42,
                  disableAlert: true,
                  displayName: 'Test string',
                  durationThreshold: 'Test string',
                  metricType: 'Test string',
                  onlyFinalAttempt: true,
                  thresholdType: 'Test string',
                  thresholdValue: {
                    absolute: 'Test string',
                    percentage: 42,
                  },
                },
              ],
              cloudSchedulerConfig: {
                cronTab: 'Test string',
                errorMessage: 'Test string',
                location: 'Test string',
                serviceAccountEmail: 'Test string',
              },
              description: 'Test string',
              errorCatcherId: 'Test string',
              inputVariables: {
                names: ['Test string'],
              },
              label: 'Test string',
              nextTasksExecutionPolicy: 'Test string',
              outputVariables: {
                names: ['Test string'],
              },
              position: {
                x: 42,
                y: 42,
              },
              properties: {
                A: 'Test string',
              },
              startTasks: [
                {
                  condition: 'Test string',
                  description: 'Test string',
                  displayName: 'Test string',
                  taskConfigId: 'Test string',
                  taskId: 'Test string',
                },
              ],
              trigger: 'Test string',
              triggerId: 'Test string',
              triggerNumber: 'Test string',
              triggerType: 'Test string',
            },
          ],
          triggerConfigsInternal: [
            {
              alertConfig: [
                {
                  aggregationPeriod: 'Test string',
                  alertDisabled: true,
                  alertName: 'Test string',
                  clientId: 'Test string',
                  durationThresholdMs: 'Test string',
                  errorEnumList: {
                    enumStrings: ['Test string'],
                    filterType: 'Test string',
                  },
                  metricType: 'Test string',
                  numAggregationPeriods: 42,
                  onlyFinalAttempt: true,
                  playbookUrl: 'Test string',
                  thresholdType: 'Test string',
                  thresholdValue: {
                    absolute: 'Test string',
                    percentage: 42,
                  },
                  warningEnumList: {
                    enumStrings: ['Test string'],
                    filterType: 'Test string',
                  },
                },
              ],
              cloudSchedulerConfig: {
                cronTab: 'Test string',
                errorMessage: 'Test string',
                location: 'Test string',
                serviceAccountEmail: 'Test string',
              },
              description: 'Test string',
              enabledClients: ['Test string'],
              errorCatcherId: 'Test string',
              inputVariables: {
                names: ['Test string'],
              },
              label: 'Test string',
              nextTasksExecutionPolicy: 'Test string',
              outputVariables: {
                names: ['Test string'],
              },
              pauseWorkflowExecutions: true,
              position: {
                x: 42,
                y: 42,
              },
              properties: {
                A: 'Test string',
              },
              startTasks: [
                {
                  combinedConditions: [
                    {
                      conditions: [
                        {
                          eventPropertyKey: 'Test string',
                          operator: 'Test string',
                          value: {
                            booleanValue: true,
                            doubleArray: {
                              values: [42],
                            },
                            doubleValue: 42,
                            intArray: {
                              values: ['Test string'],
                            },
                            intValue: 'Test string',
                            protoValue: {
                              A: 42,
                            },
                            stringArray: {
                              values: ['Test string'],
                            },
                            stringValue: 'Test string',
                          },
                        },
                      ],
                    },
                  ],
                  condition: 'Test string',
                  description: 'Test string',
                  label: 'Test string',
                  taskConfigId: 'Test string',
                  taskNumber: 'Test string',
                },
              ],
              triggerCriteria: {
                condition: 'Test string',
                parameters: {
                  parameters: [
                    {
                      key: 'Test string',
                      masked: true,
                      value: {
                        booleanArray: {
                          booleanValues: [true],
                        },
                        booleanValue: true,
                        doubleArray: {
                          doubleValues: [42],
                        },
                        doubleValue: 42,
                        intArray: {
                          intValues: ['Test string'],
                        },
                        intValue: 'Test string',
                        protoArray: {
                          protoValues: [
                            {
                              A: 42,
                            },
                          ],
                        },
                        protoValue: {
                          A: 42,
                        },
                        serializedObjectValue: {
                          objectValue: 'Test string',
                        },
                        stringArray: {
                          stringValues: ['Test string'],
                        },
                        stringValue: 'Test string',
                      },
                    },
                  ],
                },
                triggerCriteriaTaskImplementationClassName: 'Test string',
              },
              triggerId: 'Test string',
              triggerName: 'Test string',
              triggerNumber: 'Test string',
              triggerType: 'Test string',
            },
          ],
          updateTime: 'Test string',
          userLabel: 'Test string',
        },
        parameters: {
          parameters: [
            {
              dataType: 'Test string',
              key: 'Test string',
              masked: true,
              value: {
                booleanArray: {
                  booleanValues: [true],
                },
                booleanValue: true,
                doubleArray: {
                  doubleValues: [42],
                },
                doubleValue: 42,
                intArray: {
                  intValues: ['Test string'],
                },
                intValue: 'Test string',
                jsonValue: 'Test string',
                protoArray: {
                  protoValues: [
                    {
                      A: 42,
                    },
                  ],
                },
                protoValue: {
                  A: 42,
                },
                serializedObjectValue: {
                  objectValue: 'Test string',
                },
                stringArray: {
                  stringValues: ['Test string'],
                },
                stringValue: 'Test string',
              },
            },
          ],
        },
        testMode: true,
        triggerId: 'Test string',
      },
    );
    /** Download the execution. */
    await gapi.client.integrations.projects.locations.products.integrations.executions.download(
      {
        name: 'Test string',
      },
    );
    /** Get an execution in the specified project. */
    await gapi.client.integrations.projects.locations.products.integrations.executions.get(
      {
        name: 'Test string',
      },
    );
    /** Lists the results of all the integration executions. The response includes the same information as the [execution log](https://cloud.google.com/application-integration/docs/viewing-logs) in the Integration UI. */
    await gapi.client.integrations.projects.locations.products.integrations.executions.list(
      {
        filter: 'Test string',
        'filterParams.customFilter': 'Test string',
        'filterParams.endTime': 'Test string',
        'filterParams.eventStatuses': 'Test string',
        'filterParams.executionId': 'Test string',
        'filterParams.parameterKey': 'Test string',
        'filterParams.parameterPairKey': 'Test string',
        'filterParams.parameterPairValue': 'Test string',
        'filterParams.parameterType': 'Test string',
        'filterParams.parameterValue': 'Test string',
        'filterParams.startTime': 'Test string',
        'filterParams.taskStatuses': 'Test string',
        'filterParams.workflowName': 'Test string',
        orderBy: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
        readMask: 'Test string',
        refreshAcl: true,
        snapshotMetadataWithoutParams: true,
        truncateParams: true,
      },
    );
    /** * Lifts suspension for the Suspension task. Fetch corresponding suspension with provided suspension Id, resolve suspension, and set up suspension result for the Suspension Task. */
    await gapi.client.integrations.projects.locations.products.integrations.executions.suspensions.lift(
      {
        name: 'Test string',
      },
      {
        suspensionResult: 'Test string',
      },
    );
    /** * Lists suspensions associated with a specific execution. Only those with permissions to resolve the relevant suspensions will be able to view them. */
    await gapi.client.integrations.projects.locations.products.integrations.executions.suspensions.list(
      {
        filter: 'Test string',
        orderBy: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
    /** * Resolves (lifts/rejects) any number of suspensions. If the integration is already running, only the status of the suspension is updated. Otherwise, the suspended integration will begin execution again. */
    await gapi.client.integrations.projects.locations.products.integrations.executions.suspensions.resolve(
      {
        name: 'Test string',
      },
      {
        suspension: {
          approvalConfig: {
            customMessage: 'Test string',
            emailAddresses: ['Test string'],
            expiration: {
              expireTime: 'Test string',
              liftWhenExpired: true,
              remindTime: 'Test string',
            },
          },
          audit: {
            resolver: 'Test string',
            resolveTime: 'Test string',
          },
          createTime: 'Test string',
          eventExecutionInfoId: 'Test string',
          integration: 'Test string',
          lastModifyTime: 'Test string',
          name: 'Test string',
          state: 'Test string',
          suspensionConfig: {
            customMessage: 'Test string',
            notifications: [
              {
                buganizerNotification: {
                  assigneeEmailAddress: 'Test string',
                  componentId: 'Test string',
                  templateId: 'Test string',
                  title: 'Test string',
                },
                emailAddress: {
                  email: 'Test string',
                  name: 'Test string',
                  tokens: [
                    {
                      name: 'Test string',
                      value: 'Test string',
                    },
                  ],
                },
                escalatorQueue: 'Test string',
                pubsubTopic: 'Test string',
                request: {
                  postToQueueWithTriggerIdRequest: {
                    clientId: 'Test string',
                    ignoreErrorIfNoActiveWorkflow: true,
                    parameters: {
                      parameters: [
                        {
                          key: 'Test string',
                          masked: true,
                          value: {
                            booleanArray: {
                              booleanValues: [true],
                            },
                            booleanValue: true,
                            doubleArray: {
                              doubleValues: [42],
                            },
                            doubleValue: 42,
                            intArray: {
                              intValues: ['Test string'],
                            },
                            intValue: 'Test string',
                            protoArray: {
                              protoValues: [
                                {
                                  A: 42,
                                },
                              ],
                            },
                            protoValue: {
                              A: 42,
                            },
                            serializedObjectValue: {
                              objectValue: 'Test string',
                            },
                            stringArray: {
                              stringValues: ['Test string'],
                            },
                            stringValue: 'Test string',
                          },
                        },
                      ],
                    },
                    priority: 'Test string',
                    quotaRetryCount: 42,
                    requestId: 'Test string',
                    resourceName: 'Test string',
                    scheduledTime: 'Test string',
                    testMode: true,
                    triggerId: 'Test string',
                    userGeneratedExecutionId: 'Test string',
                    workflowName: 'Test string',
                  },
                  suspensionInfoEventParameterKey: 'Test string',
                },
              },
            ],
            suspensionExpiration: {
              expireAfterMs: 42,
              liftWhenExpired: true,
              remindAfterMs: 42,
            },
            whoMayResolve: [
              {
                gaiaIdentity: {
                  emailAddress: 'Test string',
                  gaiaId: 'Test string',
                },
                googleGroup: {
                  emailAddress: 'Test string',
                  gaiaId: 'Test string',
                },
                loasRole: 'Test string',
                mdbGroup: 'Test string',
              },
            ],
          },
          taskId: 'Test string',
        },
      },
    );
    /** Create a integration with a draft version in the specified project. */
    await gapi.client.integrations.projects.locations.products.integrations.versions.create(
      {
        createSampleIntegrations: true,
        newIntegration: true,
        parent: 'Test string',
      },
      {
        cloudKmsKey: 'Test string',
        cloudLoggingDetails: {
          cloudLoggingSeverity: 'Test string',
          enableCloudLogging: true,
        },
        createdFromTemplate: 'Test string',
        createTime: 'Test string',
        databasePersistencePolicy: 'Test string',
        description: 'Test string',
        enableVariableMasking: true,
        errorCatcherConfigs: [
          {
            description: 'Test string',
            errorCatcherId: 'Test string',
            errorCatcherNumber: 'Test string',
            label: 'Test string',
            position: {
              x: 42,
              y: 42,
            },
            startErrorTasks: [
              {
                condition: 'Test string',
                description: 'Test string',
                displayName: 'Test string',
                taskConfigId: 'Test string',
                taskId: 'Test string',
              },
            ],
          },
        ],
        integrationConfigParameters: [
          {
            parameter: {
              containsLargeData: true,
              dataType: 'Test string',
              defaultValue: {
                booleanArray: {
                  booleanValues: [true],
                },
                booleanValue: true,
                doubleArray: {
                  doubleValues: [42],
                },
                doubleValue: 42,
                intArray: {
                  intValues: ['Test string'],
                },
                intValue: 'Test string',
                jsonValue: 'Test string',
                stringArray: {
                  stringValues: ['Test string'],
                },
                stringValue: 'Test string',
              },
              description: 'Test string',
              displayName: 'Test string',
              inputOutputType: 'Test string',
              isTransient: true,
              jsonSchema: 'Test string',
              key: 'Test string',
              masked: true,
              producer: 'Test string',
              searchable: true,
            },
            value: {
              booleanArray: {
                booleanValues: [true],
              },
              booleanValue: true,
              doubleArray: {
                doubleValues: [42],
              },
              doubleValue: 42,
              intArray: {
                intValues: ['Test string'],
              },
              intValue: 'Test string',
              jsonValue: 'Test string',
              stringArray: {
                stringValues: ['Test string'],
              },
              stringValue: 'Test string',
            },
          },
        ],
        integrationParameters: [
          {
            containsLargeData: true,
            dataType: 'Test string',
            defaultValue: {
              booleanArray: {
                booleanValues: [true],
              },
              booleanValue: true,
              doubleArray: {
                doubleValues: [42],
              },
              doubleValue: 42,
              intArray: {
                intValues: ['Test string'],
              },
              intValue: 'Test string',
              jsonValue: 'Test string',
              stringArray: {
                stringValues: ['Test string'],
              },
              stringValue: 'Test string',
            },
            description: 'Test string',
            displayName: 'Test string',
            inputOutputType: 'Test string',
            isTransient: true,
            jsonSchema: 'Test string',
            key: 'Test string',
            masked: true,
            producer: 'Test string',
            searchable: true,
          },
        ],
        integrationParametersInternal: {
          parameters: [
            {
              attributes: {
                dataType: 'Test string',
                defaultValue: {
                  booleanValue: true,
                  doubleArray: {
                    values: [42],
                  },
                  doubleValue: 42,
                  intArray: {
                    values: ['Test string'],
                  },
                  intValue: 'Test string',
                  protoValue: {
                    A: 42,
                  },
                  stringArray: {
                    values: ['Test string'],
                  },
                  stringValue: 'Test string',
                },
                isRequired: true,
                isSearchable: true,
                logSettings: {
                  logFieldName: 'Test string',
                  seedPeriod: 'Test string',
                  seedScope: 'Test string',
                },
                masked: true,
                readOnly: true,
                searchable: 'Test string',
                taskVisibility: ['Test string'],
              },
              children: undefined,
              containsLargeData: true,
              dataType: 'Test string',
              defaultValue: {
                booleanArray: {
                  booleanValues: [true],
                },
                booleanValue: true,
                doubleArray: {
                  doubleValues: [42],
                },
                doubleValue: 42,
                intArray: {
                  intValues: ['Test string'],
                },
                intValue: 'Test string',
                jsonValue: 'Test string',
                protoArray: {
                  protoValues: [
                    {
                      A: 42,
                    },
                  ],
                },
                protoValue: {
                  A: 42,
                },
                serializedObjectValue: {
                  objectValue: 'Test string',
                },
                stringArray: {
                  stringValues: ['Test string'],
                },
                stringValue: 'Test string',
              },
              description: 'Test string',
              inOutType: 'Test string',
              isTransient: true,
              jsonSchema: 'Test string',
              key: 'Test string',
              name: 'Test string',
              producedBy: {
                elementIdentifier: 'Test string',
                elementType: 'Test string',
              },
              producer: 'Test string',
              protoDefName: 'Test string',
              protoDefPath: 'Test string',
              required: true,
            },
          ],
        },
        lastModifierEmail: 'Test string',
        lockHolder: 'Test string',
        name: 'Test string',
        origin: 'Test string',
        parentTemplateId: 'Test string',
        runAsServiceAccount: 'Test string',
        snapshotNumber: 'Test string',
        state: 'Test string',
        status: 'Test string',
        taskConfigs: [
          {
            conditionalFailurePolicies: {
              defaultFailurePolicy: {
                condition: 'Test string',
                intervalTime: 'Test string',
                maxRetries: 42,
                retryStrategy: 'Test string',
              },
              failurePolicies: [
                {
                  condition: 'Test string',
                  intervalTime: 'Test string',
                  maxRetries: 42,
                  retryStrategy: 'Test string',
                },
              ],
            },
            description: 'Test string',
            displayName: 'Test string',
            errorCatcherId: 'Test string',
            externalTaskType: 'Test string',
            failurePolicy: {
              condition: 'Test string',
              intervalTime: 'Test string',
              maxRetries: 42,
              retryStrategy: 'Test string',
            },
            jsonValidationOption: 'Test string',
            nextTasks: [
              {
                condition: 'Test string',
                description: 'Test string',
                displayName: 'Test string',
                taskConfigId: 'Test string',
                taskId: 'Test string',
              },
            ],
            nextTasksExecutionPolicy: 'Test string',
            parameters: {
              A: {
                key: 'Test string',
                masked: true,
                value: {
                  booleanArray: {
                    booleanValues: [true],
                  },
                  booleanValue: true,
                  doubleArray: {
                    doubleValues: [42],
                  },
                  doubleValue: 42,
                  intArray: {
                    intValues: ['Test string'],
                  },
                  intValue: 'Test string',
                  jsonValue: 'Test string',
                  stringArray: {
                    stringValues: ['Test string'],
                  },
                  stringValue: 'Test string',
                },
              },
            },
            position: {
              x: 42,
              y: 42,
            },
            successPolicy: {
              finalState: 'Test string',
            },
            synchronousCallFailurePolicy: {
              condition: 'Test string',
              intervalTime: 'Test string',
              maxRetries: 42,
              retryStrategy: 'Test string',
            },
            task: 'Test string',
            taskExecutionStrategy: 'Test string',
            taskId: 'Test string',
            taskTemplate: 'Test string',
          },
        ],
        taskConfigsInternal: [
          {
            alertConfigs: [
              {
                aggregationPeriod: 'Test string',
                alertDisabled: true,
                alertName: 'Test string',
                clientId: 'Test string',
                durationThresholdMs: 'Test string',
                errorEnumList: {
                  enumStrings: ['Test string'],
                  filterType: 'Test string',
                },
                metricType: 'Test string',
                numAggregationPeriods: 42,
                onlyFinalAttempt: true,
                playbookUrl: 'Test string',
                thresholdType: 'Test string',
                thresholdValue: {
                  absolute: 'Test string',
                  percentage: 42,
                },
                warningEnumList: {
                  enumStrings: ['Test string'],
                  filterType: 'Test string',
                },
              },
            ],
            conditionalFailurePolicies: {
              defaultFailurePolicy: {
                intervalInSeconds: 'Test string',
                maxNumRetries: 42,
                retryCondition: 'Test string',
                retryStrategy: 'Test string',
              },
              failurePolicies: [
                {
                  intervalInSeconds: 'Test string',
                  maxNumRetries: 42,
                  retryCondition: 'Test string',
                  retryStrategy: 'Test string',
                },
              ],
            },
            createTime: 'Test string',
            creatorEmail: 'Test string',
            description: 'Test string',
            disableStrictTypeValidation: true,
            errorCatcherId: 'Test string',
            externalTaskType: 'Test string',
            failurePolicy: {
              intervalInSeconds: 'Test string',
              maxNumRetries: 42,
              retryCondition: 'Test string',
              retryStrategy: 'Test string',
            },
            incomingEdgeCount: 42,
            jsonValidationOption: 'Test string',
            label: 'Test string',
            lastModifiedTime: 'Test string',
            nextTasks: [
              {
                combinedConditions: [
                  {
                    conditions: [
                      {
                        eventPropertyKey: 'Test string',
                        operator: 'Test string',
                        value: {
                          booleanValue: true,
                          doubleArray: {
                            values: [42],
                          },
                          doubleValue: 42,
                          intArray: {
                            values: ['Test string'],
                          },
                          intValue: 'Test string',
                          protoValue: {
                            A: 42,
                          },
                          stringArray: {
                            values: ['Test string'],
                          },
                          stringValue: 'Test string',
                        },
                      },
                    ],
                  },
                ],
                condition: 'Test string',
                description: 'Test string',
                label: 'Test string',
                taskConfigId: 'Test string',
                taskNumber: 'Test string',
              },
            ],
            nextTasksExecutionPolicy: 'Test string',
            parameters: {
              A: {
                dataType: 'Test string',
                key: 'Test string',
                masked: true,
                value: {
                  booleanArray: {
                    booleanValues: [true],
                  },
                  booleanValue: true,
                  doubleArray: {
                    doubleValues: [42],
                  },
                  doubleValue: 42,
                  intArray: {
                    intValues: ['Test string'],
                  },
                  intValue: 'Test string',
                  jsonValue: 'Test string',
                  protoArray: {
                    protoValues: [
                      {
                        A: 42,
                      },
                    ],
                  },
                  protoValue: {
                    A: 42,
                  },
                  serializedObjectValue: {
                    objectValue: 'Test string',
                  },
                  stringArray: {
                    stringValues: ['Test string'],
                  },
                  stringValue: 'Test string',
                },
              },
            },
            position: {
              x: 42,
              y: 42,
            },
            precondition: 'Test string',
            preconditionLabel: 'Test string',
            rollbackStrategy: {
              parameters: {
                parameters: [
                  {
                    dataType: 'Test string',
                    key: 'Test string',
                    masked: true,
                    value: {
                      booleanArray: {
                        booleanValues: [true],
                      },
                      booleanValue: true,
                      doubleArray: {
                        doubleValues: [42],
                      },
                      doubleValue: 42,
                      intArray: {
                        intValues: ['Test string'],
                      },
                      intValue: 'Test string',
                      jsonValue: 'Test string',
                      protoArray: {
                        protoValues: [
                          {
                            A: 42,
                          },
                        ],
                      },
                      protoValue: {
                        A: 42,
                      },
                      serializedObjectValue: {
                        objectValue: 'Test string',
                      },
                      stringArray: {
                        stringValues: ['Test string'],
                      },
                      stringValue: 'Test string',
                    },
                  },
                ],
              },
              rollbackTaskImplementationClassName: 'Test string',
              taskNumbersToRollback: ['Test string'],
            },
            successPolicy: {
              finalState: 'Test string',
            },
            synchronousCallFailurePolicy: {
              intervalInSeconds: 'Test string',
              maxNumRetries: 42,
              retryCondition: 'Test string',
              retryStrategy: 'Test string',
            },
            taskEntity: {
              disabledForVpcSc: true,
              metadata: {
                activeTaskName: 'Test string',
                admins: [
                  {
                    googleGroupEmail: 'Test string',
                    userEmail: 'Test string',
                  },
                ],
                category: 'Test string',
                codeSearchLink: 'Test string',
                defaultJsonValidationOption: 'Test string',
                defaultSpec: 'Test string',
                description: 'Test string',
                descriptiveName: 'Test string',
                docMarkdown: 'Test string',
                externalCategory: 'Test string',
                externalCategorySequence: 42,
                externalDocHtml: 'Test string',
                externalDocLink: 'Test string',
                externalDocMarkdown: 'Test string',
                g3DocLink: 'Test string',
                iconLink: 'Test string',
                isDeprecated: true,
                name: 'Test string',
                standaloneExternalDocHtml: 'Test string',
                status: 'Test string',
                system: 'Test string',
                tags: ['Test string'],
              },
              paramSpecs: {
                parameters: [
                  {
                    className: 'Test string',
                    collectionElementClassName: 'Test string',
                    config: {
                      descriptivePhrase: 'Test string',
                      helpText: 'Test string',
                      hideDefaultValue: true,
                      inputDisplayOption: 'Test string',
                      isHidden: true,
                      label: 'Test string',
                      parameterNameOption: 'Test string',
                      subSectionLabel: 'Test string',
                      uiPlaceholderText: 'Test string',
                    },
                    dataType: 'Test string',
                    defaultValue: {
                      booleanArray: {
                        booleanValues: [true],
                      },
                      booleanValue: true,
                      doubleArray: {
                        doubleValues: [42],
                      },
                      doubleValue: 42,
                      intArray: {
                        intValues: ['Test string'],
                      },
                      intValue: 'Test string',
                      jsonValue: 'Test string',
                      protoArray: {
                        protoValues: [
                          {
                            A: 42,
                          },
                        ],
                      },
                      protoValue: {
                        A: 42,
                      },
                      serializedObjectValue: {
                        objectValue: 'Test string',
                      },
                      stringArray: {
                        stringValues: ['Test string'],
                      },
                      stringValue: 'Test string',
                    },
                    isDeprecated: true,
                    isOutput: true,
                    jsonSchema: 'Test string',
                    key: 'Test string',
                    protoDef: {
                      fullName: 'Test string',
                      path: 'Test string',
                    },
                    required: true,
                    validationRule: {
                      doubleRange: {
                        max: 42,
                        min: 42,
                      },
                      intRange: {
                        max: 'Test string',
                        min: 'Test string',
                      },
                      stringRegex: {
                        exclusive: true,
                        regex: 'Test string',
                      },
                    },
                  },
                ],
              },
              stats: {
                dimensions: {
                  clientId: 'Test string',
                  enumFilterType: 'Test string',
                  errorEnumString: 'Test string',
                  retryAttempt: 'Test string',
                  taskName: 'Test string',
                  taskNumber: 'Test string',
                  triggerId: 'Test string',
                  warningEnumString: 'Test string',
                  workflowId: 'Test string',
                  workflowName: 'Test string',
                },
                durationInSeconds: 42,
                errorRate: 42,
                qps: 42,
                warningRate: 42,
              },
              taskType: 'Test string',
              uiConfig: {
                taskUiModuleConfigs: [
                  {
                    moduleId: 'Test string',
                  },
                ],
              },
            },
            taskExecutionStrategy: 'Test string',
            taskName: 'Test string',
            taskNumber: 'Test string',
            taskSpec: 'Test string',
            taskTemplateName: 'Test string',
            taskType: 'Test string',
          },
        ],
        teardown: {
          teardownTaskConfigs: [
            {
              creatorEmail: 'Test string',
              name: 'Test string',
              nextTeardownTask: {
                name: 'Test string',
              },
              parameters: {
                parameters: [
                  {
                    key: 'Test string',
                    masked: true,
                    value: {
                      booleanArray: {
                        booleanValues: [true],
                      },
                      booleanValue: true,
                      doubleArray: {
                        doubleValues: [42],
                      },
                      doubleValue: 42,
                      intArray: {
                        intValues: ['Test string'],
                      },
                      intValue: 'Test string',
                      protoArray: {
                        protoValues: [
                          {
                            A: 42,
                          },
                        ],
                      },
                      protoValue: {
                        A: 42,
                      },
                      serializedObjectValue: {
                        objectValue: 'Test string',
                      },
                      stringArray: {
                        stringValues: ['Test string'],
                      },
                      stringValue: 'Test string',
                    },
                  },
                ],
              },
              properties: {
                properties: [
                  {
                    key: 'Test string',
                    value: {
                      booleanValue: true,
                      doubleArray: {
                        values: [42],
                      },
                      doubleValue: 42,
                      intArray: {
                        values: ['Test string'],
                      },
                      intValue: 'Test string',
                      protoValue: {
                        A: 42,
                      },
                      stringArray: {
                        values: ['Test string'],
                      },
                      stringValue: 'Test string',
                    },
                  },
                ],
              },
              teardownTaskImplementationClassName: 'Test string',
            },
          ],
        },
        triggerConfigs: [
          {
            alertConfig: [
              {
                aggregationPeriod: 'Test string',
                alertThreshold: 42,
                disableAlert: true,
                displayName: 'Test string',
                durationThreshold: 'Test string',
                metricType: 'Test string',
                onlyFinalAttempt: true,
                thresholdType: 'Test string',
                thresholdValue: {
                  absolute: 'Test string',
                  percentage: 42,
                },
              },
            ],
            cloudSchedulerConfig: {
              cronTab: 'Test string',
              errorMessage: 'Test string',
              location: 'Test string',
              serviceAccountEmail: 'Test string',
            },
            description: 'Test string',
            errorCatcherId: 'Test string',
            inputVariables: {
              names: ['Test string'],
            },
            label: 'Test string',
            nextTasksExecutionPolicy: 'Test string',
            outputVariables: {
              names: ['Test string'],
            },
            position: {
              x: 42,
              y: 42,
            },
            properties: {
              A: 'Test string',
            },
            startTasks: [
              {
                condition: 'Test string',
                description: 'Test string',
                displayName: 'Test string',
                taskConfigId: 'Test string',
                taskId: 'Test string',
              },
            ],
            trigger: 'Test string',
            triggerId: 'Test string',
            triggerNumber: 'Test string',
            triggerType: 'Test string',
          },
        ],
        triggerConfigsInternal: [
          {
            alertConfig: [
              {
                aggregationPeriod: 'Test string',
                alertDisabled: true,
                alertName: 'Test string',
                clientId: 'Test string',
                durationThresholdMs: 'Test string',
                errorEnumList: {
                  enumStrings: ['Test string'],
                  filterType: 'Test string',
                },
                metricType: 'Test string',
                numAggregationPeriods: 42,
                onlyFinalAttempt: true,
                playbookUrl: 'Test string',
                thresholdType: 'Test string',
                thresholdValue: {
                  absolute: 'Test string',
                  percentage: 42,
                },
                warningEnumList: {
                  enumStrings: ['Test string'],
                  filterType: 'Test string',
                },
              },
            ],
            cloudSchedulerConfig: {
              cronTab: 'Test string',
              errorMessage: 'Test string',
              location: 'Test string',
              serviceAccountEmail: 'Test string',
            },
            description: 'Test string',
            enabledClients: ['Test string'],
            errorCatcherId: 'Test string',
            inputVariables: {
              names: ['Test string'],
            },
            label: 'Test string',
            nextTasksExecutionPolicy: 'Test string',
            outputVariables: {
              names: ['Test string'],
            },
            pauseWorkflowExecutions: true,
            position: {
              x: 42,
              y: 42,
            },
            properties: {
              A: 'Test string',
            },
            startTasks: [
              {
                combinedConditions: [
                  {
                    conditions: [
                      {
                        eventPropertyKey: 'Test string',
                        operator: 'Test string',
                        value: {
                          booleanValue: true,
                          doubleArray: {
                            values: [42],
                          },
                          doubleValue: 42,
                          intArray: {
                            values: ['Test string'],
                          },
                          intValue: 'Test string',
                          protoValue: {
                            A: 42,
                          },
                          stringArray: {
                            values: ['Test string'],
                          },
                          stringValue: 'Test string',
                        },
                      },
                    ],
                  },
                ],
                condition: 'Test string',
                description: 'Test string',
                label: 'Test string',
                taskConfigId: 'Test string',
                taskNumber: 'Test string',
              },
            ],
            triggerCriteria: {
              condition: 'Test string',
              parameters: {
                parameters: [
                  {
                    key: 'Test string',
                    masked: true,
                    value: {
                      booleanArray: {
                        booleanValues: [true],
                      },
                      booleanValue: true,
                      doubleArray: {
                        doubleValues: [42],
                      },
                      doubleValue: 42,
                      intArray: {
                        intValues: ['Test string'],
                      },
                      intValue: 'Test string',
                      protoArray: {
                        protoValues: [
                          {
                            A: 42,
                          },
                        ],
                      },
                      protoValue: {
                        A: 42,
                      },
                      serializedObjectValue: {
                        objectValue: 'Test string',
                      },
                      stringArray: {
                        stringValues: ['Test string'],
                      },
                      stringValue: 'Test string',
                    },
                  },
                ],
              },
              triggerCriteriaTaskImplementationClassName: 'Test string',
            },
            triggerId: 'Test string',
            triggerName: 'Test string',
            triggerNumber: 'Test string',
            triggerType: 'Test string',
          },
        ],
        updateTime: 'Test string',
        userLabel: 'Test string',
      },
    );
    /** Soft-deletes the integration. Changes the status of the integration to ARCHIVED. If the integration being ARCHIVED is tagged as "HEAD", the tag is removed from this snapshot and set to the previous non-ARCHIVED snapshot. The PUBLISH_REQUESTED, DUE_FOR_DELETION tags are removed too. This RPC throws an exception if the version being deleted is DRAFT, and if the `locked_by` user is not the same as the user performing the Delete. Audit fields updated include last_modified_timestamp, last_modified_by. Any existing lock is released when Deleting a integration. Currently, there is no undelete mechanism. */
    await gapi.client.integrations.projects.locations.products.integrations.versions.delete(
      {
        name: 'Test string',
      },
    );
    /** Downloads an integration. Retrieves the `IntegrationVersion` for a given `integration_id` and returns the response as a string. */
    await gapi.client.integrations.projects.locations.products.integrations.versions.download(
      {
        fileFormat: 'Test string',
        files: 'Test string',
        name: 'Test string',
      },
    );
    /** Get a integration in the specified project. */
    await gapi.client.integrations.projects.locations.products.integrations.versions.get(
      {
        name: 'Test string',
      },
    );
    /** Returns the list of all integration versions in the specified project. */
    await gapi.client.integrations.projects.locations.products.integrations.versions.list(
      {
        fieldMask: 'Test string',
        filter: 'Test string',
        orderBy: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
    /** Update a integration with a draft version in the specified project. */
    await gapi.client.integrations.projects.locations.products.integrations.versions.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        cloudKmsKey: 'Test string',
        cloudLoggingDetails: {
          cloudLoggingSeverity: 'Test string',
          enableCloudLogging: true,
        },
        createdFromTemplate: 'Test string',
        createTime: 'Test string',
        databasePersistencePolicy: 'Test string',
        description: 'Test string',
        enableVariableMasking: true,
        errorCatcherConfigs: [
          {
            description: 'Test string',
            errorCatcherId: 'Test string',
            errorCatcherNumber: 'Test string',
            label: 'Test string',
            position: {
              x: 42,
              y: 42,
            },
            startErrorTasks: [
              {
                condition: 'Test string',
                description: 'Test string',
                displayName: 'Test string',
                taskConfigId: 'Test string',
                taskId: 'Test string',
              },
            ],
          },
        ],
        integrationConfigParameters: [
          {
            parameter: {
              containsLargeData: true,
              dataType: 'Test string',
              defaultValue: {
                booleanArray: {
                  booleanValues: [true],
                },
                booleanValue: true,
                doubleArray: {
                  doubleValues: [42],
                },
                doubleValue: 42,
                intArray: {
                  intValues: ['Test string'],
                },
                intValue: 'Test string',
                jsonValue: 'Test string',
                stringArray: {
                  stringValues: ['Test string'],
                },
                stringValue: 'Test string',
              },
              description: 'Test string',
              displayName: 'Test string',
              inputOutputType: 'Test string',
              isTransient: true,
              jsonSchema: 'Test string',
              key: 'Test string',
              masked: true,
              producer: 'Test string',
              searchable: true,
            },
            value: {
              booleanArray: {
                booleanValues: [true],
              },
              booleanValue: true,
              doubleArray: {
                doubleValues: [42],
              },
              doubleValue: 42,
              intArray: {
                intValues: ['Test string'],
              },
              intValue: 'Test string',
              jsonValue: 'Test string',
              stringArray: {
                stringValues: ['Test string'],
              },
              stringValue: 'Test string',
            },
          },
        ],
        integrationParameters: [
          {
            containsLargeData: true,
            dataType: 'Test string',
            defaultValue: {
              booleanArray: {
                booleanValues: [true],
              },
              booleanValue: true,
              doubleArray: {
                doubleValues: [42],
              },
              doubleValue: 42,
              intArray: {
                intValues: ['Test string'],
              },
              intValue: 'Test string',
              jsonValue: 'Test string',
              stringArray: {
                stringValues: ['Test string'],
              },
              stringValue: 'Test string',
            },
            description: 'Test string',
            displayName: 'Test string',
            inputOutputType: 'Test string',
            isTransient: true,
            jsonSchema: 'Test string',
            key: 'Test string',
            masked: true,
            producer: 'Test string',
            searchable: true,
          },
        ],
        integrationParametersInternal: {
          parameters: [
            {
              attributes: {
                dataType: 'Test string',
                defaultValue: {
                  booleanValue: true,
                  doubleArray: {
                    values: [42],
                  },
                  doubleValue: 42,
                  intArray: {
                    values: ['Test string'],
                  },
                  intValue: 'Test string',
                  protoValue: {
                    A: 42,
                  },
                  stringArray: {
                    values: ['Test string'],
                  },
                  stringValue: 'Test string',
                },
                isRequired: true,
                isSearchable: true,
                logSettings: {
                  logFieldName: 'Test string',
                  seedPeriod: 'Test string',
                  seedScope: 'Test string',
                },
                masked: true,
                readOnly: true,
                searchable: 'Test string',
                taskVisibility: ['Test string'],
              },
              children: undefined,
              containsLargeData: true,
              dataType: 'Test string',
              defaultValue: {
                booleanArray: {
                  booleanValues: [true],
                },
                booleanValue: true,
                doubleArray: {
                  doubleValues: [42],
                },
                doubleValue: 42,
                intArray: {
                  intValues: ['Test string'],
                },
                intValue: 'Test string',
                jsonValue: 'Test string',
                protoArray: {
                  protoValues: [
                    {
                      A: 42,
                    },
                  ],
                },
                protoValue: {
                  A: 42,
                },
                serializedObjectValue: {
                  objectValue: 'Test string',
                },
                stringArray: {
                  stringValues: ['Test string'],
                },
                stringValue: 'Test string',
              },
              description: 'Test string',
              inOutType: 'Test string',
              isTransient: true,
              jsonSchema: 'Test string',
              key: 'Test string',
              name: 'Test string',
              producedBy: {
                elementIdentifier: 'Test string',
                elementType: 'Test string',
              },
              producer: 'Test string',
              protoDefName: 'Test string',
              protoDefPath: 'Test string',
              required: true,
            },
          ],
        },
        lastModifierEmail: 'Test string',
        lockHolder: 'Test string',
        name: 'Test string',
        origin: 'Test string',
        parentTemplateId: 'Test string',
        runAsServiceAccount: 'Test string',
        snapshotNumber: 'Test string',
        state: 'Test string',
        status: 'Test string',
        taskConfigs: [
          {
            conditionalFailurePolicies: {
              defaultFailurePolicy: {
                condition: 'Test string',
                intervalTime: 'Test string',
                maxRetries: 42,
                retryStrategy: 'Test string',
              },
              failurePolicies: [
                {
                  condition: 'Test string',
                  intervalTime: 'Test string',
                  maxRetries: 42,
                  retryStrategy: 'Test string',
                },
              ],
            },
            description: 'Test string',
            displayName: 'Test string',
            errorCatcherId: 'Test string',
            externalTaskType: 'Test string',
            failurePolicy: {
              condition: 'Test string',
              intervalTime: 'Test string',
              maxRetries: 42,
              retryStrategy: 'Test string',
            },
            jsonValidationOption: 'Test string',
            nextTasks: [
              {
                condition: 'Test string',
                description: 'Test string',
                displayName: 'Test string',
                taskConfigId: 'Test string',
                taskId: 'Test string',
              },
            ],
            nextTasksExecutionPolicy: 'Test string',
            parameters: {
              A: {
                key: 'Test string',
                masked: true,
                value: {
                  booleanArray: {
                    booleanValues: [true],
                  },
                  booleanValue: true,
                  doubleArray: {
                    doubleValues: [42],
                  },
                  doubleValue: 42,
                  intArray: {
                    intValues: ['Test string'],
                  },
                  intValue: 'Test string',
                  jsonValue: 'Test string',
                  stringArray: {
                    stringValues: ['Test string'],
                  },
                  stringValue: 'Test string',
                },
              },
            },
            position: {
              x: 42,
              y: 42,
            },
            successPolicy: {
              finalState: 'Test string',
            },
            synchronousCallFailurePolicy: {
              condition: 'Test string',
              intervalTime: 'Test string',
              maxRetries: 42,
              retryStrategy: 'Test string',
            },
            task: 'Test string',
            taskExecutionStrategy: 'Test string',
            taskId: 'Test string',
            taskTemplate: 'Test string',
          },
        ],
        taskConfigsInternal: [
          {
            alertConfigs: [
              {
                aggregationPeriod: 'Test string',
                alertDisabled: true,
                alertName: 'Test string',
                clientId: 'Test string',
                durationThresholdMs: 'Test string',
                errorEnumList: {
                  enumStrings: ['Test string'],
                  filterType: 'Test string',
                },
                metricType: 'Test string',
                numAggregationPeriods: 42,
                onlyFinalAttempt: true,
                playbookUrl: 'Test string',
                thresholdType: 'Test string',
                thresholdValue: {
                  absolute: 'Test string',
                  percentage: 42,
                },
                warningEnumList: {
                  enumStrings: ['Test string'],
                  filterType: 'Test string',
                },
              },
            ],
            conditionalFailurePolicies: {
              defaultFailurePolicy: {
                intervalInSeconds: 'Test string',
                maxNumRetries: 42,
                retryCondition: 'Test string',
                retryStrategy: 'Test string',
              },
              failurePolicies: [
                {
                  intervalInSeconds: 'Test string',
                  maxNumRetries: 42,
                  retryCondition: 'Test string',
                  retryStrategy: 'Test string',
                },
              ],
            },
            createTime: 'Test string',
            creatorEmail: 'Test string',
            description: 'Test string',
            disableStrictTypeValidation: true,
            errorCatcherId: 'Test string',
            externalTaskType: 'Test string',
            failurePolicy: {
              intervalInSeconds: 'Test string',
              maxNumRetries: 42,
              retryCondition: 'Test string',
              retryStrategy: 'Test string',
            },
            incomingEdgeCount: 42,
            jsonValidationOption: 'Test string',
            label: 'Test string',
            lastModifiedTime: 'Test string',
            nextTasks: [
              {
                combinedConditions: [
                  {
                    conditions: [
                      {
                        eventPropertyKey: 'Test string',
                        operator: 'Test string',
                        value: {
                          booleanValue: true,
                          doubleArray: {
                            values: [42],
                          },
                          doubleValue: 42,
                          intArray: {
                            values: ['Test string'],
                          },
                          intValue: 'Test string',
                          protoValue: {
                            A: 42,
                          },
                          stringArray: {
                            values: ['Test string'],
                          },
                          stringValue: 'Test string',
                        },
                      },
                    ],
                  },
                ],
                condition: 'Test string',
                description: 'Test string',
                label: 'Test string',
                taskConfigId: 'Test string',
                taskNumber: 'Test string',
              },
            ],
            nextTasksExecutionPolicy: 'Test string',
            parameters: {
              A: {
                dataType: 'Test string',
                key: 'Test string',
                masked: true,
                value: {
                  booleanArray: {
                    booleanValues: [true],
                  },
                  booleanValue: true,
                  doubleArray: {
                    doubleValues: [42],
                  },
                  doubleValue: 42,
                  intArray: {
                    intValues: ['Test string'],
                  },
                  intValue: 'Test string',
                  jsonValue: 'Test string',
                  protoArray: {
                    protoValues: [
                      {
                        A: 42,
                      },
                    ],
                  },
                  protoValue: {
                    A: 42,
                  },
                  serializedObjectValue: {
                    objectValue: 'Test string',
                  },
                  stringArray: {
                    stringValues: ['Test string'],
                  },
                  stringValue: 'Test string',
                },
              },
            },
            position: {
              x: 42,
              y: 42,
            },
            precondition: 'Test string',
            preconditionLabel: 'Test string',
            rollbackStrategy: {
              parameters: {
                parameters: [
                  {
                    dataType: 'Test string',
                    key: 'Test string',
                    masked: true,
                    value: {
                      booleanArray: {
                        booleanValues: [true],
                      },
                      booleanValue: true,
                      doubleArray: {
                        doubleValues: [42],
                      },
                      doubleValue: 42,
                      intArray: {
                        intValues: ['Test string'],
                      },
                      intValue: 'Test string',
                      jsonValue: 'Test string',
                      protoArray: {
                        protoValues: [
                          {
                            A: 42,
                          },
                        ],
                      },
                      protoValue: {
                        A: 42,
                      },
                      serializedObjectValue: {
                        objectValue: 'Test string',
                      },
                      stringArray: {
                        stringValues: ['Test string'],
                      },
                      stringValue: 'Test string',
                    },
                  },
                ],
              },
              rollbackTaskImplementationClassName: 'Test string',
              taskNumbersToRollback: ['Test string'],
            },
            successPolicy: {
              finalState: 'Test string',
            },
            synchronousCallFailurePolicy: {
              intervalInSeconds: 'Test string',
              maxNumRetries: 42,
              retryCondition: 'Test string',
              retryStrategy: 'Test string',
            },
            taskEntity: {
              disabledForVpcSc: true,
              metadata: {
                activeTaskName: 'Test string',
                admins: [
                  {
                    googleGroupEmail: 'Test string',
                    userEmail: 'Test string',
                  },
                ],
                category: 'Test string',
                codeSearchLink: 'Test string',
                defaultJsonValidationOption: 'Test string',
                defaultSpec: 'Test string',
                description: 'Test string',
                descriptiveName: 'Test string',
                docMarkdown: 'Test string',
                externalCategory: 'Test string',
                externalCategorySequence: 42,
                externalDocHtml: 'Test string',
                externalDocLink: 'Test string',
                externalDocMarkdown: 'Test string',
                g3DocLink: 'Test string',
                iconLink: 'Test string',
                isDeprecated: true,
                name: 'Test string',
                standaloneExternalDocHtml: 'Test string',
                status: 'Test string',
                system: 'Test string',
                tags: ['Test string'],
              },
              paramSpecs: {
                parameters: [
                  {
                    className: 'Test string',
                    collectionElementClassName: 'Test string',
                    config: {
                      descriptivePhrase: 'Test string',
                      helpText: 'Test string',
                      hideDefaultValue: true,
                      inputDisplayOption: 'Test string',
                      isHidden: true,
                      label: 'Test string',
                      parameterNameOption: 'Test string',
                      subSectionLabel: 'Test string',
                      uiPlaceholderText: 'Test string',
                    },
                    dataType: 'Test string',
                    defaultValue: {
                      booleanArray: {
                        booleanValues: [true],
                      },
                      booleanValue: true,
                      doubleArray: {
                        doubleValues: [42],
                      },
                      doubleValue: 42,
                      intArray: {
                        intValues: ['Test string'],
                      },
                      intValue: 'Test string',
                      jsonValue: 'Test string',
                      protoArray: {
                        protoValues: [
                          {
                            A: 42,
                          },
                        ],
                      },
                      protoValue: {
                        A: 42,
                      },
                      serializedObjectValue: {
                        objectValue: 'Test string',
                      },
                      stringArray: {
                        stringValues: ['Test string'],
                      },
                      stringValue: 'Test string',
                    },
                    isDeprecated: true,
                    isOutput: true,
                    jsonSchema: 'Test string',
                    key: 'Test string',
                    protoDef: {
                      fullName: 'Test string',
                      path: 'Test string',
                    },
                    required: true,
                    validationRule: {
                      doubleRange: {
                        max: 42,
                        min: 42,
                      },
                      intRange: {
                        max: 'Test string',
                        min: 'Test string',
                      },
                      stringRegex: {
                        exclusive: true,
                        regex: 'Test string',
                      },
                    },
                  },
                ],
              },
              stats: {
                dimensions: {
                  clientId: 'Test string',
                  enumFilterType: 'Test string',
                  errorEnumString: 'Test string',
                  retryAttempt: 'Test string',
                  taskName: 'Test string',
                  taskNumber: 'Test string',
                  triggerId: 'Test string',
                  warningEnumString: 'Test string',
                  workflowId: 'Test string',
                  workflowName: 'Test string',
                },
                durationInSeconds: 42,
                errorRate: 42,
                qps: 42,
                warningRate: 42,
              },
              taskType: 'Test string',
              uiConfig: {
                taskUiModuleConfigs: [
                  {
                    moduleId: 'Test string',
                  },
                ],
              },
            },
            taskExecutionStrategy: 'Test string',
            taskName: 'Test string',
            taskNumber: 'Test string',
            taskSpec: 'Test string',
            taskTemplateName: 'Test string',
            taskType: 'Test string',
          },
        ],
        teardown: {
          teardownTaskConfigs: [
            {
              creatorEmail: 'Test string',
              name: 'Test string',
              nextTeardownTask: {
                name: 'Test string',
              },
              parameters: {
                parameters: [
                  {
                    key: 'Test string',
                    masked: true,
                    value: {
                      booleanArray: {
                        booleanValues: [true],
                      },
                      booleanValue: true,
                      doubleArray: {
                        doubleValues: [42],
                      },
                      doubleValue: 42,
                      intArray: {
                        intValues: ['Test string'],
                      },
                      intValue: 'Test string',
                      protoArray: {
                        protoValues: [
                          {
                            A: 42,
                          },
                        ],
                      },
                      protoValue: {
                        A: 42,
                      },
                      serializedObjectValue: {
                        objectValue: 'Test string',
                      },
                      stringArray: {
                        stringValues: ['Test string'],
                      },
                      stringValue: 'Test string',
                    },
                  },
                ],
              },
              properties: {
                properties: [
                  {
                    key: 'Test string',
                    value: {
                      booleanValue: true,
                      doubleArray: {
                        values: [42],
                      },
                      doubleValue: 42,
                      intArray: {
                        values: ['Test string'],
                      },
                      intValue: 'Test string',
                      protoValue: {
                        A: 42,
                      },
                      stringArray: {
                        values: ['Test string'],
                      },
                      stringValue: 'Test string',
                    },
                  },
                ],
              },
              teardownTaskImplementationClassName: 'Test string',
            },
          ],
        },
        triggerConfigs: [
          {
            alertConfig: [
              {
                aggregationPeriod: 'Test string',
                alertThreshold: 42,
                disableAlert: true,
                displayName: 'Test string',
                durationThreshold: 'Test string',
                metricType: 'Test string',
                onlyFinalAttempt: true,
                thresholdType: 'Test string',
                thresholdValue: {
                  absolute: 'Test string',
                  percentage: 42,
                },
              },
            ],
            cloudSchedulerConfig: {
              cronTab: 'Test string',
              errorMessage: 'Test string',
              location: 'Test string',
              serviceAccountEmail: 'Test string',
            },
            description: 'Test string',
            errorCatcherId: 'Test string',
            inputVariables: {
              names: ['Test string'],
            },
            label: 'Test string',
            nextTasksExecutionPolicy: 'Test string',
            outputVariables: {
              names: ['Test string'],
            },
            position: {
              x: 42,
              y: 42,
            },
            properties: {
              A: 'Test string',
            },
            startTasks: [
              {
                condition: 'Test string',
                description: 'Test string',
                displayName: 'Test string',
                taskConfigId: 'Test string',
                taskId: 'Test string',
              },
            ],
            trigger: 'Test string',
            triggerId: 'Test string',
            triggerNumber: 'Test string',
            triggerType: 'Test string',
          },
        ],
        triggerConfigsInternal: [
          {
            alertConfig: [
              {
                aggregationPeriod: 'Test string',
                alertDisabled: true,
                alertName: 'Test string',
                clientId: 'Test string',
                durationThresholdMs: 'Test string',
                errorEnumList: {
                  enumStrings: ['Test string'],
                  filterType: 'Test string',
                },
                metricType: 'Test string',
                numAggregationPeriods: 42,
                onlyFinalAttempt: true,
                playbookUrl: 'Test string',
                thresholdType: 'Test string',
                thresholdValue: {
                  absolute: 'Test string',
                  percentage: 42,
                },
                warningEnumList: {
                  enumStrings: ['Test string'],
                  filterType: 'Test string',
                },
              },
            ],
            cloudSchedulerConfig: {
              cronTab: 'Test string',
              errorMessage: 'Test string',
              location: 'Test string',
              serviceAccountEmail: 'Test string',
            },
            description: 'Test string',
            enabledClients: ['Test string'],
            errorCatcherId: 'Test string',
            inputVariables: {
              names: ['Test string'],
            },
            label: 'Test string',
            nextTasksExecutionPolicy: 'Test string',
            outputVariables: {
              names: ['Test string'],
            },
            pauseWorkflowExecutions: true,
            position: {
              x: 42,
              y: 42,
            },
            properties: {
              A: 'Test string',
            },
            startTasks: [
              {
                combinedConditions: [
                  {
                    conditions: [
                      {
                        eventPropertyKey: 'Test string',
                        operator: 'Test string',
                        value: {
                          booleanValue: true,
                          doubleArray: {
                            values: [42],
                          },
                          doubleValue: 42,
                          intArray: {
                            values: ['Test string'],
                          },
                          intValue: 'Test string',
                          protoValue: {
                            A: 42,
                          },
                          stringArray: {
                            values: ['Test string'],
                          },
                          stringValue: 'Test string',
                        },
                      },
                    ],
                  },
                ],
                condition: 'Test string',
                description: 'Test string',
                label: 'Test string',
                taskConfigId: 'Test string',
                taskNumber: 'Test string',
              },
            ],
            triggerCriteria: {
              condition: 'Test string',
              parameters: {
                parameters: [
                  {
                    key: 'Test string',
                    masked: true,
                    value: {
                      booleanArray: {
                        booleanValues: [true],
                      },
                      booleanValue: true,
                      doubleArray: {
                        doubleValues: [42],
                      },
                      doubleValue: 42,
                      intArray: {
                        intValues: ['Test string'],
                      },
                      intValue: 'Test string',
                      protoArray: {
                        protoValues: [
                          {
                            A: 42,
                          },
                        ],
                      },
                      protoValue: {
                        A: 42,
                      },
                      serializedObjectValue: {
                        objectValue: 'Test string',
                      },
                      stringArray: {
                        stringValues: ['Test string'],
                      },
                      stringValue: 'Test string',
                    },
                  },
                ],
              },
              triggerCriteriaTaskImplementationClassName: 'Test string',
            },
            triggerId: 'Test string',
            triggerName: 'Test string',
            triggerNumber: 'Test string',
            triggerType: 'Test string',
          },
        ],
        updateTime: 'Test string',
        userLabel: 'Test string',
      },
    );
    /** This RPC throws an exception if the integration is in ARCHIVED or ACTIVE state. This RPC throws an exception if the version being published is DRAFT, and if the `locked_by` user is not the same as the user performing the Publish. Audit fields updated include last_published_timestamp, last_published_by, last_modified_timestamp, last_modified_by. Any existing lock is on this integration is released. */
    await gapi.client.integrations.projects.locations.products.integrations.versions.publish(
      {
        name: 'Test string',
      },
      {
        configParameters: {
          A: 42,
        },
      },
    );
    /** Clears the `locked_by` and `locked_at_timestamp`in the DRAFT version of this integration. It then performs the same action as the CreateDraftIntegrationVersion (i.e., copies the DRAFT version of the integration as a SNAPSHOT and then creates a new DRAFT version with the `locked_by` set to the `user_taking_over` and the `locked_at_timestamp` set to the current timestamp). Both the `locked_by` and `user_taking_over` are notified via email about the takeover. This RPC throws an exception if the integration is not in DRAFT status or if the `locked_by` and `locked_at_timestamp` fields are not set.The TakeoverEdit lock is treated the same as an edit of the integration, and hence shares ACLs with edit. Audit fields updated include last_modified_timestamp, last_modified_by. */
    await gapi.client.integrations.projects.locations.products.integrations.versions.takeoverEditLock(
      {
        integrationVersion: 'Test string',
      },
      {},
    );
    /** Sets the status of the ACTIVE integration to SNAPSHOT with a new tag "PREVIOUSLY_PUBLISHED" after validating it. The "HEAD" and "PUBLISH_REQUESTED" tags do not change. This RPC throws an exception if the version being snapshot is not ACTIVE. Audit fields added include action, action_by, action_timestamp. */
    await gapi.client.integrations.projects.locations.products.integrations.versions.unpublish(
      {
        name: 'Test string',
      },
      {},
    );
    /** Uploads an integration. The content can be a previously downloaded integration. Performs the same function as CreateDraftIntegrationVersion, but accepts input in a string format, which holds the complete representation of the IntegrationVersion content. */
    await gapi.client.integrations.projects.locations.products.integrations.versions.upload(
      {
        parent: 'Test string',
      },
      {
        content: 'Test string',
        fileFormat: 'Test string',
      },
    );
    /** Creates an sfdc instance record. Store the sfdc instance in Spanner. Returns the sfdc instance. */
    await gapi.client.integrations.projects.locations.products.sfdcInstances.create(
      {
        parent: 'Test string',
      },
      {
        authConfigId: ['Test string'],
        createTime: 'Test string',
        deleteTime: 'Test string',
        description: 'Test string',
        displayName: 'Test string',
        name: 'Test string',
        serviceAuthority: 'Test string',
        sfdcOrgId: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Deletes an sfdc instance. */
    await gapi.client.integrations.projects.locations.products.sfdcInstances.delete(
      {
        name: 'Test string',
      },
    );
    /** Gets an sfdc instance. If the instance doesn't exist, Code.NOT_FOUND exception will be thrown. */
    await gapi.client.integrations.projects.locations.products.sfdcInstances.get(
      {
        name: 'Test string',
      },
    );
    /** Lists all sfdc instances that match the filter. Restrict to sfdc instances belonging to the current client only. */
    await gapi.client.integrations.projects.locations.products.sfdcInstances.list(
      {
        filter: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
        readMask: 'Test string',
      },
    );
    /** Updates an sfdc instance. Updates the sfdc instance in spanner. Returns the sfdc instance. */
    await gapi.client.integrations.projects.locations.products.sfdcInstances.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        authConfigId: ['Test string'],
        createTime: 'Test string',
        deleteTime: 'Test string',
        description: 'Test string',
        displayName: 'Test string',
        name: 'Test string',
        serviceAuthority: 'Test string',
        sfdcOrgId: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Creates an sfdc channel record. Store the sfdc channel in Spanner. Returns the sfdc channel. */
    await gapi.client.integrations.projects.locations.products.sfdcInstances.sfdcChannels.create(
      {
        parent: 'Test string',
      },
      {
        channelTopic: 'Test string',
        createTime: 'Test string',
        deleteTime: 'Test string',
        description: 'Test string',
        displayName: 'Test string',
        isActive: true,
        lastReplayId: 'Test string',
        name: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Deletes an sfdc channel. */
    await gapi.client.integrations.projects.locations.products.sfdcInstances.sfdcChannels.delete(
      {
        name: 'Test string',
      },
    );
    /** Gets an sfdc channel. If the channel doesn't exist, Code.NOT_FOUND exception will be thrown. */
    await gapi.client.integrations.projects.locations.products.sfdcInstances.sfdcChannels.get(
      {
        name: 'Test string',
      },
    );
    /** Lists all sfdc channels that match the filter. Restrict to sfdc channels belonging to the current client only. */
    await gapi.client.integrations.projects.locations.products.sfdcInstances.sfdcChannels.list(
      {
        filter: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
        readMask: 'Test string',
      },
    );
    /** Updates an sfdc channel. Updates the sfdc channel in spanner. Returns the sfdc channel. */
    await gapi.client.integrations.projects.locations.products.sfdcInstances.sfdcChannels.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        channelTopic: 'Test string',
        createTime: 'Test string',
        deleteTime: 'Test string',
        description: 'Test string',
        displayName: 'Test string',
        isActive: true,
        lastReplayId: 'Test string',
        name: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Creates an sfdc instance record. Store the sfdc instance in Spanner. Returns the sfdc instance. */
    await gapi.client.integrations.projects.locations.sfdcInstances.create(
      {
        parent: 'Test string',
      },
      {
        authConfigId: ['Test string'],
        createTime: 'Test string',
        deleteTime: 'Test string',
        description: 'Test string',
        displayName: 'Test string',
        name: 'Test string',
        serviceAuthority: 'Test string',
        sfdcOrgId: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Deletes an sfdc instance. */
    await gapi.client.integrations.projects.locations.sfdcInstances.delete({
      name: 'Test string',
    });
    /** Gets an sfdc instance. If the instance doesn't exist, Code.NOT_FOUND exception will be thrown. */
    await gapi.client.integrations.projects.locations.sfdcInstances.get({
      name: 'Test string',
    });
    /** Lists all sfdc instances that match the filter. Restrict to sfdc instances belonging to the current client only. */
    await gapi.client.integrations.projects.locations.sfdcInstances.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
      readMask: 'Test string',
    });
    /** Updates an sfdc instance. Updates the sfdc instance in spanner. Returns the sfdc instance. */
    await gapi.client.integrations.projects.locations.sfdcInstances.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        authConfigId: ['Test string'],
        createTime: 'Test string',
        deleteTime: 'Test string',
        description: 'Test string',
        displayName: 'Test string',
        name: 'Test string',
        serviceAuthority: 'Test string',
        sfdcOrgId: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Creates an sfdc channel record. Store the sfdc channel in Spanner. Returns the sfdc channel. */
    await gapi.client.integrations.projects.locations.sfdcInstances.sfdcChannels.create(
      {
        parent: 'Test string',
      },
      {
        channelTopic: 'Test string',
        createTime: 'Test string',
        deleteTime: 'Test string',
        description: 'Test string',
        displayName: 'Test string',
        isActive: true,
        lastReplayId: 'Test string',
        name: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Deletes an sfdc channel. */
    await gapi.client.integrations.projects.locations.sfdcInstances.sfdcChannels.delete(
      {
        name: 'Test string',
      },
    );
    /** Gets an sfdc channel. If the channel doesn't exist, Code.NOT_FOUND exception will be thrown. */
    await gapi.client.integrations.projects.locations.sfdcInstances.sfdcChannels.get(
      {
        name: 'Test string',
      },
    );
    /** Lists all sfdc channels that match the filter. Restrict to sfdc channels belonging to the current client only. */
    await gapi.client.integrations.projects.locations.sfdcInstances.sfdcChannels.list(
      {
        filter: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
        readMask: 'Test string',
      },
    );
    /** Updates an sfdc channel. Updates the sfdc channel in spanner. Returns the sfdc channel. */
    await gapi.client.integrations.projects.locations.sfdcInstances.sfdcChannels.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        channelTopic: 'Test string',
        createTime: 'Test string',
        deleteTime: 'Test string',
        description: 'Test string',
        displayName: 'Test string',
        isActive: true,
        lastReplayId: 'Test string',
        name: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Creates a new template */
    await gapi.client.integrations.projects.locations.templates.create(
      {
        parent: 'Test string',
      },
      {
        author: 'Test string',
        categories: ['Test string'],
        components: [
          {
            name: 'Test string',
            type: 'Test string',
          },
        ],
        createTime: 'Test string',
        description: 'Test string',
        displayName: 'Test string',
        docLink: 'Test string',
        lastUsedTime: 'Test string',
        name: 'Test string',
        sharedWith: ['Test string'],
        tags: ['Test string'],
        templateBundle: {
          integrationVersionTemplate: {
            integrationVersion: {
              cloudKmsKey: 'Test string',
              cloudLoggingDetails: {
                cloudLoggingSeverity: 'Test string',
                enableCloudLogging: true,
              },
              createdFromTemplate: 'Test string',
              createTime: 'Test string',
              databasePersistencePolicy: 'Test string',
              description: 'Test string',
              enableVariableMasking: true,
              errorCatcherConfigs: [
                {
                  description: 'Test string',
                  errorCatcherId: 'Test string',
                  errorCatcherNumber: 'Test string',
                  label: 'Test string',
                  position: {
                    x: 42,
                    y: 42,
                  },
                  startErrorTasks: [
                    {
                      condition: 'Test string',
                      description: 'Test string',
                      displayName: 'Test string',
                      taskConfigId: 'Test string',
                      taskId: 'Test string',
                    },
                  ],
                },
              ],
              integrationConfigParameters: [
                {
                  parameter: {
                    containsLargeData: true,
                    dataType: 'Test string',
                    defaultValue: {
                      booleanArray: {
                        booleanValues: [true],
                      },
                      booleanValue: true,
                      doubleArray: {
                        doubleValues: [42],
                      },
                      doubleValue: 42,
                      intArray: {
                        intValues: ['Test string'],
                      },
                      intValue: 'Test string',
                      jsonValue: 'Test string',
                      stringArray: {
                        stringValues: ['Test string'],
                      },
                      stringValue: 'Test string',
                    },
                    description: 'Test string',
                    displayName: 'Test string',
                    inputOutputType: 'Test string',
                    isTransient: true,
                    jsonSchema: 'Test string',
                    key: 'Test string',
                    masked: true,
                    producer: 'Test string',
                    searchable: true,
                  },
                  value: {
                    booleanArray: {
                      booleanValues: [true],
                    },
                    booleanValue: true,
                    doubleArray: {
                      doubleValues: [42],
                    },
                    doubleValue: 42,
                    intArray: {
                      intValues: ['Test string'],
                    },
                    intValue: 'Test string',
                    jsonValue: 'Test string',
                    stringArray: {
                      stringValues: ['Test string'],
                    },
                    stringValue: 'Test string',
                  },
                },
              ],
              integrationParameters: [
                {
                  containsLargeData: true,
                  dataType: 'Test string',
                  defaultValue: {
                    booleanArray: {
                      booleanValues: [true],
                    },
                    booleanValue: true,
                    doubleArray: {
                      doubleValues: [42],
                    },
                    doubleValue: 42,
                    intArray: {
                      intValues: ['Test string'],
                    },
                    intValue: 'Test string',
                    jsonValue: 'Test string',
                    stringArray: {
                      stringValues: ['Test string'],
                    },
                    stringValue: 'Test string',
                  },
                  description: 'Test string',
                  displayName: 'Test string',
                  inputOutputType: 'Test string',
                  isTransient: true,
                  jsonSchema: 'Test string',
                  key: 'Test string',
                  masked: true,
                  producer: 'Test string',
                  searchable: true,
                },
              ],
              integrationParametersInternal: {
                parameters: [
                  {
                    attributes: {
                      dataType: 'Test string',
                      defaultValue: {
                        booleanValue: true,
                        doubleArray: {
                          values: [42],
                        },
                        doubleValue: 42,
                        intArray: {
                          values: ['Test string'],
                        },
                        intValue: 'Test string',
                        protoValue: {
                          A: 42,
                        },
                        stringArray: {
                          values: ['Test string'],
                        },
                        stringValue: 'Test string',
                      },
                      isRequired: true,
                      isSearchable: true,
                      logSettings: {
                        logFieldName: 'Test string',
                        seedPeriod: 'Test string',
                        seedScope: 'Test string',
                      },
                      masked: true,
                      readOnly: true,
                      searchable: 'Test string',
                      taskVisibility: ['Test string'],
                    },
                    children: undefined,
                    containsLargeData: true,
                    dataType: 'Test string',
                    defaultValue: {
                      booleanArray: {
                        booleanValues: [true],
                      },
                      booleanValue: true,
                      doubleArray: {
                        doubleValues: [42],
                      },
                      doubleValue: 42,
                      intArray: {
                        intValues: ['Test string'],
                      },
                      intValue: 'Test string',
                      jsonValue: 'Test string',
                      protoArray: {
                        protoValues: [
                          {
                            A: 42,
                          },
                        ],
                      },
                      protoValue: {
                        A: 42,
                      },
                      serializedObjectValue: {
                        objectValue: 'Test string',
                      },
                      stringArray: {
                        stringValues: ['Test string'],
                      },
                      stringValue: 'Test string',
                    },
                    description: 'Test string',
                    inOutType: 'Test string',
                    isTransient: true,
                    jsonSchema: 'Test string',
                    key: 'Test string',
                    name: 'Test string',
                    producedBy: {
                      elementIdentifier: 'Test string',
                      elementType: 'Test string',
                    },
                    producer: 'Test string',
                    protoDefName: 'Test string',
                    protoDefPath: 'Test string',
                    required: true,
                  },
                ],
              },
              lastModifierEmail: 'Test string',
              lockHolder: 'Test string',
              name: 'Test string',
              origin: 'Test string',
              parentTemplateId: 'Test string',
              runAsServiceAccount: 'Test string',
              snapshotNumber: 'Test string',
              state: 'Test string',
              status: 'Test string',
              taskConfigs: [
                {
                  conditionalFailurePolicies: {
                    defaultFailurePolicy: {
                      condition: 'Test string',
                      intervalTime: 'Test string',
                      maxRetries: 42,
                      retryStrategy: 'Test string',
                    },
                    failurePolicies: [
                      {
                        condition: 'Test string',
                        intervalTime: 'Test string',
                        maxRetries: 42,
                        retryStrategy: 'Test string',
                      },
                    ],
                  },
                  description: 'Test string',
                  displayName: 'Test string',
                  errorCatcherId: 'Test string',
                  externalTaskType: 'Test string',
                  failurePolicy: {
                    condition: 'Test string',
                    intervalTime: 'Test string',
                    maxRetries: 42,
                    retryStrategy: 'Test string',
                  },
                  jsonValidationOption: 'Test string',
                  nextTasks: [
                    {
                      condition: 'Test string',
                      description: 'Test string',
                      displayName: 'Test string',
                      taskConfigId: 'Test string',
                      taskId: 'Test string',
                    },
                  ],
                  nextTasksExecutionPolicy: 'Test string',
                  parameters: {
                    A: {
                      key: 'Test string',
                      masked: true,
                      value: {
                        booleanArray: {
                          booleanValues: [true],
                        },
                        booleanValue: true,
                        doubleArray: {
                          doubleValues: [42],
                        },
                        doubleValue: 42,
                        intArray: {
                          intValues: ['Test string'],
                        },
                        intValue: 'Test string',
                        jsonValue: 'Test string',
                        stringArray: {
                          stringValues: ['Test string'],
                        },
                        stringValue: 'Test string',
                      },
                    },
                  },
                  position: {
                    x: 42,
                    y: 42,
                  },
                  successPolicy: {
                    finalState: 'Test string',
                  },
                  synchronousCallFailurePolicy: {
                    condition: 'Test string',
                    intervalTime: 'Test string',
                    maxRetries: 42,
                    retryStrategy: 'Test string',
                  },
                  task: 'Test string',
                  taskExecutionStrategy: 'Test string',
                  taskId: 'Test string',
                  taskTemplate: 'Test string',
                },
              ],
              taskConfigsInternal: [
                {
                  alertConfigs: [
                    {
                      aggregationPeriod: 'Test string',
                      alertDisabled: true,
                      alertName: 'Test string',
                      clientId: 'Test string',
                      durationThresholdMs: 'Test string',
                      errorEnumList: {
                        enumStrings: ['Test string'],
                        filterType: 'Test string',
                      },
                      metricType: 'Test string',
                      numAggregationPeriods: 42,
                      onlyFinalAttempt: true,
                      playbookUrl: 'Test string',
                      thresholdType: 'Test string',
                      thresholdValue: {
                        absolute: 'Test string',
                        percentage: 42,
                      },
                      warningEnumList: {
                        enumStrings: ['Test string'],
                        filterType: 'Test string',
                      },
                    },
                  ],
                  conditionalFailurePolicies: {
                    defaultFailurePolicy: {
                      intervalInSeconds: 'Test string',
                      maxNumRetries: 42,
                      retryCondition: 'Test string',
                      retryStrategy: 'Test string',
                    },
                    failurePolicies: [
                      {
                        intervalInSeconds: 'Test string',
                        maxNumRetries: 42,
                        retryCondition: 'Test string',
                        retryStrategy: 'Test string',
                      },
                    ],
                  },
                  createTime: 'Test string',
                  creatorEmail: 'Test string',
                  description: 'Test string',
                  disableStrictTypeValidation: true,
                  errorCatcherId: 'Test string',
                  externalTaskType: 'Test string',
                  failurePolicy: {
                    intervalInSeconds: 'Test string',
                    maxNumRetries: 42,
                    retryCondition: 'Test string',
                    retryStrategy: 'Test string',
                  },
                  incomingEdgeCount: 42,
                  jsonValidationOption: 'Test string',
                  label: 'Test string',
                  lastModifiedTime: 'Test string',
                  nextTasks: [
                    {
                      combinedConditions: [
                        {
                          conditions: [
                            {
                              eventPropertyKey: 'Test string',
                              operator: 'Test string',
                              value: {
                                booleanValue: true,
                                doubleArray: {
                                  values: [42],
                                },
                                doubleValue: 42,
                                intArray: {
                                  values: ['Test string'],
                                },
                                intValue: 'Test string',
                                protoValue: {
                                  A: 42,
                                },
                                stringArray: {
                                  values: ['Test string'],
                                },
                                stringValue: 'Test string',
                              },
                            },
                          ],
                        },
                      ],
                      condition: 'Test string',
                      description: 'Test string',
                      label: 'Test string',
                      taskConfigId: 'Test string',
                      taskNumber: 'Test string',
                    },
                  ],
                  nextTasksExecutionPolicy: 'Test string',
                  parameters: {
                    A: {
                      dataType: 'Test string',
                      key: 'Test string',
                      masked: true,
                      value: {
                        booleanArray: {
                          booleanValues: [true],
                        },
                        booleanValue: true,
                        doubleArray: {
                          doubleValues: [42],
                        },
                        doubleValue: 42,
                        intArray: {
                          intValues: ['Test string'],
                        },
                        intValue: 'Test string',
                        jsonValue: 'Test string',
                        protoArray: {
                          protoValues: [
                            {
                              A: 42,
                            },
                          ],
                        },
                        protoValue: {
                          A: 42,
                        },
                        serializedObjectValue: {
                          objectValue: 'Test string',
                        },
                        stringArray: {
                          stringValues: ['Test string'],
                        },
                        stringValue: 'Test string',
                      },
                    },
                  },
                  position: {
                    x: 42,
                    y: 42,
                  },
                  precondition: 'Test string',
                  preconditionLabel: 'Test string',
                  rollbackStrategy: {
                    parameters: {
                      parameters: [
                        {
                          dataType: 'Test string',
                          key: 'Test string',
                          masked: true,
                          value: {
                            booleanArray: {
                              booleanValues: [true],
                            },
                            booleanValue: true,
                            doubleArray: {
                              doubleValues: [42],
                            },
                            doubleValue: 42,
                            intArray: {
                              intValues: ['Test string'],
                            },
                            intValue: 'Test string',
                            jsonValue: 'Test string',
                            protoArray: {
                              protoValues: [
                                {
                                  A: 42,
                                },
                              ],
                            },
                            protoValue: {
                              A: 42,
                            },
                            serializedObjectValue: {
                              objectValue: 'Test string',
                            },
                            stringArray: {
                              stringValues: ['Test string'],
                            },
                            stringValue: 'Test string',
                          },
                        },
                      ],
                    },
                    rollbackTaskImplementationClassName: 'Test string',
                    taskNumbersToRollback: ['Test string'],
                  },
                  successPolicy: {
                    finalState: 'Test string',
                  },
                  synchronousCallFailurePolicy: {
                    intervalInSeconds: 'Test string',
                    maxNumRetries: 42,
                    retryCondition: 'Test string',
                    retryStrategy: 'Test string',
                  },
                  taskEntity: {
                    disabledForVpcSc: true,
                    metadata: {
                      activeTaskName: 'Test string',
                      admins: [
                        {
                          googleGroupEmail: 'Test string',
                          userEmail: 'Test string',
                        },
                      ],
                      category: 'Test string',
                      codeSearchLink: 'Test string',
                      defaultJsonValidationOption: 'Test string',
                      defaultSpec: 'Test string',
                      description: 'Test string',
                      descriptiveName: 'Test string',
                      docMarkdown: 'Test string',
                      externalCategory: 'Test string',
                      externalCategorySequence: 42,
                      externalDocHtml: 'Test string',
                      externalDocLink: 'Test string',
                      externalDocMarkdown: 'Test string',
                      g3DocLink: 'Test string',
                      iconLink: 'Test string',
                      isDeprecated: true,
                      name: 'Test string',
                      standaloneExternalDocHtml: 'Test string',
                      status: 'Test string',
                      system: 'Test string',
                      tags: ['Test string'],
                    },
                    paramSpecs: {
                      parameters: [
                        {
                          className: 'Test string',
                          collectionElementClassName: 'Test string',
                          config: {
                            descriptivePhrase: 'Test string',
                            helpText: 'Test string',
                            hideDefaultValue: true,
                            inputDisplayOption: 'Test string',
                            isHidden: true,
                            label: 'Test string',
                            parameterNameOption: 'Test string',
                            subSectionLabel: 'Test string',
                            uiPlaceholderText: 'Test string',
                          },
                          dataType: 'Test string',
                          defaultValue: {
                            booleanArray: {
                              booleanValues: [true],
                            },
                            booleanValue: true,
                            doubleArray: {
                              doubleValues: [42],
                            },
                            doubleValue: 42,
                            intArray: {
                              intValues: ['Test string'],
                            },
                            intValue: 'Test string',
                            jsonValue: 'Test string',
                            protoArray: {
                              protoValues: [
                                {
                                  A: 42,
                                },
                              ],
                            },
                            protoValue: {
                              A: 42,
                            },
                            serializedObjectValue: {
                              objectValue: 'Test string',
                            },
                            stringArray: {
                              stringValues: ['Test string'],
                            },
                            stringValue: 'Test string',
                          },
                          isDeprecated: true,
                          isOutput: true,
                          jsonSchema: 'Test string',
                          key: 'Test string',
                          protoDef: {
                            fullName: 'Test string',
                            path: 'Test string',
                          },
                          required: true,
                          validationRule: {
                            doubleRange: {
                              max: 42,
                              min: 42,
                            },
                            intRange: {
                              max: 'Test string',
                              min: 'Test string',
                            },
                            stringRegex: {
                              exclusive: true,
                              regex: 'Test string',
                            },
                          },
                        },
                      ],
                    },
                    stats: {
                      dimensions: {
                        clientId: 'Test string',
                        enumFilterType: 'Test string',
                        errorEnumString: 'Test string',
                        retryAttempt: 'Test string',
                        taskName: 'Test string',
                        taskNumber: 'Test string',
                        triggerId: 'Test string',
                        warningEnumString: 'Test string',
                        workflowId: 'Test string',
                        workflowName: 'Test string',
                      },
                      durationInSeconds: 42,
                      errorRate: 42,
                      qps: 42,
                      warningRate: 42,
                    },
                    taskType: 'Test string',
                    uiConfig: {
                      taskUiModuleConfigs: [
                        {
                          moduleId: 'Test string',
                        },
                      ],
                    },
                  },
                  taskExecutionStrategy: 'Test string',
                  taskName: 'Test string',
                  taskNumber: 'Test string',
                  taskSpec: 'Test string',
                  taskTemplateName: 'Test string',
                  taskType: 'Test string',
                },
              ],
              teardown: {
                teardownTaskConfigs: [
                  {
                    creatorEmail: 'Test string',
                    name: 'Test string',
                    nextTeardownTask: {
                      name: 'Test string',
                    },
                    parameters: {
                      parameters: [
                        {
                          key: 'Test string',
                          masked: true,
                          value: {
                            booleanArray: {
                              booleanValues: [true],
                            },
                            booleanValue: true,
                            doubleArray: {
                              doubleValues: [42],
                            },
                            doubleValue: 42,
                            intArray: {
                              intValues: ['Test string'],
                            },
                            intValue: 'Test string',
                            protoArray: {
                              protoValues: [
                                {
                                  A: 42,
                                },
                              ],
                            },
                            protoValue: {
                              A: 42,
                            },
                            serializedObjectValue: {
                              objectValue: 'Test string',
                            },
                            stringArray: {
                              stringValues: ['Test string'],
                            },
                            stringValue: 'Test string',
                          },
                        },
                      ],
                    },
                    properties: {
                      properties: [
                        {
                          key: 'Test string',
                          value: {
                            booleanValue: true,
                            doubleArray: {
                              values: [42],
                            },
                            doubleValue: 42,
                            intArray: {
                              values: ['Test string'],
                            },
                            intValue: 'Test string',
                            protoValue: {
                              A: 42,
                            },
                            stringArray: {
                              values: ['Test string'],
                            },
                            stringValue: 'Test string',
                          },
                        },
                      ],
                    },
                    teardownTaskImplementationClassName: 'Test string',
                  },
                ],
              },
              triggerConfigs: [
                {
                  alertConfig: [
                    {
                      aggregationPeriod: 'Test string',
                      alertThreshold: 42,
                      disableAlert: true,
                      displayName: 'Test string',
                      durationThreshold: 'Test string',
                      metricType: 'Test string',
                      onlyFinalAttempt: true,
                      thresholdType: 'Test string',
                      thresholdValue: {
                        absolute: 'Test string',
                        percentage: 42,
                      },
                    },
                  ],
                  cloudSchedulerConfig: {
                    cronTab: 'Test string',
                    errorMessage: 'Test string',
                    location: 'Test string',
                    serviceAccountEmail: 'Test string',
                  },
                  description: 'Test string',
                  errorCatcherId: 'Test string',
                  inputVariables: {
                    names: ['Test string'],
                  },
                  label: 'Test string',
                  nextTasksExecutionPolicy: 'Test string',
                  outputVariables: {
                    names: ['Test string'],
                  },
                  position: {
                    x: 42,
                    y: 42,
                  },
                  properties: {
                    A: 'Test string',
                  },
                  startTasks: [
                    {
                      condition: 'Test string',
                      description: 'Test string',
                      displayName: 'Test string',
                      taskConfigId: 'Test string',
                      taskId: 'Test string',
                    },
                  ],
                  trigger: 'Test string',
                  triggerId: 'Test string',
                  triggerNumber: 'Test string',
                  triggerType: 'Test string',
                },
              ],
              triggerConfigsInternal: [
                {
                  alertConfig: [
                    {
                      aggregationPeriod: 'Test string',
                      alertDisabled: true,
                      alertName: 'Test string',
                      clientId: 'Test string',
                      durationThresholdMs: 'Test string',
                      errorEnumList: {
                        enumStrings: ['Test string'],
                        filterType: 'Test string',
                      },
                      metricType: 'Test string',
                      numAggregationPeriods: 42,
                      onlyFinalAttempt: true,
                      playbookUrl: 'Test string',
                      thresholdType: 'Test string',
                      thresholdValue: {
                        absolute: 'Test string',
                        percentage: 42,
                      },
                      warningEnumList: {
                        enumStrings: ['Test string'],
                        filterType: 'Test string',
                      },
                    },
                  ],
                  cloudSchedulerConfig: {
                    cronTab: 'Test string',
                    errorMessage: 'Test string',
                    location: 'Test string',
                    serviceAccountEmail: 'Test string',
                  },
                  description: 'Test string',
                  enabledClients: ['Test string'],
                  errorCatcherId: 'Test string',
                  inputVariables: {
                    names: ['Test string'],
                  },
                  label: 'Test string',
                  nextTasksExecutionPolicy: 'Test string',
                  outputVariables: {
                    names: ['Test string'],
                  },
                  pauseWorkflowExecutions: true,
                  position: {
                    x: 42,
                    y: 42,
                  },
                  properties: {
                    A: 'Test string',
                  },
                  startTasks: [
                    {
                      combinedConditions: [
                        {
                          conditions: [
                            {
                              eventPropertyKey: 'Test string',
                              operator: 'Test string',
                              value: {
                                booleanValue: true,
                                doubleArray: {
                                  values: [42],
                                },
                                doubleValue: 42,
                                intArray: {
                                  values: ['Test string'],
                                },
                                intValue: 'Test string',
                                protoValue: {
                                  A: 42,
                                },
                                stringArray: {
                                  values: ['Test string'],
                                },
                                stringValue: 'Test string',
                              },
                            },
                          ],
                        },
                      ],
                      condition: 'Test string',
                      description: 'Test string',
                      label: 'Test string',
                      taskConfigId: 'Test string',
                      taskNumber: 'Test string',
                    },
                  ],
                  triggerCriteria: {
                    condition: 'Test string',
                    parameters: {
                      parameters: [
                        {
                          key: 'Test string',
                          masked: true,
                          value: {
                            booleanArray: {
                              booleanValues: [true],
                            },
                            booleanValue: true,
                            doubleArray: {
                              doubleValues: [42],
                            },
                            doubleValue: 42,
                            intArray: {
                              intValues: ['Test string'],
                            },
                            intValue: 'Test string',
                            protoArray: {
                              protoValues: [
                                {
                                  A: 42,
                                },
                              ],
                            },
                            protoValue: {
                              A: 42,
                            },
                            serializedObjectValue: {
                              objectValue: 'Test string',
                            },
                            stringArray: {
                              stringValues: ['Test string'],
                            },
                            stringValue: 'Test string',
                          },
                        },
                      ],
                    },
                    triggerCriteriaTaskImplementationClassName: 'Test string',
                  },
                  triggerId: 'Test string',
                  triggerName: 'Test string',
                  triggerNumber: 'Test string',
                  triggerType: 'Test string',
                },
              ],
              updateTime: 'Test string',
              userLabel: 'Test string',
            },
            key: 'Test string',
          },
          subIntegrationVersionTemplates: [
            {
              integrationVersion: {
                cloudKmsKey: 'Test string',
                cloudLoggingDetails: {
                  cloudLoggingSeverity: 'Test string',
                  enableCloudLogging: true,
                },
                createdFromTemplate: 'Test string',
                createTime: 'Test string',
                databasePersistencePolicy: 'Test string',
                description: 'Test string',
                enableVariableMasking: true,
                errorCatcherConfigs: [
                  {
                    description: 'Test string',
                    errorCatcherId: 'Test string',
                    errorCatcherNumber: 'Test string',
                    label: 'Test string',
                    position: {
                      x: 42,
                      y: 42,
                    },
                    startErrorTasks: [
                      {
                        condition: 'Test string',
                        description: 'Test string',
                        displayName: 'Test string',
                        taskConfigId: 'Test string',
                        taskId: 'Test string',
                      },
                    ],
                  },
                ],
                integrationConfigParameters: [
                  {
                    parameter: {
                      containsLargeData: true,
                      dataType: 'Test string',
                      defaultValue: {
                        booleanArray: {
                          booleanValues: [true],
                        },
                        booleanValue: true,
                        doubleArray: {
                          doubleValues: [42],
                        },
                        doubleValue: 42,
                        intArray: {
                          intValues: ['Test string'],
                        },
                        intValue: 'Test string',
                        jsonValue: 'Test string',
                        stringArray: {
                          stringValues: ['Test string'],
                        },
                        stringValue: 'Test string',
                      },
                      description: 'Test string',
                      displayName: 'Test string',
                      inputOutputType: 'Test string',
                      isTransient: true,
                      jsonSchema: 'Test string',
                      key: 'Test string',
                      masked: true,
                      producer: 'Test string',
                      searchable: true,
                    },
                    value: {
                      booleanArray: {
                        booleanValues: [true],
                      },
                      booleanValue: true,
                      doubleArray: {
                        doubleValues: [42],
                      },
                      doubleValue: 42,
                      intArray: {
                        intValues: ['Test string'],
                      },
                      intValue: 'Test string',
                      jsonValue: 'Test string',
                      stringArray: {
                        stringValues: ['Test string'],
                      },
                      stringValue: 'Test string',
                    },
                  },
                ],
                integrationParameters: [
                  {
                    containsLargeData: true,
                    dataType: 'Test string',
                    defaultValue: {
                      booleanArray: {
                        booleanValues: [true],
                      },
                      booleanValue: true,
                      doubleArray: {
                        doubleValues: [42],
                      },
                      doubleValue: 42,
                      intArray: {
                        intValues: ['Test string'],
                      },
                      intValue: 'Test string',
                      jsonValue: 'Test string',
                      stringArray: {
                        stringValues: ['Test string'],
                      },
                      stringValue: 'Test string',
                    },
                    description: 'Test string',
                    displayName: 'Test string',
                    inputOutputType: 'Test string',
                    isTransient: true,
                    jsonSchema: 'Test string',
                    key: 'Test string',
                    masked: true,
                    producer: 'Test string',
                    searchable: true,
                  },
                ],
                integrationParametersInternal: {
                  parameters: [
                    {
                      attributes: {
                        dataType: 'Test string',
                        defaultValue: {
                          booleanValue: true,
                          doubleArray: {
                            values: [42],
                          },
                          doubleValue: 42,
                          intArray: {
                            values: ['Test string'],
                          },
                          intValue: 'Test string',
                          protoValue: {
                            A: 42,
                          },
                          stringArray: {
                            values: ['Test string'],
                          },
                          stringValue: 'Test string',
                        },
                        isRequired: true,
                        isSearchable: true,
                        logSettings: {
                          logFieldName: 'Test string',
                          seedPeriod: 'Test string',
                          seedScope: 'Test string',
                        },
                        masked: true,
                        readOnly: true,
                        searchable: 'Test string',
                        taskVisibility: ['Test string'],
                      },
                      children: undefined,
                      containsLargeData: true,
                      dataType: 'Test string',
                      defaultValue: {
                        booleanArray: {
                          booleanValues: [true],
                        },
                        booleanValue: true,
                        doubleArray: {
                          doubleValues: [42],
                        },
                        doubleValue: 42,
                        intArray: {
                          intValues: ['Test string'],
                        },
                        intValue: 'Test string',
                        jsonValue: 'Test string',
                        protoArray: {
                          protoValues: [
                            {
                              A: 42,
                            },
                          ],
                        },
                        protoValue: {
                          A: 42,
                        },
                        serializedObjectValue: {
                          objectValue: 'Test string',
                        },
                        stringArray: {
                          stringValues: ['Test string'],
                        },
                        stringValue: 'Test string',
                      },
                      description: 'Test string',
                      inOutType: 'Test string',
                      isTransient: true,
                      jsonSchema: 'Test string',
                      key: 'Test string',
                      name: 'Test string',
                      producedBy: {
                        elementIdentifier: 'Test string',
                        elementType: 'Test string',
                      },
                      producer: 'Test string',
                      protoDefName: 'Test string',
                      protoDefPath: 'Test string',
                      required: true,
                    },
                  ],
                },
                lastModifierEmail: 'Test string',
                lockHolder: 'Test string',
                name: 'Test string',
                origin: 'Test string',
                parentTemplateId: 'Test string',
                runAsServiceAccount: 'Test string',
                snapshotNumber: 'Test string',
                state: 'Test string',
                status: 'Test string',
                taskConfigs: [
                  {
                    conditionalFailurePolicies: {
                      defaultFailurePolicy: {
                        condition: 'Test string',
                        intervalTime: 'Test string',
                        maxRetries: 42,
                        retryStrategy: 'Test string',
                      },
                      failurePolicies: [
                        {
                          condition: 'Test string',
                          intervalTime: 'Test string',
                          maxRetries: 42,
                          retryStrategy: 'Test string',
                        },
                      ],
                    },
                    description: 'Test string',
                    displayName: 'Test string',
                    errorCatcherId: 'Test string',
                    externalTaskType: 'Test string',
                    failurePolicy: {
                      condition: 'Test string',
                      intervalTime: 'Test string',
                      maxRetries: 42,
                      retryStrategy: 'Test string',
                    },
                    jsonValidationOption: 'Test string',
                    nextTasks: [
                      {
                        condition: 'Test string',
                        description: 'Test string',
                        displayName: 'Test string',
                        taskConfigId: 'Test string',
                        taskId: 'Test string',
                      },
                    ],
                    nextTasksExecutionPolicy: 'Test string',
                    parameters: {
                      A: {
                        key: 'Test string',
                        masked: true,
                        value: {
                          booleanArray: {
                            booleanValues: [true],
                          },
                          booleanValue: true,
                          doubleArray: {
                            doubleValues: [42],
                          },
                          doubleValue: 42,
                          intArray: {
                            intValues: ['Test string'],
                          },
                          intValue: 'Test string',
                          jsonValue: 'Test string',
                          stringArray: {
                            stringValues: ['Test string'],
                          },
                          stringValue: 'Test string',
                        },
                      },
                    },
                    position: {
                      x: 42,
                      y: 42,
                    },
                    successPolicy: {
                      finalState: 'Test string',
                    },
                    synchronousCallFailurePolicy: {
                      condition: 'Test string',
                      intervalTime: 'Test string',
                      maxRetries: 42,
                      retryStrategy: 'Test string',
                    },
                    task: 'Test string',
                    taskExecutionStrategy: 'Test string',
                    taskId: 'Test string',
                    taskTemplate: 'Test string',
                  },
                ],
                taskConfigsInternal: [
                  {
                    alertConfigs: [
                      {
                        aggregationPeriod: 'Test string',
                        alertDisabled: true,
                        alertName: 'Test string',
                        clientId: 'Test string',
                        durationThresholdMs: 'Test string',
                        errorEnumList: {
                          enumStrings: ['Test string'],
                          filterType: 'Test string',
                        },
                        metricType: 'Test string',
                        numAggregationPeriods: 42,
                        onlyFinalAttempt: true,
                        playbookUrl: 'Test string',
                        thresholdType: 'Test string',
                        thresholdValue: {
                          absolute: 'Test string',
                          percentage: 42,
                        },
                        warningEnumList: {
                          enumStrings: ['Test string'],
                          filterType: 'Test string',
                        },
                      },
                    ],
                    conditionalFailurePolicies: {
                      defaultFailurePolicy: {
                        intervalInSeconds: 'Test string',
                        maxNumRetries: 42,
                        retryCondition: 'Test string',
                        retryStrategy: 'Test string',
                      },
                      failurePolicies: [
                        {
                          intervalInSeconds: 'Test string',
                          maxNumRetries: 42,
                          retryCondition: 'Test string',
                          retryStrategy: 'Test string',
                        },
                      ],
                    },
                    createTime: 'Test string',
                    creatorEmail: 'Test string',
                    description: 'Test string',
                    disableStrictTypeValidation: true,
                    errorCatcherId: 'Test string',
                    externalTaskType: 'Test string',
                    failurePolicy: {
                      intervalInSeconds: 'Test string',
                      maxNumRetries: 42,
                      retryCondition: 'Test string',
                      retryStrategy: 'Test string',
                    },
                    incomingEdgeCount: 42,
                    jsonValidationOption: 'Test string',
                    label: 'Test string',
                    lastModifiedTime: 'Test string',
                    nextTasks: [
                      {
                        combinedConditions: [
                          {
                            conditions: [
                              {
                                eventPropertyKey: 'Test string',
                                operator: 'Test string',
                                value: {
                                  booleanValue: true,
                                  doubleArray: {
                                    values: [42],
                                  },
                                  doubleValue: 42,
                                  intArray: {
                                    values: ['Test string'],
                                  },
                                  intValue: 'Test string',
                                  protoValue: {
                                    A: 42,
                                  },
                                  stringArray: {
                                    values: ['Test string'],
                                  },
                                  stringValue: 'Test string',
                                },
                              },
                            ],
                          },
                        ],
                        condition: 'Test string',
                        description: 'Test string',
                        label: 'Test string',
                        taskConfigId: 'Test string',
                        taskNumber: 'Test string',
                      },
                    ],
                    nextTasksExecutionPolicy: 'Test string',
                    parameters: {
                      A: {
                        dataType: 'Test string',
                        key: 'Test string',
                        masked: true,
                        value: {
                          booleanArray: {
                            booleanValues: [true],
                          },
                          booleanValue: true,
                          doubleArray: {
                            doubleValues: [42],
                          },
                          doubleValue: 42,
                          intArray: {
                            intValues: ['Test string'],
                          },
                          intValue: 'Test string',
                          jsonValue: 'Test string',
                          protoArray: {
                            protoValues: [
                              {
                                A: 42,
                              },
                            ],
                          },
                          protoValue: {
                            A: 42,
                          },
                          serializedObjectValue: {
                            objectValue: 'Test string',
                          },
                          stringArray: {
                            stringValues: ['Test string'],
                          },
                          stringValue: 'Test string',
                        },
                      },
                    },
                    position: {
                      x: 42,
                      y: 42,
                    },
                    precondition: 'Test string',
                    preconditionLabel: 'Test string',
                    rollbackStrategy: {
                      parameters: {
                        parameters: [
                          {
                            dataType: 'Test string',
                            key: 'Test string',
                            masked: true,
                            value: {
                              booleanArray: {
                                booleanValues: [true],
                              },
                              booleanValue: true,
                              doubleArray: {
                                doubleValues: [42],
                              },
                              doubleValue: 42,
                              intArray: {
                                intValues: ['Test string'],
                              },
                              intValue: 'Test string',
                              jsonValue: 'Test string',
                              protoArray: {
                                protoValues: [
                                  {
                                    A: 42,
                                  },
                                ],
                              },
                              protoValue: {
                                A: 42,
                              },
                              serializedObjectValue: {
                                objectValue: 'Test string',
                              },
                              stringArray: {
                                stringValues: ['Test string'],
                              },
                              stringValue: 'Test string',
                            },
                          },
                        ],
                      },
                      rollbackTaskImplementationClassName: 'Test string',
                      taskNumbersToRollback: ['Test string'],
                    },
                    successPolicy: {
                      finalState: 'Test string',
                    },
                    synchronousCallFailurePolicy: {
                      intervalInSeconds: 'Test string',
                      maxNumRetries: 42,
                      retryCondition: 'Test string',
                      retryStrategy: 'Test string',
                    },
                    taskEntity: {
                      disabledForVpcSc: true,
                      metadata: {
                        activeTaskName: 'Test string',
                        admins: [
                          {
                            googleGroupEmail: 'Test string',
                            userEmail: 'Test string',
                          },
                        ],
                        category: 'Test string',
                        codeSearchLink: 'Test string',
                        defaultJsonValidationOption: 'Test string',
                        defaultSpec: 'Test string',
                        description: 'Test string',
                        descriptiveName: 'Test string',
                        docMarkdown: 'Test string',
                        externalCategory: 'Test string',
                        externalCategorySequence: 42,
                        externalDocHtml: 'Test string',
                        externalDocLink: 'Test string',
                        externalDocMarkdown: 'Test string',
                        g3DocLink: 'Test string',
                        iconLink: 'Test string',
                        isDeprecated: true,
                        name: 'Test string',
                        standaloneExternalDocHtml: 'Test string',
                        status: 'Test string',
                        system: 'Test string',
                        tags: ['Test string'],
                      },
                      paramSpecs: {
                        parameters: [
                          {
                            className: 'Test string',
                            collectionElementClassName: 'Test string',
                            config: {
                              descriptivePhrase: 'Test string',
                              helpText: 'Test string',
                              hideDefaultValue: true,
                              inputDisplayOption: 'Test string',
                              isHidden: true,
                              label: 'Test string',
                              parameterNameOption: 'Test string',
                              subSectionLabel: 'Test string',
                              uiPlaceholderText: 'Test string',
                            },
                            dataType: 'Test string',
                            defaultValue: {
                              booleanArray: {
                                booleanValues: [true],
                              },
                              booleanValue: true,
                              doubleArray: {
                                doubleValues: [42],
                              },
                              doubleValue: 42,
                              intArray: {
                                intValues: ['Test string'],
                              },
                              intValue: 'Test string',
                              jsonValue: 'Test string',
                              protoArray: {
                                protoValues: [
                                  {
                                    A: 42,
                                  },
                                ],
                              },
                              protoValue: {
                                A: 42,
                              },
                              serializedObjectValue: {
                                objectValue: 'Test string',
                              },
                              stringArray: {
                                stringValues: ['Test string'],
                              },
                              stringValue: 'Test string',
                            },
                            isDeprecated: true,
                            isOutput: true,
                            jsonSchema: 'Test string',
                            key: 'Test string',
                            protoDef: {
                              fullName: 'Test string',
                              path: 'Test string',
                            },
                            required: true,
                            validationRule: {
                              doubleRange: {
                                max: 42,
                                min: 42,
                              },
                              intRange: {
                                max: 'Test string',
                                min: 'Test string',
                              },
                              stringRegex: {
                                exclusive: true,
                                regex: 'Test string',
                              },
                            },
                          },
                        ],
                      },
                      stats: {
                        dimensions: {
                          clientId: 'Test string',
                          enumFilterType: 'Test string',
                          errorEnumString: 'Test string',
                          retryAttempt: 'Test string',
                          taskName: 'Test string',
                          taskNumber: 'Test string',
                          triggerId: 'Test string',
                          warningEnumString: 'Test string',
                          workflowId: 'Test string',
                          workflowName: 'Test string',
                        },
                        durationInSeconds: 42,
                        errorRate: 42,
                        qps: 42,
                        warningRate: 42,
                      },
                      taskType: 'Test string',
                      uiConfig: {
                        taskUiModuleConfigs: [
                          {
                            moduleId: 'Test string',
                          },
                        ],
                      },
                    },
                    taskExecutionStrategy: 'Test string',
                    taskName: 'Test string',
                    taskNumber: 'Test string',
                    taskSpec: 'Test string',
                    taskTemplateName: 'Test string',
                    taskType: 'Test string',
                  },
                ],
                teardown: {
                  teardownTaskConfigs: [
                    {
                      creatorEmail: 'Test string',
                      name: 'Test string',
                      nextTeardownTask: {
                        name: 'Test string',
                      },
                      parameters: {
                        parameters: [
                          {
                            key: 'Test string',
                            masked: true,
                            value: {
                              booleanArray: {
                                booleanValues: [true],
                              },
                              booleanValue: true,
                              doubleArray: {
                                doubleValues: [42],
                              },
                              doubleValue: 42,
                              intArray: {
                                intValues: ['Test string'],
                              },
                              intValue: 'Test string',
                              protoArray: {
                                protoValues: [
                                  {
                                    A: 42,
                                  },
                                ],
                              },
                              protoValue: {
                                A: 42,
                              },
                              serializedObjectValue: {
                                objectValue: 'Test string',
                              },
                              stringArray: {
                                stringValues: ['Test string'],
                              },
                              stringValue: 'Test string',
                            },
                          },
                        ],
                      },
                      properties: {
                        properties: [
                          {
                            key: 'Test string',
                            value: {
                              booleanValue: true,
                              doubleArray: {
                                values: [42],
                              },
                              doubleValue: 42,
                              intArray: {
                                values: ['Test string'],
                              },
                              intValue: 'Test string',
                              protoValue: {
                                A: 42,
                              },
                              stringArray: {
                                values: ['Test string'],
                              },
                              stringValue: 'Test string',
                            },
                          },
                        ],
                      },
                      teardownTaskImplementationClassName: 'Test string',
                    },
                  ],
                },
                triggerConfigs: [
                  {
                    alertConfig: [
                      {
                        aggregationPeriod: 'Test string',
                        alertThreshold: 42,
                        disableAlert: true,
                        displayName: 'Test string',
                        durationThreshold: 'Test string',
                        metricType: 'Test string',
                        onlyFinalAttempt: true,
                        thresholdType: 'Test string',
                        thresholdValue: {
                          absolute: 'Test string',
                          percentage: 42,
                        },
                      },
                    ],
                    cloudSchedulerConfig: {
                      cronTab: 'Test string',
                      errorMessage: 'Test string',
                      location: 'Test string',
                      serviceAccountEmail: 'Test string',
                    },
                    description: 'Test string',
                    errorCatcherId: 'Test string',
                    inputVariables: {
                      names: ['Test string'],
                    },
                    label: 'Test string',
                    nextTasksExecutionPolicy: 'Test string',
                    outputVariables: {
                      names: ['Test string'],
                    },
                    position: {
                      x: 42,
                      y: 42,
                    },
                    properties: {
                      A: 'Test string',
                    },
                    startTasks: [
                      {
                        condition: 'Test string',
                        description: 'Test string',
                        displayName: 'Test string',
                        taskConfigId: 'Test string',
                        taskId: 'Test string',
                      },
                    ],
                    trigger: 'Test string',
                    triggerId: 'Test string',
                    triggerNumber: 'Test string',
                    triggerType: 'Test string',
                  },
                ],
                triggerConfigsInternal: [
                  {
                    alertConfig: [
                      {
                        aggregationPeriod: 'Test string',
                        alertDisabled: true,
                        alertName: 'Test string',
                        clientId: 'Test string',
                        durationThresholdMs: 'Test string',
                        errorEnumList: {
                          enumStrings: ['Test string'],
                          filterType: 'Test string',
                        },
                        metricType: 'Test string',
                        numAggregationPeriods: 42,
                        onlyFinalAttempt: true,
                        playbookUrl: 'Test string',
                        thresholdType: 'Test string',
                        thresholdValue: {
                          absolute: 'Test string',
                          percentage: 42,
                        },
                        warningEnumList: {
                          enumStrings: ['Test string'],
                          filterType: 'Test string',
                        },
                      },
                    ],
                    cloudSchedulerConfig: {
                      cronTab: 'Test string',
                      errorMessage: 'Test string',
                      location: 'Test string',
                      serviceAccountEmail: 'Test string',
                    },
                    description: 'Test string',
                    enabledClients: ['Test string'],
                    errorCatcherId: 'Test string',
                    inputVariables: {
                      names: ['Test string'],
                    },
                    label: 'Test string',
                    nextTasksExecutionPolicy: 'Test string',
                    outputVariables: {
                      names: ['Test string'],
                    },
                    pauseWorkflowExecutions: true,
                    position: {
                      x: 42,
                      y: 42,
                    },
                    properties: {
                      A: 'Test string',
                    },
                    startTasks: [
                      {
                        combinedConditions: [
                          {
                            conditions: [
                              {
                                eventPropertyKey: 'Test string',
                                operator: 'Test string',
                                value: {
                                  booleanValue: true,
                                  doubleArray: {
                                    values: [42],
                                  },
                                  doubleValue: 42,
                                  intArray: {
                                    values: ['Test string'],
                                  },
                                  intValue: 'Test string',
                                  protoValue: {
                                    A: 42,
                                  },
                                  stringArray: {
                                    values: ['Test string'],
                                  },
                                  stringValue: 'Test string',
                                },
                              },
                            ],
                          },
                        ],
                        condition: 'Test string',
                        description: 'Test string',
                        label: 'Test string',
                        taskConfigId: 'Test string',
                        taskNumber: 'Test string',
                      },
                    ],
                    triggerCriteria: {
                      condition: 'Test string',
                      parameters: {
                        parameters: [
                          {
                            key: 'Test string',
                            masked: true,
                            value: {
                              booleanArray: {
                                booleanValues: [true],
                              },
                              booleanValue: true,
                              doubleArray: {
                                doubleValues: [42],
                              },
                              doubleValue: 42,
                              intArray: {
                                intValues: ['Test string'],
                              },
                              intValue: 'Test string',
                              protoArray: {
                                protoValues: [
                                  {
                                    A: 42,
                                  },
                                ],
                              },
                              protoValue: {
                                A: 42,
                              },
                              serializedObjectValue: {
                                objectValue: 'Test string',
                              },
                              stringArray: {
                                stringValues: ['Test string'],
                              },
                              stringValue: 'Test string',
                            },
                          },
                        ],
                      },
                      triggerCriteriaTaskImplementationClassName: 'Test string',
                    },
                    triggerId: 'Test string',
                    triggerName: 'Test string',
                    triggerNumber: 'Test string',
                    triggerType: 'Test string',
                  },
                ],
                updateTime: 'Test string',
                userLabel: 'Test string',
              },
              key: 'Test string',
            },
          ],
        },
        updateTime: 'Test string',
        usageCount: 'Test string',
        usageInfo: 'Test string',
        visibility: 'Test string',
      },
    );
    /** Deletes a template */
    await gapi.client.integrations.projects.locations.templates.delete({
      name: 'Test string',
    });
    /** Downloads a template. Retrieves the `Template` and returns the response as a string. */
    await gapi.client.integrations.projects.locations.templates.download({
      fileFormat: 'Test string',
      name: 'Test string',
    });
    /** Get a template in the specified project. */
    await gapi.client.integrations.projects.locations.templates.get({
      name: 'Test string',
    });
    /** Import the template to an existing integration. This api would keep track of usage_count and last_used_time. PERMISSION_DENIED would be thrown if template is not accessible by client. */
    await gapi.client.integrations.projects.locations.templates.import(
      {
        name: 'Test string',
      },
      {
        integration: 'Test string',
        subIntegrations: {
          A: {
            integration: 'Test string',
            integrationDescription: 'Test string',
          },
        },
      },
    );
    /** Lists all templates matching the filter. */
    await gapi.client.integrations.projects.locations.templates.list({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
      readMask: 'Test string',
    });
    /** Updates the template by given id. */
    await gapi.client.integrations.projects.locations.templates.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        author: 'Test string',
        categories: ['Test string'],
        components: [
          {
            name: 'Test string',
            type: 'Test string',
          },
        ],
        createTime: 'Test string',
        description: 'Test string',
        displayName: 'Test string',
        docLink: 'Test string',
        lastUsedTime: 'Test string',
        name: 'Test string',
        sharedWith: ['Test string'],
        tags: ['Test string'],
        templateBundle: {
          integrationVersionTemplate: {
            integrationVersion: {
              cloudKmsKey: 'Test string',
              cloudLoggingDetails: {
                cloudLoggingSeverity: 'Test string',
                enableCloudLogging: true,
              },
              createdFromTemplate: 'Test string',
              createTime: 'Test string',
              databasePersistencePolicy: 'Test string',
              description: 'Test string',
              enableVariableMasking: true,
              errorCatcherConfigs: [
                {
                  description: 'Test string',
                  errorCatcherId: 'Test string',
                  errorCatcherNumber: 'Test string',
                  label: 'Test string',
                  position: {
                    x: 42,
                    y: 42,
                  },
                  startErrorTasks: [
                    {
                      condition: 'Test string',
                      description: 'Test string',
                      displayName: 'Test string',
                      taskConfigId: 'Test string',
                      taskId: 'Test string',
                    },
                  ],
                },
              ],
              integrationConfigParameters: [
                {
                  parameter: {
                    containsLargeData: true,
                    dataType: 'Test string',
                    defaultValue: {
                      booleanArray: {
                        booleanValues: [true],
                      },
                      booleanValue: true,
                      doubleArray: {
                        doubleValues: [42],
                      },
                      doubleValue: 42,
                      intArray: {
                        intValues: ['Test string'],
                      },
                      intValue: 'Test string',
                      jsonValue: 'Test string',
                      stringArray: {
                        stringValues: ['Test string'],
                      },
                      stringValue: 'Test string',
                    },
                    description: 'Test string',
                    displayName: 'Test string',
                    inputOutputType: 'Test string',
                    isTransient: true,
                    jsonSchema: 'Test string',
                    key: 'Test string',
                    masked: true,
                    producer: 'Test string',
                    searchable: true,
                  },
                  value: {
                    booleanArray: {
                      booleanValues: [true],
                    },
                    booleanValue: true,
                    doubleArray: {
                      doubleValues: [42],
                    },
                    doubleValue: 42,
                    intArray: {
                      intValues: ['Test string'],
                    },
                    intValue: 'Test string',
                    jsonValue: 'Test string',
                    stringArray: {
                      stringValues: ['Test string'],
                    },
                    stringValue: 'Test string',
                  },
                },
              ],
              integrationParameters: [
                {
                  containsLargeData: true,
                  dataType: 'Test string',
                  defaultValue: {
                    booleanArray: {
                      booleanValues: [true],
                    },
                    booleanValue: true,
                    doubleArray: {
                      doubleValues: [42],
                    },
                    doubleValue: 42,
                    intArray: {
                      intValues: ['Test string'],
                    },
                    intValue: 'Test string',
                    jsonValue: 'Test string',
                    stringArray: {
                      stringValues: ['Test string'],
                    },
                    stringValue: 'Test string',
                  },
                  description: 'Test string',
                  displayName: 'Test string',
                  inputOutputType: 'Test string',
                  isTransient: true,
                  jsonSchema: 'Test string',
                  key: 'Test string',
                  masked: true,
                  producer: 'Test string',
                  searchable: true,
                },
              ],
              integrationParametersInternal: {
                parameters: [
                  {
                    attributes: {
                      dataType: 'Test string',
                      defaultValue: {
                        booleanValue: true,
                        doubleArray: {
                          values: [42],
                        },
                        doubleValue: 42,
                        intArray: {
                          values: ['Test string'],
                        },
                        intValue: 'Test string',
                        protoValue: {
                          A: 42,
                        },
                        stringArray: {
                          values: ['Test string'],
                        },
                        stringValue: 'Test string',
                      },
                      isRequired: true,
                      isSearchable: true,
                      logSettings: {
                        logFieldName: 'Test string',
                        seedPeriod: 'Test string',
                        seedScope: 'Test string',
                      },
                      masked: true,
                      readOnly: true,
                      searchable: 'Test string',
                      taskVisibility: ['Test string'],
                    },
                    children: undefined,
                    containsLargeData: true,
                    dataType: 'Test string',
                    defaultValue: {
                      booleanArray: {
                        booleanValues: [true],
                      },
                      booleanValue: true,
                      doubleArray: {
                        doubleValues: [42],
                      },
                      doubleValue: 42,
                      intArray: {
                        intValues: ['Test string'],
                      },
                      intValue: 'Test string',
                      jsonValue: 'Test string',
                      protoArray: {
                        protoValues: [
                          {
                            A: 42,
                          },
                        ],
                      },
                      protoValue: {
                        A: 42,
                      },
                      serializedObjectValue: {
                        objectValue: 'Test string',
                      },
                      stringArray: {
                        stringValues: ['Test string'],
                      },
                      stringValue: 'Test string',
                    },
                    description: 'Test string',
                    inOutType: 'Test string',
                    isTransient: true,
                    jsonSchema: 'Test string',
                    key: 'Test string',
                    name: 'Test string',
                    producedBy: {
                      elementIdentifier: 'Test string',
                      elementType: 'Test string',
                    },
                    producer: 'Test string',
                    protoDefName: 'Test string',
                    protoDefPath: 'Test string',
                    required: true,
                  },
                ],
              },
              lastModifierEmail: 'Test string',
              lockHolder: 'Test string',
              name: 'Test string',
              origin: 'Test string',
              parentTemplateId: 'Test string',
              runAsServiceAccount: 'Test string',
              snapshotNumber: 'Test string',
              state: 'Test string',
              status: 'Test string',
              taskConfigs: [
                {
                  conditionalFailurePolicies: {
                    defaultFailurePolicy: {
                      condition: 'Test string',
                      intervalTime: 'Test string',
                      maxRetries: 42,
                      retryStrategy: 'Test string',
                    },
                    failurePolicies: [
                      {
                        condition: 'Test string',
                        intervalTime: 'Test string',
                        maxRetries: 42,
                        retryStrategy: 'Test string',
                      },
                    ],
                  },
                  description: 'Test string',
                  displayName: 'Test string',
                  errorCatcherId: 'Test string',
                  externalTaskType: 'Test string',
                  failurePolicy: {
                    condition: 'Test string',
                    intervalTime: 'Test string',
                    maxRetries: 42,
                    retryStrategy: 'Test string',
                  },
                  jsonValidationOption: 'Test string',
                  nextTasks: [
                    {
                      condition: 'Test string',
                      description: 'Test string',
                      displayName: 'Test string',
                      taskConfigId: 'Test string',
                      taskId: 'Test string',
                    },
                  ],
                  nextTasksExecutionPolicy: 'Test string',
                  parameters: {
                    A: {
                      key: 'Test string',
                      masked: true,
                      value: {
                        booleanArray: {
                          booleanValues: [true],
                        },
                        booleanValue: true,
                        doubleArray: {
                          doubleValues: [42],
                        },
                        doubleValue: 42,
                        intArray: {
                          intValues: ['Test string'],
                        },
                        intValue: 'Test string',
                        jsonValue: 'Test string',
                        stringArray: {
                          stringValues: ['Test string'],
                        },
                        stringValue: 'Test string',
                      },
                    },
                  },
                  position: {
                    x: 42,
                    y: 42,
                  },
                  successPolicy: {
                    finalState: 'Test string',
                  },
                  synchronousCallFailurePolicy: {
                    condition: 'Test string',
                    intervalTime: 'Test string',
                    maxRetries: 42,
                    retryStrategy: 'Test string',
                  },
                  task: 'Test string',
                  taskExecutionStrategy: 'Test string',
                  taskId: 'Test string',
                  taskTemplate: 'Test string',
                },
              ],
              taskConfigsInternal: [
                {
                  alertConfigs: [
                    {
                      aggregationPeriod: 'Test string',
                      alertDisabled: true,
                      alertName: 'Test string',
                      clientId: 'Test string',
                      durationThresholdMs: 'Test string',
                      errorEnumList: {
                        enumStrings: ['Test string'],
                        filterType: 'Test string',
                      },
                      metricType: 'Test string',
                      numAggregationPeriods: 42,
                      onlyFinalAttempt: true,
                      playbookUrl: 'Test string',
                      thresholdType: 'Test string',
                      thresholdValue: {
                        absolute: 'Test string',
                        percentage: 42,
                      },
                      warningEnumList: {
                        enumStrings: ['Test string'],
                        filterType: 'Test string',
                      },
                    },
                  ],
                  conditionalFailurePolicies: {
                    defaultFailurePolicy: {
                      intervalInSeconds: 'Test string',
                      maxNumRetries: 42,
                      retryCondition: 'Test string',
                      retryStrategy: 'Test string',
                    },
                    failurePolicies: [
                      {
                        intervalInSeconds: 'Test string',
                        maxNumRetries: 42,
                        retryCondition: 'Test string',
                        retryStrategy: 'Test string',
                      },
                    ],
                  },
                  createTime: 'Test string',
                  creatorEmail: 'Test string',
                  description: 'Test string',
                  disableStrictTypeValidation: true,
                  errorCatcherId: 'Test string',
                  externalTaskType: 'Test string',
                  failurePolicy: {
                    intervalInSeconds: 'Test string',
                    maxNumRetries: 42,
                    retryCondition: 'Test string',
                    retryStrategy: 'Test string',
                  },
                  incomingEdgeCount: 42,
                  jsonValidationOption: 'Test string',
                  label: 'Test string',
                  lastModifiedTime: 'Test string',
                  nextTasks: [
                    {
                      combinedConditions: [
                        {
                          conditions: [
                            {
                              eventPropertyKey: 'Test string',
                              operator: 'Test string',
                              value: {
                                booleanValue: true,
                                doubleArray: {
                                  values: [42],
                                },
                                doubleValue: 42,
                                intArray: {
                                  values: ['Test string'],
                                },
                                intValue: 'Test string',
                                protoValue: {
                                  A: 42,
                                },
                                stringArray: {
                                  values: ['Test string'],
                                },
                                stringValue: 'Test string',
                              },
                            },
                          ],
                        },
                      ],
                      condition: 'Test string',
                      description: 'Test string',
                      label: 'Test string',
                      taskConfigId: 'Test string',
                      taskNumber: 'Test string',
                    },
                  ],
                  nextTasksExecutionPolicy: 'Test string',
                  parameters: {
                    A: {
                      dataType: 'Test string',
                      key: 'Test string',
                      masked: true,
                      value: {
                        booleanArray: {
                          booleanValues: [true],
                        },
                        booleanValue: true,
                        doubleArray: {
                          doubleValues: [42],
                        },
                        doubleValue: 42,
                        intArray: {
                          intValues: ['Test string'],
                        },
                        intValue: 'Test string',
                        jsonValue: 'Test string',
                        protoArray: {
                          protoValues: [
                            {
                              A: 42,
                            },
                          ],
                        },
                        protoValue: {
                          A: 42,
                        },
                        serializedObjectValue: {
                          objectValue: 'Test string',
                        },
                        stringArray: {
                          stringValues: ['Test string'],
                        },
                        stringValue: 'Test string',
                      },
                    },
                  },
                  position: {
                    x: 42,
                    y: 42,
                  },
                  precondition: 'Test string',
                  preconditionLabel: 'Test string',
                  rollbackStrategy: {
                    parameters: {
                      parameters: [
                        {
                          dataType: 'Test string',
                          key: 'Test string',
                          masked: true,
                          value: {
                            booleanArray: {
                              booleanValues: [true],
                            },
                            booleanValue: true,
                            doubleArray: {
                              doubleValues: [42],
                            },
                            doubleValue: 42,
                            intArray: {
                              intValues: ['Test string'],
                            },
                            intValue: 'Test string',
                            jsonValue: 'Test string',
                            protoArray: {
                              protoValues: [
                                {
                                  A: 42,
                                },
                              ],
                            },
                            protoValue: {
                              A: 42,
                            },
                            serializedObjectValue: {
                              objectValue: 'Test string',
                            },
                            stringArray: {
                              stringValues: ['Test string'],
                            },
                            stringValue: 'Test string',
                          },
                        },
                      ],
                    },
                    rollbackTaskImplementationClassName: 'Test string',
                    taskNumbersToRollback: ['Test string'],
                  },
                  successPolicy: {
                    finalState: 'Test string',
                  },
                  synchronousCallFailurePolicy: {
                    intervalInSeconds: 'Test string',
                    maxNumRetries: 42,
                    retryCondition: 'Test string',
                    retryStrategy: 'Test string',
                  },
                  taskEntity: {
                    disabledForVpcSc: true,
                    metadata: {
                      activeTaskName: 'Test string',
                      admins: [
                        {
                          googleGroupEmail: 'Test string',
                          userEmail: 'Test string',
                        },
                      ],
                      category: 'Test string',
                      codeSearchLink: 'Test string',
                      defaultJsonValidationOption: 'Test string',
                      defaultSpec: 'Test string',
                      description: 'Test string',
                      descriptiveName: 'Test string',
                      docMarkdown: 'Test string',
                      externalCategory: 'Test string',
                      externalCategorySequence: 42,
                      externalDocHtml: 'Test string',
                      externalDocLink: 'Test string',
                      externalDocMarkdown: 'Test string',
                      g3DocLink: 'Test string',
                      iconLink: 'Test string',
                      isDeprecated: true,
                      name: 'Test string',
                      standaloneExternalDocHtml: 'Test string',
                      status: 'Test string',
                      system: 'Test string',
                      tags: ['Test string'],
                    },
                    paramSpecs: {
                      parameters: [
                        {
                          className: 'Test string',
                          collectionElementClassName: 'Test string',
                          config: {
                            descriptivePhrase: 'Test string',
                            helpText: 'Test string',
                            hideDefaultValue: true,
                            inputDisplayOption: 'Test string',
                            isHidden: true,
                            label: 'Test string',
                            parameterNameOption: 'Test string',
                            subSectionLabel: 'Test string',
                            uiPlaceholderText: 'Test string',
                          },
                          dataType: 'Test string',
                          defaultValue: {
                            booleanArray: {
                              booleanValues: [true],
                            },
                            booleanValue: true,
                            doubleArray: {
                              doubleValues: [42],
                            },
                            doubleValue: 42,
                            intArray: {
                              intValues: ['Test string'],
                            },
                            intValue: 'Test string',
                            jsonValue: 'Test string',
                            protoArray: {
                              protoValues: [
                                {
                                  A: 42,
                                },
                              ],
                            },
                            protoValue: {
                              A: 42,
                            },
                            serializedObjectValue: {
                              objectValue: 'Test string',
                            },
                            stringArray: {
                              stringValues: ['Test string'],
                            },
                            stringValue: 'Test string',
                          },
                          isDeprecated: true,
                          isOutput: true,
                          jsonSchema: 'Test string',
                          key: 'Test string',
                          protoDef: {
                            fullName: 'Test string',
                            path: 'Test string',
                          },
                          required: true,
                          validationRule: {
                            doubleRange: {
                              max: 42,
                              min: 42,
                            },
                            intRange: {
                              max: 'Test string',
                              min: 'Test string',
                            },
                            stringRegex: {
                              exclusive: true,
                              regex: 'Test string',
                            },
                          },
                        },
                      ],
                    },
                    stats: {
                      dimensions: {
                        clientId: 'Test string',
                        enumFilterType: 'Test string',
                        errorEnumString: 'Test string',
                        retryAttempt: 'Test string',
                        taskName: 'Test string',
                        taskNumber: 'Test string',
                        triggerId: 'Test string',
                        warningEnumString: 'Test string',
                        workflowId: 'Test string',
                        workflowName: 'Test string',
                      },
                      durationInSeconds: 42,
                      errorRate: 42,
                      qps: 42,
                      warningRate: 42,
                    },
                    taskType: 'Test string',
                    uiConfig: {
                      taskUiModuleConfigs: [
                        {
                          moduleId: 'Test string',
                        },
                      ],
                    },
                  },
                  taskExecutionStrategy: 'Test string',
                  taskName: 'Test string',
                  taskNumber: 'Test string',
                  taskSpec: 'Test string',
                  taskTemplateName: 'Test string',
                  taskType: 'Test string',
                },
              ],
              teardown: {
                teardownTaskConfigs: [
                  {
                    creatorEmail: 'Test string',
                    name: 'Test string',
                    nextTeardownTask: {
                      name: 'Test string',
                    },
                    parameters: {
                      parameters: [
                        {
                          key: 'Test string',
                          masked: true,
                          value: {
                            booleanArray: {
                              booleanValues: [true],
                            },
                            booleanValue: true,
                            doubleArray: {
                              doubleValues: [42],
                            },
                            doubleValue: 42,
                            intArray: {
                              intValues: ['Test string'],
                            },
                            intValue: 'Test string',
                            protoArray: {
                              protoValues: [
                                {
                                  A: 42,
                                },
                              ],
                            },
                            protoValue: {
                              A: 42,
                            },
                            serializedObjectValue: {
                              objectValue: 'Test string',
                            },
                            stringArray: {
                              stringValues: ['Test string'],
                            },
                            stringValue: 'Test string',
                          },
                        },
                      ],
                    },
                    properties: {
                      properties: [
                        {
                          key: 'Test string',
                          value: {
                            booleanValue: true,
                            doubleArray: {
                              values: [42],
                            },
                            doubleValue: 42,
                            intArray: {
                              values: ['Test string'],
                            },
                            intValue: 'Test string',
                            protoValue: {
                              A: 42,
                            },
                            stringArray: {
                              values: ['Test string'],
                            },
                            stringValue: 'Test string',
                          },
                        },
                      ],
                    },
                    teardownTaskImplementationClassName: 'Test string',
                  },
                ],
              },
              triggerConfigs: [
                {
                  alertConfig: [
                    {
                      aggregationPeriod: 'Test string',
                      alertThreshold: 42,
                      disableAlert: true,
                      displayName: 'Test string',
                      durationThreshold: 'Test string',
                      metricType: 'Test string',
                      onlyFinalAttempt: true,
                      thresholdType: 'Test string',
                      thresholdValue: {
                        absolute: 'Test string',
                        percentage: 42,
                      },
                    },
                  ],
                  cloudSchedulerConfig: {
                    cronTab: 'Test string',
                    errorMessage: 'Test string',
                    location: 'Test string',
                    serviceAccountEmail: 'Test string',
                  },
                  description: 'Test string',
                  errorCatcherId: 'Test string',
                  inputVariables: {
                    names: ['Test string'],
                  },
                  label: 'Test string',
                  nextTasksExecutionPolicy: 'Test string',
                  outputVariables: {
                    names: ['Test string'],
                  },
                  position: {
                    x: 42,
                    y: 42,
                  },
                  properties: {
                    A: 'Test string',
                  },
                  startTasks: [
                    {
                      condition: 'Test string',
                      description: 'Test string',
                      displayName: 'Test string',
                      taskConfigId: 'Test string',
                      taskId: 'Test string',
                    },
                  ],
                  trigger: 'Test string',
                  triggerId: 'Test string',
                  triggerNumber: 'Test string',
                  triggerType: 'Test string',
                },
              ],
              triggerConfigsInternal: [
                {
                  alertConfig: [
                    {
                      aggregationPeriod: 'Test string',
                      alertDisabled: true,
                      alertName: 'Test string',
                      clientId: 'Test string',
                      durationThresholdMs: 'Test string',
                      errorEnumList: {
                        enumStrings: ['Test string'],
                        filterType: 'Test string',
                      },
                      metricType: 'Test string',
                      numAggregationPeriods: 42,
                      onlyFinalAttempt: true,
                      playbookUrl: 'Test string',
                      thresholdType: 'Test string',
                      thresholdValue: {
                        absolute: 'Test string',
                        percentage: 42,
                      },
                      warningEnumList: {
                        enumStrings: ['Test string'],
                        filterType: 'Test string',
                      },
                    },
                  ],
                  cloudSchedulerConfig: {
                    cronTab: 'Test string',
                    errorMessage: 'Test string',
                    location: 'Test string',
                    serviceAccountEmail: 'Test string',
                  },
                  description: 'Test string',
                  enabledClients: ['Test string'],
                  errorCatcherId: 'Test string',
                  inputVariables: {
                    names: ['Test string'],
                  },
                  label: 'Test string',
                  nextTasksExecutionPolicy: 'Test string',
                  outputVariables: {
                    names: ['Test string'],
                  },
                  pauseWorkflowExecutions: true,
                  position: {
                    x: 42,
                    y: 42,
                  },
                  properties: {
                    A: 'Test string',
                  },
                  startTasks: [
                    {
                      combinedConditions: [
                        {
                          conditions: [
                            {
                              eventPropertyKey: 'Test string',
                              operator: 'Test string',
                              value: {
                                booleanValue: true,
                                doubleArray: {
                                  values: [42],
                                },
                                doubleValue: 42,
                                intArray: {
                                  values: ['Test string'],
                                },
                                intValue: 'Test string',
                                protoValue: {
                                  A: 42,
                                },
                                stringArray: {
                                  values: ['Test string'],
                                },
                                stringValue: 'Test string',
                              },
                            },
                          ],
                        },
                      ],
                      condition: 'Test string',
                      description: 'Test string',
                      label: 'Test string',
                      taskConfigId: 'Test string',
                      taskNumber: 'Test string',
                    },
                  ],
                  triggerCriteria: {
                    condition: 'Test string',
                    parameters: {
                      parameters: [
                        {
                          key: 'Test string',
                          masked: true,
                          value: {
                            booleanArray: {
                              booleanValues: [true],
                            },
                            booleanValue: true,
                            doubleArray: {
                              doubleValues: [42],
                            },
                            doubleValue: 42,
                            intArray: {
                              intValues: ['Test string'],
                            },
                            intValue: 'Test string',
                            protoArray: {
                              protoValues: [
                                {
                                  A: 42,
                                },
                              ],
                            },
                            protoValue: {
                              A: 42,
                            },
                            serializedObjectValue: {
                              objectValue: 'Test string',
                            },
                            stringArray: {
                              stringValues: ['Test string'],
                            },
                            stringValue: 'Test string',
                          },
                        },
                      ],
                    },
                    triggerCriteriaTaskImplementationClassName: 'Test string',
                  },
                  triggerId: 'Test string',
                  triggerName: 'Test string',
                  triggerNumber: 'Test string',
                  triggerType: 'Test string',
                },
              ],
              updateTime: 'Test string',
              userLabel: 'Test string',
            },
            key: 'Test string',
          },
          subIntegrationVersionTemplates: [
            {
              integrationVersion: {
                cloudKmsKey: 'Test string',
                cloudLoggingDetails: {
                  cloudLoggingSeverity: 'Test string',
                  enableCloudLogging: true,
                },
                createdFromTemplate: 'Test string',
                createTime: 'Test string',
                databasePersistencePolicy: 'Test string',
                description: 'Test string',
                enableVariableMasking: true,
                errorCatcherConfigs: [
                  {
                    description: 'Test string',
                    errorCatcherId: 'Test string',
                    errorCatcherNumber: 'Test string',
                    label: 'Test string',
                    position: {
                      x: 42,
                      y: 42,
                    },
                    startErrorTasks: [
                      {
                        condition: 'Test string',
                        description: 'Test string',
                        displayName: 'Test string',
                        taskConfigId: 'Test string',
                        taskId: 'Test string',
                      },
                    ],
                  },
                ],
                integrationConfigParameters: [
                  {
                    parameter: {
                      containsLargeData: true,
                      dataType: 'Test string',
                      defaultValue: {
                        booleanArray: {
                          booleanValues: [true],
                        },
                        booleanValue: true,
                        doubleArray: {
                          doubleValues: [42],
                        },
                        doubleValue: 42,
                        intArray: {
                          intValues: ['Test string'],
                        },
                        intValue: 'Test string',
                        jsonValue: 'Test string',
                        stringArray: {
                          stringValues: ['Test string'],
                        },
                        stringValue: 'Test string',
                      },
                      description: 'Test string',
                      displayName: 'Test string',
                      inputOutputType: 'Test string',
                      isTransient: true,
                      jsonSchema: 'Test string',
                      key: 'Test string',
                      masked: true,
                      producer: 'Test string',
                      searchable: true,
                    },
                    value: {
                      booleanArray: {
                        booleanValues: [true],
                      },
                      booleanValue: true,
                      doubleArray: {
                        doubleValues: [42],
                      },
                      doubleValue: 42,
                      intArray: {
                        intValues: ['Test string'],
                      },
                      intValue: 'Test string',
                      jsonValue: 'Test string',
                      stringArray: {
                        stringValues: ['Test string'],
                      },
                      stringValue: 'Test string',
                    },
                  },
                ],
                integrationParameters: [
                  {
                    containsLargeData: true,
                    dataType: 'Test string',
                    defaultValue: {
                      booleanArray: {
                        booleanValues: [true],
                      },
                      booleanValue: true,
                      doubleArray: {
                        doubleValues: [42],
                      },
                      doubleValue: 42,
                      intArray: {
                        intValues: ['Test string'],
                      },
                      intValue: 'Test string',
                      jsonValue: 'Test string',
                      stringArray: {
                        stringValues: ['Test string'],
                      },
                      stringValue: 'Test string',
                    },
                    description: 'Test string',
                    displayName: 'Test string',
                    inputOutputType: 'Test string',
                    isTransient: true,
                    jsonSchema: 'Test string',
                    key: 'Test string',
                    masked: true,
                    producer: 'Test string',
                    searchable: true,
                  },
                ],
                integrationParametersInternal: {
                  parameters: [
                    {
                      attributes: {
                        dataType: 'Test string',
                        defaultValue: {
                          booleanValue: true,
                          doubleArray: {
                            values: [42],
                          },
                          doubleValue: 42,
                          intArray: {
                            values: ['Test string'],
                          },
                          intValue: 'Test string',
                          protoValue: {
                            A: 42,
                          },
                          stringArray: {
                            values: ['Test string'],
                          },
                          stringValue: 'Test string',
                        },
                        isRequired: true,
                        isSearchable: true,
                        logSettings: {
                          logFieldName: 'Test string',
                          seedPeriod: 'Test string',
                          seedScope: 'Test string',
                        },
                        masked: true,
                        readOnly: true,
                        searchable: 'Test string',
                        taskVisibility: ['Test string'],
                      },
                      children: undefined,
                      containsLargeData: true,
                      dataType: 'Test string',
                      defaultValue: {
                        booleanArray: {
                          booleanValues: [true],
                        },
                        booleanValue: true,
                        doubleArray: {
                          doubleValues: [42],
                        },
                        doubleValue: 42,
                        intArray: {
                          intValues: ['Test string'],
                        },
                        intValue: 'Test string',
                        jsonValue: 'Test string',
                        protoArray: {
                          protoValues: [
                            {
                              A: 42,
                            },
                          ],
                        },
                        protoValue: {
                          A: 42,
                        },
                        serializedObjectValue: {
                          objectValue: 'Test string',
                        },
                        stringArray: {
                          stringValues: ['Test string'],
                        },
                        stringValue: 'Test string',
                      },
                      description: 'Test string',
                      inOutType: 'Test string',
                      isTransient: true,
                      jsonSchema: 'Test string',
                      key: 'Test string',
                      name: 'Test string',
                      producedBy: {
                        elementIdentifier: 'Test string',
                        elementType: 'Test string',
                      },
                      producer: 'Test string',
                      protoDefName: 'Test string',
                      protoDefPath: 'Test string',
                      required: true,
                    },
                  ],
                },
                lastModifierEmail: 'Test string',
                lockHolder: 'Test string',
                name: 'Test string',
                origin: 'Test string',
                parentTemplateId: 'Test string',
                runAsServiceAccount: 'Test string',
                snapshotNumber: 'Test string',
                state: 'Test string',
                status: 'Test string',
                taskConfigs: [
                  {
                    conditionalFailurePolicies: {
                      defaultFailurePolicy: {
                        condition: 'Test string',
                        intervalTime: 'Test string',
                        maxRetries: 42,
                        retryStrategy: 'Test string',
                      },
                      failurePolicies: [
                        {
                          condition: 'Test string',
                          intervalTime: 'Test string',
                          maxRetries: 42,
                          retryStrategy: 'Test string',
                        },
                      ],
                    },
                    description: 'Test string',
                    displayName: 'Test string',
                    errorCatcherId: 'Test string',
                    externalTaskType: 'Test string',
                    failurePolicy: {
                      condition: 'Test string',
                      intervalTime: 'Test string',
                      maxRetries: 42,
                      retryStrategy: 'Test string',
                    },
                    jsonValidationOption: 'Test string',
                    nextTasks: [
                      {
                        condition: 'Test string',
                        description: 'Test string',
                        displayName: 'Test string',
                        taskConfigId: 'Test string',
                        taskId: 'Test string',
                      },
                    ],
                    nextTasksExecutionPolicy: 'Test string',
                    parameters: {
                      A: {
                        key: 'Test string',
                        masked: true,
                        value: {
                          booleanArray: {
                            booleanValues: [true],
                          },
                          booleanValue: true,
                          doubleArray: {
                            doubleValues: [42],
                          },
                          doubleValue: 42,
                          intArray: {
                            intValues: ['Test string'],
                          },
                          intValue: 'Test string',
                          jsonValue: 'Test string',
                          stringArray: {
                            stringValues: ['Test string'],
                          },
                          stringValue: 'Test string',
                        },
                      },
                    },
                    position: {
                      x: 42,
                      y: 42,
                    },
                    successPolicy: {
                      finalState: 'Test string',
                    },
                    synchronousCallFailurePolicy: {
                      condition: 'Test string',
                      intervalTime: 'Test string',
                      maxRetries: 42,
                      retryStrategy: 'Test string',
                    },
                    task: 'Test string',
                    taskExecutionStrategy: 'Test string',
                    taskId: 'Test string',
                    taskTemplate: 'Test string',
                  },
                ],
                taskConfigsInternal: [
                  {
                    alertConfigs: [
                      {
                        aggregationPeriod: 'Test string',
                        alertDisabled: true,
                        alertName: 'Test string',
                        clientId: 'Test string',
                        durationThresholdMs: 'Test string',
                        errorEnumList: {
                          enumStrings: ['Test string'],
                          filterType: 'Test string',
                        },
                        metricType: 'Test string',
                        numAggregationPeriods: 42,
                        onlyFinalAttempt: true,
                        playbookUrl: 'Test string',
                        thresholdType: 'Test string',
                        thresholdValue: {
                          absolute: 'Test string',
                          percentage: 42,
                        },
                        warningEnumList: {
                          enumStrings: ['Test string'],
                          filterType: 'Test string',
                        },
                      },
                    ],
                    conditionalFailurePolicies: {
                      defaultFailurePolicy: {
                        intervalInSeconds: 'Test string',
                        maxNumRetries: 42,
                        retryCondition: 'Test string',
                        retryStrategy: 'Test string',
                      },
                      failurePolicies: [
                        {
                          intervalInSeconds: 'Test string',
                          maxNumRetries: 42,
                          retryCondition: 'Test string',
                          retryStrategy: 'Test string',
                        },
                      ],
                    },
                    createTime: 'Test string',
                    creatorEmail: 'Test string',
                    description: 'Test string',
                    disableStrictTypeValidation: true,
                    errorCatcherId: 'Test string',
                    externalTaskType: 'Test string',
                    failurePolicy: {
                      intervalInSeconds: 'Test string',
                      maxNumRetries: 42,
                      retryCondition: 'Test string',
                      retryStrategy: 'Test string',
                    },
                    incomingEdgeCount: 42,
                    jsonValidationOption: 'Test string',
                    label: 'Test string',
                    lastModifiedTime: 'Test string',
                    nextTasks: [
                      {
                        combinedConditions: [
                          {
                            conditions: [
                              {
                                eventPropertyKey: 'Test string',
                                operator: 'Test string',
                                value: {
                                  booleanValue: true,
                                  doubleArray: {
                                    values: [42],
                                  },
                                  doubleValue: 42,
                                  intArray: {
                                    values: ['Test string'],
                                  },
                                  intValue: 'Test string',
                                  protoValue: {
                                    A: 42,
                                  },
                                  stringArray: {
                                    values: ['Test string'],
                                  },
                                  stringValue: 'Test string',
                                },
                              },
                            ],
                          },
                        ],
                        condition: 'Test string',
                        description: 'Test string',
                        label: 'Test string',
                        taskConfigId: 'Test string',
                        taskNumber: 'Test string',
                      },
                    ],
                    nextTasksExecutionPolicy: 'Test string',
                    parameters: {
                      A: {
                        dataType: 'Test string',
                        key: 'Test string',
                        masked: true,
                        value: {
                          booleanArray: {
                            booleanValues: [true],
                          },
                          booleanValue: true,
                          doubleArray: {
                            doubleValues: [42],
                          },
                          doubleValue: 42,
                          intArray: {
                            intValues: ['Test string'],
                          },
                          intValue: 'Test string',
                          jsonValue: 'Test string',
                          protoArray: {
                            protoValues: [
                              {
                                A: 42,
                              },
                            ],
                          },
                          protoValue: {
                            A: 42,
                          },
                          serializedObjectValue: {
                            objectValue: 'Test string',
                          },
                          stringArray: {
                            stringValues: ['Test string'],
                          },
                          stringValue: 'Test string',
                        },
                      },
                    },
                    position: {
                      x: 42,
                      y: 42,
                    },
                    precondition: 'Test string',
                    preconditionLabel: 'Test string',
                    rollbackStrategy: {
                      parameters: {
                        parameters: [
                          {
                            dataType: 'Test string',
                            key: 'Test string',
                            masked: true,
                            value: {
                              booleanArray: {
                                booleanValues: [true],
                              },
                              booleanValue: true,
                              doubleArray: {
                                doubleValues: [42],
                              },
                              doubleValue: 42,
                              intArray: {
                                intValues: ['Test string'],
                              },
                              intValue: 'Test string',
                              jsonValue: 'Test string',
                              protoArray: {
                                protoValues: [
                                  {
                                    A: 42,
                                  },
                                ],
                              },
                              protoValue: {
                                A: 42,
                              },
                              serializedObjectValue: {
                                objectValue: 'Test string',
                              },
                              stringArray: {
                                stringValues: ['Test string'],
                              },
                              stringValue: 'Test string',
                            },
                          },
                        ],
                      },
                      rollbackTaskImplementationClassName: 'Test string',
                      taskNumbersToRollback: ['Test string'],
                    },
                    successPolicy: {
                      finalState: 'Test string',
                    },
                    synchronousCallFailurePolicy: {
                      intervalInSeconds: 'Test string',
                      maxNumRetries: 42,
                      retryCondition: 'Test string',
                      retryStrategy: 'Test string',
                    },
                    taskEntity: {
                      disabledForVpcSc: true,
                      metadata: {
                        activeTaskName: 'Test string',
                        admins: [
                          {
                            googleGroupEmail: 'Test string',
                            userEmail: 'Test string',
                          },
                        ],
                        category: 'Test string',
                        codeSearchLink: 'Test string',
                        defaultJsonValidationOption: 'Test string',
                        defaultSpec: 'Test string',
                        description: 'Test string',
                        descriptiveName: 'Test string',
                        docMarkdown: 'Test string',
                        externalCategory: 'Test string',
                        externalCategorySequence: 42,
                        externalDocHtml: 'Test string',
                        externalDocLink: 'Test string',
                        externalDocMarkdown: 'Test string',
                        g3DocLink: 'Test string',
                        iconLink: 'Test string',
                        isDeprecated: true,
                        name: 'Test string',
                        standaloneExternalDocHtml: 'Test string',
                        status: 'Test string',
                        system: 'Test string',
                        tags: ['Test string'],
                      },
                      paramSpecs: {
                        parameters: [
                          {
                            className: 'Test string',
                            collectionElementClassName: 'Test string',
                            config: {
                              descriptivePhrase: 'Test string',
                              helpText: 'Test string',
                              hideDefaultValue: true,
                              inputDisplayOption: 'Test string',
                              isHidden: true,
                              label: 'Test string',
                              parameterNameOption: 'Test string',
                              subSectionLabel: 'Test string',
                              uiPlaceholderText: 'Test string',
                            },
                            dataType: 'Test string',
                            defaultValue: {
                              booleanArray: {
                                booleanValues: [true],
                              },
                              booleanValue: true,
                              doubleArray: {
                                doubleValues: [42],
                              },
                              doubleValue: 42,
                              intArray: {
                                intValues: ['Test string'],
                              },
                              intValue: 'Test string',
                              jsonValue: 'Test string',
                              protoArray: {
                                protoValues: [
                                  {
                                    A: 42,
                                  },
                                ],
                              },
                              protoValue: {
                                A: 42,
                              },
                              serializedObjectValue: {
                                objectValue: 'Test string',
                              },
                              stringArray: {
                                stringValues: ['Test string'],
                              },
                              stringValue: 'Test string',
                            },
                            isDeprecated: true,
                            isOutput: true,
                            jsonSchema: 'Test string',
                            key: 'Test string',
                            protoDef: {
                              fullName: 'Test string',
                              path: 'Test string',
                            },
                            required: true,
                            validationRule: {
                              doubleRange: {
                                max: 42,
                                min: 42,
                              },
                              intRange: {
                                max: 'Test string',
                                min: 'Test string',
                              },
                              stringRegex: {
                                exclusive: true,
                                regex: 'Test string',
                              },
                            },
                          },
                        ],
                      },
                      stats: {
                        dimensions: {
                          clientId: 'Test string',
                          enumFilterType: 'Test string',
                          errorEnumString: 'Test string',
                          retryAttempt: 'Test string',
                          taskName: 'Test string',
                          taskNumber: 'Test string',
                          triggerId: 'Test string',
                          warningEnumString: 'Test string',
                          workflowId: 'Test string',
                          workflowName: 'Test string',
                        },
                        durationInSeconds: 42,
                        errorRate: 42,
                        qps: 42,
                        warningRate: 42,
                      },
                      taskType: 'Test string',
                      uiConfig: {
                        taskUiModuleConfigs: [
                          {
                            moduleId: 'Test string',
                          },
                        ],
                      },
                    },
                    taskExecutionStrategy: 'Test string',
                    taskName: 'Test string',
                    taskNumber: 'Test string',
                    taskSpec: 'Test string',
                    taskTemplateName: 'Test string',
                    taskType: 'Test string',
                  },
                ],
                teardown: {
                  teardownTaskConfigs: [
                    {
                      creatorEmail: 'Test string',
                      name: 'Test string',
                      nextTeardownTask: {
                        name: 'Test string',
                      },
                      parameters: {
                        parameters: [
                          {
                            key: 'Test string',
                            masked: true,
                            value: {
                              booleanArray: {
                                booleanValues: [true],
                              },
                              booleanValue: true,
                              doubleArray: {
                                doubleValues: [42],
                              },
                              doubleValue: 42,
                              intArray: {
                                intValues: ['Test string'],
                              },
                              intValue: 'Test string',
                              protoArray: {
                                protoValues: [
                                  {
                                    A: 42,
                                  },
                                ],
                              },
                              protoValue: {
                                A: 42,
                              },
                              serializedObjectValue: {
                                objectValue: 'Test string',
                              },
                              stringArray: {
                                stringValues: ['Test string'],
                              },
                              stringValue: 'Test string',
                            },
                          },
                        ],
                      },
                      properties: {
                        properties: [
                          {
                            key: 'Test string',
                            value: {
                              booleanValue: true,
                              doubleArray: {
                                values: [42],
                              },
                              doubleValue: 42,
                              intArray: {
                                values: ['Test string'],
                              },
                              intValue: 'Test string',
                              protoValue: {
                                A: 42,
                              },
                              stringArray: {
                                values: ['Test string'],
                              },
                              stringValue: 'Test string',
                            },
                          },
                        ],
                      },
                      teardownTaskImplementationClassName: 'Test string',
                    },
                  ],
                },
                triggerConfigs: [
                  {
                    alertConfig: [
                      {
                        aggregationPeriod: 'Test string',
                        alertThreshold: 42,
                        disableAlert: true,
                        displayName: 'Test string',
                        durationThreshold: 'Test string',
                        metricType: 'Test string',
                        onlyFinalAttempt: true,
                        thresholdType: 'Test string',
                        thresholdValue: {
                          absolute: 'Test string',
                          percentage: 42,
                        },
                      },
                    ],
                    cloudSchedulerConfig: {
                      cronTab: 'Test string',
                      errorMessage: 'Test string',
                      location: 'Test string',
                      serviceAccountEmail: 'Test string',
                    },
                    description: 'Test string',
                    errorCatcherId: 'Test string',
                    inputVariables: {
                      names: ['Test string'],
                    },
                    label: 'Test string',
                    nextTasksExecutionPolicy: 'Test string',
                    outputVariables: {
                      names: ['Test string'],
                    },
                    position: {
                      x: 42,
                      y: 42,
                    },
                    properties: {
                      A: 'Test string',
                    },
                    startTasks: [
                      {
                        condition: 'Test string',
                        description: 'Test string',
                        displayName: 'Test string',
                        taskConfigId: 'Test string',
                        taskId: 'Test string',
                      },
                    ],
                    trigger: 'Test string',
                    triggerId: 'Test string',
                    triggerNumber: 'Test string',
                    triggerType: 'Test string',
                  },
                ],
                triggerConfigsInternal: [
                  {
                    alertConfig: [
                      {
                        aggregationPeriod: 'Test string',
                        alertDisabled: true,
                        alertName: 'Test string',
                        clientId: 'Test string',
                        durationThresholdMs: 'Test string',
                        errorEnumList: {
                          enumStrings: ['Test string'],
                          filterType: 'Test string',
                        },
                        metricType: 'Test string',
                        numAggregationPeriods: 42,
                        onlyFinalAttempt: true,
                        playbookUrl: 'Test string',
                        thresholdType: 'Test string',
                        thresholdValue: {
                          absolute: 'Test string',
                          percentage: 42,
                        },
                        warningEnumList: {
                          enumStrings: ['Test string'],
                          filterType: 'Test string',
                        },
                      },
                    ],
                    cloudSchedulerConfig: {
                      cronTab: 'Test string',
                      errorMessage: 'Test string',
                      location: 'Test string',
                      serviceAccountEmail: 'Test string',
                    },
                    description: 'Test string',
                    enabledClients: ['Test string'],
                    errorCatcherId: 'Test string',
                    inputVariables: {
                      names: ['Test string'],
                    },
                    label: 'Test string',
                    nextTasksExecutionPolicy: 'Test string',
                    outputVariables: {
                      names: ['Test string'],
                    },
                    pauseWorkflowExecutions: true,
                    position: {
                      x: 42,
                      y: 42,
                    },
                    properties: {
                      A: 'Test string',
                    },
                    startTasks: [
                      {
                        combinedConditions: [
                          {
                            conditions: [
                              {
                                eventPropertyKey: 'Test string',
                                operator: 'Test string',
                                value: {
                                  booleanValue: true,
                                  doubleArray: {
                                    values: [42],
                                  },
                                  doubleValue: 42,
                                  intArray: {
                                    values: ['Test string'],
                                  },
                                  intValue: 'Test string',
                                  protoValue: {
                                    A: 42,
                                  },
                                  stringArray: {
                                    values: ['Test string'],
                                  },
                                  stringValue: 'Test string',
                                },
                              },
                            ],
                          },
                        ],
                        condition: 'Test string',
                        description: 'Test string',
                        label: 'Test string',
                        taskConfigId: 'Test string',
                        taskNumber: 'Test string',
                      },
                    ],
                    triggerCriteria: {
                      condition: 'Test string',
                      parameters: {
                        parameters: [
                          {
                            key: 'Test string',
                            masked: true,
                            value: {
                              booleanArray: {
                                booleanValues: [true],
                              },
                              booleanValue: true,
                              doubleArray: {
                                doubleValues: [42],
                              },
                              doubleValue: 42,
                              intArray: {
                                intValues: ['Test string'],
                              },
                              intValue: 'Test string',
                              protoArray: {
                                protoValues: [
                                  {
                                    A: 42,
                                  },
                                ],
                              },
                              protoValue: {
                                A: 42,
                              },
                              serializedObjectValue: {
                                objectValue: 'Test string',
                              },
                              stringArray: {
                                stringValues: ['Test string'],
                              },
                              stringValue: 'Test string',
                            },
                          },
                        ],
                      },
                      triggerCriteriaTaskImplementationClassName: 'Test string',
                    },
                    triggerId: 'Test string',
                    triggerName: 'Test string',
                    triggerNumber: 'Test string',
                    triggerType: 'Test string',
                  },
                ],
                updateTime: 'Test string',
                userLabel: 'Test string',
              },
              key: 'Test string',
            },
          ],
        },
        updateTime: 'Test string',
        usageCount: 'Test string',
        usageInfo: 'Test string',
        visibility: 'Test string',
      },
    );
    /** Search templates based on user query and filters. This api would query the templates and return a list of templates based on the user filter. */
    await gapi.client.integrations.projects.locations.templates.search({
      enableNaturalLanguageQueryUnderstanding: true,
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
      query: 'Test string',
      readMask: 'Test string',
    });
    /** Share a template with other clients. Only the template owner can share the templates with other projects. PERMISSION_DENIED would be thrown if the request is not from the owner. */
    await gapi.client.integrations.projects.locations.templates.share(
      {
        name: 'Test string',
      },
      {
        resourceNames: ['Test string'],
      },
    );
    /** Unshare a template from given clients. Owner of the template can unshare template with clients. Shared client can only unshare the template from itself. PERMISSION_DENIED would be thrown if request is not from owner or for unsharing itself. */
    await gapi.client.integrations.projects.locations.templates.unshare(
      {
        name: 'Test string',
      },
      {
        resourceNames: ['Test string'],
      },
    );
    /** Uploads a template. The content can be a previously downloaded template. Performs the same function as CreateTemplate, but accepts input in a string format, which holds the complete representation of the Template content. */
    await gapi.client.integrations.projects.locations.templates.upload(
      {
        parent: 'Test string',
      },
      {
        content: 'Test string',
        fileFormat: 'Test string',
      },
    );
    /** Use the template to create integration. This api would keep track of usage_count and last_used_time. PERMISSION_DENIED would be thrown if template is not accessible by client. */
    await gapi.client.integrations.projects.locations.templates.use(
      {
        name: 'Test string',
      },
      {
        integrationDetails: {
          integration: 'Test string',
          integrationDescription: 'Test string',
        },
        integrationRegion: 'Test string',
        subIntegrations: {
          A: {
            integration: 'Test string',
            integrationDescription: 'Test string',
          },
        },
      },
    );
  }
});
