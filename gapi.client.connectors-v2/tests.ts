/* This is stub file for gapi.client.connectors-v2 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20230913

gapi.load('client', async () => {
    /** now we can use gapi.client */

    await gapi.client.load('https://connectors.googleapis.com/$discovery/rest?version=v2');
    /** now we can use gapi.client.connectors */

    /** don't forget to authenticate your client before sending any request to resources: */
    /** declare client_id registered in Google Developers Console */
    const client_id = '<<PUT YOUR CLIENT ID HERE>>';
    const scope = [
        /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
        'https://www.googleapis.com/auth/cloud-platform',
    ];
    const immediate = false;
    gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
        if (authResult && !authResult.error) {
            /** handle successful authorization */
            run();
        } else {
            /** handle authorization error */
        }
    });

    async function run() {
        /**
         * Executes a SQL statement specified in the body of the request. An example of this SQL statement in the case of Salesforce connector would be 'select * from Account a, Order o where a.Id
         * = o.AccountId'.
         */
        await gapi.client.connectors.projects.locations.connections.executeSqlQuery({
            connection: "Test string",
        }, {
            query: {
                maxRows: "Test string",
                query: "Test string",
                queryParameters: [
                    {
                        dataType: "Test string",
                        value: 42,
                    }
                ],
                timeout: "Test string",
            },
        });
        /** Executes an action with the name specified in the request. The input parameters for executing the action are passed through the body of the ExecuteAction request. */
        await gapi.client.connectors.projects.locations.connections.actions.execute({
            name: "Test string",
        }, {
            parameters: {
                A: 42
            },
        });
        /** Gets the schema of the given action. */
        await gapi.client.connectors.projects.locations.connections.actions.get({
            name: "Test string",
        });
        /** Gets the schema of all the actions supported by the connector. */
        await gapi.client.connectors.projects.locations.connections.actions.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
            view: "Test string",
        });
        /** Gets metadata of given entity type */
        await gapi.client.connectors.projects.locations.connections.entityTypes.get({
            name: "Test string",
        });
        /** Lists metadata related to all entity types present in the external system. */
        await gapi.client.connectors.projects.locations.connections.entityTypes.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
            view: "Test string",
        });
        /**
         * Creates a new entity row of the specified entity type in the external system. The field values for creating the row are contained in the body of the request. The response message
         * contains a `Entity` message object returned as a response by the external system.
         */
        await gapi.client.connectors.projects.locations.connections.entityTypes.entities.create({
            parent: "Test string",
        }, {
            fields: {
                A: 42
            },
            name: "Test string",
        });
        /** Deletes an existing entity row matching the entity type and entity id specified in the request. */
        await gapi.client.connectors.projects.locations.connections.entityTypes.entities.delete({
            name: "Test string",
        });
        /** Deletes entities based on conditions specified in the request and not on entity id. */
        await gapi.client.connectors.projects.locations.connections.entityTypes.entities.deleteEntitiesWithConditions({
            conditions: "Test string",
            entityType: "Test string",
        });
        /** Gets a single entity row matching the entity type and entity id specified in the request. */
        await gapi.client.connectors.projects.locations.connections.entityTypes.entities.get({
            name: "Test string",
        });
        /**
         * Lists entity rows of a particular entity type contained in the request. Note: 1. Currently, only max of one 'sort_by' column is supported. 2. If no 'sort_by' column is provided, the
         * primary key of the table is used. If zero or more than one primary key is available, we default to the unpaginated list entities logic which only returns the first page. 3. The values
         * of the 'sort_by' columns must uniquely identify an entity row, otherwise undefined behaviors may be observed during pagination. 4. Since transactions are not supported, any updates,
         * inserts or deletes during pagination can lead to stale data being returned or other unexpected behaviors.
         */
        await gapi.client.connectors.projects.locations.connections.entityTypes.entities.list({
            conditions: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
            sortBy: "Test string",
        });
        /**
         * Updates an existing entity row matching the entity type and entity id specified in the request. The fields in the entity row that need to be modified are contained in the body of the
         * request. All unspecified fields are left unchanged. The response message contains a `Entity` message object returned as a response by the external system.
         */
        await gapi.client.connectors.projects.locations.connections.entityTypes.entities.patch({
            name: "Test string",
        }, {
            fields: {
                A: 42
            },
            name: "Test string",
        });
        /** Updates entities based on conditions specified in the request and not on entity id. */
        await gapi.client.connectors.projects.locations.connections.entityTypes.entities.updateEntitiesWithConditions({
            conditions: "Test string",
            entityType: "Test string",
        }, {
            fields: {
                A: 42
            },
            name: "Test string",
        });
    }
});
