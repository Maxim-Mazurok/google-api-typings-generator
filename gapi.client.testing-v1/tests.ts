/* This is stub file for gapi.client.testing-v1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20240216

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://testing.googleapis.com/$discovery/rest?version=v1'
  );
  /** now we can use gapi.client.testing */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
    'https://www.googleapis.com/auth/cloud-platform',
    /** View your data across Google Cloud services and see the email address of your Google Account */
    'https://www.googleapis.com/auth/cloud-platform.read-only',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Gets the details of an Android application APK. */
    await gapi.client.testing.applicationDetailService.getApkDetails(
      {
        'bundleLocation.gcsPath': 'Test string',
      },
      {
        gcsPath: 'Test string',
      }
    );
    /** POST /v1/projects/{project_id}/deviceSessions/{device_session_id}:cancel Changes the DeviceSession to state FINISHED and terminates all connections. Canceled sessions are not deleted and can be retrieved or listed by the user until they expire based on the 28 day deletion policy. */
    await gapi.client.testing.projects.deviceSessions.cancel(
      {
        name: 'Test string',
      },
      {}
    );
    /** POST /v1/projects/{project_id}/deviceSessions */
    await gapi.client.testing.projects.deviceSessions.create(
      {
        parent: 'Test string',
      },
      {
        activeStartTime: 'Test string',
        androidDevice: {
          androidModelId: 'Test string',
          androidVersionId: 'Test string',
          locale: 'Test string',
          orientation: 'Test string',
        },
        createTime: 'Test string',
        displayName: 'Test string',
        expireTime: 'Test string',
        inactivityTimeout: 'Test string',
        name: 'Test string',
        state: 'Test string',
        stateHistories: [
          {
            eventTime: 'Test string',
            sessionState: 'Test string',
            stateMessage: 'Test string',
          },
        ],
        ttl: 'Test string',
      }
    );
    /** GET /v1/projects/{project_id}/deviceSessions/{device_session_id} Return a DeviceSession, which documents the allocation status and whether the device is allocated. Clients making requests from this API must poll GetDeviceSession. */
    await gapi.client.testing.projects.deviceSessions.get({
      name: 'Test string',
    });
    /** GET /v1/projects/{project_id}/deviceSessions Lists device Sessions owned by the project user. */
    await gapi.client.testing.projects.deviceSessions.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** PATCH /v1/projects/{projectId}/deviceSessions/deviceSessionId}:updateDeviceSession Updates the current device session to the fields described by the update_mask. */
    await gapi.client.testing.projects.deviceSessions.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        activeStartTime: 'Test string',
        androidDevice: {
          androidModelId: 'Test string',
          androidVersionId: 'Test string',
          locale: 'Test string',
          orientation: 'Test string',
        },
        createTime: 'Test string',
        displayName: 'Test string',
        expireTime: 'Test string',
        inactivityTimeout: 'Test string',
        name: 'Test string',
        state: 'Test string',
        stateHistories: [
          {
            eventTime: 'Test string',
            sessionState: 'Test string',
            stateMessage: 'Test string',
          },
        ],
        ttl: 'Test string',
      }
    );
    /** Cancels unfinished test executions in a test matrix. This call returns immediately and cancellation proceeds asynchronously. If the matrix is already final, this operation will have no effect. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to read project - INVALID_ARGUMENT - if the request is malformed - NOT_FOUND - if the Test Matrix does not exist */
    await gapi.client.testing.projects.testMatrices.cancel({
      projectId: 'Test string',
      testMatrixId: 'Test string',
    });
    /** Creates and runs a matrix of tests according to the given specifications. Unsupported environments will be returned in the state UNSUPPORTED. A test matrix is limited to use at most 2000 devices in parallel. The returned matrix will not yet contain the executions that will be created for this matrix. Execution creation happens later on and will require a call to GetTestMatrix. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to write to project - INVALID_ARGUMENT - if the request is malformed or if the matrix tries to use too many simultaneous devices. */
    await gapi.client.testing.projects.testMatrices.create(
      {
        projectId: 'Test string',
        requestId: 'Test string',
      },
      {
        clientInfo: {
          clientInfoDetails: [
            {
              key: 'Test string',
              value: 'Test string',
            },
          ],
          name: 'Test string',
        },
        environmentMatrix: {
          androidDeviceList: {
            androidDevices: [
              {
                androidModelId: 'Test string',
                androidVersionId: 'Test string',
                locale: 'Test string',
                orientation: 'Test string',
              },
            ],
          },
          androidMatrix: {
            androidModelIds: ['Test string'],
            androidVersionIds: ['Test string'],
            locales: ['Test string'],
            orientations: ['Test string'],
          },
          iosDeviceList: {
            iosDevices: [
              {
                iosModelId: 'Test string',
                iosVersionId: 'Test string',
                locale: 'Test string',
                orientation: 'Test string',
              },
            ],
          },
        },
        extendedInvalidMatrixDetails: [
          {
            message: 'Test string',
            reason: 'Test string',
          },
        ],
        failFast: true,
        flakyTestAttempts: 42,
        invalidMatrixDetails: 'Test string',
        outcomeSummary: 'Test string',
        projectId: 'Test string',
        resultStorage: {
          googleCloudStorage: {
            gcsPath: 'Test string',
          },
          resultsUrl: 'Test string',
          toolResultsExecution: {
            executionId: 'Test string',
            historyId: 'Test string',
            projectId: 'Test string',
          },
          toolResultsHistory: {
            historyId: 'Test string',
            projectId: 'Test string',
          },
        },
        state: 'Test string',
        testExecutions: [
          {
            environment: {
              androidDevice: {
                androidModelId: 'Test string',
                androidVersionId: 'Test string',
                locale: 'Test string',
                orientation: 'Test string',
              },
              iosDevice: {
                iosModelId: 'Test string',
                iosVersionId: 'Test string',
                locale: 'Test string',
                orientation: 'Test string',
              },
            },
            id: 'Test string',
            matrixId: 'Test string',
            projectId: 'Test string',
            shard: {
              estimatedShardDuration: 'Test string',
              numShards: 42,
              shardIndex: 42,
              testTargetsForShard: {
                testTargets: ['Test string'],
              },
            },
            state: 'Test string',
            testDetails: {
              errorMessage: 'Test string',
              progressMessages: ['Test string'],
            },
            testSpecification: {
              androidInstrumentationTest: {
                appApk: {
                  gcsPath: 'Test string',
                },
                appBundle: {
                  bundleLocation: {
                    gcsPath: 'Test string',
                  },
                },
                appPackageId: 'Test string',
                orchestratorOption: 'Test string',
                shardingOption: {
                  manualSharding: {
                    testTargetsForShard: [
                      {
                        testTargets: ['Test string'],
                      },
                    ],
                  },
                  smartSharding: {
                    targetedShardDuration: 'Test string',
                  },
                  uniformSharding: {
                    numShards: 42,
                  },
                },
                testApk: {
                  gcsPath: 'Test string',
                },
                testPackageId: 'Test string',
                testRunnerClass: 'Test string',
                testTargets: ['Test string'],
              },
              androidRoboTest: {
                appApk: {
                  gcsPath: 'Test string',
                },
                appBundle: {
                  bundleLocation: {
                    gcsPath: 'Test string',
                  },
                },
                appInitialActivity: 'Test string',
                appPackageId: 'Test string',
                maxDepth: 42,
                maxSteps: 42,
                roboDirectives: [
                  {
                    actionType: 'Test string',
                    inputText: 'Test string',
                    resourceName: 'Test string',
                  },
                ],
                roboMode: 'Test string',
                roboScript: {
                  gcsPath: 'Test string',
                },
                startingIntents: [
                  {
                    launcherActivity: {},
                    noActivity: {},
                    startActivity: {
                      action: 'Test string',
                      categories: ['Test string'],
                      uri: 'Test string',
                    },
                    timeout: 'Test string',
                  },
                ],
              },
              androidTestLoop: {
                appApk: {
                  gcsPath: 'Test string',
                },
                appBundle: {
                  bundleLocation: {
                    gcsPath: 'Test string',
                  },
                },
                appPackageId: 'Test string',
                scenarioLabels: ['Test string'],
                scenarios: [42],
              },
              disablePerformanceMetrics: true,
              disableVideoRecording: true,
              iosRoboTest: {
                appBundleId: 'Test string',
                appIpa: {
                  gcsPath: 'Test string',
                },
                roboScript: {
                  gcsPath: 'Test string',
                },
              },
              iosTestLoop: {
                appBundleId: 'Test string',
                appIpa: {
                  gcsPath: 'Test string',
                },
                scenarios: [42],
              },
              iosTestSetup: {
                additionalIpas: [
                  {
                    gcsPath: 'Test string',
                  },
                ],
                networkProfile: 'Test string',
                pullDirectories: [
                  {
                    bundleId: 'Test string',
                    content: {
                      gcsPath: 'Test string',
                    },
                    devicePath: 'Test string',
                  },
                ],
                pushFiles: [
                  {
                    bundleId: 'Test string',
                    content: {
                      gcsPath: 'Test string',
                    },
                    devicePath: 'Test string',
                  },
                ],
              },
              iosXcTest: {
                appBundleId: 'Test string',
                testSpecialEntitlements: true,
                testsZip: {
                  gcsPath: 'Test string',
                },
                xcodeVersion: 'Test string',
                xctestrun: {
                  gcsPath: 'Test string',
                },
              },
              testSetup: {
                account: {
                  googleAuto: {},
                },
                additionalApks: [
                  {
                    location: {
                      gcsPath: 'Test string',
                    },
                    packageName: 'Test string',
                  },
                ],
                directoriesToPull: ['Test string'],
                dontAutograntPermissions: true,
                environmentVariables: [
                  {
                    key: 'Test string',
                    value: 'Test string',
                  },
                ],
                filesToPush: [
                  {
                    obbFile: {
                      obb: {
                        gcsPath: 'Test string',
                      },
                      obbFileName: 'Test string',
                    },
                    regularFile: {
                      content: {
                        gcsPath: 'Test string',
                      },
                      devicePath: 'Test string',
                    },
                  },
                ],
                initialSetupApks: [
                  {
                    location: {
                      gcsPath: 'Test string',
                    },
                    packageName: 'Test string',
                  },
                ],
                networkProfile: 'Test string',
                systrace: {
                  durationSeconds: 42,
                },
              },
              testTimeout: 'Test string',
            },
            timestamp: 'Test string',
            toolResultsStep: {
              executionId: 'Test string',
              historyId: 'Test string',
              projectId: 'Test string',
              stepId: 'Test string',
            },
          },
        ],
        testMatrixId: 'Test string',
        testSpecification: {
          androidInstrumentationTest: {
            appApk: {
              gcsPath: 'Test string',
            },
            appBundle: {
              bundleLocation: {
                gcsPath: 'Test string',
              },
            },
            appPackageId: 'Test string',
            orchestratorOption: 'Test string',
            shardingOption: {
              manualSharding: {
                testTargetsForShard: [
                  {
                    testTargets: ['Test string'],
                  },
                ],
              },
              smartSharding: {
                targetedShardDuration: 'Test string',
              },
              uniformSharding: {
                numShards: 42,
              },
            },
            testApk: {
              gcsPath: 'Test string',
            },
            testPackageId: 'Test string',
            testRunnerClass: 'Test string',
            testTargets: ['Test string'],
          },
          androidRoboTest: {
            appApk: {
              gcsPath: 'Test string',
            },
            appBundle: {
              bundleLocation: {
                gcsPath: 'Test string',
              },
            },
            appInitialActivity: 'Test string',
            appPackageId: 'Test string',
            maxDepth: 42,
            maxSteps: 42,
            roboDirectives: [
              {
                actionType: 'Test string',
                inputText: 'Test string',
                resourceName: 'Test string',
              },
            ],
            roboMode: 'Test string',
            roboScript: {
              gcsPath: 'Test string',
            },
            startingIntents: [
              {
                launcherActivity: {},
                noActivity: {},
                startActivity: {
                  action: 'Test string',
                  categories: ['Test string'],
                  uri: 'Test string',
                },
                timeout: 'Test string',
              },
            ],
          },
          androidTestLoop: {
            appApk: {
              gcsPath: 'Test string',
            },
            appBundle: {
              bundleLocation: {
                gcsPath: 'Test string',
              },
            },
            appPackageId: 'Test string',
            scenarioLabels: ['Test string'],
            scenarios: [42],
          },
          disablePerformanceMetrics: true,
          disableVideoRecording: true,
          iosRoboTest: {
            appBundleId: 'Test string',
            appIpa: {
              gcsPath: 'Test string',
            },
            roboScript: {
              gcsPath: 'Test string',
            },
          },
          iosTestLoop: {
            appBundleId: 'Test string',
            appIpa: {
              gcsPath: 'Test string',
            },
            scenarios: [42],
          },
          iosTestSetup: {
            additionalIpas: [
              {
                gcsPath: 'Test string',
              },
            ],
            networkProfile: 'Test string',
            pullDirectories: [
              {
                bundleId: 'Test string',
                content: {
                  gcsPath: 'Test string',
                },
                devicePath: 'Test string',
              },
            ],
            pushFiles: [
              {
                bundleId: 'Test string',
                content: {
                  gcsPath: 'Test string',
                },
                devicePath: 'Test string',
              },
            ],
          },
          iosXcTest: {
            appBundleId: 'Test string',
            testSpecialEntitlements: true,
            testsZip: {
              gcsPath: 'Test string',
            },
            xcodeVersion: 'Test string',
            xctestrun: {
              gcsPath: 'Test string',
            },
          },
          testSetup: {
            account: {
              googleAuto: {},
            },
            additionalApks: [
              {
                location: {
                  gcsPath: 'Test string',
                },
                packageName: 'Test string',
              },
            ],
            directoriesToPull: ['Test string'],
            dontAutograntPermissions: true,
            environmentVariables: [
              {
                key: 'Test string',
                value: 'Test string',
              },
            ],
            filesToPush: [
              {
                obbFile: {
                  obb: {
                    gcsPath: 'Test string',
                  },
                  obbFileName: 'Test string',
                },
                regularFile: {
                  content: {
                    gcsPath: 'Test string',
                  },
                  devicePath: 'Test string',
                },
              },
            ],
            initialSetupApks: [
              {
                location: {
                  gcsPath: 'Test string',
                },
                packageName: 'Test string',
              },
            ],
            networkProfile: 'Test string',
            systrace: {
              durationSeconds: 42,
            },
          },
          testTimeout: 'Test string',
        },
        timestamp: 'Test string',
      }
    );
    /** Checks the status of a test matrix and the executions once they are created. The test matrix will contain the list of test executions to run if and only if the resultStorage.toolResultsExecution fields have been populated. Note: Flaky test executions may be added to the matrix at a later stage. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to read project - INVALID_ARGUMENT - if the request is malformed - NOT_FOUND - if the Test Matrix does not exist */
    await gapi.client.testing.projects.testMatrices.get({
      projectId: 'Test string',
      testMatrixId: 'Test string',
    });
    /** Gets the catalog of supported test environments. May return any of the following canonical error codes: - INVALID_ARGUMENT - if the request is malformed - NOT_FOUND - if the environment type does not exist - INTERNAL - if an internal error occurred */
    await gapi.client.testing.testEnvironmentCatalog.get({
      environmentType: 'Test string',
      projectId: 'Test string',
    });
  }
});
