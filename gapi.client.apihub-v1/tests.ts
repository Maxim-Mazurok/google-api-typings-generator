/* This is stub file for gapi.client.apihub-v1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20250611

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://apihub.googleapis.com/$discovery/rest?version=v1',
  );
  /** now we can use gapi.client.apihub */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
    'https://www.googleapis.com/auth/cloud-platform',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Collect API data from a source and push it to Hub's collect layer. */
    await gapi.client.apihub.projects.locations.collectApiData(
      {
        location: 'Test string',
      },
      {
        actionId: 'Test string',
        apiData: {
          apiMetadataList: {
            apiMetadata: [
              {
                api: {
                  apiFunctionalRequirements: {
                    attribute: 'Test string',
                    enumValues: {
                      values: [
                        {
                          description: 'Test string',
                          displayName: 'Test string',
                          id: 'Test string',
                          immutable: true,
                        },
                      ],
                    },
                    jsonValues: {
                      values: ['Test string'],
                    },
                    stringValues: {
                      values: ['Test string'],
                    },
                    uriValues: {
                      values: ['Test string'],
                    },
                  },
                  apiRequirements: {
                    attribute: 'Test string',
                    enumValues: {
                      values: [
                        {
                          description: 'Test string',
                          displayName: 'Test string',
                          id: 'Test string',
                          immutable: true,
                        },
                      ],
                    },
                    jsonValues: {
                      values: ['Test string'],
                    },
                    stringValues: {
                      values: ['Test string'],
                    },
                    uriValues: {
                      values: ['Test string'],
                    },
                  },
                  apiStyle: {
                    attribute: 'Test string',
                    enumValues: {
                      values: [
                        {
                          description: 'Test string',
                          displayName: 'Test string',
                          id: 'Test string',
                          immutable: true,
                        },
                      ],
                    },
                    jsonValues: {
                      values: ['Test string'],
                    },
                    stringValues: {
                      values: ['Test string'],
                    },
                    uriValues: {
                      values: ['Test string'],
                    },
                  },
                  apiTechnicalRequirements: {
                    attribute: 'Test string',
                    enumValues: {
                      values: [
                        {
                          description: 'Test string',
                          displayName: 'Test string',
                          id: 'Test string',
                          immutable: true,
                        },
                      ],
                    },
                    jsonValues: {
                      values: ['Test string'],
                    },
                    stringValues: {
                      values: ['Test string'],
                    },
                    uriValues: {
                      values: ['Test string'],
                    },
                  },
                  attributes: {
                    A: {
                      attribute: 'Test string',
                      enumValues: {
                        values: [
                          {
                            description: 'Test string',
                            displayName: 'Test string',
                            id: 'Test string',
                            immutable: true,
                          },
                        ],
                      },
                      jsonValues: {
                        values: ['Test string'],
                      },
                      stringValues: {
                        values: ['Test string'],
                      },
                      uriValues: {
                        values: ['Test string'],
                      },
                    },
                  },
                  businessUnit: {
                    attribute: 'Test string',
                    enumValues: {
                      values: [
                        {
                          description: 'Test string',
                          displayName: 'Test string',
                          id: 'Test string',
                          immutable: true,
                        },
                      ],
                    },
                    jsonValues: {
                      values: ['Test string'],
                    },
                    stringValues: {
                      values: ['Test string'],
                    },
                    uriValues: {
                      values: ['Test string'],
                    },
                  },
                  createTime: 'Test string',
                  description: 'Test string',
                  displayName: 'Test string',
                  documentation: {
                    externalUri: 'Test string',
                  },
                  fingerprint: 'Test string',
                  maturityLevel: {
                    attribute: 'Test string',
                    enumValues: {
                      values: [
                        {
                          description: 'Test string',
                          displayName: 'Test string',
                          id: 'Test string',
                          immutable: true,
                        },
                      ],
                    },
                    jsonValues: {
                      values: ['Test string'],
                    },
                    stringValues: {
                      values: ['Test string'],
                    },
                    uriValues: {
                      values: ['Test string'],
                    },
                  },
                  name: 'Test string',
                  owner: {
                    displayName: 'Test string',
                    email: 'Test string',
                  },
                  selectedVersion: 'Test string',
                  sourceMetadata: [
                    {
                      originalResourceCreateTime: 'Test string',
                      originalResourceId: 'Test string',
                      originalResourceUpdateTime: 'Test string',
                      pluginInstanceActionSource: {
                        actionId: 'Test string',
                        pluginInstance: 'Test string',
                      },
                      sourceType: 'Test string',
                    },
                  ],
                  targetUser: {
                    attribute: 'Test string',
                    enumValues: {
                      values: [
                        {
                          description: 'Test string',
                          displayName: 'Test string',
                          id: 'Test string',
                          immutable: true,
                        },
                      ],
                    },
                    jsonValues: {
                      values: ['Test string'],
                    },
                    stringValues: {
                      values: ['Test string'],
                    },
                    uriValues: {
                      values: ['Test string'],
                    },
                  },
                  team: {
                    attribute: 'Test string',
                    enumValues: {
                      values: [
                        {
                          description: 'Test string',
                          displayName: 'Test string',
                          id: 'Test string',
                          immutable: true,
                        },
                      ],
                    },
                    jsonValues: {
                      values: ['Test string'],
                    },
                    stringValues: {
                      values: ['Test string'],
                    },
                    uriValues: {
                      values: ['Test string'],
                    },
                  },
                  updateTime: 'Test string',
                  versions: ['Test string'],
                },
                originalCreateTime: 'Test string',
                originalId: 'Test string',
                originalUpdateTime: 'Test string',
                versions: [
                  {
                    deployments: [
                      {
                        deployment: {
                          apiVersions: ['Test string'],
                          attributes: {
                            A: {
                              attribute: 'Test string',
                              enumValues: {
                                values: [
                                  {
                                    description: 'Test string',
                                    displayName: 'Test string',
                                    id: 'Test string',
                                    immutable: true,
                                  },
                                ],
                              },
                              jsonValues: {
                                values: ['Test string'],
                              },
                              stringValues: {
                                values: ['Test string'],
                              },
                              uriValues: {
                                values: ['Test string'],
                              },
                            },
                          },
                          createTime: 'Test string',
                          deploymentType: {
                            attribute: 'Test string',
                            enumValues: {
                              values: [
                                {
                                  description: 'Test string',
                                  displayName: 'Test string',
                                  id: 'Test string',
                                  immutable: true,
                                },
                              ],
                            },
                            jsonValues: {
                              values: ['Test string'],
                            },
                            stringValues: {
                              values: ['Test string'],
                            },
                            uriValues: {
                              values: ['Test string'],
                            },
                          },
                          description: 'Test string',
                          displayName: 'Test string',
                          documentation: {
                            externalUri: 'Test string',
                          },
                          endpoints: ['Test string'],
                          environment: {
                            attribute: 'Test string',
                            enumValues: {
                              values: [
                                {
                                  description: 'Test string',
                                  displayName: 'Test string',
                                  id: 'Test string',
                                  immutable: true,
                                },
                              ],
                            },
                            jsonValues: {
                              values: ['Test string'],
                            },
                            stringValues: {
                              values: ['Test string'],
                            },
                            uriValues: {
                              values: ['Test string'],
                            },
                          },
                          name: 'Test string',
                          resourceUri: 'Test string',
                          slo: {
                            attribute: 'Test string',
                            enumValues: {
                              values: [
                                {
                                  description: 'Test string',
                                  displayName: 'Test string',
                                  id: 'Test string',
                                  immutable: true,
                                },
                              ],
                            },
                            jsonValues: {
                              values: ['Test string'],
                            },
                            stringValues: {
                              values: ['Test string'],
                            },
                            uriValues: {
                              values: ['Test string'],
                            },
                          },
                          sourceMetadata: [
                            {
                              originalResourceCreateTime: 'Test string',
                              originalResourceId: 'Test string',
                              originalResourceUpdateTime: 'Test string',
                              pluginInstanceActionSource: {
                                actionId: 'Test string',
                                pluginInstance: 'Test string',
                              },
                              sourceType: 'Test string',
                            },
                          ],
                          updateTime: 'Test string',
                        },
                        originalCreateTime: 'Test string',
                        originalId: 'Test string',
                        originalUpdateTime: 'Test string',
                      },
                    ],
                    originalCreateTime: 'Test string',
                    originalId: 'Test string',
                    originalUpdateTime: 'Test string',
                    specs: [
                      {
                        originalCreateTime: 'Test string',
                        originalId: 'Test string',
                        originalUpdateTime: 'Test string',
                        spec: {
                          attributes: {
                            A: {
                              attribute: 'Test string',
                              enumValues: {
                                values: [
                                  {
                                    description: 'Test string',
                                    displayName: 'Test string',
                                    id: 'Test string',
                                    immutable: true,
                                  },
                                ],
                              },
                              jsonValues: {
                                values: ['Test string'],
                              },
                              stringValues: {
                                values: ['Test string'],
                              },
                              uriValues: {
                                values: ['Test string'],
                              },
                            },
                          },
                          contents: {
                            contents: 'Test string',
                            mimeType: 'Test string',
                          },
                          createTime: 'Test string',
                          details: {
                            description: 'Test string',
                            openApiSpecDetails: {
                              format: 'Test string',
                              owner: {
                                displayName: 'Test string',
                                email: 'Test string',
                              },
                              version: 'Test string',
                            },
                          },
                          displayName: 'Test string',
                          documentation: {
                            externalUri: 'Test string',
                          },
                          lintResponse: {
                            createTime: 'Test string',
                            issues: [
                              {
                                code: 'Test string',
                                message: 'Test string',
                                path: ['Test string'],
                                range: {
                                  end: {
                                    character: 42,
                                    line: 42,
                                  },
                                  start: {
                                    character: 42,
                                    line: 42,
                                  },
                                },
                                severity: 'Test string',
                              },
                            ],
                            linter: 'Test string',
                            source: 'Test string',
                            state: 'Test string',
                            summary: [
                              {
                                count: 42,
                                severity: 'Test string',
                              },
                            ],
                          },
                          name: 'Test string',
                          parsingMode: 'Test string',
                          sourceMetadata: [
                            {
                              originalResourceCreateTime: 'Test string',
                              originalResourceId: 'Test string',
                              originalResourceUpdateTime: 'Test string',
                              pluginInstanceActionSource: {
                                actionId: 'Test string',
                                pluginInstance: 'Test string',
                              },
                              sourceType: 'Test string',
                            },
                          ],
                          sourceUri: 'Test string',
                          specType: {
                            attribute: 'Test string',
                            enumValues: {
                              values: [
                                {
                                  description: 'Test string',
                                  displayName: 'Test string',
                                  id: 'Test string',
                                  immutable: true,
                                },
                              ],
                            },
                            jsonValues: {
                              values: ['Test string'],
                            },
                            stringValues: {
                              values: ['Test string'],
                            },
                            uriValues: {
                              values: ['Test string'],
                            },
                          },
                          updateTime: 'Test string',
                        },
                      },
                    ],
                    version: {
                      accreditation: {
                        attribute: 'Test string',
                        enumValues: {
                          values: [
                            {
                              description: 'Test string',
                              displayName: 'Test string',
                              id: 'Test string',
                              immutable: true,
                            },
                          ],
                        },
                        jsonValues: {
                          values: ['Test string'],
                        },
                        stringValues: {
                          values: ['Test string'],
                        },
                        uriValues: {
                          values: ['Test string'],
                        },
                      },
                      apiOperations: ['Test string'],
                      attributes: {
                        A: {
                          attribute: 'Test string',
                          enumValues: {
                            values: [
                              {
                                description: 'Test string',
                                displayName: 'Test string',
                                id: 'Test string',
                                immutable: true,
                              },
                            ],
                          },
                          jsonValues: {
                            values: ['Test string'],
                          },
                          stringValues: {
                            values: ['Test string'],
                          },
                          uriValues: {
                            values: ['Test string'],
                          },
                        },
                      },
                      compliance: {
                        attribute: 'Test string',
                        enumValues: {
                          values: [
                            {
                              description: 'Test string',
                              displayName: 'Test string',
                              id: 'Test string',
                              immutable: true,
                            },
                          ],
                        },
                        jsonValues: {
                          values: ['Test string'],
                        },
                        stringValues: {
                          values: ['Test string'],
                        },
                        uriValues: {
                          values: ['Test string'],
                        },
                      },
                      createTime: 'Test string',
                      definitions: ['Test string'],
                      deployments: ['Test string'],
                      description: 'Test string',
                      displayName: 'Test string',
                      documentation: {
                        externalUri: 'Test string',
                      },
                      lifecycle: {
                        attribute: 'Test string',
                        enumValues: {
                          values: [
                            {
                              description: 'Test string',
                              displayName: 'Test string',
                              id: 'Test string',
                              immutable: true,
                            },
                          ],
                        },
                        jsonValues: {
                          values: ['Test string'],
                        },
                        stringValues: {
                          values: ['Test string'],
                        },
                        uriValues: {
                          values: ['Test string'],
                        },
                      },
                      name: 'Test string',
                      selectedDeployment: 'Test string',
                      sourceMetadata: [
                        {
                          originalResourceCreateTime: 'Test string',
                          originalResourceId: 'Test string',
                          originalResourceUpdateTime: 'Test string',
                          pluginInstanceActionSource: {
                            actionId: 'Test string',
                            pluginInstance: 'Test string',
                          },
                          sourceType: 'Test string',
                        },
                      ],
                      specs: ['Test string'],
                      updateTime: 'Test string',
                    },
                  },
                ],
              },
            ],
          },
        },
        collectionType: 'Test string',
        pluginInstance: 'Test string',
      },
    );
    /** Gets information about a location. */
    await gapi.client.apihub.projects.locations.get({
      name: 'Test string',
    });
    /** Lists information about the supported locations for this service. */
    await gapi.client.apihub.projects.locations.list({
      extraLocationTypes: 'Test string',
      filter: 'Test string',
      name: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Look up a runtime project attachment. This API can be called in the context of any project. */
    await gapi.client.apihub.projects.locations.lookupRuntimeProjectAttachment({
      name: 'Test string',
    });
    /** Search across API-Hub resources. */
    await gapi.client.apihub.projects.locations.searchResources(
      {
        location: 'Test string',
      },
      {
        filter: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        query: 'Test string',
      },
    );
    /** Provisions instance resources for the API Hub. */
    await gapi.client.apihub.projects.locations.apiHubInstances.create(
      {
        apiHubInstanceId: 'Test string',
        parent: 'Test string',
      },
      {
        config: {
          cmekKeyName: 'Test string',
          disableSearch: true,
          encryptionType: 'Test string',
          vertexLocation: 'Test string',
        },
        createTime: 'Test string',
        description: 'Test string',
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        state: 'Test string',
        stateMessage: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Deletes the API hub instance. */
    await gapi.client.apihub.projects.locations.apiHubInstances.delete({
      name: 'Test string',
    });
    /** Gets details of a single API Hub instance. */
    await gapi.client.apihub.projects.locations.apiHubInstances.get({
      name: 'Test string',
    });
    /** Looks up an Api Hub instance in a given GCP project. There will always be only one Api Hub instance for a GCP project across all locations. */
    await gapi.client.apihub.projects.locations.apiHubInstances.lookup({
      parent: 'Test string',
    });
    /** Create an API resource in the API hub. Once an API resource is created, versions can be added to it. */
    await gapi.client.apihub.projects.locations.apis.create(
      {
        apiId: 'Test string',
        parent: 'Test string',
      },
      {
        apiFunctionalRequirements: {
          attribute: 'Test string',
          enumValues: {
            values: [
              {
                description: 'Test string',
                displayName: 'Test string',
                id: 'Test string',
                immutable: true,
              },
            ],
          },
          jsonValues: {
            values: ['Test string'],
          },
          stringValues: {
            values: ['Test string'],
          },
          uriValues: {
            values: ['Test string'],
          },
        },
        apiRequirements: {
          attribute: 'Test string',
          enumValues: {
            values: [
              {
                description: 'Test string',
                displayName: 'Test string',
                id: 'Test string',
                immutable: true,
              },
            ],
          },
          jsonValues: {
            values: ['Test string'],
          },
          stringValues: {
            values: ['Test string'],
          },
          uriValues: {
            values: ['Test string'],
          },
        },
        apiStyle: {
          attribute: 'Test string',
          enumValues: {
            values: [
              {
                description: 'Test string',
                displayName: 'Test string',
                id: 'Test string',
                immutable: true,
              },
            ],
          },
          jsonValues: {
            values: ['Test string'],
          },
          stringValues: {
            values: ['Test string'],
          },
          uriValues: {
            values: ['Test string'],
          },
        },
        apiTechnicalRequirements: {
          attribute: 'Test string',
          enumValues: {
            values: [
              {
                description: 'Test string',
                displayName: 'Test string',
                id: 'Test string',
                immutable: true,
              },
            ],
          },
          jsonValues: {
            values: ['Test string'],
          },
          stringValues: {
            values: ['Test string'],
          },
          uriValues: {
            values: ['Test string'],
          },
        },
        attributes: {
          A: {
            attribute: 'Test string',
            enumValues: {
              values: [
                {
                  description: 'Test string',
                  displayName: 'Test string',
                  id: 'Test string',
                  immutable: true,
                },
              ],
            },
            jsonValues: {
              values: ['Test string'],
            },
            stringValues: {
              values: ['Test string'],
            },
            uriValues: {
              values: ['Test string'],
            },
          },
        },
        businessUnit: {
          attribute: 'Test string',
          enumValues: {
            values: [
              {
                description: 'Test string',
                displayName: 'Test string',
                id: 'Test string',
                immutable: true,
              },
            ],
          },
          jsonValues: {
            values: ['Test string'],
          },
          stringValues: {
            values: ['Test string'],
          },
          uriValues: {
            values: ['Test string'],
          },
        },
        createTime: 'Test string',
        description: 'Test string',
        displayName: 'Test string',
        documentation: {
          externalUri: 'Test string',
        },
        fingerprint: 'Test string',
        maturityLevel: {
          attribute: 'Test string',
          enumValues: {
            values: [
              {
                description: 'Test string',
                displayName: 'Test string',
                id: 'Test string',
                immutable: true,
              },
            ],
          },
          jsonValues: {
            values: ['Test string'],
          },
          stringValues: {
            values: ['Test string'],
          },
          uriValues: {
            values: ['Test string'],
          },
        },
        name: 'Test string',
        owner: {
          displayName: 'Test string',
          email: 'Test string',
        },
        selectedVersion: 'Test string',
        sourceMetadata: [
          {
            originalResourceCreateTime: 'Test string',
            originalResourceId: 'Test string',
            originalResourceUpdateTime: 'Test string',
            pluginInstanceActionSource: {
              actionId: 'Test string',
              pluginInstance: 'Test string',
            },
            sourceType: 'Test string',
          },
        ],
        targetUser: {
          attribute: 'Test string',
          enumValues: {
            values: [
              {
                description: 'Test string',
                displayName: 'Test string',
                id: 'Test string',
                immutable: true,
              },
            ],
          },
          jsonValues: {
            values: ['Test string'],
          },
          stringValues: {
            values: ['Test string'],
          },
          uriValues: {
            values: ['Test string'],
          },
        },
        team: {
          attribute: 'Test string',
          enumValues: {
            values: [
              {
                description: 'Test string',
                displayName: 'Test string',
                id: 'Test string',
                immutable: true,
              },
            ],
          },
          jsonValues: {
            values: ['Test string'],
          },
          stringValues: {
            values: ['Test string'],
          },
          uriValues: {
            values: ['Test string'],
          },
        },
        updateTime: 'Test string',
        versions: ['Test string'],
      },
    );
    /** Delete an API resource in the API hub. API can only be deleted if all underlying versions are deleted. */
    await gapi.client.apihub.projects.locations.apis.delete({
      force: true,
      name: 'Test string',
    });
    /** Get API resource details including the API versions contained in it. */
    await gapi.client.apihub.projects.locations.apis.get({
      name: 'Test string',
    });
    /** List API resources in the API hub. */
    await gapi.client.apihub.projects.locations.apis.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Update an API resource in the API hub. The following fields in the API can be updated: * display_name * description * owner * documentation * target_user * team * business_unit * maturity_level * api_style * attributes The update_mask should be used to specify the fields being updated. Updating the owner field requires complete owner message and updates both owner and email fields. */
    await gapi.client.apihub.projects.locations.apis.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        apiFunctionalRequirements: {
          attribute: 'Test string',
          enumValues: {
            values: [
              {
                description: 'Test string',
                displayName: 'Test string',
                id: 'Test string',
                immutable: true,
              },
            ],
          },
          jsonValues: {
            values: ['Test string'],
          },
          stringValues: {
            values: ['Test string'],
          },
          uriValues: {
            values: ['Test string'],
          },
        },
        apiRequirements: {
          attribute: 'Test string',
          enumValues: {
            values: [
              {
                description: 'Test string',
                displayName: 'Test string',
                id: 'Test string',
                immutable: true,
              },
            ],
          },
          jsonValues: {
            values: ['Test string'],
          },
          stringValues: {
            values: ['Test string'],
          },
          uriValues: {
            values: ['Test string'],
          },
        },
        apiStyle: {
          attribute: 'Test string',
          enumValues: {
            values: [
              {
                description: 'Test string',
                displayName: 'Test string',
                id: 'Test string',
                immutable: true,
              },
            ],
          },
          jsonValues: {
            values: ['Test string'],
          },
          stringValues: {
            values: ['Test string'],
          },
          uriValues: {
            values: ['Test string'],
          },
        },
        apiTechnicalRequirements: {
          attribute: 'Test string',
          enumValues: {
            values: [
              {
                description: 'Test string',
                displayName: 'Test string',
                id: 'Test string',
                immutable: true,
              },
            ],
          },
          jsonValues: {
            values: ['Test string'],
          },
          stringValues: {
            values: ['Test string'],
          },
          uriValues: {
            values: ['Test string'],
          },
        },
        attributes: {
          A: {
            attribute: 'Test string',
            enumValues: {
              values: [
                {
                  description: 'Test string',
                  displayName: 'Test string',
                  id: 'Test string',
                  immutable: true,
                },
              ],
            },
            jsonValues: {
              values: ['Test string'],
            },
            stringValues: {
              values: ['Test string'],
            },
            uriValues: {
              values: ['Test string'],
            },
          },
        },
        businessUnit: {
          attribute: 'Test string',
          enumValues: {
            values: [
              {
                description: 'Test string',
                displayName: 'Test string',
                id: 'Test string',
                immutable: true,
              },
            ],
          },
          jsonValues: {
            values: ['Test string'],
          },
          stringValues: {
            values: ['Test string'],
          },
          uriValues: {
            values: ['Test string'],
          },
        },
        createTime: 'Test string',
        description: 'Test string',
        displayName: 'Test string',
        documentation: {
          externalUri: 'Test string',
        },
        fingerprint: 'Test string',
        maturityLevel: {
          attribute: 'Test string',
          enumValues: {
            values: [
              {
                description: 'Test string',
                displayName: 'Test string',
                id: 'Test string',
                immutable: true,
              },
            ],
          },
          jsonValues: {
            values: ['Test string'],
          },
          stringValues: {
            values: ['Test string'],
          },
          uriValues: {
            values: ['Test string'],
          },
        },
        name: 'Test string',
        owner: {
          displayName: 'Test string',
          email: 'Test string',
        },
        selectedVersion: 'Test string',
        sourceMetadata: [
          {
            originalResourceCreateTime: 'Test string',
            originalResourceId: 'Test string',
            originalResourceUpdateTime: 'Test string',
            pluginInstanceActionSource: {
              actionId: 'Test string',
              pluginInstance: 'Test string',
            },
            sourceType: 'Test string',
          },
        ],
        targetUser: {
          attribute: 'Test string',
          enumValues: {
            values: [
              {
                description: 'Test string',
                displayName: 'Test string',
                id: 'Test string',
                immutable: true,
              },
            ],
          },
          jsonValues: {
            values: ['Test string'],
          },
          stringValues: {
            values: ['Test string'],
          },
          uriValues: {
            values: ['Test string'],
          },
        },
        team: {
          attribute: 'Test string',
          enumValues: {
            values: [
              {
                description: 'Test string',
                displayName: 'Test string',
                id: 'Test string',
                immutable: true,
              },
            ],
          },
          jsonValues: {
            values: ['Test string'],
          },
          stringValues: {
            values: ['Test string'],
          },
          uriValues: {
            values: ['Test string'],
          },
        },
        updateTime: 'Test string',
        versions: ['Test string'],
      },
    );
    /** Create an API version for an API resource in the API hub. */
    await gapi.client.apihub.projects.locations.apis.versions.create(
      {
        parent: 'Test string',
        versionId: 'Test string',
      },
      {
        accreditation: {
          attribute: 'Test string',
          enumValues: {
            values: [
              {
                description: 'Test string',
                displayName: 'Test string',
                id: 'Test string',
                immutable: true,
              },
            ],
          },
          jsonValues: {
            values: ['Test string'],
          },
          stringValues: {
            values: ['Test string'],
          },
          uriValues: {
            values: ['Test string'],
          },
        },
        apiOperations: ['Test string'],
        attributes: {
          A: {
            attribute: 'Test string',
            enumValues: {
              values: [
                {
                  description: 'Test string',
                  displayName: 'Test string',
                  id: 'Test string',
                  immutable: true,
                },
              ],
            },
            jsonValues: {
              values: ['Test string'],
            },
            stringValues: {
              values: ['Test string'],
            },
            uriValues: {
              values: ['Test string'],
            },
          },
        },
        compliance: {
          attribute: 'Test string',
          enumValues: {
            values: [
              {
                description: 'Test string',
                displayName: 'Test string',
                id: 'Test string',
                immutable: true,
              },
            ],
          },
          jsonValues: {
            values: ['Test string'],
          },
          stringValues: {
            values: ['Test string'],
          },
          uriValues: {
            values: ['Test string'],
          },
        },
        createTime: 'Test string',
        definitions: ['Test string'],
        deployments: ['Test string'],
        description: 'Test string',
        displayName: 'Test string',
        documentation: {
          externalUri: 'Test string',
        },
        lifecycle: {
          attribute: 'Test string',
          enumValues: {
            values: [
              {
                description: 'Test string',
                displayName: 'Test string',
                id: 'Test string',
                immutable: true,
              },
            ],
          },
          jsonValues: {
            values: ['Test string'],
          },
          stringValues: {
            values: ['Test string'],
          },
          uriValues: {
            values: ['Test string'],
          },
        },
        name: 'Test string',
        selectedDeployment: 'Test string',
        sourceMetadata: [
          {
            originalResourceCreateTime: 'Test string',
            originalResourceId: 'Test string',
            originalResourceUpdateTime: 'Test string',
            pluginInstanceActionSource: {
              actionId: 'Test string',
              pluginInstance: 'Test string',
            },
            sourceType: 'Test string',
          },
        ],
        specs: ['Test string'],
        updateTime: 'Test string',
      },
    );
    /** Delete an API version. Version can only be deleted if all underlying specs, operations, definitions and linked deployments are deleted. */
    await gapi.client.apihub.projects.locations.apis.versions.delete({
      force: true,
      name: 'Test string',
    });
    /** Get details about the API version of an API resource. This will include information about the specs and operations present in the API version as well as the deployments linked to it. */
    await gapi.client.apihub.projects.locations.apis.versions.get({
      name: 'Test string',
    });
    /** List API versions of an API resource in the API hub. */
    await gapi.client.apihub.projects.locations.apis.versions.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Update API version. The following fields in the version can be updated currently: * display_name * description * documentation * deployments * lifecycle * compliance * accreditation * attributes The update_mask should be used to specify the fields being updated. */
    await gapi.client.apihub.projects.locations.apis.versions.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        accreditation: {
          attribute: 'Test string',
          enumValues: {
            values: [
              {
                description: 'Test string',
                displayName: 'Test string',
                id: 'Test string',
                immutable: true,
              },
            ],
          },
          jsonValues: {
            values: ['Test string'],
          },
          stringValues: {
            values: ['Test string'],
          },
          uriValues: {
            values: ['Test string'],
          },
        },
        apiOperations: ['Test string'],
        attributes: {
          A: {
            attribute: 'Test string',
            enumValues: {
              values: [
                {
                  description: 'Test string',
                  displayName: 'Test string',
                  id: 'Test string',
                  immutable: true,
                },
              ],
            },
            jsonValues: {
              values: ['Test string'],
            },
            stringValues: {
              values: ['Test string'],
            },
            uriValues: {
              values: ['Test string'],
            },
          },
        },
        compliance: {
          attribute: 'Test string',
          enumValues: {
            values: [
              {
                description: 'Test string',
                displayName: 'Test string',
                id: 'Test string',
                immutable: true,
              },
            ],
          },
          jsonValues: {
            values: ['Test string'],
          },
          stringValues: {
            values: ['Test string'],
          },
          uriValues: {
            values: ['Test string'],
          },
        },
        createTime: 'Test string',
        definitions: ['Test string'],
        deployments: ['Test string'],
        description: 'Test string',
        displayName: 'Test string',
        documentation: {
          externalUri: 'Test string',
        },
        lifecycle: {
          attribute: 'Test string',
          enumValues: {
            values: [
              {
                description: 'Test string',
                displayName: 'Test string',
                id: 'Test string',
                immutable: true,
              },
            ],
          },
          jsonValues: {
            values: ['Test string'],
          },
          stringValues: {
            values: ['Test string'],
          },
          uriValues: {
            values: ['Test string'],
          },
        },
        name: 'Test string',
        selectedDeployment: 'Test string',
        sourceMetadata: [
          {
            originalResourceCreateTime: 'Test string',
            originalResourceId: 'Test string',
            originalResourceUpdateTime: 'Test string',
            pluginInstanceActionSource: {
              actionId: 'Test string',
              pluginInstance: 'Test string',
            },
            sourceType: 'Test string',
          },
        ],
        specs: ['Test string'],
        updateTime: 'Test string',
      },
    );
    /** Get details about a definition in an API version. */
    await gapi.client.apihub.projects.locations.apis.versions.definitions.get({
      name: 'Test string',
    });
    /** Create an apiOperation in an API version. An apiOperation can be created only if the version has no apiOperations which were created by parsing a spec. */
    await gapi.client.apihub.projects.locations.apis.versions.operations.create(
      {
        apiOperationId: 'Test string',
        parent: 'Test string',
      },
      {
        attributes: {
          A: {
            attribute: 'Test string',
            enumValues: {
              values: [
                {
                  description: 'Test string',
                  displayName: 'Test string',
                  id: 'Test string',
                  immutable: true,
                },
              ],
            },
            jsonValues: {
              values: ['Test string'],
            },
            stringValues: {
              values: ['Test string'],
            },
            uriValues: {
              values: ['Test string'],
            },
          },
        },
        createTime: 'Test string',
        details: {
          deprecated: true,
          description: 'Test string',
          documentation: {
            externalUri: 'Test string',
          },
          httpOperation: {
            method: 'Test string',
            path: {
              description: 'Test string',
              path: 'Test string',
            },
          },
        },
        name: 'Test string',
        sourceMetadata: [
          {
            originalResourceCreateTime: 'Test string',
            originalResourceId: 'Test string',
            originalResourceUpdateTime: 'Test string',
            pluginInstanceActionSource: {
              actionId: 'Test string',
              pluginInstance: 'Test string',
            },
            sourceType: 'Test string',
          },
        ],
        spec: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Delete an operation in an API version and we can delete only the operations created via create API. If the operation was created by parsing the spec, then it can be deleted by editing or deleting the spec. */
    await gapi.client.apihub.projects.locations.apis.versions.operations.delete(
      {
        name: 'Test string',
      },
    );
    /** Get details about a particular operation in API version. */
    await gapi.client.apihub.projects.locations.apis.versions.operations.get({
      name: 'Test string',
    });
    /** List operations in an API version. */
    await gapi.client.apihub.projects.locations.apis.versions.operations.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Update an operation in an API version. The following fields in the ApiOperation resource can be updated: * details.description * details.documentation * details.http_operation.path * details.http_operation.method * details.deprecated * attributes The update_mask should be used to specify the fields being updated. An operation can be updated only if the operation was created via CreateApiOperation API. If the operation was created by parsing the spec, then it can be edited by updating the spec. */
    await gapi.client.apihub.projects.locations.apis.versions.operations.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        attributes: {
          A: {
            attribute: 'Test string',
            enumValues: {
              values: [
                {
                  description: 'Test string',
                  displayName: 'Test string',
                  id: 'Test string',
                  immutable: true,
                },
              ],
            },
            jsonValues: {
              values: ['Test string'],
            },
            stringValues: {
              values: ['Test string'],
            },
            uriValues: {
              values: ['Test string'],
            },
          },
        },
        createTime: 'Test string',
        details: {
          deprecated: true,
          description: 'Test string',
          documentation: {
            externalUri: 'Test string',
          },
          httpOperation: {
            method: 'Test string',
            path: {
              description: 'Test string',
              path: 'Test string',
            },
          },
        },
        name: 'Test string',
        sourceMetadata: [
          {
            originalResourceCreateTime: 'Test string',
            originalResourceId: 'Test string',
            originalResourceUpdateTime: 'Test string',
            pluginInstanceActionSource: {
              actionId: 'Test string',
              pluginInstance: 'Test string',
            },
            sourceType: 'Test string',
          },
        ],
        spec: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Add a spec to an API version in the API hub. Multiple specs can be added to an API version. Note, while adding a spec, at least one of `contents` or `source_uri` must be provided. If `contents` is provided, then `spec_type` must also be provided. On adding a spec with contents to the version, the operations present in it will be added to the version.Note that the file contents in the spec should be of the same type as defined in the `projects/{project}/locations/{location}/attributes/system-spec-type` attribute associated with spec resource. Note that specs of various types can be uploaded, however parsing of details is supported for OpenAPI spec currently. In order to access the information parsed from the spec, use the GetSpec method. In order to access the raw contents for a particular spec, use the GetSpecContents method. In order to access the operations parsed from the spec, use the ListAPIOperations method. */
    await gapi.client.apihub.projects.locations.apis.versions.specs.create(
      {
        parent: 'Test string',
        specId: 'Test string',
      },
      {
        attributes: {
          A: {
            attribute: 'Test string',
            enumValues: {
              values: [
                {
                  description: 'Test string',
                  displayName: 'Test string',
                  id: 'Test string',
                  immutable: true,
                },
              ],
            },
            jsonValues: {
              values: ['Test string'],
            },
            stringValues: {
              values: ['Test string'],
            },
            uriValues: {
              values: ['Test string'],
            },
          },
        },
        contents: {
          contents: 'Test string',
          mimeType: 'Test string',
        },
        createTime: 'Test string',
        details: {
          description: 'Test string',
          openApiSpecDetails: {
            format: 'Test string',
            owner: {
              displayName: 'Test string',
              email: 'Test string',
            },
            version: 'Test string',
          },
        },
        displayName: 'Test string',
        documentation: {
          externalUri: 'Test string',
        },
        lintResponse: {
          createTime: 'Test string',
          issues: [
            {
              code: 'Test string',
              message: 'Test string',
              path: ['Test string'],
              range: {
                end: {
                  character: 42,
                  line: 42,
                },
                start: {
                  character: 42,
                  line: 42,
                },
              },
              severity: 'Test string',
            },
          ],
          linter: 'Test string',
          source: 'Test string',
          state: 'Test string',
          summary: [
            {
              count: 42,
              severity: 'Test string',
            },
          ],
        },
        name: 'Test string',
        parsingMode: 'Test string',
        sourceMetadata: [
          {
            originalResourceCreateTime: 'Test string',
            originalResourceId: 'Test string',
            originalResourceUpdateTime: 'Test string',
            pluginInstanceActionSource: {
              actionId: 'Test string',
              pluginInstance: 'Test string',
            },
            sourceType: 'Test string',
          },
        ],
        sourceUri: 'Test string',
        specType: {
          attribute: 'Test string',
          enumValues: {
            values: [
              {
                description: 'Test string',
                displayName: 'Test string',
                id: 'Test string',
                immutable: true,
              },
            ],
          },
          jsonValues: {
            values: ['Test string'],
          },
          stringValues: {
            values: ['Test string'],
          },
          uriValues: {
            values: ['Test string'],
          },
        },
        updateTime: 'Test string',
      },
    );
    /** Delete a spec. Deleting a spec will also delete the associated operations from the version. */
    await gapi.client.apihub.projects.locations.apis.versions.specs.delete({
      name: 'Test string',
    });
    /** Get details about the information parsed from a spec. Note that this method does not return the raw spec contents. Use GetSpecContents method to retrieve the same. */
    await gapi.client.apihub.projects.locations.apis.versions.specs.get({
      name: 'Test string',
    });
    /** Get spec contents. */
    await gapi.client.apihub.projects.locations.apis.versions.specs.getContents(
      {
        name: 'Test string',
      },
    );
    /** Lints the requested spec and updates the corresponding API Spec with the lint response. This lint response will be available in all subsequent Get and List Spec calls to Core service. */
    await gapi.client.apihub.projects.locations.apis.versions.specs.lint(
      {
        name: 'Test string',
      },
      {},
    );
    /** List specs corresponding to a particular API resource. */
    await gapi.client.apihub.projects.locations.apis.versions.specs.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Update spec. The following fields in the spec can be updated: * display_name * source_uri * lint_response * attributes * contents * spec_type In case of an OAS spec, updating spec contents can lead to: 1. Creation, deletion and update of operations. 2. Creation, deletion and update of definitions. 3. Update of other info parsed out from the new spec. In case of contents or source_uri being present in update mask, spec_type must also be present. Also, spec_type can not be present in update mask if contents or source_uri is not present. The update_mask should be used to specify the fields being updated. */
    await gapi.client.apihub.projects.locations.apis.versions.specs.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        attributes: {
          A: {
            attribute: 'Test string',
            enumValues: {
              values: [
                {
                  description: 'Test string',
                  displayName: 'Test string',
                  id: 'Test string',
                  immutable: true,
                },
              ],
            },
            jsonValues: {
              values: ['Test string'],
            },
            stringValues: {
              values: ['Test string'],
            },
            uriValues: {
              values: ['Test string'],
            },
          },
        },
        contents: {
          contents: 'Test string',
          mimeType: 'Test string',
        },
        createTime: 'Test string',
        details: {
          description: 'Test string',
          openApiSpecDetails: {
            format: 'Test string',
            owner: {
              displayName: 'Test string',
              email: 'Test string',
            },
            version: 'Test string',
          },
        },
        displayName: 'Test string',
        documentation: {
          externalUri: 'Test string',
        },
        lintResponse: {
          createTime: 'Test string',
          issues: [
            {
              code: 'Test string',
              message: 'Test string',
              path: ['Test string'],
              range: {
                end: {
                  character: 42,
                  line: 42,
                },
                start: {
                  character: 42,
                  line: 42,
                },
              },
              severity: 'Test string',
            },
          ],
          linter: 'Test string',
          source: 'Test string',
          state: 'Test string',
          summary: [
            {
              count: 42,
              severity: 'Test string',
            },
          ],
        },
        name: 'Test string',
        parsingMode: 'Test string',
        sourceMetadata: [
          {
            originalResourceCreateTime: 'Test string',
            originalResourceId: 'Test string',
            originalResourceUpdateTime: 'Test string',
            pluginInstanceActionSource: {
              actionId: 'Test string',
              pluginInstance: 'Test string',
            },
            sourceType: 'Test string',
          },
        ],
        sourceUri: 'Test string',
        specType: {
          attribute: 'Test string',
          enumValues: {
            values: [
              {
                description: 'Test string',
                displayName: 'Test string',
                id: 'Test string',
                immutable: true,
              },
            ],
          },
          jsonValues: {
            values: ['Test string'],
          },
          stringValues: {
            values: ['Test string'],
          },
          uriValues: {
            values: ['Test string'],
          },
        },
        updateTime: 'Test string',
      },
    );
    /** Create a user defined attribute. Certain pre defined attributes are already created by the API hub. These attributes will have type as `SYSTEM_DEFINED` and can be listed via ListAttributes method. Allowed values for the same can be updated via UpdateAttribute method. */
    await gapi.client.apihub.projects.locations.attributes.create(
      {
        attributeId: 'Test string',
        parent: 'Test string',
      },
      {
        allowedValues: [
          {
            description: 'Test string',
            displayName: 'Test string',
            id: 'Test string',
            immutable: true,
          },
        ],
        cardinality: 42,
        createTime: 'Test string',
        dataType: 'Test string',
        definitionType: 'Test string',
        description: 'Test string',
        displayName: 'Test string',
        mandatory: true,
        name: 'Test string',
        scope: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Delete an attribute. Note: System defined attributes cannot be deleted. All associations of the attribute being deleted with any API hub resource will also get deleted. */
    await gapi.client.apihub.projects.locations.attributes.delete({
      name: 'Test string',
    });
    /** Get details about the attribute. */
    await gapi.client.apihub.projects.locations.attributes.get({
      name: 'Test string',
    });
    /** List all attributes. */
    await gapi.client.apihub.projects.locations.attributes.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Update the attribute. The following fields in the Attribute resource can be updated: * display_name The display name can be updated for user defined attributes only. * description The description can be updated for user defined attributes only. * allowed_values To update the list of allowed values, clients need to use the fetched list of allowed values and add or remove values to or from the same list. The mutable allowed values can be updated for both user defined and System defined attributes. The immutable allowed values cannot be updated or deleted. The updated list of allowed values cannot be empty. If an allowed value that is already used by some resource's attribute is deleted, then the association between the resource and the attribute value will also be deleted. * cardinality The cardinality can be updated for user defined attributes only. Cardinality can only be increased during an update. The update_mask should be used to specify the fields being updated. */
    await gapi.client.apihub.projects.locations.attributes.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        allowedValues: [
          {
            description: 'Test string',
            displayName: 'Test string',
            id: 'Test string',
            immutable: true,
          },
        ],
        cardinality: 42,
        createTime: 'Test string',
        dataType: 'Test string',
        definitionType: 'Test string',
        description: 'Test string',
        displayName: 'Test string',
        mandatory: true,
        name: 'Test string',
        scope: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Create a curation resource in the API hub. Once a curation resource is created, plugin instances can start using it. */
    await gapi.client.apihub.projects.locations.curations.create(
      {
        curationId: 'Test string',
        parent: 'Test string',
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        displayName: 'Test string',
        endpoint: {
          applicationIntegrationEndpointDetails: {
            triggerId: 'Test string',
            uri: 'Test string',
          },
        },
        lastExecutionErrorCode: 'Test string',
        lastExecutionErrorMessage: 'Test string',
        lastExecutionState: 'Test string',
        name: 'Test string',
        pluginInstanceActions: [
          {
            actionId: 'Test string',
            pluginInstance: 'Test string',
          },
        ],
        updateTime: 'Test string',
      },
    );
    /** Delete a curation resource in the API hub. A curation can only be deleted if it's not being used by any plugin instance. */
    await gapi.client.apihub.projects.locations.curations.delete({
      name: 'Test string',
    });
    /** Get curation resource details. */
    await gapi.client.apihub.projects.locations.curations.get({
      name: 'Test string',
    });
    /** List curation resources in the API hub. */
    await gapi.client.apihub.projects.locations.curations.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Update a curation resource in the API hub. The following fields in the curation can be updated: * display_name * description The update_mask should be used to specify the fields being updated. */
    await gapi.client.apihub.projects.locations.curations.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        displayName: 'Test string',
        endpoint: {
          applicationIntegrationEndpointDetails: {
            triggerId: 'Test string',
            uri: 'Test string',
          },
        },
        lastExecutionErrorCode: 'Test string',
        lastExecutionErrorMessage: 'Test string',
        lastExecutionState: 'Test string',
        name: 'Test string',
        pluginInstanceActions: [
          {
            actionId: 'Test string',
            pluginInstance: 'Test string',
          },
        ],
        updateTime: 'Test string',
      },
    );
    /** Create a dependency between two entities in the API hub. */
    await gapi.client.apihub.projects.locations.dependencies.create(
      {
        dependencyId: 'Test string',
        parent: 'Test string',
      },
      {
        attributes: {
          A: {
            attribute: 'Test string',
            enumValues: {
              values: [
                {
                  description: 'Test string',
                  displayName: 'Test string',
                  id: 'Test string',
                  immutable: true,
                },
              ],
            },
            jsonValues: {
              values: ['Test string'],
            },
            stringValues: {
              values: ['Test string'],
            },
            uriValues: {
              values: ['Test string'],
            },
          },
        },
        consumer: {
          displayName: 'Test string',
          externalApiResourceName: 'Test string',
          operationResourceName: 'Test string',
        },
        createTime: 'Test string',
        description: 'Test string',
        discoveryMode: 'Test string',
        errorDetail: {
          error: 'Test string',
          errorTime: 'Test string',
        },
        name: 'Test string',
        state: 'Test string',
        supplier: {
          displayName: 'Test string',
          externalApiResourceName: 'Test string',
          operationResourceName: 'Test string',
        },
        updateTime: 'Test string',
      },
    );
    /** Delete the dependency resource. */
    await gapi.client.apihub.projects.locations.dependencies.delete({
      name: 'Test string',
    });
    /** Get details about a dependency resource in the API hub. */
    await gapi.client.apihub.projects.locations.dependencies.get({
      name: 'Test string',
    });
    /** List dependencies based on the provided filter and pagination parameters. */
    await gapi.client.apihub.projects.locations.dependencies.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Update a dependency based on the update_mask provided in the request. The following fields in the dependency can be updated: * description */
    await gapi.client.apihub.projects.locations.dependencies.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        attributes: {
          A: {
            attribute: 'Test string',
            enumValues: {
              values: [
                {
                  description: 'Test string',
                  displayName: 'Test string',
                  id: 'Test string',
                  immutable: true,
                },
              ],
            },
            jsonValues: {
              values: ['Test string'],
            },
            stringValues: {
              values: ['Test string'],
            },
            uriValues: {
              values: ['Test string'],
            },
          },
        },
        consumer: {
          displayName: 'Test string',
          externalApiResourceName: 'Test string',
          operationResourceName: 'Test string',
        },
        createTime: 'Test string',
        description: 'Test string',
        discoveryMode: 'Test string',
        errorDetail: {
          error: 'Test string',
          errorTime: 'Test string',
        },
        name: 'Test string',
        state: 'Test string',
        supplier: {
          displayName: 'Test string',
          externalApiResourceName: 'Test string',
          operationResourceName: 'Test string',
        },
        updateTime: 'Test string',
      },
    );
    /** Create a deployment resource in the API hub. Once a deployment resource is created, it can be associated with API versions. */
    await gapi.client.apihub.projects.locations.deployments.create(
      {
        deploymentId: 'Test string',
        parent: 'Test string',
      },
      {
        apiVersions: ['Test string'],
        attributes: {
          A: {
            attribute: 'Test string',
            enumValues: {
              values: [
                {
                  description: 'Test string',
                  displayName: 'Test string',
                  id: 'Test string',
                  immutable: true,
                },
              ],
            },
            jsonValues: {
              values: ['Test string'],
            },
            stringValues: {
              values: ['Test string'],
            },
            uriValues: {
              values: ['Test string'],
            },
          },
        },
        createTime: 'Test string',
        deploymentType: {
          attribute: 'Test string',
          enumValues: {
            values: [
              {
                description: 'Test string',
                displayName: 'Test string',
                id: 'Test string',
                immutable: true,
              },
            ],
          },
          jsonValues: {
            values: ['Test string'],
          },
          stringValues: {
            values: ['Test string'],
          },
          uriValues: {
            values: ['Test string'],
          },
        },
        description: 'Test string',
        displayName: 'Test string',
        documentation: {
          externalUri: 'Test string',
        },
        endpoints: ['Test string'],
        environment: {
          attribute: 'Test string',
          enumValues: {
            values: [
              {
                description: 'Test string',
                displayName: 'Test string',
                id: 'Test string',
                immutable: true,
              },
            ],
          },
          jsonValues: {
            values: ['Test string'],
          },
          stringValues: {
            values: ['Test string'],
          },
          uriValues: {
            values: ['Test string'],
          },
        },
        name: 'Test string',
        resourceUri: 'Test string',
        slo: {
          attribute: 'Test string',
          enumValues: {
            values: [
              {
                description: 'Test string',
                displayName: 'Test string',
                id: 'Test string',
                immutable: true,
              },
            ],
          },
          jsonValues: {
            values: ['Test string'],
          },
          stringValues: {
            values: ['Test string'],
          },
          uriValues: {
            values: ['Test string'],
          },
        },
        sourceMetadata: [
          {
            originalResourceCreateTime: 'Test string',
            originalResourceId: 'Test string',
            originalResourceUpdateTime: 'Test string',
            pluginInstanceActionSource: {
              actionId: 'Test string',
              pluginInstance: 'Test string',
            },
            sourceType: 'Test string',
          },
        ],
        updateTime: 'Test string',
      },
    );
    /** Delete a deployment resource in the API hub. */
    await gapi.client.apihub.projects.locations.deployments.delete({
      name: 'Test string',
    });
    /** Get details about a deployment and the API versions linked to it. */
    await gapi.client.apihub.projects.locations.deployments.get({
      name: 'Test string',
    });
    /** List deployment resources in the API hub. */
    await gapi.client.apihub.projects.locations.deployments.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Update a deployment resource in the API hub. The following fields in the deployment resource can be updated: * display_name * description * documentation * deployment_type * resource_uri * endpoints * slo * environment * attributes * source_project * source_environment * management_url * source_uri The update_mask should be used to specify the fields being updated. */
    await gapi.client.apihub.projects.locations.deployments.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        apiVersions: ['Test string'],
        attributes: {
          A: {
            attribute: 'Test string',
            enumValues: {
              values: [
                {
                  description: 'Test string',
                  displayName: 'Test string',
                  id: 'Test string',
                  immutable: true,
                },
              ],
            },
            jsonValues: {
              values: ['Test string'],
            },
            stringValues: {
              values: ['Test string'],
            },
            uriValues: {
              values: ['Test string'],
            },
          },
        },
        createTime: 'Test string',
        deploymentType: {
          attribute: 'Test string',
          enumValues: {
            values: [
              {
                description: 'Test string',
                displayName: 'Test string',
                id: 'Test string',
                immutable: true,
              },
            ],
          },
          jsonValues: {
            values: ['Test string'],
          },
          stringValues: {
            values: ['Test string'],
          },
          uriValues: {
            values: ['Test string'],
          },
        },
        description: 'Test string',
        displayName: 'Test string',
        documentation: {
          externalUri: 'Test string',
        },
        endpoints: ['Test string'],
        environment: {
          attribute: 'Test string',
          enumValues: {
            values: [
              {
                description: 'Test string',
                displayName: 'Test string',
                id: 'Test string',
                immutable: true,
              },
            ],
          },
          jsonValues: {
            values: ['Test string'],
          },
          stringValues: {
            values: ['Test string'],
          },
          uriValues: {
            values: ['Test string'],
          },
        },
        name: 'Test string',
        resourceUri: 'Test string',
        slo: {
          attribute: 'Test string',
          enumValues: {
            values: [
              {
                description: 'Test string',
                displayName: 'Test string',
                id: 'Test string',
                immutable: true,
              },
            ],
          },
          jsonValues: {
            values: ['Test string'],
          },
          stringValues: {
            values: ['Test string'],
          },
          uriValues: {
            values: ['Test string'],
          },
        },
        sourceMetadata: [
          {
            originalResourceCreateTime: 'Test string',
            originalResourceId: 'Test string',
            originalResourceUpdateTime: 'Test string',
            pluginInstanceActionSource: {
              actionId: 'Test string',
              pluginInstance: 'Test string',
            },
            sourceType: 'Test string',
          },
        ],
        updateTime: 'Test string',
      },
    );
    /** Create an External API resource in the API hub. */
    await gapi.client.apihub.projects.locations.externalApis.create(
      {
        externalApiId: 'Test string',
        parent: 'Test string',
      },
      {
        attributes: {
          A: {
            attribute: 'Test string',
            enumValues: {
              values: [
                {
                  description: 'Test string',
                  displayName: 'Test string',
                  id: 'Test string',
                  immutable: true,
                },
              ],
            },
            jsonValues: {
              values: ['Test string'],
            },
            stringValues: {
              values: ['Test string'],
            },
            uriValues: {
              values: ['Test string'],
            },
          },
        },
        createTime: 'Test string',
        description: 'Test string',
        displayName: 'Test string',
        documentation: {
          externalUri: 'Test string',
        },
        endpoints: ['Test string'],
        name: 'Test string',
        paths: ['Test string'],
        updateTime: 'Test string',
      },
    );
    /** Delete an External API resource in the API hub. */
    await gapi.client.apihub.projects.locations.externalApis.delete({
      name: 'Test string',
    });
    /** Get details about an External API resource in the API hub. */
    await gapi.client.apihub.projects.locations.externalApis.get({
      name: 'Test string',
    });
    /** List External API resources in the API hub. */
    await gapi.client.apihub.projects.locations.externalApis.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Update an External API resource in the API hub. The following fields can be updated: * display_name * description * documentation * endpoints * paths The update_mask should be used to specify the fields being updated. */
    await gapi.client.apihub.projects.locations.externalApis.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        attributes: {
          A: {
            attribute: 'Test string',
            enumValues: {
              values: [
                {
                  description: 'Test string',
                  displayName: 'Test string',
                  id: 'Test string',
                  immutable: true,
                },
              ],
            },
            jsonValues: {
              values: ['Test string'],
            },
            stringValues: {
              values: ['Test string'],
            },
            uriValues: {
              values: ['Test string'],
            },
          },
        },
        createTime: 'Test string',
        description: 'Test string',
        displayName: 'Test string',
        documentation: {
          externalUri: 'Test string',
        },
        endpoints: ['Test string'],
        name: 'Test string',
        paths: ['Test string'],
        updateTime: 'Test string',
      },
    );
    /** Create a host project registration. A Google cloud project can be registered as a host project if it is not attached as a runtime project to another host project. A project can be registered as a host project only once. Subsequent register calls for the same project will fail. */
    await gapi.client.apihub.projects.locations.hostProjectRegistrations.create(
      {
        hostProjectRegistrationId: 'Test string',
        parent: 'Test string',
      },
      {
        createTime: 'Test string',
        gcpProject: 'Test string',
        name: 'Test string',
      },
    );
    /** Get a host project registration. */
    await gapi.client.apihub.projects.locations.hostProjectRegistrations.get({
      name: 'Test string',
    });
    /** Lists host project registrations. */
    await gapi.client.apihub.projects.locations.hostProjectRegistrations.list({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of `1`, corresponding to `Code.CANCELLED`. */
    await gapi.client.apihub.projects.locations.operations.cancel(
      {
        name: 'Test string',
      },
      {},
    );
    /** Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. */
    await gapi.client.apihub.projects.locations.operations.delete({
      name: 'Test string',
    });
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.apihub.projects.locations.operations.get({
      name: 'Test string',
    });
    /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
    await gapi.client.apihub.projects.locations.operations.list({
      filter: 'Test string',
      name: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Create an API Hub plugin resource in the API hub. Once a plugin is created, it can be used to create plugin instances. */
    await gapi.client.apihub.projects.locations.plugins.create(
      {
        parent: 'Test string',
        pluginId: 'Test string',
      },
      {
        actionsConfig: [
          {
            description: 'Test string',
            displayName: 'Test string',
            id: 'Test string',
            triggerMode: 'Test string',
          },
        ],
        configTemplate: {
          additionalConfigTemplate: [
            {
              description: 'Test string',
              enumOptions: [
                {
                  description: 'Test string',
                  displayName: 'Test string',
                  id: 'Test string',
                },
              ],
              id: 'Test string',
              multiSelectOptions: [
                {
                  description: 'Test string',
                  displayName: 'Test string',
                  id: 'Test string',
                },
              ],
              required: true,
              validationRegex: 'Test string',
              valueType: 'Test string',
            },
          ],
          authConfigTemplate: {
            serviceAccount: {
              serviceAccount: 'Test string',
            },
            supportedAuthTypes: ['Test string'],
          },
        },
        createTime: 'Test string',
        description: 'Test string',
        displayName: 'Test string',
        documentation: {
          externalUri: 'Test string',
        },
        hostingService: {
          serviceUri: 'Test string',
        },
        name: 'Test string',
        ownershipType: 'Test string',
        pluginCategory: 'Test string',
        state: 'Test string',
        type: {
          attribute: 'Test string',
          enumValues: {
            values: [
              {
                description: 'Test string',
                displayName: 'Test string',
                id: 'Test string',
                immutable: true,
              },
            ],
          },
          jsonValues: {
            values: ['Test string'],
          },
          stringValues: {
            values: ['Test string'],
          },
          uriValues: {
            values: ['Test string'],
          },
        },
        updateTime: 'Test string',
      },
    );
    /** Delete a Plugin in API hub. Note, only user owned plugins can be deleted via this method. */
    await gapi.client.apihub.projects.locations.plugins.delete({
      name: 'Test string',
    });
    /** Disables a plugin. The `state` of the plugin after disabling is `DISABLED` */
    await gapi.client.apihub.projects.locations.plugins.disable(
      {
        name: 'Test string',
      },
      {},
    );
    /** Enables a plugin. The `state` of the plugin after enabling is `ENABLED` */
    await gapi.client.apihub.projects.locations.plugins.enable(
      {
        name: 'Test string',
      },
      {},
    );
    /** Get an API Hub plugin. */
    await gapi.client.apihub.projects.locations.plugins.get({
      name: 'Test string',
    });
    /** Get the style guide being used for linting. */
    await gapi.client.apihub.projects.locations.plugins.getStyleGuide({
      name: 'Test string',
    });
    /** List all the plugins in a given project and location. */
    await gapi.client.apihub.projects.locations.plugins.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Update the styleGuide to be used for liniting in by API hub. */
    await gapi.client.apihub.projects.locations.plugins.updateStyleGuide(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        contents: {
          contents: 'Test string',
          mimeType: 'Test string',
        },
        linter: 'Test string',
        name: 'Test string',
      },
    );
    /** Creates a Plugin instance in the API hub. */
    await gapi.client.apihub.projects.locations.plugins.instances.create(
      {
        parent: 'Test string',
        pluginInstanceId: 'Test string',
      },
      {
        actions: [
          {
            actionId: 'Test string',
            curationConfig: {
              curationType: 'Test string',
              customCuration: {
                curation: 'Test string',
              },
            },
            hubInstanceAction: {
              currentExecutionState: 'Test string',
              lastExecution: {
                endTime: 'Test string',
                errorMessage: 'Test string',
                result: 'Test string',
                startTime: 'Test string',
              },
            },
            scheduleCronExpression: 'Test string',
            scheduleTimeZone: 'Test string',
            state: 'Test string',
          },
        ],
        additionalConfig: {
          A: {
            boolValue: true,
            enumValue: {
              description: 'Test string',
              displayName: 'Test string',
              id: 'Test string',
            },
            intValue: 'Test string',
            key: 'Test string',
            multiIntValues: {
              values: [42],
            },
            multiSelectValues: {
              values: [
                {
                  description: 'Test string',
                  displayName: 'Test string',
                  id: 'Test string',
                },
              ],
            },
            multiStringValues: {
              values: ['Test string'],
            },
            secretValue: {
              secretVersion: 'Test string',
            },
            stringValue: 'Test string',
          },
        },
        authConfig: {
          apiKeyConfig: {
            apiKey: {
              secretVersion: 'Test string',
            },
            httpElementLocation: 'Test string',
            name: 'Test string',
          },
          authType: 'Test string',
          googleServiceAccountConfig: {
            serviceAccount: 'Test string',
          },
          oauth2ClientCredentialsConfig: {
            clientId: 'Test string',
            clientSecret: {
              secretVersion: 'Test string',
            },
          },
          userPasswordConfig: {
            password: {
              secretVersion: 'Test string',
            },
            username: 'Test string',
          },
        },
        createTime: 'Test string',
        displayName: 'Test string',
        errorMessage: 'Test string',
        name: 'Test string',
        state: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Deletes a plugin instance in the API hub. */
    await gapi.client.apihub.projects.locations.plugins.instances.delete({
      name: 'Test string',
    });
    /** Disables a plugin instance in the API hub. */
    await gapi.client.apihub.projects.locations.plugins.instances.disableAction(
      {
        name: 'Test string',
      },
      {
        actionId: 'Test string',
      },
    );
    /** Enables a plugin instance in the API hub. */
    await gapi.client.apihub.projects.locations.plugins.instances.enableAction(
      {
        name: 'Test string',
      },
      {
        actionId: 'Test string',
      },
    );
    /** Executes a plugin instance in the API hub. */
    await gapi.client.apihub.projects.locations.plugins.instances.executeAction(
      {
        name: 'Test string',
      },
      {
        actionExecutionDetail: {
          actionId: 'Test string',
        },
      },
    );
    /** Get an API Hub plugin instance. */
    await gapi.client.apihub.projects.locations.plugins.instances.get({
      name: 'Test string',
    });
    /** List all the plugins in a given project and location. `-` can be used as wildcard value for {plugin_id} */
    await gapi.client.apihub.projects.locations.plugins.instances.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Get the contents of the style guide. */
    await gapi.client.apihub.projects.locations.plugins.styleGuide.getContents({
      name: 'Test string',
    });
    /** Attaches a runtime project to the host project. */
    await gapi.client.apihub.projects.locations.runtimeProjectAttachments.create(
      {
        parent: 'Test string',
        runtimeProjectAttachmentId: 'Test string',
      },
      {
        createTime: 'Test string',
        name: 'Test string',
        runtimeProject: 'Test string',
      },
    );
    /** Delete a runtime project attachment in the API Hub. This call will detach the runtime project from the host project. */
    await gapi.client.apihub.projects.locations.runtimeProjectAttachments.delete(
      {
        name: 'Test string',
      },
    );
    /** Gets a runtime project attachment. */
    await gapi.client.apihub.projects.locations.runtimeProjectAttachments.get({
      name: 'Test string',
    });
    /** List runtime projects attached to the host project. */
    await gapi.client.apihub.projects.locations.runtimeProjectAttachments.list({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
  }
});
