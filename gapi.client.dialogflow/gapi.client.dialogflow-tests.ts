/* This is stub file for gapi.client.dialogflow definition tests */
/* IMPORTANT.
* This file was automatically generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
* In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
**/

// Revision: 20201204

gapi.load('client', () => {
    /** now we can use gapi.client */
    gapi.client.load('dialogflow', 'v2', () => {
        /** now we can use gapi.client.dialogflow */

        /** don't forget to authenticate your client before sending any request to resources: */
        /** declare client_id registered in Google Developers Console */
        const client_id = '<<PUT YOUR CLIENT ID HERE>>';
        const scope = [
            /** View and manage your data across Google Cloud Platform services */
            'https://www.googleapis.com/auth/cloud-platform',
            /** View, manage and query your Dialogflow agents */
            'https://www.googleapis.com/auth/dialogflow',
        ];
        const immediate = false;
        gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
            if (authResult && !authResult.error) {
                /** handle successful authorization */
                run();
            } else {
                /** handle authorization error */
            }
        });
    });

    async function run() {
        /** Deletes the specified agent. */
        await gapi.client.dialogflow.projects.deleteAgent({
            parent: "Test string",
        });
        /** Exports the specified agent to a ZIP file. Operation */
        await gapi.client.dialogflow.projects.agent.export({
            parent: "Test string",
        }, {
            agentUri: "Test string",
        });
        /** Deletes entity types in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.batchDelete({
            parent: "Test string",
        }, {
            entityTypeNames: [
                "Test string"            ],
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Updates/Creates multiple entity types in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.batchUpdate({
            parent: "Test string",
        }, {
            entityTypeBatchInline: {
                entityTypes: [
                    {
                        autoExpansionMode: "Test string",
                        displayName: "Test string",
                        enableFuzzyExtraction: true,
                        entities: [
                            {
                                synonyms: [
                                    "Test string"                                ],
                                value: "Test string",
                            }                        ],
                        kind: "Test string",
                        name: "Test string",
                    }                ],
            },
            entityTypeBatchUri: "Test string",
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Creates an entity type in the specified agent. */
        await gapi.client.dialogflow.projects.agent.entityTypes.create({
            languageCode: "Test string",
            parent: "Test string",
        }, {
            autoExpansionMode: "Test string",
            displayName: "Test string",
            enableFuzzyExtraction: true,
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            kind: "Test string",
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Deletes the specified entity type. */
        await gapi.client.dialogflow.projects.agent.entityTypes.delete({
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Retrieves the specified entity type. */
        await gapi.client.dialogflow.projects.agent.entityTypes.get({
            languageCode: "Test string",
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Returns the list of all entity types in the specified agent. */
        await gapi.client.dialogflow.projects.agent.entityTypes.list({
            languageCode: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Updates the specified entity type. */
        await gapi.client.dialogflow.projects.agent.entityTypes.patch({
            languageCode: "Test string",
            name: "Test string",
            updateMask: "Test string",
        }, {
            autoExpansionMode: "Test string",
            displayName: "Test string",
            enableFuzzyExtraction: true,
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            kind: "Test string",
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Returns the list of all non-draft environments of the specified agent. */
        await gapi.client.dialogflow.projects.agent.environments.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Deletes intents in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.intents.batchDelete({
            parent: "Test string",
        }, {
            intents: [
                {
                    action: "Test string",
                    defaultResponsePlatforms: [
                        "Test string"                    ],
                    displayName: "Test string",
                    events: [
                        "Test string"                    ],
                    followupIntentInfo: [
                        {
                            followupIntentName: "Test string",
                            parentFollowupIntentName: "Test string",
                        }                    ],
                    inputContextNames: [
                        "Test string"                    ],
                    isFallback: true,
                    messages: [
                        {
                            basicCard: {
                                buttons: [
                                    {
                                        openUriAction: {
                                            uri: "Test string",
                                        },
                                        title: "Test string",
                                    }                                ],
                                formattedText: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            browseCarouselCard: {
                                imageDisplayOptions: "Test string",
                                items: [
                                    {
                                        description: "Test string",
                                        footer: "Test string",
                                        image: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        openUriAction: {
                                            url: "Test string",
                                            urlTypeHint: "Test string",
                                        },
                                        title: "Test string",
                                    }                                ],
                            },
                            card: {
                                buttons: [
                                    {
                                        postback: "Test string",
                                        text: "Test string",
                                    }                                ],
                                imageUri: "Test string",
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            carouselSelect: {
                                items: [
                                    {
                                        description: "Test string",
                                        image: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        info: {
                                            key: "Test string",
                                            synonyms: [
                                                "Test string"                                            ],
                                        },
                                        title: "Test string",
                                    }                                ],
                            },
                            image: {
                                accessibilityText: "Test string",
                                imageUri: "Test string",
                            },
                            linkOutSuggestion: {
                                destinationName: "Test string",
                                uri: "Test string",
                            },
                            listSelect: {
                                items: [
                                    {
                                        description: "Test string",
                                        image: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        info: {
                                            key: "Test string",
                                            synonyms: [
                                                "Test string"                                            ],
                                        },
                                        title: "Test string",
                                    }                                ],
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            mediaContent: {
                                mediaObjects: [
                                    {
                                        contentUrl: "Test string",
                                        description: "Test string",
                                        icon: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        largeImage: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        name: "Test string",
                                    }                                ],
                                mediaType: "Test string",
                            },
                            payload: {
                                A: 42                            },
                            platform: "Test string",
                            quickReplies: {
                                quickReplies: [
                                    "Test string"                                ],
                                title: "Test string",
                            },
                            simpleResponses: {
                                simpleResponses: [
                                    {
                                        displayText: "Test string",
                                        ssml: "Test string",
                                        textToSpeech: "Test string",
                                    }                                ],
                            },
                            suggestions: {
                                suggestions: [
                                    {
                                        title: "Test string",
                                    }                                ],
                            },
                            tableCard: {
                                buttons: [
                                    {
                                        openUriAction: {
                                            uri: "Test string",
                                        },
                                        title: "Test string",
                                    }                                ],
                                columnProperties: [
                                    {
                                        header: "Test string",
                                        horizontalAlignment: "Test string",
                                    }                                ],
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                rows: [
                                    {
                                        cells: [
                                            {
                                                text: "Test string",
                                            }                                        ],
                                        dividerAfter: true,
                                    }                                ],
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            text: {
                                text: [
                                    "Test string"                                ],
                            },
                        }                    ],
                    mlDisabled: true,
                    name: "Test string",
                    outputContexts: [
                        {
                            lifespanCount: 42,
                            name: "Test string",
                            parameters: {
                                A: 42                            },
                        }                    ],
                    parameters: [
                        {
                            defaultValue: "Test string",
                            displayName: "Test string",
                            entityTypeDisplayName: "Test string",
                            isList: true,
                            mandatory: true,
                            name: "Test string",
                            prompts: [
                                "Test string"                            ],
                            value: "Test string",
                        }                    ],
                    parentFollowupIntentName: "Test string",
                    priority: 42,
                    resetContexts: true,
                    rootFollowupIntentName: "Test string",
                    trainingPhrases: [
                        {
                            name: "Test string",
                            parts: [
                                {
                                    alias: "Test string",
                                    entityType: "Test string",
                                    text: "Test string",
                                    userDefined: true,
                                }                            ],
                            timesAddedCount: 42,
                            type: "Test string",
                        }                    ],
                    webhookState: "Test string",
                }            ],
        });
        /** Updates/Creates multiple intents in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.intents.batchUpdate({
            parent: "Test string",
        }, {
            intentBatchInline: {
                intents: [
                    {
                        action: "Test string",
                        defaultResponsePlatforms: [
                            "Test string"                        ],
                        displayName: "Test string",
                        events: [
                            "Test string"                        ],
                        followupIntentInfo: [
                            {
                                followupIntentName: "Test string",
                                parentFollowupIntentName: "Test string",
                            }                        ],
                        inputContextNames: [
                            "Test string"                        ],
                        isFallback: true,
                        messages: [
                            {
                                basicCard: {
                                    buttons: [
                                        {
                                            openUriAction: {
                                                uri: "Test string",
                                            },
                                            title: "Test string",
                                        }                                    ],
                                    formattedText: "Test string",
                                    image: {
                                        accessibilityText: "Test string",
                                        imageUri: "Test string",
                                    },
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                browseCarouselCard: {
                                    imageDisplayOptions: "Test string",
                                    items: [
                                        {
                                            description: "Test string",
                                            footer: "Test string",
                                            image: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            openUriAction: {
                                                url: "Test string",
                                                urlTypeHint: "Test string",
                                            },
                                            title: "Test string",
                                        }                                    ],
                                },
                                card: {
                                    buttons: [
                                        {
                                            postback: "Test string",
                                            text: "Test string",
                                        }                                    ],
                                    imageUri: "Test string",
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                carouselSelect: {
                                    items: [
                                        {
                                            description: "Test string",
                                            image: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            info: {
                                                key: "Test string",
                                                synonyms: [
                                                    "Test string"                                                ],
                                            },
                                            title: "Test string",
                                        }                                    ],
                                },
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                linkOutSuggestion: {
                                    destinationName: "Test string",
                                    uri: "Test string",
                                },
                                listSelect: {
                                    items: [
                                        {
                                            description: "Test string",
                                            image: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            info: {
                                                key: "Test string",
                                                synonyms: [
                                                    "Test string"                                                ],
                                            },
                                            title: "Test string",
                                        }                                    ],
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                mediaContent: {
                                    mediaObjects: [
                                        {
                                            contentUrl: "Test string",
                                            description: "Test string",
                                            icon: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            largeImage: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            name: "Test string",
                                        }                                    ],
                                    mediaType: "Test string",
                                },
                                payload: {
                                    A: 42                                },
                                platform: "Test string",
                                quickReplies: {
                                    quickReplies: [
                                        "Test string"                                    ],
                                    title: "Test string",
                                },
                                simpleResponses: {
                                    simpleResponses: [
                                        {
                                            displayText: "Test string",
                                            ssml: "Test string",
                                            textToSpeech: "Test string",
                                        }                                    ],
                                },
                                suggestions: {
                                    suggestions: [
                                        {
                                            title: "Test string",
                                        }                                    ],
                                },
                                tableCard: {
                                    buttons: [
                                        {
                                            openUriAction: {
                                                uri: "Test string",
                                            },
                                            title: "Test string",
                                        }                                    ],
                                    columnProperties: [
                                        {
                                            header: "Test string",
                                            horizontalAlignment: "Test string",
                                        }                                    ],
                                    image: {
                                        accessibilityText: "Test string",
                                        imageUri: "Test string",
                                    },
                                    rows: [
                                        {
                                            cells: [
                                                {
                                                    text: "Test string",
                                                }                                            ],
                                            dividerAfter: true,
                                        }                                    ],
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                text: {
                                    text: [
                                        "Test string"                                    ],
                                },
                            }                        ],
                        mlDisabled: true,
                        name: "Test string",
                        outputContexts: [
                            {
                                lifespanCount: 42,
                                name: "Test string",
                                parameters: {
                                    A: 42                                },
                            }                        ],
                        parameters: [
                            {
                                defaultValue: "Test string",
                                displayName: "Test string",
                                entityTypeDisplayName: "Test string",
                                isList: true,
                                mandatory: true,
                                name: "Test string",
                                prompts: [
                                    "Test string"                                ],
                                value: "Test string",
                            }                        ],
                        parentFollowupIntentName: "Test string",
                        priority: 42,
                        resetContexts: true,
                        rootFollowupIntentName: "Test string",
                        trainingPhrases: [
                            {
                                name: "Test string",
                                parts: [
                                    {
                                        alias: "Test string",
                                        entityType: "Test string",
                                        text: "Test string",
                                        userDefined: true,
                                    }                                ],
                                timesAddedCount: 42,
                                type: "Test string",
                            }                        ],
                        webhookState: "Test string",
                    }                ],
            },
            intentBatchUri: "Test string",
            intentView: "Test string",
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Creates an intent in the specified agent. */
        await gapi.client.dialogflow.projects.agent.intents.create({
            intentView: "Test string",
            languageCode: "Test string",
            parent: "Test string",
        }, {
            action: "Test string",
            defaultResponsePlatforms: [
                "Test string"            ],
            displayName: "Test string",
            events: [
                "Test string"            ],
            followupIntentInfo: [
                {
                    followupIntentName: "Test string",
                    parentFollowupIntentName: "Test string",
                }            ],
            inputContextNames: [
                "Test string"            ],
            isFallback: true,
            messages: [
                {
                    basicCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        formattedText: "Test string",
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    browseCarouselCard: {
                        imageDisplayOptions: "Test string",
                        items: [
                            {
                                description: "Test string",
                                footer: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                openUriAction: {
                                    url: "Test string",
                                    urlTypeHint: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                    },
                    card: {
                        buttons: [
                            {
                                postback: "Test string",
                                text: "Test string",
                            }                        ],
                        imageUri: "Test string",
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    carouselSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                    },
                    image: {
                        accessibilityText: "Test string",
                        imageUri: "Test string",
                    },
                    linkOutSuggestion: {
                        destinationName: "Test string",
                        uri: "Test string",
                    },
                    listSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    mediaContent: {
                        mediaObjects: [
                            {
                                contentUrl: "Test string",
                                description: "Test string",
                                icon: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                largeImage: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                name: "Test string",
                            }                        ],
                        mediaType: "Test string",
                    },
                    payload: {
                        A: 42                    },
                    platform: "Test string",
                    quickReplies: {
                        quickReplies: [
                            "Test string"                        ],
                        title: "Test string",
                    },
                    simpleResponses: {
                        simpleResponses: [
                            {
                                displayText: "Test string",
                                ssml: "Test string",
                                textToSpeech: "Test string",
                            }                        ],
                    },
                    suggestions: {
                        suggestions: [
                            {
                                title: "Test string",
                            }                        ],
                    },
                    tableCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        columnProperties: [
                            {
                                header: "Test string",
                                horizontalAlignment: "Test string",
                            }                        ],
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        rows: [
                            {
                                cells: [
                                    {
                                        text: "Test string",
                                    }                                ],
                                dividerAfter: true,
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    text: {
                        text: [
                            "Test string"                        ],
                    },
                }            ],
            mlDisabled: true,
            name: "Test string",
            outputContexts: [
                {
                    lifespanCount: 42,
                    name: "Test string",
                    parameters: {
                        A: 42                    },
                }            ],
            parameters: [
                {
                    defaultValue: "Test string",
                    displayName: "Test string",
                    entityTypeDisplayName: "Test string",
                    isList: true,
                    mandatory: true,
                    name: "Test string",
                    prompts: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            parentFollowupIntentName: "Test string",
            priority: 42,
            resetContexts: true,
            rootFollowupIntentName: "Test string",
            trainingPhrases: [
                {
                    name: "Test string",
                    parts: [
                        {
                            alias: "Test string",
                            entityType: "Test string",
                            text: "Test string",
                            userDefined: true,
                        }                    ],
                    timesAddedCount: 42,
                    type: "Test string",
                }            ],
            webhookState: "Test string",
        });
        /** Deletes the specified intent and its direct or indirect followup intents. */
        await gapi.client.dialogflow.projects.agent.intents.delete({
            name: "Test string",
        });
        /** Retrieves the specified intent. */
        await gapi.client.dialogflow.projects.agent.intents.get({
            intentView: "Test string",
            languageCode: "Test string",
            name: "Test string",
        });
        /** Returns the list of all intents in the specified agent. */
        await gapi.client.dialogflow.projects.agent.intents.list({
            intentView: "Test string",
            languageCode: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified intent. */
        await gapi.client.dialogflow.projects.agent.intents.patch({
            intentView: "Test string",
            languageCode: "Test string",
            name: "Test string",
            updateMask: "Test string",
        }, {
            action: "Test string",
            defaultResponsePlatforms: [
                "Test string"            ],
            displayName: "Test string",
            events: [
                "Test string"            ],
            followupIntentInfo: [
                {
                    followupIntentName: "Test string",
                    parentFollowupIntentName: "Test string",
                }            ],
            inputContextNames: [
                "Test string"            ],
            isFallback: true,
            messages: [
                {
                    basicCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        formattedText: "Test string",
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    browseCarouselCard: {
                        imageDisplayOptions: "Test string",
                        items: [
                            {
                                description: "Test string",
                                footer: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                openUriAction: {
                                    url: "Test string",
                                    urlTypeHint: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                    },
                    card: {
                        buttons: [
                            {
                                postback: "Test string",
                                text: "Test string",
                            }                        ],
                        imageUri: "Test string",
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    carouselSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                    },
                    image: {
                        accessibilityText: "Test string",
                        imageUri: "Test string",
                    },
                    linkOutSuggestion: {
                        destinationName: "Test string",
                        uri: "Test string",
                    },
                    listSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    mediaContent: {
                        mediaObjects: [
                            {
                                contentUrl: "Test string",
                                description: "Test string",
                                icon: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                largeImage: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                name: "Test string",
                            }                        ],
                        mediaType: "Test string",
                    },
                    payload: {
                        A: 42                    },
                    platform: "Test string",
                    quickReplies: {
                        quickReplies: [
                            "Test string"                        ],
                        title: "Test string",
                    },
                    simpleResponses: {
                        simpleResponses: [
                            {
                                displayText: "Test string",
                                ssml: "Test string",
                                textToSpeech: "Test string",
                            }                        ],
                    },
                    suggestions: {
                        suggestions: [
                            {
                                title: "Test string",
                            }                        ],
                    },
                    tableCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        columnProperties: [
                            {
                                header: "Test string",
                                horizontalAlignment: "Test string",
                            }                        ],
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        rows: [
                            {
                                cells: [
                                    {
                                        text: "Test string",
                                    }                                ],
                                dividerAfter: true,
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    text: {
                        text: [
                            "Test string"                        ],
                    },
                }            ],
            mlDisabled: true,
            name: "Test string",
            outputContexts: [
                {
                    lifespanCount: 42,
                    name: "Test string",
                    parameters: {
                        A: 42                    },
                }            ],
            parameters: [
                {
                    defaultValue: "Test string",
                    displayName: "Test string",
                    entityTypeDisplayName: "Test string",
                    isList: true,
                    mandatory: true,
                    name: "Test string",
                    prompts: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            parentFollowupIntentName: "Test string",
            priority: 42,
            resetContexts: true,
            rootFollowupIntentName: "Test string",
            trainingPhrases: [
                {
                    name: "Test string",
                    parts: [
                        {
                            alias: "Test string",
                            entityType: "Test string",
                            text: "Test string",
                            userDefined: true,
                        }                    ],
                    timesAddedCount: 42,
                    type: "Test string",
                }            ],
            webhookState: "Test string",
        });
        /** Deletes all active contexts in the specified session. */
        await gapi.client.dialogflow.projects.agent.sessions.deleteContexts({
            parent: "Test string",
        });
        /** Creates a context. If the specified context already exists, overrides the context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.create({
            parent: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /** Deletes the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.delete({
            name: "Test string",
        });
        /** Retrieves the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.get({
            name: "Test string",
        });
        /** Returns the list of all contexts in the specified session. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /**
         * Creates a session entity type. If the specified session entity type already exists, overrides the session entity type. This method doesn't work with Google Assistant integration.
         * Contact Dialogflow support if you need to use session entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.create({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /**
         * Deletes the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.delete({
            name: "Test string",
        });
        /**
         * Retrieves the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.get({
            name: "Test string",
        });
        /**
         * Returns the list of all session entity types in the specified session. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session
         * entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Updates the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /**
         * Processes a natural language query and returns structured, actionable data as a result. This method is not idempotent, because it may cause contexts and session entity types to be
         * updated, which in turn might affect results of future queries. Note: Always use agent versions for production traffic. See [Versions and
         * environments](https://cloud.google.com/dialogflow/es/docs/agents-versions).
         */
        await gapi.client.dialogflow.projects.agent.sessions.detectIntent({
            session: "Test string",
        }, {
            inputAudio: "Test string",
            outputAudioConfig: {
                audioEncoding: "Test string",
                sampleRateHertz: 42,
                synthesizeSpeechConfig: {
                    effectsProfileId: [
                        "Test string"                    ],
                    pitch: 42,
                    speakingRate: 42,
                    voice: {
                        name: "Test string",
                        ssmlGender: "Test string",
                    },
                    volumeGainDb: 42,
                },
            },
            outputAudioConfigMask: "Test string",
            queryInput: {
                audioConfig: {
                    audioEncoding: "Test string",
                    enableWordInfo: true,
                    languageCode: "Test string",
                    model: "Test string",
                    modelVariant: "Test string",
                    phraseHints: [
                        "Test string"                    ],
                    sampleRateHertz: 42,
                    singleUtterance: true,
                    speechContexts: [
                        {
                            boost: 42,
                            phrases: [
                                "Test string"                            ],
                        }                    ],
                },
                event: {
                    languageCode: "Test string",
                    name: "Test string",
                    parameters: {
                        A: 42                    },
                },
                text: {
                    languageCode: "Test string",
                    text: "Test string",
                },
            },
            queryParams: {
                contexts: [
                    {
                        lifespanCount: 42,
                        name: "Test string",
                        parameters: {
                            A: 42                        },
                    }                ],
                geoLocation: {
                    latitude: 42,
                    longitude: 42,
                },
                payload: {
                    A: 42                },
                resetContexts: true,
                sentimentAnalysisRequestConfig: {
                    analyzeQueryTextSentiment: true,
                },
                sessionEntityTypes: [
                    {
                        entities: [
                            {
                                synonyms: [
                                    "Test string"                                ],
                                value: "Test string",
                            }                        ],
                        entityOverrideMode: "Test string",
                        name: "Test string",
                    }                ],
                timeZone: "Test string",
                webhookHeaders: {
                    A: "Test string"                },
            },
        });
        /** Creates a context. If the specified context already exists, overrides the context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.create({
            parent: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /** Deletes the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.delete({
            name: "Test string",
        });
        /** Retrieves the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.get({
            name: "Test string",
        });
        /** Returns the list of all contexts in the specified session. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /**
         * Creates a session entity type. If the specified session entity type already exists, overrides the session entity type. This method doesn't work with Google Assistant integration.
         * Contact Dialogflow support if you need to use session entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.create({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /**
         * Deletes the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.delete({
            name: "Test string",
        });
        /**
         * Retrieves the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.get({
            name: "Test string",
        });
        /**
         * Returns the list of all session entity types in the specified session. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session
         * entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Updates the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /** Retrieves the fulfillment. */
        await gapi.client.dialogflow.projects.agent.getFulfillment({
            name: "Test string",
        });
        /** Deletes entity types in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.batchDelete({
            parent: "Test string",
        }, {
            entityTypeNames: [
                "Test string"            ],
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Updates/Creates multiple entity types in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.batchUpdate({
            parent: "Test string",
        }, {
            entityTypeBatchInline: {
                entityTypes: [
                    {
                        autoExpansionMode: "Test string",
                        displayName: "Test string",
                        enableFuzzyExtraction: true,
                        entities: [
                            {
                                synonyms: [
                                    "Test string"                                ],
                                value: "Test string",
                            }                        ],
                        kind: "Test string",
                        name: "Test string",
                    }                ],
            },
            entityTypeBatchUri: "Test string",
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Creates an entity type in the specified agent. */
        await gapi.client.dialogflow.projects.agent.entityTypes.create({
            languageCode: "Test string",
            parent: "Test string",
        }, {
            autoExpansionMode: "Test string",
            displayName: "Test string",
            enableFuzzyExtraction: true,
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            kind: "Test string",
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Deletes the specified entity type. */
        await gapi.client.dialogflow.projects.agent.entityTypes.delete({
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Retrieves the specified entity type. */
        await gapi.client.dialogflow.projects.agent.entityTypes.get({
            languageCode: "Test string",
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Returns the list of all entity types in the specified agent. */
        await gapi.client.dialogflow.projects.agent.entityTypes.list({
            languageCode: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Updates the specified entity type. */
        await gapi.client.dialogflow.projects.agent.entityTypes.patch({
            languageCode: "Test string",
            name: "Test string",
            updateMask: "Test string",
        }, {
            autoExpansionMode: "Test string",
            displayName: "Test string",
            enableFuzzyExtraction: true,
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            kind: "Test string",
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Returns the list of all non-draft environments of the specified agent. */
        await gapi.client.dialogflow.projects.agent.environments.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Deletes intents in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.intents.batchDelete({
            parent: "Test string",
        }, {
            intents: [
                {
                    action: "Test string",
                    defaultResponsePlatforms: [
                        "Test string"                    ],
                    displayName: "Test string",
                    events: [
                        "Test string"                    ],
                    followupIntentInfo: [
                        {
                            followupIntentName: "Test string",
                            parentFollowupIntentName: "Test string",
                        }                    ],
                    inputContextNames: [
                        "Test string"                    ],
                    isFallback: true,
                    messages: [
                        {
                            basicCard: {
                                buttons: [
                                    {
                                        openUriAction: {
                                            uri: "Test string",
                                        },
                                        title: "Test string",
                                    }                                ],
                                formattedText: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            browseCarouselCard: {
                                imageDisplayOptions: "Test string",
                                items: [
                                    {
                                        description: "Test string",
                                        footer: "Test string",
                                        image: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        openUriAction: {
                                            url: "Test string",
                                            urlTypeHint: "Test string",
                                        },
                                        title: "Test string",
                                    }                                ],
                            },
                            card: {
                                buttons: [
                                    {
                                        postback: "Test string",
                                        text: "Test string",
                                    }                                ],
                                imageUri: "Test string",
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            carouselSelect: {
                                items: [
                                    {
                                        description: "Test string",
                                        image: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        info: {
                                            key: "Test string",
                                            synonyms: [
                                                "Test string"                                            ],
                                        },
                                        title: "Test string",
                                    }                                ],
                            },
                            image: {
                                accessibilityText: "Test string",
                                imageUri: "Test string",
                            },
                            linkOutSuggestion: {
                                destinationName: "Test string",
                                uri: "Test string",
                            },
                            listSelect: {
                                items: [
                                    {
                                        description: "Test string",
                                        image: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        info: {
                                            key: "Test string",
                                            synonyms: [
                                                "Test string"                                            ],
                                        },
                                        title: "Test string",
                                    }                                ],
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            mediaContent: {
                                mediaObjects: [
                                    {
                                        contentUrl: "Test string",
                                        description: "Test string",
                                        icon: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        largeImage: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        name: "Test string",
                                    }                                ],
                                mediaType: "Test string",
                            },
                            payload: {
                                A: 42                            },
                            platform: "Test string",
                            quickReplies: {
                                quickReplies: [
                                    "Test string"                                ],
                                title: "Test string",
                            },
                            simpleResponses: {
                                simpleResponses: [
                                    {
                                        displayText: "Test string",
                                        ssml: "Test string",
                                        textToSpeech: "Test string",
                                    }                                ],
                            },
                            suggestions: {
                                suggestions: [
                                    {
                                        title: "Test string",
                                    }                                ],
                            },
                            tableCard: {
                                buttons: [
                                    {
                                        openUriAction: {
                                            uri: "Test string",
                                        },
                                        title: "Test string",
                                    }                                ],
                                columnProperties: [
                                    {
                                        header: "Test string",
                                        horizontalAlignment: "Test string",
                                    }                                ],
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                rows: [
                                    {
                                        cells: [
                                            {
                                                text: "Test string",
                                            }                                        ],
                                        dividerAfter: true,
                                    }                                ],
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            text: {
                                text: [
                                    "Test string"                                ],
                            },
                        }                    ],
                    mlDisabled: true,
                    name: "Test string",
                    outputContexts: [
                        {
                            lifespanCount: 42,
                            name: "Test string",
                            parameters: {
                                A: 42                            },
                        }                    ],
                    parameters: [
                        {
                            defaultValue: "Test string",
                            displayName: "Test string",
                            entityTypeDisplayName: "Test string",
                            isList: true,
                            mandatory: true,
                            name: "Test string",
                            prompts: [
                                "Test string"                            ],
                            value: "Test string",
                        }                    ],
                    parentFollowupIntentName: "Test string",
                    priority: 42,
                    resetContexts: true,
                    rootFollowupIntentName: "Test string",
                    trainingPhrases: [
                        {
                            name: "Test string",
                            parts: [
                                {
                                    alias: "Test string",
                                    entityType: "Test string",
                                    text: "Test string",
                                    userDefined: true,
                                }                            ],
                            timesAddedCount: 42,
                            type: "Test string",
                        }                    ],
                    webhookState: "Test string",
                }            ],
        });
        /** Updates/Creates multiple intents in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.intents.batchUpdate({
            parent: "Test string",
        }, {
            intentBatchInline: {
                intents: [
                    {
                        action: "Test string",
                        defaultResponsePlatforms: [
                            "Test string"                        ],
                        displayName: "Test string",
                        events: [
                            "Test string"                        ],
                        followupIntentInfo: [
                            {
                                followupIntentName: "Test string",
                                parentFollowupIntentName: "Test string",
                            }                        ],
                        inputContextNames: [
                            "Test string"                        ],
                        isFallback: true,
                        messages: [
                            {
                                basicCard: {
                                    buttons: [
                                        {
                                            openUriAction: {
                                                uri: "Test string",
                                            },
                                            title: "Test string",
                                        }                                    ],
                                    formattedText: "Test string",
                                    image: {
                                        accessibilityText: "Test string",
                                        imageUri: "Test string",
                                    },
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                browseCarouselCard: {
                                    imageDisplayOptions: "Test string",
                                    items: [
                                        {
                                            description: "Test string",
                                            footer: "Test string",
                                            image: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            openUriAction: {
                                                url: "Test string",
                                                urlTypeHint: "Test string",
                                            },
                                            title: "Test string",
                                        }                                    ],
                                },
                                card: {
                                    buttons: [
                                        {
                                            postback: "Test string",
                                            text: "Test string",
                                        }                                    ],
                                    imageUri: "Test string",
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                carouselSelect: {
                                    items: [
                                        {
                                            description: "Test string",
                                            image: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            info: {
                                                key: "Test string",
                                                synonyms: [
                                                    "Test string"                                                ],
                                            },
                                            title: "Test string",
                                        }                                    ],
                                },
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                linkOutSuggestion: {
                                    destinationName: "Test string",
                                    uri: "Test string",
                                },
                                listSelect: {
                                    items: [
                                        {
                                            description: "Test string",
                                            image: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            info: {
                                                key: "Test string",
                                                synonyms: [
                                                    "Test string"                                                ],
                                            },
                                            title: "Test string",
                                        }                                    ],
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                mediaContent: {
                                    mediaObjects: [
                                        {
                                            contentUrl: "Test string",
                                            description: "Test string",
                                            icon: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            largeImage: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            name: "Test string",
                                        }                                    ],
                                    mediaType: "Test string",
                                },
                                payload: {
                                    A: 42                                },
                                platform: "Test string",
                                quickReplies: {
                                    quickReplies: [
                                        "Test string"                                    ],
                                    title: "Test string",
                                },
                                simpleResponses: {
                                    simpleResponses: [
                                        {
                                            displayText: "Test string",
                                            ssml: "Test string",
                                            textToSpeech: "Test string",
                                        }                                    ],
                                },
                                suggestions: {
                                    suggestions: [
                                        {
                                            title: "Test string",
                                        }                                    ],
                                },
                                tableCard: {
                                    buttons: [
                                        {
                                            openUriAction: {
                                                uri: "Test string",
                                            },
                                            title: "Test string",
                                        }                                    ],
                                    columnProperties: [
                                        {
                                            header: "Test string",
                                            horizontalAlignment: "Test string",
                                        }                                    ],
                                    image: {
                                        accessibilityText: "Test string",
                                        imageUri: "Test string",
                                    },
                                    rows: [
                                        {
                                            cells: [
                                                {
                                                    text: "Test string",
                                                }                                            ],
                                            dividerAfter: true,
                                        }                                    ],
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                text: {
                                    text: [
                                        "Test string"                                    ],
                                },
                            }                        ],
                        mlDisabled: true,
                        name: "Test string",
                        outputContexts: [
                            {
                                lifespanCount: 42,
                                name: "Test string",
                                parameters: {
                                    A: 42                                },
                            }                        ],
                        parameters: [
                            {
                                defaultValue: "Test string",
                                displayName: "Test string",
                                entityTypeDisplayName: "Test string",
                                isList: true,
                                mandatory: true,
                                name: "Test string",
                                prompts: [
                                    "Test string"                                ],
                                value: "Test string",
                            }                        ],
                        parentFollowupIntentName: "Test string",
                        priority: 42,
                        resetContexts: true,
                        rootFollowupIntentName: "Test string",
                        trainingPhrases: [
                            {
                                name: "Test string",
                                parts: [
                                    {
                                        alias: "Test string",
                                        entityType: "Test string",
                                        text: "Test string",
                                        userDefined: true,
                                    }                                ],
                                timesAddedCount: 42,
                                type: "Test string",
                            }                        ],
                        webhookState: "Test string",
                    }                ],
            },
            intentBatchUri: "Test string",
            intentView: "Test string",
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Creates an intent in the specified agent. */
        await gapi.client.dialogflow.projects.agent.intents.create({
            intentView: "Test string",
            languageCode: "Test string",
            parent: "Test string",
        }, {
            action: "Test string",
            defaultResponsePlatforms: [
                "Test string"            ],
            displayName: "Test string",
            events: [
                "Test string"            ],
            followupIntentInfo: [
                {
                    followupIntentName: "Test string",
                    parentFollowupIntentName: "Test string",
                }            ],
            inputContextNames: [
                "Test string"            ],
            isFallback: true,
            messages: [
                {
                    basicCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        formattedText: "Test string",
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    browseCarouselCard: {
                        imageDisplayOptions: "Test string",
                        items: [
                            {
                                description: "Test string",
                                footer: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                openUriAction: {
                                    url: "Test string",
                                    urlTypeHint: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                    },
                    card: {
                        buttons: [
                            {
                                postback: "Test string",
                                text: "Test string",
                            }                        ],
                        imageUri: "Test string",
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    carouselSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                    },
                    image: {
                        accessibilityText: "Test string",
                        imageUri: "Test string",
                    },
                    linkOutSuggestion: {
                        destinationName: "Test string",
                        uri: "Test string",
                    },
                    listSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    mediaContent: {
                        mediaObjects: [
                            {
                                contentUrl: "Test string",
                                description: "Test string",
                                icon: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                largeImage: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                name: "Test string",
                            }                        ],
                        mediaType: "Test string",
                    },
                    payload: {
                        A: 42                    },
                    platform: "Test string",
                    quickReplies: {
                        quickReplies: [
                            "Test string"                        ],
                        title: "Test string",
                    },
                    simpleResponses: {
                        simpleResponses: [
                            {
                                displayText: "Test string",
                                ssml: "Test string",
                                textToSpeech: "Test string",
                            }                        ],
                    },
                    suggestions: {
                        suggestions: [
                            {
                                title: "Test string",
                            }                        ],
                    },
                    tableCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        columnProperties: [
                            {
                                header: "Test string",
                                horizontalAlignment: "Test string",
                            }                        ],
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        rows: [
                            {
                                cells: [
                                    {
                                        text: "Test string",
                                    }                                ],
                                dividerAfter: true,
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    text: {
                        text: [
                            "Test string"                        ],
                    },
                }            ],
            mlDisabled: true,
            name: "Test string",
            outputContexts: [
                {
                    lifespanCount: 42,
                    name: "Test string",
                    parameters: {
                        A: 42                    },
                }            ],
            parameters: [
                {
                    defaultValue: "Test string",
                    displayName: "Test string",
                    entityTypeDisplayName: "Test string",
                    isList: true,
                    mandatory: true,
                    name: "Test string",
                    prompts: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            parentFollowupIntentName: "Test string",
            priority: 42,
            resetContexts: true,
            rootFollowupIntentName: "Test string",
            trainingPhrases: [
                {
                    name: "Test string",
                    parts: [
                        {
                            alias: "Test string",
                            entityType: "Test string",
                            text: "Test string",
                            userDefined: true,
                        }                    ],
                    timesAddedCount: 42,
                    type: "Test string",
                }            ],
            webhookState: "Test string",
        });
        /** Deletes the specified intent and its direct or indirect followup intents. */
        await gapi.client.dialogflow.projects.agent.intents.delete({
            name: "Test string",
        });
        /** Retrieves the specified intent. */
        await gapi.client.dialogflow.projects.agent.intents.get({
            intentView: "Test string",
            languageCode: "Test string",
            name: "Test string",
        });
        /** Returns the list of all intents in the specified agent. */
        await gapi.client.dialogflow.projects.agent.intents.list({
            intentView: "Test string",
            languageCode: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified intent. */
        await gapi.client.dialogflow.projects.agent.intents.patch({
            intentView: "Test string",
            languageCode: "Test string",
            name: "Test string",
            updateMask: "Test string",
        }, {
            action: "Test string",
            defaultResponsePlatforms: [
                "Test string"            ],
            displayName: "Test string",
            events: [
                "Test string"            ],
            followupIntentInfo: [
                {
                    followupIntentName: "Test string",
                    parentFollowupIntentName: "Test string",
                }            ],
            inputContextNames: [
                "Test string"            ],
            isFallback: true,
            messages: [
                {
                    basicCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        formattedText: "Test string",
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    browseCarouselCard: {
                        imageDisplayOptions: "Test string",
                        items: [
                            {
                                description: "Test string",
                                footer: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                openUriAction: {
                                    url: "Test string",
                                    urlTypeHint: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                    },
                    card: {
                        buttons: [
                            {
                                postback: "Test string",
                                text: "Test string",
                            }                        ],
                        imageUri: "Test string",
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    carouselSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                    },
                    image: {
                        accessibilityText: "Test string",
                        imageUri: "Test string",
                    },
                    linkOutSuggestion: {
                        destinationName: "Test string",
                        uri: "Test string",
                    },
                    listSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    mediaContent: {
                        mediaObjects: [
                            {
                                contentUrl: "Test string",
                                description: "Test string",
                                icon: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                largeImage: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                name: "Test string",
                            }                        ],
                        mediaType: "Test string",
                    },
                    payload: {
                        A: 42                    },
                    platform: "Test string",
                    quickReplies: {
                        quickReplies: [
                            "Test string"                        ],
                        title: "Test string",
                    },
                    simpleResponses: {
                        simpleResponses: [
                            {
                                displayText: "Test string",
                                ssml: "Test string",
                                textToSpeech: "Test string",
                            }                        ],
                    },
                    suggestions: {
                        suggestions: [
                            {
                                title: "Test string",
                            }                        ],
                    },
                    tableCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        columnProperties: [
                            {
                                header: "Test string",
                                horizontalAlignment: "Test string",
                            }                        ],
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        rows: [
                            {
                                cells: [
                                    {
                                        text: "Test string",
                                    }                                ],
                                dividerAfter: true,
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    text: {
                        text: [
                            "Test string"                        ],
                    },
                }            ],
            mlDisabled: true,
            name: "Test string",
            outputContexts: [
                {
                    lifespanCount: 42,
                    name: "Test string",
                    parameters: {
                        A: 42                    },
                }            ],
            parameters: [
                {
                    defaultValue: "Test string",
                    displayName: "Test string",
                    entityTypeDisplayName: "Test string",
                    isList: true,
                    mandatory: true,
                    name: "Test string",
                    prompts: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            parentFollowupIntentName: "Test string",
            priority: 42,
            resetContexts: true,
            rootFollowupIntentName: "Test string",
            trainingPhrases: [
                {
                    name: "Test string",
                    parts: [
                        {
                            alias: "Test string",
                            entityType: "Test string",
                            text: "Test string",
                            userDefined: true,
                        }                    ],
                    timesAddedCount: 42,
                    type: "Test string",
                }            ],
            webhookState: "Test string",
        });
        /** Deletes all active contexts in the specified session. */
        await gapi.client.dialogflow.projects.agent.sessions.deleteContexts({
            parent: "Test string",
        });
        /** Creates a context. If the specified context already exists, overrides the context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.create({
            parent: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /** Deletes the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.delete({
            name: "Test string",
        });
        /** Retrieves the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.get({
            name: "Test string",
        });
        /** Returns the list of all contexts in the specified session. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /**
         * Creates a session entity type. If the specified session entity type already exists, overrides the session entity type. This method doesn't work with Google Assistant integration.
         * Contact Dialogflow support if you need to use session entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.create({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /**
         * Deletes the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.delete({
            name: "Test string",
        });
        /**
         * Retrieves the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.get({
            name: "Test string",
        });
        /**
         * Returns the list of all session entity types in the specified session. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session
         * entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Updates the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /**
         * Processes a natural language query and returns structured, actionable data as a result. This method is not idempotent, because it may cause contexts and session entity types to be
         * updated, which in turn might affect results of future queries. Note: Always use agent versions for production traffic. See [Versions and
         * environments](https://cloud.google.com/dialogflow/es/docs/agents-versions).
         */
        await gapi.client.dialogflow.projects.agent.sessions.detectIntent({
            session: "Test string",
        }, {
            inputAudio: "Test string",
            outputAudioConfig: {
                audioEncoding: "Test string",
                sampleRateHertz: 42,
                synthesizeSpeechConfig: {
                    effectsProfileId: [
                        "Test string"                    ],
                    pitch: 42,
                    speakingRate: 42,
                    voice: {
                        name: "Test string",
                        ssmlGender: "Test string",
                    },
                    volumeGainDb: 42,
                },
            },
            outputAudioConfigMask: "Test string",
            queryInput: {
                audioConfig: {
                    audioEncoding: "Test string",
                    enableWordInfo: true,
                    languageCode: "Test string",
                    model: "Test string",
                    modelVariant: "Test string",
                    phraseHints: [
                        "Test string"                    ],
                    sampleRateHertz: 42,
                    singleUtterance: true,
                    speechContexts: [
                        {
                            boost: 42,
                            phrases: [
                                "Test string"                            ],
                        }                    ],
                },
                event: {
                    languageCode: "Test string",
                    name: "Test string",
                    parameters: {
                        A: 42                    },
                },
                text: {
                    languageCode: "Test string",
                    text: "Test string",
                },
            },
            queryParams: {
                contexts: [
                    {
                        lifespanCount: 42,
                        name: "Test string",
                        parameters: {
                            A: 42                        },
                    }                ],
                geoLocation: {
                    latitude: 42,
                    longitude: 42,
                },
                payload: {
                    A: 42                },
                resetContexts: true,
                sentimentAnalysisRequestConfig: {
                    analyzeQueryTextSentiment: true,
                },
                sessionEntityTypes: [
                    {
                        entities: [
                            {
                                synonyms: [
                                    "Test string"                                ],
                                value: "Test string",
                            }                        ],
                        entityOverrideMode: "Test string",
                        name: "Test string",
                    }                ],
                timeZone: "Test string",
                webhookHeaders: {
                    A: "Test string"                },
            },
        });
        /** Creates a context. If the specified context already exists, overrides the context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.create({
            parent: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /** Deletes the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.delete({
            name: "Test string",
        });
        /** Retrieves the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.get({
            name: "Test string",
        });
        /** Returns the list of all contexts in the specified session. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /**
         * Creates a session entity type. If the specified session entity type already exists, overrides the session entity type. This method doesn't work with Google Assistant integration.
         * Contact Dialogflow support if you need to use session entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.create({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /**
         * Deletes the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.delete({
            name: "Test string",
        });
        /**
         * Retrieves the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.get({
            name: "Test string",
        });
        /**
         * Returns the list of all session entity types in the specified session. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session
         * entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Updates the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /** Gets agent validation result. Agent validation is performed during training time and is updated automatically when training is completed. */
        await gapi.client.dialogflow.projects.agent.getValidationResult({
            languageCode: "Test string",
            parent: "Test string",
        });
        /** Deletes entity types in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.batchDelete({
            parent: "Test string",
        }, {
            entityTypeNames: [
                "Test string"            ],
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Updates/Creates multiple entity types in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.batchUpdate({
            parent: "Test string",
        }, {
            entityTypeBatchInline: {
                entityTypes: [
                    {
                        autoExpansionMode: "Test string",
                        displayName: "Test string",
                        enableFuzzyExtraction: true,
                        entities: [
                            {
                                synonyms: [
                                    "Test string"                                ],
                                value: "Test string",
                            }                        ],
                        kind: "Test string",
                        name: "Test string",
                    }                ],
            },
            entityTypeBatchUri: "Test string",
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Creates an entity type in the specified agent. */
        await gapi.client.dialogflow.projects.agent.entityTypes.create({
            languageCode: "Test string",
            parent: "Test string",
        }, {
            autoExpansionMode: "Test string",
            displayName: "Test string",
            enableFuzzyExtraction: true,
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            kind: "Test string",
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Deletes the specified entity type. */
        await gapi.client.dialogflow.projects.agent.entityTypes.delete({
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Retrieves the specified entity type. */
        await gapi.client.dialogflow.projects.agent.entityTypes.get({
            languageCode: "Test string",
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Returns the list of all entity types in the specified agent. */
        await gapi.client.dialogflow.projects.agent.entityTypes.list({
            languageCode: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Updates the specified entity type. */
        await gapi.client.dialogflow.projects.agent.entityTypes.patch({
            languageCode: "Test string",
            name: "Test string",
            updateMask: "Test string",
        }, {
            autoExpansionMode: "Test string",
            displayName: "Test string",
            enableFuzzyExtraction: true,
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            kind: "Test string",
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Returns the list of all non-draft environments of the specified agent. */
        await gapi.client.dialogflow.projects.agent.environments.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Deletes intents in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.intents.batchDelete({
            parent: "Test string",
        }, {
            intents: [
                {
                    action: "Test string",
                    defaultResponsePlatforms: [
                        "Test string"                    ],
                    displayName: "Test string",
                    events: [
                        "Test string"                    ],
                    followupIntentInfo: [
                        {
                            followupIntentName: "Test string",
                            parentFollowupIntentName: "Test string",
                        }                    ],
                    inputContextNames: [
                        "Test string"                    ],
                    isFallback: true,
                    messages: [
                        {
                            basicCard: {
                                buttons: [
                                    {
                                        openUriAction: {
                                            uri: "Test string",
                                        },
                                        title: "Test string",
                                    }                                ],
                                formattedText: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            browseCarouselCard: {
                                imageDisplayOptions: "Test string",
                                items: [
                                    {
                                        description: "Test string",
                                        footer: "Test string",
                                        image: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        openUriAction: {
                                            url: "Test string",
                                            urlTypeHint: "Test string",
                                        },
                                        title: "Test string",
                                    }                                ],
                            },
                            card: {
                                buttons: [
                                    {
                                        postback: "Test string",
                                        text: "Test string",
                                    }                                ],
                                imageUri: "Test string",
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            carouselSelect: {
                                items: [
                                    {
                                        description: "Test string",
                                        image: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        info: {
                                            key: "Test string",
                                            synonyms: [
                                                "Test string"                                            ],
                                        },
                                        title: "Test string",
                                    }                                ],
                            },
                            image: {
                                accessibilityText: "Test string",
                                imageUri: "Test string",
                            },
                            linkOutSuggestion: {
                                destinationName: "Test string",
                                uri: "Test string",
                            },
                            listSelect: {
                                items: [
                                    {
                                        description: "Test string",
                                        image: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        info: {
                                            key: "Test string",
                                            synonyms: [
                                                "Test string"                                            ],
                                        },
                                        title: "Test string",
                                    }                                ],
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            mediaContent: {
                                mediaObjects: [
                                    {
                                        contentUrl: "Test string",
                                        description: "Test string",
                                        icon: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        largeImage: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        name: "Test string",
                                    }                                ],
                                mediaType: "Test string",
                            },
                            payload: {
                                A: 42                            },
                            platform: "Test string",
                            quickReplies: {
                                quickReplies: [
                                    "Test string"                                ],
                                title: "Test string",
                            },
                            simpleResponses: {
                                simpleResponses: [
                                    {
                                        displayText: "Test string",
                                        ssml: "Test string",
                                        textToSpeech: "Test string",
                                    }                                ],
                            },
                            suggestions: {
                                suggestions: [
                                    {
                                        title: "Test string",
                                    }                                ],
                            },
                            tableCard: {
                                buttons: [
                                    {
                                        openUriAction: {
                                            uri: "Test string",
                                        },
                                        title: "Test string",
                                    }                                ],
                                columnProperties: [
                                    {
                                        header: "Test string",
                                        horizontalAlignment: "Test string",
                                    }                                ],
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                rows: [
                                    {
                                        cells: [
                                            {
                                                text: "Test string",
                                            }                                        ],
                                        dividerAfter: true,
                                    }                                ],
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            text: {
                                text: [
                                    "Test string"                                ],
                            },
                        }                    ],
                    mlDisabled: true,
                    name: "Test string",
                    outputContexts: [
                        {
                            lifespanCount: 42,
                            name: "Test string",
                            parameters: {
                                A: 42                            },
                        }                    ],
                    parameters: [
                        {
                            defaultValue: "Test string",
                            displayName: "Test string",
                            entityTypeDisplayName: "Test string",
                            isList: true,
                            mandatory: true,
                            name: "Test string",
                            prompts: [
                                "Test string"                            ],
                            value: "Test string",
                        }                    ],
                    parentFollowupIntentName: "Test string",
                    priority: 42,
                    resetContexts: true,
                    rootFollowupIntentName: "Test string",
                    trainingPhrases: [
                        {
                            name: "Test string",
                            parts: [
                                {
                                    alias: "Test string",
                                    entityType: "Test string",
                                    text: "Test string",
                                    userDefined: true,
                                }                            ],
                            timesAddedCount: 42,
                            type: "Test string",
                        }                    ],
                    webhookState: "Test string",
                }            ],
        });
        /** Updates/Creates multiple intents in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.intents.batchUpdate({
            parent: "Test string",
        }, {
            intentBatchInline: {
                intents: [
                    {
                        action: "Test string",
                        defaultResponsePlatforms: [
                            "Test string"                        ],
                        displayName: "Test string",
                        events: [
                            "Test string"                        ],
                        followupIntentInfo: [
                            {
                                followupIntentName: "Test string",
                                parentFollowupIntentName: "Test string",
                            }                        ],
                        inputContextNames: [
                            "Test string"                        ],
                        isFallback: true,
                        messages: [
                            {
                                basicCard: {
                                    buttons: [
                                        {
                                            openUriAction: {
                                                uri: "Test string",
                                            },
                                            title: "Test string",
                                        }                                    ],
                                    formattedText: "Test string",
                                    image: {
                                        accessibilityText: "Test string",
                                        imageUri: "Test string",
                                    },
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                browseCarouselCard: {
                                    imageDisplayOptions: "Test string",
                                    items: [
                                        {
                                            description: "Test string",
                                            footer: "Test string",
                                            image: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            openUriAction: {
                                                url: "Test string",
                                                urlTypeHint: "Test string",
                                            },
                                            title: "Test string",
                                        }                                    ],
                                },
                                card: {
                                    buttons: [
                                        {
                                            postback: "Test string",
                                            text: "Test string",
                                        }                                    ],
                                    imageUri: "Test string",
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                carouselSelect: {
                                    items: [
                                        {
                                            description: "Test string",
                                            image: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            info: {
                                                key: "Test string",
                                                synonyms: [
                                                    "Test string"                                                ],
                                            },
                                            title: "Test string",
                                        }                                    ],
                                },
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                linkOutSuggestion: {
                                    destinationName: "Test string",
                                    uri: "Test string",
                                },
                                listSelect: {
                                    items: [
                                        {
                                            description: "Test string",
                                            image: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            info: {
                                                key: "Test string",
                                                synonyms: [
                                                    "Test string"                                                ],
                                            },
                                            title: "Test string",
                                        }                                    ],
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                mediaContent: {
                                    mediaObjects: [
                                        {
                                            contentUrl: "Test string",
                                            description: "Test string",
                                            icon: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            largeImage: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            name: "Test string",
                                        }                                    ],
                                    mediaType: "Test string",
                                },
                                payload: {
                                    A: 42                                },
                                platform: "Test string",
                                quickReplies: {
                                    quickReplies: [
                                        "Test string"                                    ],
                                    title: "Test string",
                                },
                                simpleResponses: {
                                    simpleResponses: [
                                        {
                                            displayText: "Test string",
                                            ssml: "Test string",
                                            textToSpeech: "Test string",
                                        }                                    ],
                                },
                                suggestions: {
                                    suggestions: [
                                        {
                                            title: "Test string",
                                        }                                    ],
                                },
                                tableCard: {
                                    buttons: [
                                        {
                                            openUriAction: {
                                                uri: "Test string",
                                            },
                                            title: "Test string",
                                        }                                    ],
                                    columnProperties: [
                                        {
                                            header: "Test string",
                                            horizontalAlignment: "Test string",
                                        }                                    ],
                                    image: {
                                        accessibilityText: "Test string",
                                        imageUri: "Test string",
                                    },
                                    rows: [
                                        {
                                            cells: [
                                                {
                                                    text: "Test string",
                                                }                                            ],
                                            dividerAfter: true,
                                        }                                    ],
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                text: {
                                    text: [
                                        "Test string"                                    ],
                                },
                            }                        ],
                        mlDisabled: true,
                        name: "Test string",
                        outputContexts: [
                            {
                                lifespanCount: 42,
                                name: "Test string",
                                parameters: {
                                    A: 42                                },
                            }                        ],
                        parameters: [
                            {
                                defaultValue: "Test string",
                                displayName: "Test string",
                                entityTypeDisplayName: "Test string",
                                isList: true,
                                mandatory: true,
                                name: "Test string",
                                prompts: [
                                    "Test string"                                ],
                                value: "Test string",
                            }                        ],
                        parentFollowupIntentName: "Test string",
                        priority: 42,
                        resetContexts: true,
                        rootFollowupIntentName: "Test string",
                        trainingPhrases: [
                            {
                                name: "Test string",
                                parts: [
                                    {
                                        alias: "Test string",
                                        entityType: "Test string",
                                        text: "Test string",
                                        userDefined: true,
                                    }                                ],
                                timesAddedCount: 42,
                                type: "Test string",
                            }                        ],
                        webhookState: "Test string",
                    }                ],
            },
            intentBatchUri: "Test string",
            intentView: "Test string",
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Creates an intent in the specified agent. */
        await gapi.client.dialogflow.projects.agent.intents.create({
            intentView: "Test string",
            languageCode: "Test string",
            parent: "Test string",
        }, {
            action: "Test string",
            defaultResponsePlatforms: [
                "Test string"            ],
            displayName: "Test string",
            events: [
                "Test string"            ],
            followupIntentInfo: [
                {
                    followupIntentName: "Test string",
                    parentFollowupIntentName: "Test string",
                }            ],
            inputContextNames: [
                "Test string"            ],
            isFallback: true,
            messages: [
                {
                    basicCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        formattedText: "Test string",
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    browseCarouselCard: {
                        imageDisplayOptions: "Test string",
                        items: [
                            {
                                description: "Test string",
                                footer: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                openUriAction: {
                                    url: "Test string",
                                    urlTypeHint: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                    },
                    card: {
                        buttons: [
                            {
                                postback: "Test string",
                                text: "Test string",
                            }                        ],
                        imageUri: "Test string",
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    carouselSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                    },
                    image: {
                        accessibilityText: "Test string",
                        imageUri: "Test string",
                    },
                    linkOutSuggestion: {
                        destinationName: "Test string",
                        uri: "Test string",
                    },
                    listSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    mediaContent: {
                        mediaObjects: [
                            {
                                contentUrl: "Test string",
                                description: "Test string",
                                icon: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                largeImage: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                name: "Test string",
                            }                        ],
                        mediaType: "Test string",
                    },
                    payload: {
                        A: 42                    },
                    platform: "Test string",
                    quickReplies: {
                        quickReplies: [
                            "Test string"                        ],
                        title: "Test string",
                    },
                    simpleResponses: {
                        simpleResponses: [
                            {
                                displayText: "Test string",
                                ssml: "Test string",
                                textToSpeech: "Test string",
                            }                        ],
                    },
                    suggestions: {
                        suggestions: [
                            {
                                title: "Test string",
                            }                        ],
                    },
                    tableCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        columnProperties: [
                            {
                                header: "Test string",
                                horizontalAlignment: "Test string",
                            }                        ],
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        rows: [
                            {
                                cells: [
                                    {
                                        text: "Test string",
                                    }                                ],
                                dividerAfter: true,
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    text: {
                        text: [
                            "Test string"                        ],
                    },
                }            ],
            mlDisabled: true,
            name: "Test string",
            outputContexts: [
                {
                    lifespanCount: 42,
                    name: "Test string",
                    parameters: {
                        A: 42                    },
                }            ],
            parameters: [
                {
                    defaultValue: "Test string",
                    displayName: "Test string",
                    entityTypeDisplayName: "Test string",
                    isList: true,
                    mandatory: true,
                    name: "Test string",
                    prompts: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            parentFollowupIntentName: "Test string",
            priority: 42,
            resetContexts: true,
            rootFollowupIntentName: "Test string",
            trainingPhrases: [
                {
                    name: "Test string",
                    parts: [
                        {
                            alias: "Test string",
                            entityType: "Test string",
                            text: "Test string",
                            userDefined: true,
                        }                    ],
                    timesAddedCount: 42,
                    type: "Test string",
                }            ],
            webhookState: "Test string",
        });
        /** Deletes the specified intent and its direct or indirect followup intents. */
        await gapi.client.dialogflow.projects.agent.intents.delete({
            name: "Test string",
        });
        /** Retrieves the specified intent. */
        await gapi.client.dialogflow.projects.agent.intents.get({
            intentView: "Test string",
            languageCode: "Test string",
            name: "Test string",
        });
        /** Returns the list of all intents in the specified agent. */
        await gapi.client.dialogflow.projects.agent.intents.list({
            intentView: "Test string",
            languageCode: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified intent. */
        await gapi.client.dialogflow.projects.agent.intents.patch({
            intentView: "Test string",
            languageCode: "Test string",
            name: "Test string",
            updateMask: "Test string",
        }, {
            action: "Test string",
            defaultResponsePlatforms: [
                "Test string"            ],
            displayName: "Test string",
            events: [
                "Test string"            ],
            followupIntentInfo: [
                {
                    followupIntentName: "Test string",
                    parentFollowupIntentName: "Test string",
                }            ],
            inputContextNames: [
                "Test string"            ],
            isFallback: true,
            messages: [
                {
                    basicCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        formattedText: "Test string",
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    browseCarouselCard: {
                        imageDisplayOptions: "Test string",
                        items: [
                            {
                                description: "Test string",
                                footer: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                openUriAction: {
                                    url: "Test string",
                                    urlTypeHint: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                    },
                    card: {
                        buttons: [
                            {
                                postback: "Test string",
                                text: "Test string",
                            }                        ],
                        imageUri: "Test string",
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    carouselSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                    },
                    image: {
                        accessibilityText: "Test string",
                        imageUri: "Test string",
                    },
                    linkOutSuggestion: {
                        destinationName: "Test string",
                        uri: "Test string",
                    },
                    listSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    mediaContent: {
                        mediaObjects: [
                            {
                                contentUrl: "Test string",
                                description: "Test string",
                                icon: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                largeImage: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                name: "Test string",
                            }                        ],
                        mediaType: "Test string",
                    },
                    payload: {
                        A: 42                    },
                    platform: "Test string",
                    quickReplies: {
                        quickReplies: [
                            "Test string"                        ],
                        title: "Test string",
                    },
                    simpleResponses: {
                        simpleResponses: [
                            {
                                displayText: "Test string",
                                ssml: "Test string",
                                textToSpeech: "Test string",
                            }                        ],
                    },
                    suggestions: {
                        suggestions: [
                            {
                                title: "Test string",
                            }                        ],
                    },
                    tableCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        columnProperties: [
                            {
                                header: "Test string",
                                horizontalAlignment: "Test string",
                            }                        ],
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        rows: [
                            {
                                cells: [
                                    {
                                        text: "Test string",
                                    }                                ],
                                dividerAfter: true,
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    text: {
                        text: [
                            "Test string"                        ],
                    },
                }            ],
            mlDisabled: true,
            name: "Test string",
            outputContexts: [
                {
                    lifespanCount: 42,
                    name: "Test string",
                    parameters: {
                        A: 42                    },
                }            ],
            parameters: [
                {
                    defaultValue: "Test string",
                    displayName: "Test string",
                    entityTypeDisplayName: "Test string",
                    isList: true,
                    mandatory: true,
                    name: "Test string",
                    prompts: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            parentFollowupIntentName: "Test string",
            priority: 42,
            resetContexts: true,
            rootFollowupIntentName: "Test string",
            trainingPhrases: [
                {
                    name: "Test string",
                    parts: [
                        {
                            alias: "Test string",
                            entityType: "Test string",
                            text: "Test string",
                            userDefined: true,
                        }                    ],
                    timesAddedCount: 42,
                    type: "Test string",
                }            ],
            webhookState: "Test string",
        });
        /** Deletes all active contexts in the specified session. */
        await gapi.client.dialogflow.projects.agent.sessions.deleteContexts({
            parent: "Test string",
        });
        /** Creates a context. If the specified context already exists, overrides the context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.create({
            parent: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /** Deletes the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.delete({
            name: "Test string",
        });
        /** Retrieves the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.get({
            name: "Test string",
        });
        /** Returns the list of all contexts in the specified session. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /**
         * Creates a session entity type. If the specified session entity type already exists, overrides the session entity type. This method doesn't work with Google Assistant integration.
         * Contact Dialogflow support if you need to use session entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.create({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /**
         * Deletes the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.delete({
            name: "Test string",
        });
        /**
         * Retrieves the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.get({
            name: "Test string",
        });
        /**
         * Returns the list of all session entity types in the specified session. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session
         * entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Updates the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /**
         * Processes a natural language query and returns structured, actionable data as a result. This method is not idempotent, because it may cause contexts and session entity types to be
         * updated, which in turn might affect results of future queries. Note: Always use agent versions for production traffic. See [Versions and
         * environments](https://cloud.google.com/dialogflow/es/docs/agents-versions).
         */
        await gapi.client.dialogflow.projects.agent.sessions.detectIntent({
            session: "Test string",
        }, {
            inputAudio: "Test string",
            outputAudioConfig: {
                audioEncoding: "Test string",
                sampleRateHertz: 42,
                synthesizeSpeechConfig: {
                    effectsProfileId: [
                        "Test string"                    ],
                    pitch: 42,
                    speakingRate: 42,
                    voice: {
                        name: "Test string",
                        ssmlGender: "Test string",
                    },
                    volumeGainDb: 42,
                },
            },
            outputAudioConfigMask: "Test string",
            queryInput: {
                audioConfig: {
                    audioEncoding: "Test string",
                    enableWordInfo: true,
                    languageCode: "Test string",
                    model: "Test string",
                    modelVariant: "Test string",
                    phraseHints: [
                        "Test string"                    ],
                    sampleRateHertz: 42,
                    singleUtterance: true,
                    speechContexts: [
                        {
                            boost: 42,
                            phrases: [
                                "Test string"                            ],
                        }                    ],
                },
                event: {
                    languageCode: "Test string",
                    name: "Test string",
                    parameters: {
                        A: 42                    },
                },
                text: {
                    languageCode: "Test string",
                    text: "Test string",
                },
            },
            queryParams: {
                contexts: [
                    {
                        lifespanCount: 42,
                        name: "Test string",
                        parameters: {
                            A: 42                        },
                    }                ],
                geoLocation: {
                    latitude: 42,
                    longitude: 42,
                },
                payload: {
                    A: 42                },
                resetContexts: true,
                sentimentAnalysisRequestConfig: {
                    analyzeQueryTextSentiment: true,
                },
                sessionEntityTypes: [
                    {
                        entities: [
                            {
                                synonyms: [
                                    "Test string"                                ],
                                value: "Test string",
                            }                        ],
                        entityOverrideMode: "Test string",
                        name: "Test string",
                    }                ],
                timeZone: "Test string",
                webhookHeaders: {
                    A: "Test string"                },
            },
        });
        /** Creates a context. If the specified context already exists, overrides the context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.create({
            parent: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /** Deletes the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.delete({
            name: "Test string",
        });
        /** Retrieves the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.get({
            name: "Test string",
        });
        /** Returns the list of all contexts in the specified session. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /**
         * Creates a session entity type. If the specified session entity type already exists, overrides the session entity type. This method doesn't work with Google Assistant integration.
         * Contact Dialogflow support if you need to use session entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.create({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /**
         * Deletes the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.delete({
            name: "Test string",
        });
        /**
         * Retrieves the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.get({
            name: "Test string",
        });
        /**
         * Returns the list of all session entity types in the specified session. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session
         * entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Updates the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /**
         * Imports the specified agent from a ZIP file. Uploads new intents and entity types without deleting the existing ones. Intents and entity types with the same name are replaced with the
         * new versions from ImportAgentRequest. After the import, the imported draft agent will be trained automatically (unless disabled in agent settings). However, once the import is done,
         * training may not be completed yet. Please call TrainAgent and wait for the operation it returns in order to train explicitly. Operation An operation which tracks when importing is
         * complete. It only tracks when the draft agent is updated not when it is done training.
         */
        await gapi.client.dialogflow.projects.agent.import({
            parent: "Test string",
        }, {
            agentContent: "Test string",
            agentUri: "Test string",
        });
        /** Deletes entity types in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.batchDelete({
            parent: "Test string",
        }, {
            entityTypeNames: [
                "Test string"            ],
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Updates/Creates multiple entity types in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.batchUpdate({
            parent: "Test string",
        }, {
            entityTypeBatchInline: {
                entityTypes: [
                    {
                        autoExpansionMode: "Test string",
                        displayName: "Test string",
                        enableFuzzyExtraction: true,
                        entities: [
                            {
                                synonyms: [
                                    "Test string"                                ],
                                value: "Test string",
                            }                        ],
                        kind: "Test string",
                        name: "Test string",
                    }                ],
            },
            entityTypeBatchUri: "Test string",
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Creates an entity type in the specified agent. */
        await gapi.client.dialogflow.projects.agent.entityTypes.create({
            languageCode: "Test string",
            parent: "Test string",
        }, {
            autoExpansionMode: "Test string",
            displayName: "Test string",
            enableFuzzyExtraction: true,
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            kind: "Test string",
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Deletes the specified entity type. */
        await gapi.client.dialogflow.projects.agent.entityTypes.delete({
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Retrieves the specified entity type. */
        await gapi.client.dialogflow.projects.agent.entityTypes.get({
            languageCode: "Test string",
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Returns the list of all entity types in the specified agent. */
        await gapi.client.dialogflow.projects.agent.entityTypes.list({
            languageCode: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Updates the specified entity type. */
        await gapi.client.dialogflow.projects.agent.entityTypes.patch({
            languageCode: "Test string",
            name: "Test string",
            updateMask: "Test string",
        }, {
            autoExpansionMode: "Test string",
            displayName: "Test string",
            enableFuzzyExtraction: true,
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            kind: "Test string",
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Returns the list of all non-draft environments of the specified agent. */
        await gapi.client.dialogflow.projects.agent.environments.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Deletes intents in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.intents.batchDelete({
            parent: "Test string",
        }, {
            intents: [
                {
                    action: "Test string",
                    defaultResponsePlatforms: [
                        "Test string"                    ],
                    displayName: "Test string",
                    events: [
                        "Test string"                    ],
                    followupIntentInfo: [
                        {
                            followupIntentName: "Test string",
                            parentFollowupIntentName: "Test string",
                        }                    ],
                    inputContextNames: [
                        "Test string"                    ],
                    isFallback: true,
                    messages: [
                        {
                            basicCard: {
                                buttons: [
                                    {
                                        openUriAction: {
                                            uri: "Test string",
                                        },
                                        title: "Test string",
                                    }                                ],
                                formattedText: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            browseCarouselCard: {
                                imageDisplayOptions: "Test string",
                                items: [
                                    {
                                        description: "Test string",
                                        footer: "Test string",
                                        image: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        openUriAction: {
                                            url: "Test string",
                                            urlTypeHint: "Test string",
                                        },
                                        title: "Test string",
                                    }                                ],
                            },
                            card: {
                                buttons: [
                                    {
                                        postback: "Test string",
                                        text: "Test string",
                                    }                                ],
                                imageUri: "Test string",
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            carouselSelect: {
                                items: [
                                    {
                                        description: "Test string",
                                        image: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        info: {
                                            key: "Test string",
                                            synonyms: [
                                                "Test string"                                            ],
                                        },
                                        title: "Test string",
                                    }                                ],
                            },
                            image: {
                                accessibilityText: "Test string",
                                imageUri: "Test string",
                            },
                            linkOutSuggestion: {
                                destinationName: "Test string",
                                uri: "Test string",
                            },
                            listSelect: {
                                items: [
                                    {
                                        description: "Test string",
                                        image: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        info: {
                                            key: "Test string",
                                            synonyms: [
                                                "Test string"                                            ],
                                        },
                                        title: "Test string",
                                    }                                ],
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            mediaContent: {
                                mediaObjects: [
                                    {
                                        contentUrl: "Test string",
                                        description: "Test string",
                                        icon: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        largeImage: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        name: "Test string",
                                    }                                ],
                                mediaType: "Test string",
                            },
                            payload: {
                                A: 42                            },
                            platform: "Test string",
                            quickReplies: {
                                quickReplies: [
                                    "Test string"                                ],
                                title: "Test string",
                            },
                            simpleResponses: {
                                simpleResponses: [
                                    {
                                        displayText: "Test string",
                                        ssml: "Test string",
                                        textToSpeech: "Test string",
                                    }                                ],
                            },
                            suggestions: {
                                suggestions: [
                                    {
                                        title: "Test string",
                                    }                                ],
                            },
                            tableCard: {
                                buttons: [
                                    {
                                        openUriAction: {
                                            uri: "Test string",
                                        },
                                        title: "Test string",
                                    }                                ],
                                columnProperties: [
                                    {
                                        header: "Test string",
                                        horizontalAlignment: "Test string",
                                    }                                ],
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                rows: [
                                    {
                                        cells: [
                                            {
                                                text: "Test string",
                                            }                                        ],
                                        dividerAfter: true,
                                    }                                ],
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            text: {
                                text: [
                                    "Test string"                                ],
                            },
                        }                    ],
                    mlDisabled: true,
                    name: "Test string",
                    outputContexts: [
                        {
                            lifespanCount: 42,
                            name: "Test string",
                            parameters: {
                                A: 42                            },
                        }                    ],
                    parameters: [
                        {
                            defaultValue: "Test string",
                            displayName: "Test string",
                            entityTypeDisplayName: "Test string",
                            isList: true,
                            mandatory: true,
                            name: "Test string",
                            prompts: [
                                "Test string"                            ],
                            value: "Test string",
                        }                    ],
                    parentFollowupIntentName: "Test string",
                    priority: 42,
                    resetContexts: true,
                    rootFollowupIntentName: "Test string",
                    trainingPhrases: [
                        {
                            name: "Test string",
                            parts: [
                                {
                                    alias: "Test string",
                                    entityType: "Test string",
                                    text: "Test string",
                                    userDefined: true,
                                }                            ],
                            timesAddedCount: 42,
                            type: "Test string",
                        }                    ],
                    webhookState: "Test string",
                }            ],
        });
        /** Updates/Creates multiple intents in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.intents.batchUpdate({
            parent: "Test string",
        }, {
            intentBatchInline: {
                intents: [
                    {
                        action: "Test string",
                        defaultResponsePlatforms: [
                            "Test string"                        ],
                        displayName: "Test string",
                        events: [
                            "Test string"                        ],
                        followupIntentInfo: [
                            {
                                followupIntentName: "Test string",
                                parentFollowupIntentName: "Test string",
                            }                        ],
                        inputContextNames: [
                            "Test string"                        ],
                        isFallback: true,
                        messages: [
                            {
                                basicCard: {
                                    buttons: [
                                        {
                                            openUriAction: {
                                                uri: "Test string",
                                            },
                                            title: "Test string",
                                        }                                    ],
                                    formattedText: "Test string",
                                    image: {
                                        accessibilityText: "Test string",
                                        imageUri: "Test string",
                                    },
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                browseCarouselCard: {
                                    imageDisplayOptions: "Test string",
                                    items: [
                                        {
                                            description: "Test string",
                                            footer: "Test string",
                                            image: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            openUriAction: {
                                                url: "Test string",
                                                urlTypeHint: "Test string",
                                            },
                                            title: "Test string",
                                        }                                    ],
                                },
                                card: {
                                    buttons: [
                                        {
                                            postback: "Test string",
                                            text: "Test string",
                                        }                                    ],
                                    imageUri: "Test string",
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                carouselSelect: {
                                    items: [
                                        {
                                            description: "Test string",
                                            image: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            info: {
                                                key: "Test string",
                                                synonyms: [
                                                    "Test string"                                                ],
                                            },
                                            title: "Test string",
                                        }                                    ],
                                },
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                linkOutSuggestion: {
                                    destinationName: "Test string",
                                    uri: "Test string",
                                },
                                listSelect: {
                                    items: [
                                        {
                                            description: "Test string",
                                            image: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            info: {
                                                key: "Test string",
                                                synonyms: [
                                                    "Test string"                                                ],
                                            },
                                            title: "Test string",
                                        }                                    ],
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                mediaContent: {
                                    mediaObjects: [
                                        {
                                            contentUrl: "Test string",
                                            description: "Test string",
                                            icon: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            largeImage: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            name: "Test string",
                                        }                                    ],
                                    mediaType: "Test string",
                                },
                                payload: {
                                    A: 42                                },
                                platform: "Test string",
                                quickReplies: {
                                    quickReplies: [
                                        "Test string"                                    ],
                                    title: "Test string",
                                },
                                simpleResponses: {
                                    simpleResponses: [
                                        {
                                            displayText: "Test string",
                                            ssml: "Test string",
                                            textToSpeech: "Test string",
                                        }                                    ],
                                },
                                suggestions: {
                                    suggestions: [
                                        {
                                            title: "Test string",
                                        }                                    ],
                                },
                                tableCard: {
                                    buttons: [
                                        {
                                            openUriAction: {
                                                uri: "Test string",
                                            },
                                            title: "Test string",
                                        }                                    ],
                                    columnProperties: [
                                        {
                                            header: "Test string",
                                            horizontalAlignment: "Test string",
                                        }                                    ],
                                    image: {
                                        accessibilityText: "Test string",
                                        imageUri: "Test string",
                                    },
                                    rows: [
                                        {
                                            cells: [
                                                {
                                                    text: "Test string",
                                                }                                            ],
                                            dividerAfter: true,
                                        }                                    ],
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                text: {
                                    text: [
                                        "Test string"                                    ],
                                },
                            }                        ],
                        mlDisabled: true,
                        name: "Test string",
                        outputContexts: [
                            {
                                lifespanCount: 42,
                                name: "Test string",
                                parameters: {
                                    A: 42                                },
                            }                        ],
                        parameters: [
                            {
                                defaultValue: "Test string",
                                displayName: "Test string",
                                entityTypeDisplayName: "Test string",
                                isList: true,
                                mandatory: true,
                                name: "Test string",
                                prompts: [
                                    "Test string"                                ],
                                value: "Test string",
                            }                        ],
                        parentFollowupIntentName: "Test string",
                        priority: 42,
                        resetContexts: true,
                        rootFollowupIntentName: "Test string",
                        trainingPhrases: [
                            {
                                name: "Test string",
                                parts: [
                                    {
                                        alias: "Test string",
                                        entityType: "Test string",
                                        text: "Test string",
                                        userDefined: true,
                                    }                                ],
                                timesAddedCount: 42,
                                type: "Test string",
                            }                        ],
                        webhookState: "Test string",
                    }                ],
            },
            intentBatchUri: "Test string",
            intentView: "Test string",
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Creates an intent in the specified agent. */
        await gapi.client.dialogflow.projects.agent.intents.create({
            intentView: "Test string",
            languageCode: "Test string",
            parent: "Test string",
        }, {
            action: "Test string",
            defaultResponsePlatforms: [
                "Test string"            ],
            displayName: "Test string",
            events: [
                "Test string"            ],
            followupIntentInfo: [
                {
                    followupIntentName: "Test string",
                    parentFollowupIntentName: "Test string",
                }            ],
            inputContextNames: [
                "Test string"            ],
            isFallback: true,
            messages: [
                {
                    basicCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        formattedText: "Test string",
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    browseCarouselCard: {
                        imageDisplayOptions: "Test string",
                        items: [
                            {
                                description: "Test string",
                                footer: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                openUriAction: {
                                    url: "Test string",
                                    urlTypeHint: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                    },
                    card: {
                        buttons: [
                            {
                                postback: "Test string",
                                text: "Test string",
                            }                        ],
                        imageUri: "Test string",
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    carouselSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                    },
                    image: {
                        accessibilityText: "Test string",
                        imageUri: "Test string",
                    },
                    linkOutSuggestion: {
                        destinationName: "Test string",
                        uri: "Test string",
                    },
                    listSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    mediaContent: {
                        mediaObjects: [
                            {
                                contentUrl: "Test string",
                                description: "Test string",
                                icon: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                largeImage: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                name: "Test string",
                            }                        ],
                        mediaType: "Test string",
                    },
                    payload: {
                        A: 42                    },
                    platform: "Test string",
                    quickReplies: {
                        quickReplies: [
                            "Test string"                        ],
                        title: "Test string",
                    },
                    simpleResponses: {
                        simpleResponses: [
                            {
                                displayText: "Test string",
                                ssml: "Test string",
                                textToSpeech: "Test string",
                            }                        ],
                    },
                    suggestions: {
                        suggestions: [
                            {
                                title: "Test string",
                            }                        ],
                    },
                    tableCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        columnProperties: [
                            {
                                header: "Test string",
                                horizontalAlignment: "Test string",
                            }                        ],
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        rows: [
                            {
                                cells: [
                                    {
                                        text: "Test string",
                                    }                                ],
                                dividerAfter: true,
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    text: {
                        text: [
                            "Test string"                        ],
                    },
                }            ],
            mlDisabled: true,
            name: "Test string",
            outputContexts: [
                {
                    lifespanCount: 42,
                    name: "Test string",
                    parameters: {
                        A: 42                    },
                }            ],
            parameters: [
                {
                    defaultValue: "Test string",
                    displayName: "Test string",
                    entityTypeDisplayName: "Test string",
                    isList: true,
                    mandatory: true,
                    name: "Test string",
                    prompts: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            parentFollowupIntentName: "Test string",
            priority: 42,
            resetContexts: true,
            rootFollowupIntentName: "Test string",
            trainingPhrases: [
                {
                    name: "Test string",
                    parts: [
                        {
                            alias: "Test string",
                            entityType: "Test string",
                            text: "Test string",
                            userDefined: true,
                        }                    ],
                    timesAddedCount: 42,
                    type: "Test string",
                }            ],
            webhookState: "Test string",
        });
        /** Deletes the specified intent and its direct or indirect followup intents. */
        await gapi.client.dialogflow.projects.agent.intents.delete({
            name: "Test string",
        });
        /** Retrieves the specified intent. */
        await gapi.client.dialogflow.projects.agent.intents.get({
            intentView: "Test string",
            languageCode: "Test string",
            name: "Test string",
        });
        /** Returns the list of all intents in the specified agent. */
        await gapi.client.dialogflow.projects.agent.intents.list({
            intentView: "Test string",
            languageCode: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified intent. */
        await gapi.client.dialogflow.projects.agent.intents.patch({
            intentView: "Test string",
            languageCode: "Test string",
            name: "Test string",
            updateMask: "Test string",
        }, {
            action: "Test string",
            defaultResponsePlatforms: [
                "Test string"            ],
            displayName: "Test string",
            events: [
                "Test string"            ],
            followupIntentInfo: [
                {
                    followupIntentName: "Test string",
                    parentFollowupIntentName: "Test string",
                }            ],
            inputContextNames: [
                "Test string"            ],
            isFallback: true,
            messages: [
                {
                    basicCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        formattedText: "Test string",
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    browseCarouselCard: {
                        imageDisplayOptions: "Test string",
                        items: [
                            {
                                description: "Test string",
                                footer: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                openUriAction: {
                                    url: "Test string",
                                    urlTypeHint: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                    },
                    card: {
                        buttons: [
                            {
                                postback: "Test string",
                                text: "Test string",
                            }                        ],
                        imageUri: "Test string",
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    carouselSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                    },
                    image: {
                        accessibilityText: "Test string",
                        imageUri: "Test string",
                    },
                    linkOutSuggestion: {
                        destinationName: "Test string",
                        uri: "Test string",
                    },
                    listSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    mediaContent: {
                        mediaObjects: [
                            {
                                contentUrl: "Test string",
                                description: "Test string",
                                icon: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                largeImage: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                name: "Test string",
                            }                        ],
                        mediaType: "Test string",
                    },
                    payload: {
                        A: 42                    },
                    platform: "Test string",
                    quickReplies: {
                        quickReplies: [
                            "Test string"                        ],
                        title: "Test string",
                    },
                    simpleResponses: {
                        simpleResponses: [
                            {
                                displayText: "Test string",
                                ssml: "Test string",
                                textToSpeech: "Test string",
                            }                        ],
                    },
                    suggestions: {
                        suggestions: [
                            {
                                title: "Test string",
                            }                        ],
                    },
                    tableCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        columnProperties: [
                            {
                                header: "Test string",
                                horizontalAlignment: "Test string",
                            }                        ],
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        rows: [
                            {
                                cells: [
                                    {
                                        text: "Test string",
                                    }                                ],
                                dividerAfter: true,
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    text: {
                        text: [
                            "Test string"                        ],
                    },
                }            ],
            mlDisabled: true,
            name: "Test string",
            outputContexts: [
                {
                    lifespanCount: 42,
                    name: "Test string",
                    parameters: {
                        A: 42                    },
                }            ],
            parameters: [
                {
                    defaultValue: "Test string",
                    displayName: "Test string",
                    entityTypeDisplayName: "Test string",
                    isList: true,
                    mandatory: true,
                    name: "Test string",
                    prompts: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            parentFollowupIntentName: "Test string",
            priority: 42,
            resetContexts: true,
            rootFollowupIntentName: "Test string",
            trainingPhrases: [
                {
                    name: "Test string",
                    parts: [
                        {
                            alias: "Test string",
                            entityType: "Test string",
                            text: "Test string",
                            userDefined: true,
                        }                    ],
                    timesAddedCount: 42,
                    type: "Test string",
                }            ],
            webhookState: "Test string",
        });
        /** Deletes all active contexts in the specified session. */
        await gapi.client.dialogflow.projects.agent.sessions.deleteContexts({
            parent: "Test string",
        });
        /** Creates a context. If the specified context already exists, overrides the context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.create({
            parent: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /** Deletes the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.delete({
            name: "Test string",
        });
        /** Retrieves the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.get({
            name: "Test string",
        });
        /** Returns the list of all contexts in the specified session. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /**
         * Creates a session entity type. If the specified session entity type already exists, overrides the session entity type. This method doesn't work with Google Assistant integration.
         * Contact Dialogflow support if you need to use session entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.create({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /**
         * Deletes the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.delete({
            name: "Test string",
        });
        /**
         * Retrieves the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.get({
            name: "Test string",
        });
        /**
         * Returns the list of all session entity types in the specified session. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session
         * entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Updates the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /**
         * Processes a natural language query and returns structured, actionable data as a result. This method is not idempotent, because it may cause contexts and session entity types to be
         * updated, which in turn might affect results of future queries. Note: Always use agent versions for production traffic. See [Versions and
         * environments](https://cloud.google.com/dialogflow/es/docs/agents-versions).
         */
        await gapi.client.dialogflow.projects.agent.sessions.detectIntent({
            session: "Test string",
        }, {
            inputAudio: "Test string",
            outputAudioConfig: {
                audioEncoding: "Test string",
                sampleRateHertz: 42,
                synthesizeSpeechConfig: {
                    effectsProfileId: [
                        "Test string"                    ],
                    pitch: 42,
                    speakingRate: 42,
                    voice: {
                        name: "Test string",
                        ssmlGender: "Test string",
                    },
                    volumeGainDb: 42,
                },
            },
            outputAudioConfigMask: "Test string",
            queryInput: {
                audioConfig: {
                    audioEncoding: "Test string",
                    enableWordInfo: true,
                    languageCode: "Test string",
                    model: "Test string",
                    modelVariant: "Test string",
                    phraseHints: [
                        "Test string"                    ],
                    sampleRateHertz: 42,
                    singleUtterance: true,
                    speechContexts: [
                        {
                            boost: 42,
                            phrases: [
                                "Test string"                            ],
                        }                    ],
                },
                event: {
                    languageCode: "Test string",
                    name: "Test string",
                    parameters: {
                        A: 42                    },
                },
                text: {
                    languageCode: "Test string",
                    text: "Test string",
                },
            },
            queryParams: {
                contexts: [
                    {
                        lifespanCount: 42,
                        name: "Test string",
                        parameters: {
                            A: 42                        },
                    }                ],
                geoLocation: {
                    latitude: 42,
                    longitude: 42,
                },
                payload: {
                    A: 42                },
                resetContexts: true,
                sentimentAnalysisRequestConfig: {
                    analyzeQueryTextSentiment: true,
                },
                sessionEntityTypes: [
                    {
                        entities: [
                            {
                                synonyms: [
                                    "Test string"                                ],
                                value: "Test string",
                            }                        ],
                        entityOverrideMode: "Test string",
                        name: "Test string",
                    }                ],
                timeZone: "Test string",
                webhookHeaders: {
                    A: "Test string"                },
            },
        });
        /** Creates a context. If the specified context already exists, overrides the context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.create({
            parent: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /** Deletes the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.delete({
            name: "Test string",
        });
        /** Retrieves the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.get({
            name: "Test string",
        });
        /** Returns the list of all contexts in the specified session. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /**
         * Creates a session entity type. If the specified session entity type already exists, overrides the session entity type. This method doesn't work with Google Assistant integration.
         * Contact Dialogflow support if you need to use session entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.create({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /**
         * Deletes the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.delete({
            name: "Test string",
        });
        /**
         * Retrieves the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.get({
            name: "Test string",
        });
        /**
         * Returns the list of all session entity types in the specified session. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session
         * entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Updates the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /**
         * Restores the specified agent from a ZIP file. Replaces the current agent version with a new one. All the intents and entity types in the older version are deleted. After the restore,
         * the restored draft agent will be trained automatically (unless disabled in agent settings). However, once the restore is done, training may not be completed yet. Please call TrainAgent
         * and wait for the operation it returns in order to train explicitly. Operation An operation which tracks when restoring is complete. It only tracks when the draft agent is updated not
         * when it is done training.
         */
        await gapi.client.dialogflow.projects.agent.restore({
            parent: "Test string",
        }, {
            agentContent: "Test string",
            agentUri: "Test string",
        });
        /** Deletes entity types in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.batchDelete({
            parent: "Test string",
        }, {
            entityTypeNames: [
                "Test string"            ],
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Updates/Creates multiple entity types in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.batchUpdate({
            parent: "Test string",
        }, {
            entityTypeBatchInline: {
                entityTypes: [
                    {
                        autoExpansionMode: "Test string",
                        displayName: "Test string",
                        enableFuzzyExtraction: true,
                        entities: [
                            {
                                synonyms: [
                                    "Test string"                                ],
                                value: "Test string",
                            }                        ],
                        kind: "Test string",
                        name: "Test string",
                    }                ],
            },
            entityTypeBatchUri: "Test string",
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Creates an entity type in the specified agent. */
        await gapi.client.dialogflow.projects.agent.entityTypes.create({
            languageCode: "Test string",
            parent: "Test string",
        }, {
            autoExpansionMode: "Test string",
            displayName: "Test string",
            enableFuzzyExtraction: true,
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            kind: "Test string",
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Deletes the specified entity type. */
        await gapi.client.dialogflow.projects.agent.entityTypes.delete({
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Retrieves the specified entity type. */
        await gapi.client.dialogflow.projects.agent.entityTypes.get({
            languageCode: "Test string",
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Returns the list of all entity types in the specified agent. */
        await gapi.client.dialogflow.projects.agent.entityTypes.list({
            languageCode: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Updates the specified entity type. */
        await gapi.client.dialogflow.projects.agent.entityTypes.patch({
            languageCode: "Test string",
            name: "Test string",
            updateMask: "Test string",
        }, {
            autoExpansionMode: "Test string",
            displayName: "Test string",
            enableFuzzyExtraction: true,
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            kind: "Test string",
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Returns the list of all non-draft environments of the specified agent. */
        await gapi.client.dialogflow.projects.agent.environments.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Deletes intents in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.intents.batchDelete({
            parent: "Test string",
        }, {
            intents: [
                {
                    action: "Test string",
                    defaultResponsePlatforms: [
                        "Test string"                    ],
                    displayName: "Test string",
                    events: [
                        "Test string"                    ],
                    followupIntentInfo: [
                        {
                            followupIntentName: "Test string",
                            parentFollowupIntentName: "Test string",
                        }                    ],
                    inputContextNames: [
                        "Test string"                    ],
                    isFallback: true,
                    messages: [
                        {
                            basicCard: {
                                buttons: [
                                    {
                                        openUriAction: {
                                            uri: "Test string",
                                        },
                                        title: "Test string",
                                    }                                ],
                                formattedText: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            browseCarouselCard: {
                                imageDisplayOptions: "Test string",
                                items: [
                                    {
                                        description: "Test string",
                                        footer: "Test string",
                                        image: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        openUriAction: {
                                            url: "Test string",
                                            urlTypeHint: "Test string",
                                        },
                                        title: "Test string",
                                    }                                ],
                            },
                            card: {
                                buttons: [
                                    {
                                        postback: "Test string",
                                        text: "Test string",
                                    }                                ],
                                imageUri: "Test string",
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            carouselSelect: {
                                items: [
                                    {
                                        description: "Test string",
                                        image: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        info: {
                                            key: "Test string",
                                            synonyms: [
                                                "Test string"                                            ],
                                        },
                                        title: "Test string",
                                    }                                ],
                            },
                            image: {
                                accessibilityText: "Test string",
                                imageUri: "Test string",
                            },
                            linkOutSuggestion: {
                                destinationName: "Test string",
                                uri: "Test string",
                            },
                            listSelect: {
                                items: [
                                    {
                                        description: "Test string",
                                        image: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        info: {
                                            key: "Test string",
                                            synonyms: [
                                                "Test string"                                            ],
                                        },
                                        title: "Test string",
                                    }                                ],
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            mediaContent: {
                                mediaObjects: [
                                    {
                                        contentUrl: "Test string",
                                        description: "Test string",
                                        icon: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        largeImage: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        name: "Test string",
                                    }                                ],
                                mediaType: "Test string",
                            },
                            payload: {
                                A: 42                            },
                            platform: "Test string",
                            quickReplies: {
                                quickReplies: [
                                    "Test string"                                ],
                                title: "Test string",
                            },
                            simpleResponses: {
                                simpleResponses: [
                                    {
                                        displayText: "Test string",
                                        ssml: "Test string",
                                        textToSpeech: "Test string",
                                    }                                ],
                            },
                            suggestions: {
                                suggestions: [
                                    {
                                        title: "Test string",
                                    }                                ],
                            },
                            tableCard: {
                                buttons: [
                                    {
                                        openUriAction: {
                                            uri: "Test string",
                                        },
                                        title: "Test string",
                                    }                                ],
                                columnProperties: [
                                    {
                                        header: "Test string",
                                        horizontalAlignment: "Test string",
                                    }                                ],
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                rows: [
                                    {
                                        cells: [
                                            {
                                                text: "Test string",
                                            }                                        ],
                                        dividerAfter: true,
                                    }                                ],
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            text: {
                                text: [
                                    "Test string"                                ],
                            },
                        }                    ],
                    mlDisabled: true,
                    name: "Test string",
                    outputContexts: [
                        {
                            lifespanCount: 42,
                            name: "Test string",
                            parameters: {
                                A: 42                            },
                        }                    ],
                    parameters: [
                        {
                            defaultValue: "Test string",
                            displayName: "Test string",
                            entityTypeDisplayName: "Test string",
                            isList: true,
                            mandatory: true,
                            name: "Test string",
                            prompts: [
                                "Test string"                            ],
                            value: "Test string",
                        }                    ],
                    parentFollowupIntentName: "Test string",
                    priority: 42,
                    resetContexts: true,
                    rootFollowupIntentName: "Test string",
                    trainingPhrases: [
                        {
                            name: "Test string",
                            parts: [
                                {
                                    alias: "Test string",
                                    entityType: "Test string",
                                    text: "Test string",
                                    userDefined: true,
                                }                            ],
                            timesAddedCount: 42,
                            type: "Test string",
                        }                    ],
                    webhookState: "Test string",
                }            ],
        });
        /** Updates/Creates multiple intents in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.intents.batchUpdate({
            parent: "Test string",
        }, {
            intentBatchInline: {
                intents: [
                    {
                        action: "Test string",
                        defaultResponsePlatforms: [
                            "Test string"                        ],
                        displayName: "Test string",
                        events: [
                            "Test string"                        ],
                        followupIntentInfo: [
                            {
                                followupIntentName: "Test string",
                                parentFollowupIntentName: "Test string",
                            }                        ],
                        inputContextNames: [
                            "Test string"                        ],
                        isFallback: true,
                        messages: [
                            {
                                basicCard: {
                                    buttons: [
                                        {
                                            openUriAction: {
                                                uri: "Test string",
                                            },
                                            title: "Test string",
                                        }                                    ],
                                    formattedText: "Test string",
                                    image: {
                                        accessibilityText: "Test string",
                                        imageUri: "Test string",
                                    },
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                browseCarouselCard: {
                                    imageDisplayOptions: "Test string",
                                    items: [
                                        {
                                            description: "Test string",
                                            footer: "Test string",
                                            image: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            openUriAction: {
                                                url: "Test string",
                                                urlTypeHint: "Test string",
                                            },
                                            title: "Test string",
                                        }                                    ],
                                },
                                card: {
                                    buttons: [
                                        {
                                            postback: "Test string",
                                            text: "Test string",
                                        }                                    ],
                                    imageUri: "Test string",
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                carouselSelect: {
                                    items: [
                                        {
                                            description: "Test string",
                                            image: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            info: {
                                                key: "Test string",
                                                synonyms: [
                                                    "Test string"                                                ],
                                            },
                                            title: "Test string",
                                        }                                    ],
                                },
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                linkOutSuggestion: {
                                    destinationName: "Test string",
                                    uri: "Test string",
                                },
                                listSelect: {
                                    items: [
                                        {
                                            description: "Test string",
                                            image: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            info: {
                                                key: "Test string",
                                                synonyms: [
                                                    "Test string"                                                ],
                                            },
                                            title: "Test string",
                                        }                                    ],
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                mediaContent: {
                                    mediaObjects: [
                                        {
                                            contentUrl: "Test string",
                                            description: "Test string",
                                            icon: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            largeImage: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            name: "Test string",
                                        }                                    ],
                                    mediaType: "Test string",
                                },
                                payload: {
                                    A: 42                                },
                                platform: "Test string",
                                quickReplies: {
                                    quickReplies: [
                                        "Test string"                                    ],
                                    title: "Test string",
                                },
                                simpleResponses: {
                                    simpleResponses: [
                                        {
                                            displayText: "Test string",
                                            ssml: "Test string",
                                            textToSpeech: "Test string",
                                        }                                    ],
                                },
                                suggestions: {
                                    suggestions: [
                                        {
                                            title: "Test string",
                                        }                                    ],
                                },
                                tableCard: {
                                    buttons: [
                                        {
                                            openUriAction: {
                                                uri: "Test string",
                                            },
                                            title: "Test string",
                                        }                                    ],
                                    columnProperties: [
                                        {
                                            header: "Test string",
                                            horizontalAlignment: "Test string",
                                        }                                    ],
                                    image: {
                                        accessibilityText: "Test string",
                                        imageUri: "Test string",
                                    },
                                    rows: [
                                        {
                                            cells: [
                                                {
                                                    text: "Test string",
                                                }                                            ],
                                            dividerAfter: true,
                                        }                                    ],
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                text: {
                                    text: [
                                        "Test string"                                    ],
                                },
                            }                        ],
                        mlDisabled: true,
                        name: "Test string",
                        outputContexts: [
                            {
                                lifespanCount: 42,
                                name: "Test string",
                                parameters: {
                                    A: 42                                },
                            }                        ],
                        parameters: [
                            {
                                defaultValue: "Test string",
                                displayName: "Test string",
                                entityTypeDisplayName: "Test string",
                                isList: true,
                                mandatory: true,
                                name: "Test string",
                                prompts: [
                                    "Test string"                                ],
                                value: "Test string",
                            }                        ],
                        parentFollowupIntentName: "Test string",
                        priority: 42,
                        resetContexts: true,
                        rootFollowupIntentName: "Test string",
                        trainingPhrases: [
                            {
                                name: "Test string",
                                parts: [
                                    {
                                        alias: "Test string",
                                        entityType: "Test string",
                                        text: "Test string",
                                        userDefined: true,
                                    }                                ],
                                timesAddedCount: 42,
                                type: "Test string",
                            }                        ],
                        webhookState: "Test string",
                    }                ],
            },
            intentBatchUri: "Test string",
            intentView: "Test string",
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Creates an intent in the specified agent. */
        await gapi.client.dialogflow.projects.agent.intents.create({
            intentView: "Test string",
            languageCode: "Test string",
            parent: "Test string",
        }, {
            action: "Test string",
            defaultResponsePlatforms: [
                "Test string"            ],
            displayName: "Test string",
            events: [
                "Test string"            ],
            followupIntentInfo: [
                {
                    followupIntentName: "Test string",
                    parentFollowupIntentName: "Test string",
                }            ],
            inputContextNames: [
                "Test string"            ],
            isFallback: true,
            messages: [
                {
                    basicCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        formattedText: "Test string",
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    browseCarouselCard: {
                        imageDisplayOptions: "Test string",
                        items: [
                            {
                                description: "Test string",
                                footer: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                openUriAction: {
                                    url: "Test string",
                                    urlTypeHint: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                    },
                    card: {
                        buttons: [
                            {
                                postback: "Test string",
                                text: "Test string",
                            }                        ],
                        imageUri: "Test string",
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    carouselSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                    },
                    image: {
                        accessibilityText: "Test string",
                        imageUri: "Test string",
                    },
                    linkOutSuggestion: {
                        destinationName: "Test string",
                        uri: "Test string",
                    },
                    listSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    mediaContent: {
                        mediaObjects: [
                            {
                                contentUrl: "Test string",
                                description: "Test string",
                                icon: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                largeImage: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                name: "Test string",
                            }                        ],
                        mediaType: "Test string",
                    },
                    payload: {
                        A: 42                    },
                    platform: "Test string",
                    quickReplies: {
                        quickReplies: [
                            "Test string"                        ],
                        title: "Test string",
                    },
                    simpleResponses: {
                        simpleResponses: [
                            {
                                displayText: "Test string",
                                ssml: "Test string",
                                textToSpeech: "Test string",
                            }                        ],
                    },
                    suggestions: {
                        suggestions: [
                            {
                                title: "Test string",
                            }                        ],
                    },
                    tableCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        columnProperties: [
                            {
                                header: "Test string",
                                horizontalAlignment: "Test string",
                            }                        ],
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        rows: [
                            {
                                cells: [
                                    {
                                        text: "Test string",
                                    }                                ],
                                dividerAfter: true,
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    text: {
                        text: [
                            "Test string"                        ],
                    },
                }            ],
            mlDisabled: true,
            name: "Test string",
            outputContexts: [
                {
                    lifespanCount: 42,
                    name: "Test string",
                    parameters: {
                        A: 42                    },
                }            ],
            parameters: [
                {
                    defaultValue: "Test string",
                    displayName: "Test string",
                    entityTypeDisplayName: "Test string",
                    isList: true,
                    mandatory: true,
                    name: "Test string",
                    prompts: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            parentFollowupIntentName: "Test string",
            priority: 42,
            resetContexts: true,
            rootFollowupIntentName: "Test string",
            trainingPhrases: [
                {
                    name: "Test string",
                    parts: [
                        {
                            alias: "Test string",
                            entityType: "Test string",
                            text: "Test string",
                            userDefined: true,
                        }                    ],
                    timesAddedCount: 42,
                    type: "Test string",
                }            ],
            webhookState: "Test string",
        });
        /** Deletes the specified intent and its direct or indirect followup intents. */
        await gapi.client.dialogflow.projects.agent.intents.delete({
            name: "Test string",
        });
        /** Retrieves the specified intent. */
        await gapi.client.dialogflow.projects.agent.intents.get({
            intentView: "Test string",
            languageCode: "Test string",
            name: "Test string",
        });
        /** Returns the list of all intents in the specified agent. */
        await gapi.client.dialogflow.projects.agent.intents.list({
            intentView: "Test string",
            languageCode: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified intent. */
        await gapi.client.dialogflow.projects.agent.intents.patch({
            intentView: "Test string",
            languageCode: "Test string",
            name: "Test string",
            updateMask: "Test string",
        }, {
            action: "Test string",
            defaultResponsePlatforms: [
                "Test string"            ],
            displayName: "Test string",
            events: [
                "Test string"            ],
            followupIntentInfo: [
                {
                    followupIntentName: "Test string",
                    parentFollowupIntentName: "Test string",
                }            ],
            inputContextNames: [
                "Test string"            ],
            isFallback: true,
            messages: [
                {
                    basicCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        formattedText: "Test string",
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    browseCarouselCard: {
                        imageDisplayOptions: "Test string",
                        items: [
                            {
                                description: "Test string",
                                footer: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                openUriAction: {
                                    url: "Test string",
                                    urlTypeHint: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                    },
                    card: {
                        buttons: [
                            {
                                postback: "Test string",
                                text: "Test string",
                            }                        ],
                        imageUri: "Test string",
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    carouselSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                    },
                    image: {
                        accessibilityText: "Test string",
                        imageUri: "Test string",
                    },
                    linkOutSuggestion: {
                        destinationName: "Test string",
                        uri: "Test string",
                    },
                    listSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    mediaContent: {
                        mediaObjects: [
                            {
                                contentUrl: "Test string",
                                description: "Test string",
                                icon: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                largeImage: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                name: "Test string",
                            }                        ],
                        mediaType: "Test string",
                    },
                    payload: {
                        A: 42                    },
                    platform: "Test string",
                    quickReplies: {
                        quickReplies: [
                            "Test string"                        ],
                        title: "Test string",
                    },
                    simpleResponses: {
                        simpleResponses: [
                            {
                                displayText: "Test string",
                                ssml: "Test string",
                                textToSpeech: "Test string",
                            }                        ],
                    },
                    suggestions: {
                        suggestions: [
                            {
                                title: "Test string",
                            }                        ],
                    },
                    tableCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        columnProperties: [
                            {
                                header: "Test string",
                                horizontalAlignment: "Test string",
                            }                        ],
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        rows: [
                            {
                                cells: [
                                    {
                                        text: "Test string",
                                    }                                ],
                                dividerAfter: true,
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    text: {
                        text: [
                            "Test string"                        ],
                    },
                }            ],
            mlDisabled: true,
            name: "Test string",
            outputContexts: [
                {
                    lifespanCount: 42,
                    name: "Test string",
                    parameters: {
                        A: 42                    },
                }            ],
            parameters: [
                {
                    defaultValue: "Test string",
                    displayName: "Test string",
                    entityTypeDisplayName: "Test string",
                    isList: true,
                    mandatory: true,
                    name: "Test string",
                    prompts: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            parentFollowupIntentName: "Test string",
            priority: 42,
            resetContexts: true,
            rootFollowupIntentName: "Test string",
            trainingPhrases: [
                {
                    name: "Test string",
                    parts: [
                        {
                            alias: "Test string",
                            entityType: "Test string",
                            text: "Test string",
                            userDefined: true,
                        }                    ],
                    timesAddedCount: 42,
                    type: "Test string",
                }            ],
            webhookState: "Test string",
        });
        /** Deletes all active contexts in the specified session. */
        await gapi.client.dialogflow.projects.agent.sessions.deleteContexts({
            parent: "Test string",
        });
        /** Creates a context. If the specified context already exists, overrides the context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.create({
            parent: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /** Deletes the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.delete({
            name: "Test string",
        });
        /** Retrieves the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.get({
            name: "Test string",
        });
        /** Returns the list of all contexts in the specified session. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /**
         * Creates a session entity type. If the specified session entity type already exists, overrides the session entity type. This method doesn't work with Google Assistant integration.
         * Contact Dialogflow support if you need to use session entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.create({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /**
         * Deletes the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.delete({
            name: "Test string",
        });
        /**
         * Retrieves the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.get({
            name: "Test string",
        });
        /**
         * Returns the list of all session entity types in the specified session. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session
         * entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Updates the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /**
         * Processes a natural language query and returns structured, actionable data as a result. This method is not idempotent, because it may cause contexts and session entity types to be
         * updated, which in turn might affect results of future queries. Note: Always use agent versions for production traffic. See [Versions and
         * environments](https://cloud.google.com/dialogflow/es/docs/agents-versions).
         */
        await gapi.client.dialogflow.projects.agent.sessions.detectIntent({
            session: "Test string",
        }, {
            inputAudio: "Test string",
            outputAudioConfig: {
                audioEncoding: "Test string",
                sampleRateHertz: 42,
                synthesizeSpeechConfig: {
                    effectsProfileId: [
                        "Test string"                    ],
                    pitch: 42,
                    speakingRate: 42,
                    voice: {
                        name: "Test string",
                        ssmlGender: "Test string",
                    },
                    volumeGainDb: 42,
                },
            },
            outputAudioConfigMask: "Test string",
            queryInput: {
                audioConfig: {
                    audioEncoding: "Test string",
                    enableWordInfo: true,
                    languageCode: "Test string",
                    model: "Test string",
                    modelVariant: "Test string",
                    phraseHints: [
                        "Test string"                    ],
                    sampleRateHertz: 42,
                    singleUtterance: true,
                    speechContexts: [
                        {
                            boost: 42,
                            phrases: [
                                "Test string"                            ],
                        }                    ],
                },
                event: {
                    languageCode: "Test string",
                    name: "Test string",
                    parameters: {
                        A: 42                    },
                },
                text: {
                    languageCode: "Test string",
                    text: "Test string",
                },
            },
            queryParams: {
                contexts: [
                    {
                        lifespanCount: 42,
                        name: "Test string",
                        parameters: {
                            A: 42                        },
                    }                ],
                geoLocation: {
                    latitude: 42,
                    longitude: 42,
                },
                payload: {
                    A: 42                },
                resetContexts: true,
                sentimentAnalysisRequestConfig: {
                    analyzeQueryTextSentiment: true,
                },
                sessionEntityTypes: [
                    {
                        entities: [
                            {
                                synonyms: [
                                    "Test string"                                ],
                                value: "Test string",
                            }                        ],
                        entityOverrideMode: "Test string",
                        name: "Test string",
                    }                ],
                timeZone: "Test string",
                webhookHeaders: {
                    A: "Test string"                },
            },
        });
        /** Creates a context. If the specified context already exists, overrides the context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.create({
            parent: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /** Deletes the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.delete({
            name: "Test string",
        });
        /** Retrieves the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.get({
            name: "Test string",
        });
        /** Returns the list of all contexts in the specified session. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /**
         * Creates a session entity type. If the specified session entity type already exists, overrides the session entity type. This method doesn't work with Google Assistant integration.
         * Contact Dialogflow support if you need to use session entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.create({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /**
         * Deletes the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.delete({
            name: "Test string",
        });
        /**
         * Retrieves the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.get({
            name: "Test string",
        });
        /**
         * Returns the list of all session entity types in the specified session. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session
         * entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Updates the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /**
         * Returns the list of agents. Since there is at most one conversational agent per project, this method is useful primarily for listing all agents across projects the caller has access to.
         * One can achieve that with a wildcard project collection id "-". Refer to [List Sub-Collections](https://cloud.google.com/apis/design/design_patterns#list_sub-collections).
         */
        await gapi.client.dialogflow.projects.agent.search({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Deletes entity types in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.batchDelete({
            parent: "Test string",
        }, {
            entityTypeNames: [
                "Test string"            ],
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Updates/Creates multiple entity types in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.batchUpdate({
            parent: "Test string",
        }, {
            entityTypeBatchInline: {
                entityTypes: [
                    {
                        autoExpansionMode: "Test string",
                        displayName: "Test string",
                        enableFuzzyExtraction: true,
                        entities: [
                            {
                                synonyms: [
                                    "Test string"                                ],
                                value: "Test string",
                            }                        ],
                        kind: "Test string",
                        name: "Test string",
                    }                ],
            },
            entityTypeBatchUri: "Test string",
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Creates an entity type in the specified agent. */
        await gapi.client.dialogflow.projects.agent.entityTypes.create({
            languageCode: "Test string",
            parent: "Test string",
        }, {
            autoExpansionMode: "Test string",
            displayName: "Test string",
            enableFuzzyExtraction: true,
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            kind: "Test string",
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Deletes the specified entity type. */
        await gapi.client.dialogflow.projects.agent.entityTypes.delete({
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Retrieves the specified entity type. */
        await gapi.client.dialogflow.projects.agent.entityTypes.get({
            languageCode: "Test string",
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Returns the list of all entity types in the specified agent. */
        await gapi.client.dialogflow.projects.agent.entityTypes.list({
            languageCode: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Updates the specified entity type. */
        await gapi.client.dialogflow.projects.agent.entityTypes.patch({
            languageCode: "Test string",
            name: "Test string",
            updateMask: "Test string",
        }, {
            autoExpansionMode: "Test string",
            displayName: "Test string",
            enableFuzzyExtraction: true,
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            kind: "Test string",
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Returns the list of all non-draft environments of the specified agent. */
        await gapi.client.dialogflow.projects.agent.environments.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Deletes intents in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.intents.batchDelete({
            parent: "Test string",
        }, {
            intents: [
                {
                    action: "Test string",
                    defaultResponsePlatforms: [
                        "Test string"                    ],
                    displayName: "Test string",
                    events: [
                        "Test string"                    ],
                    followupIntentInfo: [
                        {
                            followupIntentName: "Test string",
                            parentFollowupIntentName: "Test string",
                        }                    ],
                    inputContextNames: [
                        "Test string"                    ],
                    isFallback: true,
                    messages: [
                        {
                            basicCard: {
                                buttons: [
                                    {
                                        openUriAction: {
                                            uri: "Test string",
                                        },
                                        title: "Test string",
                                    }                                ],
                                formattedText: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            browseCarouselCard: {
                                imageDisplayOptions: "Test string",
                                items: [
                                    {
                                        description: "Test string",
                                        footer: "Test string",
                                        image: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        openUriAction: {
                                            url: "Test string",
                                            urlTypeHint: "Test string",
                                        },
                                        title: "Test string",
                                    }                                ],
                            },
                            card: {
                                buttons: [
                                    {
                                        postback: "Test string",
                                        text: "Test string",
                                    }                                ],
                                imageUri: "Test string",
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            carouselSelect: {
                                items: [
                                    {
                                        description: "Test string",
                                        image: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        info: {
                                            key: "Test string",
                                            synonyms: [
                                                "Test string"                                            ],
                                        },
                                        title: "Test string",
                                    }                                ],
                            },
                            image: {
                                accessibilityText: "Test string",
                                imageUri: "Test string",
                            },
                            linkOutSuggestion: {
                                destinationName: "Test string",
                                uri: "Test string",
                            },
                            listSelect: {
                                items: [
                                    {
                                        description: "Test string",
                                        image: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        info: {
                                            key: "Test string",
                                            synonyms: [
                                                "Test string"                                            ],
                                        },
                                        title: "Test string",
                                    }                                ],
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            mediaContent: {
                                mediaObjects: [
                                    {
                                        contentUrl: "Test string",
                                        description: "Test string",
                                        icon: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        largeImage: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        name: "Test string",
                                    }                                ],
                                mediaType: "Test string",
                            },
                            payload: {
                                A: 42                            },
                            platform: "Test string",
                            quickReplies: {
                                quickReplies: [
                                    "Test string"                                ],
                                title: "Test string",
                            },
                            simpleResponses: {
                                simpleResponses: [
                                    {
                                        displayText: "Test string",
                                        ssml: "Test string",
                                        textToSpeech: "Test string",
                                    }                                ],
                            },
                            suggestions: {
                                suggestions: [
                                    {
                                        title: "Test string",
                                    }                                ],
                            },
                            tableCard: {
                                buttons: [
                                    {
                                        openUriAction: {
                                            uri: "Test string",
                                        },
                                        title: "Test string",
                                    }                                ],
                                columnProperties: [
                                    {
                                        header: "Test string",
                                        horizontalAlignment: "Test string",
                                    }                                ],
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                rows: [
                                    {
                                        cells: [
                                            {
                                                text: "Test string",
                                            }                                        ],
                                        dividerAfter: true,
                                    }                                ],
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            text: {
                                text: [
                                    "Test string"                                ],
                            },
                        }                    ],
                    mlDisabled: true,
                    name: "Test string",
                    outputContexts: [
                        {
                            lifespanCount: 42,
                            name: "Test string",
                            parameters: {
                                A: 42                            },
                        }                    ],
                    parameters: [
                        {
                            defaultValue: "Test string",
                            displayName: "Test string",
                            entityTypeDisplayName: "Test string",
                            isList: true,
                            mandatory: true,
                            name: "Test string",
                            prompts: [
                                "Test string"                            ],
                            value: "Test string",
                        }                    ],
                    parentFollowupIntentName: "Test string",
                    priority: 42,
                    resetContexts: true,
                    rootFollowupIntentName: "Test string",
                    trainingPhrases: [
                        {
                            name: "Test string",
                            parts: [
                                {
                                    alias: "Test string",
                                    entityType: "Test string",
                                    text: "Test string",
                                    userDefined: true,
                                }                            ],
                            timesAddedCount: 42,
                            type: "Test string",
                        }                    ],
                    webhookState: "Test string",
                }            ],
        });
        /** Updates/Creates multiple intents in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.intents.batchUpdate({
            parent: "Test string",
        }, {
            intentBatchInline: {
                intents: [
                    {
                        action: "Test string",
                        defaultResponsePlatforms: [
                            "Test string"                        ],
                        displayName: "Test string",
                        events: [
                            "Test string"                        ],
                        followupIntentInfo: [
                            {
                                followupIntentName: "Test string",
                                parentFollowupIntentName: "Test string",
                            }                        ],
                        inputContextNames: [
                            "Test string"                        ],
                        isFallback: true,
                        messages: [
                            {
                                basicCard: {
                                    buttons: [
                                        {
                                            openUriAction: {
                                                uri: "Test string",
                                            },
                                            title: "Test string",
                                        }                                    ],
                                    formattedText: "Test string",
                                    image: {
                                        accessibilityText: "Test string",
                                        imageUri: "Test string",
                                    },
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                browseCarouselCard: {
                                    imageDisplayOptions: "Test string",
                                    items: [
                                        {
                                            description: "Test string",
                                            footer: "Test string",
                                            image: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            openUriAction: {
                                                url: "Test string",
                                                urlTypeHint: "Test string",
                                            },
                                            title: "Test string",
                                        }                                    ],
                                },
                                card: {
                                    buttons: [
                                        {
                                            postback: "Test string",
                                            text: "Test string",
                                        }                                    ],
                                    imageUri: "Test string",
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                carouselSelect: {
                                    items: [
                                        {
                                            description: "Test string",
                                            image: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            info: {
                                                key: "Test string",
                                                synonyms: [
                                                    "Test string"                                                ],
                                            },
                                            title: "Test string",
                                        }                                    ],
                                },
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                linkOutSuggestion: {
                                    destinationName: "Test string",
                                    uri: "Test string",
                                },
                                listSelect: {
                                    items: [
                                        {
                                            description: "Test string",
                                            image: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            info: {
                                                key: "Test string",
                                                synonyms: [
                                                    "Test string"                                                ],
                                            },
                                            title: "Test string",
                                        }                                    ],
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                mediaContent: {
                                    mediaObjects: [
                                        {
                                            contentUrl: "Test string",
                                            description: "Test string",
                                            icon: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            largeImage: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            name: "Test string",
                                        }                                    ],
                                    mediaType: "Test string",
                                },
                                payload: {
                                    A: 42                                },
                                platform: "Test string",
                                quickReplies: {
                                    quickReplies: [
                                        "Test string"                                    ],
                                    title: "Test string",
                                },
                                simpleResponses: {
                                    simpleResponses: [
                                        {
                                            displayText: "Test string",
                                            ssml: "Test string",
                                            textToSpeech: "Test string",
                                        }                                    ],
                                },
                                suggestions: {
                                    suggestions: [
                                        {
                                            title: "Test string",
                                        }                                    ],
                                },
                                tableCard: {
                                    buttons: [
                                        {
                                            openUriAction: {
                                                uri: "Test string",
                                            },
                                            title: "Test string",
                                        }                                    ],
                                    columnProperties: [
                                        {
                                            header: "Test string",
                                            horizontalAlignment: "Test string",
                                        }                                    ],
                                    image: {
                                        accessibilityText: "Test string",
                                        imageUri: "Test string",
                                    },
                                    rows: [
                                        {
                                            cells: [
                                                {
                                                    text: "Test string",
                                                }                                            ],
                                            dividerAfter: true,
                                        }                                    ],
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                text: {
                                    text: [
                                        "Test string"                                    ],
                                },
                            }                        ],
                        mlDisabled: true,
                        name: "Test string",
                        outputContexts: [
                            {
                                lifespanCount: 42,
                                name: "Test string",
                                parameters: {
                                    A: 42                                },
                            }                        ],
                        parameters: [
                            {
                                defaultValue: "Test string",
                                displayName: "Test string",
                                entityTypeDisplayName: "Test string",
                                isList: true,
                                mandatory: true,
                                name: "Test string",
                                prompts: [
                                    "Test string"                                ],
                                value: "Test string",
                            }                        ],
                        parentFollowupIntentName: "Test string",
                        priority: 42,
                        resetContexts: true,
                        rootFollowupIntentName: "Test string",
                        trainingPhrases: [
                            {
                                name: "Test string",
                                parts: [
                                    {
                                        alias: "Test string",
                                        entityType: "Test string",
                                        text: "Test string",
                                        userDefined: true,
                                    }                                ],
                                timesAddedCount: 42,
                                type: "Test string",
                            }                        ],
                        webhookState: "Test string",
                    }                ],
            },
            intentBatchUri: "Test string",
            intentView: "Test string",
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Creates an intent in the specified agent. */
        await gapi.client.dialogflow.projects.agent.intents.create({
            intentView: "Test string",
            languageCode: "Test string",
            parent: "Test string",
        }, {
            action: "Test string",
            defaultResponsePlatforms: [
                "Test string"            ],
            displayName: "Test string",
            events: [
                "Test string"            ],
            followupIntentInfo: [
                {
                    followupIntentName: "Test string",
                    parentFollowupIntentName: "Test string",
                }            ],
            inputContextNames: [
                "Test string"            ],
            isFallback: true,
            messages: [
                {
                    basicCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        formattedText: "Test string",
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    browseCarouselCard: {
                        imageDisplayOptions: "Test string",
                        items: [
                            {
                                description: "Test string",
                                footer: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                openUriAction: {
                                    url: "Test string",
                                    urlTypeHint: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                    },
                    card: {
                        buttons: [
                            {
                                postback: "Test string",
                                text: "Test string",
                            }                        ],
                        imageUri: "Test string",
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    carouselSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                    },
                    image: {
                        accessibilityText: "Test string",
                        imageUri: "Test string",
                    },
                    linkOutSuggestion: {
                        destinationName: "Test string",
                        uri: "Test string",
                    },
                    listSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    mediaContent: {
                        mediaObjects: [
                            {
                                contentUrl: "Test string",
                                description: "Test string",
                                icon: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                largeImage: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                name: "Test string",
                            }                        ],
                        mediaType: "Test string",
                    },
                    payload: {
                        A: 42                    },
                    platform: "Test string",
                    quickReplies: {
                        quickReplies: [
                            "Test string"                        ],
                        title: "Test string",
                    },
                    simpleResponses: {
                        simpleResponses: [
                            {
                                displayText: "Test string",
                                ssml: "Test string",
                                textToSpeech: "Test string",
                            }                        ],
                    },
                    suggestions: {
                        suggestions: [
                            {
                                title: "Test string",
                            }                        ],
                    },
                    tableCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        columnProperties: [
                            {
                                header: "Test string",
                                horizontalAlignment: "Test string",
                            }                        ],
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        rows: [
                            {
                                cells: [
                                    {
                                        text: "Test string",
                                    }                                ],
                                dividerAfter: true,
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    text: {
                        text: [
                            "Test string"                        ],
                    },
                }            ],
            mlDisabled: true,
            name: "Test string",
            outputContexts: [
                {
                    lifespanCount: 42,
                    name: "Test string",
                    parameters: {
                        A: 42                    },
                }            ],
            parameters: [
                {
                    defaultValue: "Test string",
                    displayName: "Test string",
                    entityTypeDisplayName: "Test string",
                    isList: true,
                    mandatory: true,
                    name: "Test string",
                    prompts: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            parentFollowupIntentName: "Test string",
            priority: 42,
            resetContexts: true,
            rootFollowupIntentName: "Test string",
            trainingPhrases: [
                {
                    name: "Test string",
                    parts: [
                        {
                            alias: "Test string",
                            entityType: "Test string",
                            text: "Test string",
                            userDefined: true,
                        }                    ],
                    timesAddedCount: 42,
                    type: "Test string",
                }            ],
            webhookState: "Test string",
        });
        /** Deletes the specified intent and its direct or indirect followup intents. */
        await gapi.client.dialogflow.projects.agent.intents.delete({
            name: "Test string",
        });
        /** Retrieves the specified intent. */
        await gapi.client.dialogflow.projects.agent.intents.get({
            intentView: "Test string",
            languageCode: "Test string",
            name: "Test string",
        });
        /** Returns the list of all intents in the specified agent. */
        await gapi.client.dialogflow.projects.agent.intents.list({
            intentView: "Test string",
            languageCode: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified intent. */
        await gapi.client.dialogflow.projects.agent.intents.patch({
            intentView: "Test string",
            languageCode: "Test string",
            name: "Test string",
            updateMask: "Test string",
        }, {
            action: "Test string",
            defaultResponsePlatforms: [
                "Test string"            ],
            displayName: "Test string",
            events: [
                "Test string"            ],
            followupIntentInfo: [
                {
                    followupIntentName: "Test string",
                    parentFollowupIntentName: "Test string",
                }            ],
            inputContextNames: [
                "Test string"            ],
            isFallback: true,
            messages: [
                {
                    basicCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        formattedText: "Test string",
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    browseCarouselCard: {
                        imageDisplayOptions: "Test string",
                        items: [
                            {
                                description: "Test string",
                                footer: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                openUriAction: {
                                    url: "Test string",
                                    urlTypeHint: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                    },
                    card: {
                        buttons: [
                            {
                                postback: "Test string",
                                text: "Test string",
                            }                        ],
                        imageUri: "Test string",
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    carouselSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                    },
                    image: {
                        accessibilityText: "Test string",
                        imageUri: "Test string",
                    },
                    linkOutSuggestion: {
                        destinationName: "Test string",
                        uri: "Test string",
                    },
                    listSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    mediaContent: {
                        mediaObjects: [
                            {
                                contentUrl: "Test string",
                                description: "Test string",
                                icon: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                largeImage: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                name: "Test string",
                            }                        ],
                        mediaType: "Test string",
                    },
                    payload: {
                        A: 42                    },
                    platform: "Test string",
                    quickReplies: {
                        quickReplies: [
                            "Test string"                        ],
                        title: "Test string",
                    },
                    simpleResponses: {
                        simpleResponses: [
                            {
                                displayText: "Test string",
                                ssml: "Test string",
                                textToSpeech: "Test string",
                            }                        ],
                    },
                    suggestions: {
                        suggestions: [
                            {
                                title: "Test string",
                            }                        ],
                    },
                    tableCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        columnProperties: [
                            {
                                header: "Test string",
                                horizontalAlignment: "Test string",
                            }                        ],
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        rows: [
                            {
                                cells: [
                                    {
                                        text: "Test string",
                                    }                                ],
                                dividerAfter: true,
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    text: {
                        text: [
                            "Test string"                        ],
                    },
                }            ],
            mlDisabled: true,
            name: "Test string",
            outputContexts: [
                {
                    lifespanCount: 42,
                    name: "Test string",
                    parameters: {
                        A: 42                    },
                }            ],
            parameters: [
                {
                    defaultValue: "Test string",
                    displayName: "Test string",
                    entityTypeDisplayName: "Test string",
                    isList: true,
                    mandatory: true,
                    name: "Test string",
                    prompts: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            parentFollowupIntentName: "Test string",
            priority: 42,
            resetContexts: true,
            rootFollowupIntentName: "Test string",
            trainingPhrases: [
                {
                    name: "Test string",
                    parts: [
                        {
                            alias: "Test string",
                            entityType: "Test string",
                            text: "Test string",
                            userDefined: true,
                        }                    ],
                    timesAddedCount: 42,
                    type: "Test string",
                }            ],
            webhookState: "Test string",
        });
        /** Deletes all active contexts in the specified session. */
        await gapi.client.dialogflow.projects.agent.sessions.deleteContexts({
            parent: "Test string",
        });
        /** Creates a context. If the specified context already exists, overrides the context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.create({
            parent: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /** Deletes the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.delete({
            name: "Test string",
        });
        /** Retrieves the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.get({
            name: "Test string",
        });
        /** Returns the list of all contexts in the specified session. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /**
         * Creates a session entity type. If the specified session entity type already exists, overrides the session entity type. This method doesn't work with Google Assistant integration.
         * Contact Dialogflow support if you need to use session entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.create({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /**
         * Deletes the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.delete({
            name: "Test string",
        });
        /**
         * Retrieves the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.get({
            name: "Test string",
        });
        /**
         * Returns the list of all session entity types in the specified session. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session
         * entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Updates the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /**
         * Processes a natural language query and returns structured, actionable data as a result. This method is not idempotent, because it may cause contexts and session entity types to be
         * updated, which in turn might affect results of future queries. Note: Always use agent versions for production traffic. See [Versions and
         * environments](https://cloud.google.com/dialogflow/es/docs/agents-versions).
         */
        await gapi.client.dialogflow.projects.agent.sessions.detectIntent({
            session: "Test string",
        }, {
            inputAudio: "Test string",
            outputAudioConfig: {
                audioEncoding: "Test string",
                sampleRateHertz: 42,
                synthesizeSpeechConfig: {
                    effectsProfileId: [
                        "Test string"                    ],
                    pitch: 42,
                    speakingRate: 42,
                    voice: {
                        name: "Test string",
                        ssmlGender: "Test string",
                    },
                    volumeGainDb: 42,
                },
            },
            outputAudioConfigMask: "Test string",
            queryInput: {
                audioConfig: {
                    audioEncoding: "Test string",
                    enableWordInfo: true,
                    languageCode: "Test string",
                    model: "Test string",
                    modelVariant: "Test string",
                    phraseHints: [
                        "Test string"                    ],
                    sampleRateHertz: 42,
                    singleUtterance: true,
                    speechContexts: [
                        {
                            boost: 42,
                            phrases: [
                                "Test string"                            ],
                        }                    ],
                },
                event: {
                    languageCode: "Test string",
                    name: "Test string",
                    parameters: {
                        A: 42                    },
                },
                text: {
                    languageCode: "Test string",
                    text: "Test string",
                },
            },
            queryParams: {
                contexts: [
                    {
                        lifespanCount: 42,
                        name: "Test string",
                        parameters: {
                            A: 42                        },
                    }                ],
                geoLocation: {
                    latitude: 42,
                    longitude: 42,
                },
                payload: {
                    A: 42                },
                resetContexts: true,
                sentimentAnalysisRequestConfig: {
                    analyzeQueryTextSentiment: true,
                },
                sessionEntityTypes: [
                    {
                        entities: [
                            {
                                synonyms: [
                                    "Test string"                                ],
                                value: "Test string",
                            }                        ],
                        entityOverrideMode: "Test string",
                        name: "Test string",
                    }                ],
                timeZone: "Test string",
                webhookHeaders: {
                    A: "Test string"                },
            },
        });
        /** Creates a context. If the specified context already exists, overrides the context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.create({
            parent: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /** Deletes the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.delete({
            name: "Test string",
        });
        /** Retrieves the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.get({
            name: "Test string",
        });
        /** Returns the list of all contexts in the specified session. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /**
         * Creates a session entity type. If the specified session entity type already exists, overrides the session entity type. This method doesn't work with Google Assistant integration.
         * Contact Dialogflow support if you need to use session entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.create({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /**
         * Deletes the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.delete({
            name: "Test string",
        });
        /**
         * Retrieves the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.get({
            name: "Test string",
        });
        /**
         * Returns the list of all session entity types in the specified session. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session
         * entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Updates the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /** Trains the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.train({
            parent: "Test string",
        }, {
        });
        /** Deletes entity types in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.batchDelete({
            parent: "Test string",
        }, {
            entityTypeNames: [
                "Test string"            ],
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Updates/Creates multiple entity types in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.batchUpdate({
            parent: "Test string",
        }, {
            entityTypeBatchInline: {
                entityTypes: [
                    {
                        autoExpansionMode: "Test string",
                        displayName: "Test string",
                        enableFuzzyExtraction: true,
                        entities: [
                            {
                                synonyms: [
                                    "Test string"                                ],
                                value: "Test string",
                            }                        ],
                        kind: "Test string",
                        name: "Test string",
                    }                ],
            },
            entityTypeBatchUri: "Test string",
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Creates an entity type in the specified agent. */
        await gapi.client.dialogflow.projects.agent.entityTypes.create({
            languageCode: "Test string",
            parent: "Test string",
        }, {
            autoExpansionMode: "Test string",
            displayName: "Test string",
            enableFuzzyExtraction: true,
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            kind: "Test string",
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Deletes the specified entity type. */
        await gapi.client.dialogflow.projects.agent.entityTypes.delete({
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Retrieves the specified entity type. */
        await gapi.client.dialogflow.projects.agent.entityTypes.get({
            languageCode: "Test string",
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Returns the list of all entity types in the specified agent. */
        await gapi.client.dialogflow.projects.agent.entityTypes.list({
            languageCode: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Updates the specified entity type. */
        await gapi.client.dialogflow.projects.agent.entityTypes.patch({
            languageCode: "Test string",
            name: "Test string",
            updateMask: "Test string",
        }, {
            autoExpansionMode: "Test string",
            displayName: "Test string",
            enableFuzzyExtraction: true,
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            kind: "Test string",
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Returns the list of all non-draft environments of the specified agent. */
        await gapi.client.dialogflow.projects.agent.environments.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Deletes intents in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.intents.batchDelete({
            parent: "Test string",
        }, {
            intents: [
                {
                    action: "Test string",
                    defaultResponsePlatforms: [
                        "Test string"                    ],
                    displayName: "Test string",
                    events: [
                        "Test string"                    ],
                    followupIntentInfo: [
                        {
                            followupIntentName: "Test string",
                            parentFollowupIntentName: "Test string",
                        }                    ],
                    inputContextNames: [
                        "Test string"                    ],
                    isFallback: true,
                    messages: [
                        {
                            basicCard: {
                                buttons: [
                                    {
                                        openUriAction: {
                                            uri: "Test string",
                                        },
                                        title: "Test string",
                                    }                                ],
                                formattedText: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            browseCarouselCard: {
                                imageDisplayOptions: "Test string",
                                items: [
                                    {
                                        description: "Test string",
                                        footer: "Test string",
                                        image: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        openUriAction: {
                                            url: "Test string",
                                            urlTypeHint: "Test string",
                                        },
                                        title: "Test string",
                                    }                                ],
                            },
                            card: {
                                buttons: [
                                    {
                                        postback: "Test string",
                                        text: "Test string",
                                    }                                ],
                                imageUri: "Test string",
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            carouselSelect: {
                                items: [
                                    {
                                        description: "Test string",
                                        image: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        info: {
                                            key: "Test string",
                                            synonyms: [
                                                "Test string"                                            ],
                                        },
                                        title: "Test string",
                                    }                                ],
                            },
                            image: {
                                accessibilityText: "Test string",
                                imageUri: "Test string",
                            },
                            linkOutSuggestion: {
                                destinationName: "Test string",
                                uri: "Test string",
                            },
                            listSelect: {
                                items: [
                                    {
                                        description: "Test string",
                                        image: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        info: {
                                            key: "Test string",
                                            synonyms: [
                                                "Test string"                                            ],
                                        },
                                        title: "Test string",
                                    }                                ],
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            mediaContent: {
                                mediaObjects: [
                                    {
                                        contentUrl: "Test string",
                                        description: "Test string",
                                        icon: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        largeImage: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        name: "Test string",
                                    }                                ],
                                mediaType: "Test string",
                            },
                            payload: {
                                A: 42                            },
                            platform: "Test string",
                            quickReplies: {
                                quickReplies: [
                                    "Test string"                                ],
                                title: "Test string",
                            },
                            simpleResponses: {
                                simpleResponses: [
                                    {
                                        displayText: "Test string",
                                        ssml: "Test string",
                                        textToSpeech: "Test string",
                                    }                                ],
                            },
                            suggestions: {
                                suggestions: [
                                    {
                                        title: "Test string",
                                    }                                ],
                            },
                            tableCard: {
                                buttons: [
                                    {
                                        openUriAction: {
                                            uri: "Test string",
                                        },
                                        title: "Test string",
                                    }                                ],
                                columnProperties: [
                                    {
                                        header: "Test string",
                                        horizontalAlignment: "Test string",
                                    }                                ],
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                rows: [
                                    {
                                        cells: [
                                            {
                                                text: "Test string",
                                            }                                        ],
                                        dividerAfter: true,
                                    }                                ],
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            text: {
                                text: [
                                    "Test string"                                ],
                            },
                        }                    ],
                    mlDisabled: true,
                    name: "Test string",
                    outputContexts: [
                        {
                            lifespanCount: 42,
                            name: "Test string",
                            parameters: {
                                A: 42                            },
                        }                    ],
                    parameters: [
                        {
                            defaultValue: "Test string",
                            displayName: "Test string",
                            entityTypeDisplayName: "Test string",
                            isList: true,
                            mandatory: true,
                            name: "Test string",
                            prompts: [
                                "Test string"                            ],
                            value: "Test string",
                        }                    ],
                    parentFollowupIntentName: "Test string",
                    priority: 42,
                    resetContexts: true,
                    rootFollowupIntentName: "Test string",
                    trainingPhrases: [
                        {
                            name: "Test string",
                            parts: [
                                {
                                    alias: "Test string",
                                    entityType: "Test string",
                                    text: "Test string",
                                    userDefined: true,
                                }                            ],
                            timesAddedCount: 42,
                            type: "Test string",
                        }                    ],
                    webhookState: "Test string",
                }            ],
        });
        /** Updates/Creates multiple intents in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.intents.batchUpdate({
            parent: "Test string",
        }, {
            intentBatchInline: {
                intents: [
                    {
                        action: "Test string",
                        defaultResponsePlatforms: [
                            "Test string"                        ],
                        displayName: "Test string",
                        events: [
                            "Test string"                        ],
                        followupIntentInfo: [
                            {
                                followupIntentName: "Test string",
                                parentFollowupIntentName: "Test string",
                            }                        ],
                        inputContextNames: [
                            "Test string"                        ],
                        isFallback: true,
                        messages: [
                            {
                                basicCard: {
                                    buttons: [
                                        {
                                            openUriAction: {
                                                uri: "Test string",
                                            },
                                            title: "Test string",
                                        }                                    ],
                                    formattedText: "Test string",
                                    image: {
                                        accessibilityText: "Test string",
                                        imageUri: "Test string",
                                    },
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                browseCarouselCard: {
                                    imageDisplayOptions: "Test string",
                                    items: [
                                        {
                                            description: "Test string",
                                            footer: "Test string",
                                            image: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            openUriAction: {
                                                url: "Test string",
                                                urlTypeHint: "Test string",
                                            },
                                            title: "Test string",
                                        }                                    ],
                                },
                                card: {
                                    buttons: [
                                        {
                                            postback: "Test string",
                                            text: "Test string",
                                        }                                    ],
                                    imageUri: "Test string",
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                carouselSelect: {
                                    items: [
                                        {
                                            description: "Test string",
                                            image: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            info: {
                                                key: "Test string",
                                                synonyms: [
                                                    "Test string"                                                ],
                                            },
                                            title: "Test string",
                                        }                                    ],
                                },
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                linkOutSuggestion: {
                                    destinationName: "Test string",
                                    uri: "Test string",
                                },
                                listSelect: {
                                    items: [
                                        {
                                            description: "Test string",
                                            image: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            info: {
                                                key: "Test string",
                                                synonyms: [
                                                    "Test string"                                                ],
                                            },
                                            title: "Test string",
                                        }                                    ],
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                mediaContent: {
                                    mediaObjects: [
                                        {
                                            contentUrl: "Test string",
                                            description: "Test string",
                                            icon: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            largeImage: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            name: "Test string",
                                        }                                    ],
                                    mediaType: "Test string",
                                },
                                payload: {
                                    A: 42                                },
                                platform: "Test string",
                                quickReplies: {
                                    quickReplies: [
                                        "Test string"                                    ],
                                    title: "Test string",
                                },
                                simpleResponses: {
                                    simpleResponses: [
                                        {
                                            displayText: "Test string",
                                            ssml: "Test string",
                                            textToSpeech: "Test string",
                                        }                                    ],
                                },
                                suggestions: {
                                    suggestions: [
                                        {
                                            title: "Test string",
                                        }                                    ],
                                },
                                tableCard: {
                                    buttons: [
                                        {
                                            openUriAction: {
                                                uri: "Test string",
                                            },
                                            title: "Test string",
                                        }                                    ],
                                    columnProperties: [
                                        {
                                            header: "Test string",
                                            horizontalAlignment: "Test string",
                                        }                                    ],
                                    image: {
                                        accessibilityText: "Test string",
                                        imageUri: "Test string",
                                    },
                                    rows: [
                                        {
                                            cells: [
                                                {
                                                    text: "Test string",
                                                }                                            ],
                                            dividerAfter: true,
                                        }                                    ],
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                text: {
                                    text: [
                                        "Test string"                                    ],
                                },
                            }                        ],
                        mlDisabled: true,
                        name: "Test string",
                        outputContexts: [
                            {
                                lifespanCount: 42,
                                name: "Test string",
                                parameters: {
                                    A: 42                                },
                            }                        ],
                        parameters: [
                            {
                                defaultValue: "Test string",
                                displayName: "Test string",
                                entityTypeDisplayName: "Test string",
                                isList: true,
                                mandatory: true,
                                name: "Test string",
                                prompts: [
                                    "Test string"                                ],
                                value: "Test string",
                            }                        ],
                        parentFollowupIntentName: "Test string",
                        priority: 42,
                        resetContexts: true,
                        rootFollowupIntentName: "Test string",
                        trainingPhrases: [
                            {
                                name: "Test string",
                                parts: [
                                    {
                                        alias: "Test string",
                                        entityType: "Test string",
                                        text: "Test string",
                                        userDefined: true,
                                    }                                ],
                                timesAddedCount: 42,
                                type: "Test string",
                            }                        ],
                        webhookState: "Test string",
                    }                ],
            },
            intentBatchUri: "Test string",
            intentView: "Test string",
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Creates an intent in the specified agent. */
        await gapi.client.dialogflow.projects.agent.intents.create({
            intentView: "Test string",
            languageCode: "Test string",
            parent: "Test string",
        }, {
            action: "Test string",
            defaultResponsePlatforms: [
                "Test string"            ],
            displayName: "Test string",
            events: [
                "Test string"            ],
            followupIntentInfo: [
                {
                    followupIntentName: "Test string",
                    parentFollowupIntentName: "Test string",
                }            ],
            inputContextNames: [
                "Test string"            ],
            isFallback: true,
            messages: [
                {
                    basicCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        formattedText: "Test string",
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    browseCarouselCard: {
                        imageDisplayOptions: "Test string",
                        items: [
                            {
                                description: "Test string",
                                footer: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                openUriAction: {
                                    url: "Test string",
                                    urlTypeHint: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                    },
                    card: {
                        buttons: [
                            {
                                postback: "Test string",
                                text: "Test string",
                            }                        ],
                        imageUri: "Test string",
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    carouselSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                    },
                    image: {
                        accessibilityText: "Test string",
                        imageUri: "Test string",
                    },
                    linkOutSuggestion: {
                        destinationName: "Test string",
                        uri: "Test string",
                    },
                    listSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    mediaContent: {
                        mediaObjects: [
                            {
                                contentUrl: "Test string",
                                description: "Test string",
                                icon: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                largeImage: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                name: "Test string",
                            }                        ],
                        mediaType: "Test string",
                    },
                    payload: {
                        A: 42                    },
                    platform: "Test string",
                    quickReplies: {
                        quickReplies: [
                            "Test string"                        ],
                        title: "Test string",
                    },
                    simpleResponses: {
                        simpleResponses: [
                            {
                                displayText: "Test string",
                                ssml: "Test string",
                                textToSpeech: "Test string",
                            }                        ],
                    },
                    suggestions: {
                        suggestions: [
                            {
                                title: "Test string",
                            }                        ],
                    },
                    tableCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        columnProperties: [
                            {
                                header: "Test string",
                                horizontalAlignment: "Test string",
                            }                        ],
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        rows: [
                            {
                                cells: [
                                    {
                                        text: "Test string",
                                    }                                ],
                                dividerAfter: true,
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    text: {
                        text: [
                            "Test string"                        ],
                    },
                }            ],
            mlDisabled: true,
            name: "Test string",
            outputContexts: [
                {
                    lifespanCount: 42,
                    name: "Test string",
                    parameters: {
                        A: 42                    },
                }            ],
            parameters: [
                {
                    defaultValue: "Test string",
                    displayName: "Test string",
                    entityTypeDisplayName: "Test string",
                    isList: true,
                    mandatory: true,
                    name: "Test string",
                    prompts: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            parentFollowupIntentName: "Test string",
            priority: 42,
            resetContexts: true,
            rootFollowupIntentName: "Test string",
            trainingPhrases: [
                {
                    name: "Test string",
                    parts: [
                        {
                            alias: "Test string",
                            entityType: "Test string",
                            text: "Test string",
                            userDefined: true,
                        }                    ],
                    timesAddedCount: 42,
                    type: "Test string",
                }            ],
            webhookState: "Test string",
        });
        /** Deletes the specified intent and its direct or indirect followup intents. */
        await gapi.client.dialogflow.projects.agent.intents.delete({
            name: "Test string",
        });
        /** Retrieves the specified intent. */
        await gapi.client.dialogflow.projects.agent.intents.get({
            intentView: "Test string",
            languageCode: "Test string",
            name: "Test string",
        });
        /** Returns the list of all intents in the specified agent. */
        await gapi.client.dialogflow.projects.agent.intents.list({
            intentView: "Test string",
            languageCode: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified intent. */
        await gapi.client.dialogflow.projects.agent.intents.patch({
            intentView: "Test string",
            languageCode: "Test string",
            name: "Test string",
            updateMask: "Test string",
        }, {
            action: "Test string",
            defaultResponsePlatforms: [
                "Test string"            ],
            displayName: "Test string",
            events: [
                "Test string"            ],
            followupIntentInfo: [
                {
                    followupIntentName: "Test string",
                    parentFollowupIntentName: "Test string",
                }            ],
            inputContextNames: [
                "Test string"            ],
            isFallback: true,
            messages: [
                {
                    basicCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        formattedText: "Test string",
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    browseCarouselCard: {
                        imageDisplayOptions: "Test string",
                        items: [
                            {
                                description: "Test string",
                                footer: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                openUriAction: {
                                    url: "Test string",
                                    urlTypeHint: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                    },
                    card: {
                        buttons: [
                            {
                                postback: "Test string",
                                text: "Test string",
                            }                        ],
                        imageUri: "Test string",
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    carouselSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                    },
                    image: {
                        accessibilityText: "Test string",
                        imageUri: "Test string",
                    },
                    linkOutSuggestion: {
                        destinationName: "Test string",
                        uri: "Test string",
                    },
                    listSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    mediaContent: {
                        mediaObjects: [
                            {
                                contentUrl: "Test string",
                                description: "Test string",
                                icon: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                largeImage: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                name: "Test string",
                            }                        ],
                        mediaType: "Test string",
                    },
                    payload: {
                        A: 42                    },
                    platform: "Test string",
                    quickReplies: {
                        quickReplies: [
                            "Test string"                        ],
                        title: "Test string",
                    },
                    simpleResponses: {
                        simpleResponses: [
                            {
                                displayText: "Test string",
                                ssml: "Test string",
                                textToSpeech: "Test string",
                            }                        ],
                    },
                    suggestions: {
                        suggestions: [
                            {
                                title: "Test string",
                            }                        ],
                    },
                    tableCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        columnProperties: [
                            {
                                header: "Test string",
                                horizontalAlignment: "Test string",
                            }                        ],
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        rows: [
                            {
                                cells: [
                                    {
                                        text: "Test string",
                                    }                                ],
                                dividerAfter: true,
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    text: {
                        text: [
                            "Test string"                        ],
                    },
                }            ],
            mlDisabled: true,
            name: "Test string",
            outputContexts: [
                {
                    lifespanCount: 42,
                    name: "Test string",
                    parameters: {
                        A: 42                    },
                }            ],
            parameters: [
                {
                    defaultValue: "Test string",
                    displayName: "Test string",
                    entityTypeDisplayName: "Test string",
                    isList: true,
                    mandatory: true,
                    name: "Test string",
                    prompts: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            parentFollowupIntentName: "Test string",
            priority: 42,
            resetContexts: true,
            rootFollowupIntentName: "Test string",
            trainingPhrases: [
                {
                    name: "Test string",
                    parts: [
                        {
                            alias: "Test string",
                            entityType: "Test string",
                            text: "Test string",
                            userDefined: true,
                        }                    ],
                    timesAddedCount: 42,
                    type: "Test string",
                }            ],
            webhookState: "Test string",
        });
        /** Deletes all active contexts in the specified session. */
        await gapi.client.dialogflow.projects.agent.sessions.deleteContexts({
            parent: "Test string",
        });
        /** Creates a context. If the specified context already exists, overrides the context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.create({
            parent: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /** Deletes the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.delete({
            name: "Test string",
        });
        /** Retrieves the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.get({
            name: "Test string",
        });
        /** Returns the list of all contexts in the specified session. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /**
         * Creates a session entity type. If the specified session entity type already exists, overrides the session entity type. This method doesn't work with Google Assistant integration.
         * Contact Dialogflow support if you need to use session entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.create({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /**
         * Deletes the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.delete({
            name: "Test string",
        });
        /**
         * Retrieves the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.get({
            name: "Test string",
        });
        /**
         * Returns the list of all session entity types in the specified session. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session
         * entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Updates the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /**
         * Processes a natural language query and returns structured, actionable data as a result. This method is not idempotent, because it may cause contexts and session entity types to be
         * updated, which in turn might affect results of future queries. Note: Always use agent versions for production traffic. See [Versions and
         * environments](https://cloud.google.com/dialogflow/es/docs/agents-versions).
         */
        await gapi.client.dialogflow.projects.agent.sessions.detectIntent({
            session: "Test string",
        }, {
            inputAudio: "Test string",
            outputAudioConfig: {
                audioEncoding: "Test string",
                sampleRateHertz: 42,
                synthesizeSpeechConfig: {
                    effectsProfileId: [
                        "Test string"                    ],
                    pitch: 42,
                    speakingRate: 42,
                    voice: {
                        name: "Test string",
                        ssmlGender: "Test string",
                    },
                    volumeGainDb: 42,
                },
            },
            outputAudioConfigMask: "Test string",
            queryInput: {
                audioConfig: {
                    audioEncoding: "Test string",
                    enableWordInfo: true,
                    languageCode: "Test string",
                    model: "Test string",
                    modelVariant: "Test string",
                    phraseHints: [
                        "Test string"                    ],
                    sampleRateHertz: 42,
                    singleUtterance: true,
                    speechContexts: [
                        {
                            boost: 42,
                            phrases: [
                                "Test string"                            ],
                        }                    ],
                },
                event: {
                    languageCode: "Test string",
                    name: "Test string",
                    parameters: {
                        A: 42                    },
                },
                text: {
                    languageCode: "Test string",
                    text: "Test string",
                },
            },
            queryParams: {
                contexts: [
                    {
                        lifespanCount: 42,
                        name: "Test string",
                        parameters: {
                            A: 42                        },
                    }                ],
                geoLocation: {
                    latitude: 42,
                    longitude: 42,
                },
                payload: {
                    A: 42                },
                resetContexts: true,
                sentimentAnalysisRequestConfig: {
                    analyzeQueryTextSentiment: true,
                },
                sessionEntityTypes: [
                    {
                        entities: [
                            {
                                synonyms: [
                                    "Test string"                                ],
                                value: "Test string",
                            }                        ],
                        entityOverrideMode: "Test string",
                        name: "Test string",
                    }                ],
                timeZone: "Test string",
                webhookHeaders: {
                    A: "Test string"                },
            },
        });
        /** Creates a context. If the specified context already exists, overrides the context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.create({
            parent: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /** Deletes the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.delete({
            name: "Test string",
        });
        /** Retrieves the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.get({
            name: "Test string",
        });
        /** Returns the list of all contexts in the specified session. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /**
         * Creates a session entity type. If the specified session entity type already exists, overrides the session entity type. This method doesn't work with Google Assistant integration.
         * Contact Dialogflow support if you need to use session entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.create({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /**
         * Deletes the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.delete({
            name: "Test string",
        });
        /**
         * Retrieves the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.get({
            name: "Test string",
        });
        /**
         * Returns the list of all session entity types in the specified session. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session
         * entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Updates the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /** Updates the fulfillment. */
        await gapi.client.dialogflow.projects.agent.updateFulfillment({
            name: "Test string",
            updateMask: "Test string",
        }, {
            displayName: "Test string",
            enabled: true,
            features: [
                {
                    type: "Test string",
                }            ],
            genericWebService: {
                isCloudFunction: true,
                password: "Test string",
                requestHeaders: {
                    A: "Test string"                },
                uri: "Test string",
                username: "Test string",
            },
            name: "Test string",
        });
        /** Deletes entity types in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.batchDelete({
            parent: "Test string",
        }, {
            entityTypeNames: [
                "Test string"            ],
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Updates/Creates multiple entity types in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.batchUpdate({
            parent: "Test string",
        }, {
            entityTypeBatchInline: {
                entityTypes: [
                    {
                        autoExpansionMode: "Test string",
                        displayName: "Test string",
                        enableFuzzyExtraction: true,
                        entities: [
                            {
                                synonyms: [
                                    "Test string"                                ],
                                value: "Test string",
                            }                        ],
                        kind: "Test string",
                        name: "Test string",
                    }                ],
            },
            entityTypeBatchUri: "Test string",
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Creates an entity type in the specified agent. */
        await gapi.client.dialogflow.projects.agent.entityTypes.create({
            languageCode: "Test string",
            parent: "Test string",
        }, {
            autoExpansionMode: "Test string",
            displayName: "Test string",
            enableFuzzyExtraction: true,
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            kind: "Test string",
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Deletes the specified entity type. */
        await gapi.client.dialogflow.projects.agent.entityTypes.delete({
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Retrieves the specified entity type. */
        await gapi.client.dialogflow.projects.agent.entityTypes.get({
            languageCode: "Test string",
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Returns the list of all entity types in the specified agent. */
        await gapi.client.dialogflow.projects.agent.entityTypes.list({
            languageCode: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Updates the specified entity type. */
        await gapi.client.dialogflow.projects.agent.entityTypes.patch({
            languageCode: "Test string",
            name: "Test string",
            updateMask: "Test string",
        }, {
            autoExpansionMode: "Test string",
            displayName: "Test string",
            enableFuzzyExtraction: true,
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            kind: "Test string",
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Returns the list of all non-draft environments of the specified agent. */
        await gapi.client.dialogflow.projects.agent.environments.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Deletes intents in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.intents.batchDelete({
            parent: "Test string",
        }, {
            intents: [
                {
                    action: "Test string",
                    defaultResponsePlatforms: [
                        "Test string"                    ],
                    displayName: "Test string",
                    events: [
                        "Test string"                    ],
                    followupIntentInfo: [
                        {
                            followupIntentName: "Test string",
                            parentFollowupIntentName: "Test string",
                        }                    ],
                    inputContextNames: [
                        "Test string"                    ],
                    isFallback: true,
                    messages: [
                        {
                            basicCard: {
                                buttons: [
                                    {
                                        openUriAction: {
                                            uri: "Test string",
                                        },
                                        title: "Test string",
                                    }                                ],
                                formattedText: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            browseCarouselCard: {
                                imageDisplayOptions: "Test string",
                                items: [
                                    {
                                        description: "Test string",
                                        footer: "Test string",
                                        image: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        openUriAction: {
                                            url: "Test string",
                                            urlTypeHint: "Test string",
                                        },
                                        title: "Test string",
                                    }                                ],
                            },
                            card: {
                                buttons: [
                                    {
                                        postback: "Test string",
                                        text: "Test string",
                                    }                                ],
                                imageUri: "Test string",
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            carouselSelect: {
                                items: [
                                    {
                                        description: "Test string",
                                        image: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        info: {
                                            key: "Test string",
                                            synonyms: [
                                                "Test string"                                            ],
                                        },
                                        title: "Test string",
                                    }                                ],
                            },
                            image: {
                                accessibilityText: "Test string",
                                imageUri: "Test string",
                            },
                            linkOutSuggestion: {
                                destinationName: "Test string",
                                uri: "Test string",
                            },
                            listSelect: {
                                items: [
                                    {
                                        description: "Test string",
                                        image: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        info: {
                                            key: "Test string",
                                            synonyms: [
                                                "Test string"                                            ],
                                        },
                                        title: "Test string",
                                    }                                ],
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            mediaContent: {
                                mediaObjects: [
                                    {
                                        contentUrl: "Test string",
                                        description: "Test string",
                                        icon: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        largeImage: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        name: "Test string",
                                    }                                ],
                                mediaType: "Test string",
                            },
                            payload: {
                                A: 42                            },
                            platform: "Test string",
                            quickReplies: {
                                quickReplies: [
                                    "Test string"                                ],
                                title: "Test string",
                            },
                            simpleResponses: {
                                simpleResponses: [
                                    {
                                        displayText: "Test string",
                                        ssml: "Test string",
                                        textToSpeech: "Test string",
                                    }                                ],
                            },
                            suggestions: {
                                suggestions: [
                                    {
                                        title: "Test string",
                                    }                                ],
                            },
                            tableCard: {
                                buttons: [
                                    {
                                        openUriAction: {
                                            uri: "Test string",
                                        },
                                        title: "Test string",
                                    }                                ],
                                columnProperties: [
                                    {
                                        header: "Test string",
                                        horizontalAlignment: "Test string",
                                    }                                ],
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                rows: [
                                    {
                                        cells: [
                                            {
                                                text: "Test string",
                                            }                                        ],
                                        dividerAfter: true,
                                    }                                ],
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            text: {
                                text: [
                                    "Test string"                                ],
                            },
                        }                    ],
                    mlDisabled: true,
                    name: "Test string",
                    outputContexts: [
                        {
                            lifespanCount: 42,
                            name: "Test string",
                            parameters: {
                                A: 42                            },
                        }                    ],
                    parameters: [
                        {
                            defaultValue: "Test string",
                            displayName: "Test string",
                            entityTypeDisplayName: "Test string",
                            isList: true,
                            mandatory: true,
                            name: "Test string",
                            prompts: [
                                "Test string"                            ],
                            value: "Test string",
                        }                    ],
                    parentFollowupIntentName: "Test string",
                    priority: 42,
                    resetContexts: true,
                    rootFollowupIntentName: "Test string",
                    trainingPhrases: [
                        {
                            name: "Test string",
                            parts: [
                                {
                                    alias: "Test string",
                                    entityType: "Test string",
                                    text: "Test string",
                                    userDefined: true,
                                }                            ],
                            timesAddedCount: 42,
                            type: "Test string",
                        }                    ],
                    webhookState: "Test string",
                }            ],
        });
        /** Updates/Creates multiple intents in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.intents.batchUpdate({
            parent: "Test string",
        }, {
            intentBatchInline: {
                intents: [
                    {
                        action: "Test string",
                        defaultResponsePlatforms: [
                            "Test string"                        ],
                        displayName: "Test string",
                        events: [
                            "Test string"                        ],
                        followupIntentInfo: [
                            {
                                followupIntentName: "Test string",
                                parentFollowupIntentName: "Test string",
                            }                        ],
                        inputContextNames: [
                            "Test string"                        ],
                        isFallback: true,
                        messages: [
                            {
                                basicCard: {
                                    buttons: [
                                        {
                                            openUriAction: {
                                                uri: "Test string",
                                            },
                                            title: "Test string",
                                        }                                    ],
                                    formattedText: "Test string",
                                    image: {
                                        accessibilityText: "Test string",
                                        imageUri: "Test string",
                                    },
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                browseCarouselCard: {
                                    imageDisplayOptions: "Test string",
                                    items: [
                                        {
                                            description: "Test string",
                                            footer: "Test string",
                                            image: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            openUriAction: {
                                                url: "Test string",
                                                urlTypeHint: "Test string",
                                            },
                                            title: "Test string",
                                        }                                    ],
                                },
                                card: {
                                    buttons: [
                                        {
                                            postback: "Test string",
                                            text: "Test string",
                                        }                                    ],
                                    imageUri: "Test string",
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                carouselSelect: {
                                    items: [
                                        {
                                            description: "Test string",
                                            image: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            info: {
                                                key: "Test string",
                                                synonyms: [
                                                    "Test string"                                                ],
                                            },
                                            title: "Test string",
                                        }                                    ],
                                },
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                linkOutSuggestion: {
                                    destinationName: "Test string",
                                    uri: "Test string",
                                },
                                listSelect: {
                                    items: [
                                        {
                                            description: "Test string",
                                            image: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            info: {
                                                key: "Test string",
                                                synonyms: [
                                                    "Test string"                                                ],
                                            },
                                            title: "Test string",
                                        }                                    ],
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                mediaContent: {
                                    mediaObjects: [
                                        {
                                            contentUrl: "Test string",
                                            description: "Test string",
                                            icon: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            largeImage: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            name: "Test string",
                                        }                                    ],
                                    mediaType: "Test string",
                                },
                                payload: {
                                    A: 42                                },
                                platform: "Test string",
                                quickReplies: {
                                    quickReplies: [
                                        "Test string"                                    ],
                                    title: "Test string",
                                },
                                simpleResponses: {
                                    simpleResponses: [
                                        {
                                            displayText: "Test string",
                                            ssml: "Test string",
                                            textToSpeech: "Test string",
                                        }                                    ],
                                },
                                suggestions: {
                                    suggestions: [
                                        {
                                            title: "Test string",
                                        }                                    ],
                                },
                                tableCard: {
                                    buttons: [
                                        {
                                            openUriAction: {
                                                uri: "Test string",
                                            },
                                            title: "Test string",
                                        }                                    ],
                                    columnProperties: [
                                        {
                                            header: "Test string",
                                            horizontalAlignment: "Test string",
                                        }                                    ],
                                    image: {
                                        accessibilityText: "Test string",
                                        imageUri: "Test string",
                                    },
                                    rows: [
                                        {
                                            cells: [
                                                {
                                                    text: "Test string",
                                                }                                            ],
                                            dividerAfter: true,
                                        }                                    ],
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                text: {
                                    text: [
                                        "Test string"                                    ],
                                },
                            }                        ],
                        mlDisabled: true,
                        name: "Test string",
                        outputContexts: [
                            {
                                lifespanCount: 42,
                                name: "Test string",
                                parameters: {
                                    A: 42                                },
                            }                        ],
                        parameters: [
                            {
                                defaultValue: "Test string",
                                displayName: "Test string",
                                entityTypeDisplayName: "Test string",
                                isList: true,
                                mandatory: true,
                                name: "Test string",
                                prompts: [
                                    "Test string"                                ],
                                value: "Test string",
                            }                        ],
                        parentFollowupIntentName: "Test string",
                        priority: 42,
                        resetContexts: true,
                        rootFollowupIntentName: "Test string",
                        trainingPhrases: [
                            {
                                name: "Test string",
                                parts: [
                                    {
                                        alias: "Test string",
                                        entityType: "Test string",
                                        text: "Test string",
                                        userDefined: true,
                                    }                                ],
                                timesAddedCount: 42,
                                type: "Test string",
                            }                        ],
                        webhookState: "Test string",
                    }                ],
            },
            intentBatchUri: "Test string",
            intentView: "Test string",
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Creates an intent in the specified agent. */
        await gapi.client.dialogflow.projects.agent.intents.create({
            intentView: "Test string",
            languageCode: "Test string",
            parent: "Test string",
        }, {
            action: "Test string",
            defaultResponsePlatforms: [
                "Test string"            ],
            displayName: "Test string",
            events: [
                "Test string"            ],
            followupIntentInfo: [
                {
                    followupIntentName: "Test string",
                    parentFollowupIntentName: "Test string",
                }            ],
            inputContextNames: [
                "Test string"            ],
            isFallback: true,
            messages: [
                {
                    basicCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        formattedText: "Test string",
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    browseCarouselCard: {
                        imageDisplayOptions: "Test string",
                        items: [
                            {
                                description: "Test string",
                                footer: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                openUriAction: {
                                    url: "Test string",
                                    urlTypeHint: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                    },
                    card: {
                        buttons: [
                            {
                                postback: "Test string",
                                text: "Test string",
                            }                        ],
                        imageUri: "Test string",
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    carouselSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                    },
                    image: {
                        accessibilityText: "Test string",
                        imageUri: "Test string",
                    },
                    linkOutSuggestion: {
                        destinationName: "Test string",
                        uri: "Test string",
                    },
                    listSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    mediaContent: {
                        mediaObjects: [
                            {
                                contentUrl: "Test string",
                                description: "Test string",
                                icon: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                largeImage: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                name: "Test string",
                            }                        ],
                        mediaType: "Test string",
                    },
                    payload: {
                        A: 42                    },
                    platform: "Test string",
                    quickReplies: {
                        quickReplies: [
                            "Test string"                        ],
                        title: "Test string",
                    },
                    simpleResponses: {
                        simpleResponses: [
                            {
                                displayText: "Test string",
                                ssml: "Test string",
                                textToSpeech: "Test string",
                            }                        ],
                    },
                    suggestions: {
                        suggestions: [
                            {
                                title: "Test string",
                            }                        ],
                    },
                    tableCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        columnProperties: [
                            {
                                header: "Test string",
                                horizontalAlignment: "Test string",
                            }                        ],
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        rows: [
                            {
                                cells: [
                                    {
                                        text: "Test string",
                                    }                                ],
                                dividerAfter: true,
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    text: {
                        text: [
                            "Test string"                        ],
                    },
                }            ],
            mlDisabled: true,
            name: "Test string",
            outputContexts: [
                {
                    lifespanCount: 42,
                    name: "Test string",
                    parameters: {
                        A: 42                    },
                }            ],
            parameters: [
                {
                    defaultValue: "Test string",
                    displayName: "Test string",
                    entityTypeDisplayName: "Test string",
                    isList: true,
                    mandatory: true,
                    name: "Test string",
                    prompts: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            parentFollowupIntentName: "Test string",
            priority: 42,
            resetContexts: true,
            rootFollowupIntentName: "Test string",
            trainingPhrases: [
                {
                    name: "Test string",
                    parts: [
                        {
                            alias: "Test string",
                            entityType: "Test string",
                            text: "Test string",
                            userDefined: true,
                        }                    ],
                    timesAddedCount: 42,
                    type: "Test string",
                }            ],
            webhookState: "Test string",
        });
        /** Deletes the specified intent and its direct or indirect followup intents. */
        await gapi.client.dialogflow.projects.agent.intents.delete({
            name: "Test string",
        });
        /** Retrieves the specified intent. */
        await gapi.client.dialogflow.projects.agent.intents.get({
            intentView: "Test string",
            languageCode: "Test string",
            name: "Test string",
        });
        /** Returns the list of all intents in the specified agent. */
        await gapi.client.dialogflow.projects.agent.intents.list({
            intentView: "Test string",
            languageCode: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified intent. */
        await gapi.client.dialogflow.projects.agent.intents.patch({
            intentView: "Test string",
            languageCode: "Test string",
            name: "Test string",
            updateMask: "Test string",
        }, {
            action: "Test string",
            defaultResponsePlatforms: [
                "Test string"            ],
            displayName: "Test string",
            events: [
                "Test string"            ],
            followupIntentInfo: [
                {
                    followupIntentName: "Test string",
                    parentFollowupIntentName: "Test string",
                }            ],
            inputContextNames: [
                "Test string"            ],
            isFallback: true,
            messages: [
                {
                    basicCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        formattedText: "Test string",
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    browseCarouselCard: {
                        imageDisplayOptions: "Test string",
                        items: [
                            {
                                description: "Test string",
                                footer: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                openUriAction: {
                                    url: "Test string",
                                    urlTypeHint: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                    },
                    card: {
                        buttons: [
                            {
                                postback: "Test string",
                                text: "Test string",
                            }                        ],
                        imageUri: "Test string",
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    carouselSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                    },
                    image: {
                        accessibilityText: "Test string",
                        imageUri: "Test string",
                    },
                    linkOutSuggestion: {
                        destinationName: "Test string",
                        uri: "Test string",
                    },
                    listSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    mediaContent: {
                        mediaObjects: [
                            {
                                contentUrl: "Test string",
                                description: "Test string",
                                icon: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                largeImage: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                name: "Test string",
                            }                        ],
                        mediaType: "Test string",
                    },
                    payload: {
                        A: 42                    },
                    platform: "Test string",
                    quickReplies: {
                        quickReplies: [
                            "Test string"                        ],
                        title: "Test string",
                    },
                    simpleResponses: {
                        simpleResponses: [
                            {
                                displayText: "Test string",
                                ssml: "Test string",
                                textToSpeech: "Test string",
                            }                        ],
                    },
                    suggestions: {
                        suggestions: [
                            {
                                title: "Test string",
                            }                        ],
                    },
                    tableCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        columnProperties: [
                            {
                                header: "Test string",
                                horizontalAlignment: "Test string",
                            }                        ],
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        rows: [
                            {
                                cells: [
                                    {
                                        text: "Test string",
                                    }                                ],
                                dividerAfter: true,
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    text: {
                        text: [
                            "Test string"                        ],
                    },
                }            ],
            mlDisabled: true,
            name: "Test string",
            outputContexts: [
                {
                    lifespanCount: 42,
                    name: "Test string",
                    parameters: {
                        A: 42                    },
                }            ],
            parameters: [
                {
                    defaultValue: "Test string",
                    displayName: "Test string",
                    entityTypeDisplayName: "Test string",
                    isList: true,
                    mandatory: true,
                    name: "Test string",
                    prompts: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            parentFollowupIntentName: "Test string",
            priority: 42,
            resetContexts: true,
            rootFollowupIntentName: "Test string",
            trainingPhrases: [
                {
                    name: "Test string",
                    parts: [
                        {
                            alias: "Test string",
                            entityType: "Test string",
                            text: "Test string",
                            userDefined: true,
                        }                    ],
                    timesAddedCount: 42,
                    type: "Test string",
                }            ],
            webhookState: "Test string",
        });
        /** Deletes all active contexts in the specified session. */
        await gapi.client.dialogflow.projects.agent.sessions.deleteContexts({
            parent: "Test string",
        });
        /** Creates a context. If the specified context already exists, overrides the context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.create({
            parent: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /** Deletes the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.delete({
            name: "Test string",
        });
        /** Retrieves the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.get({
            name: "Test string",
        });
        /** Returns the list of all contexts in the specified session. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /**
         * Creates a session entity type. If the specified session entity type already exists, overrides the session entity type. This method doesn't work with Google Assistant integration.
         * Contact Dialogflow support if you need to use session entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.create({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /**
         * Deletes the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.delete({
            name: "Test string",
        });
        /**
         * Retrieves the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.get({
            name: "Test string",
        });
        /**
         * Returns the list of all session entity types in the specified session. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session
         * entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Updates the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /**
         * Processes a natural language query and returns structured, actionable data as a result. This method is not idempotent, because it may cause contexts and session entity types to be
         * updated, which in turn might affect results of future queries. Note: Always use agent versions for production traffic. See [Versions and
         * environments](https://cloud.google.com/dialogflow/es/docs/agents-versions).
         */
        await gapi.client.dialogflow.projects.agent.sessions.detectIntent({
            session: "Test string",
        }, {
            inputAudio: "Test string",
            outputAudioConfig: {
                audioEncoding: "Test string",
                sampleRateHertz: 42,
                synthesizeSpeechConfig: {
                    effectsProfileId: [
                        "Test string"                    ],
                    pitch: 42,
                    speakingRate: 42,
                    voice: {
                        name: "Test string",
                        ssmlGender: "Test string",
                    },
                    volumeGainDb: 42,
                },
            },
            outputAudioConfigMask: "Test string",
            queryInput: {
                audioConfig: {
                    audioEncoding: "Test string",
                    enableWordInfo: true,
                    languageCode: "Test string",
                    model: "Test string",
                    modelVariant: "Test string",
                    phraseHints: [
                        "Test string"                    ],
                    sampleRateHertz: 42,
                    singleUtterance: true,
                    speechContexts: [
                        {
                            boost: 42,
                            phrases: [
                                "Test string"                            ],
                        }                    ],
                },
                event: {
                    languageCode: "Test string",
                    name: "Test string",
                    parameters: {
                        A: 42                    },
                },
                text: {
                    languageCode: "Test string",
                    text: "Test string",
                },
            },
            queryParams: {
                contexts: [
                    {
                        lifespanCount: 42,
                        name: "Test string",
                        parameters: {
                            A: 42                        },
                    }                ],
                geoLocation: {
                    latitude: 42,
                    longitude: 42,
                },
                payload: {
                    A: 42                },
                resetContexts: true,
                sentimentAnalysisRequestConfig: {
                    analyzeQueryTextSentiment: true,
                },
                sessionEntityTypes: [
                    {
                        entities: [
                            {
                                synonyms: [
                                    "Test string"                                ],
                                value: "Test string",
                            }                        ],
                        entityOverrideMode: "Test string",
                        name: "Test string",
                    }                ],
                timeZone: "Test string",
                webhookHeaders: {
                    A: "Test string"                },
            },
        });
        /** Creates a context. If the specified context already exists, overrides the context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.create({
            parent: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /** Deletes the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.delete({
            name: "Test string",
        });
        /** Retrieves the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.get({
            name: "Test string",
        });
        /** Returns the list of all contexts in the specified session. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /**
         * Creates a session entity type. If the specified session entity type already exists, overrides the session entity type. This method doesn't work with Google Assistant integration.
         * Contact Dialogflow support if you need to use session entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.create({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /**
         * Deletes the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.delete({
            name: "Test string",
        });
        /**
         * Retrieves the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.get({
            name: "Test string",
        });
        /**
         * Returns the list of all session entity types in the specified session. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session
         * entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Updates the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /**
         * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this
         * method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation
         * completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of
         * 1, corresponding to `Code.CANCELLED`.
         */
        await gapi.client.dialogflow.projects.operations.cancel({
            name: "Test string",
        });
        /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
        await gapi.client.dialogflow.projects.operations.get({
            name: "Test string",
        });
        /**
         * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to
         * override the binding to use different resource name schemes, such as `users/∗/operations`. To override the binding, API services can add a binding such as
         * `"/v1/{name=users/*}/operations"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must
         * ensure the name binding is the parent resource, without the operations collection id.
         */
        await gapi.client.dialogflow.projects.operations.list({
            filter: "Test string",
            name: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Retrieves the specified agent. */
        await gapi.client.dialogflow.projects.getAgent({
            parent: "Test string",
        });
        /** Exports the specified agent to a ZIP file. Operation */
        await gapi.client.dialogflow.projects.agent.export({
            parent: "Test string",
        }, {
            agentUri: "Test string",
        });
        /** Deletes entity types in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.batchDelete({
            parent: "Test string",
        }, {
            entityTypeNames: [
                "Test string"            ],
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Updates/Creates multiple entity types in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.batchUpdate({
            parent: "Test string",
        }, {
            entityTypeBatchInline: {
                entityTypes: [
                    {
                        autoExpansionMode: "Test string",
                        displayName: "Test string",
                        enableFuzzyExtraction: true,
                        entities: [
                            {
                                synonyms: [
                                    "Test string"                                ],
                                value: "Test string",
                            }                        ],
                        kind: "Test string",
                        name: "Test string",
                    }                ],
            },
            entityTypeBatchUri: "Test string",
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Creates an entity type in the specified agent. */
        await gapi.client.dialogflow.projects.agent.entityTypes.create({
            languageCode: "Test string",
            parent: "Test string",
        }, {
            autoExpansionMode: "Test string",
            displayName: "Test string",
            enableFuzzyExtraction: true,
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            kind: "Test string",
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Deletes the specified entity type. */
        await gapi.client.dialogflow.projects.agent.entityTypes.delete({
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Retrieves the specified entity type. */
        await gapi.client.dialogflow.projects.agent.entityTypes.get({
            languageCode: "Test string",
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Returns the list of all entity types in the specified agent. */
        await gapi.client.dialogflow.projects.agent.entityTypes.list({
            languageCode: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Updates the specified entity type. */
        await gapi.client.dialogflow.projects.agent.entityTypes.patch({
            languageCode: "Test string",
            name: "Test string",
            updateMask: "Test string",
        }, {
            autoExpansionMode: "Test string",
            displayName: "Test string",
            enableFuzzyExtraction: true,
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            kind: "Test string",
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Returns the list of all non-draft environments of the specified agent. */
        await gapi.client.dialogflow.projects.agent.environments.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Deletes intents in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.intents.batchDelete({
            parent: "Test string",
        }, {
            intents: [
                {
                    action: "Test string",
                    defaultResponsePlatforms: [
                        "Test string"                    ],
                    displayName: "Test string",
                    events: [
                        "Test string"                    ],
                    followupIntentInfo: [
                        {
                            followupIntentName: "Test string",
                            parentFollowupIntentName: "Test string",
                        }                    ],
                    inputContextNames: [
                        "Test string"                    ],
                    isFallback: true,
                    messages: [
                        {
                            basicCard: {
                                buttons: [
                                    {
                                        openUriAction: {
                                            uri: "Test string",
                                        },
                                        title: "Test string",
                                    }                                ],
                                formattedText: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            browseCarouselCard: {
                                imageDisplayOptions: "Test string",
                                items: [
                                    {
                                        description: "Test string",
                                        footer: "Test string",
                                        image: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        openUriAction: {
                                            url: "Test string",
                                            urlTypeHint: "Test string",
                                        },
                                        title: "Test string",
                                    }                                ],
                            },
                            card: {
                                buttons: [
                                    {
                                        postback: "Test string",
                                        text: "Test string",
                                    }                                ],
                                imageUri: "Test string",
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            carouselSelect: {
                                items: [
                                    {
                                        description: "Test string",
                                        image: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        info: {
                                            key: "Test string",
                                            synonyms: [
                                                "Test string"                                            ],
                                        },
                                        title: "Test string",
                                    }                                ],
                            },
                            image: {
                                accessibilityText: "Test string",
                                imageUri: "Test string",
                            },
                            linkOutSuggestion: {
                                destinationName: "Test string",
                                uri: "Test string",
                            },
                            listSelect: {
                                items: [
                                    {
                                        description: "Test string",
                                        image: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        info: {
                                            key: "Test string",
                                            synonyms: [
                                                "Test string"                                            ],
                                        },
                                        title: "Test string",
                                    }                                ],
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            mediaContent: {
                                mediaObjects: [
                                    {
                                        contentUrl: "Test string",
                                        description: "Test string",
                                        icon: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        largeImage: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        name: "Test string",
                                    }                                ],
                                mediaType: "Test string",
                            },
                            payload: {
                                A: 42                            },
                            platform: "Test string",
                            quickReplies: {
                                quickReplies: [
                                    "Test string"                                ],
                                title: "Test string",
                            },
                            simpleResponses: {
                                simpleResponses: [
                                    {
                                        displayText: "Test string",
                                        ssml: "Test string",
                                        textToSpeech: "Test string",
                                    }                                ],
                            },
                            suggestions: {
                                suggestions: [
                                    {
                                        title: "Test string",
                                    }                                ],
                            },
                            tableCard: {
                                buttons: [
                                    {
                                        openUriAction: {
                                            uri: "Test string",
                                        },
                                        title: "Test string",
                                    }                                ],
                                columnProperties: [
                                    {
                                        header: "Test string",
                                        horizontalAlignment: "Test string",
                                    }                                ],
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                rows: [
                                    {
                                        cells: [
                                            {
                                                text: "Test string",
                                            }                                        ],
                                        dividerAfter: true,
                                    }                                ],
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            text: {
                                text: [
                                    "Test string"                                ],
                            },
                        }                    ],
                    mlDisabled: true,
                    name: "Test string",
                    outputContexts: [
                        {
                            lifespanCount: 42,
                            name: "Test string",
                            parameters: {
                                A: 42                            },
                        }                    ],
                    parameters: [
                        {
                            defaultValue: "Test string",
                            displayName: "Test string",
                            entityTypeDisplayName: "Test string",
                            isList: true,
                            mandatory: true,
                            name: "Test string",
                            prompts: [
                                "Test string"                            ],
                            value: "Test string",
                        }                    ],
                    parentFollowupIntentName: "Test string",
                    priority: 42,
                    resetContexts: true,
                    rootFollowupIntentName: "Test string",
                    trainingPhrases: [
                        {
                            name: "Test string",
                            parts: [
                                {
                                    alias: "Test string",
                                    entityType: "Test string",
                                    text: "Test string",
                                    userDefined: true,
                                }                            ],
                            timesAddedCount: 42,
                            type: "Test string",
                        }                    ],
                    webhookState: "Test string",
                }            ],
        });
        /** Updates/Creates multiple intents in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.intents.batchUpdate({
            parent: "Test string",
        }, {
            intentBatchInline: {
                intents: [
                    {
                        action: "Test string",
                        defaultResponsePlatforms: [
                            "Test string"                        ],
                        displayName: "Test string",
                        events: [
                            "Test string"                        ],
                        followupIntentInfo: [
                            {
                                followupIntentName: "Test string",
                                parentFollowupIntentName: "Test string",
                            }                        ],
                        inputContextNames: [
                            "Test string"                        ],
                        isFallback: true,
                        messages: [
                            {
                                basicCard: {
                                    buttons: [
                                        {
                                            openUriAction: {
                                                uri: "Test string",
                                            },
                                            title: "Test string",
                                        }                                    ],
                                    formattedText: "Test string",
                                    image: {
                                        accessibilityText: "Test string",
                                        imageUri: "Test string",
                                    },
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                browseCarouselCard: {
                                    imageDisplayOptions: "Test string",
                                    items: [
                                        {
                                            description: "Test string",
                                            footer: "Test string",
                                            image: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            openUriAction: {
                                                url: "Test string",
                                                urlTypeHint: "Test string",
                                            },
                                            title: "Test string",
                                        }                                    ],
                                },
                                card: {
                                    buttons: [
                                        {
                                            postback: "Test string",
                                            text: "Test string",
                                        }                                    ],
                                    imageUri: "Test string",
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                carouselSelect: {
                                    items: [
                                        {
                                            description: "Test string",
                                            image: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            info: {
                                                key: "Test string",
                                                synonyms: [
                                                    "Test string"                                                ],
                                            },
                                            title: "Test string",
                                        }                                    ],
                                },
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                linkOutSuggestion: {
                                    destinationName: "Test string",
                                    uri: "Test string",
                                },
                                listSelect: {
                                    items: [
                                        {
                                            description: "Test string",
                                            image: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            info: {
                                                key: "Test string",
                                                synonyms: [
                                                    "Test string"                                                ],
                                            },
                                            title: "Test string",
                                        }                                    ],
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                mediaContent: {
                                    mediaObjects: [
                                        {
                                            contentUrl: "Test string",
                                            description: "Test string",
                                            icon: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            largeImage: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            name: "Test string",
                                        }                                    ],
                                    mediaType: "Test string",
                                },
                                payload: {
                                    A: 42                                },
                                platform: "Test string",
                                quickReplies: {
                                    quickReplies: [
                                        "Test string"                                    ],
                                    title: "Test string",
                                },
                                simpleResponses: {
                                    simpleResponses: [
                                        {
                                            displayText: "Test string",
                                            ssml: "Test string",
                                            textToSpeech: "Test string",
                                        }                                    ],
                                },
                                suggestions: {
                                    suggestions: [
                                        {
                                            title: "Test string",
                                        }                                    ],
                                },
                                tableCard: {
                                    buttons: [
                                        {
                                            openUriAction: {
                                                uri: "Test string",
                                            },
                                            title: "Test string",
                                        }                                    ],
                                    columnProperties: [
                                        {
                                            header: "Test string",
                                            horizontalAlignment: "Test string",
                                        }                                    ],
                                    image: {
                                        accessibilityText: "Test string",
                                        imageUri: "Test string",
                                    },
                                    rows: [
                                        {
                                            cells: [
                                                {
                                                    text: "Test string",
                                                }                                            ],
                                            dividerAfter: true,
                                        }                                    ],
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                text: {
                                    text: [
                                        "Test string"                                    ],
                                },
                            }                        ],
                        mlDisabled: true,
                        name: "Test string",
                        outputContexts: [
                            {
                                lifespanCount: 42,
                                name: "Test string",
                                parameters: {
                                    A: 42                                },
                            }                        ],
                        parameters: [
                            {
                                defaultValue: "Test string",
                                displayName: "Test string",
                                entityTypeDisplayName: "Test string",
                                isList: true,
                                mandatory: true,
                                name: "Test string",
                                prompts: [
                                    "Test string"                                ],
                                value: "Test string",
                            }                        ],
                        parentFollowupIntentName: "Test string",
                        priority: 42,
                        resetContexts: true,
                        rootFollowupIntentName: "Test string",
                        trainingPhrases: [
                            {
                                name: "Test string",
                                parts: [
                                    {
                                        alias: "Test string",
                                        entityType: "Test string",
                                        text: "Test string",
                                        userDefined: true,
                                    }                                ],
                                timesAddedCount: 42,
                                type: "Test string",
                            }                        ],
                        webhookState: "Test string",
                    }                ],
            },
            intentBatchUri: "Test string",
            intentView: "Test string",
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Creates an intent in the specified agent. */
        await gapi.client.dialogflow.projects.agent.intents.create({
            intentView: "Test string",
            languageCode: "Test string",
            parent: "Test string",
        }, {
            action: "Test string",
            defaultResponsePlatforms: [
                "Test string"            ],
            displayName: "Test string",
            events: [
                "Test string"            ],
            followupIntentInfo: [
                {
                    followupIntentName: "Test string",
                    parentFollowupIntentName: "Test string",
                }            ],
            inputContextNames: [
                "Test string"            ],
            isFallback: true,
            messages: [
                {
                    basicCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        formattedText: "Test string",
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    browseCarouselCard: {
                        imageDisplayOptions: "Test string",
                        items: [
                            {
                                description: "Test string",
                                footer: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                openUriAction: {
                                    url: "Test string",
                                    urlTypeHint: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                    },
                    card: {
                        buttons: [
                            {
                                postback: "Test string",
                                text: "Test string",
                            }                        ],
                        imageUri: "Test string",
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    carouselSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                    },
                    image: {
                        accessibilityText: "Test string",
                        imageUri: "Test string",
                    },
                    linkOutSuggestion: {
                        destinationName: "Test string",
                        uri: "Test string",
                    },
                    listSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    mediaContent: {
                        mediaObjects: [
                            {
                                contentUrl: "Test string",
                                description: "Test string",
                                icon: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                largeImage: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                name: "Test string",
                            }                        ],
                        mediaType: "Test string",
                    },
                    payload: {
                        A: 42                    },
                    platform: "Test string",
                    quickReplies: {
                        quickReplies: [
                            "Test string"                        ],
                        title: "Test string",
                    },
                    simpleResponses: {
                        simpleResponses: [
                            {
                                displayText: "Test string",
                                ssml: "Test string",
                                textToSpeech: "Test string",
                            }                        ],
                    },
                    suggestions: {
                        suggestions: [
                            {
                                title: "Test string",
                            }                        ],
                    },
                    tableCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        columnProperties: [
                            {
                                header: "Test string",
                                horizontalAlignment: "Test string",
                            }                        ],
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        rows: [
                            {
                                cells: [
                                    {
                                        text: "Test string",
                                    }                                ],
                                dividerAfter: true,
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    text: {
                        text: [
                            "Test string"                        ],
                    },
                }            ],
            mlDisabled: true,
            name: "Test string",
            outputContexts: [
                {
                    lifespanCount: 42,
                    name: "Test string",
                    parameters: {
                        A: 42                    },
                }            ],
            parameters: [
                {
                    defaultValue: "Test string",
                    displayName: "Test string",
                    entityTypeDisplayName: "Test string",
                    isList: true,
                    mandatory: true,
                    name: "Test string",
                    prompts: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            parentFollowupIntentName: "Test string",
            priority: 42,
            resetContexts: true,
            rootFollowupIntentName: "Test string",
            trainingPhrases: [
                {
                    name: "Test string",
                    parts: [
                        {
                            alias: "Test string",
                            entityType: "Test string",
                            text: "Test string",
                            userDefined: true,
                        }                    ],
                    timesAddedCount: 42,
                    type: "Test string",
                }            ],
            webhookState: "Test string",
        });
        /** Deletes the specified intent and its direct or indirect followup intents. */
        await gapi.client.dialogflow.projects.agent.intents.delete({
            name: "Test string",
        });
        /** Retrieves the specified intent. */
        await gapi.client.dialogflow.projects.agent.intents.get({
            intentView: "Test string",
            languageCode: "Test string",
            name: "Test string",
        });
        /** Returns the list of all intents in the specified agent. */
        await gapi.client.dialogflow.projects.agent.intents.list({
            intentView: "Test string",
            languageCode: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified intent. */
        await gapi.client.dialogflow.projects.agent.intents.patch({
            intentView: "Test string",
            languageCode: "Test string",
            name: "Test string",
            updateMask: "Test string",
        }, {
            action: "Test string",
            defaultResponsePlatforms: [
                "Test string"            ],
            displayName: "Test string",
            events: [
                "Test string"            ],
            followupIntentInfo: [
                {
                    followupIntentName: "Test string",
                    parentFollowupIntentName: "Test string",
                }            ],
            inputContextNames: [
                "Test string"            ],
            isFallback: true,
            messages: [
                {
                    basicCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        formattedText: "Test string",
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    browseCarouselCard: {
                        imageDisplayOptions: "Test string",
                        items: [
                            {
                                description: "Test string",
                                footer: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                openUriAction: {
                                    url: "Test string",
                                    urlTypeHint: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                    },
                    card: {
                        buttons: [
                            {
                                postback: "Test string",
                                text: "Test string",
                            }                        ],
                        imageUri: "Test string",
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    carouselSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                    },
                    image: {
                        accessibilityText: "Test string",
                        imageUri: "Test string",
                    },
                    linkOutSuggestion: {
                        destinationName: "Test string",
                        uri: "Test string",
                    },
                    listSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    mediaContent: {
                        mediaObjects: [
                            {
                                contentUrl: "Test string",
                                description: "Test string",
                                icon: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                largeImage: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                name: "Test string",
                            }                        ],
                        mediaType: "Test string",
                    },
                    payload: {
                        A: 42                    },
                    platform: "Test string",
                    quickReplies: {
                        quickReplies: [
                            "Test string"                        ],
                        title: "Test string",
                    },
                    simpleResponses: {
                        simpleResponses: [
                            {
                                displayText: "Test string",
                                ssml: "Test string",
                                textToSpeech: "Test string",
                            }                        ],
                    },
                    suggestions: {
                        suggestions: [
                            {
                                title: "Test string",
                            }                        ],
                    },
                    tableCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        columnProperties: [
                            {
                                header: "Test string",
                                horizontalAlignment: "Test string",
                            }                        ],
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        rows: [
                            {
                                cells: [
                                    {
                                        text: "Test string",
                                    }                                ],
                                dividerAfter: true,
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    text: {
                        text: [
                            "Test string"                        ],
                    },
                }            ],
            mlDisabled: true,
            name: "Test string",
            outputContexts: [
                {
                    lifespanCount: 42,
                    name: "Test string",
                    parameters: {
                        A: 42                    },
                }            ],
            parameters: [
                {
                    defaultValue: "Test string",
                    displayName: "Test string",
                    entityTypeDisplayName: "Test string",
                    isList: true,
                    mandatory: true,
                    name: "Test string",
                    prompts: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            parentFollowupIntentName: "Test string",
            priority: 42,
            resetContexts: true,
            rootFollowupIntentName: "Test string",
            trainingPhrases: [
                {
                    name: "Test string",
                    parts: [
                        {
                            alias: "Test string",
                            entityType: "Test string",
                            text: "Test string",
                            userDefined: true,
                        }                    ],
                    timesAddedCount: 42,
                    type: "Test string",
                }            ],
            webhookState: "Test string",
        });
        /** Deletes all active contexts in the specified session. */
        await gapi.client.dialogflow.projects.agent.sessions.deleteContexts({
            parent: "Test string",
        });
        /** Creates a context. If the specified context already exists, overrides the context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.create({
            parent: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /** Deletes the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.delete({
            name: "Test string",
        });
        /** Retrieves the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.get({
            name: "Test string",
        });
        /** Returns the list of all contexts in the specified session. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /**
         * Creates a session entity type. If the specified session entity type already exists, overrides the session entity type. This method doesn't work with Google Assistant integration.
         * Contact Dialogflow support if you need to use session entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.create({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /**
         * Deletes the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.delete({
            name: "Test string",
        });
        /**
         * Retrieves the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.get({
            name: "Test string",
        });
        /**
         * Returns the list of all session entity types in the specified session. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session
         * entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Updates the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /**
         * Processes a natural language query and returns structured, actionable data as a result. This method is not idempotent, because it may cause contexts and session entity types to be
         * updated, which in turn might affect results of future queries. Note: Always use agent versions for production traffic. See [Versions and
         * environments](https://cloud.google.com/dialogflow/es/docs/agents-versions).
         */
        await gapi.client.dialogflow.projects.agent.sessions.detectIntent({
            session: "Test string",
        }, {
            inputAudio: "Test string",
            outputAudioConfig: {
                audioEncoding: "Test string",
                sampleRateHertz: 42,
                synthesizeSpeechConfig: {
                    effectsProfileId: [
                        "Test string"                    ],
                    pitch: 42,
                    speakingRate: 42,
                    voice: {
                        name: "Test string",
                        ssmlGender: "Test string",
                    },
                    volumeGainDb: 42,
                },
            },
            outputAudioConfigMask: "Test string",
            queryInput: {
                audioConfig: {
                    audioEncoding: "Test string",
                    enableWordInfo: true,
                    languageCode: "Test string",
                    model: "Test string",
                    modelVariant: "Test string",
                    phraseHints: [
                        "Test string"                    ],
                    sampleRateHertz: 42,
                    singleUtterance: true,
                    speechContexts: [
                        {
                            boost: 42,
                            phrases: [
                                "Test string"                            ],
                        }                    ],
                },
                event: {
                    languageCode: "Test string",
                    name: "Test string",
                    parameters: {
                        A: 42                    },
                },
                text: {
                    languageCode: "Test string",
                    text: "Test string",
                },
            },
            queryParams: {
                contexts: [
                    {
                        lifespanCount: 42,
                        name: "Test string",
                        parameters: {
                            A: 42                        },
                    }                ],
                geoLocation: {
                    latitude: 42,
                    longitude: 42,
                },
                payload: {
                    A: 42                },
                resetContexts: true,
                sentimentAnalysisRequestConfig: {
                    analyzeQueryTextSentiment: true,
                },
                sessionEntityTypes: [
                    {
                        entities: [
                            {
                                synonyms: [
                                    "Test string"                                ],
                                value: "Test string",
                            }                        ],
                        entityOverrideMode: "Test string",
                        name: "Test string",
                    }                ],
                timeZone: "Test string",
                webhookHeaders: {
                    A: "Test string"                },
            },
        });
        /** Creates a context. If the specified context already exists, overrides the context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.create({
            parent: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /** Deletes the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.delete({
            name: "Test string",
        });
        /** Retrieves the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.get({
            name: "Test string",
        });
        /** Returns the list of all contexts in the specified session. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /**
         * Creates a session entity type. If the specified session entity type already exists, overrides the session entity type. This method doesn't work with Google Assistant integration.
         * Contact Dialogflow support if you need to use session entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.create({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /**
         * Deletes the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.delete({
            name: "Test string",
        });
        /**
         * Retrieves the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.get({
            name: "Test string",
        });
        /**
         * Returns the list of all session entity types in the specified session. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session
         * entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Updates the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /** Retrieves the fulfillment. */
        await gapi.client.dialogflow.projects.agent.getFulfillment({
            name: "Test string",
        });
        /** Deletes entity types in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.batchDelete({
            parent: "Test string",
        }, {
            entityTypeNames: [
                "Test string"            ],
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Updates/Creates multiple entity types in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.batchUpdate({
            parent: "Test string",
        }, {
            entityTypeBatchInline: {
                entityTypes: [
                    {
                        autoExpansionMode: "Test string",
                        displayName: "Test string",
                        enableFuzzyExtraction: true,
                        entities: [
                            {
                                synonyms: [
                                    "Test string"                                ],
                                value: "Test string",
                            }                        ],
                        kind: "Test string",
                        name: "Test string",
                    }                ],
            },
            entityTypeBatchUri: "Test string",
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Creates an entity type in the specified agent. */
        await gapi.client.dialogflow.projects.agent.entityTypes.create({
            languageCode: "Test string",
            parent: "Test string",
        }, {
            autoExpansionMode: "Test string",
            displayName: "Test string",
            enableFuzzyExtraction: true,
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            kind: "Test string",
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Deletes the specified entity type. */
        await gapi.client.dialogflow.projects.agent.entityTypes.delete({
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Retrieves the specified entity type. */
        await gapi.client.dialogflow.projects.agent.entityTypes.get({
            languageCode: "Test string",
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Returns the list of all entity types in the specified agent. */
        await gapi.client.dialogflow.projects.agent.entityTypes.list({
            languageCode: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Updates the specified entity type. */
        await gapi.client.dialogflow.projects.agent.entityTypes.patch({
            languageCode: "Test string",
            name: "Test string",
            updateMask: "Test string",
        }, {
            autoExpansionMode: "Test string",
            displayName: "Test string",
            enableFuzzyExtraction: true,
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            kind: "Test string",
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Returns the list of all non-draft environments of the specified agent. */
        await gapi.client.dialogflow.projects.agent.environments.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Deletes intents in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.intents.batchDelete({
            parent: "Test string",
        }, {
            intents: [
                {
                    action: "Test string",
                    defaultResponsePlatforms: [
                        "Test string"                    ],
                    displayName: "Test string",
                    events: [
                        "Test string"                    ],
                    followupIntentInfo: [
                        {
                            followupIntentName: "Test string",
                            parentFollowupIntentName: "Test string",
                        }                    ],
                    inputContextNames: [
                        "Test string"                    ],
                    isFallback: true,
                    messages: [
                        {
                            basicCard: {
                                buttons: [
                                    {
                                        openUriAction: {
                                            uri: "Test string",
                                        },
                                        title: "Test string",
                                    }                                ],
                                formattedText: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            browseCarouselCard: {
                                imageDisplayOptions: "Test string",
                                items: [
                                    {
                                        description: "Test string",
                                        footer: "Test string",
                                        image: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        openUriAction: {
                                            url: "Test string",
                                            urlTypeHint: "Test string",
                                        },
                                        title: "Test string",
                                    }                                ],
                            },
                            card: {
                                buttons: [
                                    {
                                        postback: "Test string",
                                        text: "Test string",
                                    }                                ],
                                imageUri: "Test string",
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            carouselSelect: {
                                items: [
                                    {
                                        description: "Test string",
                                        image: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        info: {
                                            key: "Test string",
                                            synonyms: [
                                                "Test string"                                            ],
                                        },
                                        title: "Test string",
                                    }                                ],
                            },
                            image: {
                                accessibilityText: "Test string",
                                imageUri: "Test string",
                            },
                            linkOutSuggestion: {
                                destinationName: "Test string",
                                uri: "Test string",
                            },
                            listSelect: {
                                items: [
                                    {
                                        description: "Test string",
                                        image: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        info: {
                                            key: "Test string",
                                            synonyms: [
                                                "Test string"                                            ],
                                        },
                                        title: "Test string",
                                    }                                ],
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            mediaContent: {
                                mediaObjects: [
                                    {
                                        contentUrl: "Test string",
                                        description: "Test string",
                                        icon: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        largeImage: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        name: "Test string",
                                    }                                ],
                                mediaType: "Test string",
                            },
                            payload: {
                                A: 42                            },
                            platform: "Test string",
                            quickReplies: {
                                quickReplies: [
                                    "Test string"                                ],
                                title: "Test string",
                            },
                            simpleResponses: {
                                simpleResponses: [
                                    {
                                        displayText: "Test string",
                                        ssml: "Test string",
                                        textToSpeech: "Test string",
                                    }                                ],
                            },
                            suggestions: {
                                suggestions: [
                                    {
                                        title: "Test string",
                                    }                                ],
                            },
                            tableCard: {
                                buttons: [
                                    {
                                        openUriAction: {
                                            uri: "Test string",
                                        },
                                        title: "Test string",
                                    }                                ],
                                columnProperties: [
                                    {
                                        header: "Test string",
                                        horizontalAlignment: "Test string",
                                    }                                ],
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                rows: [
                                    {
                                        cells: [
                                            {
                                                text: "Test string",
                                            }                                        ],
                                        dividerAfter: true,
                                    }                                ],
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            text: {
                                text: [
                                    "Test string"                                ],
                            },
                        }                    ],
                    mlDisabled: true,
                    name: "Test string",
                    outputContexts: [
                        {
                            lifespanCount: 42,
                            name: "Test string",
                            parameters: {
                                A: 42                            },
                        }                    ],
                    parameters: [
                        {
                            defaultValue: "Test string",
                            displayName: "Test string",
                            entityTypeDisplayName: "Test string",
                            isList: true,
                            mandatory: true,
                            name: "Test string",
                            prompts: [
                                "Test string"                            ],
                            value: "Test string",
                        }                    ],
                    parentFollowupIntentName: "Test string",
                    priority: 42,
                    resetContexts: true,
                    rootFollowupIntentName: "Test string",
                    trainingPhrases: [
                        {
                            name: "Test string",
                            parts: [
                                {
                                    alias: "Test string",
                                    entityType: "Test string",
                                    text: "Test string",
                                    userDefined: true,
                                }                            ],
                            timesAddedCount: 42,
                            type: "Test string",
                        }                    ],
                    webhookState: "Test string",
                }            ],
        });
        /** Updates/Creates multiple intents in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.intents.batchUpdate({
            parent: "Test string",
        }, {
            intentBatchInline: {
                intents: [
                    {
                        action: "Test string",
                        defaultResponsePlatforms: [
                            "Test string"                        ],
                        displayName: "Test string",
                        events: [
                            "Test string"                        ],
                        followupIntentInfo: [
                            {
                                followupIntentName: "Test string",
                                parentFollowupIntentName: "Test string",
                            }                        ],
                        inputContextNames: [
                            "Test string"                        ],
                        isFallback: true,
                        messages: [
                            {
                                basicCard: {
                                    buttons: [
                                        {
                                            openUriAction: {
                                                uri: "Test string",
                                            },
                                            title: "Test string",
                                        }                                    ],
                                    formattedText: "Test string",
                                    image: {
                                        accessibilityText: "Test string",
                                        imageUri: "Test string",
                                    },
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                browseCarouselCard: {
                                    imageDisplayOptions: "Test string",
                                    items: [
                                        {
                                            description: "Test string",
                                            footer: "Test string",
                                            image: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            openUriAction: {
                                                url: "Test string",
                                                urlTypeHint: "Test string",
                                            },
                                            title: "Test string",
                                        }                                    ],
                                },
                                card: {
                                    buttons: [
                                        {
                                            postback: "Test string",
                                            text: "Test string",
                                        }                                    ],
                                    imageUri: "Test string",
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                carouselSelect: {
                                    items: [
                                        {
                                            description: "Test string",
                                            image: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            info: {
                                                key: "Test string",
                                                synonyms: [
                                                    "Test string"                                                ],
                                            },
                                            title: "Test string",
                                        }                                    ],
                                },
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                linkOutSuggestion: {
                                    destinationName: "Test string",
                                    uri: "Test string",
                                },
                                listSelect: {
                                    items: [
                                        {
                                            description: "Test string",
                                            image: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            info: {
                                                key: "Test string",
                                                synonyms: [
                                                    "Test string"                                                ],
                                            },
                                            title: "Test string",
                                        }                                    ],
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                mediaContent: {
                                    mediaObjects: [
                                        {
                                            contentUrl: "Test string",
                                            description: "Test string",
                                            icon: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            largeImage: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            name: "Test string",
                                        }                                    ],
                                    mediaType: "Test string",
                                },
                                payload: {
                                    A: 42                                },
                                platform: "Test string",
                                quickReplies: {
                                    quickReplies: [
                                        "Test string"                                    ],
                                    title: "Test string",
                                },
                                simpleResponses: {
                                    simpleResponses: [
                                        {
                                            displayText: "Test string",
                                            ssml: "Test string",
                                            textToSpeech: "Test string",
                                        }                                    ],
                                },
                                suggestions: {
                                    suggestions: [
                                        {
                                            title: "Test string",
                                        }                                    ],
                                },
                                tableCard: {
                                    buttons: [
                                        {
                                            openUriAction: {
                                                uri: "Test string",
                                            },
                                            title: "Test string",
                                        }                                    ],
                                    columnProperties: [
                                        {
                                            header: "Test string",
                                            horizontalAlignment: "Test string",
                                        }                                    ],
                                    image: {
                                        accessibilityText: "Test string",
                                        imageUri: "Test string",
                                    },
                                    rows: [
                                        {
                                            cells: [
                                                {
                                                    text: "Test string",
                                                }                                            ],
                                            dividerAfter: true,
                                        }                                    ],
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                text: {
                                    text: [
                                        "Test string"                                    ],
                                },
                            }                        ],
                        mlDisabled: true,
                        name: "Test string",
                        outputContexts: [
                            {
                                lifespanCount: 42,
                                name: "Test string",
                                parameters: {
                                    A: 42                                },
                            }                        ],
                        parameters: [
                            {
                                defaultValue: "Test string",
                                displayName: "Test string",
                                entityTypeDisplayName: "Test string",
                                isList: true,
                                mandatory: true,
                                name: "Test string",
                                prompts: [
                                    "Test string"                                ],
                                value: "Test string",
                            }                        ],
                        parentFollowupIntentName: "Test string",
                        priority: 42,
                        resetContexts: true,
                        rootFollowupIntentName: "Test string",
                        trainingPhrases: [
                            {
                                name: "Test string",
                                parts: [
                                    {
                                        alias: "Test string",
                                        entityType: "Test string",
                                        text: "Test string",
                                        userDefined: true,
                                    }                                ],
                                timesAddedCount: 42,
                                type: "Test string",
                            }                        ],
                        webhookState: "Test string",
                    }                ],
            },
            intentBatchUri: "Test string",
            intentView: "Test string",
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Creates an intent in the specified agent. */
        await gapi.client.dialogflow.projects.agent.intents.create({
            intentView: "Test string",
            languageCode: "Test string",
            parent: "Test string",
        }, {
            action: "Test string",
            defaultResponsePlatforms: [
                "Test string"            ],
            displayName: "Test string",
            events: [
                "Test string"            ],
            followupIntentInfo: [
                {
                    followupIntentName: "Test string",
                    parentFollowupIntentName: "Test string",
                }            ],
            inputContextNames: [
                "Test string"            ],
            isFallback: true,
            messages: [
                {
                    basicCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        formattedText: "Test string",
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    browseCarouselCard: {
                        imageDisplayOptions: "Test string",
                        items: [
                            {
                                description: "Test string",
                                footer: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                openUriAction: {
                                    url: "Test string",
                                    urlTypeHint: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                    },
                    card: {
                        buttons: [
                            {
                                postback: "Test string",
                                text: "Test string",
                            }                        ],
                        imageUri: "Test string",
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    carouselSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                    },
                    image: {
                        accessibilityText: "Test string",
                        imageUri: "Test string",
                    },
                    linkOutSuggestion: {
                        destinationName: "Test string",
                        uri: "Test string",
                    },
                    listSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    mediaContent: {
                        mediaObjects: [
                            {
                                contentUrl: "Test string",
                                description: "Test string",
                                icon: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                largeImage: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                name: "Test string",
                            }                        ],
                        mediaType: "Test string",
                    },
                    payload: {
                        A: 42                    },
                    platform: "Test string",
                    quickReplies: {
                        quickReplies: [
                            "Test string"                        ],
                        title: "Test string",
                    },
                    simpleResponses: {
                        simpleResponses: [
                            {
                                displayText: "Test string",
                                ssml: "Test string",
                                textToSpeech: "Test string",
                            }                        ],
                    },
                    suggestions: {
                        suggestions: [
                            {
                                title: "Test string",
                            }                        ],
                    },
                    tableCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        columnProperties: [
                            {
                                header: "Test string",
                                horizontalAlignment: "Test string",
                            }                        ],
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        rows: [
                            {
                                cells: [
                                    {
                                        text: "Test string",
                                    }                                ],
                                dividerAfter: true,
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    text: {
                        text: [
                            "Test string"                        ],
                    },
                }            ],
            mlDisabled: true,
            name: "Test string",
            outputContexts: [
                {
                    lifespanCount: 42,
                    name: "Test string",
                    parameters: {
                        A: 42                    },
                }            ],
            parameters: [
                {
                    defaultValue: "Test string",
                    displayName: "Test string",
                    entityTypeDisplayName: "Test string",
                    isList: true,
                    mandatory: true,
                    name: "Test string",
                    prompts: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            parentFollowupIntentName: "Test string",
            priority: 42,
            resetContexts: true,
            rootFollowupIntentName: "Test string",
            trainingPhrases: [
                {
                    name: "Test string",
                    parts: [
                        {
                            alias: "Test string",
                            entityType: "Test string",
                            text: "Test string",
                            userDefined: true,
                        }                    ],
                    timesAddedCount: 42,
                    type: "Test string",
                }            ],
            webhookState: "Test string",
        });
        /** Deletes the specified intent and its direct or indirect followup intents. */
        await gapi.client.dialogflow.projects.agent.intents.delete({
            name: "Test string",
        });
        /** Retrieves the specified intent. */
        await gapi.client.dialogflow.projects.agent.intents.get({
            intentView: "Test string",
            languageCode: "Test string",
            name: "Test string",
        });
        /** Returns the list of all intents in the specified agent. */
        await gapi.client.dialogflow.projects.agent.intents.list({
            intentView: "Test string",
            languageCode: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified intent. */
        await gapi.client.dialogflow.projects.agent.intents.patch({
            intentView: "Test string",
            languageCode: "Test string",
            name: "Test string",
            updateMask: "Test string",
        }, {
            action: "Test string",
            defaultResponsePlatforms: [
                "Test string"            ],
            displayName: "Test string",
            events: [
                "Test string"            ],
            followupIntentInfo: [
                {
                    followupIntentName: "Test string",
                    parentFollowupIntentName: "Test string",
                }            ],
            inputContextNames: [
                "Test string"            ],
            isFallback: true,
            messages: [
                {
                    basicCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        formattedText: "Test string",
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    browseCarouselCard: {
                        imageDisplayOptions: "Test string",
                        items: [
                            {
                                description: "Test string",
                                footer: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                openUriAction: {
                                    url: "Test string",
                                    urlTypeHint: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                    },
                    card: {
                        buttons: [
                            {
                                postback: "Test string",
                                text: "Test string",
                            }                        ],
                        imageUri: "Test string",
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    carouselSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                    },
                    image: {
                        accessibilityText: "Test string",
                        imageUri: "Test string",
                    },
                    linkOutSuggestion: {
                        destinationName: "Test string",
                        uri: "Test string",
                    },
                    listSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    mediaContent: {
                        mediaObjects: [
                            {
                                contentUrl: "Test string",
                                description: "Test string",
                                icon: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                largeImage: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                name: "Test string",
                            }                        ],
                        mediaType: "Test string",
                    },
                    payload: {
                        A: 42                    },
                    platform: "Test string",
                    quickReplies: {
                        quickReplies: [
                            "Test string"                        ],
                        title: "Test string",
                    },
                    simpleResponses: {
                        simpleResponses: [
                            {
                                displayText: "Test string",
                                ssml: "Test string",
                                textToSpeech: "Test string",
                            }                        ],
                    },
                    suggestions: {
                        suggestions: [
                            {
                                title: "Test string",
                            }                        ],
                    },
                    tableCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        columnProperties: [
                            {
                                header: "Test string",
                                horizontalAlignment: "Test string",
                            }                        ],
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        rows: [
                            {
                                cells: [
                                    {
                                        text: "Test string",
                                    }                                ],
                                dividerAfter: true,
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    text: {
                        text: [
                            "Test string"                        ],
                    },
                }            ],
            mlDisabled: true,
            name: "Test string",
            outputContexts: [
                {
                    lifespanCount: 42,
                    name: "Test string",
                    parameters: {
                        A: 42                    },
                }            ],
            parameters: [
                {
                    defaultValue: "Test string",
                    displayName: "Test string",
                    entityTypeDisplayName: "Test string",
                    isList: true,
                    mandatory: true,
                    name: "Test string",
                    prompts: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            parentFollowupIntentName: "Test string",
            priority: 42,
            resetContexts: true,
            rootFollowupIntentName: "Test string",
            trainingPhrases: [
                {
                    name: "Test string",
                    parts: [
                        {
                            alias: "Test string",
                            entityType: "Test string",
                            text: "Test string",
                            userDefined: true,
                        }                    ],
                    timesAddedCount: 42,
                    type: "Test string",
                }            ],
            webhookState: "Test string",
        });
        /** Deletes all active contexts in the specified session. */
        await gapi.client.dialogflow.projects.agent.sessions.deleteContexts({
            parent: "Test string",
        });
        /** Creates a context. If the specified context already exists, overrides the context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.create({
            parent: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /** Deletes the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.delete({
            name: "Test string",
        });
        /** Retrieves the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.get({
            name: "Test string",
        });
        /** Returns the list of all contexts in the specified session. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /**
         * Creates a session entity type. If the specified session entity type already exists, overrides the session entity type. This method doesn't work with Google Assistant integration.
         * Contact Dialogflow support if you need to use session entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.create({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /**
         * Deletes the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.delete({
            name: "Test string",
        });
        /**
         * Retrieves the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.get({
            name: "Test string",
        });
        /**
         * Returns the list of all session entity types in the specified session. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session
         * entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Updates the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /**
         * Processes a natural language query and returns structured, actionable data as a result. This method is not idempotent, because it may cause contexts and session entity types to be
         * updated, which in turn might affect results of future queries. Note: Always use agent versions for production traffic. See [Versions and
         * environments](https://cloud.google.com/dialogflow/es/docs/agents-versions).
         */
        await gapi.client.dialogflow.projects.agent.sessions.detectIntent({
            session: "Test string",
        }, {
            inputAudio: "Test string",
            outputAudioConfig: {
                audioEncoding: "Test string",
                sampleRateHertz: 42,
                synthesizeSpeechConfig: {
                    effectsProfileId: [
                        "Test string"                    ],
                    pitch: 42,
                    speakingRate: 42,
                    voice: {
                        name: "Test string",
                        ssmlGender: "Test string",
                    },
                    volumeGainDb: 42,
                },
            },
            outputAudioConfigMask: "Test string",
            queryInput: {
                audioConfig: {
                    audioEncoding: "Test string",
                    enableWordInfo: true,
                    languageCode: "Test string",
                    model: "Test string",
                    modelVariant: "Test string",
                    phraseHints: [
                        "Test string"                    ],
                    sampleRateHertz: 42,
                    singleUtterance: true,
                    speechContexts: [
                        {
                            boost: 42,
                            phrases: [
                                "Test string"                            ],
                        }                    ],
                },
                event: {
                    languageCode: "Test string",
                    name: "Test string",
                    parameters: {
                        A: 42                    },
                },
                text: {
                    languageCode: "Test string",
                    text: "Test string",
                },
            },
            queryParams: {
                contexts: [
                    {
                        lifespanCount: 42,
                        name: "Test string",
                        parameters: {
                            A: 42                        },
                    }                ],
                geoLocation: {
                    latitude: 42,
                    longitude: 42,
                },
                payload: {
                    A: 42                },
                resetContexts: true,
                sentimentAnalysisRequestConfig: {
                    analyzeQueryTextSentiment: true,
                },
                sessionEntityTypes: [
                    {
                        entities: [
                            {
                                synonyms: [
                                    "Test string"                                ],
                                value: "Test string",
                            }                        ],
                        entityOverrideMode: "Test string",
                        name: "Test string",
                    }                ],
                timeZone: "Test string",
                webhookHeaders: {
                    A: "Test string"                },
            },
        });
        /** Creates a context. If the specified context already exists, overrides the context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.create({
            parent: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /** Deletes the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.delete({
            name: "Test string",
        });
        /** Retrieves the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.get({
            name: "Test string",
        });
        /** Returns the list of all contexts in the specified session. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /**
         * Creates a session entity type. If the specified session entity type already exists, overrides the session entity type. This method doesn't work with Google Assistant integration.
         * Contact Dialogflow support if you need to use session entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.create({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /**
         * Deletes the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.delete({
            name: "Test string",
        });
        /**
         * Retrieves the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.get({
            name: "Test string",
        });
        /**
         * Returns the list of all session entity types in the specified session. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session
         * entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Updates the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /** Gets agent validation result. Agent validation is performed during training time and is updated automatically when training is completed. */
        await gapi.client.dialogflow.projects.agent.getValidationResult({
            languageCode: "Test string",
            parent: "Test string",
        });
        /** Deletes entity types in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.batchDelete({
            parent: "Test string",
        }, {
            entityTypeNames: [
                "Test string"            ],
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Updates/Creates multiple entity types in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.batchUpdate({
            parent: "Test string",
        }, {
            entityTypeBatchInline: {
                entityTypes: [
                    {
                        autoExpansionMode: "Test string",
                        displayName: "Test string",
                        enableFuzzyExtraction: true,
                        entities: [
                            {
                                synonyms: [
                                    "Test string"                                ],
                                value: "Test string",
                            }                        ],
                        kind: "Test string",
                        name: "Test string",
                    }                ],
            },
            entityTypeBatchUri: "Test string",
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Creates an entity type in the specified agent. */
        await gapi.client.dialogflow.projects.agent.entityTypes.create({
            languageCode: "Test string",
            parent: "Test string",
        }, {
            autoExpansionMode: "Test string",
            displayName: "Test string",
            enableFuzzyExtraction: true,
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            kind: "Test string",
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Deletes the specified entity type. */
        await gapi.client.dialogflow.projects.agent.entityTypes.delete({
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Retrieves the specified entity type. */
        await gapi.client.dialogflow.projects.agent.entityTypes.get({
            languageCode: "Test string",
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Returns the list of all entity types in the specified agent. */
        await gapi.client.dialogflow.projects.agent.entityTypes.list({
            languageCode: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Updates the specified entity type. */
        await gapi.client.dialogflow.projects.agent.entityTypes.patch({
            languageCode: "Test string",
            name: "Test string",
            updateMask: "Test string",
        }, {
            autoExpansionMode: "Test string",
            displayName: "Test string",
            enableFuzzyExtraction: true,
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            kind: "Test string",
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Returns the list of all non-draft environments of the specified agent. */
        await gapi.client.dialogflow.projects.agent.environments.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Deletes intents in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.intents.batchDelete({
            parent: "Test string",
        }, {
            intents: [
                {
                    action: "Test string",
                    defaultResponsePlatforms: [
                        "Test string"                    ],
                    displayName: "Test string",
                    events: [
                        "Test string"                    ],
                    followupIntentInfo: [
                        {
                            followupIntentName: "Test string",
                            parentFollowupIntentName: "Test string",
                        }                    ],
                    inputContextNames: [
                        "Test string"                    ],
                    isFallback: true,
                    messages: [
                        {
                            basicCard: {
                                buttons: [
                                    {
                                        openUriAction: {
                                            uri: "Test string",
                                        },
                                        title: "Test string",
                                    }                                ],
                                formattedText: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            browseCarouselCard: {
                                imageDisplayOptions: "Test string",
                                items: [
                                    {
                                        description: "Test string",
                                        footer: "Test string",
                                        image: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        openUriAction: {
                                            url: "Test string",
                                            urlTypeHint: "Test string",
                                        },
                                        title: "Test string",
                                    }                                ],
                            },
                            card: {
                                buttons: [
                                    {
                                        postback: "Test string",
                                        text: "Test string",
                                    }                                ],
                                imageUri: "Test string",
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            carouselSelect: {
                                items: [
                                    {
                                        description: "Test string",
                                        image: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        info: {
                                            key: "Test string",
                                            synonyms: [
                                                "Test string"                                            ],
                                        },
                                        title: "Test string",
                                    }                                ],
                            },
                            image: {
                                accessibilityText: "Test string",
                                imageUri: "Test string",
                            },
                            linkOutSuggestion: {
                                destinationName: "Test string",
                                uri: "Test string",
                            },
                            listSelect: {
                                items: [
                                    {
                                        description: "Test string",
                                        image: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        info: {
                                            key: "Test string",
                                            synonyms: [
                                                "Test string"                                            ],
                                        },
                                        title: "Test string",
                                    }                                ],
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            mediaContent: {
                                mediaObjects: [
                                    {
                                        contentUrl: "Test string",
                                        description: "Test string",
                                        icon: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        largeImage: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        name: "Test string",
                                    }                                ],
                                mediaType: "Test string",
                            },
                            payload: {
                                A: 42                            },
                            platform: "Test string",
                            quickReplies: {
                                quickReplies: [
                                    "Test string"                                ],
                                title: "Test string",
                            },
                            simpleResponses: {
                                simpleResponses: [
                                    {
                                        displayText: "Test string",
                                        ssml: "Test string",
                                        textToSpeech: "Test string",
                                    }                                ],
                            },
                            suggestions: {
                                suggestions: [
                                    {
                                        title: "Test string",
                                    }                                ],
                            },
                            tableCard: {
                                buttons: [
                                    {
                                        openUriAction: {
                                            uri: "Test string",
                                        },
                                        title: "Test string",
                                    }                                ],
                                columnProperties: [
                                    {
                                        header: "Test string",
                                        horizontalAlignment: "Test string",
                                    }                                ],
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                rows: [
                                    {
                                        cells: [
                                            {
                                                text: "Test string",
                                            }                                        ],
                                        dividerAfter: true,
                                    }                                ],
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            text: {
                                text: [
                                    "Test string"                                ],
                            },
                        }                    ],
                    mlDisabled: true,
                    name: "Test string",
                    outputContexts: [
                        {
                            lifespanCount: 42,
                            name: "Test string",
                            parameters: {
                                A: 42                            },
                        }                    ],
                    parameters: [
                        {
                            defaultValue: "Test string",
                            displayName: "Test string",
                            entityTypeDisplayName: "Test string",
                            isList: true,
                            mandatory: true,
                            name: "Test string",
                            prompts: [
                                "Test string"                            ],
                            value: "Test string",
                        }                    ],
                    parentFollowupIntentName: "Test string",
                    priority: 42,
                    resetContexts: true,
                    rootFollowupIntentName: "Test string",
                    trainingPhrases: [
                        {
                            name: "Test string",
                            parts: [
                                {
                                    alias: "Test string",
                                    entityType: "Test string",
                                    text: "Test string",
                                    userDefined: true,
                                }                            ],
                            timesAddedCount: 42,
                            type: "Test string",
                        }                    ],
                    webhookState: "Test string",
                }            ],
        });
        /** Updates/Creates multiple intents in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.intents.batchUpdate({
            parent: "Test string",
        }, {
            intentBatchInline: {
                intents: [
                    {
                        action: "Test string",
                        defaultResponsePlatforms: [
                            "Test string"                        ],
                        displayName: "Test string",
                        events: [
                            "Test string"                        ],
                        followupIntentInfo: [
                            {
                                followupIntentName: "Test string",
                                parentFollowupIntentName: "Test string",
                            }                        ],
                        inputContextNames: [
                            "Test string"                        ],
                        isFallback: true,
                        messages: [
                            {
                                basicCard: {
                                    buttons: [
                                        {
                                            openUriAction: {
                                                uri: "Test string",
                                            },
                                            title: "Test string",
                                        }                                    ],
                                    formattedText: "Test string",
                                    image: {
                                        accessibilityText: "Test string",
                                        imageUri: "Test string",
                                    },
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                browseCarouselCard: {
                                    imageDisplayOptions: "Test string",
                                    items: [
                                        {
                                            description: "Test string",
                                            footer: "Test string",
                                            image: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            openUriAction: {
                                                url: "Test string",
                                                urlTypeHint: "Test string",
                                            },
                                            title: "Test string",
                                        }                                    ],
                                },
                                card: {
                                    buttons: [
                                        {
                                            postback: "Test string",
                                            text: "Test string",
                                        }                                    ],
                                    imageUri: "Test string",
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                carouselSelect: {
                                    items: [
                                        {
                                            description: "Test string",
                                            image: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            info: {
                                                key: "Test string",
                                                synonyms: [
                                                    "Test string"                                                ],
                                            },
                                            title: "Test string",
                                        }                                    ],
                                },
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                linkOutSuggestion: {
                                    destinationName: "Test string",
                                    uri: "Test string",
                                },
                                listSelect: {
                                    items: [
                                        {
                                            description: "Test string",
                                            image: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            info: {
                                                key: "Test string",
                                                synonyms: [
                                                    "Test string"                                                ],
                                            },
                                            title: "Test string",
                                        }                                    ],
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                mediaContent: {
                                    mediaObjects: [
                                        {
                                            contentUrl: "Test string",
                                            description: "Test string",
                                            icon: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            largeImage: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            name: "Test string",
                                        }                                    ],
                                    mediaType: "Test string",
                                },
                                payload: {
                                    A: 42                                },
                                platform: "Test string",
                                quickReplies: {
                                    quickReplies: [
                                        "Test string"                                    ],
                                    title: "Test string",
                                },
                                simpleResponses: {
                                    simpleResponses: [
                                        {
                                            displayText: "Test string",
                                            ssml: "Test string",
                                            textToSpeech: "Test string",
                                        }                                    ],
                                },
                                suggestions: {
                                    suggestions: [
                                        {
                                            title: "Test string",
                                        }                                    ],
                                },
                                tableCard: {
                                    buttons: [
                                        {
                                            openUriAction: {
                                                uri: "Test string",
                                            },
                                            title: "Test string",
                                        }                                    ],
                                    columnProperties: [
                                        {
                                            header: "Test string",
                                            horizontalAlignment: "Test string",
                                        }                                    ],
                                    image: {
                                        accessibilityText: "Test string",
                                        imageUri: "Test string",
                                    },
                                    rows: [
                                        {
                                            cells: [
                                                {
                                                    text: "Test string",
                                                }                                            ],
                                            dividerAfter: true,
                                        }                                    ],
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                text: {
                                    text: [
                                        "Test string"                                    ],
                                },
                            }                        ],
                        mlDisabled: true,
                        name: "Test string",
                        outputContexts: [
                            {
                                lifespanCount: 42,
                                name: "Test string",
                                parameters: {
                                    A: 42                                },
                            }                        ],
                        parameters: [
                            {
                                defaultValue: "Test string",
                                displayName: "Test string",
                                entityTypeDisplayName: "Test string",
                                isList: true,
                                mandatory: true,
                                name: "Test string",
                                prompts: [
                                    "Test string"                                ],
                                value: "Test string",
                            }                        ],
                        parentFollowupIntentName: "Test string",
                        priority: 42,
                        resetContexts: true,
                        rootFollowupIntentName: "Test string",
                        trainingPhrases: [
                            {
                                name: "Test string",
                                parts: [
                                    {
                                        alias: "Test string",
                                        entityType: "Test string",
                                        text: "Test string",
                                        userDefined: true,
                                    }                                ],
                                timesAddedCount: 42,
                                type: "Test string",
                            }                        ],
                        webhookState: "Test string",
                    }                ],
            },
            intentBatchUri: "Test string",
            intentView: "Test string",
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Creates an intent in the specified agent. */
        await gapi.client.dialogflow.projects.agent.intents.create({
            intentView: "Test string",
            languageCode: "Test string",
            parent: "Test string",
        }, {
            action: "Test string",
            defaultResponsePlatforms: [
                "Test string"            ],
            displayName: "Test string",
            events: [
                "Test string"            ],
            followupIntentInfo: [
                {
                    followupIntentName: "Test string",
                    parentFollowupIntentName: "Test string",
                }            ],
            inputContextNames: [
                "Test string"            ],
            isFallback: true,
            messages: [
                {
                    basicCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        formattedText: "Test string",
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    browseCarouselCard: {
                        imageDisplayOptions: "Test string",
                        items: [
                            {
                                description: "Test string",
                                footer: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                openUriAction: {
                                    url: "Test string",
                                    urlTypeHint: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                    },
                    card: {
                        buttons: [
                            {
                                postback: "Test string",
                                text: "Test string",
                            }                        ],
                        imageUri: "Test string",
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    carouselSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                    },
                    image: {
                        accessibilityText: "Test string",
                        imageUri: "Test string",
                    },
                    linkOutSuggestion: {
                        destinationName: "Test string",
                        uri: "Test string",
                    },
                    listSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    mediaContent: {
                        mediaObjects: [
                            {
                                contentUrl: "Test string",
                                description: "Test string",
                                icon: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                largeImage: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                name: "Test string",
                            }                        ],
                        mediaType: "Test string",
                    },
                    payload: {
                        A: 42                    },
                    platform: "Test string",
                    quickReplies: {
                        quickReplies: [
                            "Test string"                        ],
                        title: "Test string",
                    },
                    simpleResponses: {
                        simpleResponses: [
                            {
                                displayText: "Test string",
                                ssml: "Test string",
                                textToSpeech: "Test string",
                            }                        ],
                    },
                    suggestions: {
                        suggestions: [
                            {
                                title: "Test string",
                            }                        ],
                    },
                    tableCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        columnProperties: [
                            {
                                header: "Test string",
                                horizontalAlignment: "Test string",
                            }                        ],
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        rows: [
                            {
                                cells: [
                                    {
                                        text: "Test string",
                                    }                                ],
                                dividerAfter: true,
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    text: {
                        text: [
                            "Test string"                        ],
                    },
                }            ],
            mlDisabled: true,
            name: "Test string",
            outputContexts: [
                {
                    lifespanCount: 42,
                    name: "Test string",
                    parameters: {
                        A: 42                    },
                }            ],
            parameters: [
                {
                    defaultValue: "Test string",
                    displayName: "Test string",
                    entityTypeDisplayName: "Test string",
                    isList: true,
                    mandatory: true,
                    name: "Test string",
                    prompts: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            parentFollowupIntentName: "Test string",
            priority: 42,
            resetContexts: true,
            rootFollowupIntentName: "Test string",
            trainingPhrases: [
                {
                    name: "Test string",
                    parts: [
                        {
                            alias: "Test string",
                            entityType: "Test string",
                            text: "Test string",
                            userDefined: true,
                        }                    ],
                    timesAddedCount: 42,
                    type: "Test string",
                }            ],
            webhookState: "Test string",
        });
        /** Deletes the specified intent and its direct or indirect followup intents. */
        await gapi.client.dialogflow.projects.agent.intents.delete({
            name: "Test string",
        });
        /** Retrieves the specified intent. */
        await gapi.client.dialogflow.projects.agent.intents.get({
            intentView: "Test string",
            languageCode: "Test string",
            name: "Test string",
        });
        /** Returns the list of all intents in the specified agent. */
        await gapi.client.dialogflow.projects.agent.intents.list({
            intentView: "Test string",
            languageCode: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified intent. */
        await gapi.client.dialogflow.projects.agent.intents.patch({
            intentView: "Test string",
            languageCode: "Test string",
            name: "Test string",
            updateMask: "Test string",
        }, {
            action: "Test string",
            defaultResponsePlatforms: [
                "Test string"            ],
            displayName: "Test string",
            events: [
                "Test string"            ],
            followupIntentInfo: [
                {
                    followupIntentName: "Test string",
                    parentFollowupIntentName: "Test string",
                }            ],
            inputContextNames: [
                "Test string"            ],
            isFallback: true,
            messages: [
                {
                    basicCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        formattedText: "Test string",
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    browseCarouselCard: {
                        imageDisplayOptions: "Test string",
                        items: [
                            {
                                description: "Test string",
                                footer: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                openUriAction: {
                                    url: "Test string",
                                    urlTypeHint: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                    },
                    card: {
                        buttons: [
                            {
                                postback: "Test string",
                                text: "Test string",
                            }                        ],
                        imageUri: "Test string",
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    carouselSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                    },
                    image: {
                        accessibilityText: "Test string",
                        imageUri: "Test string",
                    },
                    linkOutSuggestion: {
                        destinationName: "Test string",
                        uri: "Test string",
                    },
                    listSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    mediaContent: {
                        mediaObjects: [
                            {
                                contentUrl: "Test string",
                                description: "Test string",
                                icon: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                largeImage: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                name: "Test string",
                            }                        ],
                        mediaType: "Test string",
                    },
                    payload: {
                        A: 42                    },
                    platform: "Test string",
                    quickReplies: {
                        quickReplies: [
                            "Test string"                        ],
                        title: "Test string",
                    },
                    simpleResponses: {
                        simpleResponses: [
                            {
                                displayText: "Test string",
                                ssml: "Test string",
                                textToSpeech: "Test string",
                            }                        ],
                    },
                    suggestions: {
                        suggestions: [
                            {
                                title: "Test string",
                            }                        ],
                    },
                    tableCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        columnProperties: [
                            {
                                header: "Test string",
                                horizontalAlignment: "Test string",
                            }                        ],
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        rows: [
                            {
                                cells: [
                                    {
                                        text: "Test string",
                                    }                                ],
                                dividerAfter: true,
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    text: {
                        text: [
                            "Test string"                        ],
                    },
                }            ],
            mlDisabled: true,
            name: "Test string",
            outputContexts: [
                {
                    lifespanCount: 42,
                    name: "Test string",
                    parameters: {
                        A: 42                    },
                }            ],
            parameters: [
                {
                    defaultValue: "Test string",
                    displayName: "Test string",
                    entityTypeDisplayName: "Test string",
                    isList: true,
                    mandatory: true,
                    name: "Test string",
                    prompts: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            parentFollowupIntentName: "Test string",
            priority: 42,
            resetContexts: true,
            rootFollowupIntentName: "Test string",
            trainingPhrases: [
                {
                    name: "Test string",
                    parts: [
                        {
                            alias: "Test string",
                            entityType: "Test string",
                            text: "Test string",
                            userDefined: true,
                        }                    ],
                    timesAddedCount: 42,
                    type: "Test string",
                }            ],
            webhookState: "Test string",
        });
        /** Deletes all active contexts in the specified session. */
        await gapi.client.dialogflow.projects.agent.sessions.deleteContexts({
            parent: "Test string",
        });
        /** Creates a context. If the specified context already exists, overrides the context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.create({
            parent: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /** Deletes the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.delete({
            name: "Test string",
        });
        /** Retrieves the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.get({
            name: "Test string",
        });
        /** Returns the list of all contexts in the specified session. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /**
         * Creates a session entity type. If the specified session entity type already exists, overrides the session entity type. This method doesn't work with Google Assistant integration.
         * Contact Dialogflow support if you need to use session entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.create({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /**
         * Deletes the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.delete({
            name: "Test string",
        });
        /**
         * Retrieves the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.get({
            name: "Test string",
        });
        /**
         * Returns the list of all session entity types in the specified session. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session
         * entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Updates the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /**
         * Processes a natural language query and returns structured, actionable data as a result. This method is not idempotent, because it may cause contexts and session entity types to be
         * updated, which in turn might affect results of future queries. Note: Always use agent versions for production traffic. See [Versions and
         * environments](https://cloud.google.com/dialogflow/es/docs/agents-versions).
         */
        await gapi.client.dialogflow.projects.agent.sessions.detectIntent({
            session: "Test string",
        }, {
            inputAudio: "Test string",
            outputAudioConfig: {
                audioEncoding: "Test string",
                sampleRateHertz: 42,
                synthesizeSpeechConfig: {
                    effectsProfileId: [
                        "Test string"                    ],
                    pitch: 42,
                    speakingRate: 42,
                    voice: {
                        name: "Test string",
                        ssmlGender: "Test string",
                    },
                    volumeGainDb: 42,
                },
            },
            outputAudioConfigMask: "Test string",
            queryInput: {
                audioConfig: {
                    audioEncoding: "Test string",
                    enableWordInfo: true,
                    languageCode: "Test string",
                    model: "Test string",
                    modelVariant: "Test string",
                    phraseHints: [
                        "Test string"                    ],
                    sampleRateHertz: 42,
                    singleUtterance: true,
                    speechContexts: [
                        {
                            boost: 42,
                            phrases: [
                                "Test string"                            ],
                        }                    ],
                },
                event: {
                    languageCode: "Test string",
                    name: "Test string",
                    parameters: {
                        A: 42                    },
                },
                text: {
                    languageCode: "Test string",
                    text: "Test string",
                },
            },
            queryParams: {
                contexts: [
                    {
                        lifespanCount: 42,
                        name: "Test string",
                        parameters: {
                            A: 42                        },
                    }                ],
                geoLocation: {
                    latitude: 42,
                    longitude: 42,
                },
                payload: {
                    A: 42                },
                resetContexts: true,
                sentimentAnalysisRequestConfig: {
                    analyzeQueryTextSentiment: true,
                },
                sessionEntityTypes: [
                    {
                        entities: [
                            {
                                synonyms: [
                                    "Test string"                                ],
                                value: "Test string",
                            }                        ],
                        entityOverrideMode: "Test string",
                        name: "Test string",
                    }                ],
                timeZone: "Test string",
                webhookHeaders: {
                    A: "Test string"                },
            },
        });
        /** Creates a context. If the specified context already exists, overrides the context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.create({
            parent: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /** Deletes the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.delete({
            name: "Test string",
        });
        /** Retrieves the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.get({
            name: "Test string",
        });
        /** Returns the list of all contexts in the specified session. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /**
         * Creates a session entity type. If the specified session entity type already exists, overrides the session entity type. This method doesn't work with Google Assistant integration.
         * Contact Dialogflow support if you need to use session entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.create({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /**
         * Deletes the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.delete({
            name: "Test string",
        });
        /**
         * Retrieves the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.get({
            name: "Test string",
        });
        /**
         * Returns the list of all session entity types in the specified session. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session
         * entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Updates the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /**
         * Imports the specified agent from a ZIP file. Uploads new intents and entity types without deleting the existing ones. Intents and entity types with the same name are replaced with the
         * new versions from ImportAgentRequest. After the import, the imported draft agent will be trained automatically (unless disabled in agent settings). However, once the import is done,
         * training may not be completed yet. Please call TrainAgent and wait for the operation it returns in order to train explicitly. Operation An operation which tracks when importing is
         * complete. It only tracks when the draft agent is updated not when it is done training.
         */
        await gapi.client.dialogflow.projects.agent.import({
            parent: "Test string",
        }, {
            agentContent: "Test string",
            agentUri: "Test string",
        });
        /** Deletes entity types in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.batchDelete({
            parent: "Test string",
        }, {
            entityTypeNames: [
                "Test string"            ],
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Updates/Creates multiple entity types in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.batchUpdate({
            parent: "Test string",
        }, {
            entityTypeBatchInline: {
                entityTypes: [
                    {
                        autoExpansionMode: "Test string",
                        displayName: "Test string",
                        enableFuzzyExtraction: true,
                        entities: [
                            {
                                synonyms: [
                                    "Test string"                                ],
                                value: "Test string",
                            }                        ],
                        kind: "Test string",
                        name: "Test string",
                    }                ],
            },
            entityTypeBatchUri: "Test string",
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Creates an entity type in the specified agent. */
        await gapi.client.dialogflow.projects.agent.entityTypes.create({
            languageCode: "Test string",
            parent: "Test string",
        }, {
            autoExpansionMode: "Test string",
            displayName: "Test string",
            enableFuzzyExtraction: true,
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            kind: "Test string",
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Deletes the specified entity type. */
        await gapi.client.dialogflow.projects.agent.entityTypes.delete({
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Retrieves the specified entity type. */
        await gapi.client.dialogflow.projects.agent.entityTypes.get({
            languageCode: "Test string",
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Returns the list of all entity types in the specified agent. */
        await gapi.client.dialogflow.projects.agent.entityTypes.list({
            languageCode: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Updates the specified entity type. */
        await gapi.client.dialogflow.projects.agent.entityTypes.patch({
            languageCode: "Test string",
            name: "Test string",
            updateMask: "Test string",
        }, {
            autoExpansionMode: "Test string",
            displayName: "Test string",
            enableFuzzyExtraction: true,
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            kind: "Test string",
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Returns the list of all non-draft environments of the specified agent. */
        await gapi.client.dialogflow.projects.agent.environments.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Deletes intents in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.intents.batchDelete({
            parent: "Test string",
        }, {
            intents: [
                {
                    action: "Test string",
                    defaultResponsePlatforms: [
                        "Test string"                    ],
                    displayName: "Test string",
                    events: [
                        "Test string"                    ],
                    followupIntentInfo: [
                        {
                            followupIntentName: "Test string",
                            parentFollowupIntentName: "Test string",
                        }                    ],
                    inputContextNames: [
                        "Test string"                    ],
                    isFallback: true,
                    messages: [
                        {
                            basicCard: {
                                buttons: [
                                    {
                                        openUriAction: {
                                            uri: "Test string",
                                        },
                                        title: "Test string",
                                    }                                ],
                                formattedText: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            browseCarouselCard: {
                                imageDisplayOptions: "Test string",
                                items: [
                                    {
                                        description: "Test string",
                                        footer: "Test string",
                                        image: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        openUriAction: {
                                            url: "Test string",
                                            urlTypeHint: "Test string",
                                        },
                                        title: "Test string",
                                    }                                ],
                            },
                            card: {
                                buttons: [
                                    {
                                        postback: "Test string",
                                        text: "Test string",
                                    }                                ],
                                imageUri: "Test string",
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            carouselSelect: {
                                items: [
                                    {
                                        description: "Test string",
                                        image: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        info: {
                                            key: "Test string",
                                            synonyms: [
                                                "Test string"                                            ],
                                        },
                                        title: "Test string",
                                    }                                ],
                            },
                            image: {
                                accessibilityText: "Test string",
                                imageUri: "Test string",
                            },
                            linkOutSuggestion: {
                                destinationName: "Test string",
                                uri: "Test string",
                            },
                            listSelect: {
                                items: [
                                    {
                                        description: "Test string",
                                        image: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        info: {
                                            key: "Test string",
                                            synonyms: [
                                                "Test string"                                            ],
                                        },
                                        title: "Test string",
                                    }                                ],
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            mediaContent: {
                                mediaObjects: [
                                    {
                                        contentUrl: "Test string",
                                        description: "Test string",
                                        icon: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        largeImage: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        name: "Test string",
                                    }                                ],
                                mediaType: "Test string",
                            },
                            payload: {
                                A: 42                            },
                            platform: "Test string",
                            quickReplies: {
                                quickReplies: [
                                    "Test string"                                ],
                                title: "Test string",
                            },
                            simpleResponses: {
                                simpleResponses: [
                                    {
                                        displayText: "Test string",
                                        ssml: "Test string",
                                        textToSpeech: "Test string",
                                    }                                ],
                            },
                            suggestions: {
                                suggestions: [
                                    {
                                        title: "Test string",
                                    }                                ],
                            },
                            tableCard: {
                                buttons: [
                                    {
                                        openUriAction: {
                                            uri: "Test string",
                                        },
                                        title: "Test string",
                                    }                                ],
                                columnProperties: [
                                    {
                                        header: "Test string",
                                        horizontalAlignment: "Test string",
                                    }                                ],
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                rows: [
                                    {
                                        cells: [
                                            {
                                                text: "Test string",
                                            }                                        ],
                                        dividerAfter: true,
                                    }                                ],
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            text: {
                                text: [
                                    "Test string"                                ],
                            },
                        }                    ],
                    mlDisabled: true,
                    name: "Test string",
                    outputContexts: [
                        {
                            lifespanCount: 42,
                            name: "Test string",
                            parameters: {
                                A: 42                            },
                        }                    ],
                    parameters: [
                        {
                            defaultValue: "Test string",
                            displayName: "Test string",
                            entityTypeDisplayName: "Test string",
                            isList: true,
                            mandatory: true,
                            name: "Test string",
                            prompts: [
                                "Test string"                            ],
                            value: "Test string",
                        }                    ],
                    parentFollowupIntentName: "Test string",
                    priority: 42,
                    resetContexts: true,
                    rootFollowupIntentName: "Test string",
                    trainingPhrases: [
                        {
                            name: "Test string",
                            parts: [
                                {
                                    alias: "Test string",
                                    entityType: "Test string",
                                    text: "Test string",
                                    userDefined: true,
                                }                            ],
                            timesAddedCount: 42,
                            type: "Test string",
                        }                    ],
                    webhookState: "Test string",
                }            ],
        });
        /** Updates/Creates multiple intents in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.intents.batchUpdate({
            parent: "Test string",
        }, {
            intentBatchInline: {
                intents: [
                    {
                        action: "Test string",
                        defaultResponsePlatforms: [
                            "Test string"                        ],
                        displayName: "Test string",
                        events: [
                            "Test string"                        ],
                        followupIntentInfo: [
                            {
                                followupIntentName: "Test string",
                                parentFollowupIntentName: "Test string",
                            }                        ],
                        inputContextNames: [
                            "Test string"                        ],
                        isFallback: true,
                        messages: [
                            {
                                basicCard: {
                                    buttons: [
                                        {
                                            openUriAction: {
                                                uri: "Test string",
                                            },
                                            title: "Test string",
                                        }                                    ],
                                    formattedText: "Test string",
                                    image: {
                                        accessibilityText: "Test string",
                                        imageUri: "Test string",
                                    },
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                browseCarouselCard: {
                                    imageDisplayOptions: "Test string",
                                    items: [
                                        {
                                            description: "Test string",
                                            footer: "Test string",
                                            image: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            openUriAction: {
                                                url: "Test string",
                                                urlTypeHint: "Test string",
                                            },
                                            title: "Test string",
                                        }                                    ],
                                },
                                card: {
                                    buttons: [
                                        {
                                            postback: "Test string",
                                            text: "Test string",
                                        }                                    ],
                                    imageUri: "Test string",
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                carouselSelect: {
                                    items: [
                                        {
                                            description: "Test string",
                                            image: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            info: {
                                                key: "Test string",
                                                synonyms: [
                                                    "Test string"                                                ],
                                            },
                                            title: "Test string",
                                        }                                    ],
                                },
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                linkOutSuggestion: {
                                    destinationName: "Test string",
                                    uri: "Test string",
                                },
                                listSelect: {
                                    items: [
                                        {
                                            description: "Test string",
                                            image: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            info: {
                                                key: "Test string",
                                                synonyms: [
                                                    "Test string"                                                ],
                                            },
                                            title: "Test string",
                                        }                                    ],
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                mediaContent: {
                                    mediaObjects: [
                                        {
                                            contentUrl: "Test string",
                                            description: "Test string",
                                            icon: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            largeImage: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            name: "Test string",
                                        }                                    ],
                                    mediaType: "Test string",
                                },
                                payload: {
                                    A: 42                                },
                                platform: "Test string",
                                quickReplies: {
                                    quickReplies: [
                                        "Test string"                                    ],
                                    title: "Test string",
                                },
                                simpleResponses: {
                                    simpleResponses: [
                                        {
                                            displayText: "Test string",
                                            ssml: "Test string",
                                            textToSpeech: "Test string",
                                        }                                    ],
                                },
                                suggestions: {
                                    suggestions: [
                                        {
                                            title: "Test string",
                                        }                                    ],
                                },
                                tableCard: {
                                    buttons: [
                                        {
                                            openUriAction: {
                                                uri: "Test string",
                                            },
                                            title: "Test string",
                                        }                                    ],
                                    columnProperties: [
                                        {
                                            header: "Test string",
                                            horizontalAlignment: "Test string",
                                        }                                    ],
                                    image: {
                                        accessibilityText: "Test string",
                                        imageUri: "Test string",
                                    },
                                    rows: [
                                        {
                                            cells: [
                                                {
                                                    text: "Test string",
                                                }                                            ],
                                            dividerAfter: true,
                                        }                                    ],
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                text: {
                                    text: [
                                        "Test string"                                    ],
                                },
                            }                        ],
                        mlDisabled: true,
                        name: "Test string",
                        outputContexts: [
                            {
                                lifespanCount: 42,
                                name: "Test string",
                                parameters: {
                                    A: 42                                },
                            }                        ],
                        parameters: [
                            {
                                defaultValue: "Test string",
                                displayName: "Test string",
                                entityTypeDisplayName: "Test string",
                                isList: true,
                                mandatory: true,
                                name: "Test string",
                                prompts: [
                                    "Test string"                                ],
                                value: "Test string",
                            }                        ],
                        parentFollowupIntentName: "Test string",
                        priority: 42,
                        resetContexts: true,
                        rootFollowupIntentName: "Test string",
                        trainingPhrases: [
                            {
                                name: "Test string",
                                parts: [
                                    {
                                        alias: "Test string",
                                        entityType: "Test string",
                                        text: "Test string",
                                        userDefined: true,
                                    }                                ],
                                timesAddedCount: 42,
                                type: "Test string",
                            }                        ],
                        webhookState: "Test string",
                    }                ],
            },
            intentBatchUri: "Test string",
            intentView: "Test string",
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Creates an intent in the specified agent. */
        await gapi.client.dialogflow.projects.agent.intents.create({
            intentView: "Test string",
            languageCode: "Test string",
            parent: "Test string",
        }, {
            action: "Test string",
            defaultResponsePlatforms: [
                "Test string"            ],
            displayName: "Test string",
            events: [
                "Test string"            ],
            followupIntentInfo: [
                {
                    followupIntentName: "Test string",
                    parentFollowupIntentName: "Test string",
                }            ],
            inputContextNames: [
                "Test string"            ],
            isFallback: true,
            messages: [
                {
                    basicCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        formattedText: "Test string",
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    browseCarouselCard: {
                        imageDisplayOptions: "Test string",
                        items: [
                            {
                                description: "Test string",
                                footer: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                openUriAction: {
                                    url: "Test string",
                                    urlTypeHint: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                    },
                    card: {
                        buttons: [
                            {
                                postback: "Test string",
                                text: "Test string",
                            }                        ],
                        imageUri: "Test string",
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    carouselSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                    },
                    image: {
                        accessibilityText: "Test string",
                        imageUri: "Test string",
                    },
                    linkOutSuggestion: {
                        destinationName: "Test string",
                        uri: "Test string",
                    },
                    listSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    mediaContent: {
                        mediaObjects: [
                            {
                                contentUrl: "Test string",
                                description: "Test string",
                                icon: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                largeImage: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                name: "Test string",
                            }                        ],
                        mediaType: "Test string",
                    },
                    payload: {
                        A: 42                    },
                    platform: "Test string",
                    quickReplies: {
                        quickReplies: [
                            "Test string"                        ],
                        title: "Test string",
                    },
                    simpleResponses: {
                        simpleResponses: [
                            {
                                displayText: "Test string",
                                ssml: "Test string",
                                textToSpeech: "Test string",
                            }                        ],
                    },
                    suggestions: {
                        suggestions: [
                            {
                                title: "Test string",
                            }                        ],
                    },
                    tableCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        columnProperties: [
                            {
                                header: "Test string",
                                horizontalAlignment: "Test string",
                            }                        ],
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        rows: [
                            {
                                cells: [
                                    {
                                        text: "Test string",
                                    }                                ],
                                dividerAfter: true,
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    text: {
                        text: [
                            "Test string"                        ],
                    },
                }            ],
            mlDisabled: true,
            name: "Test string",
            outputContexts: [
                {
                    lifespanCount: 42,
                    name: "Test string",
                    parameters: {
                        A: 42                    },
                }            ],
            parameters: [
                {
                    defaultValue: "Test string",
                    displayName: "Test string",
                    entityTypeDisplayName: "Test string",
                    isList: true,
                    mandatory: true,
                    name: "Test string",
                    prompts: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            parentFollowupIntentName: "Test string",
            priority: 42,
            resetContexts: true,
            rootFollowupIntentName: "Test string",
            trainingPhrases: [
                {
                    name: "Test string",
                    parts: [
                        {
                            alias: "Test string",
                            entityType: "Test string",
                            text: "Test string",
                            userDefined: true,
                        }                    ],
                    timesAddedCount: 42,
                    type: "Test string",
                }            ],
            webhookState: "Test string",
        });
        /** Deletes the specified intent and its direct or indirect followup intents. */
        await gapi.client.dialogflow.projects.agent.intents.delete({
            name: "Test string",
        });
        /** Retrieves the specified intent. */
        await gapi.client.dialogflow.projects.agent.intents.get({
            intentView: "Test string",
            languageCode: "Test string",
            name: "Test string",
        });
        /** Returns the list of all intents in the specified agent. */
        await gapi.client.dialogflow.projects.agent.intents.list({
            intentView: "Test string",
            languageCode: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified intent. */
        await gapi.client.dialogflow.projects.agent.intents.patch({
            intentView: "Test string",
            languageCode: "Test string",
            name: "Test string",
            updateMask: "Test string",
        }, {
            action: "Test string",
            defaultResponsePlatforms: [
                "Test string"            ],
            displayName: "Test string",
            events: [
                "Test string"            ],
            followupIntentInfo: [
                {
                    followupIntentName: "Test string",
                    parentFollowupIntentName: "Test string",
                }            ],
            inputContextNames: [
                "Test string"            ],
            isFallback: true,
            messages: [
                {
                    basicCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        formattedText: "Test string",
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    browseCarouselCard: {
                        imageDisplayOptions: "Test string",
                        items: [
                            {
                                description: "Test string",
                                footer: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                openUriAction: {
                                    url: "Test string",
                                    urlTypeHint: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                    },
                    card: {
                        buttons: [
                            {
                                postback: "Test string",
                                text: "Test string",
                            }                        ],
                        imageUri: "Test string",
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    carouselSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                    },
                    image: {
                        accessibilityText: "Test string",
                        imageUri: "Test string",
                    },
                    linkOutSuggestion: {
                        destinationName: "Test string",
                        uri: "Test string",
                    },
                    listSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    mediaContent: {
                        mediaObjects: [
                            {
                                contentUrl: "Test string",
                                description: "Test string",
                                icon: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                largeImage: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                name: "Test string",
                            }                        ],
                        mediaType: "Test string",
                    },
                    payload: {
                        A: 42                    },
                    platform: "Test string",
                    quickReplies: {
                        quickReplies: [
                            "Test string"                        ],
                        title: "Test string",
                    },
                    simpleResponses: {
                        simpleResponses: [
                            {
                                displayText: "Test string",
                                ssml: "Test string",
                                textToSpeech: "Test string",
                            }                        ],
                    },
                    suggestions: {
                        suggestions: [
                            {
                                title: "Test string",
                            }                        ],
                    },
                    tableCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        columnProperties: [
                            {
                                header: "Test string",
                                horizontalAlignment: "Test string",
                            }                        ],
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        rows: [
                            {
                                cells: [
                                    {
                                        text: "Test string",
                                    }                                ],
                                dividerAfter: true,
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    text: {
                        text: [
                            "Test string"                        ],
                    },
                }            ],
            mlDisabled: true,
            name: "Test string",
            outputContexts: [
                {
                    lifespanCount: 42,
                    name: "Test string",
                    parameters: {
                        A: 42                    },
                }            ],
            parameters: [
                {
                    defaultValue: "Test string",
                    displayName: "Test string",
                    entityTypeDisplayName: "Test string",
                    isList: true,
                    mandatory: true,
                    name: "Test string",
                    prompts: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            parentFollowupIntentName: "Test string",
            priority: 42,
            resetContexts: true,
            rootFollowupIntentName: "Test string",
            trainingPhrases: [
                {
                    name: "Test string",
                    parts: [
                        {
                            alias: "Test string",
                            entityType: "Test string",
                            text: "Test string",
                            userDefined: true,
                        }                    ],
                    timesAddedCount: 42,
                    type: "Test string",
                }            ],
            webhookState: "Test string",
        });
        /** Deletes all active contexts in the specified session. */
        await gapi.client.dialogflow.projects.agent.sessions.deleteContexts({
            parent: "Test string",
        });
        /** Creates a context. If the specified context already exists, overrides the context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.create({
            parent: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /** Deletes the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.delete({
            name: "Test string",
        });
        /** Retrieves the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.get({
            name: "Test string",
        });
        /** Returns the list of all contexts in the specified session. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /**
         * Creates a session entity type. If the specified session entity type already exists, overrides the session entity type. This method doesn't work with Google Assistant integration.
         * Contact Dialogflow support if you need to use session entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.create({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /**
         * Deletes the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.delete({
            name: "Test string",
        });
        /**
         * Retrieves the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.get({
            name: "Test string",
        });
        /**
         * Returns the list of all session entity types in the specified session. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session
         * entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Updates the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /**
         * Processes a natural language query and returns structured, actionable data as a result. This method is not idempotent, because it may cause contexts and session entity types to be
         * updated, which in turn might affect results of future queries. Note: Always use agent versions for production traffic. See [Versions and
         * environments](https://cloud.google.com/dialogflow/es/docs/agents-versions).
         */
        await gapi.client.dialogflow.projects.agent.sessions.detectIntent({
            session: "Test string",
        }, {
            inputAudio: "Test string",
            outputAudioConfig: {
                audioEncoding: "Test string",
                sampleRateHertz: 42,
                synthesizeSpeechConfig: {
                    effectsProfileId: [
                        "Test string"                    ],
                    pitch: 42,
                    speakingRate: 42,
                    voice: {
                        name: "Test string",
                        ssmlGender: "Test string",
                    },
                    volumeGainDb: 42,
                },
            },
            outputAudioConfigMask: "Test string",
            queryInput: {
                audioConfig: {
                    audioEncoding: "Test string",
                    enableWordInfo: true,
                    languageCode: "Test string",
                    model: "Test string",
                    modelVariant: "Test string",
                    phraseHints: [
                        "Test string"                    ],
                    sampleRateHertz: 42,
                    singleUtterance: true,
                    speechContexts: [
                        {
                            boost: 42,
                            phrases: [
                                "Test string"                            ],
                        }                    ],
                },
                event: {
                    languageCode: "Test string",
                    name: "Test string",
                    parameters: {
                        A: 42                    },
                },
                text: {
                    languageCode: "Test string",
                    text: "Test string",
                },
            },
            queryParams: {
                contexts: [
                    {
                        lifespanCount: 42,
                        name: "Test string",
                        parameters: {
                            A: 42                        },
                    }                ],
                geoLocation: {
                    latitude: 42,
                    longitude: 42,
                },
                payload: {
                    A: 42                },
                resetContexts: true,
                sentimentAnalysisRequestConfig: {
                    analyzeQueryTextSentiment: true,
                },
                sessionEntityTypes: [
                    {
                        entities: [
                            {
                                synonyms: [
                                    "Test string"                                ],
                                value: "Test string",
                            }                        ],
                        entityOverrideMode: "Test string",
                        name: "Test string",
                    }                ],
                timeZone: "Test string",
                webhookHeaders: {
                    A: "Test string"                },
            },
        });
        /** Creates a context. If the specified context already exists, overrides the context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.create({
            parent: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /** Deletes the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.delete({
            name: "Test string",
        });
        /** Retrieves the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.get({
            name: "Test string",
        });
        /** Returns the list of all contexts in the specified session. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /**
         * Creates a session entity type. If the specified session entity type already exists, overrides the session entity type. This method doesn't work with Google Assistant integration.
         * Contact Dialogflow support if you need to use session entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.create({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /**
         * Deletes the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.delete({
            name: "Test string",
        });
        /**
         * Retrieves the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.get({
            name: "Test string",
        });
        /**
         * Returns the list of all session entity types in the specified session. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session
         * entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Updates the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /**
         * Restores the specified agent from a ZIP file. Replaces the current agent version with a new one. All the intents and entity types in the older version are deleted. After the restore,
         * the restored draft agent will be trained automatically (unless disabled in agent settings). However, once the restore is done, training may not be completed yet. Please call TrainAgent
         * and wait for the operation it returns in order to train explicitly. Operation An operation which tracks when restoring is complete. It only tracks when the draft agent is updated not
         * when it is done training.
         */
        await gapi.client.dialogflow.projects.agent.restore({
            parent: "Test string",
        }, {
            agentContent: "Test string",
            agentUri: "Test string",
        });
        /** Deletes entity types in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.batchDelete({
            parent: "Test string",
        }, {
            entityTypeNames: [
                "Test string"            ],
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Updates/Creates multiple entity types in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.batchUpdate({
            parent: "Test string",
        }, {
            entityTypeBatchInline: {
                entityTypes: [
                    {
                        autoExpansionMode: "Test string",
                        displayName: "Test string",
                        enableFuzzyExtraction: true,
                        entities: [
                            {
                                synonyms: [
                                    "Test string"                                ],
                                value: "Test string",
                            }                        ],
                        kind: "Test string",
                        name: "Test string",
                    }                ],
            },
            entityTypeBatchUri: "Test string",
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Creates an entity type in the specified agent. */
        await gapi.client.dialogflow.projects.agent.entityTypes.create({
            languageCode: "Test string",
            parent: "Test string",
        }, {
            autoExpansionMode: "Test string",
            displayName: "Test string",
            enableFuzzyExtraction: true,
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            kind: "Test string",
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Deletes the specified entity type. */
        await gapi.client.dialogflow.projects.agent.entityTypes.delete({
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Retrieves the specified entity type. */
        await gapi.client.dialogflow.projects.agent.entityTypes.get({
            languageCode: "Test string",
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Returns the list of all entity types in the specified agent. */
        await gapi.client.dialogflow.projects.agent.entityTypes.list({
            languageCode: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Updates the specified entity type. */
        await gapi.client.dialogflow.projects.agent.entityTypes.patch({
            languageCode: "Test string",
            name: "Test string",
            updateMask: "Test string",
        }, {
            autoExpansionMode: "Test string",
            displayName: "Test string",
            enableFuzzyExtraction: true,
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            kind: "Test string",
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Returns the list of all non-draft environments of the specified agent. */
        await gapi.client.dialogflow.projects.agent.environments.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Deletes intents in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.intents.batchDelete({
            parent: "Test string",
        }, {
            intents: [
                {
                    action: "Test string",
                    defaultResponsePlatforms: [
                        "Test string"                    ],
                    displayName: "Test string",
                    events: [
                        "Test string"                    ],
                    followupIntentInfo: [
                        {
                            followupIntentName: "Test string",
                            parentFollowupIntentName: "Test string",
                        }                    ],
                    inputContextNames: [
                        "Test string"                    ],
                    isFallback: true,
                    messages: [
                        {
                            basicCard: {
                                buttons: [
                                    {
                                        openUriAction: {
                                            uri: "Test string",
                                        },
                                        title: "Test string",
                                    }                                ],
                                formattedText: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            browseCarouselCard: {
                                imageDisplayOptions: "Test string",
                                items: [
                                    {
                                        description: "Test string",
                                        footer: "Test string",
                                        image: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        openUriAction: {
                                            url: "Test string",
                                            urlTypeHint: "Test string",
                                        },
                                        title: "Test string",
                                    }                                ],
                            },
                            card: {
                                buttons: [
                                    {
                                        postback: "Test string",
                                        text: "Test string",
                                    }                                ],
                                imageUri: "Test string",
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            carouselSelect: {
                                items: [
                                    {
                                        description: "Test string",
                                        image: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        info: {
                                            key: "Test string",
                                            synonyms: [
                                                "Test string"                                            ],
                                        },
                                        title: "Test string",
                                    }                                ],
                            },
                            image: {
                                accessibilityText: "Test string",
                                imageUri: "Test string",
                            },
                            linkOutSuggestion: {
                                destinationName: "Test string",
                                uri: "Test string",
                            },
                            listSelect: {
                                items: [
                                    {
                                        description: "Test string",
                                        image: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        info: {
                                            key: "Test string",
                                            synonyms: [
                                                "Test string"                                            ],
                                        },
                                        title: "Test string",
                                    }                                ],
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            mediaContent: {
                                mediaObjects: [
                                    {
                                        contentUrl: "Test string",
                                        description: "Test string",
                                        icon: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        largeImage: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        name: "Test string",
                                    }                                ],
                                mediaType: "Test string",
                            },
                            payload: {
                                A: 42                            },
                            platform: "Test string",
                            quickReplies: {
                                quickReplies: [
                                    "Test string"                                ],
                                title: "Test string",
                            },
                            simpleResponses: {
                                simpleResponses: [
                                    {
                                        displayText: "Test string",
                                        ssml: "Test string",
                                        textToSpeech: "Test string",
                                    }                                ],
                            },
                            suggestions: {
                                suggestions: [
                                    {
                                        title: "Test string",
                                    }                                ],
                            },
                            tableCard: {
                                buttons: [
                                    {
                                        openUriAction: {
                                            uri: "Test string",
                                        },
                                        title: "Test string",
                                    }                                ],
                                columnProperties: [
                                    {
                                        header: "Test string",
                                        horizontalAlignment: "Test string",
                                    }                                ],
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                rows: [
                                    {
                                        cells: [
                                            {
                                                text: "Test string",
                                            }                                        ],
                                        dividerAfter: true,
                                    }                                ],
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            text: {
                                text: [
                                    "Test string"                                ],
                            },
                        }                    ],
                    mlDisabled: true,
                    name: "Test string",
                    outputContexts: [
                        {
                            lifespanCount: 42,
                            name: "Test string",
                            parameters: {
                                A: 42                            },
                        }                    ],
                    parameters: [
                        {
                            defaultValue: "Test string",
                            displayName: "Test string",
                            entityTypeDisplayName: "Test string",
                            isList: true,
                            mandatory: true,
                            name: "Test string",
                            prompts: [
                                "Test string"                            ],
                            value: "Test string",
                        }                    ],
                    parentFollowupIntentName: "Test string",
                    priority: 42,
                    resetContexts: true,
                    rootFollowupIntentName: "Test string",
                    trainingPhrases: [
                        {
                            name: "Test string",
                            parts: [
                                {
                                    alias: "Test string",
                                    entityType: "Test string",
                                    text: "Test string",
                                    userDefined: true,
                                }                            ],
                            timesAddedCount: 42,
                            type: "Test string",
                        }                    ],
                    webhookState: "Test string",
                }            ],
        });
        /** Updates/Creates multiple intents in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.intents.batchUpdate({
            parent: "Test string",
        }, {
            intentBatchInline: {
                intents: [
                    {
                        action: "Test string",
                        defaultResponsePlatforms: [
                            "Test string"                        ],
                        displayName: "Test string",
                        events: [
                            "Test string"                        ],
                        followupIntentInfo: [
                            {
                                followupIntentName: "Test string",
                                parentFollowupIntentName: "Test string",
                            }                        ],
                        inputContextNames: [
                            "Test string"                        ],
                        isFallback: true,
                        messages: [
                            {
                                basicCard: {
                                    buttons: [
                                        {
                                            openUriAction: {
                                                uri: "Test string",
                                            },
                                            title: "Test string",
                                        }                                    ],
                                    formattedText: "Test string",
                                    image: {
                                        accessibilityText: "Test string",
                                        imageUri: "Test string",
                                    },
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                browseCarouselCard: {
                                    imageDisplayOptions: "Test string",
                                    items: [
                                        {
                                            description: "Test string",
                                            footer: "Test string",
                                            image: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            openUriAction: {
                                                url: "Test string",
                                                urlTypeHint: "Test string",
                                            },
                                            title: "Test string",
                                        }                                    ],
                                },
                                card: {
                                    buttons: [
                                        {
                                            postback: "Test string",
                                            text: "Test string",
                                        }                                    ],
                                    imageUri: "Test string",
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                carouselSelect: {
                                    items: [
                                        {
                                            description: "Test string",
                                            image: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            info: {
                                                key: "Test string",
                                                synonyms: [
                                                    "Test string"                                                ],
                                            },
                                            title: "Test string",
                                        }                                    ],
                                },
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                linkOutSuggestion: {
                                    destinationName: "Test string",
                                    uri: "Test string",
                                },
                                listSelect: {
                                    items: [
                                        {
                                            description: "Test string",
                                            image: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            info: {
                                                key: "Test string",
                                                synonyms: [
                                                    "Test string"                                                ],
                                            },
                                            title: "Test string",
                                        }                                    ],
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                mediaContent: {
                                    mediaObjects: [
                                        {
                                            contentUrl: "Test string",
                                            description: "Test string",
                                            icon: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            largeImage: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            name: "Test string",
                                        }                                    ],
                                    mediaType: "Test string",
                                },
                                payload: {
                                    A: 42                                },
                                platform: "Test string",
                                quickReplies: {
                                    quickReplies: [
                                        "Test string"                                    ],
                                    title: "Test string",
                                },
                                simpleResponses: {
                                    simpleResponses: [
                                        {
                                            displayText: "Test string",
                                            ssml: "Test string",
                                            textToSpeech: "Test string",
                                        }                                    ],
                                },
                                suggestions: {
                                    suggestions: [
                                        {
                                            title: "Test string",
                                        }                                    ],
                                },
                                tableCard: {
                                    buttons: [
                                        {
                                            openUriAction: {
                                                uri: "Test string",
                                            },
                                            title: "Test string",
                                        }                                    ],
                                    columnProperties: [
                                        {
                                            header: "Test string",
                                            horizontalAlignment: "Test string",
                                        }                                    ],
                                    image: {
                                        accessibilityText: "Test string",
                                        imageUri: "Test string",
                                    },
                                    rows: [
                                        {
                                            cells: [
                                                {
                                                    text: "Test string",
                                                }                                            ],
                                            dividerAfter: true,
                                        }                                    ],
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                text: {
                                    text: [
                                        "Test string"                                    ],
                                },
                            }                        ],
                        mlDisabled: true,
                        name: "Test string",
                        outputContexts: [
                            {
                                lifespanCount: 42,
                                name: "Test string",
                                parameters: {
                                    A: 42                                },
                            }                        ],
                        parameters: [
                            {
                                defaultValue: "Test string",
                                displayName: "Test string",
                                entityTypeDisplayName: "Test string",
                                isList: true,
                                mandatory: true,
                                name: "Test string",
                                prompts: [
                                    "Test string"                                ],
                                value: "Test string",
                            }                        ],
                        parentFollowupIntentName: "Test string",
                        priority: 42,
                        resetContexts: true,
                        rootFollowupIntentName: "Test string",
                        trainingPhrases: [
                            {
                                name: "Test string",
                                parts: [
                                    {
                                        alias: "Test string",
                                        entityType: "Test string",
                                        text: "Test string",
                                        userDefined: true,
                                    }                                ],
                                timesAddedCount: 42,
                                type: "Test string",
                            }                        ],
                        webhookState: "Test string",
                    }                ],
            },
            intentBatchUri: "Test string",
            intentView: "Test string",
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Creates an intent in the specified agent. */
        await gapi.client.dialogflow.projects.agent.intents.create({
            intentView: "Test string",
            languageCode: "Test string",
            parent: "Test string",
        }, {
            action: "Test string",
            defaultResponsePlatforms: [
                "Test string"            ],
            displayName: "Test string",
            events: [
                "Test string"            ],
            followupIntentInfo: [
                {
                    followupIntentName: "Test string",
                    parentFollowupIntentName: "Test string",
                }            ],
            inputContextNames: [
                "Test string"            ],
            isFallback: true,
            messages: [
                {
                    basicCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        formattedText: "Test string",
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    browseCarouselCard: {
                        imageDisplayOptions: "Test string",
                        items: [
                            {
                                description: "Test string",
                                footer: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                openUriAction: {
                                    url: "Test string",
                                    urlTypeHint: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                    },
                    card: {
                        buttons: [
                            {
                                postback: "Test string",
                                text: "Test string",
                            }                        ],
                        imageUri: "Test string",
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    carouselSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                    },
                    image: {
                        accessibilityText: "Test string",
                        imageUri: "Test string",
                    },
                    linkOutSuggestion: {
                        destinationName: "Test string",
                        uri: "Test string",
                    },
                    listSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    mediaContent: {
                        mediaObjects: [
                            {
                                contentUrl: "Test string",
                                description: "Test string",
                                icon: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                largeImage: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                name: "Test string",
                            }                        ],
                        mediaType: "Test string",
                    },
                    payload: {
                        A: 42                    },
                    platform: "Test string",
                    quickReplies: {
                        quickReplies: [
                            "Test string"                        ],
                        title: "Test string",
                    },
                    simpleResponses: {
                        simpleResponses: [
                            {
                                displayText: "Test string",
                                ssml: "Test string",
                                textToSpeech: "Test string",
                            }                        ],
                    },
                    suggestions: {
                        suggestions: [
                            {
                                title: "Test string",
                            }                        ],
                    },
                    tableCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        columnProperties: [
                            {
                                header: "Test string",
                                horizontalAlignment: "Test string",
                            }                        ],
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        rows: [
                            {
                                cells: [
                                    {
                                        text: "Test string",
                                    }                                ],
                                dividerAfter: true,
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    text: {
                        text: [
                            "Test string"                        ],
                    },
                }            ],
            mlDisabled: true,
            name: "Test string",
            outputContexts: [
                {
                    lifespanCount: 42,
                    name: "Test string",
                    parameters: {
                        A: 42                    },
                }            ],
            parameters: [
                {
                    defaultValue: "Test string",
                    displayName: "Test string",
                    entityTypeDisplayName: "Test string",
                    isList: true,
                    mandatory: true,
                    name: "Test string",
                    prompts: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            parentFollowupIntentName: "Test string",
            priority: 42,
            resetContexts: true,
            rootFollowupIntentName: "Test string",
            trainingPhrases: [
                {
                    name: "Test string",
                    parts: [
                        {
                            alias: "Test string",
                            entityType: "Test string",
                            text: "Test string",
                            userDefined: true,
                        }                    ],
                    timesAddedCount: 42,
                    type: "Test string",
                }            ],
            webhookState: "Test string",
        });
        /** Deletes the specified intent and its direct or indirect followup intents. */
        await gapi.client.dialogflow.projects.agent.intents.delete({
            name: "Test string",
        });
        /** Retrieves the specified intent. */
        await gapi.client.dialogflow.projects.agent.intents.get({
            intentView: "Test string",
            languageCode: "Test string",
            name: "Test string",
        });
        /** Returns the list of all intents in the specified agent. */
        await gapi.client.dialogflow.projects.agent.intents.list({
            intentView: "Test string",
            languageCode: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified intent. */
        await gapi.client.dialogflow.projects.agent.intents.patch({
            intentView: "Test string",
            languageCode: "Test string",
            name: "Test string",
            updateMask: "Test string",
        }, {
            action: "Test string",
            defaultResponsePlatforms: [
                "Test string"            ],
            displayName: "Test string",
            events: [
                "Test string"            ],
            followupIntentInfo: [
                {
                    followupIntentName: "Test string",
                    parentFollowupIntentName: "Test string",
                }            ],
            inputContextNames: [
                "Test string"            ],
            isFallback: true,
            messages: [
                {
                    basicCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        formattedText: "Test string",
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    browseCarouselCard: {
                        imageDisplayOptions: "Test string",
                        items: [
                            {
                                description: "Test string",
                                footer: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                openUriAction: {
                                    url: "Test string",
                                    urlTypeHint: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                    },
                    card: {
                        buttons: [
                            {
                                postback: "Test string",
                                text: "Test string",
                            }                        ],
                        imageUri: "Test string",
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    carouselSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                    },
                    image: {
                        accessibilityText: "Test string",
                        imageUri: "Test string",
                    },
                    linkOutSuggestion: {
                        destinationName: "Test string",
                        uri: "Test string",
                    },
                    listSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    mediaContent: {
                        mediaObjects: [
                            {
                                contentUrl: "Test string",
                                description: "Test string",
                                icon: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                largeImage: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                name: "Test string",
                            }                        ],
                        mediaType: "Test string",
                    },
                    payload: {
                        A: 42                    },
                    platform: "Test string",
                    quickReplies: {
                        quickReplies: [
                            "Test string"                        ],
                        title: "Test string",
                    },
                    simpleResponses: {
                        simpleResponses: [
                            {
                                displayText: "Test string",
                                ssml: "Test string",
                                textToSpeech: "Test string",
                            }                        ],
                    },
                    suggestions: {
                        suggestions: [
                            {
                                title: "Test string",
                            }                        ],
                    },
                    tableCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        columnProperties: [
                            {
                                header: "Test string",
                                horizontalAlignment: "Test string",
                            }                        ],
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        rows: [
                            {
                                cells: [
                                    {
                                        text: "Test string",
                                    }                                ],
                                dividerAfter: true,
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    text: {
                        text: [
                            "Test string"                        ],
                    },
                }            ],
            mlDisabled: true,
            name: "Test string",
            outputContexts: [
                {
                    lifespanCount: 42,
                    name: "Test string",
                    parameters: {
                        A: 42                    },
                }            ],
            parameters: [
                {
                    defaultValue: "Test string",
                    displayName: "Test string",
                    entityTypeDisplayName: "Test string",
                    isList: true,
                    mandatory: true,
                    name: "Test string",
                    prompts: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            parentFollowupIntentName: "Test string",
            priority: 42,
            resetContexts: true,
            rootFollowupIntentName: "Test string",
            trainingPhrases: [
                {
                    name: "Test string",
                    parts: [
                        {
                            alias: "Test string",
                            entityType: "Test string",
                            text: "Test string",
                            userDefined: true,
                        }                    ],
                    timesAddedCount: 42,
                    type: "Test string",
                }            ],
            webhookState: "Test string",
        });
        /** Deletes all active contexts in the specified session. */
        await gapi.client.dialogflow.projects.agent.sessions.deleteContexts({
            parent: "Test string",
        });
        /** Creates a context. If the specified context already exists, overrides the context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.create({
            parent: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /** Deletes the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.delete({
            name: "Test string",
        });
        /** Retrieves the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.get({
            name: "Test string",
        });
        /** Returns the list of all contexts in the specified session. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /**
         * Creates a session entity type. If the specified session entity type already exists, overrides the session entity type. This method doesn't work with Google Assistant integration.
         * Contact Dialogflow support if you need to use session entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.create({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /**
         * Deletes the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.delete({
            name: "Test string",
        });
        /**
         * Retrieves the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.get({
            name: "Test string",
        });
        /**
         * Returns the list of all session entity types in the specified session. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session
         * entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Updates the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /**
         * Processes a natural language query and returns structured, actionable data as a result. This method is not idempotent, because it may cause contexts and session entity types to be
         * updated, which in turn might affect results of future queries. Note: Always use agent versions for production traffic. See [Versions and
         * environments](https://cloud.google.com/dialogflow/es/docs/agents-versions).
         */
        await gapi.client.dialogflow.projects.agent.sessions.detectIntent({
            session: "Test string",
        }, {
            inputAudio: "Test string",
            outputAudioConfig: {
                audioEncoding: "Test string",
                sampleRateHertz: 42,
                synthesizeSpeechConfig: {
                    effectsProfileId: [
                        "Test string"                    ],
                    pitch: 42,
                    speakingRate: 42,
                    voice: {
                        name: "Test string",
                        ssmlGender: "Test string",
                    },
                    volumeGainDb: 42,
                },
            },
            outputAudioConfigMask: "Test string",
            queryInput: {
                audioConfig: {
                    audioEncoding: "Test string",
                    enableWordInfo: true,
                    languageCode: "Test string",
                    model: "Test string",
                    modelVariant: "Test string",
                    phraseHints: [
                        "Test string"                    ],
                    sampleRateHertz: 42,
                    singleUtterance: true,
                    speechContexts: [
                        {
                            boost: 42,
                            phrases: [
                                "Test string"                            ],
                        }                    ],
                },
                event: {
                    languageCode: "Test string",
                    name: "Test string",
                    parameters: {
                        A: 42                    },
                },
                text: {
                    languageCode: "Test string",
                    text: "Test string",
                },
            },
            queryParams: {
                contexts: [
                    {
                        lifespanCount: 42,
                        name: "Test string",
                        parameters: {
                            A: 42                        },
                    }                ],
                geoLocation: {
                    latitude: 42,
                    longitude: 42,
                },
                payload: {
                    A: 42                },
                resetContexts: true,
                sentimentAnalysisRequestConfig: {
                    analyzeQueryTextSentiment: true,
                },
                sessionEntityTypes: [
                    {
                        entities: [
                            {
                                synonyms: [
                                    "Test string"                                ],
                                value: "Test string",
                            }                        ],
                        entityOverrideMode: "Test string",
                        name: "Test string",
                    }                ],
                timeZone: "Test string",
                webhookHeaders: {
                    A: "Test string"                },
            },
        });
        /** Creates a context. If the specified context already exists, overrides the context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.create({
            parent: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /** Deletes the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.delete({
            name: "Test string",
        });
        /** Retrieves the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.get({
            name: "Test string",
        });
        /** Returns the list of all contexts in the specified session. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /**
         * Creates a session entity type. If the specified session entity type already exists, overrides the session entity type. This method doesn't work with Google Assistant integration.
         * Contact Dialogflow support if you need to use session entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.create({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /**
         * Deletes the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.delete({
            name: "Test string",
        });
        /**
         * Retrieves the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.get({
            name: "Test string",
        });
        /**
         * Returns the list of all session entity types in the specified session. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session
         * entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Updates the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /**
         * Returns the list of agents. Since there is at most one conversational agent per project, this method is useful primarily for listing all agents across projects the caller has access to.
         * One can achieve that with a wildcard project collection id "-". Refer to [List Sub-Collections](https://cloud.google.com/apis/design/design_patterns#list_sub-collections).
         */
        await gapi.client.dialogflow.projects.agent.search({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Deletes entity types in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.batchDelete({
            parent: "Test string",
        }, {
            entityTypeNames: [
                "Test string"            ],
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Updates/Creates multiple entity types in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.batchUpdate({
            parent: "Test string",
        }, {
            entityTypeBatchInline: {
                entityTypes: [
                    {
                        autoExpansionMode: "Test string",
                        displayName: "Test string",
                        enableFuzzyExtraction: true,
                        entities: [
                            {
                                synonyms: [
                                    "Test string"                                ],
                                value: "Test string",
                            }                        ],
                        kind: "Test string",
                        name: "Test string",
                    }                ],
            },
            entityTypeBatchUri: "Test string",
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Creates an entity type in the specified agent. */
        await gapi.client.dialogflow.projects.agent.entityTypes.create({
            languageCode: "Test string",
            parent: "Test string",
        }, {
            autoExpansionMode: "Test string",
            displayName: "Test string",
            enableFuzzyExtraction: true,
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            kind: "Test string",
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Deletes the specified entity type. */
        await gapi.client.dialogflow.projects.agent.entityTypes.delete({
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Retrieves the specified entity type. */
        await gapi.client.dialogflow.projects.agent.entityTypes.get({
            languageCode: "Test string",
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Returns the list of all entity types in the specified agent. */
        await gapi.client.dialogflow.projects.agent.entityTypes.list({
            languageCode: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Updates the specified entity type. */
        await gapi.client.dialogflow.projects.agent.entityTypes.patch({
            languageCode: "Test string",
            name: "Test string",
            updateMask: "Test string",
        }, {
            autoExpansionMode: "Test string",
            displayName: "Test string",
            enableFuzzyExtraction: true,
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            kind: "Test string",
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Returns the list of all non-draft environments of the specified agent. */
        await gapi.client.dialogflow.projects.agent.environments.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Deletes intents in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.intents.batchDelete({
            parent: "Test string",
        }, {
            intents: [
                {
                    action: "Test string",
                    defaultResponsePlatforms: [
                        "Test string"                    ],
                    displayName: "Test string",
                    events: [
                        "Test string"                    ],
                    followupIntentInfo: [
                        {
                            followupIntentName: "Test string",
                            parentFollowupIntentName: "Test string",
                        }                    ],
                    inputContextNames: [
                        "Test string"                    ],
                    isFallback: true,
                    messages: [
                        {
                            basicCard: {
                                buttons: [
                                    {
                                        openUriAction: {
                                            uri: "Test string",
                                        },
                                        title: "Test string",
                                    }                                ],
                                formattedText: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            browseCarouselCard: {
                                imageDisplayOptions: "Test string",
                                items: [
                                    {
                                        description: "Test string",
                                        footer: "Test string",
                                        image: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        openUriAction: {
                                            url: "Test string",
                                            urlTypeHint: "Test string",
                                        },
                                        title: "Test string",
                                    }                                ],
                            },
                            card: {
                                buttons: [
                                    {
                                        postback: "Test string",
                                        text: "Test string",
                                    }                                ],
                                imageUri: "Test string",
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            carouselSelect: {
                                items: [
                                    {
                                        description: "Test string",
                                        image: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        info: {
                                            key: "Test string",
                                            synonyms: [
                                                "Test string"                                            ],
                                        },
                                        title: "Test string",
                                    }                                ],
                            },
                            image: {
                                accessibilityText: "Test string",
                                imageUri: "Test string",
                            },
                            linkOutSuggestion: {
                                destinationName: "Test string",
                                uri: "Test string",
                            },
                            listSelect: {
                                items: [
                                    {
                                        description: "Test string",
                                        image: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        info: {
                                            key: "Test string",
                                            synonyms: [
                                                "Test string"                                            ],
                                        },
                                        title: "Test string",
                                    }                                ],
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            mediaContent: {
                                mediaObjects: [
                                    {
                                        contentUrl: "Test string",
                                        description: "Test string",
                                        icon: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        largeImage: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        name: "Test string",
                                    }                                ],
                                mediaType: "Test string",
                            },
                            payload: {
                                A: 42                            },
                            platform: "Test string",
                            quickReplies: {
                                quickReplies: [
                                    "Test string"                                ],
                                title: "Test string",
                            },
                            simpleResponses: {
                                simpleResponses: [
                                    {
                                        displayText: "Test string",
                                        ssml: "Test string",
                                        textToSpeech: "Test string",
                                    }                                ],
                            },
                            suggestions: {
                                suggestions: [
                                    {
                                        title: "Test string",
                                    }                                ],
                            },
                            tableCard: {
                                buttons: [
                                    {
                                        openUriAction: {
                                            uri: "Test string",
                                        },
                                        title: "Test string",
                                    }                                ],
                                columnProperties: [
                                    {
                                        header: "Test string",
                                        horizontalAlignment: "Test string",
                                    }                                ],
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                rows: [
                                    {
                                        cells: [
                                            {
                                                text: "Test string",
                                            }                                        ],
                                        dividerAfter: true,
                                    }                                ],
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            text: {
                                text: [
                                    "Test string"                                ],
                            },
                        }                    ],
                    mlDisabled: true,
                    name: "Test string",
                    outputContexts: [
                        {
                            lifespanCount: 42,
                            name: "Test string",
                            parameters: {
                                A: 42                            },
                        }                    ],
                    parameters: [
                        {
                            defaultValue: "Test string",
                            displayName: "Test string",
                            entityTypeDisplayName: "Test string",
                            isList: true,
                            mandatory: true,
                            name: "Test string",
                            prompts: [
                                "Test string"                            ],
                            value: "Test string",
                        }                    ],
                    parentFollowupIntentName: "Test string",
                    priority: 42,
                    resetContexts: true,
                    rootFollowupIntentName: "Test string",
                    trainingPhrases: [
                        {
                            name: "Test string",
                            parts: [
                                {
                                    alias: "Test string",
                                    entityType: "Test string",
                                    text: "Test string",
                                    userDefined: true,
                                }                            ],
                            timesAddedCount: 42,
                            type: "Test string",
                        }                    ],
                    webhookState: "Test string",
                }            ],
        });
        /** Updates/Creates multiple intents in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.intents.batchUpdate({
            parent: "Test string",
        }, {
            intentBatchInline: {
                intents: [
                    {
                        action: "Test string",
                        defaultResponsePlatforms: [
                            "Test string"                        ],
                        displayName: "Test string",
                        events: [
                            "Test string"                        ],
                        followupIntentInfo: [
                            {
                                followupIntentName: "Test string",
                                parentFollowupIntentName: "Test string",
                            }                        ],
                        inputContextNames: [
                            "Test string"                        ],
                        isFallback: true,
                        messages: [
                            {
                                basicCard: {
                                    buttons: [
                                        {
                                            openUriAction: {
                                                uri: "Test string",
                                            },
                                            title: "Test string",
                                        }                                    ],
                                    formattedText: "Test string",
                                    image: {
                                        accessibilityText: "Test string",
                                        imageUri: "Test string",
                                    },
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                browseCarouselCard: {
                                    imageDisplayOptions: "Test string",
                                    items: [
                                        {
                                            description: "Test string",
                                            footer: "Test string",
                                            image: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            openUriAction: {
                                                url: "Test string",
                                                urlTypeHint: "Test string",
                                            },
                                            title: "Test string",
                                        }                                    ],
                                },
                                card: {
                                    buttons: [
                                        {
                                            postback: "Test string",
                                            text: "Test string",
                                        }                                    ],
                                    imageUri: "Test string",
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                carouselSelect: {
                                    items: [
                                        {
                                            description: "Test string",
                                            image: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            info: {
                                                key: "Test string",
                                                synonyms: [
                                                    "Test string"                                                ],
                                            },
                                            title: "Test string",
                                        }                                    ],
                                },
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                linkOutSuggestion: {
                                    destinationName: "Test string",
                                    uri: "Test string",
                                },
                                listSelect: {
                                    items: [
                                        {
                                            description: "Test string",
                                            image: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            info: {
                                                key: "Test string",
                                                synonyms: [
                                                    "Test string"                                                ],
                                            },
                                            title: "Test string",
                                        }                                    ],
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                mediaContent: {
                                    mediaObjects: [
                                        {
                                            contentUrl: "Test string",
                                            description: "Test string",
                                            icon: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            largeImage: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            name: "Test string",
                                        }                                    ],
                                    mediaType: "Test string",
                                },
                                payload: {
                                    A: 42                                },
                                platform: "Test string",
                                quickReplies: {
                                    quickReplies: [
                                        "Test string"                                    ],
                                    title: "Test string",
                                },
                                simpleResponses: {
                                    simpleResponses: [
                                        {
                                            displayText: "Test string",
                                            ssml: "Test string",
                                            textToSpeech: "Test string",
                                        }                                    ],
                                },
                                suggestions: {
                                    suggestions: [
                                        {
                                            title: "Test string",
                                        }                                    ],
                                },
                                tableCard: {
                                    buttons: [
                                        {
                                            openUriAction: {
                                                uri: "Test string",
                                            },
                                            title: "Test string",
                                        }                                    ],
                                    columnProperties: [
                                        {
                                            header: "Test string",
                                            horizontalAlignment: "Test string",
                                        }                                    ],
                                    image: {
                                        accessibilityText: "Test string",
                                        imageUri: "Test string",
                                    },
                                    rows: [
                                        {
                                            cells: [
                                                {
                                                    text: "Test string",
                                                }                                            ],
                                            dividerAfter: true,
                                        }                                    ],
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                text: {
                                    text: [
                                        "Test string"                                    ],
                                },
                            }                        ],
                        mlDisabled: true,
                        name: "Test string",
                        outputContexts: [
                            {
                                lifespanCount: 42,
                                name: "Test string",
                                parameters: {
                                    A: 42                                },
                            }                        ],
                        parameters: [
                            {
                                defaultValue: "Test string",
                                displayName: "Test string",
                                entityTypeDisplayName: "Test string",
                                isList: true,
                                mandatory: true,
                                name: "Test string",
                                prompts: [
                                    "Test string"                                ],
                                value: "Test string",
                            }                        ],
                        parentFollowupIntentName: "Test string",
                        priority: 42,
                        resetContexts: true,
                        rootFollowupIntentName: "Test string",
                        trainingPhrases: [
                            {
                                name: "Test string",
                                parts: [
                                    {
                                        alias: "Test string",
                                        entityType: "Test string",
                                        text: "Test string",
                                        userDefined: true,
                                    }                                ],
                                timesAddedCount: 42,
                                type: "Test string",
                            }                        ],
                        webhookState: "Test string",
                    }                ],
            },
            intentBatchUri: "Test string",
            intentView: "Test string",
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Creates an intent in the specified agent. */
        await gapi.client.dialogflow.projects.agent.intents.create({
            intentView: "Test string",
            languageCode: "Test string",
            parent: "Test string",
        }, {
            action: "Test string",
            defaultResponsePlatforms: [
                "Test string"            ],
            displayName: "Test string",
            events: [
                "Test string"            ],
            followupIntentInfo: [
                {
                    followupIntentName: "Test string",
                    parentFollowupIntentName: "Test string",
                }            ],
            inputContextNames: [
                "Test string"            ],
            isFallback: true,
            messages: [
                {
                    basicCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        formattedText: "Test string",
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    browseCarouselCard: {
                        imageDisplayOptions: "Test string",
                        items: [
                            {
                                description: "Test string",
                                footer: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                openUriAction: {
                                    url: "Test string",
                                    urlTypeHint: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                    },
                    card: {
                        buttons: [
                            {
                                postback: "Test string",
                                text: "Test string",
                            }                        ],
                        imageUri: "Test string",
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    carouselSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                    },
                    image: {
                        accessibilityText: "Test string",
                        imageUri: "Test string",
                    },
                    linkOutSuggestion: {
                        destinationName: "Test string",
                        uri: "Test string",
                    },
                    listSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    mediaContent: {
                        mediaObjects: [
                            {
                                contentUrl: "Test string",
                                description: "Test string",
                                icon: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                largeImage: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                name: "Test string",
                            }                        ],
                        mediaType: "Test string",
                    },
                    payload: {
                        A: 42                    },
                    platform: "Test string",
                    quickReplies: {
                        quickReplies: [
                            "Test string"                        ],
                        title: "Test string",
                    },
                    simpleResponses: {
                        simpleResponses: [
                            {
                                displayText: "Test string",
                                ssml: "Test string",
                                textToSpeech: "Test string",
                            }                        ],
                    },
                    suggestions: {
                        suggestions: [
                            {
                                title: "Test string",
                            }                        ],
                    },
                    tableCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        columnProperties: [
                            {
                                header: "Test string",
                                horizontalAlignment: "Test string",
                            }                        ],
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        rows: [
                            {
                                cells: [
                                    {
                                        text: "Test string",
                                    }                                ],
                                dividerAfter: true,
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    text: {
                        text: [
                            "Test string"                        ],
                    },
                }            ],
            mlDisabled: true,
            name: "Test string",
            outputContexts: [
                {
                    lifespanCount: 42,
                    name: "Test string",
                    parameters: {
                        A: 42                    },
                }            ],
            parameters: [
                {
                    defaultValue: "Test string",
                    displayName: "Test string",
                    entityTypeDisplayName: "Test string",
                    isList: true,
                    mandatory: true,
                    name: "Test string",
                    prompts: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            parentFollowupIntentName: "Test string",
            priority: 42,
            resetContexts: true,
            rootFollowupIntentName: "Test string",
            trainingPhrases: [
                {
                    name: "Test string",
                    parts: [
                        {
                            alias: "Test string",
                            entityType: "Test string",
                            text: "Test string",
                            userDefined: true,
                        }                    ],
                    timesAddedCount: 42,
                    type: "Test string",
                }            ],
            webhookState: "Test string",
        });
        /** Deletes the specified intent and its direct or indirect followup intents. */
        await gapi.client.dialogflow.projects.agent.intents.delete({
            name: "Test string",
        });
        /** Retrieves the specified intent. */
        await gapi.client.dialogflow.projects.agent.intents.get({
            intentView: "Test string",
            languageCode: "Test string",
            name: "Test string",
        });
        /** Returns the list of all intents in the specified agent. */
        await gapi.client.dialogflow.projects.agent.intents.list({
            intentView: "Test string",
            languageCode: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified intent. */
        await gapi.client.dialogflow.projects.agent.intents.patch({
            intentView: "Test string",
            languageCode: "Test string",
            name: "Test string",
            updateMask: "Test string",
        }, {
            action: "Test string",
            defaultResponsePlatforms: [
                "Test string"            ],
            displayName: "Test string",
            events: [
                "Test string"            ],
            followupIntentInfo: [
                {
                    followupIntentName: "Test string",
                    parentFollowupIntentName: "Test string",
                }            ],
            inputContextNames: [
                "Test string"            ],
            isFallback: true,
            messages: [
                {
                    basicCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        formattedText: "Test string",
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    browseCarouselCard: {
                        imageDisplayOptions: "Test string",
                        items: [
                            {
                                description: "Test string",
                                footer: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                openUriAction: {
                                    url: "Test string",
                                    urlTypeHint: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                    },
                    card: {
                        buttons: [
                            {
                                postback: "Test string",
                                text: "Test string",
                            }                        ],
                        imageUri: "Test string",
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    carouselSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                    },
                    image: {
                        accessibilityText: "Test string",
                        imageUri: "Test string",
                    },
                    linkOutSuggestion: {
                        destinationName: "Test string",
                        uri: "Test string",
                    },
                    listSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    mediaContent: {
                        mediaObjects: [
                            {
                                contentUrl: "Test string",
                                description: "Test string",
                                icon: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                largeImage: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                name: "Test string",
                            }                        ],
                        mediaType: "Test string",
                    },
                    payload: {
                        A: 42                    },
                    platform: "Test string",
                    quickReplies: {
                        quickReplies: [
                            "Test string"                        ],
                        title: "Test string",
                    },
                    simpleResponses: {
                        simpleResponses: [
                            {
                                displayText: "Test string",
                                ssml: "Test string",
                                textToSpeech: "Test string",
                            }                        ],
                    },
                    suggestions: {
                        suggestions: [
                            {
                                title: "Test string",
                            }                        ],
                    },
                    tableCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        columnProperties: [
                            {
                                header: "Test string",
                                horizontalAlignment: "Test string",
                            }                        ],
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        rows: [
                            {
                                cells: [
                                    {
                                        text: "Test string",
                                    }                                ],
                                dividerAfter: true,
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    text: {
                        text: [
                            "Test string"                        ],
                    },
                }            ],
            mlDisabled: true,
            name: "Test string",
            outputContexts: [
                {
                    lifespanCount: 42,
                    name: "Test string",
                    parameters: {
                        A: 42                    },
                }            ],
            parameters: [
                {
                    defaultValue: "Test string",
                    displayName: "Test string",
                    entityTypeDisplayName: "Test string",
                    isList: true,
                    mandatory: true,
                    name: "Test string",
                    prompts: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            parentFollowupIntentName: "Test string",
            priority: 42,
            resetContexts: true,
            rootFollowupIntentName: "Test string",
            trainingPhrases: [
                {
                    name: "Test string",
                    parts: [
                        {
                            alias: "Test string",
                            entityType: "Test string",
                            text: "Test string",
                            userDefined: true,
                        }                    ],
                    timesAddedCount: 42,
                    type: "Test string",
                }            ],
            webhookState: "Test string",
        });
        /** Deletes all active contexts in the specified session. */
        await gapi.client.dialogflow.projects.agent.sessions.deleteContexts({
            parent: "Test string",
        });
        /** Creates a context. If the specified context already exists, overrides the context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.create({
            parent: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /** Deletes the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.delete({
            name: "Test string",
        });
        /** Retrieves the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.get({
            name: "Test string",
        });
        /** Returns the list of all contexts in the specified session. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /**
         * Creates a session entity type. If the specified session entity type already exists, overrides the session entity type. This method doesn't work with Google Assistant integration.
         * Contact Dialogflow support if you need to use session entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.create({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /**
         * Deletes the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.delete({
            name: "Test string",
        });
        /**
         * Retrieves the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.get({
            name: "Test string",
        });
        /**
         * Returns the list of all session entity types in the specified session. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session
         * entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Updates the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /**
         * Processes a natural language query and returns structured, actionable data as a result. This method is not idempotent, because it may cause contexts and session entity types to be
         * updated, which in turn might affect results of future queries. Note: Always use agent versions for production traffic. See [Versions and
         * environments](https://cloud.google.com/dialogflow/es/docs/agents-versions).
         */
        await gapi.client.dialogflow.projects.agent.sessions.detectIntent({
            session: "Test string",
        }, {
            inputAudio: "Test string",
            outputAudioConfig: {
                audioEncoding: "Test string",
                sampleRateHertz: 42,
                synthesizeSpeechConfig: {
                    effectsProfileId: [
                        "Test string"                    ],
                    pitch: 42,
                    speakingRate: 42,
                    voice: {
                        name: "Test string",
                        ssmlGender: "Test string",
                    },
                    volumeGainDb: 42,
                },
            },
            outputAudioConfigMask: "Test string",
            queryInput: {
                audioConfig: {
                    audioEncoding: "Test string",
                    enableWordInfo: true,
                    languageCode: "Test string",
                    model: "Test string",
                    modelVariant: "Test string",
                    phraseHints: [
                        "Test string"                    ],
                    sampleRateHertz: 42,
                    singleUtterance: true,
                    speechContexts: [
                        {
                            boost: 42,
                            phrases: [
                                "Test string"                            ],
                        }                    ],
                },
                event: {
                    languageCode: "Test string",
                    name: "Test string",
                    parameters: {
                        A: 42                    },
                },
                text: {
                    languageCode: "Test string",
                    text: "Test string",
                },
            },
            queryParams: {
                contexts: [
                    {
                        lifespanCount: 42,
                        name: "Test string",
                        parameters: {
                            A: 42                        },
                    }                ],
                geoLocation: {
                    latitude: 42,
                    longitude: 42,
                },
                payload: {
                    A: 42                },
                resetContexts: true,
                sentimentAnalysisRequestConfig: {
                    analyzeQueryTextSentiment: true,
                },
                sessionEntityTypes: [
                    {
                        entities: [
                            {
                                synonyms: [
                                    "Test string"                                ],
                                value: "Test string",
                            }                        ],
                        entityOverrideMode: "Test string",
                        name: "Test string",
                    }                ],
                timeZone: "Test string",
                webhookHeaders: {
                    A: "Test string"                },
            },
        });
        /** Creates a context. If the specified context already exists, overrides the context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.create({
            parent: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /** Deletes the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.delete({
            name: "Test string",
        });
        /** Retrieves the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.get({
            name: "Test string",
        });
        /** Returns the list of all contexts in the specified session. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /**
         * Creates a session entity type. If the specified session entity type already exists, overrides the session entity type. This method doesn't work with Google Assistant integration.
         * Contact Dialogflow support if you need to use session entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.create({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /**
         * Deletes the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.delete({
            name: "Test string",
        });
        /**
         * Retrieves the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.get({
            name: "Test string",
        });
        /**
         * Returns the list of all session entity types in the specified session. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session
         * entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Updates the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /** Trains the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.train({
            parent: "Test string",
        }, {
        });
        /** Deletes entity types in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.batchDelete({
            parent: "Test string",
        }, {
            entityTypeNames: [
                "Test string"            ],
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Updates/Creates multiple entity types in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.batchUpdate({
            parent: "Test string",
        }, {
            entityTypeBatchInline: {
                entityTypes: [
                    {
                        autoExpansionMode: "Test string",
                        displayName: "Test string",
                        enableFuzzyExtraction: true,
                        entities: [
                            {
                                synonyms: [
                                    "Test string"                                ],
                                value: "Test string",
                            }                        ],
                        kind: "Test string",
                        name: "Test string",
                    }                ],
            },
            entityTypeBatchUri: "Test string",
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Creates an entity type in the specified agent. */
        await gapi.client.dialogflow.projects.agent.entityTypes.create({
            languageCode: "Test string",
            parent: "Test string",
        }, {
            autoExpansionMode: "Test string",
            displayName: "Test string",
            enableFuzzyExtraction: true,
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            kind: "Test string",
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Deletes the specified entity type. */
        await gapi.client.dialogflow.projects.agent.entityTypes.delete({
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Retrieves the specified entity type. */
        await gapi.client.dialogflow.projects.agent.entityTypes.get({
            languageCode: "Test string",
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Returns the list of all entity types in the specified agent. */
        await gapi.client.dialogflow.projects.agent.entityTypes.list({
            languageCode: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Updates the specified entity type. */
        await gapi.client.dialogflow.projects.agent.entityTypes.patch({
            languageCode: "Test string",
            name: "Test string",
            updateMask: "Test string",
        }, {
            autoExpansionMode: "Test string",
            displayName: "Test string",
            enableFuzzyExtraction: true,
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            kind: "Test string",
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Returns the list of all non-draft environments of the specified agent. */
        await gapi.client.dialogflow.projects.agent.environments.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Deletes intents in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.intents.batchDelete({
            parent: "Test string",
        }, {
            intents: [
                {
                    action: "Test string",
                    defaultResponsePlatforms: [
                        "Test string"                    ],
                    displayName: "Test string",
                    events: [
                        "Test string"                    ],
                    followupIntentInfo: [
                        {
                            followupIntentName: "Test string",
                            parentFollowupIntentName: "Test string",
                        }                    ],
                    inputContextNames: [
                        "Test string"                    ],
                    isFallback: true,
                    messages: [
                        {
                            basicCard: {
                                buttons: [
                                    {
                                        openUriAction: {
                                            uri: "Test string",
                                        },
                                        title: "Test string",
                                    }                                ],
                                formattedText: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            browseCarouselCard: {
                                imageDisplayOptions: "Test string",
                                items: [
                                    {
                                        description: "Test string",
                                        footer: "Test string",
                                        image: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        openUriAction: {
                                            url: "Test string",
                                            urlTypeHint: "Test string",
                                        },
                                        title: "Test string",
                                    }                                ],
                            },
                            card: {
                                buttons: [
                                    {
                                        postback: "Test string",
                                        text: "Test string",
                                    }                                ],
                                imageUri: "Test string",
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            carouselSelect: {
                                items: [
                                    {
                                        description: "Test string",
                                        image: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        info: {
                                            key: "Test string",
                                            synonyms: [
                                                "Test string"                                            ],
                                        },
                                        title: "Test string",
                                    }                                ],
                            },
                            image: {
                                accessibilityText: "Test string",
                                imageUri: "Test string",
                            },
                            linkOutSuggestion: {
                                destinationName: "Test string",
                                uri: "Test string",
                            },
                            listSelect: {
                                items: [
                                    {
                                        description: "Test string",
                                        image: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        info: {
                                            key: "Test string",
                                            synonyms: [
                                                "Test string"                                            ],
                                        },
                                        title: "Test string",
                                    }                                ],
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            mediaContent: {
                                mediaObjects: [
                                    {
                                        contentUrl: "Test string",
                                        description: "Test string",
                                        icon: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        largeImage: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        name: "Test string",
                                    }                                ],
                                mediaType: "Test string",
                            },
                            payload: {
                                A: 42                            },
                            platform: "Test string",
                            quickReplies: {
                                quickReplies: [
                                    "Test string"                                ],
                                title: "Test string",
                            },
                            simpleResponses: {
                                simpleResponses: [
                                    {
                                        displayText: "Test string",
                                        ssml: "Test string",
                                        textToSpeech: "Test string",
                                    }                                ],
                            },
                            suggestions: {
                                suggestions: [
                                    {
                                        title: "Test string",
                                    }                                ],
                            },
                            tableCard: {
                                buttons: [
                                    {
                                        openUriAction: {
                                            uri: "Test string",
                                        },
                                        title: "Test string",
                                    }                                ],
                                columnProperties: [
                                    {
                                        header: "Test string",
                                        horizontalAlignment: "Test string",
                                    }                                ],
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                rows: [
                                    {
                                        cells: [
                                            {
                                                text: "Test string",
                                            }                                        ],
                                        dividerAfter: true,
                                    }                                ],
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            text: {
                                text: [
                                    "Test string"                                ],
                            },
                        }                    ],
                    mlDisabled: true,
                    name: "Test string",
                    outputContexts: [
                        {
                            lifespanCount: 42,
                            name: "Test string",
                            parameters: {
                                A: 42                            },
                        }                    ],
                    parameters: [
                        {
                            defaultValue: "Test string",
                            displayName: "Test string",
                            entityTypeDisplayName: "Test string",
                            isList: true,
                            mandatory: true,
                            name: "Test string",
                            prompts: [
                                "Test string"                            ],
                            value: "Test string",
                        }                    ],
                    parentFollowupIntentName: "Test string",
                    priority: 42,
                    resetContexts: true,
                    rootFollowupIntentName: "Test string",
                    trainingPhrases: [
                        {
                            name: "Test string",
                            parts: [
                                {
                                    alias: "Test string",
                                    entityType: "Test string",
                                    text: "Test string",
                                    userDefined: true,
                                }                            ],
                            timesAddedCount: 42,
                            type: "Test string",
                        }                    ],
                    webhookState: "Test string",
                }            ],
        });
        /** Updates/Creates multiple intents in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.intents.batchUpdate({
            parent: "Test string",
        }, {
            intentBatchInline: {
                intents: [
                    {
                        action: "Test string",
                        defaultResponsePlatforms: [
                            "Test string"                        ],
                        displayName: "Test string",
                        events: [
                            "Test string"                        ],
                        followupIntentInfo: [
                            {
                                followupIntentName: "Test string",
                                parentFollowupIntentName: "Test string",
                            }                        ],
                        inputContextNames: [
                            "Test string"                        ],
                        isFallback: true,
                        messages: [
                            {
                                basicCard: {
                                    buttons: [
                                        {
                                            openUriAction: {
                                                uri: "Test string",
                                            },
                                            title: "Test string",
                                        }                                    ],
                                    formattedText: "Test string",
                                    image: {
                                        accessibilityText: "Test string",
                                        imageUri: "Test string",
                                    },
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                browseCarouselCard: {
                                    imageDisplayOptions: "Test string",
                                    items: [
                                        {
                                            description: "Test string",
                                            footer: "Test string",
                                            image: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            openUriAction: {
                                                url: "Test string",
                                                urlTypeHint: "Test string",
                                            },
                                            title: "Test string",
                                        }                                    ],
                                },
                                card: {
                                    buttons: [
                                        {
                                            postback: "Test string",
                                            text: "Test string",
                                        }                                    ],
                                    imageUri: "Test string",
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                carouselSelect: {
                                    items: [
                                        {
                                            description: "Test string",
                                            image: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            info: {
                                                key: "Test string",
                                                synonyms: [
                                                    "Test string"                                                ],
                                            },
                                            title: "Test string",
                                        }                                    ],
                                },
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                linkOutSuggestion: {
                                    destinationName: "Test string",
                                    uri: "Test string",
                                },
                                listSelect: {
                                    items: [
                                        {
                                            description: "Test string",
                                            image: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            info: {
                                                key: "Test string",
                                                synonyms: [
                                                    "Test string"                                                ],
                                            },
                                            title: "Test string",
                                        }                                    ],
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                mediaContent: {
                                    mediaObjects: [
                                        {
                                            contentUrl: "Test string",
                                            description: "Test string",
                                            icon: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            largeImage: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            name: "Test string",
                                        }                                    ],
                                    mediaType: "Test string",
                                },
                                payload: {
                                    A: 42                                },
                                platform: "Test string",
                                quickReplies: {
                                    quickReplies: [
                                        "Test string"                                    ],
                                    title: "Test string",
                                },
                                simpleResponses: {
                                    simpleResponses: [
                                        {
                                            displayText: "Test string",
                                            ssml: "Test string",
                                            textToSpeech: "Test string",
                                        }                                    ],
                                },
                                suggestions: {
                                    suggestions: [
                                        {
                                            title: "Test string",
                                        }                                    ],
                                },
                                tableCard: {
                                    buttons: [
                                        {
                                            openUriAction: {
                                                uri: "Test string",
                                            },
                                            title: "Test string",
                                        }                                    ],
                                    columnProperties: [
                                        {
                                            header: "Test string",
                                            horizontalAlignment: "Test string",
                                        }                                    ],
                                    image: {
                                        accessibilityText: "Test string",
                                        imageUri: "Test string",
                                    },
                                    rows: [
                                        {
                                            cells: [
                                                {
                                                    text: "Test string",
                                                }                                            ],
                                            dividerAfter: true,
                                        }                                    ],
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                text: {
                                    text: [
                                        "Test string"                                    ],
                                },
                            }                        ],
                        mlDisabled: true,
                        name: "Test string",
                        outputContexts: [
                            {
                                lifespanCount: 42,
                                name: "Test string",
                                parameters: {
                                    A: 42                                },
                            }                        ],
                        parameters: [
                            {
                                defaultValue: "Test string",
                                displayName: "Test string",
                                entityTypeDisplayName: "Test string",
                                isList: true,
                                mandatory: true,
                                name: "Test string",
                                prompts: [
                                    "Test string"                                ],
                                value: "Test string",
                            }                        ],
                        parentFollowupIntentName: "Test string",
                        priority: 42,
                        resetContexts: true,
                        rootFollowupIntentName: "Test string",
                        trainingPhrases: [
                            {
                                name: "Test string",
                                parts: [
                                    {
                                        alias: "Test string",
                                        entityType: "Test string",
                                        text: "Test string",
                                        userDefined: true,
                                    }                                ],
                                timesAddedCount: 42,
                                type: "Test string",
                            }                        ],
                        webhookState: "Test string",
                    }                ],
            },
            intentBatchUri: "Test string",
            intentView: "Test string",
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Creates an intent in the specified agent. */
        await gapi.client.dialogflow.projects.agent.intents.create({
            intentView: "Test string",
            languageCode: "Test string",
            parent: "Test string",
        }, {
            action: "Test string",
            defaultResponsePlatforms: [
                "Test string"            ],
            displayName: "Test string",
            events: [
                "Test string"            ],
            followupIntentInfo: [
                {
                    followupIntentName: "Test string",
                    parentFollowupIntentName: "Test string",
                }            ],
            inputContextNames: [
                "Test string"            ],
            isFallback: true,
            messages: [
                {
                    basicCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        formattedText: "Test string",
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    browseCarouselCard: {
                        imageDisplayOptions: "Test string",
                        items: [
                            {
                                description: "Test string",
                                footer: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                openUriAction: {
                                    url: "Test string",
                                    urlTypeHint: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                    },
                    card: {
                        buttons: [
                            {
                                postback: "Test string",
                                text: "Test string",
                            }                        ],
                        imageUri: "Test string",
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    carouselSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                    },
                    image: {
                        accessibilityText: "Test string",
                        imageUri: "Test string",
                    },
                    linkOutSuggestion: {
                        destinationName: "Test string",
                        uri: "Test string",
                    },
                    listSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    mediaContent: {
                        mediaObjects: [
                            {
                                contentUrl: "Test string",
                                description: "Test string",
                                icon: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                largeImage: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                name: "Test string",
                            }                        ],
                        mediaType: "Test string",
                    },
                    payload: {
                        A: 42                    },
                    platform: "Test string",
                    quickReplies: {
                        quickReplies: [
                            "Test string"                        ],
                        title: "Test string",
                    },
                    simpleResponses: {
                        simpleResponses: [
                            {
                                displayText: "Test string",
                                ssml: "Test string",
                                textToSpeech: "Test string",
                            }                        ],
                    },
                    suggestions: {
                        suggestions: [
                            {
                                title: "Test string",
                            }                        ],
                    },
                    tableCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        columnProperties: [
                            {
                                header: "Test string",
                                horizontalAlignment: "Test string",
                            }                        ],
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        rows: [
                            {
                                cells: [
                                    {
                                        text: "Test string",
                                    }                                ],
                                dividerAfter: true,
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    text: {
                        text: [
                            "Test string"                        ],
                    },
                }            ],
            mlDisabled: true,
            name: "Test string",
            outputContexts: [
                {
                    lifespanCount: 42,
                    name: "Test string",
                    parameters: {
                        A: 42                    },
                }            ],
            parameters: [
                {
                    defaultValue: "Test string",
                    displayName: "Test string",
                    entityTypeDisplayName: "Test string",
                    isList: true,
                    mandatory: true,
                    name: "Test string",
                    prompts: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            parentFollowupIntentName: "Test string",
            priority: 42,
            resetContexts: true,
            rootFollowupIntentName: "Test string",
            trainingPhrases: [
                {
                    name: "Test string",
                    parts: [
                        {
                            alias: "Test string",
                            entityType: "Test string",
                            text: "Test string",
                            userDefined: true,
                        }                    ],
                    timesAddedCount: 42,
                    type: "Test string",
                }            ],
            webhookState: "Test string",
        });
        /** Deletes the specified intent and its direct or indirect followup intents. */
        await gapi.client.dialogflow.projects.agent.intents.delete({
            name: "Test string",
        });
        /** Retrieves the specified intent. */
        await gapi.client.dialogflow.projects.agent.intents.get({
            intentView: "Test string",
            languageCode: "Test string",
            name: "Test string",
        });
        /** Returns the list of all intents in the specified agent. */
        await gapi.client.dialogflow.projects.agent.intents.list({
            intentView: "Test string",
            languageCode: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified intent. */
        await gapi.client.dialogflow.projects.agent.intents.patch({
            intentView: "Test string",
            languageCode: "Test string",
            name: "Test string",
            updateMask: "Test string",
        }, {
            action: "Test string",
            defaultResponsePlatforms: [
                "Test string"            ],
            displayName: "Test string",
            events: [
                "Test string"            ],
            followupIntentInfo: [
                {
                    followupIntentName: "Test string",
                    parentFollowupIntentName: "Test string",
                }            ],
            inputContextNames: [
                "Test string"            ],
            isFallback: true,
            messages: [
                {
                    basicCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        formattedText: "Test string",
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    browseCarouselCard: {
                        imageDisplayOptions: "Test string",
                        items: [
                            {
                                description: "Test string",
                                footer: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                openUriAction: {
                                    url: "Test string",
                                    urlTypeHint: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                    },
                    card: {
                        buttons: [
                            {
                                postback: "Test string",
                                text: "Test string",
                            }                        ],
                        imageUri: "Test string",
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    carouselSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                    },
                    image: {
                        accessibilityText: "Test string",
                        imageUri: "Test string",
                    },
                    linkOutSuggestion: {
                        destinationName: "Test string",
                        uri: "Test string",
                    },
                    listSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    mediaContent: {
                        mediaObjects: [
                            {
                                contentUrl: "Test string",
                                description: "Test string",
                                icon: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                largeImage: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                name: "Test string",
                            }                        ],
                        mediaType: "Test string",
                    },
                    payload: {
                        A: 42                    },
                    platform: "Test string",
                    quickReplies: {
                        quickReplies: [
                            "Test string"                        ],
                        title: "Test string",
                    },
                    simpleResponses: {
                        simpleResponses: [
                            {
                                displayText: "Test string",
                                ssml: "Test string",
                                textToSpeech: "Test string",
                            }                        ],
                    },
                    suggestions: {
                        suggestions: [
                            {
                                title: "Test string",
                            }                        ],
                    },
                    tableCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        columnProperties: [
                            {
                                header: "Test string",
                                horizontalAlignment: "Test string",
                            }                        ],
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        rows: [
                            {
                                cells: [
                                    {
                                        text: "Test string",
                                    }                                ],
                                dividerAfter: true,
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    text: {
                        text: [
                            "Test string"                        ],
                    },
                }            ],
            mlDisabled: true,
            name: "Test string",
            outputContexts: [
                {
                    lifespanCount: 42,
                    name: "Test string",
                    parameters: {
                        A: 42                    },
                }            ],
            parameters: [
                {
                    defaultValue: "Test string",
                    displayName: "Test string",
                    entityTypeDisplayName: "Test string",
                    isList: true,
                    mandatory: true,
                    name: "Test string",
                    prompts: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            parentFollowupIntentName: "Test string",
            priority: 42,
            resetContexts: true,
            rootFollowupIntentName: "Test string",
            trainingPhrases: [
                {
                    name: "Test string",
                    parts: [
                        {
                            alias: "Test string",
                            entityType: "Test string",
                            text: "Test string",
                            userDefined: true,
                        }                    ],
                    timesAddedCount: 42,
                    type: "Test string",
                }            ],
            webhookState: "Test string",
        });
        /** Deletes all active contexts in the specified session. */
        await gapi.client.dialogflow.projects.agent.sessions.deleteContexts({
            parent: "Test string",
        });
        /** Creates a context. If the specified context already exists, overrides the context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.create({
            parent: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /** Deletes the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.delete({
            name: "Test string",
        });
        /** Retrieves the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.get({
            name: "Test string",
        });
        /** Returns the list of all contexts in the specified session. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /**
         * Creates a session entity type. If the specified session entity type already exists, overrides the session entity type. This method doesn't work with Google Assistant integration.
         * Contact Dialogflow support if you need to use session entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.create({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /**
         * Deletes the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.delete({
            name: "Test string",
        });
        /**
         * Retrieves the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.get({
            name: "Test string",
        });
        /**
         * Returns the list of all session entity types in the specified session. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session
         * entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Updates the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /**
         * Processes a natural language query and returns structured, actionable data as a result. This method is not idempotent, because it may cause contexts and session entity types to be
         * updated, which in turn might affect results of future queries. Note: Always use agent versions for production traffic. See [Versions and
         * environments](https://cloud.google.com/dialogflow/es/docs/agents-versions).
         */
        await gapi.client.dialogflow.projects.agent.sessions.detectIntent({
            session: "Test string",
        }, {
            inputAudio: "Test string",
            outputAudioConfig: {
                audioEncoding: "Test string",
                sampleRateHertz: 42,
                synthesizeSpeechConfig: {
                    effectsProfileId: [
                        "Test string"                    ],
                    pitch: 42,
                    speakingRate: 42,
                    voice: {
                        name: "Test string",
                        ssmlGender: "Test string",
                    },
                    volumeGainDb: 42,
                },
            },
            outputAudioConfigMask: "Test string",
            queryInput: {
                audioConfig: {
                    audioEncoding: "Test string",
                    enableWordInfo: true,
                    languageCode: "Test string",
                    model: "Test string",
                    modelVariant: "Test string",
                    phraseHints: [
                        "Test string"                    ],
                    sampleRateHertz: 42,
                    singleUtterance: true,
                    speechContexts: [
                        {
                            boost: 42,
                            phrases: [
                                "Test string"                            ],
                        }                    ],
                },
                event: {
                    languageCode: "Test string",
                    name: "Test string",
                    parameters: {
                        A: 42                    },
                },
                text: {
                    languageCode: "Test string",
                    text: "Test string",
                },
            },
            queryParams: {
                contexts: [
                    {
                        lifespanCount: 42,
                        name: "Test string",
                        parameters: {
                            A: 42                        },
                    }                ],
                geoLocation: {
                    latitude: 42,
                    longitude: 42,
                },
                payload: {
                    A: 42                },
                resetContexts: true,
                sentimentAnalysisRequestConfig: {
                    analyzeQueryTextSentiment: true,
                },
                sessionEntityTypes: [
                    {
                        entities: [
                            {
                                synonyms: [
                                    "Test string"                                ],
                                value: "Test string",
                            }                        ],
                        entityOverrideMode: "Test string",
                        name: "Test string",
                    }                ],
                timeZone: "Test string",
                webhookHeaders: {
                    A: "Test string"                },
            },
        });
        /** Creates a context. If the specified context already exists, overrides the context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.create({
            parent: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /** Deletes the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.delete({
            name: "Test string",
        });
        /** Retrieves the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.get({
            name: "Test string",
        });
        /** Returns the list of all contexts in the specified session. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /**
         * Creates a session entity type. If the specified session entity type already exists, overrides the session entity type. This method doesn't work with Google Assistant integration.
         * Contact Dialogflow support if you need to use session entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.create({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /**
         * Deletes the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.delete({
            name: "Test string",
        });
        /**
         * Retrieves the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.get({
            name: "Test string",
        });
        /**
         * Returns the list of all session entity types in the specified session. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session
         * entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Updates the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /** Updates the fulfillment. */
        await gapi.client.dialogflow.projects.agent.updateFulfillment({
            name: "Test string",
            updateMask: "Test string",
        }, {
            displayName: "Test string",
            enabled: true,
            features: [
                {
                    type: "Test string",
                }            ],
            genericWebService: {
                isCloudFunction: true,
                password: "Test string",
                requestHeaders: {
                    A: "Test string"                },
                uri: "Test string",
                username: "Test string",
            },
            name: "Test string",
        });
        /** Deletes entity types in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.batchDelete({
            parent: "Test string",
        }, {
            entityTypeNames: [
                "Test string"            ],
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Updates/Creates multiple entity types in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.batchUpdate({
            parent: "Test string",
        }, {
            entityTypeBatchInline: {
                entityTypes: [
                    {
                        autoExpansionMode: "Test string",
                        displayName: "Test string",
                        enableFuzzyExtraction: true,
                        entities: [
                            {
                                synonyms: [
                                    "Test string"                                ],
                                value: "Test string",
                            }                        ],
                        kind: "Test string",
                        name: "Test string",
                    }                ],
            },
            entityTypeBatchUri: "Test string",
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Creates an entity type in the specified agent. */
        await gapi.client.dialogflow.projects.agent.entityTypes.create({
            languageCode: "Test string",
            parent: "Test string",
        }, {
            autoExpansionMode: "Test string",
            displayName: "Test string",
            enableFuzzyExtraction: true,
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            kind: "Test string",
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Deletes the specified entity type. */
        await gapi.client.dialogflow.projects.agent.entityTypes.delete({
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Retrieves the specified entity type. */
        await gapi.client.dialogflow.projects.agent.entityTypes.get({
            languageCode: "Test string",
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Returns the list of all entity types in the specified agent. */
        await gapi.client.dialogflow.projects.agent.entityTypes.list({
            languageCode: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Updates the specified entity type. */
        await gapi.client.dialogflow.projects.agent.entityTypes.patch({
            languageCode: "Test string",
            name: "Test string",
            updateMask: "Test string",
        }, {
            autoExpansionMode: "Test string",
            displayName: "Test string",
            enableFuzzyExtraction: true,
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            kind: "Test string",
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Returns the list of all non-draft environments of the specified agent. */
        await gapi.client.dialogflow.projects.agent.environments.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Deletes intents in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.intents.batchDelete({
            parent: "Test string",
        }, {
            intents: [
                {
                    action: "Test string",
                    defaultResponsePlatforms: [
                        "Test string"                    ],
                    displayName: "Test string",
                    events: [
                        "Test string"                    ],
                    followupIntentInfo: [
                        {
                            followupIntentName: "Test string",
                            parentFollowupIntentName: "Test string",
                        }                    ],
                    inputContextNames: [
                        "Test string"                    ],
                    isFallback: true,
                    messages: [
                        {
                            basicCard: {
                                buttons: [
                                    {
                                        openUriAction: {
                                            uri: "Test string",
                                        },
                                        title: "Test string",
                                    }                                ],
                                formattedText: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            browseCarouselCard: {
                                imageDisplayOptions: "Test string",
                                items: [
                                    {
                                        description: "Test string",
                                        footer: "Test string",
                                        image: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        openUriAction: {
                                            url: "Test string",
                                            urlTypeHint: "Test string",
                                        },
                                        title: "Test string",
                                    }                                ],
                            },
                            card: {
                                buttons: [
                                    {
                                        postback: "Test string",
                                        text: "Test string",
                                    }                                ],
                                imageUri: "Test string",
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            carouselSelect: {
                                items: [
                                    {
                                        description: "Test string",
                                        image: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        info: {
                                            key: "Test string",
                                            synonyms: [
                                                "Test string"                                            ],
                                        },
                                        title: "Test string",
                                    }                                ],
                            },
                            image: {
                                accessibilityText: "Test string",
                                imageUri: "Test string",
                            },
                            linkOutSuggestion: {
                                destinationName: "Test string",
                                uri: "Test string",
                            },
                            listSelect: {
                                items: [
                                    {
                                        description: "Test string",
                                        image: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        info: {
                                            key: "Test string",
                                            synonyms: [
                                                "Test string"                                            ],
                                        },
                                        title: "Test string",
                                    }                                ],
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            mediaContent: {
                                mediaObjects: [
                                    {
                                        contentUrl: "Test string",
                                        description: "Test string",
                                        icon: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        largeImage: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        name: "Test string",
                                    }                                ],
                                mediaType: "Test string",
                            },
                            payload: {
                                A: 42                            },
                            platform: "Test string",
                            quickReplies: {
                                quickReplies: [
                                    "Test string"                                ],
                                title: "Test string",
                            },
                            simpleResponses: {
                                simpleResponses: [
                                    {
                                        displayText: "Test string",
                                        ssml: "Test string",
                                        textToSpeech: "Test string",
                                    }                                ],
                            },
                            suggestions: {
                                suggestions: [
                                    {
                                        title: "Test string",
                                    }                                ],
                            },
                            tableCard: {
                                buttons: [
                                    {
                                        openUriAction: {
                                            uri: "Test string",
                                        },
                                        title: "Test string",
                                    }                                ],
                                columnProperties: [
                                    {
                                        header: "Test string",
                                        horizontalAlignment: "Test string",
                                    }                                ],
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                rows: [
                                    {
                                        cells: [
                                            {
                                                text: "Test string",
                                            }                                        ],
                                        dividerAfter: true,
                                    }                                ],
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            text: {
                                text: [
                                    "Test string"                                ],
                            },
                        }                    ],
                    mlDisabled: true,
                    name: "Test string",
                    outputContexts: [
                        {
                            lifespanCount: 42,
                            name: "Test string",
                            parameters: {
                                A: 42                            },
                        }                    ],
                    parameters: [
                        {
                            defaultValue: "Test string",
                            displayName: "Test string",
                            entityTypeDisplayName: "Test string",
                            isList: true,
                            mandatory: true,
                            name: "Test string",
                            prompts: [
                                "Test string"                            ],
                            value: "Test string",
                        }                    ],
                    parentFollowupIntentName: "Test string",
                    priority: 42,
                    resetContexts: true,
                    rootFollowupIntentName: "Test string",
                    trainingPhrases: [
                        {
                            name: "Test string",
                            parts: [
                                {
                                    alias: "Test string",
                                    entityType: "Test string",
                                    text: "Test string",
                                    userDefined: true,
                                }                            ],
                            timesAddedCount: 42,
                            type: "Test string",
                        }                    ],
                    webhookState: "Test string",
                }            ],
        });
        /** Updates/Creates multiple intents in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.intents.batchUpdate({
            parent: "Test string",
        }, {
            intentBatchInline: {
                intents: [
                    {
                        action: "Test string",
                        defaultResponsePlatforms: [
                            "Test string"                        ],
                        displayName: "Test string",
                        events: [
                            "Test string"                        ],
                        followupIntentInfo: [
                            {
                                followupIntentName: "Test string",
                                parentFollowupIntentName: "Test string",
                            }                        ],
                        inputContextNames: [
                            "Test string"                        ],
                        isFallback: true,
                        messages: [
                            {
                                basicCard: {
                                    buttons: [
                                        {
                                            openUriAction: {
                                                uri: "Test string",
                                            },
                                            title: "Test string",
                                        }                                    ],
                                    formattedText: "Test string",
                                    image: {
                                        accessibilityText: "Test string",
                                        imageUri: "Test string",
                                    },
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                browseCarouselCard: {
                                    imageDisplayOptions: "Test string",
                                    items: [
                                        {
                                            description: "Test string",
                                            footer: "Test string",
                                            image: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            openUriAction: {
                                                url: "Test string",
                                                urlTypeHint: "Test string",
                                            },
                                            title: "Test string",
                                        }                                    ],
                                },
                                card: {
                                    buttons: [
                                        {
                                            postback: "Test string",
                                            text: "Test string",
                                        }                                    ],
                                    imageUri: "Test string",
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                carouselSelect: {
                                    items: [
                                        {
                                            description: "Test string",
                                            image: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            info: {
                                                key: "Test string",
                                                synonyms: [
                                                    "Test string"                                                ],
                                            },
                                            title: "Test string",
                                        }                                    ],
                                },
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                linkOutSuggestion: {
                                    destinationName: "Test string",
                                    uri: "Test string",
                                },
                                listSelect: {
                                    items: [
                                        {
                                            description: "Test string",
                                            image: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            info: {
                                                key: "Test string",
                                                synonyms: [
                                                    "Test string"                                                ],
                                            },
                                            title: "Test string",
                                        }                                    ],
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                mediaContent: {
                                    mediaObjects: [
                                        {
                                            contentUrl: "Test string",
                                            description: "Test string",
                                            icon: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            largeImage: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            name: "Test string",
                                        }                                    ],
                                    mediaType: "Test string",
                                },
                                payload: {
                                    A: 42                                },
                                platform: "Test string",
                                quickReplies: {
                                    quickReplies: [
                                        "Test string"                                    ],
                                    title: "Test string",
                                },
                                simpleResponses: {
                                    simpleResponses: [
                                        {
                                            displayText: "Test string",
                                            ssml: "Test string",
                                            textToSpeech: "Test string",
                                        }                                    ],
                                },
                                suggestions: {
                                    suggestions: [
                                        {
                                            title: "Test string",
                                        }                                    ],
                                },
                                tableCard: {
                                    buttons: [
                                        {
                                            openUriAction: {
                                                uri: "Test string",
                                            },
                                            title: "Test string",
                                        }                                    ],
                                    columnProperties: [
                                        {
                                            header: "Test string",
                                            horizontalAlignment: "Test string",
                                        }                                    ],
                                    image: {
                                        accessibilityText: "Test string",
                                        imageUri: "Test string",
                                    },
                                    rows: [
                                        {
                                            cells: [
                                                {
                                                    text: "Test string",
                                                }                                            ],
                                            dividerAfter: true,
                                        }                                    ],
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                text: {
                                    text: [
                                        "Test string"                                    ],
                                },
                            }                        ],
                        mlDisabled: true,
                        name: "Test string",
                        outputContexts: [
                            {
                                lifespanCount: 42,
                                name: "Test string",
                                parameters: {
                                    A: 42                                },
                            }                        ],
                        parameters: [
                            {
                                defaultValue: "Test string",
                                displayName: "Test string",
                                entityTypeDisplayName: "Test string",
                                isList: true,
                                mandatory: true,
                                name: "Test string",
                                prompts: [
                                    "Test string"                                ],
                                value: "Test string",
                            }                        ],
                        parentFollowupIntentName: "Test string",
                        priority: 42,
                        resetContexts: true,
                        rootFollowupIntentName: "Test string",
                        trainingPhrases: [
                            {
                                name: "Test string",
                                parts: [
                                    {
                                        alias: "Test string",
                                        entityType: "Test string",
                                        text: "Test string",
                                        userDefined: true,
                                    }                                ],
                                timesAddedCount: 42,
                                type: "Test string",
                            }                        ],
                        webhookState: "Test string",
                    }                ],
            },
            intentBatchUri: "Test string",
            intentView: "Test string",
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Creates an intent in the specified agent. */
        await gapi.client.dialogflow.projects.agent.intents.create({
            intentView: "Test string",
            languageCode: "Test string",
            parent: "Test string",
        }, {
            action: "Test string",
            defaultResponsePlatforms: [
                "Test string"            ],
            displayName: "Test string",
            events: [
                "Test string"            ],
            followupIntentInfo: [
                {
                    followupIntentName: "Test string",
                    parentFollowupIntentName: "Test string",
                }            ],
            inputContextNames: [
                "Test string"            ],
            isFallback: true,
            messages: [
                {
                    basicCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        formattedText: "Test string",
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    browseCarouselCard: {
                        imageDisplayOptions: "Test string",
                        items: [
                            {
                                description: "Test string",
                                footer: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                openUriAction: {
                                    url: "Test string",
                                    urlTypeHint: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                    },
                    card: {
                        buttons: [
                            {
                                postback: "Test string",
                                text: "Test string",
                            }                        ],
                        imageUri: "Test string",
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    carouselSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                    },
                    image: {
                        accessibilityText: "Test string",
                        imageUri: "Test string",
                    },
                    linkOutSuggestion: {
                        destinationName: "Test string",
                        uri: "Test string",
                    },
                    listSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    mediaContent: {
                        mediaObjects: [
                            {
                                contentUrl: "Test string",
                                description: "Test string",
                                icon: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                largeImage: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                name: "Test string",
                            }                        ],
                        mediaType: "Test string",
                    },
                    payload: {
                        A: 42                    },
                    platform: "Test string",
                    quickReplies: {
                        quickReplies: [
                            "Test string"                        ],
                        title: "Test string",
                    },
                    simpleResponses: {
                        simpleResponses: [
                            {
                                displayText: "Test string",
                                ssml: "Test string",
                                textToSpeech: "Test string",
                            }                        ],
                    },
                    suggestions: {
                        suggestions: [
                            {
                                title: "Test string",
                            }                        ],
                    },
                    tableCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        columnProperties: [
                            {
                                header: "Test string",
                                horizontalAlignment: "Test string",
                            }                        ],
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        rows: [
                            {
                                cells: [
                                    {
                                        text: "Test string",
                                    }                                ],
                                dividerAfter: true,
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    text: {
                        text: [
                            "Test string"                        ],
                    },
                }            ],
            mlDisabled: true,
            name: "Test string",
            outputContexts: [
                {
                    lifespanCount: 42,
                    name: "Test string",
                    parameters: {
                        A: 42                    },
                }            ],
            parameters: [
                {
                    defaultValue: "Test string",
                    displayName: "Test string",
                    entityTypeDisplayName: "Test string",
                    isList: true,
                    mandatory: true,
                    name: "Test string",
                    prompts: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            parentFollowupIntentName: "Test string",
            priority: 42,
            resetContexts: true,
            rootFollowupIntentName: "Test string",
            trainingPhrases: [
                {
                    name: "Test string",
                    parts: [
                        {
                            alias: "Test string",
                            entityType: "Test string",
                            text: "Test string",
                            userDefined: true,
                        }                    ],
                    timesAddedCount: 42,
                    type: "Test string",
                }            ],
            webhookState: "Test string",
        });
        /** Deletes the specified intent and its direct or indirect followup intents. */
        await gapi.client.dialogflow.projects.agent.intents.delete({
            name: "Test string",
        });
        /** Retrieves the specified intent. */
        await gapi.client.dialogflow.projects.agent.intents.get({
            intentView: "Test string",
            languageCode: "Test string",
            name: "Test string",
        });
        /** Returns the list of all intents in the specified agent. */
        await gapi.client.dialogflow.projects.agent.intents.list({
            intentView: "Test string",
            languageCode: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified intent. */
        await gapi.client.dialogflow.projects.agent.intents.patch({
            intentView: "Test string",
            languageCode: "Test string",
            name: "Test string",
            updateMask: "Test string",
        }, {
            action: "Test string",
            defaultResponsePlatforms: [
                "Test string"            ],
            displayName: "Test string",
            events: [
                "Test string"            ],
            followupIntentInfo: [
                {
                    followupIntentName: "Test string",
                    parentFollowupIntentName: "Test string",
                }            ],
            inputContextNames: [
                "Test string"            ],
            isFallback: true,
            messages: [
                {
                    basicCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        formattedText: "Test string",
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    browseCarouselCard: {
                        imageDisplayOptions: "Test string",
                        items: [
                            {
                                description: "Test string",
                                footer: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                openUriAction: {
                                    url: "Test string",
                                    urlTypeHint: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                    },
                    card: {
                        buttons: [
                            {
                                postback: "Test string",
                                text: "Test string",
                            }                        ],
                        imageUri: "Test string",
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    carouselSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                    },
                    image: {
                        accessibilityText: "Test string",
                        imageUri: "Test string",
                    },
                    linkOutSuggestion: {
                        destinationName: "Test string",
                        uri: "Test string",
                    },
                    listSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    mediaContent: {
                        mediaObjects: [
                            {
                                contentUrl: "Test string",
                                description: "Test string",
                                icon: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                largeImage: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                name: "Test string",
                            }                        ],
                        mediaType: "Test string",
                    },
                    payload: {
                        A: 42                    },
                    platform: "Test string",
                    quickReplies: {
                        quickReplies: [
                            "Test string"                        ],
                        title: "Test string",
                    },
                    simpleResponses: {
                        simpleResponses: [
                            {
                                displayText: "Test string",
                                ssml: "Test string",
                                textToSpeech: "Test string",
                            }                        ],
                    },
                    suggestions: {
                        suggestions: [
                            {
                                title: "Test string",
                            }                        ],
                    },
                    tableCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        columnProperties: [
                            {
                                header: "Test string",
                                horizontalAlignment: "Test string",
                            }                        ],
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        rows: [
                            {
                                cells: [
                                    {
                                        text: "Test string",
                                    }                                ],
                                dividerAfter: true,
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    text: {
                        text: [
                            "Test string"                        ],
                    },
                }            ],
            mlDisabled: true,
            name: "Test string",
            outputContexts: [
                {
                    lifespanCount: 42,
                    name: "Test string",
                    parameters: {
                        A: 42                    },
                }            ],
            parameters: [
                {
                    defaultValue: "Test string",
                    displayName: "Test string",
                    entityTypeDisplayName: "Test string",
                    isList: true,
                    mandatory: true,
                    name: "Test string",
                    prompts: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            parentFollowupIntentName: "Test string",
            priority: 42,
            resetContexts: true,
            rootFollowupIntentName: "Test string",
            trainingPhrases: [
                {
                    name: "Test string",
                    parts: [
                        {
                            alias: "Test string",
                            entityType: "Test string",
                            text: "Test string",
                            userDefined: true,
                        }                    ],
                    timesAddedCount: 42,
                    type: "Test string",
                }            ],
            webhookState: "Test string",
        });
        /** Deletes all active contexts in the specified session. */
        await gapi.client.dialogflow.projects.agent.sessions.deleteContexts({
            parent: "Test string",
        });
        /** Creates a context. If the specified context already exists, overrides the context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.create({
            parent: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /** Deletes the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.delete({
            name: "Test string",
        });
        /** Retrieves the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.get({
            name: "Test string",
        });
        /** Returns the list of all contexts in the specified session. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /**
         * Creates a session entity type. If the specified session entity type already exists, overrides the session entity type. This method doesn't work with Google Assistant integration.
         * Contact Dialogflow support if you need to use session entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.create({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /**
         * Deletes the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.delete({
            name: "Test string",
        });
        /**
         * Retrieves the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.get({
            name: "Test string",
        });
        /**
         * Returns the list of all session entity types in the specified session. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session
         * entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Updates the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /**
         * Processes a natural language query and returns structured, actionable data as a result. This method is not idempotent, because it may cause contexts and session entity types to be
         * updated, which in turn might affect results of future queries. Note: Always use agent versions for production traffic. See [Versions and
         * environments](https://cloud.google.com/dialogflow/es/docs/agents-versions).
         */
        await gapi.client.dialogflow.projects.agent.sessions.detectIntent({
            session: "Test string",
        }, {
            inputAudio: "Test string",
            outputAudioConfig: {
                audioEncoding: "Test string",
                sampleRateHertz: 42,
                synthesizeSpeechConfig: {
                    effectsProfileId: [
                        "Test string"                    ],
                    pitch: 42,
                    speakingRate: 42,
                    voice: {
                        name: "Test string",
                        ssmlGender: "Test string",
                    },
                    volumeGainDb: 42,
                },
            },
            outputAudioConfigMask: "Test string",
            queryInput: {
                audioConfig: {
                    audioEncoding: "Test string",
                    enableWordInfo: true,
                    languageCode: "Test string",
                    model: "Test string",
                    modelVariant: "Test string",
                    phraseHints: [
                        "Test string"                    ],
                    sampleRateHertz: 42,
                    singleUtterance: true,
                    speechContexts: [
                        {
                            boost: 42,
                            phrases: [
                                "Test string"                            ],
                        }                    ],
                },
                event: {
                    languageCode: "Test string",
                    name: "Test string",
                    parameters: {
                        A: 42                    },
                },
                text: {
                    languageCode: "Test string",
                    text: "Test string",
                },
            },
            queryParams: {
                contexts: [
                    {
                        lifespanCount: 42,
                        name: "Test string",
                        parameters: {
                            A: 42                        },
                    }                ],
                geoLocation: {
                    latitude: 42,
                    longitude: 42,
                },
                payload: {
                    A: 42                },
                resetContexts: true,
                sentimentAnalysisRequestConfig: {
                    analyzeQueryTextSentiment: true,
                },
                sessionEntityTypes: [
                    {
                        entities: [
                            {
                                synonyms: [
                                    "Test string"                                ],
                                value: "Test string",
                            }                        ],
                        entityOverrideMode: "Test string",
                        name: "Test string",
                    }                ],
                timeZone: "Test string",
                webhookHeaders: {
                    A: "Test string"                },
            },
        });
        /** Creates a context. If the specified context already exists, overrides the context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.create({
            parent: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /** Deletes the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.delete({
            name: "Test string",
        });
        /** Retrieves the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.get({
            name: "Test string",
        });
        /** Returns the list of all contexts in the specified session. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /**
         * Creates a session entity type. If the specified session entity type already exists, overrides the session entity type. This method doesn't work with Google Assistant integration.
         * Contact Dialogflow support if you need to use session entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.create({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /**
         * Deletes the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.delete({
            name: "Test string",
        });
        /**
         * Retrieves the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.get({
            name: "Test string",
        });
        /**
         * Returns the list of all session entity types in the specified session. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session
         * entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Updates the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /**
         * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this
         * method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation
         * completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of
         * 1, corresponding to `Code.CANCELLED`.
         */
        await gapi.client.dialogflow.projects.operations.cancel({
            name: "Test string",
        });
        /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
        await gapi.client.dialogflow.projects.operations.get({
            name: "Test string",
        });
        /**
         * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to
         * override the binding to use different resource name schemes, such as `users/∗/operations`. To override the binding, API services can add a binding such as
         * `"/v1/{name=users/*}/operations"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must
         * ensure the name binding is the parent resource, without the operations collection id.
         */
        await gapi.client.dialogflow.projects.operations.list({
            filter: "Test string",
            name: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Creates/updates the specified agent. */
        await gapi.client.dialogflow.projects.setAgent({
            parent: "Test string",
            updateMask: "Test string",
        }, {
            apiVersion: "Test string",
            avatarUri: "Test string",
            classificationThreshold: 42,
            defaultLanguageCode: "Test string",
            description: "Test string",
            displayName: "Test string",
            enableLogging: true,
            matchMode: "Test string",
            parent: "Test string",
            supportedLanguageCodes: [
                "Test string"            ],
            tier: "Test string",
            timeZone: "Test string",
        });
        /** Exports the specified agent to a ZIP file. Operation */
        await gapi.client.dialogflow.projects.agent.export({
            parent: "Test string",
        }, {
            agentUri: "Test string",
        });
        /** Deletes entity types in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.batchDelete({
            parent: "Test string",
        }, {
            entityTypeNames: [
                "Test string"            ],
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Updates/Creates multiple entity types in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.batchUpdate({
            parent: "Test string",
        }, {
            entityTypeBatchInline: {
                entityTypes: [
                    {
                        autoExpansionMode: "Test string",
                        displayName: "Test string",
                        enableFuzzyExtraction: true,
                        entities: [
                            {
                                synonyms: [
                                    "Test string"                                ],
                                value: "Test string",
                            }                        ],
                        kind: "Test string",
                        name: "Test string",
                    }                ],
            },
            entityTypeBatchUri: "Test string",
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Creates an entity type in the specified agent. */
        await gapi.client.dialogflow.projects.agent.entityTypes.create({
            languageCode: "Test string",
            parent: "Test string",
        }, {
            autoExpansionMode: "Test string",
            displayName: "Test string",
            enableFuzzyExtraction: true,
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            kind: "Test string",
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Deletes the specified entity type. */
        await gapi.client.dialogflow.projects.agent.entityTypes.delete({
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Retrieves the specified entity type. */
        await gapi.client.dialogflow.projects.agent.entityTypes.get({
            languageCode: "Test string",
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Returns the list of all entity types in the specified agent. */
        await gapi.client.dialogflow.projects.agent.entityTypes.list({
            languageCode: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Updates the specified entity type. */
        await gapi.client.dialogflow.projects.agent.entityTypes.patch({
            languageCode: "Test string",
            name: "Test string",
            updateMask: "Test string",
        }, {
            autoExpansionMode: "Test string",
            displayName: "Test string",
            enableFuzzyExtraction: true,
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            kind: "Test string",
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Returns the list of all non-draft environments of the specified agent. */
        await gapi.client.dialogflow.projects.agent.environments.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Deletes intents in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.intents.batchDelete({
            parent: "Test string",
        }, {
            intents: [
                {
                    action: "Test string",
                    defaultResponsePlatforms: [
                        "Test string"                    ],
                    displayName: "Test string",
                    events: [
                        "Test string"                    ],
                    followupIntentInfo: [
                        {
                            followupIntentName: "Test string",
                            parentFollowupIntentName: "Test string",
                        }                    ],
                    inputContextNames: [
                        "Test string"                    ],
                    isFallback: true,
                    messages: [
                        {
                            basicCard: {
                                buttons: [
                                    {
                                        openUriAction: {
                                            uri: "Test string",
                                        },
                                        title: "Test string",
                                    }                                ],
                                formattedText: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            browseCarouselCard: {
                                imageDisplayOptions: "Test string",
                                items: [
                                    {
                                        description: "Test string",
                                        footer: "Test string",
                                        image: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        openUriAction: {
                                            url: "Test string",
                                            urlTypeHint: "Test string",
                                        },
                                        title: "Test string",
                                    }                                ],
                            },
                            card: {
                                buttons: [
                                    {
                                        postback: "Test string",
                                        text: "Test string",
                                    }                                ],
                                imageUri: "Test string",
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            carouselSelect: {
                                items: [
                                    {
                                        description: "Test string",
                                        image: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        info: {
                                            key: "Test string",
                                            synonyms: [
                                                "Test string"                                            ],
                                        },
                                        title: "Test string",
                                    }                                ],
                            },
                            image: {
                                accessibilityText: "Test string",
                                imageUri: "Test string",
                            },
                            linkOutSuggestion: {
                                destinationName: "Test string",
                                uri: "Test string",
                            },
                            listSelect: {
                                items: [
                                    {
                                        description: "Test string",
                                        image: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        info: {
                                            key: "Test string",
                                            synonyms: [
                                                "Test string"                                            ],
                                        },
                                        title: "Test string",
                                    }                                ],
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            mediaContent: {
                                mediaObjects: [
                                    {
                                        contentUrl: "Test string",
                                        description: "Test string",
                                        icon: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        largeImage: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        name: "Test string",
                                    }                                ],
                                mediaType: "Test string",
                            },
                            payload: {
                                A: 42                            },
                            platform: "Test string",
                            quickReplies: {
                                quickReplies: [
                                    "Test string"                                ],
                                title: "Test string",
                            },
                            simpleResponses: {
                                simpleResponses: [
                                    {
                                        displayText: "Test string",
                                        ssml: "Test string",
                                        textToSpeech: "Test string",
                                    }                                ],
                            },
                            suggestions: {
                                suggestions: [
                                    {
                                        title: "Test string",
                                    }                                ],
                            },
                            tableCard: {
                                buttons: [
                                    {
                                        openUriAction: {
                                            uri: "Test string",
                                        },
                                        title: "Test string",
                                    }                                ],
                                columnProperties: [
                                    {
                                        header: "Test string",
                                        horizontalAlignment: "Test string",
                                    }                                ],
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                rows: [
                                    {
                                        cells: [
                                            {
                                                text: "Test string",
                                            }                                        ],
                                        dividerAfter: true,
                                    }                                ],
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            text: {
                                text: [
                                    "Test string"                                ],
                            },
                        }                    ],
                    mlDisabled: true,
                    name: "Test string",
                    outputContexts: [
                        {
                            lifespanCount: 42,
                            name: "Test string",
                            parameters: {
                                A: 42                            },
                        }                    ],
                    parameters: [
                        {
                            defaultValue: "Test string",
                            displayName: "Test string",
                            entityTypeDisplayName: "Test string",
                            isList: true,
                            mandatory: true,
                            name: "Test string",
                            prompts: [
                                "Test string"                            ],
                            value: "Test string",
                        }                    ],
                    parentFollowupIntentName: "Test string",
                    priority: 42,
                    resetContexts: true,
                    rootFollowupIntentName: "Test string",
                    trainingPhrases: [
                        {
                            name: "Test string",
                            parts: [
                                {
                                    alias: "Test string",
                                    entityType: "Test string",
                                    text: "Test string",
                                    userDefined: true,
                                }                            ],
                            timesAddedCount: 42,
                            type: "Test string",
                        }                    ],
                    webhookState: "Test string",
                }            ],
        });
        /** Updates/Creates multiple intents in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.intents.batchUpdate({
            parent: "Test string",
        }, {
            intentBatchInline: {
                intents: [
                    {
                        action: "Test string",
                        defaultResponsePlatforms: [
                            "Test string"                        ],
                        displayName: "Test string",
                        events: [
                            "Test string"                        ],
                        followupIntentInfo: [
                            {
                                followupIntentName: "Test string",
                                parentFollowupIntentName: "Test string",
                            }                        ],
                        inputContextNames: [
                            "Test string"                        ],
                        isFallback: true,
                        messages: [
                            {
                                basicCard: {
                                    buttons: [
                                        {
                                            openUriAction: {
                                                uri: "Test string",
                                            },
                                            title: "Test string",
                                        }                                    ],
                                    formattedText: "Test string",
                                    image: {
                                        accessibilityText: "Test string",
                                        imageUri: "Test string",
                                    },
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                browseCarouselCard: {
                                    imageDisplayOptions: "Test string",
                                    items: [
                                        {
                                            description: "Test string",
                                            footer: "Test string",
                                            image: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            openUriAction: {
                                                url: "Test string",
                                                urlTypeHint: "Test string",
                                            },
                                            title: "Test string",
                                        }                                    ],
                                },
                                card: {
                                    buttons: [
                                        {
                                            postback: "Test string",
                                            text: "Test string",
                                        }                                    ],
                                    imageUri: "Test string",
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                carouselSelect: {
                                    items: [
                                        {
                                            description: "Test string",
                                            image: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            info: {
                                                key: "Test string",
                                                synonyms: [
                                                    "Test string"                                                ],
                                            },
                                            title: "Test string",
                                        }                                    ],
                                },
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                linkOutSuggestion: {
                                    destinationName: "Test string",
                                    uri: "Test string",
                                },
                                listSelect: {
                                    items: [
                                        {
                                            description: "Test string",
                                            image: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            info: {
                                                key: "Test string",
                                                synonyms: [
                                                    "Test string"                                                ],
                                            },
                                            title: "Test string",
                                        }                                    ],
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                mediaContent: {
                                    mediaObjects: [
                                        {
                                            contentUrl: "Test string",
                                            description: "Test string",
                                            icon: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            largeImage: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            name: "Test string",
                                        }                                    ],
                                    mediaType: "Test string",
                                },
                                payload: {
                                    A: 42                                },
                                platform: "Test string",
                                quickReplies: {
                                    quickReplies: [
                                        "Test string"                                    ],
                                    title: "Test string",
                                },
                                simpleResponses: {
                                    simpleResponses: [
                                        {
                                            displayText: "Test string",
                                            ssml: "Test string",
                                            textToSpeech: "Test string",
                                        }                                    ],
                                },
                                suggestions: {
                                    suggestions: [
                                        {
                                            title: "Test string",
                                        }                                    ],
                                },
                                tableCard: {
                                    buttons: [
                                        {
                                            openUriAction: {
                                                uri: "Test string",
                                            },
                                            title: "Test string",
                                        }                                    ],
                                    columnProperties: [
                                        {
                                            header: "Test string",
                                            horizontalAlignment: "Test string",
                                        }                                    ],
                                    image: {
                                        accessibilityText: "Test string",
                                        imageUri: "Test string",
                                    },
                                    rows: [
                                        {
                                            cells: [
                                                {
                                                    text: "Test string",
                                                }                                            ],
                                            dividerAfter: true,
                                        }                                    ],
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                text: {
                                    text: [
                                        "Test string"                                    ],
                                },
                            }                        ],
                        mlDisabled: true,
                        name: "Test string",
                        outputContexts: [
                            {
                                lifespanCount: 42,
                                name: "Test string",
                                parameters: {
                                    A: 42                                },
                            }                        ],
                        parameters: [
                            {
                                defaultValue: "Test string",
                                displayName: "Test string",
                                entityTypeDisplayName: "Test string",
                                isList: true,
                                mandatory: true,
                                name: "Test string",
                                prompts: [
                                    "Test string"                                ],
                                value: "Test string",
                            }                        ],
                        parentFollowupIntentName: "Test string",
                        priority: 42,
                        resetContexts: true,
                        rootFollowupIntentName: "Test string",
                        trainingPhrases: [
                            {
                                name: "Test string",
                                parts: [
                                    {
                                        alias: "Test string",
                                        entityType: "Test string",
                                        text: "Test string",
                                        userDefined: true,
                                    }                                ],
                                timesAddedCount: 42,
                                type: "Test string",
                            }                        ],
                        webhookState: "Test string",
                    }                ],
            },
            intentBatchUri: "Test string",
            intentView: "Test string",
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Creates an intent in the specified agent. */
        await gapi.client.dialogflow.projects.agent.intents.create({
            intentView: "Test string",
            languageCode: "Test string",
            parent: "Test string",
        }, {
            action: "Test string",
            defaultResponsePlatforms: [
                "Test string"            ],
            displayName: "Test string",
            events: [
                "Test string"            ],
            followupIntentInfo: [
                {
                    followupIntentName: "Test string",
                    parentFollowupIntentName: "Test string",
                }            ],
            inputContextNames: [
                "Test string"            ],
            isFallback: true,
            messages: [
                {
                    basicCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        formattedText: "Test string",
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    browseCarouselCard: {
                        imageDisplayOptions: "Test string",
                        items: [
                            {
                                description: "Test string",
                                footer: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                openUriAction: {
                                    url: "Test string",
                                    urlTypeHint: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                    },
                    card: {
                        buttons: [
                            {
                                postback: "Test string",
                                text: "Test string",
                            }                        ],
                        imageUri: "Test string",
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    carouselSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                    },
                    image: {
                        accessibilityText: "Test string",
                        imageUri: "Test string",
                    },
                    linkOutSuggestion: {
                        destinationName: "Test string",
                        uri: "Test string",
                    },
                    listSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    mediaContent: {
                        mediaObjects: [
                            {
                                contentUrl: "Test string",
                                description: "Test string",
                                icon: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                largeImage: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                name: "Test string",
                            }                        ],
                        mediaType: "Test string",
                    },
                    payload: {
                        A: 42                    },
                    platform: "Test string",
                    quickReplies: {
                        quickReplies: [
                            "Test string"                        ],
                        title: "Test string",
                    },
                    simpleResponses: {
                        simpleResponses: [
                            {
                                displayText: "Test string",
                                ssml: "Test string",
                                textToSpeech: "Test string",
                            }                        ],
                    },
                    suggestions: {
                        suggestions: [
                            {
                                title: "Test string",
                            }                        ],
                    },
                    tableCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        columnProperties: [
                            {
                                header: "Test string",
                                horizontalAlignment: "Test string",
                            }                        ],
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        rows: [
                            {
                                cells: [
                                    {
                                        text: "Test string",
                                    }                                ],
                                dividerAfter: true,
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    text: {
                        text: [
                            "Test string"                        ],
                    },
                }            ],
            mlDisabled: true,
            name: "Test string",
            outputContexts: [
                {
                    lifespanCount: 42,
                    name: "Test string",
                    parameters: {
                        A: 42                    },
                }            ],
            parameters: [
                {
                    defaultValue: "Test string",
                    displayName: "Test string",
                    entityTypeDisplayName: "Test string",
                    isList: true,
                    mandatory: true,
                    name: "Test string",
                    prompts: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            parentFollowupIntentName: "Test string",
            priority: 42,
            resetContexts: true,
            rootFollowupIntentName: "Test string",
            trainingPhrases: [
                {
                    name: "Test string",
                    parts: [
                        {
                            alias: "Test string",
                            entityType: "Test string",
                            text: "Test string",
                            userDefined: true,
                        }                    ],
                    timesAddedCount: 42,
                    type: "Test string",
                }            ],
            webhookState: "Test string",
        });
        /** Deletes the specified intent and its direct or indirect followup intents. */
        await gapi.client.dialogflow.projects.agent.intents.delete({
            name: "Test string",
        });
        /** Retrieves the specified intent. */
        await gapi.client.dialogflow.projects.agent.intents.get({
            intentView: "Test string",
            languageCode: "Test string",
            name: "Test string",
        });
        /** Returns the list of all intents in the specified agent. */
        await gapi.client.dialogflow.projects.agent.intents.list({
            intentView: "Test string",
            languageCode: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified intent. */
        await gapi.client.dialogflow.projects.agent.intents.patch({
            intentView: "Test string",
            languageCode: "Test string",
            name: "Test string",
            updateMask: "Test string",
        }, {
            action: "Test string",
            defaultResponsePlatforms: [
                "Test string"            ],
            displayName: "Test string",
            events: [
                "Test string"            ],
            followupIntentInfo: [
                {
                    followupIntentName: "Test string",
                    parentFollowupIntentName: "Test string",
                }            ],
            inputContextNames: [
                "Test string"            ],
            isFallback: true,
            messages: [
                {
                    basicCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        formattedText: "Test string",
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    browseCarouselCard: {
                        imageDisplayOptions: "Test string",
                        items: [
                            {
                                description: "Test string",
                                footer: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                openUriAction: {
                                    url: "Test string",
                                    urlTypeHint: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                    },
                    card: {
                        buttons: [
                            {
                                postback: "Test string",
                                text: "Test string",
                            }                        ],
                        imageUri: "Test string",
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    carouselSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                    },
                    image: {
                        accessibilityText: "Test string",
                        imageUri: "Test string",
                    },
                    linkOutSuggestion: {
                        destinationName: "Test string",
                        uri: "Test string",
                    },
                    listSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    mediaContent: {
                        mediaObjects: [
                            {
                                contentUrl: "Test string",
                                description: "Test string",
                                icon: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                largeImage: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                name: "Test string",
                            }                        ],
                        mediaType: "Test string",
                    },
                    payload: {
                        A: 42                    },
                    platform: "Test string",
                    quickReplies: {
                        quickReplies: [
                            "Test string"                        ],
                        title: "Test string",
                    },
                    simpleResponses: {
                        simpleResponses: [
                            {
                                displayText: "Test string",
                                ssml: "Test string",
                                textToSpeech: "Test string",
                            }                        ],
                    },
                    suggestions: {
                        suggestions: [
                            {
                                title: "Test string",
                            }                        ],
                    },
                    tableCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        columnProperties: [
                            {
                                header: "Test string",
                                horizontalAlignment: "Test string",
                            }                        ],
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        rows: [
                            {
                                cells: [
                                    {
                                        text: "Test string",
                                    }                                ],
                                dividerAfter: true,
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    text: {
                        text: [
                            "Test string"                        ],
                    },
                }            ],
            mlDisabled: true,
            name: "Test string",
            outputContexts: [
                {
                    lifespanCount: 42,
                    name: "Test string",
                    parameters: {
                        A: 42                    },
                }            ],
            parameters: [
                {
                    defaultValue: "Test string",
                    displayName: "Test string",
                    entityTypeDisplayName: "Test string",
                    isList: true,
                    mandatory: true,
                    name: "Test string",
                    prompts: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            parentFollowupIntentName: "Test string",
            priority: 42,
            resetContexts: true,
            rootFollowupIntentName: "Test string",
            trainingPhrases: [
                {
                    name: "Test string",
                    parts: [
                        {
                            alias: "Test string",
                            entityType: "Test string",
                            text: "Test string",
                            userDefined: true,
                        }                    ],
                    timesAddedCount: 42,
                    type: "Test string",
                }            ],
            webhookState: "Test string",
        });
        /** Deletes all active contexts in the specified session. */
        await gapi.client.dialogflow.projects.agent.sessions.deleteContexts({
            parent: "Test string",
        });
        /** Creates a context. If the specified context already exists, overrides the context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.create({
            parent: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /** Deletes the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.delete({
            name: "Test string",
        });
        /** Retrieves the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.get({
            name: "Test string",
        });
        /** Returns the list of all contexts in the specified session. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /**
         * Creates a session entity type. If the specified session entity type already exists, overrides the session entity type. This method doesn't work with Google Assistant integration.
         * Contact Dialogflow support if you need to use session entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.create({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /**
         * Deletes the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.delete({
            name: "Test string",
        });
        /**
         * Retrieves the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.get({
            name: "Test string",
        });
        /**
         * Returns the list of all session entity types in the specified session. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session
         * entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Updates the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /**
         * Processes a natural language query and returns structured, actionable data as a result. This method is not idempotent, because it may cause contexts and session entity types to be
         * updated, which in turn might affect results of future queries. Note: Always use agent versions for production traffic. See [Versions and
         * environments](https://cloud.google.com/dialogflow/es/docs/agents-versions).
         */
        await gapi.client.dialogflow.projects.agent.sessions.detectIntent({
            session: "Test string",
        }, {
            inputAudio: "Test string",
            outputAudioConfig: {
                audioEncoding: "Test string",
                sampleRateHertz: 42,
                synthesizeSpeechConfig: {
                    effectsProfileId: [
                        "Test string"                    ],
                    pitch: 42,
                    speakingRate: 42,
                    voice: {
                        name: "Test string",
                        ssmlGender: "Test string",
                    },
                    volumeGainDb: 42,
                },
            },
            outputAudioConfigMask: "Test string",
            queryInput: {
                audioConfig: {
                    audioEncoding: "Test string",
                    enableWordInfo: true,
                    languageCode: "Test string",
                    model: "Test string",
                    modelVariant: "Test string",
                    phraseHints: [
                        "Test string"                    ],
                    sampleRateHertz: 42,
                    singleUtterance: true,
                    speechContexts: [
                        {
                            boost: 42,
                            phrases: [
                                "Test string"                            ],
                        }                    ],
                },
                event: {
                    languageCode: "Test string",
                    name: "Test string",
                    parameters: {
                        A: 42                    },
                },
                text: {
                    languageCode: "Test string",
                    text: "Test string",
                },
            },
            queryParams: {
                contexts: [
                    {
                        lifespanCount: 42,
                        name: "Test string",
                        parameters: {
                            A: 42                        },
                    }                ],
                geoLocation: {
                    latitude: 42,
                    longitude: 42,
                },
                payload: {
                    A: 42                },
                resetContexts: true,
                sentimentAnalysisRequestConfig: {
                    analyzeQueryTextSentiment: true,
                },
                sessionEntityTypes: [
                    {
                        entities: [
                            {
                                synonyms: [
                                    "Test string"                                ],
                                value: "Test string",
                            }                        ],
                        entityOverrideMode: "Test string",
                        name: "Test string",
                    }                ],
                timeZone: "Test string",
                webhookHeaders: {
                    A: "Test string"                },
            },
        });
        /** Creates a context. If the specified context already exists, overrides the context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.create({
            parent: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /** Deletes the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.delete({
            name: "Test string",
        });
        /** Retrieves the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.get({
            name: "Test string",
        });
        /** Returns the list of all contexts in the specified session. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /**
         * Creates a session entity type. If the specified session entity type already exists, overrides the session entity type. This method doesn't work with Google Assistant integration.
         * Contact Dialogflow support if you need to use session entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.create({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /**
         * Deletes the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.delete({
            name: "Test string",
        });
        /**
         * Retrieves the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.get({
            name: "Test string",
        });
        /**
         * Returns the list of all session entity types in the specified session. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session
         * entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Updates the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /** Retrieves the fulfillment. */
        await gapi.client.dialogflow.projects.agent.getFulfillment({
            name: "Test string",
        });
        /** Deletes entity types in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.batchDelete({
            parent: "Test string",
        }, {
            entityTypeNames: [
                "Test string"            ],
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Updates/Creates multiple entity types in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.batchUpdate({
            parent: "Test string",
        }, {
            entityTypeBatchInline: {
                entityTypes: [
                    {
                        autoExpansionMode: "Test string",
                        displayName: "Test string",
                        enableFuzzyExtraction: true,
                        entities: [
                            {
                                synonyms: [
                                    "Test string"                                ],
                                value: "Test string",
                            }                        ],
                        kind: "Test string",
                        name: "Test string",
                    }                ],
            },
            entityTypeBatchUri: "Test string",
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Creates an entity type in the specified agent. */
        await gapi.client.dialogflow.projects.agent.entityTypes.create({
            languageCode: "Test string",
            parent: "Test string",
        }, {
            autoExpansionMode: "Test string",
            displayName: "Test string",
            enableFuzzyExtraction: true,
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            kind: "Test string",
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Deletes the specified entity type. */
        await gapi.client.dialogflow.projects.agent.entityTypes.delete({
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Retrieves the specified entity type. */
        await gapi.client.dialogflow.projects.agent.entityTypes.get({
            languageCode: "Test string",
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Returns the list of all entity types in the specified agent. */
        await gapi.client.dialogflow.projects.agent.entityTypes.list({
            languageCode: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Updates the specified entity type. */
        await gapi.client.dialogflow.projects.agent.entityTypes.patch({
            languageCode: "Test string",
            name: "Test string",
            updateMask: "Test string",
        }, {
            autoExpansionMode: "Test string",
            displayName: "Test string",
            enableFuzzyExtraction: true,
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            kind: "Test string",
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Returns the list of all non-draft environments of the specified agent. */
        await gapi.client.dialogflow.projects.agent.environments.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Deletes intents in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.intents.batchDelete({
            parent: "Test string",
        }, {
            intents: [
                {
                    action: "Test string",
                    defaultResponsePlatforms: [
                        "Test string"                    ],
                    displayName: "Test string",
                    events: [
                        "Test string"                    ],
                    followupIntentInfo: [
                        {
                            followupIntentName: "Test string",
                            parentFollowupIntentName: "Test string",
                        }                    ],
                    inputContextNames: [
                        "Test string"                    ],
                    isFallback: true,
                    messages: [
                        {
                            basicCard: {
                                buttons: [
                                    {
                                        openUriAction: {
                                            uri: "Test string",
                                        },
                                        title: "Test string",
                                    }                                ],
                                formattedText: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            browseCarouselCard: {
                                imageDisplayOptions: "Test string",
                                items: [
                                    {
                                        description: "Test string",
                                        footer: "Test string",
                                        image: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        openUriAction: {
                                            url: "Test string",
                                            urlTypeHint: "Test string",
                                        },
                                        title: "Test string",
                                    }                                ],
                            },
                            card: {
                                buttons: [
                                    {
                                        postback: "Test string",
                                        text: "Test string",
                                    }                                ],
                                imageUri: "Test string",
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            carouselSelect: {
                                items: [
                                    {
                                        description: "Test string",
                                        image: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        info: {
                                            key: "Test string",
                                            synonyms: [
                                                "Test string"                                            ],
                                        },
                                        title: "Test string",
                                    }                                ],
                            },
                            image: {
                                accessibilityText: "Test string",
                                imageUri: "Test string",
                            },
                            linkOutSuggestion: {
                                destinationName: "Test string",
                                uri: "Test string",
                            },
                            listSelect: {
                                items: [
                                    {
                                        description: "Test string",
                                        image: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        info: {
                                            key: "Test string",
                                            synonyms: [
                                                "Test string"                                            ],
                                        },
                                        title: "Test string",
                                    }                                ],
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            mediaContent: {
                                mediaObjects: [
                                    {
                                        contentUrl: "Test string",
                                        description: "Test string",
                                        icon: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        largeImage: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        name: "Test string",
                                    }                                ],
                                mediaType: "Test string",
                            },
                            payload: {
                                A: 42                            },
                            platform: "Test string",
                            quickReplies: {
                                quickReplies: [
                                    "Test string"                                ],
                                title: "Test string",
                            },
                            simpleResponses: {
                                simpleResponses: [
                                    {
                                        displayText: "Test string",
                                        ssml: "Test string",
                                        textToSpeech: "Test string",
                                    }                                ],
                            },
                            suggestions: {
                                suggestions: [
                                    {
                                        title: "Test string",
                                    }                                ],
                            },
                            tableCard: {
                                buttons: [
                                    {
                                        openUriAction: {
                                            uri: "Test string",
                                        },
                                        title: "Test string",
                                    }                                ],
                                columnProperties: [
                                    {
                                        header: "Test string",
                                        horizontalAlignment: "Test string",
                                    }                                ],
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                rows: [
                                    {
                                        cells: [
                                            {
                                                text: "Test string",
                                            }                                        ],
                                        dividerAfter: true,
                                    }                                ],
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            text: {
                                text: [
                                    "Test string"                                ],
                            },
                        }                    ],
                    mlDisabled: true,
                    name: "Test string",
                    outputContexts: [
                        {
                            lifespanCount: 42,
                            name: "Test string",
                            parameters: {
                                A: 42                            },
                        }                    ],
                    parameters: [
                        {
                            defaultValue: "Test string",
                            displayName: "Test string",
                            entityTypeDisplayName: "Test string",
                            isList: true,
                            mandatory: true,
                            name: "Test string",
                            prompts: [
                                "Test string"                            ],
                            value: "Test string",
                        }                    ],
                    parentFollowupIntentName: "Test string",
                    priority: 42,
                    resetContexts: true,
                    rootFollowupIntentName: "Test string",
                    trainingPhrases: [
                        {
                            name: "Test string",
                            parts: [
                                {
                                    alias: "Test string",
                                    entityType: "Test string",
                                    text: "Test string",
                                    userDefined: true,
                                }                            ],
                            timesAddedCount: 42,
                            type: "Test string",
                        }                    ],
                    webhookState: "Test string",
                }            ],
        });
        /** Updates/Creates multiple intents in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.intents.batchUpdate({
            parent: "Test string",
        }, {
            intentBatchInline: {
                intents: [
                    {
                        action: "Test string",
                        defaultResponsePlatforms: [
                            "Test string"                        ],
                        displayName: "Test string",
                        events: [
                            "Test string"                        ],
                        followupIntentInfo: [
                            {
                                followupIntentName: "Test string",
                                parentFollowupIntentName: "Test string",
                            }                        ],
                        inputContextNames: [
                            "Test string"                        ],
                        isFallback: true,
                        messages: [
                            {
                                basicCard: {
                                    buttons: [
                                        {
                                            openUriAction: {
                                                uri: "Test string",
                                            },
                                            title: "Test string",
                                        }                                    ],
                                    formattedText: "Test string",
                                    image: {
                                        accessibilityText: "Test string",
                                        imageUri: "Test string",
                                    },
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                browseCarouselCard: {
                                    imageDisplayOptions: "Test string",
                                    items: [
                                        {
                                            description: "Test string",
                                            footer: "Test string",
                                            image: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            openUriAction: {
                                                url: "Test string",
                                                urlTypeHint: "Test string",
                                            },
                                            title: "Test string",
                                        }                                    ],
                                },
                                card: {
                                    buttons: [
                                        {
                                            postback: "Test string",
                                            text: "Test string",
                                        }                                    ],
                                    imageUri: "Test string",
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                carouselSelect: {
                                    items: [
                                        {
                                            description: "Test string",
                                            image: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            info: {
                                                key: "Test string",
                                                synonyms: [
                                                    "Test string"                                                ],
                                            },
                                            title: "Test string",
                                        }                                    ],
                                },
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                linkOutSuggestion: {
                                    destinationName: "Test string",
                                    uri: "Test string",
                                },
                                listSelect: {
                                    items: [
                                        {
                                            description: "Test string",
                                            image: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            info: {
                                                key: "Test string",
                                                synonyms: [
                                                    "Test string"                                                ],
                                            },
                                            title: "Test string",
                                        }                                    ],
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                mediaContent: {
                                    mediaObjects: [
                                        {
                                            contentUrl: "Test string",
                                            description: "Test string",
                                            icon: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            largeImage: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            name: "Test string",
                                        }                                    ],
                                    mediaType: "Test string",
                                },
                                payload: {
                                    A: 42                                },
                                platform: "Test string",
                                quickReplies: {
                                    quickReplies: [
                                        "Test string"                                    ],
                                    title: "Test string",
                                },
                                simpleResponses: {
                                    simpleResponses: [
                                        {
                                            displayText: "Test string",
                                            ssml: "Test string",
                                            textToSpeech: "Test string",
                                        }                                    ],
                                },
                                suggestions: {
                                    suggestions: [
                                        {
                                            title: "Test string",
                                        }                                    ],
                                },
                                tableCard: {
                                    buttons: [
                                        {
                                            openUriAction: {
                                                uri: "Test string",
                                            },
                                            title: "Test string",
                                        }                                    ],
                                    columnProperties: [
                                        {
                                            header: "Test string",
                                            horizontalAlignment: "Test string",
                                        }                                    ],
                                    image: {
                                        accessibilityText: "Test string",
                                        imageUri: "Test string",
                                    },
                                    rows: [
                                        {
                                            cells: [
                                                {
                                                    text: "Test string",
                                                }                                            ],
                                            dividerAfter: true,
                                        }                                    ],
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                text: {
                                    text: [
                                        "Test string"                                    ],
                                },
                            }                        ],
                        mlDisabled: true,
                        name: "Test string",
                        outputContexts: [
                            {
                                lifespanCount: 42,
                                name: "Test string",
                                parameters: {
                                    A: 42                                },
                            }                        ],
                        parameters: [
                            {
                                defaultValue: "Test string",
                                displayName: "Test string",
                                entityTypeDisplayName: "Test string",
                                isList: true,
                                mandatory: true,
                                name: "Test string",
                                prompts: [
                                    "Test string"                                ],
                                value: "Test string",
                            }                        ],
                        parentFollowupIntentName: "Test string",
                        priority: 42,
                        resetContexts: true,
                        rootFollowupIntentName: "Test string",
                        trainingPhrases: [
                            {
                                name: "Test string",
                                parts: [
                                    {
                                        alias: "Test string",
                                        entityType: "Test string",
                                        text: "Test string",
                                        userDefined: true,
                                    }                                ],
                                timesAddedCount: 42,
                                type: "Test string",
                            }                        ],
                        webhookState: "Test string",
                    }                ],
            },
            intentBatchUri: "Test string",
            intentView: "Test string",
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Creates an intent in the specified agent. */
        await gapi.client.dialogflow.projects.agent.intents.create({
            intentView: "Test string",
            languageCode: "Test string",
            parent: "Test string",
        }, {
            action: "Test string",
            defaultResponsePlatforms: [
                "Test string"            ],
            displayName: "Test string",
            events: [
                "Test string"            ],
            followupIntentInfo: [
                {
                    followupIntentName: "Test string",
                    parentFollowupIntentName: "Test string",
                }            ],
            inputContextNames: [
                "Test string"            ],
            isFallback: true,
            messages: [
                {
                    basicCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        formattedText: "Test string",
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    browseCarouselCard: {
                        imageDisplayOptions: "Test string",
                        items: [
                            {
                                description: "Test string",
                                footer: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                openUriAction: {
                                    url: "Test string",
                                    urlTypeHint: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                    },
                    card: {
                        buttons: [
                            {
                                postback: "Test string",
                                text: "Test string",
                            }                        ],
                        imageUri: "Test string",
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    carouselSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                    },
                    image: {
                        accessibilityText: "Test string",
                        imageUri: "Test string",
                    },
                    linkOutSuggestion: {
                        destinationName: "Test string",
                        uri: "Test string",
                    },
                    listSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    mediaContent: {
                        mediaObjects: [
                            {
                                contentUrl: "Test string",
                                description: "Test string",
                                icon: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                largeImage: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                name: "Test string",
                            }                        ],
                        mediaType: "Test string",
                    },
                    payload: {
                        A: 42                    },
                    platform: "Test string",
                    quickReplies: {
                        quickReplies: [
                            "Test string"                        ],
                        title: "Test string",
                    },
                    simpleResponses: {
                        simpleResponses: [
                            {
                                displayText: "Test string",
                                ssml: "Test string",
                                textToSpeech: "Test string",
                            }                        ],
                    },
                    suggestions: {
                        suggestions: [
                            {
                                title: "Test string",
                            }                        ],
                    },
                    tableCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        columnProperties: [
                            {
                                header: "Test string",
                                horizontalAlignment: "Test string",
                            }                        ],
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        rows: [
                            {
                                cells: [
                                    {
                                        text: "Test string",
                                    }                                ],
                                dividerAfter: true,
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    text: {
                        text: [
                            "Test string"                        ],
                    },
                }            ],
            mlDisabled: true,
            name: "Test string",
            outputContexts: [
                {
                    lifespanCount: 42,
                    name: "Test string",
                    parameters: {
                        A: 42                    },
                }            ],
            parameters: [
                {
                    defaultValue: "Test string",
                    displayName: "Test string",
                    entityTypeDisplayName: "Test string",
                    isList: true,
                    mandatory: true,
                    name: "Test string",
                    prompts: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            parentFollowupIntentName: "Test string",
            priority: 42,
            resetContexts: true,
            rootFollowupIntentName: "Test string",
            trainingPhrases: [
                {
                    name: "Test string",
                    parts: [
                        {
                            alias: "Test string",
                            entityType: "Test string",
                            text: "Test string",
                            userDefined: true,
                        }                    ],
                    timesAddedCount: 42,
                    type: "Test string",
                }            ],
            webhookState: "Test string",
        });
        /** Deletes the specified intent and its direct or indirect followup intents. */
        await gapi.client.dialogflow.projects.agent.intents.delete({
            name: "Test string",
        });
        /** Retrieves the specified intent. */
        await gapi.client.dialogflow.projects.agent.intents.get({
            intentView: "Test string",
            languageCode: "Test string",
            name: "Test string",
        });
        /** Returns the list of all intents in the specified agent. */
        await gapi.client.dialogflow.projects.agent.intents.list({
            intentView: "Test string",
            languageCode: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified intent. */
        await gapi.client.dialogflow.projects.agent.intents.patch({
            intentView: "Test string",
            languageCode: "Test string",
            name: "Test string",
            updateMask: "Test string",
        }, {
            action: "Test string",
            defaultResponsePlatforms: [
                "Test string"            ],
            displayName: "Test string",
            events: [
                "Test string"            ],
            followupIntentInfo: [
                {
                    followupIntentName: "Test string",
                    parentFollowupIntentName: "Test string",
                }            ],
            inputContextNames: [
                "Test string"            ],
            isFallback: true,
            messages: [
                {
                    basicCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        formattedText: "Test string",
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    browseCarouselCard: {
                        imageDisplayOptions: "Test string",
                        items: [
                            {
                                description: "Test string",
                                footer: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                openUriAction: {
                                    url: "Test string",
                                    urlTypeHint: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                    },
                    card: {
                        buttons: [
                            {
                                postback: "Test string",
                                text: "Test string",
                            }                        ],
                        imageUri: "Test string",
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    carouselSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                    },
                    image: {
                        accessibilityText: "Test string",
                        imageUri: "Test string",
                    },
                    linkOutSuggestion: {
                        destinationName: "Test string",
                        uri: "Test string",
                    },
                    listSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    mediaContent: {
                        mediaObjects: [
                            {
                                contentUrl: "Test string",
                                description: "Test string",
                                icon: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                largeImage: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                name: "Test string",
                            }                        ],
                        mediaType: "Test string",
                    },
                    payload: {
                        A: 42                    },
                    platform: "Test string",
                    quickReplies: {
                        quickReplies: [
                            "Test string"                        ],
                        title: "Test string",
                    },
                    simpleResponses: {
                        simpleResponses: [
                            {
                                displayText: "Test string",
                                ssml: "Test string",
                                textToSpeech: "Test string",
                            }                        ],
                    },
                    suggestions: {
                        suggestions: [
                            {
                                title: "Test string",
                            }                        ],
                    },
                    tableCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        columnProperties: [
                            {
                                header: "Test string",
                                horizontalAlignment: "Test string",
                            }                        ],
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        rows: [
                            {
                                cells: [
                                    {
                                        text: "Test string",
                                    }                                ],
                                dividerAfter: true,
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    text: {
                        text: [
                            "Test string"                        ],
                    },
                }            ],
            mlDisabled: true,
            name: "Test string",
            outputContexts: [
                {
                    lifespanCount: 42,
                    name: "Test string",
                    parameters: {
                        A: 42                    },
                }            ],
            parameters: [
                {
                    defaultValue: "Test string",
                    displayName: "Test string",
                    entityTypeDisplayName: "Test string",
                    isList: true,
                    mandatory: true,
                    name: "Test string",
                    prompts: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            parentFollowupIntentName: "Test string",
            priority: 42,
            resetContexts: true,
            rootFollowupIntentName: "Test string",
            trainingPhrases: [
                {
                    name: "Test string",
                    parts: [
                        {
                            alias: "Test string",
                            entityType: "Test string",
                            text: "Test string",
                            userDefined: true,
                        }                    ],
                    timesAddedCount: 42,
                    type: "Test string",
                }            ],
            webhookState: "Test string",
        });
        /** Deletes all active contexts in the specified session. */
        await gapi.client.dialogflow.projects.agent.sessions.deleteContexts({
            parent: "Test string",
        });
        /** Creates a context. If the specified context already exists, overrides the context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.create({
            parent: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /** Deletes the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.delete({
            name: "Test string",
        });
        /** Retrieves the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.get({
            name: "Test string",
        });
        /** Returns the list of all contexts in the specified session. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /**
         * Creates a session entity type. If the specified session entity type already exists, overrides the session entity type. This method doesn't work with Google Assistant integration.
         * Contact Dialogflow support if you need to use session entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.create({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /**
         * Deletes the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.delete({
            name: "Test string",
        });
        /**
         * Retrieves the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.get({
            name: "Test string",
        });
        /**
         * Returns the list of all session entity types in the specified session. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session
         * entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Updates the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /**
         * Processes a natural language query and returns structured, actionable data as a result. This method is not idempotent, because it may cause contexts and session entity types to be
         * updated, which in turn might affect results of future queries. Note: Always use agent versions for production traffic. See [Versions and
         * environments](https://cloud.google.com/dialogflow/es/docs/agents-versions).
         */
        await gapi.client.dialogflow.projects.agent.sessions.detectIntent({
            session: "Test string",
        }, {
            inputAudio: "Test string",
            outputAudioConfig: {
                audioEncoding: "Test string",
                sampleRateHertz: 42,
                synthesizeSpeechConfig: {
                    effectsProfileId: [
                        "Test string"                    ],
                    pitch: 42,
                    speakingRate: 42,
                    voice: {
                        name: "Test string",
                        ssmlGender: "Test string",
                    },
                    volumeGainDb: 42,
                },
            },
            outputAudioConfigMask: "Test string",
            queryInput: {
                audioConfig: {
                    audioEncoding: "Test string",
                    enableWordInfo: true,
                    languageCode: "Test string",
                    model: "Test string",
                    modelVariant: "Test string",
                    phraseHints: [
                        "Test string"                    ],
                    sampleRateHertz: 42,
                    singleUtterance: true,
                    speechContexts: [
                        {
                            boost: 42,
                            phrases: [
                                "Test string"                            ],
                        }                    ],
                },
                event: {
                    languageCode: "Test string",
                    name: "Test string",
                    parameters: {
                        A: 42                    },
                },
                text: {
                    languageCode: "Test string",
                    text: "Test string",
                },
            },
            queryParams: {
                contexts: [
                    {
                        lifespanCount: 42,
                        name: "Test string",
                        parameters: {
                            A: 42                        },
                    }                ],
                geoLocation: {
                    latitude: 42,
                    longitude: 42,
                },
                payload: {
                    A: 42                },
                resetContexts: true,
                sentimentAnalysisRequestConfig: {
                    analyzeQueryTextSentiment: true,
                },
                sessionEntityTypes: [
                    {
                        entities: [
                            {
                                synonyms: [
                                    "Test string"                                ],
                                value: "Test string",
                            }                        ],
                        entityOverrideMode: "Test string",
                        name: "Test string",
                    }                ],
                timeZone: "Test string",
                webhookHeaders: {
                    A: "Test string"                },
            },
        });
        /** Creates a context. If the specified context already exists, overrides the context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.create({
            parent: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /** Deletes the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.delete({
            name: "Test string",
        });
        /** Retrieves the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.get({
            name: "Test string",
        });
        /** Returns the list of all contexts in the specified session. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /**
         * Creates a session entity type. If the specified session entity type already exists, overrides the session entity type. This method doesn't work with Google Assistant integration.
         * Contact Dialogflow support if you need to use session entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.create({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /**
         * Deletes the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.delete({
            name: "Test string",
        });
        /**
         * Retrieves the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.get({
            name: "Test string",
        });
        /**
         * Returns the list of all session entity types in the specified session. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session
         * entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Updates the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /** Gets agent validation result. Agent validation is performed during training time and is updated automatically when training is completed. */
        await gapi.client.dialogflow.projects.agent.getValidationResult({
            languageCode: "Test string",
            parent: "Test string",
        });
        /** Deletes entity types in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.batchDelete({
            parent: "Test string",
        }, {
            entityTypeNames: [
                "Test string"            ],
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Updates/Creates multiple entity types in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.batchUpdate({
            parent: "Test string",
        }, {
            entityTypeBatchInline: {
                entityTypes: [
                    {
                        autoExpansionMode: "Test string",
                        displayName: "Test string",
                        enableFuzzyExtraction: true,
                        entities: [
                            {
                                synonyms: [
                                    "Test string"                                ],
                                value: "Test string",
                            }                        ],
                        kind: "Test string",
                        name: "Test string",
                    }                ],
            },
            entityTypeBatchUri: "Test string",
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Creates an entity type in the specified agent. */
        await gapi.client.dialogflow.projects.agent.entityTypes.create({
            languageCode: "Test string",
            parent: "Test string",
        }, {
            autoExpansionMode: "Test string",
            displayName: "Test string",
            enableFuzzyExtraction: true,
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            kind: "Test string",
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Deletes the specified entity type. */
        await gapi.client.dialogflow.projects.agent.entityTypes.delete({
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Retrieves the specified entity type. */
        await gapi.client.dialogflow.projects.agent.entityTypes.get({
            languageCode: "Test string",
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Returns the list of all entity types in the specified agent. */
        await gapi.client.dialogflow.projects.agent.entityTypes.list({
            languageCode: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Updates the specified entity type. */
        await gapi.client.dialogflow.projects.agent.entityTypes.patch({
            languageCode: "Test string",
            name: "Test string",
            updateMask: "Test string",
        }, {
            autoExpansionMode: "Test string",
            displayName: "Test string",
            enableFuzzyExtraction: true,
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            kind: "Test string",
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Returns the list of all non-draft environments of the specified agent. */
        await gapi.client.dialogflow.projects.agent.environments.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Deletes intents in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.intents.batchDelete({
            parent: "Test string",
        }, {
            intents: [
                {
                    action: "Test string",
                    defaultResponsePlatforms: [
                        "Test string"                    ],
                    displayName: "Test string",
                    events: [
                        "Test string"                    ],
                    followupIntentInfo: [
                        {
                            followupIntentName: "Test string",
                            parentFollowupIntentName: "Test string",
                        }                    ],
                    inputContextNames: [
                        "Test string"                    ],
                    isFallback: true,
                    messages: [
                        {
                            basicCard: {
                                buttons: [
                                    {
                                        openUriAction: {
                                            uri: "Test string",
                                        },
                                        title: "Test string",
                                    }                                ],
                                formattedText: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            browseCarouselCard: {
                                imageDisplayOptions: "Test string",
                                items: [
                                    {
                                        description: "Test string",
                                        footer: "Test string",
                                        image: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        openUriAction: {
                                            url: "Test string",
                                            urlTypeHint: "Test string",
                                        },
                                        title: "Test string",
                                    }                                ],
                            },
                            card: {
                                buttons: [
                                    {
                                        postback: "Test string",
                                        text: "Test string",
                                    }                                ],
                                imageUri: "Test string",
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            carouselSelect: {
                                items: [
                                    {
                                        description: "Test string",
                                        image: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        info: {
                                            key: "Test string",
                                            synonyms: [
                                                "Test string"                                            ],
                                        },
                                        title: "Test string",
                                    }                                ],
                            },
                            image: {
                                accessibilityText: "Test string",
                                imageUri: "Test string",
                            },
                            linkOutSuggestion: {
                                destinationName: "Test string",
                                uri: "Test string",
                            },
                            listSelect: {
                                items: [
                                    {
                                        description: "Test string",
                                        image: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        info: {
                                            key: "Test string",
                                            synonyms: [
                                                "Test string"                                            ],
                                        },
                                        title: "Test string",
                                    }                                ],
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            mediaContent: {
                                mediaObjects: [
                                    {
                                        contentUrl: "Test string",
                                        description: "Test string",
                                        icon: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        largeImage: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        name: "Test string",
                                    }                                ],
                                mediaType: "Test string",
                            },
                            payload: {
                                A: 42                            },
                            platform: "Test string",
                            quickReplies: {
                                quickReplies: [
                                    "Test string"                                ],
                                title: "Test string",
                            },
                            simpleResponses: {
                                simpleResponses: [
                                    {
                                        displayText: "Test string",
                                        ssml: "Test string",
                                        textToSpeech: "Test string",
                                    }                                ],
                            },
                            suggestions: {
                                suggestions: [
                                    {
                                        title: "Test string",
                                    }                                ],
                            },
                            tableCard: {
                                buttons: [
                                    {
                                        openUriAction: {
                                            uri: "Test string",
                                        },
                                        title: "Test string",
                                    }                                ],
                                columnProperties: [
                                    {
                                        header: "Test string",
                                        horizontalAlignment: "Test string",
                                    }                                ],
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                rows: [
                                    {
                                        cells: [
                                            {
                                                text: "Test string",
                                            }                                        ],
                                        dividerAfter: true,
                                    }                                ],
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            text: {
                                text: [
                                    "Test string"                                ],
                            },
                        }                    ],
                    mlDisabled: true,
                    name: "Test string",
                    outputContexts: [
                        {
                            lifespanCount: 42,
                            name: "Test string",
                            parameters: {
                                A: 42                            },
                        }                    ],
                    parameters: [
                        {
                            defaultValue: "Test string",
                            displayName: "Test string",
                            entityTypeDisplayName: "Test string",
                            isList: true,
                            mandatory: true,
                            name: "Test string",
                            prompts: [
                                "Test string"                            ],
                            value: "Test string",
                        }                    ],
                    parentFollowupIntentName: "Test string",
                    priority: 42,
                    resetContexts: true,
                    rootFollowupIntentName: "Test string",
                    trainingPhrases: [
                        {
                            name: "Test string",
                            parts: [
                                {
                                    alias: "Test string",
                                    entityType: "Test string",
                                    text: "Test string",
                                    userDefined: true,
                                }                            ],
                            timesAddedCount: 42,
                            type: "Test string",
                        }                    ],
                    webhookState: "Test string",
                }            ],
        });
        /** Updates/Creates multiple intents in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.intents.batchUpdate({
            parent: "Test string",
        }, {
            intentBatchInline: {
                intents: [
                    {
                        action: "Test string",
                        defaultResponsePlatforms: [
                            "Test string"                        ],
                        displayName: "Test string",
                        events: [
                            "Test string"                        ],
                        followupIntentInfo: [
                            {
                                followupIntentName: "Test string",
                                parentFollowupIntentName: "Test string",
                            }                        ],
                        inputContextNames: [
                            "Test string"                        ],
                        isFallback: true,
                        messages: [
                            {
                                basicCard: {
                                    buttons: [
                                        {
                                            openUriAction: {
                                                uri: "Test string",
                                            },
                                            title: "Test string",
                                        }                                    ],
                                    formattedText: "Test string",
                                    image: {
                                        accessibilityText: "Test string",
                                        imageUri: "Test string",
                                    },
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                browseCarouselCard: {
                                    imageDisplayOptions: "Test string",
                                    items: [
                                        {
                                            description: "Test string",
                                            footer: "Test string",
                                            image: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            openUriAction: {
                                                url: "Test string",
                                                urlTypeHint: "Test string",
                                            },
                                            title: "Test string",
                                        }                                    ],
                                },
                                card: {
                                    buttons: [
                                        {
                                            postback: "Test string",
                                            text: "Test string",
                                        }                                    ],
                                    imageUri: "Test string",
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                carouselSelect: {
                                    items: [
                                        {
                                            description: "Test string",
                                            image: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            info: {
                                                key: "Test string",
                                                synonyms: [
                                                    "Test string"                                                ],
                                            },
                                            title: "Test string",
                                        }                                    ],
                                },
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                linkOutSuggestion: {
                                    destinationName: "Test string",
                                    uri: "Test string",
                                },
                                listSelect: {
                                    items: [
                                        {
                                            description: "Test string",
                                            image: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            info: {
                                                key: "Test string",
                                                synonyms: [
                                                    "Test string"                                                ],
                                            },
                                            title: "Test string",
                                        }                                    ],
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                mediaContent: {
                                    mediaObjects: [
                                        {
                                            contentUrl: "Test string",
                                            description: "Test string",
                                            icon: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            largeImage: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            name: "Test string",
                                        }                                    ],
                                    mediaType: "Test string",
                                },
                                payload: {
                                    A: 42                                },
                                platform: "Test string",
                                quickReplies: {
                                    quickReplies: [
                                        "Test string"                                    ],
                                    title: "Test string",
                                },
                                simpleResponses: {
                                    simpleResponses: [
                                        {
                                            displayText: "Test string",
                                            ssml: "Test string",
                                            textToSpeech: "Test string",
                                        }                                    ],
                                },
                                suggestions: {
                                    suggestions: [
                                        {
                                            title: "Test string",
                                        }                                    ],
                                },
                                tableCard: {
                                    buttons: [
                                        {
                                            openUriAction: {
                                                uri: "Test string",
                                            },
                                            title: "Test string",
                                        }                                    ],
                                    columnProperties: [
                                        {
                                            header: "Test string",
                                            horizontalAlignment: "Test string",
                                        }                                    ],
                                    image: {
                                        accessibilityText: "Test string",
                                        imageUri: "Test string",
                                    },
                                    rows: [
                                        {
                                            cells: [
                                                {
                                                    text: "Test string",
                                                }                                            ],
                                            dividerAfter: true,
                                        }                                    ],
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                text: {
                                    text: [
                                        "Test string"                                    ],
                                },
                            }                        ],
                        mlDisabled: true,
                        name: "Test string",
                        outputContexts: [
                            {
                                lifespanCount: 42,
                                name: "Test string",
                                parameters: {
                                    A: 42                                },
                            }                        ],
                        parameters: [
                            {
                                defaultValue: "Test string",
                                displayName: "Test string",
                                entityTypeDisplayName: "Test string",
                                isList: true,
                                mandatory: true,
                                name: "Test string",
                                prompts: [
                                    "Test string"                                ],
                                value: "Test string",
                            }                        ],
                        parentFollowupIntentName: "Test string",
                        priority: 42,
                        resetContexts: true,
                        rootFollowupIntentName: "Test string",
                        trainingPhrases: [
                            {
                                name: "Test string",
                                parts: [
                                    {
                                        alias: "Test string",
                                        entityType: "Test string",
                                        text: "Test string",
                                        userDefined: true,
                                    }                                ],
                                timesAddedCount: 42,
                                type: "Test string",
                            }                        ],
                        webhookState: "Test string",
                    }                ],
            },
            intentBatchUri: "Test string",
            intentView: "Test string",
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Creates an intent in the specified agent. */
        await gapi.client.dialogflow.projects.agent.intents.create({
            intentView: "Test string",
            languageCode: "Test string",
            parent: "Test string",
        }, {
            action: "Test string",
            defaultResponsePlatforms: [
                "Test string"            ],
            displayName: "Test string",
            events: [
                "Test string"            ],
            followupIntentInfo: [
                {
                    followupIntentName: "Test string",
                    parentFollowupIntentName: "Test string",
                }            ],
            inputContextNames: [
                "Test string"            ],
            isFallback: true,
            messages: [
                {
                    basicCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        formattedText: "Test string",
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    browseCarouselCard: {
                        imageDisplayOptions: "Test string",
                        items: [
                            {
                                description: "Test string",
                                footer: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                openUriAction: {
                                    url: "Test string",
                                    urlTypeHint: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                    },
                    card: {
                        buttons: [
                            {
                                postback: "Test string",
                                text: "Test string",
                            }                        ],
                        imageUri: "Test string",
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    carouselSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                    },
                    image: {
                        accessibilityText: "Test string",
                        imageUri: "Test string",
                    },
                    linkOutSuggestion: {
                        destinationName: "Test string",
                        uri: "Test string",
                    },
                    listSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    mediaContent: {
                        mediaObjects: [
                            {
                                contentUrl: "Test string",
                                description: "Test string",
                                icon: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                largeImage: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                name: "Test string",
                            }                        ],
                        mediaType: "Test string",
                    },
                    payload: {
                        A: 42                    },
                    platform: "Test string",
                    quickReplies: {
                        quickReplies: [
                            "Test string"                        ],
                        title: "Test string",
                    },
                    simpleResponses: {
                        simpleResponses: [
                            {
                                displayText: "Test string",
                                ssml: "Test string",
                                textToSpeech: "Test string",
                            }                        ],
                    },
                    suggestions: {
                        suggestions: [
                            {
                                title: "Test string",
                            }                        ],
                    },
                    tableCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        columnProperties: [
                            {
                                header: "Test string",
                                horizontalAlignment: "Test string",
                            }                        ],
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        rows: [
                            {
                                cells: [
                                    {
                                        text: "Test string",
                                    }                                ],
                                dividerAfter: true,
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    text: {
                        text: [
                            "Test string"                        ],
                    },
                }            ],
            mlDisabled: true,
            name: "Test string",
            outputContexts: [
                {
                    lifespanCount: 42,
                    name: "Test string",
                    parameters: {
                        A: 42                    },
                }            ],
            parameters: [
                {
                    defaultValue: "Test string",
                    displayName: "Test string",
                    entityTypeDisplayName: "Test string",
                    isList: true,
                    mandatory: true,
                    name: "Test string",
                    prompts: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            parentFollowupIntentName: "Test string",
            priority: 42,
            resetContexts: true,
            rootFollowupIntentName: "Test string",
            trainingPhrases: [
                {
                    name: "Test string",
                    parts: [
                        {
                            alias: "Test string",
                            entityType: "Test string",
                            text: "Test string",
                            userDefined: true,
                        }                    ],
                    timesAddedCount: 42,
                    type: "Test string",
                }            ],
            webhookState: "Test string",
        });
        /** Deletes the specified intent and its direct or indirect followup intents. */
        await gapi.client.dialogflow.projects.agent.intents.delete({
            name: "Test string",
        });
        /** Retrieves the specified intent. */
        await gapi.client.dialogflow.projects.agent.intents.get({
            intentView: "Test string",
            languageCode: "Test string",
            name: "Test string",
        });
        /** Returns the list of all intents in the specified agent. */
        await gapi.client.dialogflow.projects.agent.intents.list({
            intentView: "Test string",
            languageCode: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified intent. */
        await gapi.client.dialogflow.projects.agent.intents.patch({
            intentView: "Test string",
            languageCode: "Test string",
            name: "Test string",
            updateMask: "Test string",
        }, {
            action: "Test string",
            defaultResponsePlatforms: [
                "Test string"            ],
            displayName: "Test string",
            events: [
                "Test string"            ],
            followupIntentInfo: [
                {
                    followupIntentName: "Test string",
                    parentFollowupIntentName: "Test string",
                }            ],
            inputContextNames: [
                "Test string"            ],
            isFallback: true,
            messages: [
                {
                    basicCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        formattedText: "Test string",
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    browseCarouselCard: {
                        imageDisplayOptions: "Test string",
                        items: [
                            {
                                description: "Test string",
                                footer: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                openUriAction: {
                                    url: "Test string",
                                    urlTypeHint: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                    },
                    card: {
                        buttons: [
                            {
                                postback: "Test string",
                                text: "Test string",
                            }                        ],
                        imageUri: "Test string",
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    carouselSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                    },
                    image: {
                        accessibilityText: "Test string",
                        imageUri: "Test string",
                    },
                    linkOutSuggestion: {
                        destinationName: "Test string",
                        uri: "Test string",
                    },
                    listSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    mediaContent: {
                        mediaObjects: [
                            {
                                contentUrl: "Test string",
                                description: "Test string",
                                icon: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                largeImage: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                name: "Test string",
                            }                        ],
                        mediaType: "Test string",
                    },
                    payload: {
                        A: 42                    },
                    platform: "Test string",
                    quickReplies: {
                        quickReplies: [
                            "Test string"                        ],
                        title: "Test string",
                    },
                    simpleResponses: {
                        simpleResponses: [
                            {
                                displayText: "Test string",
                                ssml: "Test string",
                                textToSpeech: "Test string",
                            }                        ],
                    },
                    suggestions: {
                        suggestions: [
                            {
                                title: "Test string",
                            }                        ],
                    },
                    tableCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        columnProperties: [
                            {
                                header: "Test string",
                                horizontalAlignment: "Test string",
                            }                        ],
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        rows: [
                            {
                                cells: [
                                    {
                                        text: "Test string",
                                    }                                ],
                                dividerAfter: true,
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    text: {
                        text: [
                            "Test string"                        ],
                    },
                }            ],
            mlDisabled: true,
            name: "Test string",
            outputContexts: [
                {
                    lifespanCount: 42,
                    name: "Test string",
                    parameters: {
                        A: 42                    },
                }            ],
            parameters: [
                {
                    defaultValue: "Test string",
                    displayName: "Test string",
                    entityTypeDisplayName: "Test string",
                    isList: true,
                    mandatory: true,
                    name: "Test string",
                    prompts: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            parentFollowupIntentName: "Test string",
            priority: 42,
            resetContexts: true,
            rootFollowupIntentName: "Test string",
            trainingPhrases: [
                {
                    name: "Test string",
                    parts: [
                        {
                            alias: "Test string",
                            entityType: "Test string",
                            text: "Test string",
                            userDefined: true,
                        }                    ],
                    timesAddedCount: 42,
                    type: "Test string",
                }            ],
            webhookState: "Test string",
        });
        /** Deletes all active contexts in the specified session. */
        await gapi.client.dialogflow.projects.agent.sessions.deleteContexts({
            parent: "Test string",
        });
        /** Creates a context. If the specified context already exists, overrides the context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.create({
            parent: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /** Deletes the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.delete({
            name: "Test string",
        });
        /** Retrieves the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.get({
            name: "Test string",
        });
        /** Returns the list of all contexts in the specified session. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /**
         * Creates a session entity type. If the specified session entity type already exists, overrides the session entity type. This method doesn't work with Google Assistant integration.
         * Contact Dialogflow support if you need to use session entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.create({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /**
         * Deletes the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.delete({
            name: "Test string",
        });
        /**
         * Retrieves the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.get({
            name: "Test string",
        });
        /**
         * Returns the list of all session entity types in the specified session. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session
         * entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Updates the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /**
         * Processes a natural language query and returns structured, actionable data as a result. This method is not idempotent, because it may cause contexts and session entity types to be
         * updated, which in turn might affect results of future queries. Note: Always use agent versions for production traffic. See [Versions and
         * environments](https://cloud.google.com/dialogflow/es/docs/agents-versions).
         */
        await gapi.client.dialogflow.projects.agent.sessions.detectIntent({
            session: "Test string",
        }, {
            inputAudio: "Test string",
            outputAudioConfig: {
                audioEncoding: "Test string",
                sampleRateHertz: 42,
                synthesizeSpeechConfig: {
                    effectsProfileId: [
                        "Test string"                    ],
                    pitch: 42,
                    speakingRate: 42,
                    voice: {
                        name: "Test string",
                        ssmlGender: "Test string",
                    },
                    volumeGainDb: 42,
                },
            },
            outputAudioConfigMask: "Test string",
            queryInput: {
                audioConfig: {
                    audioEncoding: "Test string",
                    enableWordInfo: true,
                    languageCode: "Test string",
                    model: "Test string",
                    modelVariant: "Test string",
                    phraseHints: [
                        "Test string"                    ],
                    sampleRateHertz: 42,
                    singleUtterance: true,
                    speechContexts: [
                        {
                            boost: 42,
                            phrases: [
                                "Test string"                            ],
                        }                    ],
                },
                event: {
                    languageCode: "Test string",
                    name: "Test string",
                    parameters: {
                        A: 42                    },
                },
                text: {
                    languageCode: "Test string",
                    text: "Test string",
                },
            },
            queryParams: {
                contexts: [
                    {
                        lifespanCount: 42,
                        name: "Test string",
                        parameters: {
                            A: 42                        },
                    }                ],
                geoLocation: {
                    latitude: 42,
                    longitude: 42,
                },
                payload: {
                    A: 42                },
                resetContexts: true,
                sentimentAnalysisRequestConfig: {
                    analyzeQueryTextSentiment: true,
                },
                sessionEntityTypes: [
                    {
                        entities: [
                            {
                                synonyms: [
                                    "Test string"                                ],
                                value: "Test string",
                            }                        ],
                        entityOverrideMode: "Test string",
                        name: "Test string",
                    }                ],
                timeZone: "Test string",
                webhookHeaders: {
                    A: "Test string"                },
            },
        });
        /** Creates a context. If the specified context already exists, overrides the context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.create({
            parent: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /** Deletes the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.delete({
            name: "Test string",
        });
        /** Retrieves the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.get({
            name: "Test string",
        });
        /** Returns the list of all contexts in the specified session. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /**
         * Creates a session entity type. If the specified session entity type already exists, overrides the session entity type. This method doesn't work with Google Assistant integration.
         * Contact Dialogflow support if you need to use session entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.create({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /**
         * Deletes the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.delete({
            name: "Test string",
        });
        /**
         * Retrieves the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.get({
            name: "Test string",
        });
        /**
         * Returns the list of all session entity types in the specified session. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session
         * entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Updates the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /**
         * Imports the specified agent from a ZIP file. Uploads new intents and entity types without deleting the existing ones. Intents and entity types with the same name are replaced with the
         * new versions from ImportAgentRequest. After the import, the imported draft agent will be trained automatically (unless disabled in agent settings). However, once the import is done,
         * training may not be completed yet. Please call TrainAgent and wait for the operation it returns in order to train explicitly. Operation An operation which tracks when importing is
         * complete. It only tracks when the draft agent is updated not when it is done training.
         */
        await gapi.client.dialogflow.projects.agent.import({
            parent: "Test string",
        }, {
            agentContent: "Test string",
            agentUri: "Test string",
        });
        /** Deletes entity types in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.batchDelete({
            parent: "Test string",
        }, {
            entityTypeNames: [
                "Test string"            ],
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Updates/Creates multiple entity types in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.batchUpdate({
            parent: "Test string",
        }, {
            entityTypeBatchInline: {
                entityTypes: [
                    {
                        autoExpansionMode: "Test string",
                        displayName: "Test string",
                        enableFuzzyExtraction: true,
                        entities: [
                            {
                                synonyms: [
                                    "Test string"                                ],
                                value: "Test string",
                            }                        ],
                        kind: "Test string",
                        name: "Test string",
                    }                ],
            },
            entityTypeBatchUri: "Test string",
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Creates an entity type in the specified agent. */
        await gapi.client.dialogflow.projects.agent.entityTypes.create({
            languageCode: "Test string",
            parent: "Test string",
        }, {
            autoExpansionMode: "Test string",
            displayName: "Test string",
            enableFuzzyExtraction: true,
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            kind: "Test string",
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Deletes the specified entity type. */
        await gapi.client.dialogflow.projects.agent.entityTypes.delete({
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Retrieves the specified entity type. */
        await gapi.client.dialogflow.projects.agent.entityTypes.get({
            languageCode: "Test string",
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Returns the list of all entity types in the specified agent. */
        await gapi.client.dialogflow.projects.agent.entityTypes.list({
            languageCode: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Updates the specified entity type. */
        await gapi.client.dialogflow.projects.agent.entityTypes.patch({
            languageCode: "Test string",
            name: "Test string",
            updateMask: "Test string",
        }, {
            autoExpansionMode: "Test string",
            displayName: "Test string",
            enableFuzzyExtraction: true,
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            kind: "Test string",
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Returns the list of all non-draft environments of the specified agent. */
        await gapi.client.dialogflow.projects.agent.environments.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Deletes intents in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.intents.batchDelete({
            parent: "Test string",
        }, {
            intents: [
                {
                    action: "Test string",
                    defaultResponsePlatforms: [
                        "Test string"                    ],
                    displayName: "Test string",
                    events: [
                        "Test string"                    ],
                    followupIntentInfo: [
                        {
                            followupIntentName: "Test string",
                            parentFollowupIntentName: "Test string",
                        }                    ],
                    inputContextNames: [
                        "Test string"                    ],
                    isFallback: true,
                    messages: [
                        {
                            basicCard: {
                                buttons: [
                                    {
                                        openUriAction: {
                                            uri: "Test string",
                                        },
                                        title: "Test string",
                                    }                                ],
                                formattedText: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            browseCarouselCard: {
                                imageDisplayOptions: "Test string",
                                items: [
                                    {
                                        description: "Test string",
                                        footer: "Test string",
                                        image: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        openUriAction: {
                                            url: "Test string",
                                            urlTypeHint: "Test string",
                                        },
                                        title: "Test string",
                                    }                                ],
                            },
                            card: {
                                buttons: [
                                    {
                                        postback: "Test string",
                                        text: "Test string",
                                    }                                ],
                                imageUri: "Test string",
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            carouselSelect: {
                                items: [
                                    {
                                        description: "Test string",
                                        image: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        info: {
                                            key: "Test string",
                                            synonyms: [
                                                "Test string"                                            ],
                                        },
                                        title: "Test string",
                                    }                                ],
                            },
                            image: {
                                accessibilityText: "Test string",
                                imageUri: "Test string",
                            },
                            linkOutSuggestion: {
                                destinationName: "Test string",
                                uri: "Test string",
                            },
                            listSelect: {
                                items: [
                                    {
                                        description: "Test string",
                                        image: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        info: {
                                            key: "Test string",
                                            synonyms: [
                                                "Test string"                                            ],
                                        },
                                        title: "Test string",
                                    }                                ],
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            mediaContent: {
                                mediaObjects: [
                                    {
                                        contentUrl: "Test string",
                                        description: "Test string",
                                        icon: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        largeImage: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        name: "Test string",
                                    }                                ],
                                mediaType: "Test string",
                            },
                            payload: {
                                A: 42                            },
                            platform: "Test string",
                            quickReplies: {
                                quickReplies: [
                                    "Test string"                                ],
                                title: "Test string",
                            },
                            simpleResponses: {
                                simpleResponses: [
                                    {
                                        displayText: "Test string",
                                        ssml: "Test string",
                                        textToSpeech: "Test string",
                                    }                                ],
                            },
                            suggestions: {
                                suggestions: [
                                    {
                                        title: "Test string",
                                    }                                ],
                            },
                            tableCard: {
                                buttons: [
                                    {
                                        openUriAction: {
                                            uri: "Test string",
                                        },
                                        title: "Test string",
                                    }                                ],
                                columnProperties: [
                                    {
                                        header: "Test string",
                                        horizontalAlignment: "Test string",
                                    }                                ],
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                rows: [
                                    {
                                        cells: [
                                            {
                                                text: "Test string",
                                            }                                        ],
                                        dividerAfter: true,
                                    }                                ],
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            text: {
                                text: [
                                    "Test string"                                ],
                            },
                        }                    ],
                    mlDisabled: true,
                    name: "Test string",
                    outputContexts: [
                        {
                            lifespanCount: 42,
                            name: "Test string",
                            parameters: {
                                A: 42                            },
                        }                    ],
                    parameters: [
                        {
                            defaultValue: "Test string",
                            displayName: "Test string",
                            entityTypeDisplayName: "Test string",
                            isList: true,
                            mandatory: true,
                            name: "Test string",
                            prompts: [
                                "Test string"                            ],
                            value: "Test string",
                        }                    ],
                    parentFollowupIntentName: "Test string",
                    priority: 42,
                    resetContexts: true,
                    rootFollowupIntentName: "Test string",
                    trainingPhrases: [
                        {
                            name: "Test string",
                            parts: [
                                {
                                    alias: "Test string",
                                    entityType: "Test string",
                                    text: "Test string",
                                    userDefined: true,
                                }                            ],
                            timesAddedCount: 42,
                            type: "Test string",
                        }                    ],
                    webhookState: "Test string",
                }            ],
        });
        /** Updates/Creates multiple intents in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.intents.batchUpdate({
            parent: "Test string",
        }, {
            intentBatchInline: {
                intents: [
                    {
                        action: "Test string",
                        defaultResponsePlatforms: [
                            "Test string"                        ],
                        displayName: "Test string",
                        events: [
                            "Test string"                        ],
                        followupIntentInfo: [
                            {
                                followupIntentName: "Test string",
                                parentFollowupIntentName: "Test string",
                            }                        ],
                        inputContextNames: [
                            "Test string"                        ],
                        isFallback: true,
                        messages: [
                            {
                                basicCard: {
                                    buttons: [
                                        {
                                            openUriAction: {
                                                uri: "Test string",
                                            },
                                            title: "Test string",
                                        }                                    ],
                                    formattedText: "Test string",
                                    image: {
                                        accessibilityText: "Test string",
                                        imageUri: "Test string",
                                    },
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                browseCarouselCard: {
                                    imageDisplayOptions: "Test string",
                                    items: [
                                        {
                                            description: "Test string",
                                            footer: "Test string",
                                            image: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            openUriAction: {
                                                url: "Test string",
                                                urlTypeHint: "Test string",
                                            },
                                            title: "Test string",
                                        }                                    ],
                                },
                                card: {
                                    buttons: [
                                        {
                                            postback: "Test string",
                                            text: "Test string",
                                        }                                    ],
                                    imageUri: "Test string",
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                carouselSelect: {
                                    items: [
                                        {
                                            description: "Test string",
                                            image: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            info: {
                                                key: "Test string",
                                                synonyms: [
                                                    "Test string"                                                ],
                                            },
                                            title: "Test string",
                                        }                                    ],
                                },
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                linkOutSuggestion: {
                                    destinationName: "Test string",
                                    uri: "Test string",
                                },
                                listSelect: {
                                    items: [
                                        {
                                            description: "Test string",
                                            image: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            info: {
                                                key: "Test string",
                                                synonyms: [
                                                    "Test string"                                                ],
                                            },
                                            title: "Test string",
                                        }                                    ],
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                mediaContent: {
                                    mediaObjects: [
                                        {
                                            contentUrl: "Test string",
                                            description: "Test string",
                                            icon: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            largeImage: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            name: "Test string",
                                        }                                    ],
                                    mediaType: "Test string",
                                },
                                payload: {
                                    A: 42                                },
                                platform: "Test string",
                                quickReplies: {
                                    quickReplies: [
                                        "Test string"                                    ],
                                    title: "Test string",
                                },
                                simpleResponses: {
                                    simpleResponses: [
                                        {
                                            displayText: "Test string",
                                            ssml: "Test string",
                                            textToSpeech: "Test string",
                                        }                                    ],
                                },
                                suggestions: {
                                    suggestions: [
                                        {
                                            title: "Test string",
                                        }                                    ],
                                },
                                tableCard: {
                                    buttons: [
                                        {
                                            openUriAction: {
                                                uri: "Test string",
                                            },
                                            title: "Test string",
                                        }                                    ],
                                    columnProperties: [
                                        {
                                            header: "Test string",
                                            horizontalAlignment: "Test string",
                                        }                                    ],
                                    image: {
                                        accessibilityText: "Test string",
                                        imageUri: "Test string",
                                    },
                                    rows: [
                                        {
                                            cells: [
                                                {
                                                    text: "Test string",
                                                }                                            ],
                                            dividerAfter: true,
                                        }                                    ],
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                text: {
                                    text: [
                                        "Test string"                                    ],
                                },
                            }                        ],
                        mlDisabled: true,
                        name: "Test string",
                        outputContexts: [
                            {
                                lifespanCount: 42,
                                name: "Test string",
                                parameters: {
                                    A: 42                                },
                            }                        ],
                        parameters: [
                            {
                                defaultValue: "Test string",
                                displayName: "Test string",
                                entityTypeDisplayName: "Test string",
                                isList: true,
                                mandatory: true,
                                name: "Test string",
                                prompts: [
                                    "Test string"                                ],
                                value: "Test string",
                            }                        ],
                        parentFollowupIntentName: "Test string",
                        priority: 42,
                        resetContexts: true,
                        rootFollowupIntentName: "Test string",
                        trainingPhrases: [
                            {
                                name: "Test string",
                                parts: [
                                    {
                                        alias: "Test string",
                                        entityType: "Test string",
                                        text: "Test string",
                                        userDefined: true,
                                    }                                ],
                                timesAddedCount: 42,
                                type: "Test string",
                            }                        ],
                        webhookState: "Test string",
                    }                ],
            },
            intentBatchUri: "Test string",
            intentView: "Test string",
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Creates an intent in the specified agent. */
        await gapi.client.dialogflow.projects.agent.intents.create({
            intentView: "Test string",
            languageCode: "Test string",
            parent: "Test string",
        }, {
            action: "Test string",
            defaultResponsePlatforms: [
                "Test string"            ],
            displayName: "Test string",
            events: [
                "Test string"            ],
            followupIntentInfo: [
                {
                    followupIntentName: "Test string",
                    parentFollowupIntentName: "Test string",
                }            ],
            inputContextNames: [
                "Test string"            ],
            isFallback: true,
            messages: [
                {
                    basicCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        formattedText: "Test string",
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    browseCarouselCard: {
                        imageDisplayOptions: "Test string",
                        items: [
                            {
                                description: "Test string",
                                footer: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                openUriAction: {
                                    url: "Test string",
                                    urlTypeHint: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                    },
                    card: {
                        buttons: [
                            {
                                postback: "Test string",
                                text: "Test string",
                            }                        ],
                        imageUri: "Test string",
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    carouselSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                    },
                    image: {
                        accessibilityText: "Test string",
                        imageUri: "Test string",
                    },
                    linkOutSuggestion: {
                        destinationName: "Test string",
                        uri: "Test string",
                    },
                    listSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    mediaContent: {
                        mediaObjects: [
                            {
                                contentUrl: "Test string",
                                description: "Test string",
                                icon: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                largeImage: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                name: "Test string",
                            }                        ],
                        mediaType: "Test string",
                    },
                    payload: {
                        A: 42                    },
                    platform: "Test string",
                    quickReplies: {
                        quickReplies: [
                            "Test string"                        ],
                        title: "Test string",
                    },
                    simpleResponses: {
                        simpleResponses: [
                            {
                                displayText: "Test string",
                                ssml: "Test string",
                                textToSpeech: "Test string",
                            }                        ],
                    },
                    suggestions: {
                        suggestions: [
                            {
                                title: "Test string",
                            }                        ],
                    },
                    tableCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        columnProperties: [
                            {
                                header: "Test string",
                                horizontalAlignment: "Test string",
                            }                        ],
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        rows: [
                            {
                                cells: [
                                    {
                                        text: "Test string",
                                    }                                ],
                                dividerAfter: true,
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    text: {
                        text: [
                            "Test string"                        ],
                    },
                }            ],
            mlDisabled: true,
            name: "Test string",
            outputContexts: [
                {
                    lifespanCount: 42,
                    name: "Test string",
                    parameters: {
                        A: 42                    },
                }            ],
            parameters: [
                {
                    defaultValue: "Test string",
                    displayName: "Test string",
                    entityTypeDisplayName: "Test string",
                    isList: true,
                    mandatory: true,
                    name: "Test string",
                    prompts: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            parentFollowupIntentName: "Test string",
            priority: 42,
            resetContexts: true,
            rootFollowupIntentName: "Test string",
            trainingPhrases: [
                {
                    name: "Test string",
                    parts: [
                        {
                            alias: "Test string",
                            entityType: "Test string",
                            text: "Test string",
                            userDefined: true,
                        }                    ],
                    timesAddedCount: 42,
                    type: "Test string",
                }            ],
            webhookState: "Test string",
        });
        /** Deletes the specified intent and its direct or indirect followup intents. */
        await gapi.client.dialogflow.projects.agent.intents.delete({
            name: "Test string",
        });
        /** Retrieves the specified intent. */
        await gapi.client.dialogflow.projects.agent.intents.get({
            intentView: "Test string",
            languageCode: "Test string",
            name: "Test string",
        });
        /** Returns the list of all intents in the specified agent. */
        await gapi.client.dialogflow.projects.agent.intents.list({
            intentView: "Test string",
            languageCode: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified intent. */
        await gapi.client.dialogflow.projects.agent.intents.patch({
            intentView: "Test string",
            languageCode: "Test string",
            name: "Test string",
            updateMask: "Test string",
        }, {
            action: "Test string",
            defaultResponsePlatforms: [
                "Test string"            ],
            displayName: "Test string",
            events: [
                "Test string"            ],
            followupIntentInfo: [
                {
                    followupIntentName: "Test string",
                    parentFollowupIntentName: "Test string",
                }            ],
            inputContextNames: [
                "Test string"            ],
            isFallback: true,
            messages: [
                {
                    basicCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        formattedText: "Test string",
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    browseCarouselCard: {
                        imageDisplayOptions: "Test string",
                        items: [
                            {
                                description: "Test string",
                                footer: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                openUriAction: {
                                    url: "Test string",
                                    urlTypeHint: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                    },
                    card: {
                        buttons: [
                            {
                                postback: "Test string",
                                text: "Test string",
                            }                        ],
                        imageUri: "Test string",
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    carouselSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                    },
                    image: {
                        accessibilityText: "Test string",
                        imageUri: "Test string",
                    },
                    linkOutSuggestion: {
                        destinationName: "Test string",
                        uri: "Test string",
                    },
                    listSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    mediaContent: {
                        mediaObjects: [
                            {
                                contentUrl: "Test string",
                                description: "Test string",
                                icon: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                largeImage: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                name: "Test string",
                            }                        ],
                        mediaType: "Test string",
                    },
                    payload: {
                        A: 42                    },
                    platform: "Test string",
                    quickReplies: {
                        quickReplies: [
                            "Test string"                        ],
                        title: "Test string",
                    },
                    simpleResponses: {
                        simpleResponses: [
                            {
                                displayText: "Test string",
                                ssml: "Test string",
                                textToSpeech: "Test string",
                            }                        ],
                    },
                    suggestions: {
                        suggestions: [
                            {
                                title: "Test string",
                            }                        ],
                    },
                    tableCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        columnProperties: [
                            {
                                header: "Test string",
                                horizontalAlignment: "Test string",
                            }                        ],
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        rows: [
                            {
                                cells: [
                                    {
                                        text: "Test string",
                                    }                                ],
                                dividerAfter: true,
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    text: {
                        text: [
                            "Test string"                        ],
                    },
                }            ],
            mlDisabled: true,
            name: "Test string",
            outputContexts: [
                {
                    lifespanCount: 42,
                    name: "Test string",
                    parameters: {
                        A: 42                    },
                }            ],
            parameters: [
                {
                    defaultValue: "Test string",
                    displayName: "Test string",
                    entityTypeDisplayName: "Test string",
                    isList: true,
                    mandatory: true,
                    name: "Test string",
                    prompts: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            parentFollowupIntentName: "Test string",
            priority: 42,
            resetContexts: true,
            rootFollowupIntentName: "Test string",
            trainingPhrases: [
                {
                    name: "Test string",
                    parts: [
                        {
                            alias: "Test string",
                            entityType: "Test string",
                            text: "Test string",
                            userDefined: true,
                        }                    ],
                    timesAddedCount: 42,
                    type: "Test string",
                }            ],
            webhookState: "Test string",
        });
        /** Deletes all active contexts in the specified session. */
        await gapi.client.dialogflow.projects.agent.sessions.deleteContexts({
            parent: "Test string",
        });
        /** Creates a context. If the specified context already exists, overrides the context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.create({
            parent: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /** Deletes the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.delete({
            name: "Test string",
        });
        /** Retrieves the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.get({
            name: "Test string",
        });
        /** Returns the list of all contexts in the specified session. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /**
         * Creates a session entity type. If the specified session entity type already exists, overrides the session entity type. This method doesn't work with Google Assistant integration.
         * Contact Dialogflow support if you need to use session entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.create({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /**
         * Deletes the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.delete({
            name: "Test string",
        });
        /**
         * Retrieves the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.get({
            name: "Test string",
        });
        /**
         * Returns the list of all session entity types in the specified session. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session
         * entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Updates the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /**
         * Processes a natural language query and returns structured, actionable data as a result. This method is not idempotent, because it may cause contexts and session entity types to be
         * updated, which in turn might affect results of future queries. Note: Always use agent versions for production traffic. See [Versions and
         * environments](https://cloud.google.com/dialogflow/es/docs/agents-versions).
         */
        await gapi.client.dialogflow.projects.agent.sessions.detectIntent({
            session: "Test string",
        }, {
            inputAudio: "Test string",
            outputAudioConfig: {
                audioEncoding: "Test string",
                sampleRateHertz: 42,
                synthesizeSpeechConfig: {
                    effectsProfileId: [
                        "Test string"                    ],
                    pitch: 42,
                    speakingRate: 42,
                    voice: {
                        name: "Test string",
                        ssmlGender: "Test string",
                    },
                    volumeGainDb: 42,
                },
            },
            outputAudioConfigMask: "Test string",
            queryInput: {
                audioConfig: {
                    audioEncoding: "Test string",
                    enableWordInfo: true,
                    languageCode: "Test string",
                    model: "Test string",
                    modelVariant: "Test string",
                    phraseHints: [
                        "Test string"                    ],
                    sampleRateHertz: 42,
                    singleUtterance: true,
                    speechContexts: [
                        {
                            boost: 42,
                            phrases: [
                                "Test string"                            ],
                        }                    ],
                },
                event: {
                    languageCode: "Test string",
                    name: "Test string",
                    parameters: {
                        A: 42                    },
                },
                text: {
                    languageCode: "Test string",
                    text: "Test string",
                },
            },
            queryParams: {
                contexts: [
                    {
                        lifespanCount: 42,
                        name: "Test string",
                        parameters: {
                            A: 42                        },
                    }                ],
                geoLocation: {
                    latitude: 42,
                    longitude: 42,
                },
                payload: {
                    A: 42                },
                resetContexts: true,
                sentimentAnalysisRequestConfig: {
                    analyzeQueryTextSentiment: true,
                },
                sessionEntityTypes: [
                    {
                        entities: [
                            {
                                synonyms: [
                                    "Test string"                                ],
                                value: "Test string",
                            }                        ],
                        entityOverrideMode: "Test string",
                        name: "Test string",
                    }                ],
                timeZone: "Test string",
                webhookHeaders: {
                    A: "Test string"                },
            },
        });
        /** Creates a context. If the specified context already exists, overrides the context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.create({
            parent: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /** Deletes the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.delete({
            name: "Test string",
        });
        /** Retrieves the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.get({
            name: "Test string",
        });
        /** Returns the list of all contexts in the specified session. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /**
         * Creates a session entity type. If the specified session entity type already exists, overrides the session entity type. This method doesn't work with Google Assistant integration.
         * Contact Dialogflow support if you need to use session entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.create({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /**
         * Deletes the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.delete({
            name: "Test string",
        });
        /**
         * Retrieves the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.get({
            name: "Test string",
        });
        /**
         * Returns the list of all session entity types in the specified session. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session
         * entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Updates the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /**
         * Restores the specified agent from a ZIP file. Replaces the current agent version with a new one. All the intents and entity types in the older version are deleted. After the restore,
         * the restored draft agent will be trained automatically (unless disabled in agent settings). However, once the restore is done, training may not be completed yet. Please call TrainAgent
         * and wait for the operation it returns in order to train explicitly. Operation An operation which tracks when restoring is complete. It only tracks when the draft agent is updated not
         * when it is done training.
         */
        await gapi.client.dialogflow.projects.agent.restore({
            parent: "Test string",
        }, {
            agentContent: "Test string",
            agentUri: "Test string",
        });
        /** Deletes entity types in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.batchDelete({
            parent: "Test string",
        }, {
            entityTypeNames: [
                "Test string"            ],
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Updates/Creates multiple entity types in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.batchUpdate({
            parent: "Test string",
        }, {
            entityTypeBatchInline: {
                entityTypes: [
                    {
                        autoExpansionMode: "Test string",
                        displayName: "Test string",
                        enableFuzzyExtraction: true,
                        entities: [
                            {
                                synonyms: [
                                    "Test string"                                ],
                                value: "Test string",
                            }                        ],
                        kind: "Test string",
                        name: "Test string",
                    }                ],
            },
            entityTypeBatchUri: "Test string",
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Creates an entity type in the specified agent. */
        await gapi.client.dialogflow.projects.agent.entityTypes.create({
            languageCode: "Test string",
            parent: "Test string",
        }, {
            autoExpansionMode: "Test string",
            displayName: "Test string",
            enableFuzzyExtraction: true,
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            kind: "Test string",
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Deletes the specified entity type. */
        await gapi.client.dialogflow.projects.agent.entityTypes.delete({
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Retrieves the specified entity type. */
        await gapi.client.dialogflow.projects.agent.entityTypes.get({
            languageCode: "Test string",
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Returns the list of all entity types in the specified agent. */
        await gapi.client.dialogflow.projects.agent.entityTypes.list({
            languageCode: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Updates the specified entity type. */
        await gapi.client.dialogflow.projects.agent.entityTypes.patch({
            languageCode: "Test string",
            name: "Test string",
            updateMask: "Test string",
        }, {
            autoExpansionMode: "Test string",
            displayName: "Test string",
            enableFuzzyExtraction: true,
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            kind: "Test string",
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Returns the list of all non-draft environments of the specified agent. */
        await gapi.client.dialogflow.projects.agent.environments.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Deletes intents in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.intents.batchDelete({
            parent: "Test string",
        }, {
            intents: [
                {
                    action: "Test string",
                    defaultResponsePlatforms: [
                        "Test string"                    ],
                    displayName: "Test string",
                    events: [
                        "Test string"                    ],
                    followupIntentInfo: [
                        {
                            followupIntentName: "Test string",
                            parentFollowupIntentName: "Test string",
                        }                    ],
                    inputContextNames: [
                        "Test string"                    ],
                    isFallback: true,
                    messages: [
                        {
                            basicCard: {
                                buttons: [
                                    {
                                        openUriAction: {
                                            uri: "Test string",
                                        },
                                        title: "Test string",
                                    }                                ],
                                formattedText: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            browseCarouselCard: {
                                imageDisplayOptions: "Test string",
                                items: [
                                    {
                                        description: "Test string",
                                        footer: "Test string",
                                        image: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        openUriAction: {
                                            url: "Test string",
                                            urlTypeHint: "Test string",
                                        },
                                        title: "Test string",
                                    }                                ],
                            },
                            card: {
                                buttons: [
                                    {
                                        postback: "Test string",
                                        text: "Test string",
                                    }                                ],
                                imageUri: "Test string",
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            carouselSelect: {
                                items: [
                                    {
                                        description: "Test string",
                                        image: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        info: {
                                            key: "Test string",
                                            synonyms: [
                                                "Test string"                                            ],
                                        },
                                        title: "Test string",
                                    }                                ],
                            },
                            image: {
                                accessibilityText: "Test string",
                                imageUri: "Test string",
                            },
                            linkOutSuggestion: {
                                destinationName: "Test string",
                                uri: "Test string",
                            },
                            listSelect: {
                                items: [
                                    {
                                        description: "Test string",
                                        image: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        info: {
                                            key: "Test string",
                                            synonyms: [
                                                "Test string"                                            ],
                                        },
                                        title: "Test string",
                                    }                                ],
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            mediaContent: {
                                mediaObjects: [
                                    {
                                        contentUrl: "Test string",
                                        description: "Test string",
                                        icon: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        largeImage: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        name: "Test string",
                                    }                                ],
                                mediaType: "Test string",
                            },
                            payload: {
                                A: 42                            },
                            platform: "Test string",
                            quickReplies: {
                                quickReplies: [
                                    "Test string"                                ],
                                title: "Test string",
                            },
                            simpleResponses: {
                                simpleResponses: [
                                    {
                                        displayText: "Test string",
                                        ssml: "Test string",
                                        textToSpeech: "Test string",
                                    }                                ],
                            },
                            suggestions: {
                                suggestions: [
                                    {
                                        title: "Test string",
                                    }                                ],
                            },
                            tableCard: {
                                buttons: [
                                    {
                                        openUriAction: {
                                            uri: "Test string",
                                        },
                                        title: "Test string",
                                    }                                ],
                                columnProperties: [
                                    {
                                        header: "Test string",
                                        horizontalAlignment: "Test string",
                                    }                                ],
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                rows: [
                                    {
                                        cells: [
                                            {
                                                text: "Test string",
                                            }                                        ],
                                        dividerAfter: true,
                                    }                                ],
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            text: {
                                text: [
                                    "Test string"                                ],
                            },
                        }                    ],
                    mlDisabled: true,
                    name: "Test string",
                    outputContexts: [
                        {
                            lifespanCount: 42,
                            name: "Test string",
                            parameters: {
                                A: 42                            },
                        }                    ],
                    parameters: [
                        {
                            defaultValue: "Test string",
                            displayName: "Test string",
                            entityTypeDisplayName: "Test string",
                            isList: true,
                            mandatory: true,
                            name: "Test string",
                            prompts: [
                                "Test string"                            ],
                            value: "Test string",
                        }                    ],
                    parentFollowupIntentName: "Test string",
                    priority: 42,
                    resetContexts: true,
                    rootFollowupIntentName: "Test string",
                    trainingPhrases: [
                        {
                            name: "Test string",
                            parts: [
                                {
                                    alias: "Test string",
                                    entityType: "Test string",
                                    text: "Test string",
                                    userDefined: true,
                                }                            ],
                            timesAddedCount: 42,
                            type: "Test string",
                        }                    ],
                    webhookState: "Test string",
                }            ],
        });
        /** Updates/Creates multiple intents in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.intents.batchUpdate({
            parent: "Test string",
        }, {
            intentBatchInline: {
                intents: [
                    {
                        action: "Test string",
                        defaultResponsePlatforms: [
                            "Test string"                        ],
                        displayName: "Test string",
                        events: [
                            "Test string"                        ],
                        followupIntentInfo: [
                            {
                                followupIntentName: "Test string",
                                parentFollowupIntentName: "Test string",
                            }                        ],
                        inputContextNames: [
                            "Test string"                        ],
                        isFallback: true,
                        messages: [
                            {
                                basicCard: {
                                    buttons: [
                                        {
                                            openUriAction: {
                                                uri: "Test string",
                                            },
                                            title: "Test string",
                                        }                                    ],
                                    formattedText: "Test string",
                                    image: {
                                        accessibilityText: "Test string",
                                        imageUri: "Test string",
                                    },
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                browseCarouselCard: {
                                    imageDisplayOptions: "Test string",
                                    items: [
                                        {
                                            description: "Test string",
                                            footer: "Test string",
                                            image: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            openUriAction: {
                                                url: "Test string",
                                                urlTypeHint: "Test string",
                                            },
                                            title: "Test string",
                                        }                                    ],
                                },
                                card: {
                                    buttons: [
                                        {
                                            postback: "Test string",
                                            text: "Test string",
                                        }                                    ],
                                    imageUri: "Test string",
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                carouselSelect: {
                                    items: [
                                        {
                                            description: "Test string",
                                            image: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            info: {
                                                key: "Test string",
                                                synonyms: [
                                                    "Test string"                                                ],
                                            },
                                            title: "Test string",
                                        }                                    ],
                                },
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                linkOutSuggestion: {
                                    destinationName: "Test string",
                                    uri: "Test string",
                                },
                                listSelect: {
                                    items: [
                                        {
                                            description: "Test string",
                                            image: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            info: {
                                                key: "Test string",
                                                synonyms: [
                                                    "Test string"                                                ],
                                            },
                                            title: "Test string",
                                        }                                    ],
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                mediaContent: {
                                    mediaObjects: [
                                        {
                                            contentUrl: "Test string",
                                            description: "Test string",
                                            icon: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            largeImage: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            name: "Test string",
                                        }                                    ],
                                    mediaType: "Test string",
                                },
                                payload: {
                                    A: 42                                },
                                platform: "Test string",
                                quickReplies: {
                                    quickReplies: [
                                        "Test string"                                    ],
                                    title: "Test string",
                                },
                                simpleResponses: {
                                    simpleResponses: [
                                        {
                                            displayText: "Test string",
                                            ssml: "Test string",
                                            textToSpeech: "Test string",
                                        }                                    ],
                                },
                                suggestions: {
                                    suggestions: [
                                        {
                                            title: "Test string",
                                        }                                    ],
                                },
                                tableCard: {
                                    buttons: [
                                        {
                                            openUriAction: {
                                                uri: "Test string",
                                            },
                                            title: "Test string",
                                        }                                    ],
                                    columnProperties: [
                                        {
                                            header: "Test string",
                                            horizontalAlignment: "Test string",
                                        }                                    ],
                                    image: {
                                        accessibilityText: "Test string",
                                        imageUri: "Test string",
                                    },
                                    rows: [
                                        {
                                            cells: [
                                                {
                                                    text: "Test string",
                                                }                                            ],
                                            dividerAfter: true,
                                        }                                    ],
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                text: {
                                    text: [
                                        "Test string"                                    ],
                                },
                            }                        ],
                        mlDisabled: true,
                        name: "Test string",
                        outputContexts: [
                            {
                                lifespanCount: 42,
                                name: "Test string",
                                parameters: {
                                    A: 42                                },
                            }                        ],
                        parameters: [
                            {
                                defaultValue: "Test string",
                                displayName: "Test string",
                                entityTypeDisplayName: "Test string",
                                isList: true,
                                mandatory: true,
                                name: "Test string",
                                prompts: [
                                    "Test string"                                ],
                                value: "Test string",
                            }                        ],
                        parentFollowupIntentName: "Test string",
                        priority: 42,
                        resetContexts: true,
                        rootFollowupIntentName: "Test string",
                        trainingPhrases: [
                            {
                                name: "Test string",
                                parts: [
                                    {
                                        alias: "Test string",
                                        entityType: "Test string",
                                        text: "Test string",
                                        userDefined: true,
                                    }                                ],
                                timesAddedCount: 42,
                                type: "Test string",
                            }                        ],
                        webhookState: "Test string",
                    }                ],
            },
            intentBatchUri: "Test string",
            intentView: "Test string",
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Creates an intent in the specified agent. */
        await gapi.client.dialogflow.projects.agent.intents.create({
            intentView: "Test string",
            languageCode: "Test string",
            parent: "Test string",
        }, {
            action: "Test string",
            defaultResponsePlatforms: [
                "Test string"            ],
            displayName: "Test string",
            events: [
                "Test string"            ],
            followupIntentInfo: [
                {
                    followupIntentName: "Test string",
                    parentFollowupIntentName: "Test string",
                }            ],
            inputContextNames: [
                "Test string"            ],
            isFallback: true,
            messages: [
                {
                    basicCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        formattedText: "Test string",
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    browseCarouselCard: {
                        imageDisplayOptions: "Test string",
                        items: [
                            {
                                description: "Test string",
                                footer: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                openUriAction: {
                                    url: "Test string",
                                    urlTypeHint: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                    },
                    card: {
                        buttons: [
                            {
                                postback: "Test string",
                                text: "Test string",
                            }                        ],
                        imageUri: "Test string",
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    carouselSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                    },
                    image: {
                        accessibilityText: "Test string",
                        imageUri: "Test string",
                    },
                    linkOutSuggestion: {
                        destinationName: "Test string",
                        uri: "Test string",
                    },
                    listSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    mediaContent: {
                        mediaObjects: [
                            {
                                contentUrl: "Test string",
                                description: "Test string",
                                icon: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                largeImage: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                name: "Test string",
                            }                        ],
                        mediaType: "Test string",
                    },
                    payload: {
                        A: 42                    },
                    platform: "Test string",
                    quickReplies: {
                        quickReplies: [
                            "Test string"                        ],
                        title: "Test string",
                    },
                    simpleResponses: {
                        simpleResponses: [
                            {
                                displayText: "Test string",
                                ssml: "Test string",
                                textToSpeech: "Test string",
                            }                        ],
                    },
                    suggestions: {
                        suggestions: [
                            {
                                title: "Test string",
                            }                        ],
                    },
                    tableCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        columnProperties: [
                            {
                                header: "Test string",
                                horizontalAlignment: "Test string",
                            }                        ],
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        rows: [
                            {
                                cells: [
                                    {
                                        text: "Test string",
                                    }                                ],
                                dividerAfter: true,
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    text: {
                        text: [
                            "Test string"                        ],
                    },
                }            ],
            mlDisabled: true,
            name: "Test string",
            outputContexts: [
                {
                    lifespanCount: 42,
                    name: "Test string",
                    parameters: {
                        A: 42                    },
                }            ],
            parameters: [
                {
                    defaultValue: "Test string",
                    displayName: "Test string",
                    entityTypeDisplayName: "Test string",
                    isList: true,
                    mandatory: true,
                    name: "Test string",
                    prompts: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            parentFollowupIntentName: "Test string",
            priority: 42,
            resetContexts: true,
            rootFollowupIntentName: "Test string",
            trainingPhrases: [
                {
                    name: "Test string",
                    parts: [
                        {
                            alias: "Test string",
                            entityType: "Test string",
                            text: "Test string",
                            userDefined: true,
                        }                    ],
                    timesAddedCount: 42,
                    type: "Test string",
                }            ],
            webhookState: "Test string",
        });
        /** Deletes the specified intent and its direct or indirect followup intents. */
        await gapi.client.dialogflow.projects.agent.intents.delete({
            name: "Test string",
        });
        /** Retrieves the specified intent. */
        await gapi.client.dialogflow.projects.agent.intents.get({
            intentView: "Test string",
            languageCode: "Test string",
            name: "Test string",
        });
        /** Returns the list of all intents in the specified agent. */
        await gapi.client.dialogflow.projects.agent.intents.list({
            intentView: "Test string",
            languageCode: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified intent. */
        await gapi.client.dialogflow.projects.agent.intents.patch({
            intentView: "Test string",
            languageCode: "Test string",
            name: "Test string",
            updateMask: "Test string",
        }, {
            action: "Test string",
            defaultResponsePlatforms: [
                "Test string"            ],
            displayName: "Test string",
            events: [
                "Test string"            ],
            followupIntentInfo: [
                {
                    followupIntentName: "Test string",
                    parentFollowupIntentName: "Test string",
                }            ],
            inputContextNames: [
                "Test string"            ],
            isFallback: true,
            messages: [
                {
                    basicCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        formattedText: "Test string",
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    browseCarouselCard: {
                        imageDisplayOptions: "Test string",
                        items: [
                            {
                                description: "Test string",
                                footer: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                openUriAction: {
                                    url: "Test string",
                                    urlTypeHint: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                    },
                    card: {
                        buttons: [
                            {
                                postback: "Test string",
                                text: "Test string",
                            }                        ],
                        imageUri: "Test string",
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    carouselSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                    },
                    image: {
                        accessibilityText: "Test string",
                        imageUri: "Test string",
                    },
                    linkOutSuggestion: {
                        destinationName: "Test string",
                        uri: "Test string",
                    },
                    listSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    mediaContent: {
                        mediaObjects: [
                            {
                                contentUrl: "Test string",
                                description: "Test string",
                                icon: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                largeImage: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                name: "Test string",
                            }                        ],
                        mediaType: "Test string",
                    },
                    payload: {
                        A: 42                    },
                    platform: "Test string",
                    quickReplies: {
                        quickReplies: [
                            "Test string"                        ],
                        title: "Test string",
                    },
                    simpleResponses: {
                        simpleResponses: [
                            {
                                displayText: "Test string",
                                ssml: "Test string",
                                textToSpeech: "Test string",
                            }                        ],
                    },
                    suggestions: {
                        suggestions: [
                            {
                                title: "Test string",
                            }                        ],
                    },
                    tableCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        columnProperties: [
                            {
                                header: "Test string",
                                horizontalAlignment: "Test string",
                            }                        ],
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        rows: [
                            {
                                cells: [
                                    {
                                        text: "Test string",
                                    }                                ],
                                dividerAfter: true,
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    text: {
                        text: [
                            "Test string"                        ],
                    },
                }            ],
            mlDisabled: true,
            name: "Test string",
            outputContexts: [
                {
                    lifespanCount: 42,
                    name: "Test string",
                    parameters: {
                        A: 42                    },
                }            ],
            parameters: [
                {
                    defaultValue: "Test string",
                    displayName: "Test string",
                    entityTypeDisplayName: "Test string",
                    isList: true,
                    mandatory: true,
                    name: "Test string",
                    prompts: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            parentFollowupIntentName: "Test string",
            priority: 42,
            resetContexts: true,
            rootFollowupIntentName: "Test string",
            trainingPhrases: [
                {
                    name: "Test string",
                    parts: [
                        {
                            alias: "Test string",
                            entityType: "Test string",
                            text: "Test string",
                            userDefined: true,
                        }                    ],
                    timesAddedCount: 42,
                    type: "Test string",
                }            ],
            webhookState: "Test string",
        });
        /** Deletes all active contexts in the specified session. */
        await gapi.client.dialogflow.projects.agent.sessions.deleteContexts({
            parent: "Test string",
        });
        /** Creates a context. If the specified context already exists, overrides the context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.create({
            parent: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /** Deletes the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.delete({
            name: "Test string",
        });
        /** Retrieves the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.get({
            name: "Test string",
        });
        /** Returns the list of all contexts in the specified session. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /**
         * Creates a session entity type. If the specified session entity type already exists, overrides the session entity type. This method doesn't work with Google Assistant integration.
         * Contact Dialogflow support if you need to use session entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.create({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /**
         * Deletes the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.delete({
            name: "Test string",
        });
        /**
         * Retrieves the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.get({
            name: "Test string",
        });
        /**
         * Returns the list of all session entity types in the specified session. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session
         * entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Updates the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /**
         * Processes a natural language query and returns structured, actionable data as a result. This method is not idempotent, because it may cause contexts and session entity types to be
         * updated, which in turn might affect results of future queries. Note: Always use agent versions for production traffic. See [Versions and
         * environments](https://cloud.google.com/dialogflow/es/docs/agents-versions).
         */
        await gapi.client.dialogflow.projects.agent.sessions.detectIntent({
            session: "Test string",
        }, {
            inputAudio: "Test string",
            outputAudioConfig: {
                audioEncoding: "Test string",
                sampleRateHertz: 42,
                synthesizeSpeechConfig: {
                    effectsProfileId: [
                        "Test string"                    ],
                    pitch: 42,
                    speakingRate: 42,
                    voice: {
                        name: "Test string",
                        ssmlGender: "Test string",
                    },
                    volumeGainDb: 42,
                },
            },
            outputAudioConfigMask: "Test string",
            queryInput: {
                audioConfig: {
                    audioEncoding: "Test string",
                    enableWordInfo: true,
                    languageCode: "Test string",
                    model: "Test string",
                    modelVariant: "Test string",
                    phraseHints: [
                        "Test string"                    ],
                    sampleRateHertz: 42,
                    singleUtterance: true,
                    speechContexts: [
                        {
                            boost: 42,
                            phrases: [
                                "Test string"                            ],
                        }                    ],
                },
                event: {
                    languageCode: "Test string",
                    name: "Test string",
                    parameters: {
                        A: 42                    },
                },
                text: {
                    languageCode: "Test string",
                    text: "Test string",
                },
            },
            queryParams: {
                contexts: [
                    {
                        lifespanCount: 42,
                        name: "Test string",
                        parameters: {
                            A: 42                        },
                    }                ],
                geoLocation: {
                    latitude: 42,
                    longitude: 42,
                },
                payload: {
                    A: 42                },
                resetContexts: true,
                sentimentAnalysisRequestConfig: {
                    analyzeQueryTextSentiment: true,
                },
                sessionEntityTypes: [
                    {
                        entities: [
                            {
                                synonyms: [
                                    "Test string"                                ],
                                value: "Test string",
                            }                        ],
                        entityOverrideMode: "Test string",
                        name: "Test string",
                    }                ],
                timeZone: "Test string",
                webhookHeaders: {
                    A: "Test string"                },
            },
        });
        /** Creates a context. If the specified context already exists, overrides the context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.create({
            parent: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /** Deletes the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.delete({
            name: "Test string",
        });
        /** Retrieves the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.get({
            name: "Test string",
        });
        /** Returns the list of all contexts in the specified session. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /**
         * Creates a session entity type. If the specified session entity type already exists, overrides the session entity type. This method doesn't work with Google Assistant integration.
         * Contact Dialogflow support if you need to use session entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.create({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /**
         * Deletes the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.delete({
            name: "Test string",
        });
        /**
         * Retrieves the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.get({
            name: "Test string",
        });
        /**
         * Returns the list of all session entity types in the specified session. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session
         * entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Updates the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /**
         * Returns the list of agents. Since there is at most one conversational agent per project, this method is useful primarily for listing all agents across projects the caller has access to.
         * One can achieve that with a wildcard project collection id "-". Refer to [List Sub-Collections](https://cloud.google.com/apis/design/design_patterns#list_sub-collections).
         */
        await gapi.client.dialogflow.projects.agent.search({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Deletes entity types in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.batchDelete({
            parent: "Test string",
        }, {
            entityTypeNames: [
                "Test string"            ],
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Updates/Creates multiple entity types in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.batchUpdate({
            parent: "Test string",
        }, {
            entityTypeBatchInline: {
                entityTypes: [
                    {
                        autoExpansionMode: "Test string",
                        displayName: "Test string",
                        enableFuzzyExtraction: true,
                        entities: [
                            {
                                synonyms: [
                                    "Test string"                                ],
                                value: "Test string",
                            }                        ],
                        kind: "Test string",
                        name: "Test string",
                    }                ],
            },
            entityTypeBatchUri: "Test string",
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Creates an entity type in the specified agent. */
        await gapi.client.dialogflow.projects.agent.entityTypes.create({
            languageCode: "Test string",
            parent: "Test string",
        }, {
            autoExpansionMode: "Test string",
            displayName: "Test string",
            enableFuzzyExtraction: true,
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            kind: "Test string",
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Deletes the specified entity type. */
        await gapi.client.dialogflow.projects.agent.entityTypes.delete({
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Retrieves the specified entity type. */
        await gapi.client.dialogflow.projects.agent.entityTypes.get({
            languageCode: "Test string",
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Returns the list of all entity types in the specified agent. */
        await gapi.client.dialogflow.projects.agent.entityTypes.list({
            languageCode: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Updates the specified entity type. */
        await gapi.client.dialogflow.projects.agent.entityTypes.patch({
            languageCode: "Test string",
            name: "Test string",
            updateMask: "Test string",
        }, {
            autoExpansionMode: "Test string",
            displayName: "Test string",
            enableFuzzyExtraction: true,
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            kind: "Test string",
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Returns the list of all non-draft environments of the specified agent. */
        await gapi.client.dialogflow.projects.agent.environments.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Deletes intents in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.intents.batchDelete({
            parent: "Test string",
        }, {
            intents: [
                {
                    action: "Test string",
                    defaultResponsePlatforms: [
                        "Test string"                    ],
                    displayName: "Test string",
                    events: [
                        "Test string"                    ],
                    followupIntentInfo: [
                        {
                            followupIntentName: "Test string",
                            parentFollowupIntentName: "Test string",
                        }                    ],
                    inputContextNames: [
                        "Test string"                    ],
                    isFallback: true,
                    messages: [
                        {
                            basicCard: {
                                buttons: [
                                    {
                                        openUriAction: {
                                            uri: "Test string",
                                        },
                                        title: "Test string",
                                    }                                ],
                                formattedText: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            browseCarouselCard: {
                                imageDisplayOptions: "Test string",
                                items: [
                                    {
                                        description: "Test string",
                                        footer: "Test string",
                                        image: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        openUriAction: {
                                            url: "Test string",
                                            urlTypeHint: "Test string",
                                        },
                                        title: "Test string",
                                    }                                ],
                            },
                            card: {
                                buttons: [
                                    {
                                        postback: "Test string",
                                        text: "Test string",
                                    }                                ],
                                imageUri: "Test string",
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            carouselSelect: {
                                items: [
                                    {
                                        description: "Test string",
                                        image: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        info: {
                                            key: "Test string",
                                            synonyms: [
                                                "Test string"                                            ],
                                        },
                                        title: "Test string",
                                    }                                ],
                            },
                            image: {
                                accessibilityText: "Test string",
                                imageUri: "Test string",
                            },
                            linkOutSuggestion: {
                                destinationName: "Test string",
                                uri: "Test string",
                            },
                            listSelect: {
                                items: [
                                    {
                                        description: "Test string",
                                        image: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        info: {
                                            key: "Test string",
                                            synonyms: [
                                                "Test string"                                            ],
                                        },
                                        title: "Test string",
                                    }                                ],
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            mediaContent: {
                                mediaObjects: [
                                    {
                                        contentUrl: "Test string",
                                        description: "Test string",
                                        icon: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        largeImage: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        name: "Test string",
                                    }                                ],
                                mediaType: "Test string",
                            },
                            payload: {
                                A: 42                            },
                            platform: "Test string",
                            quickReplies: {
                                quickReplies: [
                                    "Test string"                                ],
                                title: "Test string",
                            },
                            simpleResponses: {
                                simpleResponses: [
                                    {
                                        displayText: "Test string",
                                        ssml: "Test string",
                                        textToSpeech: "Test string",
                                    }                                ],
                            },
                            suggestions: {
                                suggestions: [
                                    {
                                        title: "Test string",
                                    }                                ],
                            },
                            tableCard: {
                                buttons: [
                                    {
                                        openUriAction: {
                                            uri: "Test string",
                                        },
                                        title: "Test string",
                                    }                                ],
                                columnProperties: [
                                    {
                                        header: "Test string",
                                        horizontalAlignment: "Test string",
                                    }                                ],
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                rows: [
                                    {
                                        cells: [
                                            {
                                                text: "Test string",
                                            }                                        ],
                                        dividerAfter: true,
                                    }                                ],
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            text: {
                                text: [
                                    "Test string"                                ],
                            },
                        }                    ],
                    mlDisabled: true,
                    name: "Test string",
                    outputContexts: [
                        {
                            lifespanCount: 42,
                            name: "Test string",
                            parameters: {
                                A: 42                            },
                        }                    ],
                    parameters: [
                        {
                            defaultValue: "Test string",
                            displayName: "Test string",
                            entityTypeDisplayName: "Test string",
                            isList: true,
                            mandatory: true,
                            name: "Test string",
                            prompts: [
                                "Test string"                            ],
                            value: "Test string",
                        }                    ],
                    parentFollowupIntentName: "Test string",
                    priority: 42,
                    resetContexts: true,
                    rootFollowupIntentName: "Test string",
                    trainingPhrases: [
                        {
                            name: "Test string",
                            parts: [
                                {
                                    alias: "Test string",
                                    entityType: "Test string",
                                    text: "Test string",
                                    userDefined: true,
                                }                            ],
                            timesAddedCount: 42,
                            type: "Test string",
                        }                    ],
                    webhookState: "Test string",
                }            ],
        });
        /** Updates/Creates multiple intents in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.intents.batchUpdate({
            parent: "Test string",
        }, {
            intentBatchInline: {
                intents: [
                    {
                        action: "Test string",
                        defaultResponsePlatforms: [
                            "Test string"                        ],
                        displayName: "Test string",
                        events: [
                            "Test string"                        ],
                        followupIntentInfo: [
                            {
                                followupIntentName: "Test string",
                                parentFollowupIntentName: "Test string",
                            }                        ],
                        inputContextNames: [
                            "Test string"                        ],
                        isFallback: true,
                        messages: [
                            {
                                basicCard: {
                                    buttons: [
                                        {
                                            openUriAction: {
                                                uri: "Test string",
                                            },
                                            title: "Test string",
                                        }                                    ],
                                    formattedText: "Test string",
                                    image: {
                                        accessibilityText: "Test string",
                                        imageUri: "Test string",
                                    },
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                browseCarouselCard: {
                                    imageDisplayOptions: "Test string",
                                    items: [
                                        {
                                            description: "Test string",
                                            footer: "Test string",
                                            image: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            openUriAction: {
                                                url: "Test string",
                                                urlTypeHint: "Test string",
                                            },
                                            title: "Test string",
                                        }                                    ],
                                },
                                card: {
                                    buttons: [
                                        {
                                            postback: "Test string",
                                            text: "Test string",
                                        }                                    ],
                                    imageUri: "Test string",
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                carouselSelect: {
                                    items: [
                                        {
                                            description: "Test string",
                                            image: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            info: {
                                                key: "Test string",
                                                synonyms: [
                                                    "Test string"                                                ],
                                            },
                                            title: "Test string",
                                        }                                    ],
                                },
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                linkOutSuggestion: {
                                    destinationName: "Test string",
                                    uri: "Test string",
                                },
                                listSelect: {
                                    items: [
                                        {
                                            description: "Test string",
                                            image: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            info: {
                                                key: "Test string",
                                                synonyms: [
                                                    "Test string"                                                ],
                                            },
                                            title: "Test string",
                                        }                                    ],
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                mediaContent: {
                                    mediaObjects: [
                                        {
                                            contentUrl: "Test string",
                                            description: "Test string",
                                            icon: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            largeImage: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            name: "Test string",
                                        }                                    ],
                                    mediaType: "Test string",
                                },
                                payload: {
                                    A: 42                                },
                                platform: "Test string",
                                quickReplies: {
                                    quickReplies: [
                                        "Test string"                                    ],
                                    title: "Test string",
                                },
                                simpleResponses: {
                                    simpleResponses: [
                                        {
                                            displayText: "Test string",
                                            ssml: "Test string",
                                            textToSpeech: "Test string",
                                        }                                    ],
                                },
                                suggestions: {
                                    suggestions: [
                                        {
                                            title: "Test string",
                                        }                                    ],
                                },
                                tableCard: {
                                    buttons: [
                                        {
                                            openUriAction: {
                                                uri: "Test string",
                                            },
                                            title: "Test string",
                                        }                                    ],
                                    columnProperties: [
                                        {
                                            header: "Test string",
                                            horizontalAlignment: "Test string",
                                        }                                    ],
                                    image: {
                                        accessibilityText: "Test string",
                                        imageUri: "Test string",
                                    },
                                    rows: [
                                        {
                                            cells: [
                                                {
                                                    text: "Test string",
                                                }                                            ],
                                            dividerAfter: true,
                                        }                                    ],
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                text: {
                                    text: [
                                        "Test string"                                    ],
                                },
                            }                        ],
                        mlDisabled: true,
                        name: "Test string",
                        outputContexts: [
                            {
                                lifespanCount: 42,
                                name: "Test string",
                                parameters: {
                                    A: 42                                },
                            }                        ],
                        parameters: [
                            {
                                defaultValue: "Test string",
                                displayName: "Test string",
                                entityTypeDisplayName: "Test string",
                                isList: true,
                                mandatory: true,
                                name: "Test string",
                                prompts: [
                                    "Test string"                                ],
                                value: "Test string",
                            }                        ],
                        parentFollowupIntentName: "Test string",
                        priority: 42,
                        resetContexts: true,
                        rootFollowupIntentName: "Test string",
                        trainingPhrases: [
                            {
                                name: "Test string",
                                parts: [
                                    {
                                        alias: "Test string",
                                        entityType: "Test string",
                                        text: "Test string",
                                        userDefined: true,
                                    }                                ],
                                timesAddedCount: 42,
                                type: "Test string",
                            }                        ],
                        webhookState: "Test string",
                    }                ],
            },
            intentBatchUri: "Test string",
            intentView: "Test string",
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Creates an intent in the specified agent. */
        await gapi.client.dialogflow.projects.agent.intents.create({
            intentView: "Test string",
            languageCode: "Test string",
            parent: "Test string",
        }, {
            action: "Test string",
            defaultResponsePlatforms: [
                "Test string"            ],
            displayName: "Test string",
            events: [
                "Test string"            ],
            followupIntentInfo: [
                {
                    followupIntentName: "Test string",
                    parentFollowupIntentName: "Test string",
                }            ],
            inputContextNames: [
                "Test string"            ],
            isFallback: true,
            messages: [
                {
                    basicCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        formattedText: "Test string",
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    browseCarouselCard: {
                        imageDisplayOptions: "Test string",
                        items: [
                            {
                                description: "Test string",
                                footer: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                openUriAction: {
                                    url: "Test string",
                                    urlTypeHint: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                    },
                    card: {
                        buttons: [
                            {
                                postback: "Test string",
                                text: "Test string",
                            }                        ],
                        imageUri: "Test string",
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    carouselSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                    },
                    image: {
                        accessibilityText: "Test string",
                        imageUri: "Test string",
                    },
                    linkOutSuggestion: {
                        destinationName: "Test string",
                        uri: "Test string",
                    },
                    listSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    mediaContent: {
                        mediaObjects: [
                            {
                                contentUrl: "Test string",
                                description: "Test string",
                                icon: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                largeImage: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                name: "Test string",
                            }                        ],
                        mediaType: "Test string",
                    },
                    payload: {
                        A: 42                    },
                    platform: "Test string",
                    quickReplies: {
                        quickReplies: [
                            "Test string"                        ],
                        title: "Test string",
                    },
                    simpleResponses: {
                        simpleResponses: [
                            {
                                displayText: "Test string",
                                ssml: "Test string",
                                textToSpeech: "Test string",
                            }                        ],
                    },
                    suggestions: {
                        suggestions: [
                            {
                                title: "Test string",
                            }                        ],
                    },
                    tableCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        columnProperties: [
                            {
                                header: "Test string",
                                horizontalAlignment: "Test string",
                            }                        ],
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        rows: [
                            {
                                cells: [
                                    {
                                        text: "Test string",
                                    }                                ],
                                dividerAfter: true,
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    text: {
                        text: [
                            "Test string"                        ],
                    },
                }            ],
            mlDisabled: true,
            name: "Test string",
            outputContexts: [
                {
                    lifespanCount: 42,
                    name: "Test string",
                    parameters: {
                        A: 42                    },
                }            ],
            parameters: [
                {
                    defaultValue: "Test string",
                    displayName: "Test string",
                    entityTypeDisplayName: "Test string",
                    isList: true,
                    mandatory: true,
                    name: "Test string",
                    prompts: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            parentFollowupIntentName: "Test string",
            priority: 42,
            resetContexts: true,
            rootFollowupIntentName: "Test string",
            trainingPhrases: [
                {
                    name: "Test string",
                    parts: [
                        {
                            alias: "Test string",
                            entityType: "Test string",
                            text: "Test string",
                            userDefined: true,
                        }                    ],
                    timesAddedCount: 42,
                    type: "Test string",
                }            ],
            webhookState: "Test string",
        });
        /** Deletes the specified intent and its direct or indirect followup intents. */
        await gapi.client.dialogflow.projects.agent.intents.delete({
            name: "Test string",
        });
        /** Retrieves the specified intent. */
        await gapi.client.dialogflow.projects.agent.intents.get({
            intentView: "Test string",
            languageCode: "Test string",
            name: "Test string",
        });
        /** Returns the list of all intents in the specified agent. */
        await gapi.client.dialogflow.projects.agent.intents.list({
            intentView: "Test string",
            languageCode: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified intent. */
        await gapi.client.dialogflow.projects.agent.intents.patch({
            intentView: "Test string",
            languageCode: "Test string",
            name: "Test string",
            updateMask: "Test string",
        }, {
            action: "Test string",
            defaultResponsePlatforms: [
                "Test string"            ],
            displayName: "Test string",
            events: [
                "Test string"            ],
            followupIntentInfo: [
                {
                    followupIntentName: "Test string",
                    parentFollowupIntentName: "Test string",
                }            ],
            inputContextNames: [
                "Test string"            ],
            isFallback: true,
            messages: [
                {
                    basicCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        formattedText: "Test string",
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    browseCarouselCard: {
                        imageDisplayOptions: "Test string",
                        items: [
                            {
                                description: "Test string",
                                footer: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                openUriAction: {
                                    url: "Test string",
                                    urlTypeHint: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                    },
                    card: {
                        buttons: [
                            {
                                postback: "Test string",
                                text: "Test string",
                            }                        ],
                        imageUri: "Test string",
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    carouselSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                    },
                    image: {
                        accessibilityText: "Test string",
                        imageUri: "Test string",
                    },
                    linkOutSuggestion: {
                        destinationName: "Test string",
                        uri: "Test string",
                    },
                    listSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    mediaContent: {
                        mediaObjects: [
                            {
                                contentUrl: "Test string",
                                description: "Test string",
                                icon: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                largeImage: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                name: "Test string",
                            }                        ],
                        mediaType: "Test string",
                    },
                    payload: {
                        A: 42                    },
                    platform: "Test string",
                    quickReplies: {
                        quickReplies: [
                            "Test string"                        ],
                        title: "Test string",
                    },
                    simpleResponses: {
                        simpleResponses: [
                            {
                                displayText: "Test string",
                                ssml: "Test string",
                                textToSpeech: "Test string",
                            }                        ],
                    },
                    suggestions: {
                        suggestions: [
                            {
                                title: "Test string",
                            }                        ],
                    },
                    tableCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        columnProperties: [
                            {
                                header: "Test string",
                                horizontalAlignment: "Test string",
                            }                        ],
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        rows: [
                            {
                                cells: [
                                    {
                                        text: "Test string",
                                    }                                ],
                                dividerAfter: true,
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    text: {
                        text: [
                            "Test string"                        ],
                    },
                }            ],
            mlDisabled: true,
            name: "Test string",
            outputContexts: [
                {
                    lifespanCount: 42,
                    name: "Test string",
                    parameters: {
                        A: 42                    },
                }            ],
            parameters: [
                {
                    defaultValue: "Test string",
                    displayName: "Test string",
                    entityTypeDisplayName: "Test string",
                    isList: true,
                    mandatory: true,
                    name: "Test string",
                    prompts: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            parentFollowupIntentName: "Test string",
            priority: 42,
            resetContexts: true,
            rootFollowupIntentName: "Test string",
            trainingPhrases: [
                {
                    name: "Test string",
                    parts: [
                        {
                            alias: "Test string",
                            entityType: "Test string",
                            text: "Test string",
                            userDefined: true,
                        }                    ],
                    timesAddedCount: 42,
                    type: "Test string",
                }            ],
            webhookState: "Test string",
        });
        /** Deletes all active contexts in the specified session. */
        await gapi.client.dialogflow.projects.agent.sessions.deleteContexts({
            parent: "Test string",
        });
        /** Creates a context. If the specified context already exists, overrides the context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.create({
            parent: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /** Deletes the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.delete({
            name: "Test string",
        });
        /** Retrieves the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.get({
            name: "Test string",
        });
        /** Returns the list of all contexts in the specified session. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /**
         * Creates a session entity type. If the specified session entity type already exists, overrides the session entity type. This method doesn't work with Google Assistant integration.
         * Contact Dialogflow support if you need to use session entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.create({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /**
         * Deletes the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.delete({
            name: "Test string",
        });
        /**
         * Retrieves the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.get({
            name: "Test string",
        });
        /**
         * Returns the list of all session entity types in the specified session. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session
         * entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Updates the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /**
         * Processes a natural language query and returns structured, actionable data as a result. This method is not idempotent, because it may cause contexts and session entity types to be
         * updated, which in turn might affect results of future queries. Note: Always use agent versions for production traffic. See [Versions and
         * environments](https://cloud.google.com/dialogflow/es/docs/agents-versions).
         */
        await gapi.client.dialogflow.projects.agent.sessions.detectIntent({
            session: "Test string",
        }, {
            inputAudio: "Test string",
            outputAudioConfig: {
                audioEncoding: "Test string",
                sampleRateHertz: 42,
                synthesizeSpeechConfig: {
                    effectsProfileId: [
                        "Test string"                    ],
                    pitch: 42,
                    speakingRate: 42,
                    voice: {
                        name: "Test string",
                        ssmlGender: "Test string",
                    },
                    volumeGainDb: 42,
                },
            },
            outputAudioConfigMask: "Test string",
            queryInput: {
                audioConfig: {
                    audioEncoding: "Test string",
                    enableWordInfo: true,
                    languageCode: "Test string",
                    model: "Test string",
                    modelVariant: "Test string",
                    phraseHints: [
                        "Test string"                    ],
                    sampleRateHertz: 42,
                    singleUtterance: true,
                    speechContexts: [
                        {
                            boost: 42,
                            phrases: [
                                "Test string"                            ],
                        }                    ],
                },
                event: {
                    languageCode: "Test string",
                    name: "Test string",
                    parameters: {
                        A: 42                    },
                },
                text: {
                    languageCode: "Test string",
                    text: "Test string",
                },
            },
            queryParams: {
                contexts: [
                    {
                        lifespanCount: 42,
                        name: "Test string",
                        parameters: {
                            A: 42                        },
                    }                ],
                geoLocation: {
                    latitude: 42,
                    longitude: 42,
                },
                payload: {
                    A: 42                },
                resetContexts: true,
                sentimentAnalysisRequestConfig: {
                    analyzeQueryTextSentiment: true,
                },
                sessionEntityTypes: [
                    {
                        entities: [
                            {
                                synonyms: [
                                    "Test string"                                ],
                                value: "Test string",
                            }                        ],
                        entityOverrideMode: "Test string",
                        name: "Test string",
                    }                ],
                timeZone: "Test string",
                webhookHeaders: {
                    A: "Test string"                },
            },
        });
        /** Creates a context. If the specified context already exists, overrides the context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.create({
            parent: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /** Deletes the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.delete({
            name: "Test string",
        });
        /** Retrieves the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.get({
            name: "Test string",
        });
        /** Returns the list of all contexts in the specified session. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /**
         * Creates a session entity type. If the specified session entity type already exists, overrides the session entity type. This method doesn't work with Google Assistant integration.
         * Contact Dialogflow support if you need to use session entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.create({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /**
         * Deletes the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.delete({
            name: "Test string",
        });
        /**
         * Retrieves the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.get({
            name: "Test string",
        });
        /**
         * Returns the list of all session entity types in the specified session. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session
         * entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Updates the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /** Trains the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.train({
            parent: "Test string",
        }, {
        });
        /** Deletes entity types in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.batchDelete({
            parent: "Test string",
        }, {
            entityTypeNames: [
                "Test string"            ],
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Updates/Creates multiple entity types in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.batchUpdate({
            parent: "Test string",
        }, {
            entityTypeBatchInline: {
                entityTypes: [
                    {
                        autoExpansionMode: "Test string",
                        displayName: "Test string",
                        enableFuzzyExtraction: true,
                        entities: [
                            {
                                synonyms: [
                                    "Test string"                                ],
                                value: "Test string",
                            }                        ],
                        kind: "Test string",
                        name: "Test string",
                    }                ],
            },
            entityTypeBatchUri: "Test string",
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Creates an entity type in the specified agent. */
        await gapi.client.dialogflow.projects.agent.entityTypes.create({
            languageCode: "Test string",
            parent: "Test string",
        }, {
            autoExpansionMode: "Test string",
            displayName: "Test string",
            enableFuzzyExtraction: true,
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            kind: "Test string",
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Deletes the specified entity type. */
        await gapi.client.dialogflow.projects.agent.entityTypes.delete({
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Retrieves the specified entity type. */
        await gapi.client.dialogflow.projects.agent.entityTypes.get({
            languageCode: "Test string",
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Returns the list of all entity types in the specified agent. */
        await gapi.client.dialogflow.projects.agent.entityTypes.list({
            languageCode: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Updates the specified entity type. */
        await gapi.client.dialogflow.projects.agent.entityTypes.patch({
            languageCode: "Test string",
            name: "Test string",
            updateMask: "Test string",
        }, {
            autoExpansionMode: "Test string",
            displayName: "Test string",
            enableFuzzyExtraction: true,
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            kind: "Test string",
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Returns the list of all non-draft environments of the specified agent. */
        await gapi.client.dialogflow.projects.agent.environments.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Deletes intents in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.intents.batchDelete({
            parent: "Test string",
        }, {
            intents: [
                {
                    action: "Test string",
                    defaultResponsePlatforms: [
                        "Test string"                    ],
                    displayName: "Test string",
                    events: [
                        "Test string"                    ],
                    followupIntentInfo: [
                        {
                            followupIntentName: "Test string",
                            parentFollowupIntentName: "Test string",
                        }                    ],
                    inputContextNames: [
                        "Test string"                    ],
                    isFallback: true,
                    messages: [
                        {
                            basicCard: {
                                buttons: [
                                    {
                                        openUriAction: {
                                            uri: "Test string",
                                        },
                                        title: "Test string",
                                    }                                ],
                                formattedText: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            browseCarouselCard: {
                                imageDisplayOptions: "Test string",
                                items: [
                                    {
                                        description: "Test string",
                                        footer: "Test string",
                                        image: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        openUriAction: {
                                            url: "Test string",
                                            urlTypeHint: "Test string",
                                        },
                                        title: "Test string",
                                    }                                ],
                            },
                            card: {
                                buttons: [
                                    {
                                        postback: "Test string",
                                        text: "Test string",
                                    }                                ],
                                imageUri: "Test string",
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            carouselSelect: {
                                items: [
                                    {
                                        description: "Test string",
                                        image: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        info: {
                                            key: "Test string",
                                            synonyms: [
                                                "Test string"                                            ],
                                        },
                                        title: "Test string",
                                    }                                ],
                            },
                            image: {
                                accessibilityText: "Test string",
                                imageUri: "Test string",
                            },
                            linkOutSuggestion: {
                                destinationName: "Test string",
                                uri: "Test string",
                            },
                            listSelect: {
                                items: [
                                    {
                                        description: "Test string",
                                        image: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        info: {
                                            key: "Test string",
                                            synonyms: [
                                                "Test string"                                            ],
                                        },
                                        title: "Test string",
                                    }                                ],
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            mediaContent: {
                                mediaObjects: [
                                    {
                                        contentUrl: "Test string",
                                        description: "Test string",
                                        icon: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        largeImage: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        name: "Test string",
                                    }                                ],
                                mediaType: "Test string",
                            },
                            payload: {
                                A: 42                            },
                            platform: "Test string",
                            quickReplies: {
                                quickReplies: [
                                    "Test string"                                ],
                                title: "Test string",
                            },
                            simpleResponses: {
                                simpleResponses: [
                                    {
                                        displayText: "Test string",
                                        ssml: "Test string",
                                        textToSpeech: "Test string",
                                    }                                ],
                            },
                            suggestions: {
                                suggestions: [
                                    {
                                        title: "Test string",
                                    }                                ],
                            },
                            tableCard: {
                                buttons: [
                                    {
                                        openUriAction: {
                                            uri: "Test string",
                                        },
                                        title: "Test string",
                                    }                                ],
                                columnProperties: [
                                    {
                                        header: "Test string",
                                        horizontalAlignment: "Test string",
                                    }                                ],
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                rows: [
                                    {
                                        cells: [
                                            {
                                                text: "Test string",
                                            }                                        ],
                                        dividerAfter: true,
                                    }                                ],
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            text: {
                                text: [
                                    "Test string"                                ],
                            },
                        }                    ],
                    mlDisabled: true,
                    name: "Test string",
                    outputContexts: [
                        {
                            lifespanCount: 42,
                            name: "Test string",
                            parameters: {
                                A: 42                            },
                        }                    ],
                    parameters: [
                        {
                            defaultValue: "Test string",
                            displayName: "Test string",
                            entityTypeDisplayName: "Test string",
                            isList: true,
                            mandatory: true,
                            name: "Test string",
                            prompts: [
                                "Test string"                            ],
                            value: "Test string",
                        }                    ],
                    parentFollowupIntentName: "Test string",
                    priority: 42,
                    resetContexts: true,
                    rootFollowupIntentName: "Test string",
                    trainingPhrases: [
                        {
                            name: "Test string",
                            parts: [
                                {
                                    alias: "Test string",
                                    entityType: "Test string",
                                    text: "Test string",
                                    userDefined: true,
                                }                            ],
                            timesAddedCount: 42,
                            type: "Test string",
                        }                    ],
                    webhookState: "Test string",
                }            ],
        });
        /** Updates/Creates multiple intents in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.intents.batchUpdate({
            parent: "Test string",
        }, {
            intentBatchInline: {
                intents: [
                    {
                        action: "Test string",
                        defaultResponsePlatforms: [
                            "Test string"                        ],
                        displayName: "Test string",
                        events: [
                            "Test string"                        ],
                        followupIntentInfo: [
                            {
                                followupIntentName: "Test string",
                                parentFollowupIntentName: "Test string",
                            }                        ],
                        inputContextNames: [
                            "Test string"                        ],
                        isFallback: true,
                        messages: [
                            {
                                basicCard: {
                                    buttons: [
                                        {
                                            openUriAction: {
                                                uri: "Test string",
                                            },
                                            title: "Test string",
                                        }                                    ],
                                    formattedText: "Test string",
                                    image: {
                                        accessibilityText: "Test string",
                                        imageUri: "Test string",
                                    },
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                browseCarouselCard: {
                                    imageDisplayOptions: "Test string",
                                    items: [
                                        {
                                            description: "Test string",
                                            footer: "Test string",
                                            image: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            openUriAction: {
                                                url: "Test string",
                                                urlTypeHint: "Test string",
                                            },
                                            title: "Test string",
                                        }                                    ],
                                },
                                card: {
                                    buttons: [
                                        {
                                            postback: "Test string",
                                            text: "Test string",
                                        }                                    ],
                                    imageUri: "Test string",
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                carouselSelect: {
                                    items: [
                                        {
                                            description: "Test string",
                                            image: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            info: {
                                                key: "Test string",
                                                synonyms: [
                                                    "Test string"                                                ],
                                            },
                                            title: "Test string",
                                        }                                    ],
                                },
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                linkOutSuggestion: {
                                    destinationName: "Test string",
                                    uri: "Test string",
                                },
                                listSelect: {
                                    items: [
                                        {
                                            description: "Test string",
                                            image: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            info: {
                                                key: "Test string",
                                                synonyms: [
                                                    "Test string"                                                ],
                                            },
                                            title: "Test string",
                                        }                                    ],
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                mediaContent: {
                                    mediaObjects: [
                                        {
                                            contentUrl: "Test string",
                                            description: "Test string",
                                            icon: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            largeImage: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            name: "Test string",
                                        }                                    ],
                                    mediaType: "Test string",
                                },
                                payload: {
                                    A: 42                                },
                                platform: "Test string",
                                quickReplies: {
                                    quickReplies: [
                                        "Test string"                                    ],
                                    title: "Test string",
                                },
                                simpleResponses: {
                                    simpleResponses: [
                                        {
                                            displayText: "Test string",
                                            ssml: "Test string",
                                            textToSpeech: "Test string",
                                        }                                    ],
                                },
                                suggestions: {
                                    suggestions: [
                                        {
                                            title: "Test string",
                                        }                                    ],
                                },
                                tableCard: {
                                    buttons: [
                                        {
                                            openUriAction: {
                                                uri: "Test string",
                                            },
                                            title: "Test string",
                                        }                                    ],
                                    columnProperties: [
                                        {
                                            header: "Test string",
                                            horizontalAlignment: "Test string",
                                        }                                    ],
                                    image: {
                                        accessibilityText: "Test string",
                                        imageUri: "Test string",
                                    },
                                    rows: [
                                        {
                                            cells: [
                                                {
                                                    text: "Test string",
                                                }                                            ],
                                            dividerAfter: true,
                                        }                                    ],
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                text: {
                                    text: [
                                        "Test string"                                    ],
                                },
                            }                        ],
                        mlDisabled: true,
                        name: "Test string",
                        outputContexts: [
                            {
                                lifespanCount: 42,
                                name: "Test string",
                                parameters: {
                                    A: 42                                },
                            }                        ],
                        parameters: [
                            {
                                defaultValue: "Test string",
                                displayName: "Test string",
                                entityTypeDisplayName: "Test string",
                                isList: true,
                                mandatory: true,
                                name: "Test string",
                                prompts: [
                                    "Test string"                                ],
                                value: "Test string",
                            }                        ],
                        parentFollowupIntentName: "Test string",
                        priority: 42,
                        resetContexts: true,
                        rootFollowupIntentName: "Test string",
                        trainingPhrases: [
                            {
                                name: "Test string",
                                parts: [
                                    {
                                        alias: "Test string",
                                        entityType: "Test string",
                                        text: "Test string",
                                        userDefined: true,
                                    }                                ],
                                timesAddedCount: 42,
                                type: "Test string",
                            }                        ],
                        webhookState: "Test string",
                    }                ],
            },
            intentBatchUri: "Test string",
            intentView: "Test string",
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Creates an intent in the specified agent. */
        await gapi.client.dialogflow.projects.agent.intents.create({
            intentView: "Test string",
            languageCode: "Test string",
            parent: "Test string",
        }, {
            action: "Test string",
            defaultResponsePlatforms: [
                "Test string"            ],
            displayName: "Test string",
            events: [
                "Test string"            ],
            followupIntentInfo: [
                {
                    followupIntentName: "Test string",
                    parentFollowupIntentName: "Test string",
                }            ],
            inputContextNames: [
                "Test string"            ],
            isFallback: true,
            messages: [
                {
                    basicCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        formattedText: "Test string",
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    browseCarouselCard: {
                        imageDisplayOptions: "Test string",
                        items: [
                            {
                                description: "Test string",
                                footer: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                openUriAction: {
                                    url: "Test string",
                                    urlTypeHint: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                    },
                    card: {
                        buttons: [
                            {
                                postback: "Test string",
                                text: "Test string",
                            }                        ],
                        imageUri: "Test string",
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    carouselSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                    },
                    image: {
                        accessibilityText: "Test string",
                        imageUri: "Test string",
                    },
                    linkOutSuggestion: {
                        destinationName: "Test string",
                        uri: "Test string",
                    },
                    listSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    mediaContent: {
                        mediaObjects: [
                            {
                                contentUrl: "Test string",
                                description: "Test string",
                                icon: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                largeImage: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                name: "Test string",
                            }                        ],
                        mediaType: "Test string",
                    },
                    payload: {
                        A: 42                    },
                    platform: "Test string",
                    quickReplies: {
                        quickReplies: [
                            "Test string"                        ],
                        title: "Test string",
                    },
                    simpleResponses: {
                        simpleResponses: [
                            {
                                displayText: "Test string",
                                ssml: "Test string",
                                textToSpeech: "Test string",
                            }                        ],
                    },
                    suggestions: {
                        suggestions: [
                            {
                                title: "Test string",
                            }                        ],
                    },
                    tableCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        columnProperties: [
                            {
                                header: "Test string",
                                horizontalAlignment: "Test string",
                            }                        ],
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        rows: [
                            {
                                cells: [
                                    {
                                        text: "Test string",
                                    }                                ],
                                dividerAfter: true,
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    text: {
                        text: [
                            "Test string"                        ],
                    },
                }            ],
            mlDisabled: true,
            name: "Test string",
            outputContexts: [
                {
                    lifespanCount: 42,
                    name: "Test string",
                    parameters: {
                        A: 42                    },
                }            ],
            parameters: [
                {
                    defaultValue: "Test string",
                    displayName: "Test string",
                    entityTypeDisplayName: "Test string",
                    isList: true,
                    mandatory: true,
                    name: "Test string",
                    prompts: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            parentFollowupIntentName: "Test string",
            priority: 42,
            resetContexts: true,
            rootFollowupIntentName: "Test string",
            trainingPhrases: [
                {
                    name: "Test string",
                    parts: [
                        {
                            alias: "Test string",
                            entityType: "Test string",
                            text: "Test string",
                            userDefined: true,
                        }                    ],
                    timesAddedCount: 42,
                    type: "Test string",
                }            ],
            webhookState: "Test string",
        });
        /** Deletes the specified intent and its direct or indirect followup intents. */
        await gapi.client.dialogflow.projects.agent.intents.delete({
            name: "Test string",
        });
        /** Retrieves the specified intent. */
        await gapi.client.dialogflow.projects.agent.intents.get({
            intentView: "Test string",
            languageCode: "Test string",
            name: "Test string",
        });
        /** Returns the list of all intents in the specified agent. */
        await gapi.client.dialogflow.projects.agent.intents.list({
            intentView: "Test string",
            languageCode: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified intent. */
        await gapi.client.dialogflow.projects.agent.intents.patch({
            intentView: "Test string",
            languageCode: "Test string",
            name: "Test string",
            updateMask: "Test string",
        }, {
            action: "Test string",
            defaultResponsePlatforms: [
                "Test string"            ],
            displayName: "Test string",
            events: [
                "Test string"            ],
            followupIntentInfo: [
                {
                    followupIntentName: "Test string",
                    parentFollowupIntentName: "Test string",
                }            ],
            inputContextNames: [
                "Test string"            ],
            isFallback: true,
            messages: [
                {
                    basicCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        formattedText: "Test string",
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    browseCarouselCard: {
                        imageDisplayOptions: "Test string",
                        items: [
                            {
                                description: "Test string",
                                footer: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                openUriAction: {
                                    url: "Test string",
                                    urlTypeHint: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                    },
                    card: {
                        buttons: [
                            {
                                postback: "Test string",
                                text: "Test string",
                            }                        ],
                        imageUri: "Test string",
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    carouselSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                    },
                    image: {
                        accessibilityText: "Test string",
                        imageUri: "Test string",
                    },
                    linkOutSuggestion: {
                        destinationName: "Test string",
                        uri: "Test string",
                    },
                    listSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    mediaContent: {
                        mediaObjects: [
                            {
                                contentUrl: "Test string",
                                description: "Test string",
                                icon: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                largeImage: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                name: "Test string",
                            }                        ],
                        mediaType: "Test string",
                    },
                    payload: {
                        A: 42                    },
                    platform: "Test string",
                    quickReplies: {
                        quickReplies: [
                            "Test string"                        ],
                        title: "Test string",
                    },
                    simpleResponses: {
                        simpleResponses: [
                            {
                                displayText: "Test string",
                                ssml: "Test string",
                                textToSpeech: "Test string",
                            }                        ],
                    },
                    suggestions: {
                        suggestions: [
                            {
                                title: "Test string",
                            }                        ],
                    },
                    tableCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        columnProperties: [
                            {
                                header: "Test string",
                                horizontalAlignment: "Test string",
                            }                        ],
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        rows: [
                            {
                                cells: [
                                    {
                                        text: "Test string",
                                    }                                ],
                                dividerAfter: true,
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    text: {
                        text: [
                            "Test string"                        ],
                    },
                }            ],
            mlDisabled: true,
            name: "Test string",
            outputContexts: [
                {
                    lifespanCount: 42,
                    name: "Test string",
                    parameters: {
                        A: 42                    },
                }            ],
            parameters: [
                {
                    defaultValue: "Test string",
                    displayName: "Test string",
                    entityTypeDisplayName: "Test string",
                    isList: true,
                    mandatory: true,
                    name: "Test string",
                    prompts: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            parentFollowupIntentName: "Test string",
            priority: 42,
            resetContexts: true,
            rootFollowupIntentName: "Test string",
            trainingPhrases: [
                {
                    name: "Test string",
                    parts: [
                        {
                            alias: "Test string",
                            entityType: "Test string",
                            text: "Test string",
                            userDefined: true,
                        }                    ],
                    timesAddedCount: 42,
                    type: "Test string",
                }            ],
            webhookState: "Test string",
        });
        /** Deletes all active contexts in the specified session. */
        await gapi.client.dialogflow.projects.agent.sessions.deleteContexts({
            parent: "Test string",
        });
        /** Creates a context. If the specified context already exists, overrides the context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.create({
            parent: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /** Deletes the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.delete({
            name: "Test string",
        });
        /** Retrieves the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.get({
            name: "Test string",
        });
        /** Returns the list of all contexts in the specified session. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /**
         * Creates a session entity type. If the specified session entity type already exists, overrides the session entity type. This method doesn't work with Google Assistant integration.
         * Contact Dialogflow support if you need to use session entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.create({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /**
         * Deletes the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.delete({
            name: "Test string",
        });
        /**
         * Retrieves the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.get({
            name: "Test string",
        });
        /**
         * Returns the list of all session entity types in the specified session. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session
         * entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Updates the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /**
         * Processes a natural language query and returns structured, actionable data as a result. This method is not idempotent, because it may cause contexts and session entity types to be
         * updated, which in turn might affect results of future queries. Note: Always use agent versions for production traffic. See [Versions and
         * environments](https://cloud.google.com/dialogflow/es/docs/agents-versions).
         */
        await gapi.client.dialogflow.projects.agent.sessions.detectIntent({
            session: "Test string",
        }, {
            inputAudio: "Test string",
            outputAudioConfig: {
                audioEncoding: "Test string",
                sampleRateHertz: 42,
                synthesizeSpeechConfig: {
                    effectsProfileId: [
                        "Test string"                    ],
                    pitch: 42,
                    speakingRate: 42,
                    voice: {
                        name: "Test string",
                        ssmlGender: "Test string",
                    },
                    volumeGainDb: 42,
                },
            },
            outputAudioConfigMask: "Test string",
            queryInput: {
                audioConfig: {
                    audioEncoding: "Test string",
                    enableWordInfo: true,
                    languageCode: "Test string",
                    model: "Test string",
                    modelVariant: "Test string",
                    phraseHints: [
                        "Test string"                    ],
                    sampleRateHertz: 42,
                    singleUtterance: true,
                    speechContexts: [
                        {
                            boost: 42,
                            phrases: [
                                "Test string"                            ],
                        }                    ],
                },
                event: {
                    languageCode: "Test string",
                    name: "Test string",
                    parameters: {
                        A: 42                    },
                },
                text: {
                    languageCode: "Test string",
                    text: "Test string",
                },
            },
            queryParams: {
                contexts: [
                    {
                        lifespanCount: 42,
                        name: "Test string",
                        parameters: {
                            A: 42                        },
                    }                ],
                geoLocation: {
                    latitude: 42,
                    longitude: 42,
                },
                payload: {
                    A: 42                },
                resetContexts: true,
                sentimentAnalysisRequestConfig: {
                    analyzeQueryTextSentiment: true,
                },
                sessionEntityTypes: [
                    {
                        entities: [
                            {
                                synonyms: [
                                    "Test string"                                ],
                                value: "Test string",
                            }                        ],
                        entityOverrideMode: "Test string",
                        name: "Test string",
                    }                ],
                timeZone: "Test string",
                webhookHeaders: {
                    A: "Test string"                },
            },
        });
        /** Creates a context. If the specified context already exists, overrides the context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.create({
            parent: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /** Deletes the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.delete({
            name: "Test string",
        });
        /** Retrieves the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.get({
            name: "Test string",
        });
        /** Returns the list of all contexts in the specified session. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /**
         * Creates a session entity type. If the specified session entity type already exists, overrides the session entity type. This method doesn't work with Google Assistant integration.
         * Contact Dialogflow support if you need to use session entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.create({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /**
         * Deletes the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.delete({
            name: "Test string",
        });
        /**
         * Retrieves the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.get({
            name: "Test string",
        });
        /**
         * Returns the list of all session entity types in the specified session. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session
         * entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Updates the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /** Updates the fulfillment. */
        await gapi.client.dialogflow.projects.agent.updateFulfillment({
            name: "Test string",
            updateMask: "Test string",
        }, {
            displayName: "Test string",
            enabled: true,
            features: [
                {
                    type: "Test string",
                }            ],
            genericWebService: {
                isCloudFunction: true,
                password: "Test string",
                requestHeaders: {
                    A: "Test string"                },
                uri: "Test string",
                username: "Test string",
            },
            name: "Test string",
        });
        /** Deletes entity types in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.batchDelete({
            parent: "Test string",
        }, {
            entityTypeNames: [
                "Test string"            ],
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Updates/Creates multiple entity types in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.batchUpdate({
            parent: "Test string",
        }, {
            entityTypeBatchInline: {
                entityTypes: [
                    {
                        autoExpansionMode: "Test string",
                        displayName: "Test string",
                        enableFuzzyExtraction: true,
                        entities: [
                            {
                                synonyms: [
                                    "Test string"                                ],
                                value: "Test string",
                            }                        ],
                        kind: "Test string",
                        name: "Test string",
                    }                ],
            },
            entityTypeBatchUri: "Test string",
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Creates an entity type in the specified agent. */
        await gapi.client.dialogflow.projects.agent.entityTypes.create({
            languageCode: "Test string",
            parent: "Test string",
        }, {
            autoExpansionMode: "Test string",
            displayName: "Test string",
            enableFuzzyExtraction: true,
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            kind: "Test string",
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Deletes the specified entity type. */
        await gapi.client.dialogflow.projects.agent.entityTypes.delete({
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Retrieves the specified entity type. */
        await gapi.client.dialogflow.projects.agent.entityTypes.get({
            languageCode: "Test string",
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Returns the list of all entity types in the specified agent. */
        await gapi.client.dialogflow.projects.agent.entityTypes.list({
            languageCode: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Updates the specified entity type. */
        await gapi.client.dialogflow.projects.agent.entityTypes.patch({
            languageCode: "Test string",
            name: "Test string",
            updateMask: "Test string",
        }, {
            autoExpansionMode: "Test string",
            displayName: "Test string",
            enableFuzzyExtraction: true,
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            kind: "Test string",
            name: "Test string",
        });
        /** Creates multiple new entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchCreate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
        });
        /** Deletes entities in the specified entity type. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchDelete({
            parent: "Test string",
        }, {
            entityValues: [
                "Test string"            ],
            languageCode: "Test string",
        });
        /** Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Operation */
        await gapi.client.dialogflow.projects.agent.entityTypes.entities.batchUpdate({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Returns the list of all non-draft environments of the specified agent. */
        await gapi.client.dialogflow.projects.agent.environments.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Deletes intents in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.intents.batchDelete({
            parent: "Test string",
        }, {
            intents: [
                {
                    action: "Test string",
                    defaultResponsePlatforms: [
                        "Test string"                    ],
                    displayName: "Test string",
                    events: [
                        "Test string"                    ],
                    followupIntentInfo: [
                        {
                            followupIntentName: "Test string",
                            parentFollowupIntentName: "Test string",
                        }                    ],
                    inputContextNames: [
                        "Test string"                    ],
                    isFallback: true,
                    messages: [
                        {
                            basicCard: {
                                buttons: [
                                    {
                                        openUriAction: {
                                            uri: "Test string",
                                        },
                                        title: "Test string",
                                    }                                ],
                                formattedText: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            browseCarouselCard: {
                                imageDisplayOptions: "Test string",
                                items: [
                                    {
                                        description: "Test string",
                                        footer: "Test string",
                                        image: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        openUriAction: {
                                            url: "Test string",
                                            urlTypeHint: "Test string",
                                        },
                                        title: "Test string",
                                    }                                ],
                            },
                            card: {
                                buttons: [
                                    {
                                        postback: "Test string",
                                        text: "Test string",
                                    }                                ],
                                imageUri: "Test string",
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            carouselSelect: {
                                items: [
                                    {
                                        description: "Test string",
                                        image: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        info: {
                                            key: "Test string",
                                            synonyms: [
                                                "Test string"                                            ],
                                        },
                                        title: "Test string",
                                    }                                ],
                            },
                            image: {
                                accessibilityText: "Test string",
                                imageUri: "Test string",
                            },
                            linkOutSuggestion: {
                                destinationName: "Test string",
                                uri: "Test string",
                            },
                            listSelect: {
                                items: [
                                    {
                                        description: "Test string",
                                        image: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        info: {
                                            key: "Test string",
                                            synonyms: [
                                                "Test string"                                            ],
                                        },
                                        title: "Test string",
                                    }                                ],
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            mediaContent: {
                                mediaObjects: [
                                    {
                                        contentUrl: "Test string",
                                        description: "Test string",
                                        icon: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        largeImage: {
                                            accessibilityText: "Test string",
                                            imageUri: "Test string",
                                        },
                                        name: "Test string",
                                    }                                ],
                                mediaType: "Test string",
                            },
                            payload: {
                                A: 42                            },
                            platform: "Test string",
                            quickReplies: {
                                quickReplies: [
                                    "Test string"                                ],
                                title: "Test string",
                            },
                            simpleResponses: {
                                simpleResponses: [
                                    {
                                        displayText: "Test string",
                                        ssml: "Test string",
                                        textToSpeech: "Test string",
                                    }                                ],
                            },
                            suggestions: {
                                suggestions: [
                                    {
                                        title: "Test string",
                                    }                                ],
                            },
                            tableCard: {
                                buttons: [
                                    {
                                        openUriAction: {
                                            uri: "Test string",
                                        },
                                        title: "Test string",
                                    }                                ],
                                columnProperties: [
                                    {
                                        header: "Test string",
                                        horizontalAlignment: "Test string",
                                    }                                ],
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                rows: [
                                    {
                                        cells: [
                                            {
                                                text: "Test string",
                                            }                                        ],
                                        dividerAfter: true,
                                    }                                ],
                                subtitle: "Test string",
                                title: "Test string",
                            },
                            text: {
                                text: [
                                    "Test string"                                ],
                            },
                        }                    ],
                    mlDisabled: true,
                    name: "Test string",
                    outputContexts: [
                        {
                            lifespanCount: 42,
                            name: "Test string",
                            parameters: {
                                A: 42                            },
                        }                    ],
                    parameters: [
                        {
                            defaultValue: "Test string",
                            displayName: "Test string",
                            entityTypeDisplayName: "Test string",
                            isList: true,
                            mandatory: true,
                            name: "Test string",
                            prompts: [
                                "Test string"                            ],
                            value: "Test string",
                        }                    ],
                    parentFollowupIntentName: "Test string",
                    priority: 42,
                    resetContexts: true,
                    rootFollowupIntentName: "Test string",
                    trainingPhrases: [
                        {
                            name: "Test string",
                            parts: [
                                {
                                    alias: "Test string",
                                    entityType: "Test string",
                                    text: "Test string",
                                    userDefined: true,
                                }                            ],
                            timesAddedCount: 42,
                            type: "Test string",
                        }                    ],
                    webhookState: "Test string",
                }            ],
        });
        /** Updates/Creates multiple intents in the specified agent. Operation */
        await gapi.client.dialogflow.projects.agent.intents.batchUpdate({
            parent: "Test string",
        }, {
            intentBatchInline: {
                intents: [
                    {
                        action: "Test string",
                        defaultResponsePlatforms: [
                            "Test string"                        ],
                        displayName: "Test string",
                        events: [
                            "Test string"                        ],
                        followupIntentInfo: [
                            {
                                followupIntentName: "Test string",
                                parentFollowupIntentName: "Test string",
                            }                        ],
                        inputContextNames: [
                            "Test string"                        ],
                        isFallback: true,
                        messages: [
                            {
                                basicCard: {
                                    buttons: [
                                        {
                                            openUriAction: {
                                                uri: "Test string",
                                            },
                                            title: "Test string",
                                        }                                    ],
                                    formattedText: "Test string",
                                    image: {
                                        accessibilityText: "Test string",
                                        imageUri: "Test string",
                                    },
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                browseCarouselCard: {
                                    imageDisplayOptions: "Test string",
                                    items: [
                                        {
                                            description: "Test string",
                                            footer: "Test string",
                                            image: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            openUriAction: {
                                                url: "Test string",
                                                urlTypeHint: "Test string",
                                            },
                                            title: "Test string",
                                        }                                    ],
                                },
                                card: {
                                    buttons: [
                                        {
                                            postback: "Test string",
                                            text: "Test string",
                                        }                                    ],
                                    imageUri: "Test string",
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                carouselSelect: {
                                    items: [
                                        {
                                            description: "Test string",
                                            image: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            info: {
                                                key: "Test string",
                                                synonyms: [
                                                    "Test string"                                                ],
                                            },
                                            title: "Test string",
                                        }                                    ],
                                },
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                linkOutSuggestion: {
                                    destinationName: "Test string",
                                    uri: "Test string",
                                },
                                listSelect: {
                                    items: [
                                        {
                                            description: "Test string",
                                            image: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            info: {
                                                key: "Test string",
                                                synonyms: [
                                                    "Test string"                                                ],
                                            },
                                            title: "Test string",
                                        }                                    ],
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                mediaContent: {
                                    mediaObjects: [
                                        {
                                            contentUrl: "Test string",
                                            description: "Test string",
                                            icon: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            largeImage: {
                                                accessibilityText: "Test string",
                                                imageUri: "Test string",
                                            },
                                            name: "Test string",
                                        }                                    ],
                                    mediaType: "Test string",
                                },
                                payload: {
                                    A: 42                                },
                                platform: "Test string",
                                quickReplies: {
                                    quickReplies: [
                                        "Test string"                                    ],
                                    title: "Test string",
                                },
                                simpleResponses: {
                                    simpleResponses: [
                                        {
                                            displayText: "Test string",
                                            ssml: "Test string",
                                            textToSpeech: "Test string",
                                        }                                    ],
                                },
                                suggestions: {
                                    suggestions: [
                                        {
                                            title: "Test string",
                                        }                                    ],
                                },
                                tableCard: {
                                    buttons: [
                                        {
                                            openUriAction: {
                                                uri: "Test string",
                                            },
                                            title: "Test string",
                                        }                                    ],
                                    columnProperties: [
                                        {
                                            header: "Test string",
                                            horizontalAlignment: "Test string",
                                        }                                    ],
                                    image: {
                                        accessibilityText: "Test string",
                                        imageUri: "Test string",
                                    },
                                    rows: [
                                        {
                                            cells: [
                                                {
                                                    text: "Test string",
                                                }                                            ],
                                            dividerAfter: true,
                                        }                                    ],
                                    subtitle: "Test string",
                                    title: "Test string",
                                },
                                text: {
                                    text: [
                                        "Test string"                                    ],
                                },
                            }                        ],
                        mlDisabled: true,
                        name: "Test string",
                        outputContexts: [
                            {
                                lifespanCount: 42,
                                name: "Test string",
                                parameters: {
                                    A: 42                                },
                            }                        ],
                        parameters: [
                            {
                                defaultValue: "Test string",
                                displayName: "Test string",
                                entityTypeDisplayName: "Test string",
                                isList: true,
                                mandatory: true,
                                name: "Test string",
                                prompts: [
                                    "Test string"                                ],
                                value: "Test string",
                            }                        ],
                        parentFollowupIntentName: "Test string",
                        priority: 42,
                        resetContexts: true,
                        rootFollowupIntentName: "Test string",
                        trainingPhrases: [
                            {
                                name: "Test string",
                                parts: [
                                    {
                                        alias: "Test string",
                                        entityType: "Test string",
                                        text: "Test string",
                                        userDefined: true,
                                    }                                ],
                                timesAddedCount: 42,
                                type: "Test string",
                            }                        ],
                        webhookState: "Test string",
                    }                ],
            },
            intentBatchUri: "Test string",
            intentView: "Test string",
            languageCode: "Test string",
            updateMask: "Test string",
        });
        /** Creates an intent in the specified agent. */
        await gapi.client.dialogflow.projects.agent.intents.create({
            intentView: "Test string",
            languageCode: "Test string",
            parent: "Test string",
        }, {
            action: "Test string",
            defaultResponsePlatforms: [
                "Test string"            ],
            displayName: "Test string",
            events: [
                "Test string"            ],
            followupIntentInfo: [
                {
                    followupIntentName: "Test string",
                    parentFollowupIntentName: "Test string",
                }            ],
            inputContextNames: [
                "Test string"            ],
            isFallback: true,
            messages: [
                {
                    basicCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        formattedText: "Test string",
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    browseCarouselCard: {
                        imageDisplayOptions: "Test string",
                        items: [
                            {
                                description: "Test string",
                                footer: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                openUriAction: {
                                    url: "Test string",
                                    urlTypeHint: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                    },
                    card: {
                        buttons: [
                            {
                                postback: "Test string",
                                text: "Test string",
                            }                        ],
                        imageUri: "Test string",
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    carouselSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                    },
                    image: {
                        accessibilityText: "Test string",
                        imageUri: "Test string",
                    },
                    linkOutSuggestion: {
                        destinationName: "Test string",
                        uri: "Test string",
                    },
                    listSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    mediaContent: {
                        mediaObjects: [
                            {
                                contentUrl: "Test string",
                                description: "Test string",
                                icon: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                largeImage: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                name: "Test string",
                            }                        ],
                        mediaType: "Test string",
                    },
                    payload: {
                        A: 42                    },
                    platform: "Test string",
                    quickReplies: {
                        quickReplies: [
                            "Test string"                        ],
                        title: "Test string",
                    },
                    simpleResponses: {
                        simpleResponses: [
                            {
                                displayText: "Test string",
                                ssml: "Test string",
                                textToSpeech: "Test string",
                            }                        ],
                    },
                    suggestions: {
                        suggestions: [
                            {
                                title: "Test string",
                            }                        ],
                    },
                    tableCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        columnProperties: [
                            {
                                header: "Test string",
                                horizontalAlignment: "Test string",
                            }                        ],
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        rows: [
                            {
                                cells: [
                                    {
                                        text: "Test string",
                                    }                                ],
                                dividerAfter: true,
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    text: {
                        text: [
                            "Test string"                        ],
                    },
                }            ],
            mlDisabled: true,
            name: "Test string",
            outputContexts: [
                {
                    lifespanCount: 42,
                    name: "Test string",
                    parameters: {
                        A: 42                    },
                }            ],
            parameters: [
                {
                    defaultValue: "Test string",
                    displayName: "Test string",
                    entityTypeDisplayName: "Test string",
                    isList: true,
                    mandatory: true,
                    name: "Test string",
                    prompts: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            parentFollowupIntentName: "Test string",
            priority: 42,
            resetContexts: true,
            rootFollowupIntentName: "Test string",
            trainingPhrases: [
                {
                    name: "Test string",
                    parts: [
                        {
                            alias: "Test string",
                            entityType: "Test string",
                            text: "Test string",
                            userDefined: true,
                        }                    ],
                    timesAddedCount: 42,
                    type: "Test string",
                }            ],
            webhookState: "Test string",
        });
        /** Deletes the specified intent and its direct or indirect followup intents. */
        await gapi.client.dialogflow.projects.agent.intents.delete({
            name: "Test string",
        });
        /** Retrieves the specified intent. */
        await gapi.client.dialogflow.projects.agent.intents.get({
            intentView: "Test string",
            languageCode: "Test string",
            name: "Test string",
        });
        /** Returns the list of all intents in the specified agent. */
        await gapi.client.dialogflow.projects.agent.intents.list({
            intentView: "Test string",
            languageCode: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified intent. */
        await gapi.client.dialogflow.projects.agent.intents.patch({
            intentView: "Test string",
            languageCode: "Test string",
            name: "Test string",
            updateMask: "Test string",
        }, {
            action: "Test string",
            defaultResponsePlatforms: [
                "Test string"            ],
            displayName: "Test string",
            events: [
                "Test string"            ],
            followupIntentInfo: [
                {
                    followupIntentName: "Test string",
                    parentFollowupIntentName: "Test string",
                }            ],
            inputContextNames: [
                "Test string"            ],
            isFallback: true,
            messages: [
                {
                    basicCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        formattedText: "Test string",
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    browseCarouselCard: {
                        imageDisplayOptions: "Test string",
                        items: [
                            {
                                description: "Test string",
                                footer: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                openUriAction: {
                                    url: "Test string",
                                    urlTypeHint: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                    },
                    card: {
                        buttons: [
                            {
                                postback: "Test string",
                                text: "Test string",
                            }                        ],
                        imageUri: "Test string",
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    carouselSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                    },
                    image: {
                        accessibilityText: "Test string",
                        imageUri: "Test string",
                    },
                    linkOutSuggestion: {
                        destinationName: "Test string",
                        uri: "Test string",
                    },
                    listSelect: {
                        items: [
                            {
                                description: "Test string",
                                image: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                info: {
                                    key: "Test string",
                                    synonyms: [
                                        "Test string"                                    ],
                                },
                                title: "Test string",
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    mediaContent: {
                        mediaObjects: [
                            {
                                contentUrl: "Test string",
                                description: "Test string",
                                icon: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                largeImage: {
                                    accessibilityText: "Test string",
                                    imageUri: "Test string",
                                },
                                name: "Test string",
                            }                        ],
                        mediaType: "Test string",
                    },
                    payload: {
                        A: 42                    },
                    platform: "Test string",
                    quickReplies: {
                        quickReplies: [
                            "Test string"                        ],
                        title: "Test string",
                    },
                    simpleResponses: {
                        simpleResponses: [
                            {
                                displayText: "Test string",
                                ssml: "Test string",
                                textToSpeech: "Test string",
                            }                        ],
                    },
                    suggestions: {
                        suggestions: [
                            {
                                title: "Test string",
                            }                        ],
                    },
                    tableCard: {
                        buttons: [
                            {
                                openUriAction: {
                                    uri: "Test string",
                                },
                                title: "Test string",
                            }                        ],
                        columnProperties: [
                            {
                                header: "Test string",
                                horizontalAlignment: "Test string",
                            }                        ],
                        image: {
                            accessibilityText: "Test string",
                            imageUri: "Test string",
                        },
                        rows: [
                            {
                                cells: [
                                    {
                                        text: "Test string",
                                    }                                ],
                                dividerAfter: true,
                            }                        ],
                        subtitle: "Test string",
                        title: "Test string",
                    },
                    text: {
                        text: [
                            "Test string"                        ],
                    },
                }            ],
            mlDisabled: true,
            name: "Test string",
            outputContexts: [
                {
                    lifespanCount: 42,
                    name: "Test string",
                    parameters: {
                        A: 42                    },
                }            ],
            parameters: [
                {
                    defaultValue: "Test string",
                    displayName: "Test string",
                    entityTypeDisplayName: "Test string",
                    isList: true,
                    mandatory: true,
                    name: "Test string",
                    prompts: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            parentFollowupIntentName: "Test string",
            priority: 42,
            resetContexts: true,
            rootFollowupIntentName: "Test string",
            trainingPhrases: [
                {
                    name: "Test string",
                    parts: [
                        {
                            alias: "Test string",
                            entityType: "Test string",
                            text: "Test string",
                            userDefined: true,
                        }                    ],
                    timesAddedCount: 42,
                    type: "Test string",
                }            ],
            webhookState: "Test string",
        });
        /** Deletes all active contexts in the specified session. */
        await gapi.client.dialogflow.projects.agent.sessions.deleteContexts({
            parent: "Test string",
        });
        /** Creates a context. If the specified context already exists, overrides the context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.create({
            parent: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /** Deletes the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.delete({
            name: "Test string",
        });
        /** Retrieves the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.get({
            name: "Test string",
        });
        /** Returns the list of all contexts in the specified session. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /**
         * Creates a session entity type. If the specified session entity type already exists, overrides the session entity type. This method doesn't work with Google Assistant integration.
         * Contact Dialogflow support if you need to use session entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.create({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /**
         * Deletes the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.delete({
            name: "Test string",
        });
        /**
         * Retrieves the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.get({
            name: "Test string",
        });
        /**
         * Returns the list of all session entity types in the specified session. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session
         * entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Updates the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /**
         * Processes a natural language query and returns structured, actionable data as a result. This method is not idempotent, because it may cause contexts and session entity types to be
         * updated, which in turn might affect results of future queries. Note: Always use agent versions for production traffic. See [Versions and
         * environments](https://cloud.google.com/dialogflow/es/docs/agents-versions).
         */
        await gapi.client.dialogflow.projects.agent.sessions.detectIntent({
            session: "Test string",
        }, {
            inputAudio: "Test string",
            outputAudioConfig: {
                audioEncoding: "Test string",
                sampleRateHertz: 42,
                synthesizeSpeechConfig: {
                    effectsProfileId: [
                        "Test string"                    ],
                    pitch: 42,
                    speakingRate: 42,
                    voice: {
                        name: "Test string",
                        ssmlGender: "Test string",
                    },
                    volumeGainDb: 42,
                },
            },
            outputAudioConfigMask: "Test string",
            queryInput: {
                audioConfig: {
                    audioEncoding: "Test string",
                    enableWordInfo: true,
                    languageCode: "Test string",
                    model: "Test string",
                    modelVariant: "Test string",
                    phraseHints: [
                        "Test string"                    ],
                    sampleRateHertz: 42,
                    singleUtterance: true,
                    speechContexts: [
                        {
                            boost: 42,
                            phrases: [
                                "Test string"                            ],
                        }                    ],
                },
                event: {
                    languageCode: "Test string",
                    name: "Test string",
                    parameters: {
                        A: 42                    },
                },
                text: {
                    languageCode: "Test string",
                    text: "Test string",
                },
            },
            queryParams: {
                contexts: [
                    {
                        lifespanCount: 42,
                        name: "Test string",
                        parameters: {
                            A: 42                        },
                    }                ],
                geoLocation: {
                    latitude: 42,
                    longitude: 42,
                },
                payload: {
                    A: 42                },
                resetContexts: true,
                sentimentAnalysisRequestConfig: {
                    analyzeQueryTextSentiment: true,
                },
                sessionEntityTypes: [
                    {
                        entities: [
                            {
                                synonyms: [
                                    "Test string"                                ],
                                value: "Test string",
                            }                        ],
                        entityOverrideMode: "Test string",
                        name: "Test string",
                    }                ],
                timeZone: "Test string",
                webhookHeaders: {
                    A: "Test string"                },
            },
        });
        /** Creates a context. If the specified context already exists, overrides the context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.create({
            parent: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /** Deletes the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.delete({
            name: "Test string",
        });
        /** Retrieves the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.get({
            name: "Test string",
        });
        /** Returns the list of all contexts in the specified session. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified context. */
        await gapi.client.dialogflow.projects.agent.sessions.contexts.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            lifespanCount: 42,
            name: "Test string",
            parameters: {
                A: 42            },
        });
        /**
         * Creates a session entity type. If the specified session entity type already exists, overrides the session entity type. This method doesn't work with Google Assistant integration.
         * Contact Dialogflow support if you need to use session entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.create({
            parent: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /**
         * Deletes the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.delete({
            name: "Test string",
        });
        /**
         * Retrieves the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.get({
            name: "Test string",
        });
        /**
         * Returns the list of all session entity types in the specified session. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session
         * entities with Google Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Updates the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google
         * Assistant integration.
         */
        await gapi.client.dialogflow.projects.agent.sessions.entityTypes.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            entities: [
                {
                    synonyms: [
                        "Test string"                    ],
                    value: "Test string",
                }            ],
            entityOverrideMode: "Test string",
            name: "Test string",
        });
        /**
         * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this
         * method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation
         * completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of
         * 1, corresponding to `Code.CANCELLED`.
         */
        await gapi.client.dialogflow.projects.operations.cancel({
            name: "Test string",
        });
        /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
        await gapi.client.dialogflow.projects.operations.get({
            name: "Test string",
        });
        /**
         * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to
         * override the binding to use different resource name schemes, such as `users/∗/operations`. To override the binding, API services can add a binding such as
         * `"/v1/{name=users/*}/operations"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must
         * ensure the name binding is the parent resource, without the operations collection id.
         */
        await gapi.client.dialogflow.projects.operations.list({
            filter: "Test string",
            name: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
    }
});
