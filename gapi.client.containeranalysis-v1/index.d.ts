/* Type definitions for non-npm package Container Analysis API v1 0.0 */
// Project: https://cloud.google.com/container-analysis/api/reference/rest/
// Definitions by: Maxim Mazurok <https://github.com/Maxim-Mazurok>
//                 Nick Amoscato <https://github.com/namoscato>
//                 Declan Vong <https://github.com/declanvong>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped

// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
// Generated from: https://containeranalysis.googleapis.com/$discovery/rest?version=v1
// Revision: 20250905

/// <reference types="gapi.client" />

declare namespace gapi.client {
  /** Load Container Analysis API v1 */
  function load(
    urlOrObject: 'https://containeranalysis.googleapis.com/$discovery/rest?version=v1',
  ): Promise<void>;
  /** @deprecated Please load APIs with discovery documents. */
  function load(name: 'containeranalysis', version: 'v1'): Promise<void>;
  /** @deprecated Please load APIs with discovery documents. */
  function load(
    name: 'containeranalysis',
    version: 'v1',
    callback: () => any,
  ): void;

  namespace containeranalysis {
    interface AliasContext {
      /** The alias kind. */
      kind?: string;
      /** The alias name. */
      name?: string;
    }
    interface AnalysisCompleted {
      analysisType?: string[];
    }
    interface Artifact {
      /** Hash or checksum value of a binary, or Docker Registry 2.0 digest of a container. */
      checksum?: string;
      /** Artifact ID, if any; for container images, this will be a URL by digest like `gcr.io/projectID/imagename@sha256:123456`. */
      id?: string;
      /** Related artifact names. This may be the path to a binary or jar file, or in the case of a container build, the name used to push the container image to Google Container Registry, as presented to `docker push`. Note that a single Artifact ID can have multiple names, for example if two tags are applied to one image. */
      names?: string[];
    }
    interface Assessment {
      /** Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability. Deprecated: Use vulnerability_id instead to denote CVEs. */
      cve?: string;
      /** Contains information about the impact of this vulnerability, this will change with time. */
      impacts?: string[];
      /** Justification provides the justification when the state of the assessment if NOT_AFFECTED. */
      justification?: Justification;
      /** A detailed description of this Vex. */
      longDescription?: string;
      /** Holds a list of references associated with this vulnerability item and assessment. These uris have additional information about the vulnerability and the assessment itself. E.g. Link to a document which details how this assessment concluded the state of this vulnerability. */
      relatedUris?: RelatedUrl[];
      /** Specifies details on how to handle (and presumably, fix) a vulnerability. */
      remediations?: Remediation[];
      /** A one sentence description of this Vex. */
      shortDescription?: string;
      /** Provides the state of this Vulnerability assessment. */
      state?: string;
      /** The vulnerability identifier for this Assessment. Will hold one of common identifiers e.g. CVE, GHSA etc. */
      vulnerabilityId?: string;
    }
    interface AttestationNote {
      /** Hint hints at the purpose of the attestation authority. */
      hint?: Hint;
    }
    interface AttestationOccurrence {
      /** One or more JWTs encoding a self-contained attestation. Each JWT encodes the payload that it verifies within the JWT itself. Verifier implementation SHOULD ignore the `serialized_payload` field when verifying these JWTs. If only JWTs are present on this AttestationOccurrence, then the `serialized_payload` SHOULD be left empty. Each JWT SHOULD encode a claim specific to the `resource_uri` of this Occurrence, but this is not validated by Grafeas metadata API implementations. The JWT itself is opaque to Grafeas. */
      jwts?: Jwt[];
      /** Required. The serialized payload that is verified by one or more `signatures`. */
      serializedPayload?: string;
      /** One or more signatures over `serialized_payload`. Verifier implementations should consider this attestation message verified if at least one `signature` verifies `serialized_payload`. See `Signature` in common.proto for more details on signature structure and verification. */
      signatures?: Signature[];
    }
    interface BaseImage {
      /** The number of layers that the base image is composed of. */
      layerCount?: number;
      /** The name of the base image. */
      name?: string;
      /** The repository name in which the base image is from. */
      repository?: string;
    }
    interface BatchCreateNotesRequest {
      /** Required. The notes to create. Max allowed length is 1000. */
      notes?: {[P in string]: Note};
    }
    interface BatchCreateNotesResponse {
      /** The notes that were created. */
      notes?: Note[];
    }
    interface BatchCreateOccurrencesRequest {
      /** Required. The occurrences to create. Max allowed length is 1000. */
      occurrences?: Occurrence[];
    }
    interface BatchCreateOccurrencesResponse {
      /** The occurrences that were created. */
      occurrences?: Occurrence[];
    }
    interface Binding {
      /** The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). */
      condition?: Expr;
      /** Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`: A single identity in a workforce identity pool. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/group/{group_id}`: All workforce identities in a group. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/attribute.{attribute_name}/{attribute_value}`: All workforce identities with a specific attribute value. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/*`: All identities in a workforce identity pool. * `principal://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/subject/{subject_attribute_value}`: A single identity in a workload identity pool. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/group/{group_id}`: A workload identity pool group. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/attribute.{attribute_name}/{attribute_value}`: All identities in a workload identity pool with a certain attribute. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/*`: All identities in a workload identity pool. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `deleted:principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`: Deleted single identity in a workforce identity pool. For example, `deleted:principal://iam.googleapis.com/locations/global/workforcePools/my-pool-id/subject/my-subject-attribute-value`. */
      members?: string[];
      /** Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`. For an overview of the IAM roles and permissions, see the [IAM documentation](https://cloud.google.com/iam/docs/roles-overview). For a list of the available pre-defined roles, see [here](https://cloud.google.com/iam/docs/understanding-roles). */
      role?: string;
    }
    interface BuildDefinition {
      buildType?: string;
      externalParameters?: {[P in string]: any};
      internalParameters?: {[P in string]: any};
      resolvedDependencies?: ResourceDescriptor[];
    }
    interface BuilderConfig {
      id?: string;
    }
    interface BuildMetadata {
      finishedOn?: string;
      invocationId?: string;
      startedOn?: string;
    }
    interface BuildNote {
      /** Required. Immutable. Version of the builder which produced this build. */
      builderVersion?: string;
    }
    interface BuildOccurrence {
      /** Deprecated. See InTotoStatement for the replacement. In-toto Provenance representation as defined in spec. */
      intotoProvenance?: InTotoProvenance;
      /** In-Toto Slsa Provenance V1 represents a slsa provenance meeting the slsa spec, wrapped in an in-toto statement. This allows for direct jsonification of a to-spec in-toto slsa statement with a to-spec slsa provenance. */
      inTotoSlsaProvenanceV1?: InTotoSlsaProvenanceV1;
      /** In-toto Statement representation as defined in spec. The intoto_statement can contain any type of provenance. The serialized payload of the statement can be stored and signed in the Occurrence's envelope. */
      intotoStatement?: InTotoStatement;
      /** The actual provenance for the build. */
      provenance?: BuildProvenance;
      /** Serialized JSON representation of the provenance, used in generating the build signature in the corresponding build note. After verifying the signature, `provenance_bytes` can be unmarshalled and compared to the provenance to confirm that it is unchanged. A base64-encoded string representation of the provenance bytes is used for the signature in order to interoperate with openssl which expects this format for signature verification. The serialized form is captured both to avoid ambiguity in how the provenance is marshalled to json as well to prevent incompatibilities with future changes. */
      provenanceBytes?: string;
    }
    interface BuildProvenance {
      /** Version string of the builder at the time this build was executed. */
      builderVersion?: string;
      /** Special options applied to this build. This is a catch-all field where build providers can enter any desired additional details. */
      buildOptions?: {[P in string]: string};
      /** Output of the build. */
      builtArtifacts?: Artifact[];
      /** Commands requested by the build. */
      commands?: Command[];
      /** Time at which the build was created. */
      createTime?: string;
      /** E-mail address of the user who initiated this build. Note that this was the user's e-mail address at the time the build was initiated; this address may not represent the same end-user for all time. */
      creator?: string;
      /** Time at which execution of the build was finished. */
      endTime?: string;
      /** Required. Unique identifier of the build. */
      id?: string;
      /** URI where any logs for this provenance were written. */
      logsUri?: string;
      /** ID of the project. */
      projectId?: string;
      /** Details of the Source input to the build. */
      sourceProvenance?: Source;
      /** Time at which execution of the build was started. */
      startTime?: string;
      /** Trigger identifier if the build was triggered automatically; empty if not. */
      triggerId?: string;
    }
    interface BuildStep {
      /** Allow this build step to fail without failing the entire build if and only if the exit code is one of the specified codes. If allow_failure is also specified, this field will take precedence. */
      allowExitCodes?: number[];
      /** Allow this build step to fail without failing the entire build. If false, the entire build will fail if this step fails. Otherwise, the build will succeed, but this step will still have a failure status. Error information will be reported in the failure_detail field. */
      allowFailure?: boolean;
      /** A list of arguments that will be presented to the step when it is started. If the image used to run the step's container has an entrypoint, the `args` are used as arguments to that entrypoint. If the image does not define an entrypoint, the first element in args is used as the entrypoint, and the remainder will be used as arguments. */
      args?: string[];
      /** Option to include built-in and custom substitutions as env variables for this build step. This option will override the global option in BuildOption. */
      automapSubstitutions?: boolean;
      /** Working directory to use when running this step's container. If this value is a relative path, it is relative to the build's working directory. If this value is absolute, it may be outside the build's working directory, in which case the contents of the path may not be persisted across build step executions, unless a `volume` for that path is specified. If the build specifies a `RepoSource` with `dir` and a step with a `dir`, which specifies an absolute path, the `RepoSource` `dir` is ignored for the step's execution. */
      dir?: string;
      /** Entrypoint to be used instead of the build step image's default entrypoint. If unset, the image's default entrypoint is used. */
      entrypoint?: string;
      /** A list of environment variable definitions to be used when running a step. The elements are of the form "KEY=VALUE" for the environment variable "KEY" being given the value "VALUE". */
      env?: string[];
      /** Output only. Return code from running the step. */
      exitCode?: number;
      /** Unique identifier for this build step, used in `wait_for` to reference this build step as a dependency. */
      id?: string;
      /** Required. The name of the container image that will run this particular build step. If the image is available in the host's Docker daemon's cache, it will be run directly. If not, the host will attempt to pull the image first, using the builder service account's credentials if necessary. The Docker daemon's cache will already have the latest versions of all of the officially supported build steps ([https://github.com/GoogleCloudPlatform/cloud-builders](https://github.com/GoogleCloudPlatform/cloud-builders)). The Docker daemon will also have cached many of the layers for some popular images, like "ubuntu", "debian", but they will be refreshed at the time you attempt to use them. If you built an image in a previous build step, it will be stored in the host's Docker daemon's cache and is available to use as the name for a later build step. */
      name?: string;
      /** Output only. Stores timing information for pulling this build step's builder image only. */
      pullTiming?: TimeSpan;
      /** Remote configuration for the build step. */
      remoteConfig?: string;
      results?: StepResult[];
      /** A shell script to be executed in the step. When script is provided, the user cannot specify the entrypoint or args. */
      script?: string;
      /** A list of environment variables which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`. */
      secretEnv?: string[];
      /** Output only. Status of the build step. At this time, build step status is only updated on build completion; step status is not updated in real-time as the build progresses. */
      status?: string;
      /** Time limit for executing this build step. If not defined, the step has no time limit and will be allowed to continue to run until either it completes or the build itself times out. */
      timeout?: string;
      /** Output only. Stores timing information for executing this build step. */
      timing?: TimeSpan;
      /** List of volumes to mount into the build step. Each volume is created as an empty volume prior to execution of the build step. Upon completion of the build, volumes and their contents are discarded. Using a named volume in only one step is not valid as it is indicative of a build request with an incorrect configuration. */
      volumes?: Volume[];
      /** The ID(s) of the step(s) that this build step depends on. This build step will not start until all the build steps in `wait_for` have completed successfully. If `wait_for` is empty, this build step will start when all previous build steps in the `Build.Steps` list have completed successfully. */
      waitFor?: string[];
    }
    interface Category {
      /** The identifier of the category. */
      categoryId?: string;
      /** The localized name of the category. */
      name?: string;
    }
    interface CISAKnownExploitedVulnerabilities {
      /** Whether the vulnerability is known to have been leveraged as part of a ransomware campaign. */
      knownRansomwareCampaignUse?: string;
    }
    interface CisBenchmark {
      profileLevel?: number;
      severity?: string;
    }
    interface CloudRepoSourceContext {
      /** An alias, which may be a branch or tag. */
      aliasContext?: AliasContext;
      /** The ID of the repo. */
      repoId?: RepoId;
      /** A revision ID. */
      revisionId?: string;
    }
    interface CloudStorageLocation {}
    interface Command {
      /** Command-line arguments used when executing this command. */
      args?: string[];
      /** Working directory (relative to project source root) used when running this command. */
      dir?: string;
      /** Environment variables set before running this command. */
      env?: string[];
      /** Optional unique identifier for this command, used in wait_for to reference this command as a dependency. */
      id?: string;
      /** Required. Name of the command, as presented on the command line, or if the command is packaged as a Docker container, as presented to `docker pull`. */
      name?: string;
      /** The ID(s) of the command(s) that this command depends on. */
      waitFor?: string[];
    }
    interface Completeness {
      /** If true, the builder claims that recipe.arguments is complete, meaning that all external inputs are properly captured in the recipe. */
      arguments?: boolean;
      /** If true, the builder claims that recipe.environment is claimed to be complete. */
      environment?: boolean;
      /** If true, the builder claims that materials are complete, usually through some controls to prevent network access. Sometimes called "hermetic". */
      materials?: boolean;
    }
    interface ComplianceNote {
      cisBenchmark?: CisBenchmark;
      /** A description about this compliance check. */
      description?: string;
      impact?: string;
      /** A rationale for the existence of this compliance check. */
      rationale?: string;
      /** A description of remediation steps if the compliance check fails. */
      remediation?: string;
      /** Serialized scan instructions with a predefined format. */
      scanInstructions?: string;
      /** The title that identifies this compliance check. */
      title?: string;
      /** The OS and config versions the benchmark applies to. */
      version?: ComplianceVersion[];
    }
    interface ComplianceOccurrence {
      nonComplianceReason?: string;
      nonCompliantFiles?: NonCompliantFile[];
      /** The OS and config version the benchmark was run on. */
      version?: ComplianceVersion;
    }
    interface ComplianceVersion {
      /** The name of the document that defines this benchmark, e.g. "CIS Container-Optimized OS". */
      benchmarkDocument?: string;
      /** The CPE URI (https://cpe.mitre.org/specification/) this benchmark is applicable to. */
      cpeUri?: string;
      /** The version of the benchmark. This is set to the version of the OS-specific CIS document the benchmark is defined in. */
      version?: string;
    }
    interface ContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalConfig {
      /** Whether or not approval is needed. If this is set on a build, it will become pending when created, and will need to be explicitly approved to start. */
      approvalRequired?: boolean;
    }
    interface ContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalResult {
      /** Output only. The time when the approval decision was made. */
      approvalTime?: string;
      /** Output only. Email of the user that called the ApproveBuild API to approve or reject a build at the time that the API was called. */
      approverAccount?: string;
      /** Optional. An optional comment for this manual approval result. */
      comment?: string;
      /** Required. The decision of this manual approval. */
      decision?: string;
      /** Optional. An optional URL tied to this manual approval result. This field is essentially the same as comment, except that it will be rendered by the UI differently. An example use case is a link to an external job that approved this Build. */
      url?: string;
    }
    interface ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts {
      /** Optional. A list of Go modules to be uploaded to Artifact Registry upon successful completion of all build steps. If any objects fail to be pushed, the build is marked FAILURE. */
      goModules?: ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsGoModule[];
      /** A list of images to be pushed upon the successful completion of all build steps. The images will be pushed using the builder service account's credentials. The digests of the pushed images will be stored in the Build resource's results field. If any of the images fail to be pushed, the build is marked FAILURE. */
      images?: string[];
      /** A list of Maven artifacts to be uploaded to Artifact Registry upon successful completion of all build steps. Artifacts in the workspace matching specified paths globs will be uploaded to the specified Artifact Registry repository using the builder service account's credentials. If any artifacts fail to be pushed, the build is marked FAILURE. */
      mavenArtifacts?: ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsMavenArtifact[];
      /** A list of npm packages to be uploaded to Artifact Registry upon successful completion of all build steps. Npm packages in the specified paths will be uploaded to the specified Artifact Registry repository using the builder service account's credentials. If any packages fail to be pushed, the build is marked FAILURE. */
      npmPackages?: ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsNpmPackage[];
      /** A list of objects to be uploaded to Cloud Storage upon successful completion of all build steps. Files in the workspace matching specified paths globs will be uploaded to the specified Cloud Storage location using the builder service account's credentials. The location and generation of the uploaded objects will be stored in the Build resource's results field. If any objects fail to be pushed, the build is marked FAILURE. */
      objects?: ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsArtifactObjects;
      /** A list of Python packages to be uploaded to Artifact Registry upon successful completion of all build steps. The build service account credentials will be used to perform the upload. If any objects fail to be pushed, the build is marked FAILURE. */
      pythonPackages?: ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsPythonPackage[];
    }
    interface ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsArtifactObjects {
      /** Cloud Storage bucket and optional object path, in the form "gs://bucket/path/to/somewhere/". (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Files in the workspace matching any path pattern will be uploaded to Cloud Storage with this location as a prefix. */
      location?: string;
      /** Path globs used to match files in the build's workspace. */
      paths?: string[];
      /** Output only. Stores timing information for pushing all artifact objects. */
      timing?: ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan;
    }
    interface ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsGoModule {
      /** Optional. The Go module's "module path". e.g. example.com/foo/v2 */
      modulePath?: string;
      /** Optional. The Go module's semantic version in the form vX.Y.Z. e.g. v0.1.1 Pre-release identifiers can also be added by appending a dash and dot separated ASCII alphanumeric characters and hyphens. e.g. v0.2.3-alpha.x.12m.5 */
      moduleVersion?: string;
      /** Optional. Location of the Artifact Registry repository. i.e. us-east1 Defaults to the build’s location. */
      repositoryLocation?: string;
      /** Optional. Artifact Registry repository name. Specified Go modules will be zipped and uploaded to Artifact Registry with this location as a prefix. e.g. my-go-repo */
      repositoryName?: string;
      /** Optional. Project ID of the Artifact Registry repository. Defaults to the build project. */
      repositoryProjectId?: string;
      /** Optional. Source path of the go.mod file in the build's workspace. If not specified, this will default to the current directory. e.g. ~/code/go/mypackage */
      sourcePath?: string;
    }
    interface ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsMavenArtifact {
      /** Maven `artifactId` value used when uploading the artifact to Artifact Registry. */
      artifactId?: string;
      /** Maven `groupId` value used when uploading the artifact to Artifact Registry. */
      groupId?: string;
      /** Optional. Path to an artifact in the build's workspace to be uploaded to Artifact Registry. This can be either an absolute path, e.g. /workspace/my-app/target/my-app-1.0.SNAPSHOT.jar or a relative path from /workspace, e.g. my-app/target/my-app-1.0.SNAPSHOT.jar. */
      path?: string;
      /** Artifact Registry repository, in the form "https://$REGION-maven.pkg.dev/$PROJECT/$REPOSITORY" Artifact in the workspace specified by path will be uploaded to Artifact Registry with this location as a prefix. */
      repository?: string;
      /** Maven `version` value used when uploading the artifact to Artifact Registry. */
      version?: string;
    }
    interface ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsNpmPackage {
      /** Optional. Path to the package.json. e.g. workspace/path/to/package Only one of `archive` or `package_path` can be specified. */
      packagePath?: string;
      /** Artifact Registry repository, in the form "https://$REGION-npm.pkg.dev/$PROJECT/$REPOSITORY" Npm package in the workspace specified by path will be zipped and uploaded to Artifact Registry with this location as a prefix. */
      repository?: string;
    }
    interface ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsPythonPackage {
      /** Path globs used to match files in the build's workspace. For Python/ Twine, this is usually `dist/*`, and sometimes additionally an `.asc` file. */
      paths?: string[];
      /** Artifact Registry repository, in the form "https://$REGION-python.pkg.dev/$PROJECT/$REPOSITORY" Files in the workspace matching any path pattern will be uploaded to Artifact Registry with this location as a prefix. */
      repository?: string;
    }
    interface ContaineranalysisGoogleDevtoolsCloudbuildV1Build {
      /** Output only. Describes this build's approval configuration, status, and result. */
      approval?: ContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval;
      /** Artifacts produced by the build that should be uploaded upon successful completion of all build steps. */
      artifacts?: ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts;
      /** Secrets and secret environment variables. */
      availableSecrets?: ContaineranalysisGoogleDevtoolsCloudbuildV1Secrets;
      /** Output only. The ID of the `BuildTrigger` that triggered this build, if it was triggered automatically. */
      buildTriggerId?: string;
      /** Output only. Time at which the request to create the build was received. */
      createTime?: string;
      /** Optional. Dependencies that the Cloud Build worker will fetch before executing user steps. */
      dependencies?: ContaineranalysisGoogleDevtoolsCloudbuildV1Dependency[];
      /** Output only. Contains information about the build when status=FAILURE. */
      failureInfo?: ContaineranalysisGoogleDevtoolsCloudbuildV1BuildFailureInfo;
      /** Output only. Time at which execution of the build was finished. The difference between finish_time and start_time is the duration of the build's execution. */
      finishTime?: string;
      /** Optional. Configuration for git operations. */
      gitConfig?: ContaineranalysisGoogleDevtoolsCloudbuildV1GitConfig;
      /** Output only. Unique identifier of the build. */
      id?: string;
      /** A list of images to be pushed upon the successful completion of all build steps. The images are pushed using the builder service account's credentials. The digests of the pushed images will be stored in the `Build` resource's results field. If any of the images fail to be pushed, the build status is marked `FAILURE`. */
      images?: string[];
      /** Cloud Storage bucket where logs should be written (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Logs file names will be of the format `${logs_bucket}/log-${build_id}.txt`. */
      logsBucket?: string;
      /** Output only. URL to logs for this build in Google Cloud Console. */
      logUrl?: string;
      /** Output only. The 'Build' name with format: `projects/{project}/locations/{location}/builds/{build}`, where {build} is a unique identifier generated by the service. */
      name?: string;
      /** Special options for this build. */
      options?: ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions;
      /** Output only. ID of the project. */
      projectId?: string;
      /** TTL in queue for this build. If provided and the build is enqueued longer than this value, the build will expire and the build status will be `EXPIRED`. The TTL starts ticking from create_time. */
      queueTtl?: string;
      /** Output only. Results of the build. */
      results?: ContaineranalysisGoogleDevtoolsCloudbuildV1Results;
      /** Secrets to decrypt using Cloud Key Management Service. Note: Secret Manager is the recommended technique for managing sensitive data with Cloud Build. Use `available_secrets` to configure builds to access secrets from Secret Manager. For instructions, see: https://cloud.google.com/cloud-build/docs/securing-builds/use-secrets */
      secrets?: ContaineranalysisGoogleDevtoolsCloudbuildV1Secret[];
      /** IAM service account whose credentials will be used at build runtime. Must be of the format `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`. ACCOUNT can be email address or uniqueId of the service account. */
      serviceAccount?: string;
      /** Optional. The location of the source files to build. */
      source?: ContaineranalysisGoogleDevtoolsCloudbuildV1Source;
      /** Output only. A permanent fixed identifier for source. */
      sourceProvenance?: ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance;
      /** Output only. Time at which execution of the build was started. */
      startTime?: string;
      /** Output only. Status of the build. */
      status?: string;
      /** Output only. Customer-readable message about the current status. */
      statusDetail?: string;
      /** Required. The operations to be performed on the workspace. */
      steps?: ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep[];
      /** Substitutions data for `Build` resource. */
      substitutions?: {[P in string]: string};
      /** Tags for annotation of a `Build`. These are not docker tags. */
      tags?: string[];
      /** Amount of time that this build should be allowed to run, to second granularity. If this amount of time elapses, work on the build will cease and the build status will be `TIMEOUT`. `timeout` starts ticking from `startTime`. Default time is 60 minutes. */
      timeout?: string;
      /** Output only. Stores timing information for phases of the build. Valid keys are: * BUILD: time to execute all build steps. * PUSH: time to push all artifacts including docker images and non docker artifacts. * FETCHSOURCE: time to fetch source. * SETUPBUILD: time to set up build. If the build does not specify source or images, these keys will not be included. */
      timing?: {
        [P in string]: ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan;
      };
      /** Output only. Non-fatal problems encountered during the execution of the build. */
      warnings?: ContaineranalysisGoogleDevtoolsCloudbuildV1BuildWarning[];
    }
    interface ContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval {
      /** Output only. Configuration for manual approval of this build. */
      config?: ContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalConfig;
      /** Output only. Result of manual approval for this Build. */
      result?: ContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalResult;
      /** Output only. The state of this build's approval. */
      state?: string;
    }
    interface ContaineranalysisGoogleDevtoolsCloudbuildV1BuildFailureInfo {
      /** Explains the failure issue in more detail using hard-coded text. */
      detail?: string;
      /** The name of the failure. */
      type?: string;
    }
    interface ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions {
      /** Option to include built-in and custom substitutions as env variables for all build steps. */
      automapSubstitutions?: boolean;
      /** Optional. Option to specify how default logs buckets are setup. */
      defaultLogsBucketBehavior?: string;
      /** Requested disk size for the VM that runs the build. Note that this is *NOT* "disk free"; some of the space will be used by the operating system and build utilities. Also note that this is the minimum disk size that will be allocated for the build -- the build may run with a larger disk than requested. At present, the maximum disk size is 4000GB; builds that request more than the maximum are rejected with an error. */
      diskSizeGb?: string;
      /** Option to specify whether or not to apply bash style string operations to the substitutions. NOTE: this is always enabled for triggered builds and cannot be overridden in the build configuration file. */
      dynamicSubstitutions?: boolean;
      /** Optional. Option to specify whether structured logging is enabled. If true, JSON-formatted logs are parsed as structured logs. */
      enableStructuredLogging?: boolean;
      /** A list of global environment variable definitions that will exist for all build steps in this build. If a variable is defined in both globally and in a build step, the variable will use the build step value. The elements are of the form "KEY=VALUE" for the environment variable "KEY" being given the value "VALUE". */
      env?: string[];
      /** Option to specify the logging mode, which determines if and where build logs are stored. */
      logging?: string;
      /** Option to define build log streaming behavior to Cloud Storage. */
      logStreamingOption?: string;
      /** Compute Engine machine type on which to run the build. */
      machineType?: string;
      /** Optional. Specification for execution on a `WorkerPool`. See [running builds in a private pool](https://cloud.google.com/build/docs/private-pools/run-builds-in-private-pool) for more information. */
      pool?: ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptionsPoolOption;
      /** Optional. Option to specify the Pub/Sub topic to receive build status updates. */
      pubsubTopic?: string;
      /** Requested verifiability options. */
      requestedVerifyOption?: string;
      /** A list of global environment variables, which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`. These variables will be available to all build steps in this build. */
      secretEnv?: string[];
      /** Requested hash for SourceProvenance. */
      sourceProvenanceHash?: string[];
      /** Option to specify behavior when there is an error in the substitution checks. NOTE: this is always set to ALLOW_LOOSE for triggered builds and cannot be overridden in the build configuration file. */
      substitutionOption?: string;
      /** Global list of volumes to mount for ALL build steps Each volume is created as an empty volume prior to starting the build process. Upon completion of the build, volumes and their contents are discarded. Global volume names and paths cannot conflict with the volumes defined a build step. Using a global volume in a build with only one step is not valid as it is indicative of a build request with an incorrect configuration. */
      volumes?: ContaineranalysisGoogleDevtoolsCloudbuildV1Volume[];
      /** This field deprecated; please use `pool.name` instead. */
      workerPool?: string;
    }
    interface ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptionsPoolOption {
      /** The `WorkerPool` resource to execute the build on. You must have `cloudbuild.workerpools.use` on the project hosting the WorkerPool. Format projects/{project}/locations/{location}/workerPools/{workerPoolId} */
      name?: string;
    }
    interface ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep {
      /** Allow this build step to fail without failing the entire build if and only if the exit code is one of the specified codes. If allow_failure is also specified, this field will take precedence. */
      allowExitCodes?: number[];
      /** Allow this build step to fail without failing the entire build. If false, the entire build will fail if this step fails. Otherwise, the build will succeed, but this step will still have a failure status. Error information will be reported in the failure_detail field. */
      allowFailure?: boolean;
      /** A list of arguments that will be presented to the step when it is started. If the image used to run the step's container has an entrypoint, the `args` are used as arguments to that entrypoint. If the image does not define an entrypoint, the first element in args is used as the entrypoint, and the remainder will be used as arguments. */
      args?: string[];
      /** Option to include built-in and custom substitutions as env variables for this build step. This option will override the global option in BuildOption. */
      automapSubstitutions?: boolean;
      /** Working directory to use when running this step's container. If this value is a relative path, it is relative to the build's working directory. If this value is absolute, it may be outside the build's working directory, in which case the contents of the path may not be persisted across build step executions, unless a `volume` for that path is specified. If the build specifies a `RepoSource` with `dir` and a step with a `dir`, which specifies an absolute path, the `RepoSource` `dir` is ignored for the step's execution. */
      dir?: string;
      /** Entrypoint to be used instead of the build step image's default entrypoint. If unset, the image's default entrypoint is used. */
      entrypoint?: string;
      /** A list of environment variable definitions to be used when running a step. The elements are of the form "KEY=VALUE" for the environment variable "KEY" being given the value "VALUE". */
      env?: string[];
      /** Output only. Return code from running the step. */
      exitCode?: number;
      /** Unique identifier for this build step, used in `wait_for` to reference this build step as a dependency. */
      id?: string;
      /** Required. The name of the container image that will run this particular build step. If the image is available in the host's Docker daemon's cache, it will be run directly. If not, the host will attempt to pull the image first, using the builder service account's credentials if necessary. The Docker daemon's cache will already have the latest versions of all of the officially supported build steps ([https://github.com/GoogleCloudPlatform/cloud-builders](https://github.com/GoogleCloudPlatform/cloud-builders)). The Docker daemon will also have cached many of the layers for some popular images, like "ubuntu", "debian", but they will be refreshed at the time you attempt to use them. If you built an image in a previous build step, it will be stored in the host's Docker daemon's cache and is available to use as the name for a later build step. */
      name?: string;
      /** Output only. Stores timing information for pulling this build step's builder image only. */
      pullTiming?: ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan;
      /** A shell script to be executed in the step. When script is provided, the user cannot specify the entrypoint or args. */
      script?: string;
      /** A list of environment variables which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`. */
      secretEnv?: string[];
      /** Output only. Status of the build step. At this time, build step status is only updated on build completion; step status is not updated in real-time as the build progresses. */
      status?: string;
      /** Time limit for executing this build step. If not defined, the step has no time limit and will be allowed to continue to run until either it completes or the build itself times out. */
      timeout?: string;
      /** Output only. Stores timing information for executing this build step. */
      timing?: ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan;
      /** List of volumes to mount into the build step. Each volume is created as an empty volume prior to execution of the build step. Upon completion of the build, volumes and their contents are discarded. Using a named volume in only one step is not valid as it is indicative of a build request with an incorrect configuration. */
      volumes?: ContaineranalysisGoogleDevtoolsCloudbuildV1Volume[];
      /** The ID(s) of the step(s) that this build step depends on. This build step will not start until all the build steps in `wait_for` have completed successfully. If `wait_for` is empty, this build step will start when all previous build steps in the `Build.Steps` list have completed successfully. */
      waitFor?: string[];
    }
    interface ContaineranalysisGoogleDevtoolsCloudbuildV1BuildWarning {
      /** The priority for this warning. */
      priority?: string;
      /** Explanation of the warning generated. */
      text?: string;
    }
    interface ContaineranalysisGoogleDevtoolsCloudbuildV1BuiltImage {
      /** Docker Registry 2.0 digest. */
      digest?: string;
      /** Name used to push the container image to Google Container Registry, as presented to `docker push`. */
      name?: string;
      /** Output only. Stores timing information for pushing the specified image. */
      pushTiming?: ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan;
    }
    interface ContaineranalysisGoogleDevtoolsCloudbuildV1ConnectedRepository {
      /** Optional. Directory, relative to the source root, in which to run the build. */
      dir?: string;
      /** Required. Name of the Google Cloud Build repository, formatted as `projects/*‍/locations/*‍/connections/*‍/repositories/*`. */
      repository?: string;
      /** Required. The revision to fetch from the Git repository such as a branch, a tag, a commit SHA, or any Git ref. */
      revision?: string;
    }
    interface ContaineranalysisGoogleDevtoolsCloudbuildV1Dependency {
      /** If set to true disable all dependency fetching (ignoring the default source as well). */
      empty?: boolean;
      /** Represents a git repository as a build dependency. */
      gitSource?: ContaineranalysisGoogleDevtoolsCloudbuildV1DependencyGitSourceDependency;
    }
    interface ContaineranalysisGoogleDevtoolsCloudbuildV1DependencyGitSourceDependency {
      /** Optional. How much history should be fetched for the build (default 1, -1 for all history). */
      depth?: string;
      /** Required. Where should the files be placed on the worker. */
      destPath?: string;
      /** Optional. True if submodules should be fetched too (default false). */
      recurseSubmodules?: boolean;
      /** Required. The kind of repo (url or dev connect). */
      repository?: ContaineranalysisGoogleDevtoolsCloudbuildV1DependencyGitSourceRepository;
      /** Required. The revision that we will fetch the repo at. */
      revision?: string;
    }
    interface ContaineranalysisGoogleDevtoolsCloudbuildV1DependencyGitSourceRepository {
      /** The Developer Connect Git repository link formatted as `projects/*‍/locations/*‍/connections/*‍/gitRepositoryLink/*` */
      developerConnect?: string;
      /** Location of the Git repository. */
      url?: string;
    }
    interface ContaineranalysisGoogleDevtoolsCloudbuildV1DeveloperConnectConfig {
      /** Required. Directory, relative to the source root, in which to run the build. */
      dir?: string;
      /** Required. The Developer Connect Git repository link, formatted as `projects/*‍/locations/*‍/connections/*‍/gitRepositoryLink/*`. */
      gitRepositoryLink?: string;
      /** Required. The revision to fetch from the Git repository such as a branch, a tag, a commit SHA, or any Git ref. */
      revision?: string;
    }
    interface ContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes {
      /** Collection of file hashes. */
      fileHash?: ContaineranalysisGoogleDevtoolsCloudbuildV1Hash[];
    }
    interface ContaineranalysisGoogleDevtoolsCloudbuildV1GitConfig {
      /** Configuration for HTTP related git operations. */
      http?: ContaineranalysisGoogleDevtoolsCloudbuildV1GitConfigHttpConfig;
    }
    interface ContaineranalysisGoogleDevtoolsCloudbuildV1GitConfigHttpConfig {
      /** SecretVersion resource of the HTTP proxy URL. The Service Account used in the build (either the default Service Account or user-specified Service Account) should have `secretmanager.versions.access` permissions on this secret. The proxy URL should be in format `protocol://@]proxyhost[:port]`. */
      proxySecretVersionName?: string;
    }
    interface ContaineranalysisGoogleDevtoolsCloudbuildV1GitSource {
      /** Optional. Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's `dir` is specified and is an absolute path, this value is ignored for that step's execution. */
      dir?: string;
      /** Optional. The revision to fetch from the Git repository such as a branch, a tag, a commit SHA, or any Git ref. Cloud Build uses `git fetch` to fetch the revision from the Git repository; therefore make sure that the string you provide for `revision` is parsable by the command. For information on string values accepted by `git fetch`, see https://git-scm.com/docs/gitrevisions#_specifying_revisions. For information on `git fetch`, see https://git-scm.com/docs/git-fetch. */
      revision?: string;
      /** Required. Location of the Git repo to build. This will be used as a `git remote`, see https://git-scm.com/docs/git-remote. */
      url?: string;
    }
    interface ContaineranalysisGoogleDevtoolsCloudbuildV1Hash {
      /** The type of hash that was performed. */
      type?: string;
      /** The hash value. */
      value?: string;
    }
    interface ContaineranalysisGoogleDevtoolsCloudbuildV1InlineSecret {
      /** Map of environment variable name to its encrypted value. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step. Values can be at most 64 KB in size. There can be at most 100 secret values across all of a build's secrets. */
      envMap?: {[P in string]: string};
      /** Resource name of Cloud KMS crypto key to decrypt the encrypted value. In format: projects/*‍/locations/*‍/keyRings/*‍/cryptoKeys/* */
      kmsKeyName?: string;
    }
    interface ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource {
      /** Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax */
      branchName?: string;
      /** Explicit commit SHA to build. */
      commitSha?: string;
      /** Optional. Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's `dir` is specified and is an absolute path, this value is ignored for that step's execution. */
      dir?: string;
      /** Optional. Only trigger a build if the revision regex does NOT match the revision regex. */
      invertRegex?: boolean;
      /** Optional. ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed. */
      projectId?: string;
      /** Required. Name of the Cloud Source Repository. */
      repoName?: string;
      /** Optional. Substitutions to use in a triggered build. Should only be used with RunBuildTrigger */
      substitutions?: {[P in string]: string};
      /** Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax */
      tagName?: string;
    }
    interface ContaineranalysisGoogleDevtoolsCloudbuildV1Results {
      /** Path to the artifact manifest for non-container artifacts uploaded to Cloud Storage. Only populated when artifacts are uploaded to Cloud Storage. */
      artifactManifest?: string;
      /** Time to push all non-container artifacts to Cloud Storage. */
      artifactTiming?: ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan;
      /** List of build step digests, in the order corresponding to build step indices. */
      buildStepImages?: string[];
      /** List of build step outputs, produced by builder images, in the order corresponding to build step indices. [Cloud Builders](https://cloud.google.com/cloud-build/docs/cloud-builders) can produce this output by writing to `$BUILDER_OUTPUT/output`. Only the first 50KB of data is stored. Note that the `$BUILDER_OUTPUT` variable is read-only and can't be substituted. */
      buildStepOutputs?: string[];
      /** Optional. Go module artifacts uploaded to Artifact Registry at the end of the build. */
      goModules?: ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedGoModule[];
      /** Container images that were built as a part of the build. */
      images?: ContaineranalysisGoogleDevtoolsCloudbuildV1BuiltImage[];
      /** Maven artifacts uploaded to Artifact Registry at the end of the build. */
      mavenArtifacts?: ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedMavenArtifact[];
      /** Npm packages uploaded to Artifact Registry at the end of the build. */
      npmPackages?: ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedNpmPackage[];
      /** Number of non-container artifacts uploaded to Cloud Storage. Only populated when artifacts are uploaded to Cloud Storage. */
      numArtifacts?: string;
      /** Python artifacts uploaded to Artifact Registry at the end of the build. */
      pythonPackages?: ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedPythonPackage[];
    }
    interface ContaineranalysisGoogleDevtoolsCloudbuildV1Secret {
      /** Cloud KMS key name to use to decrypt these envs. */
      kmsKeyName?: string;
      /** Map of environment variable name to its encrypted value. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step. Values can be at most 64 KB in size. There can be at most 100 secret values across all of a build's secrets. */
      secretEnv?: {[P in string]: string};
    }
    interface ContaineranalysisGoogleDevtoolsCloudbuildV1SecretManagerSecret {
      /** Environment variable name to associate with the secret. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step. */
      env?: string;
      /** Resource name of the SecretVersion. In format: projects/*‍/secrets/*‍/versions/* */
      versionName?: string;
    }
    interface ContaineranalysisGoogleDevtoolsCloudbuildV1Secrets {
      /** Secrets encrypted with KMS key and the associated secret environment variable. */
      inline?: ContaineranalysisGoogleDevtoolsCloudbuildV1InlineSecret[];
      /** Secrets in Secret Manager and associated secret environment variable. */
      secretManager?: ContaineranalysisGoogleDevtoolsCloudbuildV1SecretManagerSecret[];
    }
    interface ContaineranalysisGoogleDevtoolsCloudbuildV1Source {
      /** Optional. If provided, get the source from this 2nd-gen Google Cloud Build repository resource. */
      connectedRepository?: ContaineranalysisGoogleDevtoolsCloudbuildV1ConnectedRepository;
      /** If provided, get the source from this Developer Connect config. */
      developerConnectConfig?: ContaineranalysisGoogleDevtoolsCloudbuildV1DeveloperConnectConfig;
      /** If provided, get the source from this Git repository. */
      gitSource?: ContaineranalysisGoogleDevtoolsCloudbuildV1GitSource;
      /** If provided, get the source from this location in a Cloud Source Repository. */
      repoSource?: ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource;
      /** If provided, get the source from this location in Cloud Storage. */
      storageSource?: ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource;
      /** If provided, get the source from this manifest in Cloud Storage. This feature is in Preview; see description [here](https://github.com/GoogleCloudPlatform/cloud-builders/tree/master/gcs-fetcher). */
      storageSourceManifest?: ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest;
    }
    interface ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance {
      /** Output only. Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. Note that `FileHashes` will only be populated if `BuildOptions` has requested a `SourceProvenanceHash`. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (`.tar.gz`), the `FileHash` will be for the single path to that file. */
      fileHashes?: {
        [P in string]: ContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes;
      };
      /** Output only. A copy of the build's `source.connected_repository`, if exists, with any revisions resolved. */
      resolvedConnectedRepository?: ContaineranalysisGoogleDevtoolsCloudbuildV1ConnectedRepository;
      /** Output only. A copy of the build's `source.git_source`, if exists, with any revisions resolved. */
      resolvedGitSource?: ContaineranalysisGoogleDevtoolsCloudbuildV1GitSource;
      /** A copy of the build's `source.repo_source`, if exists, with any revisions resolved. */
      resolvedRepoSource?: ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource;
      /** A copy of the build's `source.storage_source`, if exists, with any generations resolved. */
      resolvedStorageSource?: ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource;
      /** A copy of the build's `source.storage_source_manifest`, if exists, with any revisions resolved. This feature is in Preview. */
      resolvedStorageSourceManifest?: ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest;
    }
    interface ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource {
      /** Cloud Storage bucket containing the source (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). */
      bucket?: string;
      /** Optional. Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used. */
      generation?: string;
      /** Required. Cloud Storage object containing the source. This object must be a zipped (`.zip`) or gzipped archive file (`.tar.gz`) containing source to build. */
      object?: string;
      /** Optional. Option to specify the tool to fetch the source file for the build. */
      sourceFetcher?: string;
    }
    interface ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest {
      /** Required. Cloud Storage bucket containing the source manifest (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). */
      bucket?: string;
      /** Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used. */
      generation?: string;
      /** Required. Cloud Storage object containing the source manifest. This object must be a JSON file. */
      object?: string;
    }
    interface ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan {
      /** End of time span. */
      endTime?: string;
      /** Start of time span. */
      startTime?: string;
    }
    interface ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedGoModule {
      /** Hash types and values of the Go Module Artifact. */
      fileHashes?: ContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes;
      /** Output only. Stores timing information for pushing the specified artifact. */
      pushTiming?: ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan;
      /** URI of the uploaded artifact. */
      uri?: string;
    }
    interface ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedMavenArtifact {
      /** Hash types and values of the Maven Artifact. */
      fileHashes?: ContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes;
      /** Output only. Stores timing information for pushing the specified artifact. */
      pushTiming?: ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan;
      /** URI of the uploaded artifact. */
      uri?: string;
    }
    interface ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedNpmPackage {
      /** Hash types and values of the npm package. */
      fileHashes?: ContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes;
      /** Output only. Stores timing information for pushing the specified artifact. */
      pushTiming?: ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan;
      /** URI of the uploaded npm package. */
      uri?: string;
    }
    interface ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedPythonPackage {
      /** Hash types and values of the Python Artifact. */
      fileHashes?: ContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes;
      /** Output only. Stores timing information for pushing the specified artifact. */
      pushTiming?: ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan;
      /** URI of the uploaded artifact. */
      uri?: string;
    }
    interface ContaineranalysisGoogleDevtoolsCloudbuildV1Volume {
      /** Name of the volume to mount. Volume names must be unique per build step and must be valid names for Docker volumes. Each named volume must be used by at least two build steps. */
      name?: string;
      /** Path at which to mount the volume. Paths must be absolute and cannot conflict with other volume paths on the same build step or with certain reserved volume paths. */
      path?: string;
    }
    interface CVSS {
      attackComplexity?: string;
      /** Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments. */
      attackVector?: string;
      authentication?: string;
      availabilityImpact?: string;
      /** The base score is a function of the base metric scores. */
      baseScore?: number;
      confidentialityImpact?: string;
      exploitabilityScore?: number;
      impactScore?: number;
      integrityImpact?: string;
      privilegesRequired?: string;
      scope?: string;
      userInteraction?: string;
    }
    interface CVSSv3 {
      attackComplexity?: string;
      /** Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments. */
      attackVector?: string;
      availabilityImpact?: string;
      /** The base score is a function of the base metric scores. */
      baseScore?: number;
      confidentialityImpact?: string;
      exploitabilityScore?: number;
      impactScore?: number;
      integrityImpact?: string;
      privilegesRequired?: string;
      scope?: string;
      userInteraction?: string;
    }
    interface DeploymentNote {
      /** Required. Resource URI for the artifact being deployed. */
      resourceUri?: string[];
    }
    interface DeploymentOccurrence {
      /** Address of the runtime element hosting this deployment. */
      address?: string;
      /** Configuration used to create this deployment. */
      config?: string;
      /** Required. Beginning of the lifetime of this deployment. */
      deployTime?: string;
      /** Platform hosting this deployment. */
      platform?: string;
      /** Output only. Resource URI for the artifact being deployed taken from the deployable field with the same name. */
      resourceUri?: string[];
      /** End of the lifetime of this deployment. */
      undeployTime?: string;
      /** Identity of the user that triggered this deployment. */
      userEmail?: string;
    }
    interface Detail {
      /** Required. The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability affects. */
      affectedCpeUri?: string;
      /** Required. The package this vulnerability affects. */
      affectedPackage?: string;
      /** The version number at the end of an interval in which this vulnerability exists. A vulnerability can affect a package between version numbers that are disjoint sets of intervals (example: [1.0.0-1.1.0], [2.4.6-2.4.8] and [4.5.6-4.6.8]) each of which will be represented in its own Detail. If a specific affected version is provided by a vulnerability database, affected_version_start and affected_version_end will be the same in that Detail. */
      affectedVersionEnd?: Version;
      /** The version number at the start of an interval in which this vulnerability exists. A vulnerability can affect a package between version numbers that are disjoint sets of intervals (example: [1.0.0-1.1.0], [2.4.6-2.4.8] and [4.5.6-4.6.8]) each of which will be represented in its own Detail. If a specific affected version is provided by a vulnerability database, affected_version_start and affected_version_end will be the same in that Detail. */
      affectedVersionStart?: Version;
      /** A vendor-specific description of this vulnerability. */
      description?: string;
      /** The distro recommended [CPE URI](https://cpe.mitre.org/specification/) to update to that contains a fix for this vulnerability. It is possible for this to be different from the affected_cpe_uri. */
      fixedCpeUri?: string;
      /** The distro recommended package to update to that contains a fix for this vulnerability. It is possible for this to be different from the affected_package. */
      fixedPackage?: string;
      /** The distro recommended version to update to that contains a fix for this vulnerability. Setting this to VersionKind.MAXIMUM means no such version is yet available. */
      fixedVersion?: Version;
      /** Whether this detail is obsolete. Occurrences are expected not to point to obsolete details. */
      isObsolete?: boolean;
      /** The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.). */
      packageType?: string;
      /** The distro assigned severity of this vulnerability. */
      severityName?: string;
      /** The source from which the information in this Detail was obtained. */
      source?: string;
      /** The time this information was last changed at the source. This is an upstream timestamp from the underlying information source - e.g. Ubuntu security tracker. */
      sourceUpdateTime?: string;
      /** The name of the vendor of the product. */
      vendor?: string;
    }
    interface Digest {
      /** `SHA1`, `SHA512` etc. */
      algo?: string;
      /** Value of the digest. */
      digestBytes?: string;
    }
    interface DiscoveryNote {
      /** Required. Immutable. The kind of analysis that is handled by this discovery. */
      analysisKind?: string;
    }
    interface DiscoveryOccurrence {
      analysisCompleted?: AnalysisCompleted;
      /** Indicates any errors encountered during analysis of a resource. There could be 0 or more of these errors. */
      analysisError?: Status[];
      /** The status of discovery for the resource. */
      analysisStatus?: string;
      /** When an error is encountered this will contain a LocalizedMessage under details to show to the user. The LocalizedMessage is output only and populated by the API. */
      analysisStatusError?: Status;
      /** Output only. The time occurrences related to this discovery occurrence were archived. */
      archiveTime?: string;
      /** Whether the resource is continuously analyzed. */
      continuousAnalysis?: string;
      /** The CPE of the resource being scanned. */
      cpe?: string;
      /** Files that make up the resource described by the occurrence. */
      files?: File[];
      /** The last time this resource was scanned. */
      lastScanTime?: string;
      /** The status of an SBOM generation. */
      sbomStatus?: SBOMStatus;
    }
    interface Distribution {
      /** The CPU architecture for which packages in this distribution channel were built. */
      architecture?: string;
      /** Required. The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package. */
      cpeUri?: string;
      /** The distribution channel-specific description of this package. */
      description?: string;
      /** The latest available version of this package in this distribution channel. */
      latestVersion?: Version;
      /** A freeform string denoting the maintainer of this package. */
      maintainer?: string;
      /** The distribution channel-specific homepage for this package. */
      url?: string;
    }
    interface DSSEAttestationNote {
      /** DSSEHint hints at the purpose of the attestation authority. */
      hint?: DSSEHint;
    }
    interface DSSEAttestationOccurrence {
      /** If doing something security critical, make sure to verify the signatures in this metadata. */
      envelope?: Envelope;
      statement?: InTotoStatement;
    }
    interface DSSEHint {
      /** Required. The human readable name of this attestation authority, for example "cloudbuild-prod". */
      humanReadableName?: string;
    }
    interface Empty {}
    interface Envelope {
      payload?: string;
      payloadType?: string;
      signatures?: EnvelopeSignature[];
    }
    interface EnvelopeSignature {
      keyid?: string;
      sig?: string;
    }
    interface ExploitPredictionScoringSystem {
      /** The percentile of the current score, the proportion of all scored vulnerabilities with the same or a lower EPSS score */
      percentile?: number;
      /** The EPSS score representing the probability [0-1] of exploitation in the wild in the next 30 days */
      score?: number;
    }
    interface ExportSBOMRequest {
      /** Optional. Empty placeholder to denote that this is a Google Cloud Storage export request. */
      cloudStorageLocation?: any;
    }
    interface ExportSBOMResponse {
      /** The name of the discovery occurrence in the form "projects/{project_id}/occurrences/{OCCURRENCE_ID} It can be used to track the progress of the SBOM export. */
      discoveryOccurrence?: string;
    }
    interface Expr {
      /** Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI. */
      description?: string;
      /** Textual representation of an expression in Common Expression Language syntax. */
      expression?: string;
      /** Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file. */
      location?: string;
      /** Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression. */
      title?: string;
    }
    interface File {
      digest?: {[P in string]: string};
      name?: string;
    }
    interface FileHashes {
      /** Required. Collection of file hashes. */
      fileHash?: Hash[];
    }
    interface Fingerprint {
      /** Required. The layer ID of the final layer in the Docker image's v1 representation. */
      v1Name?: string;
      /** Required. The ordered list of v2 blobs that represent a given image. */
      v2Blob?: string[];
      /** Output only. The name of the image's v2 blobs computed via: [bottom] := v2_blobbottom := sha256(v2_blob[N] + " " + v2_name[N+1]) Only the name of the final blob is kept. */
      v2Name?: string;
    }
    interface FixableTotalByDigest {
      /** The number of fixable vulnerabilities associated with this resource. */
      fixableCount?: string;
      /** The affected resource. */
      resourceUri?: string;
      /** The severity for this count. SEVERITY_UNSPECIFIED indicates total across all severities. */
      severity?: string;
      /** The total number of vulnerabilities associated with this resource. */
      totalCount?: string;
    }
    interface GerritSourceContext {
      /** An alias, which may be a branch or tag. */
      aliasContext?: AliasContext;
      /** The full project name within the host. Projects may be nested, so "project/subproject" is a valid project name. The "repo name" is the hostURI/project. */
      gerritProject?: string;
      /** The URI of a running Gerrit instance. */
      hostUri?: string;
      /** A revision (commit) ID. */
      revisionId?: string;
    }
    interface GetIamPolicyRequest {
      /** OPTIONAL: A `GetPolicyOptions` object for specifying options to `GetIamPolicy`. */
      options?: GetPolicyOptions;
    }
    interface GetPolicyOptions {
      /** Optional. The maximum policy version that will be used to format the policy. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for policies with any conditional role bindings must specify version 3. Policies with no conditional role bindings may specify any valid value or leave the field unset. The policy in the response might use the policy version that you specified, or it might use a lower policy version. For example, if you specify version 3, but the policy has no conditional role bindings, the response uses version 1. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). */
      requestedPolicyVersion?: number;
    }
    interface GitSourceContext {
      /** Git commit hash. */
      revisionId?: string;
      /** Git repository URL. */
      url?: string;
    }
    interface GoogleDevtoolsContaineranalysisV1alpha1OperationMetadata {
      /** Output only. The time this operation was created. */
      createTime?: string;
      /** Output only. The time that this operation was marked completed or failed. */
      endTime?: string;
    }
    interface GrafeasV1FileLocation {
      /** For jars that are contained inside .war files, this filepath can indicate the path to war file combined with the path to jar file. */
      filePath?: string;
      /** Each package found in a file should have its own layer metadata (that is, information from the origin layer of the package). */
      layerDetails?: LayerDetails;
    }
    interface GrafeasV1SlsaProvenanceZeroTwoSlsaBuilder {
      id?: string;
    }
    interface GrafeasV1SlsaProvenanceZeroTwoSlsaCompleteness {
      environment?: boolean;
      materials?: boolean;
      parameters?: boolean;
    }
    interface GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSource {
      digest?: {[P in string]: string};
      entryPoint?: string;
      uri?: string;
    }
    interface GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation {
      configSource?: GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSource;
      environment?: {[P in string]: any};
      parameters?: {[P in string]: any};
    }
    interface GrafeasV1SlsaProvenanceZeroTwoSlsaMaterial {
      digest?: {[P in string]: string};
      uri?: string;
    }
    interface GrafeasV1SlsaProvenanceZeroTwoSlsaMetadata {
      buildFinishedOn?: string;
      buildInvocationId?: string;
      buildStartedOn?: string;
      completeness?: GrafeasV1SlsaProvenanceZeroTwoSlsaCompleteness;
      reproducible?: boolean;
    }
    interface Hash {
      /** Required. The type of hash that was performed, e.g. "SHA-256". */
      type?: string;
      /** Required. The hash value. */
      value?: string;
    }
    interface Hint {
      /** Required. The human readable name of this attestation authority, for example "qa". */
      humanReadableName?: string;
    }
    interface Identity {
      /** The revision number of the update. */
      revision?: number;
      /** The revision independent identifier of the update. */
      updateId?: string;
    }
    interface ImageNote {
      /** Required. Immutable. The fingerprint of the base image. */
      fingerprint?: Fingerprint;
      /** Required. Immutable. The resource_url for the resource representing the basis of associated occurrence images. */
      resourceUrl?: string;
    }
    interface ImageOccurrence {
      /** Output only. This contains the base image URL for the derived image occurrence. */
      baseResourceUrl?: string;
      /** Output only. The number of layers by which this image differs from the associated image basis. */
      distance?: number;
      /** Required. The fingerprint of the derived image. */
      fingerprint?: Fingerprint;
      /** This contains layer-specific metadata, if populated it has length "distance" and is ordered with [distance] being the layer immediately following the base image and [1] being the final layer. */
      layerInfo?: Layer[];
    }
    interface InTotoProvenance {
      /** required */
      builderConfig?: BuilderConfig;
      /** The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on. This is considered to be incomplete unless metadata.completeness.materials is true. Unset or null is equivalent to empty. */
      materials?: string[];
      metadata?: Metadata;
      /** Identifies the configuration used for the build. When combined with materials, this SHOULD fully describe the build, such that re-running this recipe results in bit-for-bit identical output (if the build is reproducible). required */
      recipe?: Recipe;
    }
    interface InTotoSlsaProvenanceV1 {
      /** InToto spec defined at https://github.com/in-toto/attestation/tree/main/spec#statement */
      _type?: string;
      predicate?: SlsaProvenanceV1;
      predicateType?: string;
      subject?: Subject[];
    }
    interface InTotoStatement {
      /** Always `https://in-toto.io/Statement/v0.1`. */
      _type?: string;
      /** `https://slsa.dev/provenance/v0.1` for SlsaProvenance. */
      predicateType?: string;
      provenance?: InTotoProvenance;
      slsaProvenance?: SlsaProvenance;
      slsaProvenanceZeroTwo?: SlsaProvenanceZeroTwo;
      subject?: Subject[];
    }
    interface Justification {
      /** Additional details on why this justification was chosen. */
      details?: string;
      /** The justification type for this vulnerability. */
      justificationType?: string;
    }
    interface Jwt {
      /** The compact encoding of a JWS, which is always three base64 encoded strings joined by periods. For details, see: https://tools.ietf.org/html/rfc7515.html#section-3.1 */
      compactJwt?: string;
    }
    interface KnowledgeBase {
      /** The KB name (generally of the form KB[0-9]+ (e.g., KB123456)). */
      name?: string;
      /** A link to the KB in the [Windows update catalog] (https://www.catalog.update.microsoft.com/). */
      url?: string;
    }
    interface Layer {
      /** The recovered arguments to the Dockerfile directive. */
      arguments?: string;
      /** Required. The recovered Dockerfile directive used to construct this layer. See https://docs.docker.com/engine/reference/builder/ for more information. */
      directive?: string;
    }
    interface LayerDetails {
      /** The base images the layer is found within. */
      baseImages?: BaseImage[];
      /** The layer chain ID (sha256 hash) of the layer in the container image. https://github.com/opencontainers/image-spec/blob/main/config.md#layer-chainid */
      chainId?: string;
      /** The layer build command that was used to build the layer. This may not be found in all layers depending on how the container image is built. */
      command?: string;
      /** The diff ID (typically a sha256 hash) of the layer in the container image. */
      diffId?: string;
      /** The index of the layer in the container image. */
      index?: number;
    }
    interface License {
      /** Comments */
      comments?: string;
      /** Often a single license can be used to represent the licensing terms. Sometimes it is necessary to include a choice of one or more licenses or some combination of license identifiers. Examples: "LGPL-2.1-only OR MIT", "LGPL-2.1-only AND MIT", "GPL-2.0-or-later WITH Bison-exception-2.2". */
      expression?: string;
    }
    interface ListNoteOccurrencesResponse {
      /** Token to provide to skip to a particular spot in the list. */
      nextPageToken?: string;
      /** The occurrences attached to the specified note. */
      occurrences?: Occurrence[];
    }
    interface ListNotesResponse {
      /** The next pagination token in the list response. It should be used as `page_token` for the following request. An empty value means no more results. */
      nextPageToken?: string;
      /** The notes requested. */
      notes?: Note[];
      /** Unordered list. Unreachable regions. Populated for requests from the global region when `return_partial_success` is set. Format: `projects/[PROJECT_ID]/locations/[LOCATION]` */
      unreachable?: string[];
    }
    interface ListOccurrencesResponse {
      /** The next pagination token in the list response. It should be used as `page_token` for the following request. An empty value means no more results. */
      nextPageToken?: string;
      /** The occurrences requested. */
      occurrences?: Occurrence[];
      /** Unordered list. Unreachable regions. Populated for requests from the global region when `return_partial_success` is set. Format: `projects/[PROJECT_ID]/locations/[LOCATION]` */
      unreachable?: string[];
    }
    interface Location {
      /** Deprecated. The CPE URI in [CPE format](https://cpe.mitre.org/specification/) */
      cpeUri?: string;
      /** The path from which we gathered that this package/version is installed. */
      path?: string;
      /** Deprecated. The version installed at this location. */
      version?: Version;
    }
    interface Material {
      digest?: {[P in string]: string};
      uri?: string;
    }
    interface Metadata {
      /** The timestamp of when the build completed. */
      buildFinishedOn?: string;
      /** Identifies the particular build invocation, which can be useful for finding associated logs or other ad-hoc analysis. The value SHOULD be globally unique, per in-toto Provenance spec. */
      buildInvocationId?: string;
      /** The timestamp of when the build started. */
      buildStartedOn?: string;
      /** Indicates that the builder claims certain fields in this message to be complete. */
      completeness?: Completeness;
      /** If true, the builder claims that running the recipe on materials will produce bit-for-bit identical output. */
      reproducible?: boolean;
    }
    interface NonCompliantFile {
      /** Command to display the non-compliant files. */
      displayCommand?: string;
      /** Empty if `display_command` is set. */
      path?: string;
      /** Explains why a file is non compliant for a CIS check. */
      reason?: string;
    }
    interface Note {
      /** A note describing an attestation role. */
      attestation?: AttestationNote;
      /** A note describing build provenance for a verifiable build. */
      build?: BuildNote;
      /** A note describing a compliance check. */
      compliance?: ComplianceNote;
      /** Output only. The time this note was created. This field can be used as a filter in list requests. */
      createTime?: string;
      /** A note describing something that can be deployed. */
      deployment?: DeploymentNote;
      /** A note describing the initial analysis of a resource. */
      discovery?: DiscoveryNote;
      /** A note describing a dsse attestation note. */
      dsseAttestation?: DSSEAttestationNote;
      /** Time of expiration for this note. Empty if note does not expire. */
      expirationTime?: string;
      /** A note describing a base image. */
      image?: ImageNote;
      /** Output only. The type of analysis. This field can be used as a filter in list requests. */
      kind?: string;
      /** A detailed description of this note. */
      longDescription?: string;
      /** Output only. The name of the note in the form of `projects/[PROVIDER_ID]/notes/[NOTE_ID]`. */
      name?: string;
      /** A note describing a package hosted by various package managers. */
      package?: PackageNote;
      /** Other notes related to this note. */
      relatedNoteNames?: string[];
      /** URLs associated with this note. */
      relatedUrl?: RelatedUrl[];
      /** A note describing an SBOM reference. */
      sbomReference?: SBOMReferenceNote;
      /** A note describing a secret. */
      secret?: any;
      /** A one sentence description of this note. */
      shortDescription?: string;
      /** Output only. The time this note was last updated. This field can be used as a filter in list requests. */
      updateTime?: string;
      /** A note describing available package upgrades. */
      upgrade?: UpgradeNote;
      /** A note describing a package vulnerability. */
      vulnerability?: VulnerabilityNote;
      /** A note describing a vulnerability assessment. */
      vulnerabilityAssessment?: VulnerabilityAssessmentNote;
    }
    interface Occurrence {
      /** Describes an attestation of an artifact. */
      attestation?: AttestationOccurrence;
      /** Describes a verifiable build. */
      build?: BuildOccurrence;
      /** Describes a compliance violation on a linked resource. */
      compliance?: ComplianceOccurrence;
      /** Output only. The time this occurrence was created. */
      createTime?: string;
      /** Describes the deployment of an artifact on a runtime. */
      deployment?: DeploymentOccurrence;
      /** Describes when a resource was discovered. */
      discovery?: DiscoveryOccurrence;
      /** Describes an attestation of an artifact using dsse. */
      dsseAttestation?: DSSEAttestationOccurrence;
      /** https://github.com/secure-systems-lab/dsse */
      envelope?: Envelope;
      /** Describes how this resource derives from the basis in the associated note. */
      image?: ImageOccurrence;
      /** Output only. This explicitly denotes which of the occurrence details are specified. This field can be used as a filter in list requests. */
      kind?: string;
      /** Output only. The name of the occurrence in the form of `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`. */
      name?: string;
      /** Required. Immutable. The analysis note associated with this occurrence, in the form of `projects/[PROVIDER_ID]/notes/[NOTE_ID]`. This field can be used as a filter in list requests. */
      noteName?: string;
      /** Describes the installation of a package on the linked resource. */
      package?: PackageOccurrence;
      /** A description of actions that can be taken to remedy the note. */
      remediation?: string;
      /** Required. Immutable. A URI that represents the resource for which the occurrence applies. For example, `https://gcr.io/project/image@sha256:123abc` for a Docker image. */
      resourceUri?: string;
      /** Describes a specific SBOM reference occurrences. */
      sbomReference?: SBOMReferenceOccurrence;
      /** Describes a secret. */
      secret?: SecretOccurrence;
      /** Output only. The time this occurrence was last updated. */
      updateTime?: string;
      /** Describes an available package upgrade on the linked resource. */
      upgrade?: UpgradeOccurrence;
      /** Describes a security vulnerability. */
      vulnerability?: VulnerabilityOccurrence;
    }
    interface PackageIssue {
      /** Required. The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability was found in. */
      affectedCpeUri?: string;
      /** Required. The package this vulnerability was found in. */
      affectedPackage?: string;
      /** Required. The version of the package that is installed on the resource affected by this vulnerability. */
      affectedVersion?: Version;
      /** Output only. The distro or language system assigned severity for this vulnerability when that is available and note provider assigned severity when it is not available. */
      effectiveSeverity?: string;
      /** The location at which this package was found. */
      fileLocation?: GrafeasV1FileLocation[];
      /** Output only. Whether a fix is available for this package. */
      fixAvailable?: boolean;
      /** The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability was fixed in. It is possible for this to be different from the affected_cpe_uri. */
      fixedCpeUri?: string;
      /** The package this vulnerability was fixed in. It is possible for this to be different from the affected_package. */
      fixedPackage?: string;
      /** Required. The version of the package this vulnerability was fixed in. Setting this to VersionKind.MAXIMUM means no fix is yet available. */
      fixedVersion?: Version;
      /** The type of package (e.g. OS, MAVEN, GO). */
      packageType?: string;
    }
    interface PackageNote {
      /** The CPU architecture for which packages in this distribution channel were built. Architecture will be blank for language packages. */
      architecture?: string;
      /** The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package. The cpe_uri will be blank for language packages. */
      cpeUri?: string;
      /** The description of this package. */
      description?: string;
      /** Hash value, typically a file digest, that allows unique identification a specific package. */
      digest?: Digest[];
      /** Deprecated. The various channels by which a package is distributed. */
      distribution?: Distribution[];
      /** Licenses that have been declared by the authors of the package. */
      license?: License;
      /** A freeform text denoting the maintainer of this package. */
      maintainer?: string;
      /** Required. Immutable. The name of the package. */
      name?: string;
      /** The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.). */
      packageType?: string;
      /** The homepage for this package. */
      url?: string;
      /** The version of the package. */
      version?: Version;
    }
    interface PackageOccurrence {
      /** Output only. The CPU architecture for which packages in this distribution channel were built. Architecture will be blank for language packages. */
      architecture?: string;
      /** Output only. The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package. The cpe_uri will be blank for language packages. */
      cpeUri?: string;
      /** Licenses that have been declared by the authors of the package. */
      license?: License;
      /** All of the places within the filesystem versions of this package have been found. */
      location?: Location[];
      /** Required. Output only. The name of the installed package. */
      name?: string;
      /** Output only. The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.). */
      packageType?: string;
      /** Output only. The version of the package. */
      version?: Version;
    }
    interface Policy {
      /** Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another 1,450 principals to the `bindings` in the `Policy`. */
      bindings?: Binding[];
      /** `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. */
      etag?: string;
      /** Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). */
      version?: number;
    }
    interface Product {
      /** Contains a URI which is vendor-specific. Example: The artifact repository URL of an image. */
      genericUri?: string;
      /** Token that identifies a product so that it can be referred to from other parts in the document. There is no predefined format as long as it uniquely identifies a group in the context of the current document. */
      id?: string;
      /** Name of the product. */
      name?: string;
    }
    interface ProjectRepoId {
      /** The ID of the project. */
      projectId?: string;
      /** The name of the repo. Leave empty for the default repo. */
      repoName?: string;
    }
    interface ProvenanceBuilder {
      builderDependencies?: ResourceDescriptor[];
      id?: string;
      version?: {[P in string]: string};
    }
    interface Publisher {
      /** Provides information about the authority of the issuing party to release the document, in particular, the party's constituency and responsibilities or other obligations. */
      issuingAuthority?: string;
      /** Name of the publisher. Examples: 'Google', 'Google Cloud Platform'. */
      name?: string;
      /** The context or namespace. Contains a URL which is under control of the issuing party and can be used as a globally unique identifier for that issuing party. Example: https://csaf.io */
      publisherNamespace?: string;
    }
    interface Recipe {
      /** Collection of all external inputs that influenced the build on top of recipe.definedInMaterial and recipe.entryPoint. For example, if the recipe type were "make", then this might be the flags passed to make aside from the target, which is captured in recipe.entryPoint. Since the arguments field can greatly vary in structure, depending on the builder and recipe type, this is of form "Any". */
      arguments?: Array<{[P in string]: any}>;
      /** Index in materials containing the recipe steps that are not implied by recipe.type. For example, if the recipe type were "make", then this would point to the source containing the Makefile, not the make program itself. Set to -1 if the recipe doesn't come from a material, as zero is default unset value for int64. */
      definedInMaterial?: string;
      /** String identifying the entry point into the build. This is often a path to a configuration file and/or a target label within that file. The syntax and meaning are defined by recipe.type. For example, if the recipe type were "make", then this would reference the directory in which to run make as well as which target to use. */
      entryPoint?: string;
      /** Any other builder-controlled inputs necessary for correctly evaluating the recipe. Usually only needed for reproducing the build but not evaluated as part of policy. Since the environment field can greatly vary in structure, depending on the builder and recipe type, this is of form "Any". */
      environment?: Array<{[P in string]: any}>;
      /** URI indicating what type of recipe was performed. It determines the meaning of recipe.entryPoint, recipe.arguments, recipe.environment, and materials. */
      type?: string;
    }
    interface RelatedUrl {
      /** Label to describe usage of the URL. */
      label?: string;
      /** Specific URL associated with the resource. */
      url?: string;
    }
    interface Remediation {
      /** Contains a comprehensive human-readable discussion of the remediation. */
      details?: string;
      /** The type of remediation that can be applied. */
      remediationType?: string;
      /** Contains the URL where to obtain the remediation. */
      remediationUri?: RelatedUrl;
    }
    interface RepoId {
      /** A combination of a project ID and a repo name. */
      projectRepoId?: ProjectRepoId;
      /** A server-assigned, globally unique identifier. */
      uid?: string;
    }
    interface ResourceDescriptor {
      annotations?: {[P in string]: any};
      content?: string;
      digest?: {[P in string]: string};
      downloadLocation?: string;
      mediaType?: string;
      name?: string;
      uri?: string;
    }
    interface Risk {
      /** CISA maintains the authoritative source of vulnerabilities that have been exploited in the wild. */
      cisaKev?: CISAKnownExploitedVulnerabilities;
      /** The Exploit Prediction Scoring System (EPSS) estimates the likelihood (probability) that a software vulnerability will be exploited in the wild. */
      epss?: ExploitPredictionScoringSystem;
    }
    interface RunDetails {
      builder?: ProvenanceBuilder;
      byproducts?: ResourceDescriptor[];
      metadata?: BuildMetadata;
    }
    interface SbomReferenceIntotoPayload {
      /** Identifier for the schema of the Statement. */
      _type?: string;
      /** Additional parameters of the Predicate. Includes the actual data about the SBOM. */
      predicate?: SbomReferenceIntotoPredicate;
      /** URI identifying the type of the Predicate. */
      predicateType?: string;
      /** Set of software artifacts that the attestation applies to. Each element represents a single software artifact. */
      subject?: Subject[];
    }
    interface SbomReferenceIntotoPredicate {
      /** A map of algorithm to digest of the contents of the SBOM. */
      digest?: {[P in string]: string};
      /** The location of the SBOM. */
      location?: string;
      /** The mime type of the SBOM. */
      mimeType?: string;
      /** The person or system referring this predicate to the consumer. */
      referrerId?: string;
    }
    interface SBOMReferenceNote {
      /** The format that SBOM takes. E.g. may be spdx, cyclonedx, etc... */
      format?: string;
      /** The version of the format that the SBOM takes. E.g. if the format is spdx, the version may be 2.3. */
      version?: string;
    }
    interface SBOMReferenceOccurrence {
      /** The actual payload that contains the SBOM reference data. */
      payload?: SbomReferenceIntotoPayload;
      /** The kind of payload that SbomReferenceIntotoPayload takes. Since it's in the intoto format, this value is expected to be 'application/vnd.in-toto+json'. */
      payloadType?: string;
      /** The signatures over the payload. */
      signatures?: EnvelopeSignature[];
    }
    interface SBOMStatus {
      /** If there was an error generating an SBOM, this will indicate what that error was. */
      error?: string;
      /** The progress of the SBOM generation. */
      sbomState?: string;
    }
    interface SecretLocation {
      /** The secret is found from a file. */
      fileLocation?: GrafeasV1FileLocation;
    }
    interface SecretNote {}
    interface SecretOccurrence {
      /** Required. Type of secret. */
      kind?: string;
      /** Optional. Locations where the secret is detected. */
      locations?: SecretLocation[];
      /** Optional. Status of the secret. */
      statuses?: SecretStatus[];
    }
    interface SecretStatus {
      /** Optional. Optional message about the status code. */
      message?: string;
      /** Optional. The status of the secret. */
      status?: string;
      /** Optional. The time the secret status was last updated. */
      updateTime?: string;
    }
    interface SetIamPolicyRequest {
      /** REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Google Cloud services (such as Projects) might reject them. */
      policy?: Policy;
    }
    interface Signature {
      /** The identifier for the public key that verifies this signature. * The `public_key_id` is required. * The `public_key_id` SHOULD be an RFC3986 conformant URI. * When possible, the `public_key_id` SHOULD be an immutable reference, such as a cryptographic digest. Examples of valid `public_key_id`s: OpenPGP V4 public key fingerprint: * "openpgp4fpr:74FAF3B861BDA0870C7B6DEF607E48D2A663AEEA" See https://www.iana.org/assignments/uri-schemes/prov/openpgp4fpr for more details on this scheme. RFC6920 digest-named SubjectPublicKeyInfo (digest of the DER serialization): * "ni:///sha-256;cD9o9Cq6LG3jD0iKXqEi_vdjJGecm_iXkbqVoScViaU" * "nih:///sha-256;703f68f42aba2c6de30f488a5ea122fef76324679c9bf89791ba95a1271589a5" */
      publicKeyId?: string;
      /** The content of the signature, an opaque bytestring. The payload that this signature verifies MUST be unambiguously provided with the Signature during verification. A wrapper message might provide the payload explicitly. Alternatively, a message might have a canonical serialization that can always be unambiguously computed to derive the payload. */
      signature?: string;
    }
    interface SlsaBuilder {
      id?: string;
    }
    interface SlsaCompleteness {
      /** If true, the builder claims that recipe.arguments is complete, meaning that all external inputs are properly captured in the recipe. */
      arguments?: boolean;
      /** If true, the builder claims that recipe.environment is claimed to be complete. */
      environment?: boolean;
      /** If true, the builder claims that materials are complete, usually through some controls to prevent network access. Sometimes called "hermetic". */
      materials?: boolean;
    }
    interface SlsaMetadata {
      /** The timestamp of when the build completed. */
      buildFinishedOn?: string;
      /** Identifies the particular build invocation, which can be useful for finding associated logs or other ad-hoc analysis. The value SHOULD be globally unique, per in-toto Provenance spec. */
      buildInvocationId?: string;
      /** The timestamp of when the build started. */
      buildStartedOn?: string;
      /** Indicates that the builder claims certain fields in this message to be complete. */
      completeness?: SlsaCompleteness;
      /** If true, the builder claims that running the recipe on materials will produce bit-for-bit identical output. */
      reproducible?: boolean;
    }
    interface SlsaProvenance {
      /** required */
      builder?: SlsaBuilder;
      /** The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on. This is considered to be incomplete unless metadata.completeness.materials is true. Unset or null is equivalent to empty. */
      materials?: Material[];
      metadata?: SlsaMetadata;
      /** Identifies the configuration used for the build. When combined with materials, this SHOULD fully describe the build, such that re-running this recipe results in bit-for-bit identical output (if the build is reproducible). required */
      recipe?: SlsaRecipe;
    }
    interface SlsaProvenanceV1 {
      buildDefinition?: BuildDefinition;
      runDetails?: RunDetails;
    }
    interface SlsaProvenanceZeroTwo {
      buildConfig?: {[P in string]: any};
      builder?: GrafeasV1SlsaProvenanceZeroTwoSlsaBuilder;
      buildType?: string;
      invocation?: GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation;
      materials?: GrafeasV1SlsaProvenanceZeroTwoSlsaMaterial[];
      metadata?: GrafeasV1SlsaProvenanceZeroTwoSlsaMetadata;
    }
    interface SlsaRecipe {
      /** Collection of all external inputs that influenced the build on top of recipe.definedInMaterial and recipe.entryPoint. For example, if the recipe type were "make", then this might be the flags passed to make aside from the target, which is captured in recipe.entryPoint. Depending on the recipe Type, the structure may be different. */
      arguments?: {[P in string]: any};
      /** Index in materials containing the recipe steps that are not implied by recipe.type. For example, if the recipe type were "make", then this would point to the source containing the Makefile, not the make program itself. Set to -1 if the recipe doesn't come from a material, as zero is default unset value for int64. */
      definedInMaterial?: string;
      /** String identifying the entry point into the build. This is often a path to a configuration file and/or a target label within that file. The syntax and meaning are defined by recipe.type. For example, if the recipe type were "make", then this would reference the directory in which to run make as well as which target to use. */
      entryPoint?: string;
      /** Any other builder-controlled inputs necessary for correctly evaluating the recipe. Usually only needed for reproducing the build but not evaluated as part of policy. Depending on the recipe Type, the structure may be different. */
      environment?: {[P in string]: any};
      /** URI indicating what type of recipe was performed. It determines the meaning of recipe.entryPoint, recipe.arguments, recipe.environment, and materials. */
      type?: string;
    }
    interface Source {
      /** If provided, some of the source code used for the build may be found in these locations, in the case where the source repository had multiple remotes or submodules. This list will not include the context specified in the context field. */
      additionalContexts?: SourceContext[];
      /** If provided, the input binary artifacts for the build came from this location. */
      artifactStorageSourceUri?: string;
      /** If provided, the source code used for the build came from this location. */
      context?: SourceContext;
      /** Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (.tar.gz), the FileHash will be for the single path to that file. */
      fileHashes?: {[P in string]: FileHashes};
    }
    interface SourceContext {
      /** A SourceContext referring to a revision in a Google Cloud Source Repo. */
      cloudRepo?: CloudRepoSourceContext;
      /** A SourceContext referring to a Gerrit project. */
      gerrit?: GerritSourceContext;
      /** A SourceContext referring to any third party Git repo (e.g., GitHub). */
      git?: GitSourceContext;
      /** Labels with user defined metadata. */
      labels?: {[P in string]: string};
    }
    interface Status {
      /** The status code, which should be an enum value of google.rpc.Code. */
      code?: number;
      /** A list of messages that carry the error details. There is a common set of message types for APIs to use. */
      details?: Array<{[P in string]: any}>;
      /** A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client. */
      message?: string;
    }
    interface StepResult {
      attestationContentName?: string;
      attestationType?: string;
      name?: string;
    }
    interface Subject {
      /** `"": ""` Algorithms can be e.g. sha256, sha512 See https://github.com/in-toto/attestation/blob/main/spec/field_types.md#DigestSet */
      digest?: {[P in string]: string};
      name?: string;
    }
    interface TestIamPermissionsRequest {
      /** The set of permissions to check for the `resource`. Permissions with wildcards (such as `*` or `storage.*`) are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions). */
      permissions?: string[];
    }
    interface TestIamPermissionsResponse {
      /** A subset of `TestPermissionsRequest.permissions` that the caller is allowed. */
      permissions?: string[];
    }
    interface TimeSpan {
      /** End of time span. */
      endTime?: string;
      /** Start of time span. */
      startTime?: string;
    }
    interface UpgradeDistribution {
      /** The operating system classification of this Upgrade, as specified by the upstream operating system upgrade feed. For Windows the classification is one of the category_ids listed at https://docs.microsoft.com/en-us/previous-versions/windows/desktop/ff357803(v=vs.85) */
      classification?: string;
      /** Required - The specific operating system this metadata applies to. See https://cpe.mitre.org/specification/. */
      cpeUri?: string;
      /** The cve tied to this Upgrade. */
      cve?: string[];
      /** The severity as specified by the upstream operating system. */
      severity?: string;
    }
    interface UpgradeNote {
      /** Metadata about the upgrade for each specific operating system. */
      distributions?: UpgradeDistribution[];
      /** Required for non-Windows OS. The package this Upgrade is for. */
      package?: string;
      /** Required for non-Windows OS. The version of the package in machine + human readable form. */
      version?: Version;
      /** Required for Windows OS. Represents the metadata about the Windows update. */
      windowsUpdate?: WindowsUpdate;
    }
    interface UpgradeOccurrence {
      /** Metadata about the upgrade for available for the specific operating system for the resource_url. This allows efficient filtering, as well as making it easier to use the occurrence. */
      distribution?: UpgradeDistribution;
      /** Required for non-Windows OS. The package this Upgrade is for. */
      package?: string;
      /** Required for non-Windows OS. The version of the package in a machine + human readable form. */
      parsedVersion?: Version;
      /** Required for Windows OS. Represents the metadata about the Windows update. */
      windowsUpdate?: WindowsUpdate;
    }
    interface Version {
      /** Used to correct mistakes in the version numbering scheme. */
      epoch?: number;
      /** Human readable version string. This string is of the form :- and is only set when kind is NORMAL. */
      fullName?: string;
      /** Whether this version is specifying part of an inclusive range. Grafeas does not have the capability to specify version ranges; instead we have fields that specify start version and end versions. At times this is insufficient - we also need to specify whether the version is included in the range or is excluded from the range. This boolean is expected to be set to true when the version is included in a range. */
      inclusive?: boolean;
      /** Required. Distinguishes between sentinel MIN/MAX versions and normal versions. */
      kind?: string;
      /** Required only when version kind is NORMAL. The main part of the version name. */
      name?: string;
      /** The iteration of the package build from the above version. */
      revision?: string;
    }
    interface VexAssessment {
      /** Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability. Deprecated: Use vulnerability_id instead to denote CVEs. */
      cve?: string;
      /** Contains information about the impact of this vulnerability, this will change with time. */
      impacts?: string[];
      /** Justification provides the justification when the state of the assessment if NOT_AFFECTED. */
      justification?: Justification;
      /** The VulnerabilityAssessment note from which this VexAssessment was generated. This will be of the form: `projects/[PROJECT_ID]/notes/[NOTE_ID]`. */
      noteName?: string;
      /** Holds a list of references associated with this vulnerability item and assessment. */
      relatedUris?: RelatedUrl[];
      /** Specifies details on how to handle (and presumably, fix) a vulnerability. */
      remediations?: Remediation[];
      /** Provides the state of this Vulnerability assessment. */
      state?: string;
      /** The vulnerability identifier for this Assessment. Will hold one of common identifiers e.g. CVE, GHSA etc. */
      vulnerabilityId?: string;
    }
    interface Volume {
      /** Name of the volume to mount. Volume names must be unique per build step and must be valid names for Docker volumes. Each named volume must be used by at least two build steps. */
      name?: string;
      /** Path at which to mount the volume. Paths must be absolute and cannot conflict with other volume paths on the same build step or with certain reserved volume paths. */
      path?: string;
    }
    interface VulnerabilityAssessmentNote {
      /** Represents a vulnerability assessment for the product. */
      assessment?: Assessment;
      /** Identifies the language used by this document, corresponding to IETF BCP 47 / RFC 5646. */
      languageCode?: string;
      /** A detailed description of this Vex. */
      longDescription?: string;
      /** The product affected by this vex. */
      product?: Product;
      /** Publisher details of this Note. */
      publisher?: Publisher;
      /** A one sentence description of this Vex. */
      shortDescription?: string;
      /** The title of the note. E.g. `Vex-Debian-11.4` */
      title?: string;
    }
    interface VulnerabilityNote {
      /** The CVSS score of this vulnerability. CVSS score is on a scale of 0 - 10 where 0 indicates low severity and 10 indicates high severity. */
      cvssScore?: number;
      /** The full description of the v2 CVSS for this vulnerability. */
      cvssV2?: CVSS;
      /** The full description of the CVSSv3 for this vulnerability. */
      cvssV3?: CVSSv3;
      /** CVSS version used to populate cvss_score and severity. */
      cvssVersion?: string;
      /** Details of all known distros and packages affected by this vulnerability. */
      details?: Detail[];
      /** The note provider assigned severity of this vulnerability. */
      severity?: string;
      /** The time this information was last changed at the source. This is an upstream timestamp from the underlying information source - e.g. Ubuntu security tracker. */
      sourceUpdateTime?: string;
      /** Windows details get their own format because the information format and model don't match a normal detail. Specifically Windows updates are done as patches, thus Windows vulnerabilities really are a missing package, rather than a package being at an incorrect version. */
      windowsDetails?: WindowsDetail[];
    }
    interface VulnerabilityOccurrence {
      /** Output only. The CVSS score of this vulnerability. CVSS score is on a scale of 0 - 10 where 0 indicates low severity and 10 indicates high severity. */
      cvssScore?: number;
      /** The cvss v2 score for the vulnerability. */
      cvssV2?: CVSS;
      /** The cvss v3 score for the vulnerability. */
      cvssv3?: CVSS;
      /** Output only. CVSS version used to populate cvss_score and severity. */
      cvssVersion?: string;
      /** The distro assigned severity for this vulnerability when it is available, otherwise this is the note provider assigned severity. When there are multiple PackageIssues for this vulnerability, they can have different effective severities because some might be provided by the distro while others are provided by the language ecosystem for a language pack. For this reason, it is advised to use the effective severity on the PackageIssue level. In the case where multiple PackageIssues have differing effective severities, this field should be the highest severity for any of the PackageIssues. */
      effectiveSeverity?: string;
      /** Occurrence-specific extra details about the vulnerability. */
      extraDetails?: string;
      /** Output only. Whether at least one of the affected packages has a fix available. */
      fixAvailable?: boolean;
      /** Output only. A detailed description of this vulnerability. */
      longDescription?: string;
      /** Required. The set of affected locations and their fixes (if available) within the associated resource. */
      packageIssue?: PackageIssue[];
      /** Output only. URLs related to this vulnerability. */
      relatedUrls?: RelatedUrl[];
      /** Risk information about the vulnerability, such as CISA, EPSS, etc. */
      risk?: Risk;
      /** Output only. The note provider assigned severity of this vulnerability. */
      severity?: string;
      /** Output only. A one sentence description of this vulnerability. */
      shortDescription?: string;
      /** The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.). */
      type?: string;
      vexAssessment?: VexAssessment;
    }
    interface VulnerabilityOccurrencesSummary {
      /** A listing by resource of the number of fixable and total vulnerabilities. */
      counts?: FixableTotalByDigest[];
      /** Unordered list. Unreachable regions. Populated for requests from the global region when `return_partial_success` is set. Format: `projects/[PROJECT_ID]/locations/[LOCATION]` */
      unreachable?: string[];
    }
    interface WindowsDetail {
      /** Required. The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability affects. */
      cpeUri?: string;
      /** The description of this vulnerability. */
      description?: string;
      /** Required. The names of the KBs which have hotfixes to mitigate this vulnerability. Note that there may be multiple hotfixes (and thus multiple KBs) that mitigate a given vulnerability. Currently any listed KBs presence is considered a fix. */
      fixingKbs?: KnowledgeBase[];
      /** Required. The name of this vulnerability. */
      name?: string;
    }
    interface WindowsUpdate {
      /** The list of categories to which the update belongs. */
      categories?: Category[];
      /** The localized description of the update. */
      description?: string;
      /** Required - The unique identifier for the update. */
      identity?: Identity;
      /** The Microsoft Knowledge Base article IDs that are associated with the update. */
      kbArticleIds?: string[];
      /** The last published timestamp of the update. */
      lastPublishedTimestamp?: string;
      /** The hyperlink to the support information for the update. */
      supportUrl?: string;
      /** The localized title of the update. */
      title?: string;
    }
    interface OccurrencesResource {
      /** Lists occurrences referencing the specified note. Provider projects can use this method to get all occurrences across consumer projects referencing the specified note. */
      list(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** The filter expression. */
        filter?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. The name of the note to list occurrences for in the form of `projects/[PROVIDER_ID]/notes/[NOTE_ID]`. */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Number of occurrences to return in the list. */
        pageSize?: number;
        /** Token to provide to skip to a particular spot in the list. */
        pageToken?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<ListNoteOccurrencesResponse>;
    }
    interface NotesResource {
      /** Creates new notes in batch. */
      batchCreate(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Required. The name of the project in the form of `projects/[PROJECT_ID]`, under which the notes are to be created. */
        parent: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: BatchCreateNotesRequest;
      }): Request<BatchCreateNotesResponse>;
      batchCreate(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Required. The name of the project in the form of `projects/[PROJECT_ID]`, under which the notes are to be created. */
          parent: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: BatchCreateNotesRequest,
      ): Request<BatchCreateNotesResponse>;
      /** Creates a new note. */
      create(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. The ID to use for this note. */
        noteId?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Required. The name of the project in the form of `projects/[PROJECT_ID]`, under which the note is to be created. */
        parent: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: Note;
      }): Request<Note>;
      create(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** Required. The ID to use for this note. */
          noteId?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Required. The name of the project in the form of `projects/[PROJECT_ID]`, under which the note is to be created. */
          parent: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: Note,
      ): Request<Note>;
      /** Deletes the specified note. */
      delete(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. The name of the note in the form of `projects/[PROVIDER_ID]/notes/[NOTE_ID]`. */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<{}>;
      /** Gets the specified note. */
      get(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. The name of the note in the form of `projects/[PROVIDER_ID]/notes/[NOTE_ID]`. */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<Note>;
      /** Gets the access control policy for a note or an occurrence resource. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a note or occurrence, respectively. The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for occurrences. */
      getIamPolicy(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** REQUIRED: The resource for which the policy is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field. */
          resource: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: GetIamPolicyRequest,
      ): Request<Policy>;
      /** Lists notes for the specified project. */
      list(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** The filter expression. */
        filter?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Number of notes to return in the list. Must be positive. Max allowed page size is 1000. If not specified, page size defaults to 20. */
        pageSize?: number;
        /** Token to provide to skip to a particular spot in the list. */
        pageToken?: string;
        /** Required. The name of the project to list notes for in the form of `projects/[PROJECT_ID]`. */
        parent: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** If set, the request will return all reachable Notes and report all unreachable regions in the `unreachable` field in the response. Only applicable for requests in the global region. */
        returnPartialSuccess?: boolean;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<ListNotesResponse>;
      /** Updates the specified note. */
      patch(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. The name of the note in the form of `projects/[PROVIDER_ID]/notes/[NOTE_ID]`. */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** The fields to update. */
        updateMask?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: Note;
      }): Request<Note>;
      patch(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** Required. The name of the note in the form of `projects/[PROVIDER_ID]/notes/[NOTE_ID]`. */
          name: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** The fields to update. */
          updateMask?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: Note,
      ): Request<Note>;
      /** Sets the access control policy on the specified note or occurrence. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a note or an occurrence, respectively. The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for occurrences. */
      setIamPolicy(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** REQUIRED: The resource for which the policy is being specified. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field. */
          resource: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: SetIamPolicyRequest,
      ): Request<Policy>;
      /** Returns the permissions that a caller has on the specified note or occurrence. Requires list permission on the project (for example, `containeranalysis.notes.list`). The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for occurrences. */
      testIamPermissions(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** REQUIRED: The resource for which the policy detail is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field. */
          resource: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: TestIamPermissionsRequest,
      ): Request<TestIamPermissionsResponse>;
      occurrences: OccurrencesResource;
    }
    interface OccurrencesResource {
      /** Creates new occurrences in batch. */
      batchCreate(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Required. The name of the project in the form of `projects/[PROJECT_ID]`, under which the occurrences are to be created. */
        parent: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: BatchCreateOccurrencesRequest;
      }): Request<BatchCreateOccurrencesResponse>;
      batchCreate(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Required. The name of the project in the form of `projects/[PROJECT_ID]`, under which the occurrences are to be created. */
          parent: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: BatchCreateOccurrencesRequest,
      ): Request<BatchCreateOccurrencesResponse>;
      /** Creates a new occurrence. */
      create(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Required. The name of the project in the form of `projects/[PROJECT_ID]`, under which the occurrence is to be created. */
        parent: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: Occurrence;
      }): Request<Occurrence>;
      create(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Required. The name of the project in the form of `projects/[PROJECT_ID]`, under which the occurrence is to be created. */
          parent: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: Occurrence,
      ): Request<Occurrence>;
      /** Deletes the specified occurrence. For example, use this method to delete an occurrence when the occurrence is no longer applicable for the given resource. */
      delete(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. The name of the occurrence in the form of `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`. */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<{}>;
      /** Gets the specified occurrence. */
      get(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. The name of the occurrence in the form of `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`. */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<Occurrence>;
      /** Gets the access control policy for a note or an occurrence resource. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a note or occurrence, respectively. The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for occurrences. */
      getIamPolicy(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** REQUIRED: The resource for which the policy is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field. */
          resource: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: GetIamPolicyRequest,
      ): Request<Policy>;
      /** Gets the note attached to the specified occurrence. Consumer projects can use this method to get a note that belongs to a provider project. */
      getNotes(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. The name of the occurrence in the form of `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`. */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<Note>;
      /** Gets a summary of the number and severity of occurrences. */
      getVulnerabilitySummary(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** The filter expression. */
        filter?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Required. The name of the project to get a vulnerability summary for in the form of `projects/[PROJECT_ID]`. */
        parent: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** If set, the request will return all reachable occurrence summaries and report all unreachable regions in the `unreachable` field in the response. Only applicable for requests in the global region. */
        returnPartialSuccess?: boolean;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<VulnerabilityOccurrencesSummary>;
      /** Lists occurrences for the specified project. */
      list(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** The filter expression. */
        filter?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Number of occurrences to return in the list. Must be positive. Max allowed page size is 1000. If not specified, page size defaults to 20. */
        pageSize?: number;
        /** Token to provide to skip to a particular spot in the list. */
        pageToken?: string;
        /** Required. The name of the project to list occurrences for in the form of `projects/[PROJECT_ID]`. */
        parent: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** If set, the request will return all reachable Occurrences and report all unreachable regions in the `unreachable` field in the response. Only applicable for requests in the global region. */
        returnPartialSuccess?: boolean;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<ListOccurrencesResponse>;
      /** Updates the specified occurrence. */
      patch(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. The name of the occurrence in the form of `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`. */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** The fields to update. */
        updateMask?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: Occurrence;
      }): Request<Occurrence>;
      patch(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** Required. The name of the occurrence in the form of `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`. */
          name: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** The fields to update. */
          updateMask?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: Occurrence,
      ): Request<Occurrence>;
      /** Sets the access control policy on the specified note or occurrence. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a note or an occurrence, respectively. The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for occurrences. */
      setIamPolicy(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** REQUIRED: The resource for which the policy is being specified. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field. */
          resource: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: SetIamPolicyRequest,
      ): Request<Policy>;
      /** Returns the permissions that a caller has on the specified note or occurrence. Requires list permission on the project (for example, `containeranalysis.notes.list`). The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for occurrences. */
      testIamPermissions(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** REQUIRED: The resource for which the policy detail is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field. */
          resource: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: TestIamPermissionsRequest,
      ): Request<TestIamPermissionsResponse>;
    }
    interface ResourcesResource {
      /** Generates an SBOM for the given resource. */
      exportSBOM(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. The name of the resource in the form of `projects/[PROJECT_ID]/resources/[RESOURCE_URL]`. */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: ExportSBOMRequest;
      }): Request<ExportSBOMResponse>;
      exportSBOM(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** Required. The name of the resource in the form of `projects/[PROJECT_ID]/resources/[RESOURCE_URL]`. */
          name: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: ExportSBOMRequest,
      ): Request<ExportSBOMResponse>;
    }
    interface LocationsResource {
      notes: NotesResource;
      occurrences: OccurrencesResource;
      resources: ResourcesResource;
    }
    interface OccurrencesResource {
      /** Lists occurrences referencing the specified note. Provider projects can use this method to get all occurrences across consumer projects referencing the specified note. */
      list(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** The filter expression. */
        filter?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. The name of the note to list occurrences for in the form of `projects/[PROVIDER_ID]/notes/[NOTE_ID]`. */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Number of occurrences to return in the list. */
        pageSize?: number;
        /** Token to provide to skip to a particular spot in the list. */
        pageToken?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<ListNoteOccurrencesResponse>;
    }
    interface NotesResource {
      /** Creates new notes in batch. */
      batchCreate(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Required. The name of the project in the form of `projects/[PROJECT_ID]`, under which the notes are to be created. */
        parent: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: BatchCreateNotesRequest;
      }): Request<BatchCreateNotesResponse>;
      batchCreate(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Required. The name of the project in the form of `projects/[PROJECT_ID]`, under which the notes are to be created. */
          parent: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: BatchCreateNotesRequest,
      ): Request<BatchCreateNotesResponse>;
      /** Creates a new note. */
      create(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. The ID to use for this note. */
        noteId?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Required. The name of the project in the form of `projects/[PROJECT_ID]`, under which the note is to be created. */
        parent: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: Note;
      }): Request<Note>;
      create(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** Required. The ID to use for this note. */
          noteId?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Required. The name of the project in the form of `projects/[PROJECT_ID]`, under which the note is to be created. */
          parent: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: Note,
      ): Request<Note>;
      /** Deletes the specified note. */
      delete(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. The name of the note in the form of `projects/[PROVIDER_ID]/notes/[NOTE_ID]`. */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<{}>;
      /** Gets the specified note. */
      get(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. The name of the note in the form of `projects/[PROVIDER_ID]/notes/[NOTE_ID]`. */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<Note>;
      /** Gets the access control policy for a note or an occurrence resource. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a note or occurrence, respectively. The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for occurrences. */
      getIamPolicy(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** REQUIRED: The resource for which the policy is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field. */
          resource: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: GetIamPolicyRequest,
      ): Request<Policy>;
      /** Lists notes for the specified project. */
      list(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** The filter expression. */
        filter?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Number of notes to return in the list. Must be positive. Max allowed page size is 1000. If not specified, page size defaults to 20. */
        pageSize?: number;
        /** Token to provide to skip to a particular spot in the list. */
        pageToken?: string;
        /** Required. The name of the project to list notes for in the form of `projects/[PROJECT_ID]`. */
        parent: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** If set, the request will return all reachable Notes and report all unreachable regions in the `unreachable` field in the response. Only applicable for requests in the global region. */
        returnPartialSuccess?: boolean;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<ListNotesResponse>;
      /** Updates the specified note. */
      patch(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. The name of the note in the form of `projects/[PROVIDER_ID]/notes/[NOTE_ID]`. */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** The fields to update. */
        updateMask?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: Note;
      }): Request<Note>;
      patch(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** Required. The name of the note in the form of `projects/[PROVIDER_ID]/notes/[NOTE_ID]`. */
          name: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** The fields to update. */
          updateMask?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: Note,
      ): Request<Note>;
      /** Sets the access control policy on the specified note or occurrence. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a note or an occurrence, respectively. The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for occurrences. */
      setIamPolicy(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** REQUIRED: The resource for which the policy is being specified. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field. */
          resource: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: SetIamPolicyRequest,
      ): Request<Policy>;
      /** Returns the permissions that a caller has on the specified note or occurrence. Requires list permission on the project (for example, `containeranalysis.notes.list`). The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for occurrences. */
      testIamPermissions(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** REQUIRED: The resource for which the policy detail is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field. */
          resource: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: TestIamPermissionsRequest,
      ): Request<TestIamPermissionsResponse>;
      occurrences: OccurrencesResource;
    }
    interface OccurrencesResource {
      /** Creates new occurrences in batch. */
      batchCreate(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Required. The name of the project in the form of `projects/[PROJECT_ID]`, under which the occurrences are to be created. */
        parent: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: BatchCreateOccurrencesRequest;
      }): Request<BatchCreateOccurrencesResponse>;
      batchCreate(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Required. The name of the project in the form of `projects/[PROJECT_ID]`, under which the occurrences are to be created. */
          parent: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: BatchCreateOccurrencesRequest,
      ): Request<BatchCreateOccurrencesResponse>;
      /** Creates a new occurrence. */
      create(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Required. The name of the project in the form of `projects/[PROJECT_ID]`, under which the occurrence is to be created. */
        parent: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: Occurrence;
      }): Request<Occurrence>;
      create(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Required. The name of the project in the form of `projects/[PROJECT_ID]`, under which the occurrence is to be created. */
          parent: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: Occurrence,
      ): Request<Occurrence>;
      /** Deletes the specified occurrence. For example, use this method to delete an occurrence when the occurrence is no longer applicable for the given resource. */
      delete(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. The name of the occurrence in the form of `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`. */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<{}>;
      /** Gets the specified occurrence. */
      get(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. The name of the occurrence in the form of `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`. */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<Occurrence>;
      /** Gets the access control policy for a note or an occurrence resource. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a note or occurrence, respectively. The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for occurrences. */
      getIamPolicy(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** REQUIRED: The resource for which the policy is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field. */
          resource: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: GetIamPolicyRequest,
      ): Request<Policy>;
      /** Gets the note attached to the specified occurrence. Consumer projects can use this method to get a note that belongs to a provider project. */
      getNotes(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. The name of the occurrence in the form of `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`. */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<Note>;
      /** Gets a summary of the number and severity of occurrences. */
      getVulnerabilitySummary(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** The filter expression. */
        filter?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Required. The name of the project to get a vulnerability summary for in the form of `projects/[PROJECT_ID]`. */
        parent: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** If set, the request will return all reachable occurrence summaries and report all unreachable regions in the `unreachable` field in the response. Only applicable for requests in the global region. */
        returnPartialSuccess?: boolean;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<VulnerabilityOccurrencesSummary>;
      /** Lists occurrences for the specified project. */
      list(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** The filter expression. */
        filter?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Number of occurrences to return in the list. Must be positive. Max allowed page size is 1000. If not specified, page size defaults to 20. */
        pageSize?: number;
        /** Token to provide to skip to a particular spot in the list. */
        pageToken?: string;
        /** Required. The name of the project to list occurrences for in the form of `projects/[PROJECT_ID]`. */
        parent: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** If set, the request will return all reachable Occurrences and report all unreachable regions in the `unreachable` field in the response. Only applicable for requests in the global region. */
        returnPartialSuccess?: boolean;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<ListOccurrencesResponse>;
      /** Updates the specified occurrence. */
      patch(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. The name of the occurrence in the form of `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`. */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** The fields to update. */
        updateMask?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: Occurrence;
      }): Request<Occurrence>;
      patch(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** Required. The name of the occurrence in the form of `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`. */
          name: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** The fields to update. */
          updateMask?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: Occurrence,
      ): Request<Occurrence>;
      /** Sets the access control policy on the specified note or occurrence. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a note or an occurrence, respectively. The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for occurrences. */
      setIamPolicy(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** REQUIRED: The resource for which the policy is being specified. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field. */
          resource: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: SetIamPolicyRequest,
      ): Request<Policy>;
      /** Returns the permissions that a caller has on the specified note or occurrence. Requires list permission on the project (for example, `containeranalysis.notes.list`). The resource takes the format `projects/[PROJECT_ID]/notes/[NOTE_ID]` for notes and `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]` for occurrences. */
      testIamPermissions(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** REQUIRED: The resource for which the policy detail is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field. */
          resource: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: TestIamPermissionsRequest,
      ): Request<TestIamPermissionsResponse>;
    }
    interface ResourcesResource {
      /** Generates an SBOM for the given resource. */
      exportSBOM(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. The name of the resource in the form of `projects/[PROJECT_ID]/resources/[RESOURCE_URL]`. */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: ExportSBOMRequest;
      }): Request<ExportSBOMResponse>;
      exportSBOM(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** Required. The name of the resource in the form of `projects/[PROJECT_ID]/resources/[RESOURCE_URL]`. */
          name: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: ExportSBOMRequest,
      ): Request<ExportSBOMResponse>;
    }
    interface ProjectsResource {
      locations: LocationsResource;
      notes: NotesResource;
      occurrences: OccurrencesResource;
      resources: ResourcesResource;
    }

    const projects: ProjectsResource;
  }
}
