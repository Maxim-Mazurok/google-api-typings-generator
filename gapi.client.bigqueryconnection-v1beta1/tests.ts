/* This is stub file for gapi.client.bigqueryconnection-v1beta1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20230618

gapi.load('client', async () => {
    /** now we can use gapi.client */

    await gapi.client.load('https://bigqueryconnection.googleapis.com/$discovery/rest?version=v1beta1');
    /** now we can use gapi.client.bigqueryconnection */

    /** don't forget to authenticate your client before sending any request to resources: */
    /** declare client_id registered in Google Developers Console */
    const client_id = '<<PUT YOUR CLIENT ID HERE>>';
    const scope = [
        /** View and manage your data in Google BigQuery and see the email address for your Google Account */
        'https://www.googleapis.com/auth/bigquery',
        /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
        'https://www.googleapis.com/auth/cloud-platform',
    ];
    const immediate = false;
    gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
        if (authResult && !authResult.error) {
            /** handle successful authorization */
            run();
        } else {
            /** handle authorization error */
        }
    });

    async function run() {
        /** Creates a new connection. */
        await gapi.client.bigqueryconnection.projects.locations.connections.create({
            connectionId: "Test string",
            parent: "Test string",
        }, {
            cloudSql: {
                credential: {
                    password: "Test string",
                    username: "Test string",
                },
                database: "Test string",
                instanceId: "Test string",
                serviceAccountId: "Test string",
                type: "Test string",
            },
            creationTime: "Test string",
            description: "Test string",
            friendlyName: "Test string",
            hasCredential: true,
            lastModifiedTime: "Test string",
            name: "Test string",
        });
        /** Deletes connection and associated credential. */
        await gapi.client.bigqueryconnection.projects.locations.connections.delete({
            name: "Test string",
        });
        /** Returns specified connection. */
        await gapi.client.bigqueryconnection.projects.locations.connections.get({
            name: "Test string",
        });
        /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
        await gapi.client.bigqueryconnection.projects.locations.connections.getIamPolicy({
            resource: "Test string",
        }, {
            options: {
                requestedPolicyVersion: 42,
            },
        });
        /** Returns a list of connections in the given project. */
        await gapi.client.bigqueryconnection.projects.locations.connections.list({
            maxResults: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified connection. For security reasons, also resets credential if connection properties are in the update field mask. */
        await gapi.client.bigqueryconnection.projects.locations.connections.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            cloudSql: {
                credential: {
                    password: "Test string",
                    username: "Test string",
                },
                database: "Test string",
                instanceId: "Test string",
                serviceAccountId: "Test string",
                type: "Test string",
            },
            creationTime: "Test string",
            description: "Test string",
            friendlyName: "Test string",
            hasCredential: true,
            lastModifiedTime: "Test string",
            name: "Test string",
        });
        /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
        await gapi.client.bigqueryconnection.projects.locations.connections.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                auditConfigs: [
                    {
                        auditLogConfigs: [
                            {
                                exemptedMembers: [
                                    "Test string"
                                ],
                                logType: "Test string",
                            }
                        ],
                        service: "Test string",
                    }
                ],
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"
                        ],
                        role: "Test string",
                    }
                ],
                etag: "Test string",
                version: 42,
            },
            updateMask: "Test string",
        });
        /**
         * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This
         * operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
         */
        await gapi.client.bigqueryconnection.projects.locations.connections.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"
            ],
        });
        /** Sets the credential for the specified connection. */
        await gapi.client.bigqueryconnection.projects.locations.connections.updateCredential({
            name: "Test string",
        }, {
            cloudSql: {
                password: "Test string",
                username: "Test string",
            },
        });
    }
});
