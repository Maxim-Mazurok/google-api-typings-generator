/* Type definitions for non-npm package Google Analytics Data API v1alpha 1.0 */
// Project: https://developers.google.com/analytics/devguides/reporting/data/v1/
// Definitions by: Maxim Mazurok <https://github.com/Maxim-Mazurok>
//                 Nick Amoscato <https://github.com/namoscato>
//                 Declan Vong <https://github.com/declanvong>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 2.8

// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
// Generated from: https://analyticsdata.googleapis.com/$discovery/rest?version=v1alpha
// Revision: 20210210

/// <reference types="gapi.client" />

declare namespace gapi.client {
    /** Load Google Analytics Data API v1alpha */
    function load(name: "analyticsdata", version: "v1alpha"): PromiseLike<void>;
    function load(name: "analyticsdata", version: "v1alpha", callback: () => any): void;

    namespace analyticsdata {
        interface BatchRunPivotReportsRequest {
            /** A property whose events are tracked. This entity must be specified for the batch. The entity within RunPivotReportRequest may either be unspecified or consistent with this entity. */
            entity?: Entity;
            /** Individual requests. Each request has a separate pivot report response. Each batch request is allowed up to 5 requests. */
            requests?: RunPivotReportRequest[];
        }
        interface BatchRunPivotReportsResponse {
            /** Individual responses. Each response has a separate pivot report request. */
            pivotReports?: RunPivotReportResponse[];
        }
        interface BatchRunReportsRequest {
            /** A property whose events are tracked. This entity must be specified for the batch. The entity within RunReportRequest may either be unspecified or consistent with this entity. */
            entity?: Entity;
            /** Individual requests. Each request has a separate report response. Each batch request is allowed up to 5 requests. */
            requests?: RunReportRequest[];
        }
        interface BatchRunReportsResponse {
            /** Individual responses. Each response has a separate report request. */
            reports?: RunReportResponse[];
        }
        interface BetweenFilter {
            /** Begins with this number. */
            fromValue?: NumericValue;
            /** Ends with this number. */
            toValue?: NumericValue;
        }
        interface CaseExpression {
            /** Name of a dimension. The name must refer back to a name in dimensions field of the request. */
            dimensionName?: string;
        }
        interface Cohort {
            /**
             * The cohort selects users whose first touch date is between start date and end date defined in the `dateRange`. This `dateRange` does not specify the full date range of event data
             * that is present in a cohort report. In a cohort report, this `dateRange` is extended by the granularity and offset present in the `cohortsRange`; event data for the extended
             * reporting date range is present in a cohort report. In a cohort request, this `dateRange` is required and the `dateRanges` in the `RunReportRequest` or `RunPivotReportRequest` must
             * be unspecified. This `dateRange` should generally be aligned with the cohort's granularity. If `CohortsRange` uses daily granularity, this `dateRange` can be a single day. If
             * `CohortsRange` uses weekly granularity, this `dateRange` can be aligned to a week boundary, starting at Sunday and ending Saturday. If `CohortsRange` uses monthly granularity, this
             * `dateRange` can be aligned to a month, starting at the first and ending on the last day of the month.
             */
            dateRange?: DateRange;
            /** Dimension used by the cohort. Required and only supports `firstSessionDate`. */
            dimension?: string;
            /**
             * Assigns a name to this cohort. The dimension `cohort` is valued to this name in a report response. If set, cannot begin with `cohort_` or `RESERVED_`. If not set, cohorts are named
             * by their zero based index `cohort_0`, `cohort_1`, etc.
             */
            name?: string;
        }
        interface CohortReportSettings {
            /** If true, accumulates the result from first touch day to the end day. Not supported in `RunReportRequest`. */
            accumulate?: boolean;
        }
        interface CohortSpec {
            /** Optional settings for a cohort report. */
            cohortReportSettings?: CohortReportSettings;
            /**
             * Defines the selection criteria to group users into cohorts. Most cohort reports define only a single cohort. If multiple cohorts are specified, each cohort can be recognized in the
             * report by their name.
             */
            cohorts?: Cohort[];
            /** Cohort reports follow cohorts over an extended reporting date range. This range specifies an offset duration to follow the cohorts over. */
            cohortsRange?: CohortsRange;
        }
        interface CohortsRange {
            /**
             * Required. `endOffset` specifies the end date of the extended reporting date range for a cohort report. `endOffset` can be any positive integer but is commonly set to 5 to 10 so that
             * reports contain data on the cohort for the next several granularity time periods. If `granularity` is `DAILY`, the `endDate` of the extended reporting date range is `endDate` of the
             * cohort plus `endOffset` days. If `granularity` is `WEEKLY`, the `endDate` of the extended reporting date range is `endDate` of the cohort plus `endOffset * 7` days. If `granularity`
             * is `MONTHLY`, the `endDate` of the extended reporting date range is `endDate` of the cohort plus `endOffset * 30` days.
             */
            endOffset?: number;
            /** Required. The granularity used to interpret the `startOffset` and `endOffset` for the extended reporting date range for a cohort report. */
            granularity?: string;
            /**
             * `startOffset` specifies the start date of the extended reporting date range for a cohort report. `startOffset` is commonly set to 0 so that reports contain data from the acquisition
             * of the cohort forward. If `granularity` is `DAILY`, the `startDate` of the extended reporting date range is `startDate` of the cohort plus `startOffset` days. If `granularity` is
             * `WEEKLY`, the `startDate` of the extended reporting date range is `startDate` of the cohort plus `startOffset * 7` days. If `granularity` is `MONTHLY`, the `startDate` of the
             * extended reporting date range is `startDate` of the cohort plus `startOffset * 30` days.
             */
            startOffset?: number;
        }
        interface ConcatenateExpression {
            /**
             * The delimiter placed between dimension names. Delimiters are often single characters such as "|" or "," but can be longer strings. If a dimension value contains the delimiter, both
             * will be present in response with no distinction. For example if dimension 1 value = "US,FR", dimension 2 value = "JP", and delimiter = ",", then the response will contain
             * "US,FR,JP".
             */
            delimiter?: string;
            /** Names of dimensions. The names must refer back to names in the dimensions field of the request. */
            dimensionNames?: string[];
        }
        interface DateRange {
            /**
             * The inclusive end date for the query in the format `YYYY-MM-DD`. Cannot be before `start_date`. The format `NdaysAgo`, `yesterday`, or `today` is also accepted, and in that case,
             * the date is inferred based on the property's reporting time zone.
             */
            endDate?: string;
            /**
             * Assigns a name to this date range. The dimension `dateRange` is valued to this name in a report response. If set, cannot begin with `date_range_` or `RESERVED_`. If not set, date
             * ranges are named by their zero based index in the request: `date_range_0`, `date_range_1`, etc.
             */
            name?: string;
            /**
             * The inclusive start date for the query in the format `YYYY-MM-DD`. Cannot be after `end_date`. The format `NdaysAgo`, `yesterday`, or `today` is also accepted, and in that case, the
             * date is inferred based on the property's reporting time zone.
             */
            startDate?: string;
        }
        interface Dimension {
            /** One dimension can be the result of an expression of multiple dimensions. For example, dimension "country, city": concatenate(country, ", ", city). */
            dimensionExpression?: DimensionExpression;
            /**
             * The name of the dimension. See the [API Dimensions](https://developers.google.com/analytics/devguides/reporting/data/v1/api-schema#dimensions) for the list of dimension names. If
             * `dimensionExpression` is specified, `name` can be any string that you would like. For example if a `dimensionExpression` concatenates `country` and `city`, you could call that
             * dimension `countryAndCity`. Dimensions are referenced by `name` in `dimensionFilter`, `orderBys`, `dimensionExpression`, and `pivots`.
             */
            name?: string;
        }
        interface DimensionExpression {
            /** Used to combine dimension values to a single dimension. For example, dimension "country, city": concatenate(country, ", ", city). */
            concatenate?: ConcatenateExpression;
            /** Used to convert a dimension value to lower case. */
            lowerCase?: CaseExpression;
            /** Used to convert a dimension value to upper case. */
            upperCase?: CaseExpression;
        }
        interface DimensionHeader {
            /** The dimension's name. */
            name?: string;
        }
        interface DimensionMetadata {
            /** This dimension's name. Useable in [Dimension](#Dimension)'s `name`. For example, `eventName`. */
            apiName?: string;
            /** True if the dimension is a custom dimension for this property. */
            customDefinition?: boolean;
            /**
             * Still usable but deprecated names for this dimension. If populated, this dimension is available by either `apiName` or one of `deprecatedApiNames` for a period of time. After the
             * deprecation period, the dimension will be available only by `apiName`.
             */
            deprecatedApiNames?: string[];
            /** Description of how this dimension is used and calculated. */
            description?: string;
            /** This dimension's name within the Google Analytics user interface. For example, `Event name`. */
            uiName?: string;
        }
        interface DimensionOrderBy {
            /** A dimension name in the request to order by. */
            dimensionName?: string;
            /** Controls the rule for dimension value ordering. */
            orderType?: string;
        }
        interface DimensionValue {
            /** Value as a string if the dimension type is a string. */
            value?: string;
        }
        interface Entity {
            /** A Google Analytics GA4 property id. To learn more, see [where to find your Property ID](https://developers.google.com/analytics/devguides/reporting/data/v1/property-id). */
            propertyId?: string;
        }
        interface Filter {
            /** A filter for two values. */
            betweenFilter?: BetweenFilter;
            /** The dimension name or metric name. Must be a name defined in dimensions or metrics. */
            fieldName?: string;
            /** A filter for in list values. */
            inListFilter?: InListFilter;
            /** A filter for numeric or date values. */
            numericFilter?: NumericFilter;
            /** Strings related filter. */
            stringFilter?: StringFilter;
        }
        interface FilterExpression {
            /** The FilterExpressions in and_group have an AND relationship. */
            andGroup?: FilterExpressionList;
            /** A primitive filter. All fields in filter in same FilterExpression needs to be either all dimensions or metrics. */
            filter?: Filter;
            /** The FilterExpression is NOT of not_expression. */
            notExpression?: FilterExpression;
            /** The FilterExpressions in or_group have an OR relationship. */
            orGroup?: FilterExpressionList;
        }
        interface FilterExpressionList {
            /** A list of filter expressions. */
            expressions?: FilterExpression[];
        }
        interface InListFilter {
            /** If true, the string value is case sensitive. */
            caseSensitive?: boolean;
            /** The list of string values. Must be non-empty. */
            values?: string[];
        }
        interface Metadata {
            /** The dimension descriptions. */
            dimensions?: DimensionMetadata[];
            /** The metric descriptions. */
            metrics?: MetricMetadata[];
            /** Resource name of this metadata. */
            name?: string;
        }
        interface Metric {
            /** A mathematical expression for derived metrics. For example, the metric Event count per user is `eventCount/totalUsers`. */
            expression?: string;
            /**
             * Indicates if a metric is invisible in the report response. If a metric is invisible, the metric will not produce a column in the response, but can be used in `metricFilter`,
             * `orderBys`, or a metric `expression`.
             */
            invisible?: boolean;
            /**
             * The name of the metric. See the [API Metrics](https://developers.google.com/analytics/devguides/reporting/data/v1/api-schema#metrics) for the list of metric names. If `expression`
             * is specified, `name` can be any string that you would like. For example if `expression` is `screenPageViews/sessions`, you could call that metric's name = `viewsPerSession`. Metrics
             * are referenced by `name` in `metricFilter`, `orderBys`, and metric `expression`.
             */
            name?: string;
        }
        interface MetricHeader {
            /** The metric's name. */
            name?: string;
            /** The metric's data type. */
            type?: string;
        }
        interface MetricMetadata {
            /** A metric name. Useable in [Metric](#Metric)'s `name`. For example, `eventCount`. */
            apiName?: string;
            /** True if the metric is a custom metric for this property. */
            customDefinition?: boolean;
            /**
             * Still usable but deprecated names for this metric. If populated, this metric is available by either `apiName` or one of `deprecatedApiNames` for a period of time. After the
             * deprecation period, the metric will be available only by `apiName`.
             */
            deprecatedApiNames?: string[];
            /** Description of how this metric is used and calculated. */
            description?: string;
            /**
             * The mathematical expression for this derived metric. Can be used in [Metric](#Metric)'s `expression` field for equivalent reports. Most metrics are not expressions, and for
             * non-expressions, this field is empty.
             */
            expression?: string;
            /** The type of this metric. */
            type?: string;
            /** This metric's name within the Google Analytics user interface. For example, `Event count`. */
            uiName?: string;
        }
        interface MetricOrderBy {
            /** A metric name in the request to order by. */
            metricName?: string;
        }
        interface MetricValue {
            /** Measurement value. See MetricHeader for type. */
            value?: string;
        }
        interface NumericFilter {
            /** The operation type for this filter. */
            operation?: string;
            /** A numeric value or a date value. */
            value?: NumericValue;
        }
        interface NumericValue {
            /** Double value */
            doubleValue?: number;
            /** Integer value */
            int64Value?: string;
        }
        interface OrderBy {
            /** If true, sorts by descending order. */
            desc?: boolean;
            /** Sorts results by a dimension's values. */
            dimension?: DimensionOrderBy;
            /** Sorts results by a metric's values. */
            metric?: MetricOrderBy;
            /** Sorts results by a metric's values within a pivot column group. */
            pivot?: PivotOrderBy;
        }
        interface Pivot {
            /**
             * Dimension names for visible columns in the report response. Including "dateRange" produces a date range column; for each row in the response, dimension values in the date range
             * column will indicate the corresponding date range from the request.
             */
            fieldNames?: string[];
            /**
             * The number of rows to return in this pivot. If the `limit` parameter is unspecified, up to 10,000 rows are returned. The product of the `limit` for each `pivot` in a
             * `RunPivotReportRequest` must not exceed 100,000. For example, a two pivot request with `limit: 1000` in each pivot will fail because the product is `1,000,000`.
             */
            limit?: string;
            /** Aggregate the metrics by dimensions in this pivot using the specified metric_aggregations. */
            metricAggregations?: string[];
            /** The row count of the start row. The first row is counted as row 0. */
            offset?: string;
            /**
             * Specifies how dimensions are ordered in the pivot. In the first Pivot, the OrderBys determine Row and PivotDimensionHeader ordering; in subsequent Pivots, the OrderBys determine
             * only PivotDimensionHeader ordering. Dimensions specified in these OrderBys must be a subset of Pivot.field_names.
             */
            orderBys?: OrderBy[];
        }
        interface PivotDimensionHeader {
            /** Values of multiple dimensions in a pivot. */
            dimensionValues?: DimensionValue[];
        }
        interface PivotHeader {
            /** The size is the same as the cardinality of the corresponding dimension combinations. */
            pivotDimensionHeaders?: PivotDimensionHeader[];
            /** The cardinality of the pivot. The total number of rows for this pivot's fields regardless of how the parameters `offset` and `limit` are specified in the request. */
            rowCount?: number;
        }
        interface PivotOrderBy {
            /** In the response to order by, order rows by this column. Must be a metric name from the request. */
            metricName?: string;
            /**
             * Used to select a dimension name and value pivot. If multiple pivot selections are given, the sort occurs on rows where all pivot selection dimension name and value pairs match the
             * row's dimension name and value pair.
             */
            pivotSelections?: PivotSelection[];
        }
        interface PivotSelection {
            /** Must be a dimension name from the request. */
            dimensionName?: string;
            /** Order by only when the named dimension is this value. */
            dimensionValue?: string;
        }
        interface PropertyQuota {
            /** Standard Analytics Properties can send up to 10 concurrent requests; Analytics 360 Properties can use up to 50 concurrent requests. */
            concurrentRequests?: QuotaStatus;
            /**
             * Standard Analytics Properties and cloud project pairs can have up to 10 server errors per hour; Analytics 360 Properties and cloud project pairs can have up to 50 server errors per
             * hour.
             */
            serverErrorsPerProjectPerHour?: QuotaStatus;
            /** Standard Analytics Properties can use up to 25,000 tokens per day; Analytics 360 Properties can use 250,000 tokens per day. Most requests consume fewer than 10 tokens. */
            tokensPerDay?: QuotaStatus;
            /**
             * Standard Analytics Properties can use up to 5,000 tokens per hour; Analytics 360 Properties can use 50,000 tokens per hour. An API request consumes a single number of tokens, and
             * that number is deducted from both the hourly and daily quotas.
             */
            tokensPerHour?: QuotaStatus;
        }
        interface QuotaStatus {
            /** Quota consumed by this request. */
            consumed?: number;
            /** Quota remaining after this request. */
            remaining?: number;
        }
        interface ResponseMetaData {
            /** If true, indicates some buckets of dimension combinations are rolled into "(other)" row. This can happen for high cardinality reports. */
            dataLossFromOtherRow?: boolean;
        }
        interface Row {
            /** List of requested dimension values. In a PivotReport, dimension_values are only listed for dimensions included in a pivot. */
            dimensionValues?: DimensionValue[];
            /** List of requested visible metric values. */
            metricValues?: MetricValue[];
        }
        interface RunPivotReportRequest {
            /** Cohort group associated with this request. If there is a cohort group in the request the 'cohort' dimension must be present. */
            cohortSpec?: CohortSpec;
            /** A currency code in ISO4217 format, such as "AED", "USD", "JPY". If the field is empty, the report uses the entity's default currency. */
            currencyCode?: string;
            /**
             * The date range to retrieve event data for the report. If multiple date ranges are specified, event data from each date range is used in the report. A special dimension with field
             * name "dateRange" can be included in a Pivot's field names; if included, the report compares between date ranges. In a cohort request, this `dateRanges` must be unspecified.
             */
            dateRanges?: DateRange[];
            /** The filter clause of dimensions. Dimensions must be requested to be used in this filter. Metrics cannot be used in this filter. */
            dimensionFilter?: FilterExpression;
            /** The dimensions requested. All defined dimensions must be used by one of the following: dimension_expression, dimension_filter, pivots, order_bys. */
            dimensions?: Dimension[];
            /** A property whose events are tracked. Within a batch request, this entity should either be unspecified or consistent with the batch-level entity. */
            entity?: Entity;
            /** If false or unspecified, each row with all metrics equal to 0 will not be returned. If true, these rows will be returned if they are not separately removed by a filter. */
            keepEmptyRows?: boolean;
            /**
             * The filter clause of metrics. Applied at post aggregation phase, similar to SQL having-clause. Metrics must be requested to be used in this filter. Dimensions cannot be used in this
             * filter.
             */
            metricFilter?: FilterExpression;
            /** The metrics requested, at least one metric needs to be specified. All defined metrics must be used by one of the following: metric_expression, metric_filter, order_bys. */
            metrics?: Metric[];
            /**
             * Describes the visual format of the report's dimensions in columns or rows. The union of the fieldNames (dimension names) in all pivots must be a subset of dimension names defined in
             * Dimensions. No two pivots can share a dimension. A dimension is only visible if it appears in a pivot.
             */
            pivots?: Pivot[];
            /** Toggles whether to return the current state of this Analytics Property's quota. Quota is returned in [PropertyQuota](#PropertyQuota). */
            returnPropertyQuota?: boolean;
        }
        interface RunPivotReportResponse {
            /**
             * Aggregation of metric values. Can be totals, minimums, or maximums. The returned aggregations are controlled by the metric_aggregations in the pivot. The type of aggregation
             * returned in each row is shown by the dimension_values which are set to "RESERVED_".
             */
            aggregates?: Row[];
            /** Describes dimension columns. The number of DimensionHeaders and ordering of DimensionHeaders matches the dimensions present in rows. */
            dimensionHeaders?: DimensionHeader[];
            /** Metadata for the report. */
            metadata?: ResponseMetaData;
            /** Describes metric columns. The number of MetricHeaders and ordering of MetricHeaders matches the metrics present in rows. */
            metricHeaders?: MetricHeader[];
            /**
             * Summarizes the columns and rows created by a pivot. Each pivot in the request produces one header in the response. If we have a request like this: "pivots": [{ "fieldNames":
             * ["country", "city"] }, { "fieldNames": "eventName" }] We will have the following `pivotHeaders` in the response: "pivotHeaders" : [{ "dimensionHeaders": [{ "dimensionValues": [ {
             * "value": "United Kingdom" }, { "value": "London" } ] }, { "dimensionValues": [ { "value": "Japan" }, { "value": "Osaka" } ] }] }, { "dimensionHeaders": [{ "dimensionValues": [{
             * "value": "session_start" }] }, { "dimensionValues": [{ "value": "scroll" }] }] }]
             */
            pivotHeaders?: PivotHeader[];
            /** This Analytics Property's quota state including this request. */
            propertyQuota?: PropertyQuota;
            /** Rows of dimension value combinations and metric values in the report. */
            rows?: Row[];
        }
        interface RunRealtimeReportRequest {
            /** The filter clause of dimensions. Dimensions must be requested to be used in this filter. Metrics cannot be used in this filter. */
            dimensionFilter?: FilterExpression;
            /** The dimensions requested and displayed. */
            dimensions?: Dimension[];
            /**
             * The number of rows to return. If the `limit` parameter is unspecified, 10,000 rows are returned. The API returns a maximum of 100,000 rows per request, no matter how many you ask
             * for.
             */
            limit?: string;
            /** Aggregation of metrics. Aggregated metric values will be shown in rows where the dimension_values are set to "RESERVED_(MetricAggregation)". */
            metricAggregations?: string[];
            /**
             * The filter clause of metrics. Applied at post aggregation phase, similar to SQL having-clause. Metrics must be requested to be used in this filter. Dimensions cannot be used in this
             * filter.
             */
            metricFilter?: FilterExpression;
            /** The metrics requested and displayed. */
            metrics?: Metric[];
            /** Specifies how rows are ordered in the response. */
            orderBys?: OrderBy[];
            /** Toggles whether to return the current state of this Analytics Property's Realtime quota. Quota is returned in [PropertyQuota](#PropertyQuota). */
            returnPropertyQuota?: boolean;
        }
        interface RunRealtimeReportResponse {
            /** Describes dimension columns. The number of DimensionHeaders and ordering of DimensionHeaders matches the dimensions present in rows. */
            dimensionHeaders?: DimensionHeader[];
            /** If requested, the maximum values of metrics. */
            maximums?: Row[];
            /** Describes metric columns. The number of MetricHeaders and ordering of MetricHeaders matches the metrics present in rows. */
            metricHeaders?: MetricHeader[];
            /** If requested, the minimum values of metrics. */
            minimums?: Row[];
            /** This Analytics Property's Realtime quota state including this request. */
            propertyQuota?: PropertyQuota;
            /**
             * The total number of rows in the query result, regardless of the number of rows returned in the response. For example if a query returns 175 rows and includes limit = 50 in the API
             * request, the response will contain row_count = 175 but only 50 rows.
             */
            rowCount?: number;
            /** Rows of dimension value combinations and metric values in the report. */
            rows?: Row[];
            /** If requested, the totaled values of metrics. */
            totals?: Row[];
        }
        interface RunReportRequest {
            /** Cohort group associated with this request. If there is a cohort group in the request the 'cohort' dimension must be present. */
            cohortSpec?: CohortSpec;
            /** A currency code in ISO4217 format, such as "AED", "USD", "JPY". If the field is empty, the report uses the entity's default currency. */
            currencyCode?: string;
            /**
             * Date ranges of data to read. If multiple date ranges are requested, each response row will contain a zero based date range index. If two date ranges overlap, the event data for the
             * overlapping days is included in the response rows for both date ranges. In a cohort request, this `dateRanges` must be unspecified.
             */
            dateRanges?: DateRange[];
            /** The filter clause of dimensions. Dimensions must be requested to be used in this filter. Metrics cannot be used in this filter. */
            dimensionFilter?: FilterExpression;
            /** The dimensions requested and displayed. */
            dimensions?: Dimension[];
            /** A property whose events are tracked. Within a batch request, this entity should either be unspecified or consistent with the batch-level entity. */
            entity?: Entity;
            /** If false or unspecified, each row with all metrics equal to 0 will not be returned. If true, these rows will be returned if they are not separately removed by a filter. */
            keepEmptyRows?: boolean;
            /**
             * The number of rows to return. If the `limit` parameter is unspecified, 10,000 rows are returned. The API returns a maximum of 100,000 rows per request, no matter how many you ask
             * for.
             */
            limit?: string;
            /** Aggregation of metrics. Aggregated metric values will be shown in rows where the dimension_values are set to "RESERVED_(MetricAggregation)". */
            metricAggregations?: string[];
            /**
             * The filter clause of metrics. Applied at post aggregation phase, similar to SQL having-clause. Metrics must be requested to be used in this filter. Dimensions cannot be used in this
             * filter.
             */
            metricFilter?: FilterExpression;
            /** The metrics requested and displayed. */
            metrics?: Metric[];
            /** The row count of the start row. The first row is counted as row 0. */
            offset?: string;
            /** Specifies how rows are ordered in the response. */
            orderBys?: OrderBy[];
            /** Toggles whether to return the current state of this Analytics Property's quota. Quota is returned in [PropertyQuota](#PropertyQuota). */
            returnPropertyQuota?: boolean;
        }
        interface RunReportResponse {
            /** Describes dimension columns. The number of DimensionHeaders and ordering of DimensionHeaders matches the dimensions present in rows. */
            dimensionHeaders?: DimensionHeader[];
            /** If requested, the maximum values of metrics. */
            maximums?: Row[];
            /** Metadata for the report. */
            metadata?: ResponseMetaData;
            /** Describes metric columns. The number of MetricHeaders and ordering of MetricHeaders matches the metrics present in rows. */
            metricHeaders?: MetricHeader[];
            /** If requested, the minimum values of metrics. */
            minimums?: Row[];
            /** This Analytics Property's quota state including this request. */
            propertyQuota?: PropertyQuota;
            /**
             * The total number of rows in the query result, regardless of the number of rows returned in the response. For example if a query returns 175 rows and includes limit = 50 in the API
             * request, the response will contain row_count = 175 but only 50 rows. To learn more about this pagination parameter, see
             * [Pagination](https://developers.google.com/analytics/devguides/reporting/data/v1/basics#pagination).
             */
            rowCount?: number;
            /** Rows of dimension value combinations and metric values in the report. */
            rows?: Row[];
            /** If requested, the totaled values of metrics. */
            totals?: Row[];
        }
        interface StringFilter {
            /** If true, the string value is case sensitive. */
            caseSensitive?: boolean;
            /** The match type for this filter. */
            matchType?: string;
            /** The string value used for the matching. */
            value?: string;
        }
        interface PropertiesResource {
            /**
             * Returns metadata for dimensions and metrics available in reporting methods. Used to explore the dimensions and metrics. In this method, a Google Analytics GA4 Property Identifier is
             * specified in the request, and the metadata response includes Custom dimensions and metrics as well as Universal metadata. For example if a custom metric with parameter name
             * `levels_unlocked` is registered to a property, the Metadata response will contain `customEvent:levels_unlocked`. Universal metadata are dimensions and metrics applicable to any
             * property such as `country` and `totalUsers`.
             */
            getMetadata(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * Required. The resource name of the metadata to retrieve. This name field is specified in the URL path and not URL parameters. Property is a numeric Google Analytics GA4 Property
                 * identifier. To learn more, see [where to find your Property ID](https://developers.google.com/analytics/devguides/reporting/data/v1/property-id). Example:
                 * properties/1234/metadata Set the Property ID to 0 for dimensions and metrics common to all properties. In this special mode, this method will not return custom dimensions and
                 * metrics.
                 */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Metadata>;
            /** The Google Analytics Realtime API returns a customized report of realtime event data for your property. These reports show events and usage from the last 30 minutes. */
            runRealtimeReport(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /**
                 * A Google Analytics GA4 property identifier whose events are tracked. Specified in the URL path and not the body. To learn more, see [where to find your Property
                 * ID](https://developers.google.com/analytics/devguides/reporting/data/v1/property-id). Example: properties/1234
                 */
                property: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: RunRealtimeReportRequest;
            }): Request<RunRealtimeReportResponse>;
            runRealtimeReport(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /**
                 * A Google Analytics GA4 property identifier whose events are tracked. Specified in the URL path and not the body. To learn more, see [where to find your Property
                 * ID](https://developers.google.com/analytics/devguides/reporting/data/v1/property-id). Example: properties/1234
                 */
                property: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: RunRealtimeReportRequest): Request<RunRealtimeReportResponse>;
        }
        interface V1alphaResource {
            /** Returns multiple pivot reports in a batch. All reports must be for the same Entity. */
            batchRunPivotReports(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: BatchRunPivotReportsRequest;
            }): Request<BatchRunPivotReportsResponse>;
            batchRunPivotReports(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: BatchRunPivotReportsRequest): Request<BatchRunPivotReportsResponse>;
            /** Returns multiple reports in a batch. All reports must be for the same Entity. */
            batchRunReports(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: BatchRunReportsRequest;
            }): Request<BatchRunReportsResponse>;
            batchRunReports(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: BatchRunReportsRequest): Request<BatchRunReportsResponse>;
            /**
             * Returns a customized pivot report of your Google Analytics event data. Pivot reports are more advanced and expressive formats than regular reports. In a pivot report, dimensions are
             * only visible if they are included in a pivot. Multiple pivots can be specified to further dissect your data.
             */
            runPivotReport(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: RunPivotReportRequest;
            }): Request<RunPivotReportResponse>;
            runPivotReport(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: RunPivotReportRequest): Request<RunPivotReportResponse>;
            /**
             * Returns a customized report of your Google Analytics event data. Reports contain statistics derived from data collected by the Google Analytics tracking code. The data returned from
             * the API is as a table with columns for the requested dimensions and metrics. Metrics are individual measurements of user activity on your property, such as active users or event
             * count. Dimensions break down metrics across some common criteria, such as country or event name.
             */
            runReport(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: RunReportRequest;
            }): Request<RunReportResponse>;
            runReport(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: RunReportRequest): Request<RunReportResponse>;
        }

        const properties: PropertiesResource;

        const v1alpha: V1alphaResource;
    }
}
