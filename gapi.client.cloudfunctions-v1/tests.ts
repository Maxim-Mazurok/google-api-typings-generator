/* This is stub file for gapi.client.cloudfunctions-v1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20230515

gapi.load('client', async () => {
    /** now we can use gapi.client */

    await gapi.client.load('https://cloudfunctions.googleapis.com/$discovery/rest?version=v1');
    /** now we can use gapi.client.cloudfunctions */

    /** don't forget to authenticate your client before sending any request to resources: */
    /** declare client_id registered in Google Developers Console */
    const client_id = '<<PUT YOUR CLIENT ID HERE>>';
    const scope = [
        /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
        'https://www.googleapis.com/auth/cloud-platform',
    ];
    const immediate = false;
    gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
        if (authResult && !authResult.error) {
            /** handle successful authorization */
            run();
        } else {
            /** handle authorization error */
        }
    });

    async function run() {
        /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
        await gapi.client.cloudfunctions.operations.get({
            name: "Test string",
        });
        /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
        await gapi.client.cloudfunctions.operations.list({
            filter: "Test string",
            name: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Lists information about the supported locations for this service. */
        await gapi.client.cloudfunctions.projects.locations.list({
            filter: "Test string",
            name: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /**
         * Synchronously invokes a deployed Cloud Function. To be used for testing purposes as very limited traffic is allowed. For more information on the actual limits, refer to [Rate
         * Limits](https://cloud.google.com/functions/quotas#rate_limits).
         */
        await gapi.client.cloudfunctions.projects.locations.functions.call({
            name: "Test string",
        }, {
            data: "Test string",
        });
        /** Creates a new function. If a function with the given name already exists in the specified project, the long running operation will return `ALREADY_EXISTS` error. */
        await gapi.client.cloudfunctions.projects.locations.functions.create({
            location: "Test string",
        }, {
            availableMemoryMb: 42,
            buildEnvironmentVariables: {
                A: "Test string"
            },
            buildId: "Test string",
            buildName: "Test string",
            buildWorkerPool: "Test string",
            description: "Test string",
            dockerRegistry: "Test string",
            dockerRepository: "Test string",
            entryPoint: "Test string",
            environmentVariables: {
                A: "Test string"
            },
            eventTrigger: {
                eventType: "Test string",
                failurePolicy: {
                    retry: {
                    },
                },
                resource: "Test string",
                service: "Test string",
            },
            httpsTrigger: {
                securityLevel: "Test string",
                url: "Test string",
            },
            ingressSettings: "Test string",
            kmsKeyName: "Test string",
            labels: {
                A: "Test string"
            },
            maxInstances: 42,
            minInstances: 42,
            name: "Test string",
            network: "Test string",
            runtime: "Test string",
            secretEnvironmentVariables: [
                {
                    key: "Test string",
                    projectId: "Test string",
                    secret: "Test string",
                    version: "Test string",
                }
            ],
            secretVolumes: [
                {
                    mountPath: "Test string",
                    projectId: "Test string",
                    secret: "Test string",
                    versions: [
                        {
                            path: "Test string",
                            version: "Test string",
                        }
                    ],
                }
            ],
            serviceAccountEmail: "Test string",
            sourceArchiveUrl: "Test string",
            sourceRepository: {
                deployedUrl: "Test string",
                url: "Test string",
            },
            sourceToken: "Test string",
            sourceUploadUrl: "Test string",
            status: "Test string",
            timeout: "Test string",
            updateTime: "Test string",
            versionId: "Test string",
            vpcConnector: "Test string",
            vpcConnectorEgressSettings: "Test string",
        });
        /** Deletes a function with the given name from the specified project. If the given function is used by some trigger, the trigger will be updated to remove this function. */
        await gapi.client.cloudfunctions.projects.locations.functions.delete({
            name: "Test string",
        });
        /**
         * Returns a signed URL for downloading deployed function source code. The URL is only valid for a limited period and should be used within minutes after generation. For more information
         * about the signed URL usage see: https://cloud.google.com/storage/docs/access-control/signed-urls
         */
        await gapi.client.cloudfunctions.projects.locations.functions.generateDownloadUrl({
            name: "Test string",
        }, {
            versionId: "Test string",
        });
        /**
         * Returns a signed URL for uploading a function source code. For more information about the signed URL usage see: https://cloud.google.com/storage/docs/access-control/signed-urls. Once
         * the function source code upload is complete, the used signed URL should be provided in CreateFunction or UpdateFunction request as a reference to the function source code. When
         * uploading source code to the generated signed URL, please follow these restrictions: * Source file type should be a zip file. * Source file size should not exceed 100MB limit. * No
         * credentials should be attached - the signed URLs provide access to the target bucket using internal service identity; if credentials were attached, the identity from the credentials
         * would be used, but that identity does not have permissions to upload files to the URL. When making a HTTP PUT request, these two headers need to be specified: * `content-type:
         * application/zip` * `x-goog-content-length-range: 0,104857600` And this header SHOULD NOT be specified: * `Authorization: Bearer YOUR_TOKEN`
         */
        await gapi.client.cloudfunctions.projects.locations.functions.generateUploadUrl({
            parent: "Test string",
        }, {
            kmsKeyName: "Test string",
        });
        /** Returns a function with the given name from the requested project. */
        await gapi.client.cloudfunctions.projects.locations.functions.get({
            name: "Test string",
        });
        /** Gets the IAM access control policy for a function. Returns an empty policy if the function exists and does not have a policy set. */
        await gapi.client.cloudfunctions.projects.locations.functions.getIamPolicy({
            "options.requestedPolicyVersion": 42,
            resource: "Test string",
        });
        /** Returns a list of functions that belong to the requested project. */
        await gapi.client.cloudfunctions.projects.locations.functions.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates existing function. */
        await gapi.client.cloudfunctions.projects.locations.functions.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            availableMemoryMb: 42,
            buildEnvironmentVariables: {
                A: "Test string"
            },
            buildId: "Test string",
            buildName: "Test string",
            buildWorkerPool: "Test string",
            description: "Test string",
            dockerRegistry: "Test string",
            dockerRepository: "Test string",
            entryPoint: "Test string",
            environmentVariables: {
                A: "Test string"
            },
            eventTrigger: {
                eventType: "Test string",
                failurePolicy: {
                    retry: {
                    },
                },
                resource: "Test string",
                service: "Test string",
            },
            httpsTrigger: {
                securityLevel: "Test string",
                url: "Test string",
            },
            ingressSettings: "Test string",
            kmsKeyName: "Test string",
            labels: {
                A: "Test string"
            },
            maxInstances: 42,
            minInstances: 42,
            name: "Test string",
            network: "Test string",
            runtime: "Test string",
            secretEnvironmentVariables: [
                {
                    key: "Test string",
                    projectId: "Test string",
                    secret: "Test string",
                    version: "Test string",
                }
            ],
            secretVolumes: [
                {
                    mountPath: "Test string",
                    projectId: "Test string",
                    secret: "Test string",
                    versions: [
                        {
                            path: "Test string",
                            version: "Test string",
                        }
                    ],
                }
            ],
            serviceAccountEmail: "Test string",
            sourceArchiveUrl: "Test string",
            sourceRepository: {
                deployedUrl: "Test string",
                url: "Test string",
            },
            sourceToken: "Test string",
            sourceUploadUrl: "Test string",
            status: "Test string",
            timeout: "Test string",
            updateTime: "Test string",
            versionId: "Test string",
            vpcConnector: "Test string",
            vpcConnectorEgressSettings: "Test string",
        });
        /** Sets the IAM access control policy on the specified function. Replaces any existing policy. */
        await gapi.client.cloudfunctions.projects.locations.functions.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                auditConfigs: [
                    {
                        auditLogConfigs: [
                            {
                                exemptedMembers: [
                                    "Test string"
                                ],
                                logType: "Test string",
                            }
                        ],
                        service: "Test string",
                    }
                ],
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"
                        ],
                        role: "Test string",
                    }
                ],
                etag: "Test string",
                version: 42,
            },
            updateMask: "Test string",
        });
        /**
         * Tests the specified permissions against the IAM access control policy for a function. If the function does not exist, this will return an empty set of permissions, not a NOT_FOUND
         * error.
         */
        await gapi.client.cloudfunctions.projects.locations.functions.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"
            ],
        });
    }
});
