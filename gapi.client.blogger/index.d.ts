// Type definitions for non-npm package Blogger API v3 v3 3.0
// Project: https://developers.google.com/blogger/docs/3.0/getting_started
// Definitions by: Maxim Mazurok <https://github.com/Maxim-Mazurok>
//                 Google API Typings Generator <https://github.com/google-api-typings-generator>
//                 Nick Amoscato <https://github.com/namoscato>
//                 Declan Vong <https://github.com/declanvong>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 2.8

// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
// Generated from: https://blogger.googleapis.com/$discovery/rest?version=v3
// Revision: 20200821

/// <reference types="gapi.client" />

declare namespace gapi.client {
    /** Load Blogger API v3 v3 */
    function load(name: "blogger", version: "v3"): PromiseLike<void>;
    function load(name: "blogger", version: "v3", callback: () => any): void;

    namespace blogger {
        interface Blog {
            /** The JSON custom meta-data for the Blog. */
            customMetaData?: string;
            /** The description of this blog. This is displayed underneath the title. */
            description?: string;
            /** The identifier for this resource. */
            id?: string;
            /** The kind of this entry. Always blogger#blog. */
            kind?: string;
            /** The locale this Blog is set to. */
            locale?: {
                /** The country this blog's locale is set to. */
                country?: string;
                /** The language this blog is authored in. */
                language?: string;
                /** The language variant this blog is authored in. */
                variant?: string;
            };
            /** The name of this blog. This is displayed as the title. */
            name?: string;
            /** The container of pages in this blog. */
            pages?: {
                /** The URL of the container for pages in this blog. */
                selfLink?: string;
                /** The count of pages in this blog. */
                totalItems?: number;
            };
            /** The container of posts in this blog. */
            posts?: {
                /** The List of Posts for this Blog. */
                items?: Post[];
                /** The URL of the container for posts in this blog. */
                selfLink?: string;
                /** The count of posts in this blog. */
                totalItems?: number;
            };
            /** RFC 3339 date-time when this blog was published. */
            published?: string;
            /** The API REST URL to fetch this resource from. */
            selfLink?: string;
            /** The status of the blog. */
            status?: string;
            /** RFC 3339 date-time when this blog was last updated. */
            updated?: string;
            /** The URL where this blog is published. */
            url?: string;
        }
        interface BlogList {
            /** Admin level list of blog per-user information. */
            blogUserInfos?: BlogUserInfo[];
            /** The list of Blogs this user has Authorship or Admin rights over. */
            items?: Blog[];
            /** The kind of this entity. Always blogger#blogList. */
            kind?: string;
        }
        interface BlogPerUserInfo {
            /** ID of the Blog resource. */
            blogId?: string;
            /** True if the user has Admin level access to the blog. */
            hasAdminAccess?: boolean;
            /** The kind of this entity. Always blogger#blogPerUserInfo. */
            kind?: string;
            /** The Photo Album Key for the user when adding photos to the blog. */
            photosAlbumKey?: string;
            /** Access permissions that the user has for the blog (ADMIN, AUTHOR, or READER). */
            role?: string;
            /** ID of the User. */
            userId?: string;
        }
        interface BlogUserInfo {
            /** The Blog resource. */
            blog?: Blog;
            /** Information about a User for the Blog. */
            blog_user_info?: BlogPerUserInfo;
            /** The kind of this entity. Always blogger#blogUserInfo. */
            kind?: string;
        }
        interface Comment {
            /** The author of this Comment. */
            author?: {
                /** The display name. */
                displayName?: string;
                /** The identifier of the creator. */
                id?: string;
                /** The creator's avatar. */
                image?: {
                    /** The creator's avatar URL. */
                    url?: string;
                };
                /** The URL of the creator's Profile page. */
                url?: string;
            };
            /** Data about the blog containing this comment. */
            blog?: {
                /** The identifier of the blog containing this comment. */
                id?: string;
            };
            /** The actual content of the comment. May include HTML markup. */
            content?: string;
            /** The identifier for this resource. */
            id?: string;
            /** Data about the comment this is in reply to. */
            inReplyTo?: {
                /** The identified of the parent of this comment. */
                id?: string;
            };
            /** The kind of this entry. Always blogger#comment. */
            kind?: string;
            /** Data about the post containing this comment. */
            post?: {
                /** The identifier of the post containing this comment. */
                id?: string;
            };
            /** RFC 3339 date-time when this comment was published. */
            published?: string;
            /** The API REST URL to fetch this resource from. */
            selfLink?: string;
            /** The status of the comment (only populated for admin users). */
            status?: string;
            /** RFC 3339 date-time when this comment was last updated. */
            updated?: string;
        }
        interface CommentList {
            /** Etag of the response. */
            etag?: string;
            /** The List of Comments for a Post. */
            items?: Comment[];
            /** The kind of this entry. Always blogger#commentList. */
            kind?: string;
            /** Pagination token to fetch the next page, if one exists. */
            nextPageToken?: string;
            /** Pagination token to fetch the previous page, if one exists. */
            prevPageToken?: string;
        }
        interface Page {
            /** The author of this Page. */
            author?: {
                /** The display name. */
                displayName?: string;
                /** The identifier of the creator. */
                id?: string;
                /** The creator's avatar. */
                image?: {
                    /** The creator's avatar URL. */
                    url?: string;
                };
                /** The URL of the creator's Profile page. */
                url?: string;
            };
            /** Data about the blog containing this Page. */
            blog?: {
                /** The identifier of the blog containing this page. */
                id?: string;
            };
            /** The body content of this Page, in HTML. */
            content?: string;
            /** Etag of the resource. */
            etag?: string;
            /** The identifier for this resource. */
            id?: string;
            /** The kind of this entity. Always blogger#page. */
            kind?: string;
            /** RFC 3339 date-time when this Page was published. */
            published?: string;
            /** The API REST URL to fetch this resource from. */
            selfLink?: string;
            /** The status of the page for admin resources (either LIVE or DRAFT). */
            status?: string;
            /** The title of this entity. This is the name displayed in the Admin user interface. */
            title?: string;
            /** RFC 3339 date-time when this Page was last updated. */
            updated?: string;
            /** The URL that this Page is displayed at. */
            url?: string;
        }
        interface PageList {
            /** Etag of the response. */
            etag?: string;
            /** The list of Pages for a Blog. */
            items?: Page[];
            /** The kind of this entity. Always blogger#pageList. */
            kind?: string;
            /** Pagination token to fetch the next page, if one exists. */
            nextPageToken?: string;
        }
        interface Pageviews {
            /** Blog Id. */
            blogId?: string;
            /** The container of posts in this blog. */
            counts?: Array<{
                /** Count of page views for the given time range. */
                count?: string;
                /** Time range the given count applies to. */
                timeRange?: string;
            }>;
            /** The kind of this entry. Always blogger#page_views. */
            kind?: string;
        }
        interface Post {
            /** The author of this Post. */
            author?: {
                /** The display name. */
                displayName?: string;
                /** The identifier of the creator. */
                id?: string;
                /** The creator's avatar. */
                image?: {
                    /** The creator's avatar URL. */
                    url?: string;
                };
                /** The URL of the creator's Profile page. */
                url?: string;
            };
            /** Data about the blog containing this Post. */
            blog?: {
                /** The identifier of the Blog that contains this Post. */
                id?: string;
            };
            /** The content of the Post. May contain HTML markup. */
            content?: string;
            /** The JSON meta-data for the Post. */
            customMetaData?: string;
            /** Etag of the resource. */
            etag?: string;
            /** The identifier of this Post. */
            id?: string;
            /** Display image for the Post. */
            images?: Array<{
                url?: string;
            }>;
            /** The kind of this entity. Always blogger#post. */
            kind?: string;
            /** The list of labels this Post was tagged with. */
            labels?: string[];
            /** The location for geotagged posts. */
            location?: {
                /** Location's latitude. */
                lat?: number;
                /** Location's longitude. */
                lng?: number;
                /** Location name. */
                name?: string;
                /** Location's viewport span. Can be used when rendering a map preview. */
                span?: string;
            };
            /** RFC 3339 date-time when this Post was published. */
            published?: string;
            /** Comment control and display setting for readers of this post. */
            readerComments?: string;
            /** The container of comments on this Post. */
            replies?: {
                /** The List of Comments for this Post. */
                items?: Comment[];
                /** The URL of the comments on this post. */
                selfLink?: string;
                /** The count of comments on this post. */
                totalItems?: string;
            };
            /** The API REST URL to fetch this resource from. */
            selfLink?: string;
            /** Status of the post. Only set for admin-level requests. */
            status?: string;
            /** The title of the Post. */
            title?: string;
            /** The title link URL, similar to atom's related link. */
            titleLink?: string;
            /** RFC 3339 date-time when this Post was last updated. */
            updated?: string;
            /** The URL where this Post is displayed. */
            url?: string;
        }
        interface PostList {
            /** Etag of the response. */
            etag?: string;
            /** The list of Posts for this Blog. */
            items?: Post[];
            /** The kind of this entity. Always blogger#postList. */
            kind?: string;
            /** Pagination token to fetch the next page, if one exists. */
            nextPageToken?: string;
            /** Pagination token to fetch the previous page, if one exists. */
            prevPageToken?: string;
        }
        interface PostPerUserInfo {
            /** ID of the Blog that the post resource belongs to. */
            blogId?: string;
            /** True if the user has Author level access to the post. */
            hasEditAccess?: boolean;
            /** The kind of this entity. Always blogger#postPerUserInfo. */
            kind?: string;
            /** ID of the Post resource. */
            postId?: string;
            /** ID of the User. */
            userId?: string;
        }
        interface PostUserInfo {
            /** The kind of this entity. Always blogger#postUserInfo. */
            kind?: string;
            /** The Post resource. */
            post?: Post;
            /** Information about a User for the Post. */
            post_user_info?: PostPerUserInfo;
        }
        interface PostUserInfosList {
            /** The list of Posts with User information for the post, for this Blog. */
            items?: PostUserInfo[];
            /** The kind of this entity. Always blogger#postList. */
            kind?: string;
            /** Pagination token to fetch the next page, if one exists. */
            nextPageToken?: string;
        }
        interface User {
            /** Profile summary information. */
            about?: string;
            /** The container of blogs for this user. */
            blogs?: {
                /** The URL of the Blogs for this user. */
                selfLink?: string;
            };
            /** The timestamp of when this profile was created, in seconds since epoch. */
            created?: string;
            /** The display name. */
            displayName?: string;
            /** The identifier for this User. */
            id?: string;
            /** The kind of this entity. Always blogger#user. */
            kind?: string;
            /** This user's locale */
            locale?: {
                /** The country this blog's locale is set to. */
                country?: string;
                /** The language this blog is authored in. */
                language?: string;
                /** The language variant this blog is authored in. */
                variant?: string;
            };
            /** The API REST URL to fetch this resource from. */
            selfLink?: string;
            /** The user's profile page. */
            url?: string;
        }
        interface BlogsResource {
            /** Gets a blog by id. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                blogId: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                maxPosts?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                view?: string;
            }): Request<Blog>;
            /** Gets a blog by url. */
            getByUrl(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                url: string;
                view?: string;
            }): Request<Blog>;
            /** Lists blogs by user. */
            listByUser(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                fetchUserInfo?: boolean;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                role?: string | string[];
                /** Default value of status is LIVE. */
                status?: string | string[];
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                userId: string;
                view?: string;
            }): Request<BlogList>;
        }
        interface BlogUserInfosResource {
            /** Gets one blog and user info pair by blog id and user id. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                blogId: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                maxPosts?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                userId: string;
            }): Request<BlogUserInfo>;
        }
        interface CommentsResource {
            /** Marks a comment as not spam by blog id, post id and comment id. */
            approve(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                blogId: string;
                /** JSONP */
                callback?: string;
                commentId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                postId: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Comment>;
            /** Deletes a comment by blog id, post id and comment id. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                blogId: string;
                /** JSONP */
                callback?: string;
                commentId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                postId: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<void>;
            /** Gets a comment by id. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                blogId: string;
                /** JSONP */
                callback?: string;
                commentId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                postId: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                view?: string;
            }): Request<Comment>;
            /** Lists comments. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                blogId: string;
                /** JSONP */
                callback?: string;
                endDate?: string;
                fetchBodies?: boolean;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                pageToken?: string;
                postId: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                startDate?: string;
                status?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                view?: string;
            }): Request<CommentList>;
            /** Lists comments by blog. */
            listByBlog(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                blogId: string;
                /** JSONP */
                callback?: string;
                endDate?: string;
                fetchBodies?: boolean;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                startDate?: string;
                status?: string | string[];
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<CommentList>;
            /** Marks a comment as spam by blog id, post id and comment id. */
            markAsSpam(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                blogId: string;
                /** JSONP */
                callback?: string;
                commentId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                postId: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Comment>;
            /** Removes the content of a comment by blog id, post id and comment id. */
            removeContent(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                blogId: string;
                /** JSONP */
                callback?: string;
                commentId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                postId: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Comment>;
        }
        interface PagesResource {
            /** Deletes a page by blog id and page id. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                blogId: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                pageId: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<void>;
            /** Gets a page by blog id and page id. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                blogId: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                pageId: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                view?: string;
            }): Request<Page>;
            /** Inserts a page. */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                blogId: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                isDraft?: boolean;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Page;
            }): Request<Page>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                blogId: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                isDraft?: boolean;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Page): Request<Page>;
            /** Lists pages. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                blogId: string;
                /** JSONP */
                callback?: string;
                fetchBodies?: boolean;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                status?: string | string[];
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                view?: string;
            }): Request<PageList>;
            /** Patches a page. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                blogId: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                pageId: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                publish?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                revert?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Page;
            }): Request<Page>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                blogId: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                pageId: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                publish?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                revert?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Page): Request<Page>;
            /** Publishes a page. */
            publish(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                blogId: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                pageId: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Page>;
            /** Reverts a published or scheduled page to draft state. */
            revert(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                blogId: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                pageId: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Page>;
            /** Updates a page by blog id and page id. */
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                blogId: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                pageId: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                publish?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                revert?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Page;
            }): Request<Page>;
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                blogId: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                pageId: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                publish?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                revert?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Page): Request<Page>;
        }
        interface PageViewsResource {
            /** Gets page views by blog id. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                blogId: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                range?: string | string[];
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Pageviews>;
        }
        interface PostsResource {
            /** Deletes a post by blog id and post id. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                blogId: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                postId: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<void>;
            /** Gets a post by blog id and post id */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                blogId: string;
                /** JSONP */
                callback?: string;
                fetchBody?: boolean;
                fetchImages?: boolean;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                maxComments?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                postId: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                view?: string;
            }): Request<Post>;
            /** Gets a post by path. */
            getByPath(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                blogId: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                maxComments?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                path: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                view?: string;
            }): Request<Post>;
            /** Inserts a post. */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                blogId: string;
                /** JSONP */
                callback?: string;
                fetchBody?: boolean;
                fetchImages?: boolean;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                isDraft?: boolean;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Post;
            }): Request<Post>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                blogId: string;
                /** JSONP */
                callback?: string;
                fetchBody?: boolean;
                fetchImages?: boolean;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                isDraft?: boolean;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Post): Request<Post>;
            /** Lists posts. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                blogId: string;
                /** JSONP */
                callback?: string;
                endDate?: string;
                fetchBodies?: boolean;
                fetchImages?: boolean;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                labels?: string;
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                orderBy?: string;
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                startDate?: string;
                status?: string | string[];
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                view?: string;
            }): Request<PostList>;
            /** Patches a post. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                blogId: string;
                /** JSONP */
                callback?: string;
                fetchBody?: boolean;
                fetchImages?: boolean;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                maxComments?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                postId: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                publish?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                revert?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Post;
            }): Request<Post>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                blogId: string;
                /** JSONP */
                callback?: string;
                fetchBody?: boolean;
                fetchImages?: boolean;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                maxComments?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                postId: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                publish?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                revert?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Post): Request<Post>;
            /** Publishes a post. */
            publish(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                blogId: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                postId: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                publishDate?: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Post>;
            /** Reverts a published or scheduled post to draft state. */
            revert(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                blogId: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                postId: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Post>;
            /** Searches for posts matching given query terms in the specified blog. */
            search(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                blogId: string;
                /** JSONP */
                callback?: string;
                fetchBodies?: boolean;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                orderBy?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                q: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<PostList>;
            /** Updates a post by blog id and post id. */
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                blogId: string;
                /** JSONP */
                callback?: string;
                fetchBody?: boolean;
                fetchImages?: boolean;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                maxComments?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                postId: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                publish?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                revert?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Post;
            }): Request<Post>;
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                blogId: string;
                /** JSONP */
                callback?: string;
                fetchBody?: boolean;
                fetchImages?: boolean;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                maxComments?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                postId: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                publish?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                revert?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Post): Request<Post>;
        }
        interface PostUserInfosResource {
            /** Gets one post and user info pair, by post_id and user_id. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                blogId: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                maxComments?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                postId: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                userId: string;
            }): Request<PostUserInfo>;
            /** Lists post and user info pairs. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                blogId: string;
                /** JSONP */
                callback?: string;
                endDate?: string;
                fetchBodies?: boolean;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                labels?: string;
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                orderBy?: string;
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                startDate?: string;
                status?: string | string[];
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                userId: string;
                view?: string;
            }): Request<PostUserInfosList>;
        }
        interface UsersResource {
            /** Gets one user by user_id. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                userId: string;
            }): Request<User>;
        }

        const blogs: BlogsResource;

        const blogUserInfos: BlogUserInfosResource;

        const comments: CommentsResource;

        const pages: PagesResource;

        const pageViews: PageViewsResource;

        const posts: PostsResource;

        const postUserInfos: PostUserInfosResource;

        const users: UsersResource;
    }
}
