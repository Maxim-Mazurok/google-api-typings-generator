/* This is stub file for gapi.client.bigquery definition tests */
/* IMPORTANT.
* This file was automatically generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
* In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
**/
gapi.load('client', () => {
    /** now we can use gapi.client */
    gapi.client.load('bigquery', 'v2', () => {
        /** now we can use gapi.client.bigquery */

        /** don't forget to authenticate your client before sending any request to resources: */
        /** declare client_id registered in Google Developers Console */
        const client_id = '<<PUT YOUR CLIENT ID HERE>>';
        const scope = [
            /** View and manage your data in Google BigQuery */
            'https://www.googleapis.com/auth/bigquery',
            /** Insert data into Google BigQuery */
            'https://www.googleapis.com/auth/bigquery.insertdata',
            /** View your data in Google BigQuery */
            'https://www.googleapis.com/auth/bigquery.readonly',
            /** View and manage your data across Google Cloud Platform services */
            'https://www.googleapis.com/auth/cloud-platform',
            /** View your data across Google Cloud Platform services */
            'https://www.googleapis.com/auth/cloud-platform.read-only',
            /** Manage your data and permissions in Google Cloud Storage */
            'https://www.googleapis.com/auth/devstorage.full_control',
            /** View your data in Google Cloud Storage */
            'https://www.googleapis.com/auth/devstorage.read_only',
            /** Manage your data in Google Cloud Storage */
            'https://www.googleapis.com/auth/devstorage.read_write',
        ];
        const immediate = false;
        gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
            if (authResult && !authResult.error) {
                /** handle successful authorization */
                run();
            } else {
                /** handle authorization error */
            }
        });
    });

    async function run() {
        /**
         * Deletes the dataset specified by the datasetId value. Before you can delete a dataset, you must delete all its tables, either manually or by specifying deleteContents. Immediately after
         * deletion, you can create another dataset with the same name.
         */
        await gapi.client.bigquery.datasets.delete({
            datasetId: "Test string",
            deleteContents: true,
            projectId: "Test string",
        });
        /** Returns the dataset specified by datasetID. */
        await gapi.client.bigquery.datasets.get({
            datasetId: "Test string",
            projectId: "Test string",
        });
        /** Creates a new empty dataset. */
        await gapi.client.bigquery.datasets.insert({
            projectId: "Test string",
        }, {
            access: [
                {
                    domain: "Test string",
                    groupByEmail: "Test string",
                    iamMember: "Test string",
                    role: "Test string",
                    specialGroup: "Test string",
                    userByEmail: "Test string",
                    view: {
                        datasetId: "Test string",
                        projectId: "Test string",
                        tableId: "Test string",
                    },
                }            ],
            creationTime: "Test string",
            datasetReference: {
                datasetId: "Test string",
                projectId: "Test string",
            },
            defaultEncryptionConfiguration: {
                kmsKeyName: "Test string",
            },
            defaultPartitionExpirationMs: "Test string",
            defaultTableExpirationMs: "Test string",
            description: "Test string",
            etag: "Test string",
            friendlyName: "Test string",
            id: "Test string",
            kind: "Test string",
            labels: {
                A: "Test string"            },
            lastModifiedTime: "Test string",
            location: "Test string",
            selfLink: "Test string",
        });
        /** Lists all datasets in the specified project to which you have been granted the READER dataset role. */
        await gapi.client.bigquery.datasets.list({
            all: true,
            filter: "Test string",
            maxResults: 42,
            pageToken: "Test string",
            projectId: "Test string",
        });
        /**
         * Updates information in an existing dataset. The update method replaces the entire dataset resource, whereas the patch method only replaces fields that are provided in the submitted
         * dataset resource. This method supports patch semantics.
         */
        await gapi.client.bigquery.datasets.patch({
            datasetId: "Test string",
            projectId: "Test string",
        }, {
            access: [
                {
                    domain: "Test string",
                    groupByEmail: "Test string",
                    iamMember: "Test string",
                    role: "Test string",
                    specialGroup: "Test string",
                    userByEmail: "Test string",
                    view: {
                        datasetId: "Test string",
                        projectId: "Test string",
                        tableId: "Test string",
                    },
                }            ],
            creationTime: "Test string",
            datasetReference: {
                datasetId: "Test string",
                projectId: "Test string",
            },
            defaultEncryptionConfiguration: {
                kmsKeyName: "Test string",
            },
            defaultPartitionExpirationMs: "Test string",
            defaultTableExpirationMs: "Test string",
            description: "Test string",
            etag: "Test string",
            friendlyName: "Test string",
            id: "Test string",
            kind: "Test string",
            labels: {
                A: "Test string"            },
            lastModifiedTime: "Test string",
            location: "Test string",
            selfLink: "Test string",
        });
        /**
         * Updates information in an existing dataset. The update method replaces the entire dataset resource, whereas the patch method only replaces fields that are provided in the submitted
         * dataset resource.
         */
        await gapi.client.bigquery.datasets.update({
            datasetId: "Test string",
            projectId: "Test string",
        }, {
            access: [
                {
                    domain: "Test string",
                    groupByEmail: "Test string",
                    iamMember: "Test string",
                    role: "Test string",
                    specialGroup: "Test string",
                    userByEmail: "Test string",
                    view: {
                        datasetId: "Test string",
                        projectId: "Test string",
                        tableId: "Test string",
                    },
                }            ],
            creationTime: "Test string",
            datasetReference: {
                datasetId: "Test string",
                projectId: "Test string",
            },
            defaultEncryptionConfiguration: {
                kmsKeyName: "Test string",
            },
            defaultPartitionExpirationMs: "Test string",
            defaultTableExpirationMs: "Test string",
            description: "Test string",
            etag: "Test string",
            friendlyName: "Test string",
            id: "Test string",
            kind: "Test string",
            labels: {
                A: "Test string"            },
            lastModifiedTime: "Test string",
            location: "Test string",
            selfLink: "Test string",
        });
        /**
         * Requests that a job be cancelled. This call will return immediately, and the client will need to poll for the job status to see if the cancel completed successfully. Cancelled jobs may
         * still incur costs.
         */
        await gapi.client.bigquery.jobs.cancel({
            jobId: "Test string",
            location: "Test string",
            projectId: "Test string",
        });
        /**
         * Returns information about a specific job. Job information is available for a six month period after creation. Requires that you're the person who ran the job, or have the Is Owner
         * project role.
         */
        await gapi.client.bigquery.jobs.get({
            jobId: "Test string",
            location: "Test string",
            projectId: "Test string",
        });
        /** Retrieves the results of a query job. */
        await gapi.client.bigquery.jobs.getQueryResults({
            jobId: "Test string",
            location: "Test string",
            maxResults: 42,
            pageToken: "Test string",
            projectId: "Test string",
            startIndex: "Test string",
            timeoutMs: 42,
        });
        /** Starts a new asynchronous job. Requires the Can View project role. */
        await gapi.client.bigquery.jobs.insert({
            projectId: "Test string",
        }, {
            configuration: {
                copy: {
                    createDisposition: "Test string",
                    destinationEncryptionConfiguration: {
                        kmsKeyName: "Test string",
                    },
                    destinationExpirationTime: 42,
                    destinationTable: {
                        datasetId: "Test string",
                        projectId: "Test string",
                        tableId: "Test string",
                    },
                    operationType: "Test string",
                    sourceTable: {
                        datasetId: "Test string",
                        projectId: "Test string",
                        tableId: "Test string",
                    },
                    sourceTables: [
                        {
                            datasetId: "Test string",
                            projectId: "Test string",
                            tableId: "Test string",
                        }                    ],
                    writeDisposition: "Test string",
                },
                dryRun: true,
                extract: {
                    compression: "Test string",
                    destinationFormat: "Test string",
                    destinationUri: "Test string",
                    destinationUris: [
                        "Test string"                    ],
                    fieldDelimiter: "Test string",
                    printHeader: true,
                    sourceModel: {
                        datasetId: "Test string",
                        modelId: "Test string",
                        projectId: "Test string",
                    },
                    sourceTable: {
                        datasetId: "Test string",
                        projectId: "Test string",
                        tableId: "Test string",
                    },
                    useAvroLogicalTypes: true,
                },
                jobTimeoutMs: "Test string",
                jobType: "Test string",
                labels: {
                    A: "Test string"                },
                load: {
                    allowJaggedRows: true,
                    allowQuotedNewlines: true,
                    autodetect: true,
                    clustering: {
                        fields: [
                            "Test string"                        ],
                    },
                    createDisposition: "Test string",
                    destinationEncryptionConfiguration: {
                        kmsKeyName: "Test string",
                    },
                    destinationTable: {
                        datasetId: "Test string",
                        projectId: "Test string",
                        tableId: "Test string",
                    },
                    destinationTableProperties: {
                        description: "Test string",
                        friendlyName: "Test string",
                        labels: {
                            A: "Test string"                        },
                    },
                    encoding: "Test string",
                    fieldDelimiter: "Test string",
                    hivePartitioningOptions: {
                        mode: "Test string",
                        sourceUriPrefix: "Test string",
                    },
                    ignoreUnknownValues: true,
                    maxBadRecords: 42,
                    nullMarker: "Test string",
                    projectionFields: [
                        "Test string"                    ],
                    quote: "Test string",
                    rangePartitioning: {
                        field: "Test string",
                        range: {
                            end: "Test string",
                            interval: "Test string",
                            start: "Test string",
                        },
                    },
                    schema: {
                        fields: [
                            {
                                categories: {
                                    names: [
                                        "Test string"                                    ],
                                },
                                description: "Test string",
                                fields: undefined,
                                mode: "Test string",
                                name: "Test string",
                                policyTags: {
                                    names: [
                                        "Test string"                                    ],
                                },
                                type: "Test string",
                            }                        ],
                    },
                    schemaInline: "Test string",
                    schemaInlineFormat: "Test string",
                    schemaUpdateOptions: [
                        "Test string"                    ],
                    skipLeadingRows: 42,
                    sourceFormat: "Test string",
                    sourceUris: [
                        "Test string"                    ],
                    timePartitioning: {
                        expirationMs: "Test string",
                        field: "Test string",
                        requirePartitionFilter: true,
                        type: "Test string",
                    },
                    useAvroLogicalTypes: true,
                    writeDisposition: "Test string",
                },
                query: {
                    allowLargeResults: true,
                    clustering: {
                        fields: [
                            "Test string"                        ],
                    },
                    connectionProperties: [
                        {
                            key: "Test string",
                            value: "Test string",
                        }                    ],
                    createDisposition: "Test string",
                    defaultDataset: {
                        datasetId: "Test string",
                        projectId: "Test string",
                    },
                    destinationEncryptionConfiguration: {
                        kmsKeyName: "Test string",
                    },
                    destinationTable: {
                        datasetId: "Test string",
                        projectId: "Test string",
                        tableId: "Test string",
                    },
                    flattenResults: true,
                    maximumBillingTier: 42,
                    maximumBytesBilled: "Test string",
                    parameterMode: "Test string",
                    preserveNulls: true,
                    priority: "Test string",
                    query: "Test string",
                    queryParameters: [
                        {
                            name: "Test string",
                            parameterType: {
                                arrayType: undefined,
                                structTypes: [
                                    {
                                        description: "Test string",
                                        name: "Test string",
                                        type: undefined,
                                    }                                ],
                                type: "Test string",
                            },
                            parameterValue: {
                                arrayValues: undefined,
                                structValues: undefined,
                                value: "Test string",
                            },
                        }                    ],
                    rangePartitioning: {
                        field: "Test string",
                        range: {
                            end: "Test string",
                            interval: "Test string",
                            start: "Test string",
                        },
                    },
                    schemaUpdateOptions: [
                        "Test string"                    ],
                    tableDefinitions: {
                        A: {
                            autodetect: true,
                            bigtableOptions: {
                                columnFamilies: [
                                    {
                                        columns: [
                                            {
                                                encoding: "Test string",
                                                fieldName: "Test string",
                                                onlyReadLatest: true,
                                                qualifierEncoded: "Test string",
                                                qualifierString: "Test string",
                                                type: "Test string",
                                            }                                        ],
                                        encoding: "Test string",
                                        familyId: "Test string",
                                        onlyReadLatest: true,
                                        type: "Test string",
                                    }                                ],
                                ignoreUnspecifiedColumnFamilies: true,
                                readRowkeyAsString: true,
                            },
                            compression: "Test string",
                            connectionId: "Test string",
                            csvOptions: {
                                allowJaggedRows: true,
                                allowQuotedNewlines: true,
                                encoding: "Test string",
                                fieldDelimiter: "Test string",
                                quote: "Test string",
                                skipLeadingRows: "Test string",
                            },
                            googleSheetsOptions: {
                                range: "Test string",
                                skipLeadingRows: "Test string",
                            },
                            hivePartitioningOptions: {
                                mode: "Test string",
                                sourceUriPrefix: "Test string",
                            },
                            ignoreUnknownValues: true,
                            maxBadRecords: 42,
                            schema: {
                                fields: [
                                    {
                                        categories: {
                                            names: [
                                                "Test string"                                            ],
                                        },
                                        description: "Test string",
                                        fields: undefined,
                                        mode: "Test string",
                                        name: "Test string",
                                        policyTags: {
                                            names: [
                                                "Test string"                                            ],
                                        },
                                        type: "Test string",
                                    }                                ],
                            },
                            sourceFormat: "Test string",
                            sourceUris: [
                                "Test string"                            ],
                        }                    },
                    timePartitioning: {
                        expirationMs: "Test string",
                        field: "Test string",
                        requirePartitionFilter: true,
                        type: "Test string",
                    },
                    useLegacySql: true,
                    useQueryCache: true,
                    userDefinedFunctionResources: [
                        {
                            inlineCode: "Test string",
                            resourceUri: "Test string",
                        }                    ],
                    writeDisposition: "Test string",
                },
            },
            etag: "Test string",
            id: "Test string",
            jobReference: {
                jobId: "Test string",
                location: "Test string",
                projectId: "Test string",
            },
            kind: "Test string",
            selfLink: "Test string",
            statistics: {
                completionRatio: 42,
                creationTime: "Test string",
                endTime: "Test string",
                extract: {
                    destinationUriFileCounts: [
                        "Test string"                    ],
                    inputBytes: "Test string",
                },
                load: {
                    badRecords: "Test string",
                    inputFileBytes: "Test string",
                    inputFiles: "Test string",
                    outputBytes: "Test string",
                    outputRows: "Test string",
                },
                numChildJobs: "Test string",
                parentJobId: "Test string",
                query: {
                    billingTier: 42,
                    cacheHit: true,
                    ddlAffectedRowAccessPolicyCount: "Test string",
                    ddlOperationPerformed: "Test string",
                    ddlTargetRoutine: {
                        datasetId: "Test string",
                        projectId: "Test string",
                        routineId: "Test string",
                    },
                    ddlTargetRowAccessPolicy: {
                        datasetId: "Test string",
                        policyId: "Test string",
                        projectId: "Test string",
                        tableId: "Test string",
                    },
                    ddlTargetTable: {
                        datasetId: "Test string",
                        projectId: "Test string",
                        tableId: "Test string",
                    },
                    estimatedBytesProcessed: "Test string",
                    modelTraining: {
                        currentIteration: 42,
                        expectedTotalIterations: "Test string",
                    },
                    modelTrainingCurrentIteration: 42,
                    modelTrainingExpectedTotalIteration: "Test string",
                    numDmlAffectedRows: "Test string",
                    queryPlan: [
                        {
                            completedParallelInputs: "Test string",
                            computeMsAvg: "Test string",
                            computeMsMax: "Test string",
                            computeRatioAvg: 42,
                            computeRatioMax: 42,
                            endMs: "Test string",
                            id: "Test string",
                            inputStages: [
                                "Test string"                            ],
                            name: "Test string",
                            parallelInputs: "Test string",
                            readMsAvg: "Test string",
                            readMsMax: "Test string",
                            readRatioAvg: 42,
                            readRatioMax: 42,
                            recordsRead: "Test string",
                            recordsWritten: "Test string",
                            shuffleOutputBytes: "Test string",
                            shuffleOutputBytesSpilled: "Test string",
                            slotMs: "Test string",
                            startMs: "Test string",
                            status: "Test string",
                            steps: [
                                {
                                    kind: "Test string",
                                    substeps: [
                                        "Test string"                                    ],
                                }                            ],
                            waitMsAvg: "Test string",
                            waitMsMax: "Test string",
                            waitRatioAvg: 42,
                            waitRatioMax: 42,
                            writeMsAvg: "Test string",
                            writeMsMax: "Test string",
                            writeRatioAvg: 42,
                            writeRatioMax: 42,
                        }                    ],
                    referencedRoutines: [
                        {
                            datasetId: "Test string",
                            projectId: "Test string",
                            routineId: "Test string",
                        }                    ],
                    referencedTables: [
                        {
                            datasetId: "Test string",
                            projectId: "Test string",
                            tableId: "Test string",
                        }                    ],
                    reservationUsage: [
                        {
                            name: "Test string",
                            slotMs: "Test string",
                        }                    ],
                    schema: {
                        fields: [
                            {
                                categories: {
                                    names: [
                                        "Test string"                                    ],
                                },
                                description: "Test string",
                                fields: undefined,
                                mode: "Test string",
                                name: "Test string",
                                policyTags: {
                                    names: [
                                        "Test string"                                    ],
                                },
                                type: "Test string",
                            }                        ],
                    },
                    statementType: "Test string",
                    timeline: [
                        {
                            activeUnits: "Test string",
                            completedUnits: "Test string",
                            elapsedMs: "Test string",
                            pendingUnits: "Test string",
                            totalSlotMs: "Test string",
                        }                    ],
                    totalBytesBilled: "Test string",
                    totalBytesProcessed: "Test string",
                    totalBytesProcessedAccuracy: "Test string",
                    totalPartitionsProcessed: "Test string",
                    totalSlotMs: "Test string",
                    undeclaredQueryParameters: [
                        {
                            name: "Test string",
                            parameterType: {
                                arrayType: undefined,
                                structTypes: [
                                    {
                                        description: "Test string",
                                        name: "Test string",
                                        type: undefined,
                                    }                                ],
                                type: "Test string",
                            },
                            parameterValue: {
                                arrayValues: undefined,
                                structValues: undefined,
                                value: "Test string",
                            },
                        }                    ],
                },
                quotaDeferments: [
                    "Test string"                ],
                reservation_id: "Test string",
                reservationUsage: [
                    {
                        name: "Test string",
                        slotMs: "Test string",
                    }                ],
                rowLevelSecurityStatistics: {
                    rowLevelSecurityApplied: true,
                },
                scriptStatistics: {
                    evaluationKind: "Test string",
                    stackFrames: [
                        {
                            endColumn: 42,
                            endLine: 42,
                            procedureId: "Test string",
                            startColumn: 42,
                            startLine: 42,
                            text: "Test string",
                        }                    ],
                },
                startTime: "Test string",
                totalBytesProcessed: "Test string",
                totalSlotMs: "Test string",
            },
            status: {
                errorResult: {
                    debugInfo: "Test string",
                    location: "Test string",
                    message: "Test string",
                    reason: "Test string",
                },
                errors: [
                    {
                        debugInfo: "Test string",
                        location: "Test string",
                        message: "Test string",
                        reason: "Test string",
                    }                ],
                state: "Test string",
            },
            user_email: "Test string",
        });
        /**
         * Lists all jobs that you started in the specified project. Job information is available for a six month period after creation. The job list is sorted in reverse chronological order, by
         * job creation time. Requires the Can View project role, or the Is Owner project role if you set the allUsers property.
         */
        await gapi.client.bigquery.jobs.list({
            allUsers: true,
            maxCreationTime: "Test string",
            maxResults: 42,
            minCreationTime: "Test string",
            pageToken: "Test string",
            parentJobId: "Test string",
            projectId: "Test string",
            projection: "Test string",
            stateFilter: "Test string",
        });
        /** Runs a BigQuery SQL query synchronously and returns query results if the query completes within a specified timeout. */
        await gapi.client.bigquery.jobs.query({
            projectId: "Test string",
        }, {
            connectionProperties: [
                {
                    key: "Test string",
                    value: "Test string",
                }            ],
            defaultDataset: {
                datasetId: "Test string",
                projectId: "Test string",
            },
            dryRun: true,
            kind: "Test string",
            labels: {
                A: "Test string"            },
            location: "Test string",
            maximumBytesBilled: "Test string",
            maxResults: 42,
            parameterMode: "Test string",
            preserveNulls: true,
            query: "Test string",
            queryParameters: [
                {
                    name: "Test string",
                    parameterType: {
                        arrayType: undefined,
                        structTypes: [
                            {
                                description: "Test string",
                                name: "Test string",
                                type: undefined,
                            }                        ],
                        type: "Test string",
                    },
                    parameterValue: {
                        arrayValues: undefined,
                        structValues: undefined,
                        value: "Test string",
                    },
                }            ],
            requestId: "Test string",
            timeoutMs: 42,
            useLegacySql: true,
            useQueryCache: true,
        });
        /** Deletes the model specified by modelId from the dataset. */
        await gapi.client.bigquery.models.delete({
            datasetId: "Test string",
            modelId: "Test string",
            projectId: "Test string",
        });
        /** Gets the specified model resource by model ID. */
        await gapi.client.bigquery.models.get({
            datasetId: "Test string",
            modelId: "Test string",
            projectId: "Test string",
        });
        /** Lists all models in the specified dataset. Requires the READER dataset role. */
        await gapi.client.bigquery.models.list({
            datasetId: "Test string",
            maxResults: 42,
            pageToken: "Test string",
            projectId: "Test string",
        });
        /** Patch specific fields in the specified model. */
        await gapi.client.bigquery.models.patch({
            datasetId: "Test string",
            modelId: "Test string",
            projectId: "Test string",
        }, {
            creationTime: "Test string",
            description: "Test string",
            encryptionConfiguration: {
                kmsKeyName: "Test string",
            },
            etag: "Test string",
            expirationTime: "Test string",
            featureColumns: [
                {
                    name: "Test string",
                    type: {
                        arrayElementType: undefined,
                        structType: {
                            fields: undefined,
                        },
                        typeKind: "Test string",
                    },
                }            ],
            friendlyName: "Test string",
            labelColumns: [
                {
                    name: "Test string",
                    type: {
                        arrayElementType: undefined,
                        structType: {
                            fields: undefined,
                        },
                        typeKind: "Test string",
                    },
                }            ],
            labels: {
                A: "Test string"            },
            lastModifiedTime: "Test string",
            location: "Test string",
            modelReference: {
                datasetId: "Test string",
                modelId: "Test string",
                projectId: "Test string",
            },
            modelType: "Test string",
            trainingRuns: [
                {
                    dataSplitResult: {
                        evaluationTable: {
                            datasetId: "Test string",
                            projectId: "Test string",
                            tableId: "Test string",
                        },
                        trainingTable: {
                            datasetId: "Test string",
                            projectId: "Test string",
                            tableId: "Test string",
                        },
                    },
                    evaluationMetrics: {
                        arimaForecastingMetrics: {
                            arimaFittingMetrics: [
                                {
                                    aic: 42,
                                    logLikelihood: 42,
                                    variance: 42,
                                }                            ],
                            arimaSingleModelForecastingMetrics: [
                                {
                                    arimaFittingMetrics: {
                                        aic: 42,
                                        logLikelihood: 42,
                                        variance: 42,
                                    },
                                    hasDrift: true,
                                    nonSeasonalOrder: {
                                        d: "Test string",
                                        p: "Test string",
                                        q: "Test string",
                                    },
                                    seasonalPeriods: [
                                        "Test string"                                    ],
                                    timeSeriesId: "Test string",
                                }                            ],
                            hasDrift: [
                                true                            ],
                            nonSeasonalOrder: [
                                {
                                    d: "Test string",
                                    p: "Test string",
                                    q: "Test string",
                                }                            ],
                            seasonalPeriods: [
                                "Test string"                            ],
                            timeSeriesId: [
                                "Test string"                            ],
                        },
                        binaryClassificationMetrics: {
                            aggregateClassificationMetrics: {
                                accuracy: 42,
                                f1Score: 42,
                                logLoss: 42,
                                precision: 42,
                                recall: 42,
                                rocAuc: 42,
                                threshold: 42,
                            },
                            binaryConfusionMatrixList: [
                                {
                                    accuracy: 42,
                                    f1Score: 42,
                                    falseNegatives: "Test string",
                                    falsePositives: "Test string",
                                    positiveClassThreshold: 42,
                                    precision: 42,
                                    recall: 42,
                                    trueNegatives: "Test string",
                                    truePositives: "Test string",
                                }                            ],
                            negativeLabel: "Test string",
                            positiveLabel: "Test string",
                        },
                        clusteringMetrics: {
                            clusters: [
                                {
                                    centroidId: "Test string",
                                    count: "Test string",
                                    featureValues: [
                                        {
                                            categoricalValue: {
                                                categoryCounts: [
                                                    {
                                                        category: "Test string",
                                                        count: "Test string",
                                                    }                                                ],
                                            },
                                            featureColumn: "Test string",
                                            numericalValue: 42,
                                        }                                    ],
                                }                            ],
                            daviesBouldinIndex: 42,
                            meanSquaredDistance: 42,
                        },
                        multiClassClassificationMetrics: {
                            aggregateClassificationMetrics: {
                                accuracy: 42,
                                f1Score: 42,
                                logLoss: 42,
                                precision: 42,
                                recall: 42,
                                rocAuc: 42,
                                threshold: 42,
                            },
                            confusionMatrixList: [
                                {
                                    confidenceThreshold: 42,
                                    rows: [
                                        {
                                            actualLabel: "Test string",
                                            entries: [
                                                {
                                                    itemCount: "Test string",
                                                    predictedLabel: "Test string",
                                                }                                            ],
                                        }                                    ],
                                }                            ],
                        },
                        rankingMetrics: {
                            averageRank: 42,
                            meanAveragePrecision: 42,
                            meanSquaredError: 42,
                            normalizedDiscountedCumulativeGain: 42,
                        },
                        regressionMetrics: {
                            meanAbsoluteError: 42,
                            meanSquaredError: 42,
                            meanSquaredLogError: 42,
                            medianAbsoluteError: 42,
                            rSquared: 42,
                        },
                    },
                    results: [
                        {
                            arimaResult: {
                                arimaModelInfo: [
                                    {
                                        arimaCoefficients: {
                                            autoRegressiveCoefficients: [
                                                42                                            ],
                                            interceptCoefficient: 42,
                                            movingAverageCoefficients: [
                                                42                                            ],
                                        },
                                        arimaFittingMetrics: {
                                            aic: 42,
                                            logLikelihood: 42,
                                            variance: 42,
                                        },
                                        hasDrift: true,
                                        nonSeasonalOrder: {
                                            d: "Test string",
                                            p: "Test string",
                                            q: "Test string",
                                        },
                                        seasonalPeriods: [
                                            "Test string"                                        ],
                                        timeSeriesId: "Test string",
                                    }                                ],
                                seasonalPeriods: [
                                    "Test string"                                ],
                            },
                            clusterInfos: [
                                {
                                    centroidId: "Test string",
                                    clusterRadius: 42,
                                    clusterSize: "Test string",
                                }                            ],
                            durationMs: "Test string",
                            evalLoss: 42,
                            index: 42,
                            learnRate: 42,
                            trainingLoss: 42,
                        }                    ],
                    startTime: "Test string",
                    trainingOptions: {
                        autoArima: true,
                        autoArimaMaxOrder: "Test string",
                        batchSize: "Test string",
                        dataFrequency: "Test string",
                        dataSplitColumn: "Test string",
                        dataSplitEvalFraction: 42,
                        dataSplitMethod: "Test string",
                        distanceType: "Test string",
                        dropout: 42,
                        earlyStop: true,
                        feedbackType: "Test string",
                        hiddenUnits: [
                            "Test string"                        ],
                        holidayRegion: "Test string",
                        horizon: "Test string",
                        includeDrift: true,
                        initialLearnRate: 42,
                        inputLabelColumns: [
                            "Test string"                        ],
                        itemColumn: "Test string",
                        kmeansInitializationColumn: "Test string",
                        kmeansInitializationMethod: "Test string",
                        l1Regularization: 42,
                        l2Regularization: 42,
                        labelClassWeights: {
                            A: 42                        },
                        learnRate: 42,
                        learnRateStrategy: "Test string",
                        lossType: "Test string",
                        maxIterations: "Test string",
                        maxTreeDepth: "Test string",
                        minRelativeProgress: 42,
                        minSplitLoss: 42,
                        modelUri: "Test string",
                        nonSeasonalOrder: {
                            d: "Test string",
                            p: "Test string",
                            q: "Test string",
                        },
                        numClusters: "Test string",
                        numFactors: "Test string",
                        optimizationStrategy: "Test string",
                        preserveInputStructs: true,
                        subsample: 42,
                        timeSeriesDataColumn: "Test string",
                        timeSeriesIdColumn: "Test string",
                        timeSeriesTimestampColumn: "Test string",
                        userColumn: "Test string",
                        walsAlpha: 42,
                        warmStart: true,
                    },
                }            ],
        });
        /** Returns the email address of the service account for your project used for interactions with Google Cloud KMS. */
        await gapi.client.bigquery.projects.getServiceAccount({
            projectId: "Test string",
        });
        /** Lists all projects to which you have been granted any project role. */
        await gapi.client.bigquery.projects.list({
            maxResults: 42,
            pageToken: "Test string",
        });
        /** Deletes the routine specified by routineId from the dataset. */
        await gapi.client.bigquery.routines.delete({
            datasetId: "Test string",
            projectId: "Test string",
            routineId: "Test string",
        });
        /** Gets the specified routine resource by routine ID. */
        await gapi.client.bigquery.routines.get({
            datasetId: "Test string",
            projectId: "Test string",
            readMask: "Test string",
            routineId: "Test string",
        });
        /** Creates a new routine in the dataset. */
        await gapi.client.bigquery.routines.insert({
            datasetId: "Test string",
            projectId: "Test string",
        }, {
            arguments: [
                {
                    argumentKind: "Test string",
                    dataType: {
                        arrayElementType: undefined,
                        structType: {
                            fields: [
                                {
                                    name: "Test string",
                                    type: undefined,
                                }                            ],
                        },
                        typeKind: "Test string",
                    },
                    mode: "Test string",
                    name: "Test string",
                }            ],
            creationTime: "Test string",
            definitionBody: "Test string",
            description: "Test string",
            determinismLevel: "Test string",
            etag: "Test string",
            importedLibraries: [
                "Test string"            ],
            language: "Test string",
            lastModifiedTime: "Test string",
            returnType: {
                arrayElementType: undefined,
                structType: {
                    fields: [
                        {
                            name: "Test string",
                            type: undefined,
                        }                    ],
                },
                typeKind: "Test string",
            },
            routineReference: {
                datasetId: "Test string",
                projectId: "Test string",
                routineId: "Test string",
            },
            routineType: "Test string",
        });
        /** Lists all routines in the specified dataset. Requires the READER dataset role. */
        await gapi.client.bigquery.routines.list({
            datasetId: "Test string",
            filter: "Test string",
            maxResults: 42,
            pageToken: "Test string",
            projectId: "Test string",
            readMask: "Test string",
        });
        /** Updates information in an existing routine. The update method replaces the entire Routine resource. */
        await gapi.client.bigquery.routines.update({
            datasetId: "Test string",
            projectId: "Test string",
            routineId: "Test string",
        }, {
            arguments: [
                {
                    argumentKind: "Test string",
                    dataType: {
                        arrayElementType: undefined,
                        structType: {
                            fields: [
                                {
                                    name: "Test string",
                                    type: undefined,
                                }                            ],
                        },
                        typeKind: "Test string",
                    },
                    mode: "Test string",
                    name: "Test string",
                }            ],
            creationTime: "Test string",
            definitionBody: "Test string",
            description: "Test string",
            determinismLevel: "Test string",
            etag: "Test string",
            importedLibraries: [
                "Test string"            ],
            language: "Test string",
            lastModifiedTime: "Test string",
            returnType: {
                arrayElementType: undefined,
                structType: {
                    fields: [
                        {
                            name: "Test string",
                            type: undefined,
                        }                    ],
                },
                typeKind: "Test string",
            },
            routineReference: {
                datasetId: "Test string",
                projectId: "Test string",
                routineId: "Test string",
            },
            routineType: "Test string",
        });
        /** Streams data into BigQuery one record at a time without needing to run a load job. Requires the WRITER dataset role. */
        await gapi.client.bigquery.tabledata.insertAll({
            datasetId: "Test string",
            projectId: "Test string",
            tableId: "Test string",
        }, {
            ignoreUnknownValues: true,
            kind: "Test string",
            rows: [
                {
                    insertId: "Test string",
                    json: {
                        A: 42                    },
                }            ],
            skipInvalidRows: true,
            templateSuffix: "Test string",
        });
        /** Retrieves table data from a specified set of rows. Requires the READER dataset role. */
        await gapi.client.bigquery.tabledata.list({
            datasetId: "Test string",
            maxResults: 42,
            pageToken: "Test string",
            projectId: "Test string",
            selectedFields: "Test string",
            startIndex: "Test string",
            tableId: "Test string",
        });
        /** Deletes the table specified by tableId from the dataset. If the table contains data, all the data will be deleted. */
        await gapi.client.bigquery.tables.delete({
            datasetId: "Test string",
            projectId: "Test string",
            tableId: "Test string",
        });
        /** Gets the specified table resource by table ID. This method does not return the data in the table, it only returns the table resource, which describes the structure of this table. */
        await gapi.client.bigquery.tables.get({
            datasetId: "Test string",
            projectId: "Test string",
            selectedFields: "Test string",
            tableId: "Test string",
        });
        /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
        await gapi.client.bigquery.tables.getIamPolicy({
            resource: "Test string",
        }, {
            options: {
                requestedPolicyVersion: 42,
            },
        });
        /** Creates a new, empty table in the dataset. */
        await gapi.client.bigquery.tables.insert({
            datasetId: "Test string",
            projectId: "Test string",
        }, {
            clustering: {
                fields: [
                    "Test string"                ],
            },
            creationTime: "Test string",
            description: "Test string",
            encryptionConfiguration: {
                kmsKeyName: "Test string",
            },
            etag: "Test string",
            expirationTime: "Test string",
            externalDataConfiguration: {
                autodetect: true,
                bigtableOptions: {
                    columnFamilies: [
                        {
                            columns: [
                                {
                                    encoding: "Test string",
                                    fieldName: "Test string",
                                    onlyReadLatest: true,
                                    qualifierEncoded: "Test string",
                                    qualifierString: "Test string",
                                    type: "Test string",
                                }                            ],
                            encoding: "Test string",
                            familyId: "Test string",
                            onlyReadLatest: true,
                            type: "Test string",
                        }                    ],
                    ignoreUnspecifiedColumnFamilies: true,
                    readRowkeyAsString: true,
                },
                compression: "Test string",
                connectionId: "Test string",
                csvOptions: {
                    allowJaggedRows: true,
                    allowQuotedNewlines: true,
                    encoding: "Test string",
                    fieldDelimiter: "Test string",
                    quote: "Test string",
                    skipLeadingRows: "Test string",
                },
                googleSheetsOptions: {
                    range: "Test string",
                    skipLeadingRows: "Test string",
                },
                hivePartitioningOptions: {
                    mode: "Test string",
                    sourceUriPrefix: "Test string",
                },
                ignoreUnknownValues: true,
                maxBadRecords: 42,
                schema: {
                    fields: [
                        {
                            categories: {
                                names: [
                                    "Test string"                                ],
                            },
                            description: "Test string",
                            fields: undefined,
                            mode: "Test string",
                            name: "Test string",
                            policyTags: {
                                names: [
                                    "Test string"                                ],
                            },
                            type: "Test string",
                        }                    ],
                },
                sourceFormat: "Test string",
                sourceUris: [
                    "Test string"                ],
            },
            friendlyName: "Test string",
            id: "Test string",
            kind: "Test string",
            labels: {
                A: "Test string"            },
            lastModifiedTime: "Test string",
            location: "Test string",
            materializedView: {
                enableRefresh: true,
                lastRefreshTime: "Test string",
                query: "Test string",
                refreshIntervalMs: "Test string",
            },
            model: {
                modelOptions: {
                    labels: [
                        "Test string"                    ],
                    lossType: "Test string",
                    modelType: "Test string",
                },
                trainingRuns: [
                    {
                        iterationResults: [
                            {
                                durationMs: "Test string",
                                evalLoss: 42,
                                index: 42,
                                learnRate: 42,
                                trainingLoss: 42,
                            }                        ],
                        startTime: "Test string",
                        state: "Test string",
                        trainingOptions: {
                            earlyStop: true,
                            l1Reg: 42,
                            l2Reg: 42,
                            learnRate: 42,
                            learnRateStrategy: "Test string",
                            lineSearchInitLearnRate: 42,
                            maxIteration: "Test string",
                            minRelProgress: 42,
                            warmStart: true,
                        },
                    }                ],
            },
            numBytes: "Test string",
            numLongTermBytes: "Test string",
            numPhysicalBytes: "Test string",
            numRows: "Test string",
            rangePartitioning: {
                field: "Test string",
                range: {
                    end: "Test string",
                    interval: "Test string",
                    start: "Test string",
                },
            },
            requirePartitionFilter: true,
            schema: {
                fields: [
                    {
                        categories: {
                            names: [
                                "Test string"                            ],
                        },
                        description: "Test string",
                        fields: undefined,
                        mode: "Test string",
                        name: "Test string",
                        policyTags: {
                            names: [
                                "Test string"                            ],
                        },
                        type: "Test string",
                    }                ],
            },
            selfLink: "Test string",
            snapshotDefinition: {
                baseTableReference: {
                    datasetId: "Test string",
                    projectId: "Test string",
                    tableId: "Test string",
                },
                snapshotTime: "Test string",
            },
            streamingBuffer: {
                estimatedBytes: "Test string",
                estimatedRows: "Test string",
                oldestEntryTime: "Test string",
            },
            tableReference: {
                datasetId: "Test string",
                projectId: "Test string",
                tableId: "Test string",
            },
            timePartitioning: {
                expirationMs: "Test string",
                field: "Test string",
                requirePartitionFilter: true,
                type: "Test string",
            },
            type: "Test string",
            view: {
                query: "Test string",
                useLegacySql: true,
                userDefinedFunctionResources: [
                    {
                        inlineCode: "Test string",
                        resourceUri: "Test string",
                    }                ],
            },
        });
        /** Lists all tables in the specified dataset. Requires the READER dataset role. */
        await gapi.client.bigquery.tables.list({
            datasetId: "Test string",
            maxResults: 42,
            pageToken: "Test string",
            projectId: "Test string",
        });
        /**
         * Updates information in an existing table. The update method replaces the entire table resource, whereas the patch method only replaces fields that are provided in the submitted table
         * resource. This method supports patch semantics.
         */
        await gapi.client.bigquery.tables.patch({
            datasetId: "Test string",
            projectId: "Test string",
            tableId: "Test string",
        }, {
            clustering: {
                fields: [
                    "Test string"                ],
            },
            creationTime: "Test string",
            description: "Test string",
            encryptionConfiguration: {
                kmsKeyName: "Test string",
            },
            etag: "Test string",
            expirationTime: "Test string",
            externalDataConfiguration: {
                autodetect: true,
                bigtableOptions: {
                    columnFamilies: [
                        {
                            columns: [
                                {
                                    encoding: "Test string",
                                    fieldName: "Test string",
                                    onlyReadLatest: true,
                                    qualifierEncoded: "Test string",
                                    qualifierString: "Test string",
                                    type: "Test string",
                                }                            ],
                            encoding: "Test string",
                            familyId: "Test string",
                            onlyReadLatest: true,
                            type: "Test string",
                        }                    ],
                    ignoreUnspecifiedColumnFamilies: true,
                    readRowkeyAsString: true,
                },
                compression: "Test string",
                connectionId: "Test string",
                csvOptions: {
                    allowJaggedRows: true,
                    allowQuotedNewlines: true,
                    encoding: "Test string",
                    fieldDelimiter: "Test string",
                    quote: "Test string",
                    skipLeadingRows: "Test string",
                },
                googleSheetsOptions: {
                    range: "Test string",
                    skipLeadingRows: "Test string",
                },
                hivePartitioningOptions: {
                    mode: "Test string",
                    sourceUriPrefix: "Test string",
                },
                ignoreUnknownValues: true,
                maxBadRecords: 42,
                schema: {
                    fields: [
                        {
                            categories: {
                                names: [
                                    "Test string"                                ],
                            },
                            description: "Test string",
                            fields: undefined,
                            mode: "Test string",
                            name: "Test string",
                            policyTags: {
                                names: [
                                    "Test string"                                ],
                            },
                            type: "Test string",
                        }                    ],
                },
                sourceFormat: "Test string",
                sourceUris: [
                    "Test string"                ],
            },
            friendlyName: "Test string",
            id: "Test string",
            kind: "Test string",
            labels: {
                A: "Test string"            },
            lastModifiedTime: "Test string",
            location: "Test string",
            materializedView: {
                enableRefresh: true,
                lastRefreshTime: "Test string",
                query: "Test string",
                refreshIntervalMs: "Test string",
            },
            model: {
                modelOptions: {
                    labels: [
                        "Test string"                    ],
                    lossType: "Test string",
                    modelType: "Test string",
                },
                trainingRuns: [
                    {
                        iterationResults: [
                            {
                                durationMs: "Test string",
                                evalLoss: 42,
                                index: 42,
                                learnRate: 42,
                                trainingLoss: 42,
                            }                        ],
                        startTime: "Test string",
                        state: "Test string",
                        trainingOptions: {
                            earlyStop: true,
                            l1Reg: 42,
                            l2Reg: 42,
                            learnRate: 42,
                            learnRateStrategy: "Test string",
                            lineSearchInitLearnRate: 42,
                            maxIteration: "Test string",
                            minRelProgress: 42,
                            warmStart: true,
                        },
                    }                ],
            },
            numBytes: "Test string",
            numLongTermBytes: "Test string",
            numPhysicalBytes: "Test string",
            numRows: "Test string",
            rangePartitioning: {
                field: "Test string",
                range: {
                    end: "Test string",
                    interval: "Test string",
                    start: "Test string",
                },
            },
            requirePartitionFilter: true,
            schema: {
                fields: [
                    {
                        categories: {
                            names: [
                                "Test string"                            ],
                        },
                        description: "Test string",
                        fields: undefined,
                        mode: "Test string",
                        name: "Test string",
                        policyTags: {
                            names: [
                                "Test string"                            ],
                        },
                        type: "Test string",
                    }                ],
            },
            selfLink: "Test string",
            snapshotDefinition: {
                baseTableReference: {
                    datasetId: "Test string",
                    projectId: "Test string",
                    tableId: "Test string",
                },
                snapshotTime: "Test string",
            },
            streamingBuffer: {
                estimatedBytes: "Test string",
                estimatedRows: "Test string",
                oldestEntryTime: "Test string",
            },
            tableReference: {
                datasetId: "Test string",
                projectId: "Test string",
                tableId: "Test string",
            },
            timePartitioning: {
                expirationMs: "Test string",
                field: "Test string",
                requirePartitionFilter: true,
                type: "Test string",
            },
            type: "Test string",
            view: {
                query: "Test string",
                useLegacySql: true,
                userDefinedFunctionResources: [
                    {
                        inlineCode: "Test string",
                        resourceUri: "Test string",
                    }                ],
            },
        });
        /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
        await gapi.client.bigquery.tables.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                auditConfigs: [
                    {
                        auditLogConfigs: [
                            {
                                exemptedMembers: [
                                    "Test string"                                ],
                                logType: "Test string",
                            }                        ],
                        service: "Test string",
                    }                ],
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"                        ],
                        role: "Test string",
                    }                ],
                etag: "Test string",
                version: 42,
            },
            updateMask: "Test string",
        });
        /**
         * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This
         * operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
         */
        await gapi.client.bigquery.tables.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"            ],
        });
        /**
         * Updates information in an existing table. The update method replaces the entire table resource, whereas the patch method only replaces fields that are provided in the submitted table
         * resource.
         */
        await gapi.client.bigquery.tables.update({
            datasetId: "Test string",
            projectId: "Test string",
            tableId: "Test string",
        }, {
            clustering: {
                fields: [
                    "Test string"                ],
            },
            creationTime: "Test string",
            description: "Test string",
            encryptionConfiguration: {
                kmsKeyName: "Test string",
            },
            etag: "Test string",
            expirationTime: "Test string",
            externalDataConfiguration: {
                autodetect: true,
                bigtableOptions: {
                    columnFamilies: [
                        {
                            columns: [
                                {
                                    encoding: "Test string",
                                    fieldName: "Test string",
                                    onlyReadLatest: true,
                                    qualifierEncoded: "Test string",
                                    qualifierString: "Test string",
                                    type: "Test string",
                                }                            ],
                            encoding: "Test string",
                            familyId: "Test string",
                            onlyReadLatest: true,
                            type: "Test string",
                        }                    ],
                    ignoreUnspecifiedColumnFamilies: true,
                    readRowkeyAsString: true,
                },
                compression: "Test string",
                connectionId: "Test string",
                csvOptions: {
                    allowJaggedRows: true,
                    allowQuotedNewlines: true,
                    encoding: "Test string",
                    fieldDelimiter: "Test string",
                    quote: "Test string",
                    skipLeadingRows: "Test string",
                },
                googleSheetsOptions: {
                    range: "Test string",
                    skipLeadingRows: "Test string",
                },
                hivePartitioningOptions: {
                    mode: "Test string",
                    sourceUriPrefix: "Test string",
                },
                ignoreUnknownValues: true,
                maxBadRecords: 42,
                schema: {
                    fields: [
                        {
                            categories: {
                                names: [
                                    "Test string"                                ],
                            },
                            description: "Test string",
                            fields: undefined,
                            mode: "Test string",
                            name: "Test string",
                            policyTags: {
                                names: [
                                    "Test string"                                ],
                            },
                            type: "Test string",
                        }                    ],
                },
                sourceFormat: "Test string",
                sourceUris: [
                    "Test string"                ],
            },
            friendlyName: "Test string",
            id: "Test string",
            kind: "Test string",
            labels: {
                A: "Test string"            },
            lastModifiedTime: "Test string",
            location: "Test string",
            materializedView: {
                enableRefresh: true,
                lastRefreshTime: "Test string",
                query: "Test string",
                refreshIntervalMs: "Test string",
            },
            model: {
                modelOptions: {
                    labels: [
                        "Test string"                    ],
                    lossType: "Test string",
                    modelType: "Test string",
                },
                trainingRuns: [
                    {
                        iterationResults: [
                            {
                                durationMs: "Test string",
                                evalLoss: 42,
                                index: 42,
                                learnRate: 42,
                                trainingLoss: 42,
                            }                        ],
                        startTime: "Test string",
                        state: "Test string",
                        trainingOptions: {
                            earlyStop: true,
                            l1Reg: 42,
                            l2Reg: 42,
                            learnRate: 42,
                            learnRateStrategy: "Test string",
                            lineSearchInitLearnRate: 42,
                            maxIteration: "Test string",
                            minRelProgress: 42,
                            warmStart: true,
                        },
                    }                ],
            },
            numBytes: "Test string",
            numLongTermBytes: "Test string",
            numPhysicalBytes: "Test string",
            numRows: "Test string",
            rangePartitioning: {
                field: "Test string",
                range: {
                    end: "Test string",
                    interval: "Test string",
                    start: "Test string",
                },
            },
            requirePartitionFilter: true,
            schema: {
                fields: [
                    {
                        categories: {
                            names: [
                                "Test string"                            ],
                        },
                        description: "Test string",
                        fields: undefined,
                        mode: "Test string",
                        name: "Test string",
                        policyTags: {
                            names: [
                                "Test string"                            ],
                        },
                        type: "Test string",
                    }                ],
            },
            selfLink: "Test string",
            snapshotDefinition: {
                baseTableReference: {
                    datasetId: "Test string",
                    projectId: "Test string",
                    tableId: "Test string",
                },
                snapshotTime: "Test string",
            },
            streamingBuffer: {
                estimatedBytes: "Test string",
                estimatedRows: "Test string",
                oldestEntryTime: "Test string",
            },
            tableReference: {
                datasetId: "Test string",
                projectId: "Test string",
                tableId: "Test string",
            },
            timePartitioning: {
                expirationMs: "Test string",
                field: "Test string",
                requirePartitionFilter: true,
                type: "Test string",
            },
            type: "Test string",
            view: {
                query: "Test string",
                useLegacySql: true,
                userDefinedFunctionResources: [
                    {
                        inlineCode: "Test string",
                        resourceUri: "Test string",
                    }                ],
            },
        });
    }
});
