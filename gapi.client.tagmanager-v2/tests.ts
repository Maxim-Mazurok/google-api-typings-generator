/* This is stub file for gapi.client.tagmanager-v2 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20240424

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://tagmanager.googleapis.com/$discovery/rest?version=v2'
  );
  /** now we can use gapi.client.tagmanager */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** Delete your Google Tag Manager containers */
    'https://www.googleapis.com/auth/tagmanager.delete.containers',
    /** Manage your Google Tag Manager container and its subcomponents, excluding versioning and publishing */
    'https://www.googleapis.com/auth/tagmanager.edit.containers',
    /** Manage your Google Tag Manager container versions */
    'https://www.googleapis.com/auth/tagmanager.edit.containerversions',
    /** View and manage your Google Tag Manager accounts */
    'https://www.googleapis.com/auth/tagmanager.manage.accounts',
    /** Manage user permissions of your Google Tag Manager account and container */
    'https://www.googleapis.com/auth/tagmanager.manage.users',
    /** Publish your Google Tag Manager container versions */
    'https://www.googleapis.com/auth/tagmanager.publish',
    /** View your Google Tag Manager container and its subcomponents */
    'https://www.googleapis.com/auth/tagmanager.readonly',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Gets a GTM Account. */
    await gapi.client.tagmanager.accounts.get({
      path: 'Test string',
    });
    /** Lists all GTM Accounts that a user has access to. */
    await gapi.client.tagmanager.accounts.list({
      includeGoogleTags: true,
      pageToken: 'Test string',
    });
    /** Updates a GTM Account. */
    await gapi.client.tagmanager.accounts.update(
      {
        fingerprint: 'Test string',
        path: 'Test string',
      },
      {
        accountId: 'Test string',
        features: {
          supportMultipleContainers: true,
          supportUserPermissions: true,
        },
        fingerprint: 'Test string',
        name: 'Test string',
        path: 'Test string',
        shareData: true,
        tagManagerUrl: 'Test string',
      }
    );
    /** Combines Containers. */
    await gapi.client.tagmanager.accounts.containers.combine({
      allowUserPermissionFeatureUpdate: true,
      containerId: 'Test string',
      path: 'Test string',
      settingSource: 'Test string',
    });
    /** Creates a Container. */
    await gapi.client.tagmanager.accounts.containers.create(
      {
        parent: 'Test string',
      },
      {
        accountId: 'Test string',
        containerId: 'Test string',
        domainName: ['Test string'],
        features: {
          supportBuiltInVariables: true,
          supportClients: true,
          supportEnvironments: true,
          supportFolders: true,
          supportGtagConfigs: true,
          supportTags: true,
          supportTemplates: true,
          supportTransformations: true,
          supportTriggers: true,
          supportUserPermissions: true,
          supportVariables: true,
          supportVersions: true,
          supportWorkspaces: true,
          supportZones: true,
        },
        fingerprint: 'Test string',
        name: 'Test string',
        notes: 'Test string',
        path: 'Test string',
        publicId: 'Test string',
        taggingServerUrls: ['Test string'],
        tagIds: ['Test string'],
        tagManagerUrl: 'Test string',
        usageContext: ['Test string'],
      }
    );
    /** Deletes a Container. */
    await gapi.client.tagmanager.accounts.containers.delete({
      path: 'Test string',
    });
    /** Gets a Container. */
    await gapi.client.tagmanager.accounts.containers.get({
      path: 'Test string',
    });
    /** Lists all Containers that belongs to a GTM Account. */
    await gapi.client.tagmanager.accounts.containers.list({
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Looks up a Container by destination ID. */
    await gapi.client.tagmanager.accounts.containers.lookup({
      destinationId: 'Test string',
    });
    /** Move Tag ID out of a Container. */
    await gapi.client.tagmanager.accounts.containers.move_tag_id({
      allowUserPermissionFeatureUpdate: true,
      copySettings: true,
      copyTermsOfService: true,
      copyUsers: true,
      path: 'Test string',
      tagId: 'Test string',
      tagName: 'Test string',
    });
    /** Gets the tagging snippet for a Container. */
    await gapi.client.tagmanager.accounts.containers.snippet({
      path: 'Test string',
    });
    /** Updates a Container. */
    await gapi.client.tagmanager.accounts.containers.update(
      {
        fingerprint: 'Test string',
        path: 'Test string',
      },
      {
        accountId: 'Test string',
        containerId: 'Test string',
        domainName: ['Test string'],
        features: {
          supportBuiltInVariables: true,
          supportClients: true,
          supportEnvironments: true,
          supportFolders: true,
          supportGtagConfigs: true,
          supportTags: true,
          supportTemplates: true,
          supportTransformations: true,
          supportTriggers: true,
          supportUserPermissions: true,
          supportVariables: true,
          supportVersions: true,
          supportWorkspaces: true,
          supportZones: true,
        },
        fingerprint: 'Test string',
        name: 'Test string',
        notes: 'Test string',
        path: 'Test string',
        publicId: 'Test string',
        taggingServerUrls: ['Test string'],
        tagIds: ['Test string'],
        tagManagerUrl: 'Test string',
        usageContext: ['Test string'],
      }
    );
    /** Gets a Destination. */
    await gapi.client.tagmanager.accounts.containers.destinations.get({
      path: 'Test string',
    });
    /** Adds a Destination to this Container and removes it from the Container to which it is currently linked. */
    await gapi.client.tagmanager.accounts.containers.destinations.link({
      allowUserPermissionFeatureUpdate: true,
      destinationId: 'Test string',
      parent: 'Test string',
    });
    /** Lists all Destinations linked to a GTM Container. */
    await gapi.client.tagmanager.accounts.containers.destinations.list({
      parent: 'Test string',
    });
    /** Creates a GTM Environment. */
    await gapi.client.tagmanager.accounts.containers.environments.create(
      {
        parent: 'Test string',
      },
      {
        accountId: 'Test string',
        authorizationCode: 'Test string',
        authorizationTimestamp: 'Test string',
        containerId: 'Test string',
        containerVersionId: 'Test string',
        description: 'Test string',
        enableDebug: true,
        environmentId: 'Test string',
        fingerprint: 'Test string',
        name: 'Test string',
        path: 'Test string',
        tagManagerUrl: 'Test string',
        type: 'Test string',
        url: 'Test string',
        workspaceId: 'Test string',
      }
    );
    /** Deletes a GTM Environment. */
    await gapi.client.tagmanager.accounts.containers.environments.delete({
      path: 'Test string',
    });
    /** Gets a GTM Environment. */
    await gapi.client.tagmanager.accounts.containers.environments.get({
      path: 'Test string',
    });
    /** Lists all GTM Environments of a GTM Container. */
    await gapi.client.tagmanager.accounts.containers.environments.list({
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Re-generates the authorization code for a GTM Environment. */
    await gapi.client.tagmanager.accounts.containers.environments.reauthorize(
      {
        path: 'Test string',
      },
      {
        accountId: 'Test string',
        authorizationCode: 'Test string',
        authorizationTimestamp: 'Test string',
        containerId: 'Test string',
        containerVersionId: 'Test string',
        description: 'Test string',
        enableDebug: true,
        environmentId: 'Test string',
        fingerprint: 'Test string',
        name: 'Test string',
        path: 'Test string',
        tagManagerUrl: 'Test string',
        type: 'Test string',
        url: 'Test string',
        workspaceId: 'Test string',
      }
    );
    /** Updates a GTM Environment. */
    await gapi.client.tagmanager.accounts.containers.environments.update(
      {
        fingerprint: 'Test string',
        path: 'Test string',
      },
      {
        accountId: 'Test string',
        authorizationCode: 'Test string',
        authorizationTimestamp: 'Test string',
        containerId: 'Test string',
        containerVersionId: 'Test string',
        description: 'Test string',
        enableDebug: true,
        environmentId: 'Test string',
        fingerprint: 'Test string',
        name: 'Test string',
        path: 'Test string',
        tagManagerUrl: 'Test string',
        type: 'Test string',
        url: 'Test string',
        workspaceId: 'Test string',
      }
    );
    /** Gets the latest container version header */
    await gapi.client.tagmanager.accounts.containers.version_headers.latest({
      parent: 'Test string',
    });
    /** Lists all Container Versions of a GTM Container. */
    await gapi.client.tagmanager.accounts.containers.version_headers.list({
      includeDeleted: true,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Deletes a Container Version. */
    await gapi.client.tagmanager.accounts.containers.versions.delete({
      path: 'Test string',
    });
    /** Gets a Container Version. */
    await gapi.client.tagmanager.accounts.containers.versions.get({
      containerVersionId: 'Test string',
      path: 'Test string',
    });
    /** Gets the live (i.e. published) container version */
    await gapi.client.tagmanager.accounts.containers.versions.live({
      parent: 'Test string',
    });
    /** Publishes a Container Version. */
    await gapi.client.tagmanager.accounts.containers.versions.publish({
      fingerprint: 'Test string',
      path: 'Test string',
    });
    /** Sets the latest version used for synchronization of workspaces when detecting conflicts and errors. */
    await gapi.client.tagmanager.accounts.containers.versions.set_latest({
      path: 'Test string',
    });
    /** Undeletes a Container Version. */
    await gapi.client.tagmanager.accounts.containers.versions.undelete({
      path: 'Test string',
    });
    /** Updates a Container Version. */
    await gapi.client.tagmanager.accounts.containers.versions.update(
      {
        fingerprint: 'Test string',
        path: 'Test string',
      },
      {
        accountId: 'Test string',
        builtInVariable: [
          {
            accountId: 'Test string',
            containerId: 'Test string',
            name: 'Test string',
            path: 'Test string',
            type: 'Test string',
            workspaceId: 'Test string',
          },
        ],
        client: [
          {
            accountId: 'Test string',
            clientId: 'Test string',
            containerId: 'Test string',
            fingerprint: 'Test string',
            name: 'Test string',
            notes: 'Test string',
            parameter: [
              {
                isWeakReference: true,
                key: 'Test string',
                list: undefined,
                map: undefined,
                type: 'Test string',
                value: 'Test string',
              },
            ],
            parentFolderId: 'Test string',
            path: 'Test string',
            priority: 42,
            tagManagerUrl: 'Test string',
            type: 'Test string',
            workspaceId: 'Test string',
          },
        ],
        container: {
          accountId: 'Test string',
          containerId: 'Test string',
          domainName: ['Test string'],
          features: {
            supportBuiltInVariables: true,
            supportClients: true,
            supportEnvironments: true,
            supportFolders: true,
            supportGtagConfigs: true,
            supportTags: true,
            supportTemplates: true,
            supportTransformations: true,
            supportTriggers: true,
            supportUserPermissions: true,
            supportVariables: true,
            supportVersions: true,
            supportWorkspaces: true,
            supportZones: true,
          },
          fingerprint: 'Test string',
          name: 'Test string',
          notes: 'Test string',
          path: 'Test string',
          publicId: 'Test string',
          taggingServerUrls: ['Test string'],
          tagIds: ['Test string'],
          tagManagerUrl: 'Test string',
          usageContext: ['Test string'],
        },
        containerId: 'Test string',
        containerVersionId: 'Test string',
        customTemplate: [
          {
            accountId: 'Test string',
            containerId: 'Test string',
            fingerprint: 'Test string',
            galleryReference: {
              host: 'Test string',
              isModified: true,
              owner: 'Test string',
              repository: 'Test string',
              signature: 'Test string',
              version: 'Test string',
            },
            name: 'Test string',
            path: 'Test string',
            tagManagerUrl: 'Test string',
            templateData: 'Test string',
            templateId: 'Test string',
            workspaceId: 'Test string',
          },
        ],
        deleted: true,
        description: 'Test string',
        fingerprint: 'Test string',
        folder: [
          {
            accountId: 'Test string',
            containerId: 'Test string',
            fingerprint: 'Test string',
            folderId: 'Test string',
            name: 'Test string',
            notes: 'Test string',
            path: 'Test string',
            tagManagerUrl: 'Test string',
            workspaceId: 'Test string',
          },
        ],
        gtagConfig: [
          {
            accountId: 'Test string',
            containerId: 'Test string',
            fingerprint: 'Test string',
            gtagConfigId: 'Test string',
            parameter: [
              {
                isWeakReference: true,
                key: 'Test string',
                list: undefined,
                map: undefined,
                type: 'Test string',
                value: 'Test string',
              },
            ],
            path: 'Test string',
            tagManagerUrl: 'Test string',
            type: 'Test string',
            workspaceId: 'Test string',
          },
        ],
        name: 'Test string',
        path: 'Test string',
        tag: [
          {
            accountId: 'Test string',
            blockingRuleId: ['Test string'],
            blockingTriggerId: ['Test string'],
            consentSettings: {
              consentStatus: 'Test string',
              consentType: {
                isWeakReference: true,
                key: 'Test string',
                list: undefined,
                map: undefined,
                type: 'Test string',
                value: 'Test string',
              },
            },
            containerId: 'Test string',
            fingerprint: 'Test string',
            firingRuleId: ['Test string'],
            firingTriggerId: ['Test string'],
            liveOnly: true,
            monitoringMetadata: {
              isWeakReference: true,
              key: 'Test string',
              list: undefined,
              map: undefined,
              type: 'Test string',
              value: 'Test string',
            },
            monitoringMetadataTagNameKey: 'Test string',
            name: 'Test string',
            notes: 'Test string',
            parameter: [
              {
                isWeakReference: true,
                key: 'Test string',
                list: undefined,
                map: undefined,
                type: 'Test string',
                value: 'Test string',
              },
            ],
            parentFolderId: 'Test string',
            path: 'Test string',
            paused: true,
            priority: {
              isWeakReference: true,
              key: 'Test string',
              list: undefined,
              map: undefined,
              type: 'Test string',
              value: 'Test string',
            },
            scheduleEndMs: 'Test string',
            scheduleStartMs: 'Test string',
            setupTag: [
              {
                stopOnSetupFailure: true,
                tagName: 'Test string',
              },
            ],
            tagFiringOption: 'Test string',
            tagId: 'Test string',
            tagManagerUrl: 'Test string',
            teardownTag: [
              {
                stopTeardownOnFailure: true,
                tagName: 'Test string',
              },
            ],
            type: 'Test string',
            workspaceId: 'Test string',
          },
        ],
        tagManagerUrl: 'Test string',
        transformation: [
          {
            accountId: 'Test string',
            containerId: 'Test string',
            fingerprint: 'Test string',
            name: 'Test string',
            notes: 'Test string',
            parameter: [
              {
                isWeakReference: true,
                key: 'Test string',
                list: undefined,
                map: undefined,
                type: 'Test string',
                value: 'Test string',
              },
            ],
            parentFolderId: 'Test string',
            path: 'Test string',
            tagManagerUrl: 'Test string',
            transformationId: 'Test string',
            type: 'Test string',
            workspaceId: 'Test string',
          },
        ],
        trigger: [
          {
            accountId: 'Test string',
            autoEventFilter: [
              {
                parameter: [
                  {
                    isWeakReference: true,
                    key: 'Test string',
                    list: undefined,
                    map: undefined,
                    type: 'Test string',
                    value: 'Test string',
                  },
                ],
                type: 'Test string',
              },
            ],
            checkValidation: {
              isWeakReference: true,
              key: 'Test string',
              list: undefined,
              map: undefined,
              type: 'Test string',
              value: 'Test string',
            },
            containerId: 'Test string',
            continuousTimeMinMilliseconds: {
              isWeakReference: true,
              key: 'Test string',
              list: undefined,
              map: undefined,
              type: 'Test string',
              value: 'Test string',
            },
            customEventFilter: [
              {
                parameter: [
                  {
                    isWeakReference: true,
                    key: 'Test string',
                    list: undefined,
                    map: undefined,
                    type: 'Test string',
                    value: 'Test string',
                  },
                ],
                type: 'Test string',
              },
            ],
            eventName: {
              isWeakReference: true,
              key: 'Test string',
              list: undefined,
              map: undefined,
              type: 'Test string',
              value: 'Test string',
            },
            filter: [
              {
                parameter: [
                  {
                    isWeakReference: true,
                    key: 'Test string',
                    list: undefined,
                    map: undefined,
                    type: 'Test string',
                    value: 'Test string',
                  },
                ],
                type: 'Test string',
              },
            ],
            fingerprint: 'Test string',
            horizontalScrollPercentageList: {
              isWeakReference: true,
              key: 'Test string',
              list: undefined,
              map: undefined,
              type: 'Test string',
              value: 'Test string',
            },
            interval: {
              isWeakReference: true,
              key: 'Test string',
              list: undefined,
              map: undefined,
              type: 'Test string',
              value: 'Test string',
            },
            intervalSeconds: {
              isWeakReference: true,
              key: 'Test string',
              list: undefined,
              map: undefined,
              type: 'Test string',
              value: 'Test string',
            },
            limit: {
              isWeakReference: true,
              key: 'Test string',
              list: undefined,
              map: undefined,
              type: 'Test string',
              value: 'Test string',
            },
            maxTimerLengthSeconds: {
              isWeakReference: true,
              key: 'Test string',
              list: undefined,
              map: undefined,
              type: 'Test string',
              value: 'Test string',
            },
            name: 'Test string',
            notes: 'Test string',
            parameter: [
              {
                isWeakReference: true,
                key: 'Test string',
                list: undefined,
                map: undefined,
                type: 'Test string',
                value: 'Test string',
              },
            ],
            parentFolderId: 'Test string',
            path: 'Test string',
            selector: {
              isWeakReference: true,
              key: 'Test string',
              list: undefined,
              map: undefined,
              type: 'Test string',
              value: 'Test string',
            },
            tagManagerUrl: 'Test string',
            totalTimeMinMilliseconds: {
              isWeakReference: true,
              key: 'Test string',
              list: undefined,
              map: undefined,
              type: 'Test string',
              value: 'Test string',
            },
            triggerId: 'Test string',
            type: 'Test string',
            uniqueTriggerId: {
              isWeakReference: true,
              key: 'Test string',
              list: undefined,
              map: undefined,
              type: 'Test string',
              value: 'Test string',
            },
            verticalScrollPercentageList: {
              isWeakReference: true,
              key: 'Test string',
              list: undefined,
              map: undefined,
              type: 'Test string',
              value: 'Test string',
            },
            visibilitySelector: {
              isWeakReference: true,
              key: 'Test string',
              list: undefined,
              map: undefined,
              type: 'Test string',
              value: 'Test string',
            },
            visiblePercentageMax: {
              isWeakReference: true,
              key: 'Test string',
              list: undefined,
              map: undefined,
              type: 'Test string',
              value: 'Test string',
            },
            visiblePercentageMin: {
              isWeakReference: true,
              key: 'Test string',
              list: undefined,
              map: undefined,
              type: 'Test string',
              value: 'Test string',
            },
            waitForTags: {
              isWeakReference: true,
              key: 'Test string',
              list: undefined,
              map: undefined,
              type: 'Test string',
              value: 'Test string',
            },
            waitForTagsTimeout: {
              isWeakReference: true,
              key: 'Test string',
              list: undefined,
              map: undefined,
              type: 'Test string',
              value: 'Test string',
            },
            workspaceId: 'Test string',
          },
        ],
        variable: [
          {
            accountId: 'Test string',
            containerId: 'Test string',
            disablingTriggerId: ['Test string'],
            enablingTriggerId: ['Test string'],
            fingerprint: 'Test string',
            formatValue: {
              caseConversionType: 'Test string',
              convertFalseToValue: {
                isWeakReference: true,
                key: 'Test string',
                list: undefined,
                map: undefined,
                type: 'Test string',
                value: 'Test string',
              },
              convertNullToValue: {
                isWeakReference: true,
                key: 'Test string',
                list: undefined,
                map: undefined,
                type: 'Test string',
                value: 'Test string',
              },
              convertTrueToValue: {
                isWeakReference: true,
                key: 'Test string',
                list: undefined,
                map: undefined,
                type: 'Test string',
                value: 'Test string',
              },
              convertUndefinedToValue: {
                isWeakReference: true,
                key: 'Test string',
                list: undefined,
                map: undefined,
                type: 'Test string',
                value: 'Test string',
              },
            },
            name: 'Test string',
            notes: 'Test string',
            parameter: [
              {
                isWeakReference: true,
                key: 'Test string',
                list: undefined,
                map: undefined,
                type: 'Test string',
                value: 'Test string',
              },
            ],
            parentFolderId: 'Test string',
            path: 'Test string',
            scheduleEndMs: 'Test string',
            scheduleStartMs: 'Test string',
            tagManagerUrl: 'Test string',
            type: 'Test string',
            variableId: 'Test string',
            workspaceId: 'Test string',
          },
        ],
        zone: [
          {
            accountId: 'Test string',
            boundary: {
              condition: [
                {
                  parameter: [
                    {
                      isWeakReference: true,
                      key: 'Test string',
                      list: undefined,
                      map: undefined,
                      type: 'Test string',
                      value: 'Test string',
                    },
                  ],
                  type: 'Test string',
                },
              ],
              customEvaluationTriggerId: ['Test string'],
            },
            childContainer: [
              {
                nickname: 'Test string',
                publicId: 'Test string',
              },
            ],
            containerId: 'Test string',
            fingerprint: 'Test string',
            name: 'Test string',
            notes: 'Test string',
            path: 'Test string',
            tagManagerUrl: 'Test string',
            typeRestriction: {
              enable: true,
              whitelistedTypeId: ['Test string'],
            },
            workspaceId: 'Test string',
            zoneId: 'Test string',
          },
        ],
      }
    );
    /** Creates a Workspace. */
    await gapi.client.tagmanager.accounts.containers.workspaces.create(
      {
        parent: 'Test string',
      },
      {
        accountId: 'Test string',
        containerId: 'Test string',
        description: 'Test string',
        fingerprint: 'Test string',
        name: 'Test string',
        path: 'Test string',
        tagManagerUrl: 'Test string',
        workspaceId: 'Test string',
      }
    );
    /** Creates a Container Version from the entities present in the workspace, deletes the workspace, and sets the base container version to the newly created version. */
    await gapi.client.tagmanager.accounts.containers.workspaces.create_version(
      {
        path: 'Test string',
      },
      {
        name: 'Test string',
        notes: 'Test string',
      }
    );
    /** Deletes a Workspace. */
    await gapi.client.tagmanager.accounts.containers.workspaces.delete({
      path: 'Test string',
    });
    /** Gets a Workspace. */
    await gapi.client.tagmanager.accounts.containers.workspaces.get({
      path: 'Test string',
    });
    /** Finds conflicting and modified entities in the workspace. */
    await gapi.client.tagmanager.accounts.containers.workspaces.getStatus({
      path: 'Test string',
    });
    /** Lists all Workspaces that belong to a GTM Container. */
    await gapi.client.tagmanager.accounts.containers.workspaces.list({
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Quick previews a workspace by creating a fake container version from all entities in the provided workspace. */
    await gapi.client.tagmanager.accounts.containers.workspaces.quick_preview({
      path: 'Test string',
    });
    /** Resolves a merge conflict for a workspace entity by updating it to the resolved entity passed in the request. */
    await gapi.client.tagmanager.accounts.containers.workspaces.resolve_conflict(
      {
        fingerprint: 'Test string',
        path: 'Test string',
      },
      {
        builtInVariable: {
          accountId: 'Test string',
          containerId: 'Test string',
          name: 'Test string',
          path: 'Test string',
          type: 'Test string',
          workspaceId: 'Test string',
        },
        changeStatus: 'Test string',
        client: {
          accountId: 'Test string',
          clientId: 'Test string',
          containerId: 'Test string',
          fingerprint: 'Test string',
          name: 'Test string',
          notes: 'Test string',
          parameter: [
            {
              isWeakReference: true,
              key: 'Test string',
              list: undefined,
              map: undefined,
              type: 'Test string',
              value: 'Test string',
            },
          ],
          parentFolderId: 'Test string',
          path: 'Test string',
          priority: 42,
          tagManagerUrl: 'Test string',
          type: 'Test string',
          workspaceId: 'Test string',
        },
        customTemplate: {
          accountId: 'Test string',
          containerId: 'Test string',
          fingerprint: 'Test string',
          galleryReference: {
            host: 'Test string',
            isModified: true,
            owner: 'Test string',
            repository: 'Test string',
            signature: 'Test string',
            version: 'Test string',
          },
          name: 'Test string',
          path: 'Test string',
          tagManagerUrl: 'Test string',
          templateData: 'Test string',
          templateId: 'Test string',
          workspaceId: 'Test string',
        },
        folder: {
          accountId: 'Test string',
          containerId: 'Test string',
          fingerprint: 'Test string',
          folderId: 'Test string',
          name: 'Test string',
          notes: 'Test string',
          path: 'Test string',
          tagManagerUrl: 'Test string',
          workspaceId: 'Test string',
        },
        gtagConfig: {
          accountId: 'Test string',
          containerId: 'Test string',
          fingerprint: 'Test string',
          gtagConfigId: 'Test string',
          parameter: [
            {
              isWeakReference: true,
              key: 'Test string',
              list: undefined,
              map: undefined,
              type: 'Test string',
              value: 'Test string',
            },
          ],
          path: 'Test string',
          tagManagerUrl: 'Test string',
          type: 'Test string',
          workspaceId: 'Test string',
        },
        tag: {
          accountId: 'Test string',
          blockingRuleId: ['Test string'],
          blockingTriggerId: ['Test string'],
          consentSettings: {
            consentStatus: 'Test string',
            consentType: {
              isWeakReference: true,
              key: 'Test string',
              list: undefined,
              map: undefined,
              type: 'Test string',
              value: 'Test string',
            },
          },
          containerId: 'Test string',
          fingerprint: 'Test string',
          firingRuleId: ['Test string'],
          firingTriggerId: ['Test string'],
          liveOnly: true,
          monitoringMetadata: {
            isWeakReference: true,
            key: 'Test string',
            list: undefined,
            map: undefined,
            type: 'Test string',
            value: 'Test string',
          },
          monitoringMetadataTagNameKey: 'Test string',
          name: 'Test string',
          notes: 'Test string',
          parameter: [
            {
              isWeakReference: true,
              key: 'Test string',
              list: undefined,
              map: undefined,
              type: 'Test string',
              value: 'Test string',
            },
          ],
          parentFolderId: 'Test string',
          path: 'Test string',
          paused: true,
          priority: {
            isWeakReference: true,
            key: 'Test string',
            list: undefined,
            map: undefined,
            type: 'Test string',
            value: 'Test string',
          },
          scheduleEndMs: 'Test string',
          scheduleStartMs: 'Test string',
          setupTag: [
            {
              stopOnSetupFailure: true,
              tagName: 'Test string',
            },
          ],
          tagFiringOption: 'Test string',
          tagId: 'Test string',
          tagManagerUrl: 'Test string',
          teardownTag: [
            {
              stopTeardownOnFailure: true,
              tagName: 'Test string',
            },
          ],
          type: 'Test string',
          workspaceId: 'Test string',
        },
        transformation: {
          accountId: 'Test string',
          containerId: 'Test string',
          fingerprint: 'Test string',
          name: 'Test string',
          notes: 'Test string',
          parameter: [
            {
              isWeakReference: true,
              key: 'Test string',
              list: undefined,
              map: undefined,
              type: 'Test string',
              value: 'Test string',
            },
          ],
          parentFolderId: 'Test string',
          path: 'Test string',
          tagManagerUrl: 'Test string',
          transformationId: 'Test string',
          type: 'Test string',
          workspaceId: 'Test string',
        },
        trigger: {
          accountId: 'Test string',
          autoEventFilter: [
            {
              parameter: [
                {
                  isWeakReference: true,
                  key: 'Test string',
                  list: undefined,
                  map: undefined,
                  type: 'Test string',
                  value: 'Test string',
                },
              ],
              type: 'Test string',
            },
          ],
          checkValidation: {
            isWeakReference: true,
            key: 'Test string',
            list: undefined,
            map: undefined,
            type: 'Test string',
            value: 'Test string',
          },
          containerId: 'Test string',
          continuousTimeMinMilliseconds: {
            isWeakReference: true,
            key: 'Test string',
            list: undefined,
            map: undefined,
            type: 'Test string',
            value: 'Test string',
          },
          customEventFilter: [
            {
              parameter: [
                {
                  isWeakReference: true,
                  key: 'Test string',
                  list: undefined,
                  map: undefined,
                  type: 'Test string',
                  value: 'Test string',
                },
              ],
              type: 'Test string',
            },
          ],
          eventName: {
            isWeakReference: true,
            key: 'Test string',
            list: undefined,
            map: undefined,
            type: 'Test string',
            value: 'Test string',
          },
          filter: [
            {
              parameter: [
                {
                  isWeakReference: true,
                  key: 'Test string',
                  list: undefined,
                  map: undefined,
                  type: 'Test string',
                  value: 'Test string',
                },
              ],
              type: 'Test string',
            },
          ],
          fingerprint: 'Test string',
          horizontalScrollPercentageList: {
            isWeakReference: true,
            key: 'Test string',
            list: undefined,
            map: undefined,
            type: 'Test string',
            value: 'Test string',
          },
          interval: {
            isWeakReference: true,
            key: 'Test string',
            list: undefined,
            map: undefined,
            type: 'Test string',
            value: 'Test string',
          },
          intervalSeconds: {
            isWeakReference: true,
            key: 'Test string',
            list: undefined,
            map: undefined,
            type: 'Test string',
            value: 'Test string',
          },
          limit: {
            isWeakReference: true,
            key: 'Test string',
            list: undefined,
            map: undefined,
            type: 'Test string',
            value: 'Test string',
          },
          maxTimerLengthSeconds: {
            isWeakReference: true,
            key: 'Test string',
            list: undefined,
            map: undefined,
            type: 'Test string',
            value: 'Test string',
          },
          name: 'Test string',
          notes: 'Test string',
          parameter: [
            {
              isWeakReference: true,
              key: 'Test string',
              list: undefined,
              map: undefined,
              type: 'Test string',
              value: 'Test string',
            },
          ],
          parentFolderId: 'Test string',
          path: 'Test string',
          selector: {
            isWeakReference: true,
            key: 'Test string',
            list: undefined,
            map: undefined,
            type: 'Test string',
            value: 'Test string',
          },
          tagManagerUrl: 'Test string',
          totalTimeMinMilliseconds: {
            isWeakReference: true,
            key: 'Test string',
            list: undefined,
            map: undefined,
            type: 'Test string',
            value: 'Test string',
          },
          triggerId: 'Test string',
          type: 'Test string',
          uniqueTriggerId: {
            isWeakReference: true,
            key: 'Test string',
            list: undefined,
            map: undefined,
            type: 'Test string',
            value: 'Test string',
          },
          verticalScrollPercentageList: {
            isWeakReference: true,
            key: 'Test string',
            list: undefined,
            map: undefined,
            type: 'Test string',
            value: 'Test string',
          },
          visibilitySelector: {
            isWeakReference: true,
            key: 'Test string',
            list: undefined,
            map: undefined,
            type: 'Test string',
            value: 'Test string',
          },
          visiblePercentageMax: {
            isWeakReference: true,
            key: 'Test string',
            list: undefined,
            map: undefined,
            type: 'Test string',
            value: 'Test string',
          },
          visiblePercentageMin: {
            isWeakReference: true,
            key: 'Test string',
            list: undefined,
            map: undefined,
            type: 'Test string',
            value: 'Test string',
          },
          waitForTags: {
            isWeakReference: true,
            key: 'Test string',
            list: undefined,
            map: undefined,
            type: 'Test string',
            value: 'Test string',
          },
          waitForTagsTimeout: {
            isWeakReference: true,
            key: 'Test string',
            list: undefined,
            map: undefined,
            type: 'Test string',
            value: 'Test string',
          },
          workspaceId: 'Test string',
        },
        variable: {
          accountId: 'Test string',
          containerId: 'Test string',
          disablingTriggerId: ['Test string'],
          enablingTriggerId: ['Test string'],
          fingerprint: 'Test string',
          formatValue: {
            caseConversionType: 'Test string',
            convertFalseToValue: {
              isWeakReference: true,
              key: 'Test string',
              list: undefined,
              map: undefined,
              type: 'Test string',
              value: 'Test string',
            },
            convertNullToValue: {
              isWeakReference: true,
              key: 'Test string',
              list: undefined,
              map: undefined,
              type: 'Test string',
              value: 'Test string',
            },
            convertTrueToValue: {
              isWeakReference: true,
              key: 'Test string',
              list: undefined,
              map: undefined,
              type: 'Test string',
              value: 'Test string',
            },
            convertUndefinedToValue: {
              isWeakReference: true,
              key: 'Test string',
              list: undefined,
              map: undefined,
              type: 'Test string',
              value: 'Test string',
            },
          },
          name: 'Test string',
          notes: 'Test string',
          parameter: [
            {
              isWeakReference: true,
              key: 'Test string',
              list: undefined,
              map: undefined,
              type: 'Test string',
              value: 'Test string',
            },
          ],
          parentFolderId: 'Test string',
          path: 'Test string',
          scheduleEndMs: 'Test string',
          scheduleStartMs: 'Test string',
          tagManagerUrl: 'Test string',
          type: 'Test string',
          variableId: 'Test string',
          workspaceId: 'Test string',
        },
        zone: {
          accountId: 'Test string',
          boundary: {
            condition: [
              {
                parameter: [
                  {
                    isWeakReference: true,
                    key: 'Test string',
                    list: undefined,
                    map: undefined,
                    type: 'Test string',
                    value: 'Test string',
                  },
                ],
                type: 'Test string',
              },
            ],
            customEvaluationTriggerId: ['Test string'],
          },
          childContainer: [
            {
              nickname: 'Test string',
              publicId: 'Test string',
            },
          ],
          containerId: 'Test string',
          fingerprint: 'Test string',
          name: 'Test string',
          notes: 'Test string',
          path: 'Test string',
          tagManagerUrl: 'Test string',
          typeRestriction: {
            enable: true,
            whitelistedTypeId: ['Test string'],
          },
          workspaceId: 'Test string',
          zoneId: 'Test string',
        },
      }
    );
    /** Syncs a workspace to the latest container version by updating all unmodified workspace entities and displaying conflicts for modified entities. */
    await gapi.client.tagmanager.accounts.containers.workspaces.sync({
      path: 'Test string',
    });
    /** Updates a Workspace. */
    await gapi.client.tagmanager.accounts.containers.workspaces.update(
      {
        fingerprint: 'Test string',
        path: 'Test string',
      },
      {
        accountId: 'Test string',
        containerId: 'Test string',
        description: 'Test string',
        fingerprint: 'Test string',
        name: 'Test string',
        path: 'Test string',
        tagManagerUrl: 'Test string',
        workspaceId: 'Test string',
      }
    );
    /** Creates one or more GTM Built-In Variables. */
    await gapi.client.tagmanager.accounts.containers.workspaces.built_in_variables.create(
      {
        parent: 'Test string',
        type: 'Test string',
      }
    );
    /** Deletes one or more GTM Built-In Variables. */
    await gapi.client.tagmanager.accounts.containers.workspaces.built_in_variables.delete(
      {
        path: 'Test string',
        type: 'Test string',
      }
    );
    /** Lists all the enabled Built-In Variables of a GTM Container. */
    await gapi.client.tagmanager.accounts.containers.workspaces.built_in_variables.list(
      {
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Reverts changes to a GTM Built-In Variables in a GTM Workspace. */
    await gapi.client.tagmanager.accounts.containers.workspaces.built_in_variables.revert(
      {
        path: 'Test string',
        type: 'Test string',
      }
    );
    /** Creates a GTM Client. */
    await gapi.client.tagmanager.accounts.containers.workspaces.clients.create(
      {
        parent: 'Test string',
      },
      {
        accountId: 'Test string',
        clientId: 'Test string',
        containerId: 'Test string',
        fingerprint: 'Test string',
        name: 'Test string',
        notes: 'Test string',
        parameter: [
          {
            isWeakReference: true,
            key: 'Test string',
            list: undefined,
            map: undefined,
            type: 'Test string',
            value: 'Test string',
          },
        ],
        parentFolderId: 'Test string',
        path: 'Test string',
        priority: 42,
        tagManagerUrl: 'Test string',
        type: 'Test string',
        workspaceId: 'Test string',
      }
    );
    /** Deletes a GTM Client. */
    await gapi.client.tagmanager.accounts.containers.workspaces.clients.delete({
      path: 'Test string',
    });
    /** Gets a GTM Client. */
    await gapi.client.tagmanager.accounts.containers.workspaces.clients.get({
      path: 'Test string',
    });
    /** Lists all GTM Clients of a GTM container workspace. */
    await gapi.client.tagmanager.accounts.containers.workspaces.clients.list({
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Reverts changes to a GTM Client in a GTM Workspace. */
    await gapi.client.tagmanager.accounts.containers.workspaces.clients.revert({
      fingerprint: 'Test string',
      path: 'Test string',
    });
    /** Updates a GTM Client. */
    await gapi.client.tagmanager.accounts.containers.workspaces.clients.update(
      {
        fingerprint: 'Test string',
        path: 'Test string',
      },
      {
        accountId: 'Test string',
        clientId: 'Test string',
        containerId: 'Test string',
        fingerprint: 'Test string',
        name: 'Test string',
        notes: 'Test string',
        parameter: [
          {
            isWeakReference: true,
            key: 'Test string',
            list: undefined,
            map: undefined,
            type: 'Test string',
            value: 'Test string',
          },
        ],
        parentFolderId: 'Test string',
        path: 'Test string',
        priority: 42,
        tagManagerUrl: 'Test string',
        type: 'Test string',
        workspaceId: 'Test string',
      }
    );
    /** Creates a GTM Folder. */
    await gapi.client.tagmanager.accounts.containers.workspaces.folders.create(
      {
        parent: 'Test string',
      },
      {
        accountId: 'Test string',
        containerId: 'Test string',
        fingerprint: 'Test string',
        folderId: 'Test string',
        name: 'Test string',
        notes: 'Test string',
        path: 'Test string',
        tagManagerUrl: 'Test string',
        workspaceId: 'Test string',
      }
    );
    /** Deletes a GTM Folder. */
    await gapi.client.tagmanager.accounts.containers.workspaces.folders.delete({
      path: 'Test string',
    });
    /** List all entities in a GTM Folder. */
    await gapi.client.tagmanager.accounts.containers.workspaces.folders.entities(
      {
        pageToken: 'Test string',
        path: 'Test string',
      }
    );
    /** Gets a GTM Folder. */
    await gapi.client.tagmanager.accounts.containers.workspaces.folders.get({
      path: 'Test string',
    });
    /** Lists all GTM Folders of a Container. */
    await gapi.client.tagmanager.accounts.containers.workspaces.folders.list({
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Moves entities to a GTM Folder. If {folder_id} in the request path equals 0, this will instead move entities out of the folder they currently belong to. */
    await gapi.client.tagmanager.accounts.containers.workspaces.folders.move_entities_to_folder(
      {
        path: 'Test string',
        tagId: 'Test string',
        triggerId: 'Test string',
        variableId: 'Test string',
      },
      {
        accountId: 'Test string',
        containerId: 'Test string',
        fingerprint: 'Test string',
        folderId: 'Test string',
        name: 'Test string',
        notes: 'Test string',
        path: 'Test string',
        tagManagerUrl: 'Test string',
        workspaceId: 'Test string',
      }
    );
    /** Reverts changes to a GTM Folder in a GTM Workspace. */
    await gapi.client.tagmanager.accounts.containers.workspaces.folders.revert({
      fingerprint: 'Test string',
      path: 'Test string',
    });
    /** Updates a GTM Folder. */
    await gapi.client.tagmanager.accounts.containers.workspaces.folders.update(
      {
        fingerprint: 'Test string',
        path: 'Test string',
      },
      {
        accountId: 'Test string',
        containerId: 'Test string',
        fingerprint: 'Test string',
        folderId: 'Test string',
        name: 'Test string',
        notes: 'Test string',
        path: 'Test string',
        tagManagerUrl: 'Test string',
        workspaceId: 'Test string',
      }
    );
    /** Creates a Google tag config. */
    await gapi.client.tagmanager.accounts.containers.workspaces.gtag_config.create(
      {
        parent: 'Test string',
      },
      {
        accountId: 'Test string',
        containerId: 'Test string',
        fingerprint: 'Test string',
        gtagConfigId: 'Test string',
        parameter: [
          {
            isWeakReference: true,
            key: 'Test string',
            list: undefined,
            map: undefined,
            type: 'Test string',
            value: 'Test string',
          },
        ],
        path: 'Test string',
        tagManagerUrl: 'Test string',
        type: 'Test string',
        workspaceId: 'Test string',
      }
    );
    /** Deletes a Google tag config. */
    await gapi.client.tagmanager.accounts.containers.workspaces.gtag_config.delete(
      {
        path: 'Test string',
      }
    );
    /** Gets a Google tag config. */
    await gapi.client.tagmanager.accounts.containers.workspaces.gtag_config.get(
      {
        path: 'Test string',
      }
    );
    /** Lists all Google tag configs in a Container. */
    await gapi.client.tagmanager.accounts.containers.workspaces.gtag_config.list(
      {
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Updates a Google tag config. */
    await gapi.client.tagmanager.accounts.containers.workspaces.gtag_config.update(
      {
        fingerprint: 'Test string',
        path: 'Test string',
      },
      {
        accountId: 'Test string',
        containerId: 'Test string',
        fingerprint: 'Test string',
        gtagConfigId: 'Test string',
        parameter: [
          {
            isWeakReference: true,
            key: 'Test string',
            list: undefined,
            map: undefined,
            type: 'Test string',
            value: 'Test string',
          },
        ],
        path: 'Test string',
        tagManagerUrl: 'Test string',
        type: 'Test string',
        workspaceId: 'Test string',
      }
    );
    /** Creates a GTM Tag. */
    await gapi.client.tagmanager.accounts.containers.workspaces.tags.create(
      {
        parent: 'Test string',
      },
      {
        accountId: 'Test string',
        blockingRuleId: ['Test string'],
        blockingTriggerId: ['Test string'],
        consentSettings: {
          consentStatus: 'Test string',
          consentType: {
            isWeakReference: true,
            key: 'Test string',
            list: undefined,
            map: undefined,
            type: 'Test string',
            value: 'Test string',
          },
        },
        containerId: 'Test string',
        fingerprint: 'Test string',
        firingRuleId: ['Test string'],
        firingTriggerId: ['Test string'],
        liveOnly: true,
        monitoringMetadata: {
          isWeakReference: true,
          key: 'Test string',
          list: undefined,
          map: undefined,
          type: 'Test string',
          value: 'Test string',
        },
        monitoringMetadataTagNameKey: 'Test string',
        name: 'Test string',
        notes: 'Test string',
        parameter: [
          {
            isWeakReference: true,
            key: 'Test string',
            list: undefined,
            map: undefined,
            type: 'Test string',
            value: 'Test string',
          },
        ],
        parentFolderId: 'Test string',
        path: 'Test string',
        paused: true,
        priority: {
          isWeakReference: true,
          key: 'Test string',
          list: undefined,
          map: undefined,
          type: 'Test string',
          value: 'Test string',
        },
        scheduleEndMs: 'Test string',
        scheduleStartMs: 'Test string',
        setupTag: [
          {
            stopOnSetupFailure: true,
            tagName: 'Test string',
          },
        ],
        tagFiringOption: 'Test string',
        tagId: 'Test string',
        tagManagerUrl: 'Test string',
        teardownTag: [
          {
            stopTeardownOnFailure: true,
            tagName: 'Test string',
          },
        ],
        type: 'Test string',
        workspaceId: 'Test string',
      }
    );
    /** Deletes a GTM Tag. */
    await gapi.client.tagmanager.accounts.containers.workspaces.tags.delete({
      path: 'Test string',
    });
    /** Gets a GTM Tag. */
    await gapi.client.tagmanager.accounts.containers.workspaces.tags.get({
      path: 'Test string',
    });
    /** Lists all GTM Tags of a Container. */
    await gapi.client.tagmanager.accounts.containers.workspaces.tags.list({
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Reverts changes to a GTM Tag in a GTM Workspace. */
    await gapi.client.tagmanager.accounts.containers.workspaces.tags.revert({
      fingerprint: 'Test string',
      path: 'Test string',
    });
    /** Updates a GTM Tag. */
    await gapi.client.tagmanager.accounts.containers.workspaces.tags.update(
      {
        fingerprint: 'Test string',
        path: 'Test string',
      },
      {
        accountId: 'Test string',
        blockingRuleId: ['Test string'],
        blockingTriggerId: ['Test string'],
        consentSettings: {
          consentStatus: 'Test string',
          consentType: {
            isWeakReference: true,
            key: 'Test string',
            list: undefined,
            map: undefined,
            type: 'Test string',
            value: 'Test string',
          },
        },
        containerId: 'Test string',
        fingerprint: 'Test string',
        firingRuleId: ['Test string'],
        firingTriggerId: ['Test string'],
        liveOnly: true,
        monitoringMetadata: {
          isWeakReference: true,
          key: 'Test string',
          list: undefined,
          map: undefined,
          type: 'Test string',
          value: 'Test string',
        },
        monitoringMetadataTagNameKey: 'Test string',
        name: 'Test string',
        notes: 'Test string',
        parameter: [
          {
            isWeakReference: true,
            key: 'Test string',
            list: undefined,
            map: undefined,
            type: 'Test string',
            value: 'Test string',
          },
        ],
        parentFolderId: 'Test string',
        path: 'Test string',
        paused: true,
        priority: {
          isWeakReference: true,
          key: 'Test string',
          list: undefined,
          map: undefined,
          type: 'Test string',
          value: 'Test string',
        },
        scheduleEndMs: 'Test string',
        scheduleStartMs: 'Test string',
        setupTag: [
          {
            stopOnSetupFailure: true,
            tagName: 'Test string',
          },
        ],
        tagFiringOption: 'Test string',
        tagId: 'Test string',
        tagManagerUrl: 'Test string',
        teardownTag: [
          {
            stopTeardownOnFailure: true,
            tagName: 'Test string',
          },
        ],
        type: 'Test string',
        workspaceId: 'Test string',
      }
    );
    /** Creates a GTM Custom Template. */
    await gapi.client.tagmanager.accounts.containers.workspaces.templates.create(
      {
        parent: 'Test string',
      },
      {
        accountId: 'Test string',
        containerId: 'Test string',
        fingerprint: 'Test string',
        galleryReference: {
          host: 'Test string',
          isModified: true,
          owner: 'Test string',
          repository: 'Test string',
          signature: 'Test string',
          version: 'Test string',
        },
        name: 'Test string',
        path: 'Test string',
        tagManagerUrl: 'Test string',
        templateData: 'Test string',
        templateId: 'Test string',
        workspaceId: 'Test string',
      }
    );
    /** Deletes a GTM Template. */
    await gapi.client.tagmanager.accounts.containers.workspaces.templates.delete(
      {
        path: 'Test string',
      }
    );
    /** Gets a GTM Template. */
    await gapi.client.tagmanager.accounts.containers.workspaces.templates.get({
      path: 'Test string',
    });
    /** Lists all GTM Templates of a GTM container workspace. */
    await gapi.client.tagmanager.accounts.containers.workspaces.templates.list({
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Reverts changes to a GTM Template in a GTM Workspace. */
    await gapi.client.tagmanager.accounts.containers.workspaces.templates.revert(
      {
        fingerprint: 'Test string',
        path: 'Test string',
      }
    );
    /** Updates a GTM Template. */
    await gapi.client.tagmanager.accounts.containers.workspaces.templates.update(
      {
        fingerprint: 'Test string',
        path: 'Test string',
      },
      {
        accountId: 'Test string',
        containerId: 'Test string',
        fingerprint: 'Test string',
        galleryReference: {
          host: 'Test string',
          isModified: true,
          owner: 'Test string',
          repository: 'Test string',
          signature: 'Test string',
          version: 'Test string',
        },
        name: 'Test string',
        path: 'Test string',
        tagManagerUrl: 'Test string',
        templateData: 'Test string',
        templateId: 'Test string',
        workspaceId: 'Test string',
      }
    );
    /** Creates a GTM Transformation. */
    await gapi.client.tagmanager.accounts.containers.workspaces.transformations.create(
      {
        parent: 'Test string',
      },
      {
        accountId: 'Test string',
        containerId: 'Test string',
        fingerprint: 'Test string',
        name: 'Test string',
        notes: 'Test string',
        parameter: [
          {
            isWeakReference: true,
            key: 'Test string',
            list: undefined,
            map: undefined,
            type: 'Test string',
            value: 'Test string',
          },
        ],
        parentFolderId: 'Test string',
        path: 'Test string',
        tagManagerUrl: 'Test string',
        transformationId: 'Test string',
        type: 'Test string',
        workspaceId: 'Test string',
      }
    );
    /** Deletes a GTM Transformation. */
    await gapi.client.tagmanager.accounts.containers.workspaces.transformations.delete(
      {
        path: 'Test string',
      }
    );
    /** Gets a GTM Transformation. */
    await gapi.client.tagmanager.accounts.containers.workspaces.transformations.get(
      {
        path: 'Test string',
      }
    );
    /** Lists all GTM Transformations of a GTM container workspace. */
    await gapi.client.tagmanager.accounts.containers.workspaces.transformations.list(
      {
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Reverts changes to a GTM Transformation in a GTM Workspace. */
    await gapi.client.tagmanager.accounts.containers.workspaces.transformations.revert(
      {
        fingerprint: 'Test string',
        path: 'Test string',
      }
    );
    /** Updates a GTM Transformation. */
    await gapi.client.tagmanager.accounts.containers.workspaces.transformations.update(
      {
        fingerprint: 'Test string',
        path: 'Test string',
      },
      {
        accountId: 'Test string',
        containerId: 'Test string',
        fingerprint: 'Test string',
        name: 'Test string',
        notes: 'Test string',
        parameter: [
          {
            isWeakReference: true,
            key: 'Test string',
            list: undefined,
            map: undefined,
            type: 'Test string',
            value: 'Test string',
          },
        ],
        parentFolderId: 'Test string',
        path: 'Test string',
        tagManagerUrl: 'Test string',
        transformationId: 'Test string',
        type: 'Test string',
        workspaceId: 'Test string',
      }
    );
    /** Creates a GTM Trigger. */
    await gapi.client.tagmanager.accounts.containers.workspaces.triggers.create(
      {
        parent: 'Test string',
      },
      {
        accountId: 'Test string',
        autoEventFilter: [
          {
            parameter: [
              {
                isWeakReference: true,
                key: 'Test string',
                list: undefined,
                map: undefined,
                type: 'Test string',
                value: 'Test string',
              },
            ],
            type: 'Test string',
          },
        ],
        checkValidation: {
          isWeakReference: true,
          key: 'Test string',
          list: undefined,
          map: undefined,
          type: 'Test string',
          value: 'Test string',
        },
        containerId: 'Test string',
        continuousTimeMinMilliseconds: {
          isWeakReference: true,
          key: 'Test string',
          list: undefined,
          map: undefined,
          type: 'Test string',
          value: 'Test string',
        },
        customEventFilter: [
          {
            parameter: [
              {
                isWeakReference: true,
                key: 'Test string',
                list: undefined,
                map: undefined,
                type: 'Test string',
                value: 'Test string',
              },
            ],
            type: 'Test string',
          },
        ],
        eventName: {
          isWeakReference: true,
          key: 'Test string',
          list: undefined,
          map: undefined,
          type: 'Test string',
          value: 'Test string',
        },
        filter: [
          {
            parameter: [
              {
                isWeakReference: true,
                key: 'Test string',
                list: undefined,
                map: undefined,
                type: 'Test string',
                value: 'Test string',
              },
            ],
            type: 'Test string',
          },
        ],
        fingerprint: 'Test string',
        horizontalScrollPercentageList: {
          isWeakReference: true,
          key: 'Test string',
          list: undefined,
          map: undefined,
          type: 'Test string',
          value: 'Test string',
        },
        interval: {
          isWeakReference: true,
          key: 'Test string',
          list: undefined,
          map: undefined,
          type: 'Test string',
          value: 'Test string',
        },
        intervalSeconds: {
          isWeakReference: true,
          key: 'Test string',
          list: undefined,
          map: undefined,
          type: 'Test string',
          value: 'Test string',
        },
        limit: {
          isWeakReference: true,
          key: 'Test string',
          list: undefined,
          map: undefined,
          type: 'Test string',
          value: 'Test string',
        },
        maxTimerLengthSeconds: {
          isWeakReference: true,
          key: 'Test string',
          list: undefined,
          map: undefined,
          type: 'Test string',
          value: 'Test string',
        },
        name: 'Test string',
        notes: 'Test string',
        parameter: [
          {
            isWeakReference: true,
            key: 'Test string',
            list: undefined,
            map: undefined,
            type: 'Test string',
            value: 'Test string',
          },
        ],
        parentFolderId: 'Test string',
        path: 'Test string',
        selector: {
          isWeakReference: true,
          key: 'Test string',
          list: undefined,
          map: undefined,
          type: 'Test string',
          value: 'Test string',
        },
        tagManagerUrl: 'Test string',
        totalTimeMinMilliseconds: {
          isWeakReference: true,
          key: 'Test string',
          list: undefined,
          map: undefined,
          type: 'Test string',
          value: 'Test string',
        },
        triggerId: 'Test string',
        type: 'Test string',
        uniqueTriggerId: {
          isWeakReference: true,
          key: 'Test string',
          list: undefined,
          map: undefined,
          type: 'Test string',
          value: 'Test string',
        },
        verticalScrollPercentageList: {
          isWeakReference: true,
          key: 'Test string',
          list: undefined,
          map: undefined,
          type: 'Test string',
          value: 'Test string',
        },
        visibilitySelector: {
          isWeakReference: true,
          key: 'Test string',
          list: undefined,
          map: undefined,
          type: 'Test string',
          value: 'Test string',
        },
        visiblePercentageMax: {
          isWeakReference: true,
          key: 'Test string',
          list: undefined,
          map: undefined,
          type: 'Test string',
          value: 'Test string',
        },
        visiblePercentageMin: {
          isWeakReference: true,
          key: 'Test string',
          list: undefined,
          map: undefined,
          type: 'Test string',
          value: 'Test string',
        },
        waitForTags: {
          isWeakReference: true,
          key: 'Test string',
          list: undefined,
          map: undefined,
          type: 'Test string',
          value: 'Test string',
        },
        waitForTagsTimeout: {
          isWeakReference: true,
          key: 'Test string',
          list: undefined,
          map: undefined,
          type: 'Test string',
          value: 'Test string',
        },
        workspaceId: 'Test string',
      }
    );
    /** Deletes a GTM Trigger. */
    await gapi.client.tagmanager.accounts.containers.workspaces.triggers.delete(
      {
        path: 'Test string',
      }
    );
    /** Gets a GTM Trigger. */
    await gapi.client.tagmanager.accounts.containers.workspaces.triggers.get({
      path: 'Test string',
    });
    /** Lists all GTM Triggers of a Container. */
    await gapi.client.tagmanager.accounts.containers.workspaces.triggers.list({
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Reverts changes to a GTM Trigger in a GTM Workspace. */
    await gapi.client.tagmanager.accounts.containers.workspaces.triggers.revert(
      {
        fingerprint: 'Test string',
        path: 'Test string',
      }
    );
    /** Updates a GTM Trigger. */
    await gapi.client.tagmanager.accounts.containers.workspaces.triggers.update(
      {
        fingerprint: 'Test string',
        path: 'Test string',
      },
      {
        accountId: 'Test string',
        autoEventFilter: [
          {
            parameter: [
              {
                isWeakReference: true,
                key: 'Test string',
                list: undefined,
                map: undefined,
                type: 'Test string',
                value: 'Test string',
              },
            ],
            type: 'Test string',
          },
        ],
        checkValidation: {
          isWeakReference: true,
          key: 'Test string',
          list: undefined,
          map: undefined,
          type: 'Test string',
          value: 'Test string',
        },
        containerId: 'Test string',
        continuousTimeMinMilliseconds: {
          isWeakReference: true,
          key: 'Test string',
          list: undefined,
          map: undefined,
          type: 'Test string',
          value: 'Test string',
        },
        customEventFilter: [
          {
            parameter: [
              {
                isWeakReference: true,
                key: 'Test string',
                list: undefined,
                map: undefined,
                type: 'Test string',
                value: 'Test string',
              },
            ],
            type: 'Test string',
          },
        ],
        eventName: {
          isWeakReference: true,
          key: 'Test string',
          list: undefined,
          map: undefined,
          type: 'Test string',
          value: 'Test string',
        },
        filter: [
          {
            parameter: [
              {
                isWeakReference: true,
                key: 'Test string',
                list: undefined,
                map: undefined,
                type: 'Test string',
                value: 'Test string',
              },
            ],
            type: 'Test string',
          },
        ],
        fingerprint: 'Test string',
        horizontalScrollPercentageList: {
          isWeakReference: true,
          key: 'Test string',
          list: undefined,
          map: undefined,
          type: 'Test string',
          value: 'Test string',
        },
        interval: {
          isWeakReference: true,
          key: 'Test string',
          list: undefined,
          map: undefined,
          type: 'Test string',
          value: 'Test string',
        },
        intervalSeconds: {
          isWeakReference: true,
          key: 'Test string',
          list: undefined,
          map: undefined,
          type: 'Test string',
          value: 'Test string',
        },
        limit: {
          isWeakReference: true,
          key: 'Test string',
          list: undefined,
          map: undefined,
          type: 'Test string',
          value: 'Test string',
        },
        maxTimerLengthSeconds: {
          isWeakReference: true,
          key: 'Test string',
          list: undefined,
          map: undefined,
          type: 'Test string',
          value: 'Test string',
        },
        name: 'Test string',
        notes: 'Test string',
        parameter: [
          {
            isWeakReference: true,
            key: 'Test string',
            list: undefined,
            map: undefined,
            type: 'Test string',
            value: 'Test string',
          },
        ],
        parentFolderId: 'Test string',
        path: 'Test string',
        selector: {
          isWeakReference: true,
          key: 'Test string',
          list: undefined,
          map: undefined,
          type: 'Test string',
          value: 'Test string',
        },
        tagManagerUrl: 'Test string',
        totalTimeMinMilliseconds: {
          isWeakReference: true,
          key: 'Test string',
          list: undefined,
          map: undefined,
          type: 'Test string',
          value: 'Test string',
        },
        triggerId: 'Test string',
        type: 'Test string',
        uniqueTriggerId: {
          isWeakReference: true,
          key: 'Test string',
          list: undefined,
          map: undefined,
          type: 'Test string',
          value: 'Test string',
        },
        verticalScrollPercentageList: {
          isWeakReference: true,
          key: 'Test string',
          list: undefined,
          map: undefined,
          type: 'Test string',
          value: 'Test string',
        },
        visibilitySelector: {
          isWeakReference: true,
          key: 'Test string',
          list: undefined,
          map: undefined,
          type: 'Test string',
          value: 'Test string',
        },
        visiblePercentageMax: {
          isWeakReference: true,
          key: 'Test string',
          list: undefined,
          map: undefined,
          type: 'Test string',
          value: 'Test string',
        },
        visiblePercentageMin: {
          isWeakReference: true,
          key: 'Test string',
          list: undefined,
          map: undefined,
          type: 'Test string',
          value: 'Test string',
        },
        waitForTags: {
          isWeakReference: true,
          key: 'Test string',
          list: undefined,
          map: undefined,
          type: 'Test string',
          value: 'Test string',
        },
        waitForTagsTimeout: {
          isWeakReference: true,
          key: 'Test string',
          list: undefined,
          map: undefined,
          type: 'Test string',
          value: 'Test string',
        },
        workspaceId: 'Test string',
      }
    );
    /** Creates a GTM Variable. */
    await gapi.client.tagmanager.accounts.containers.workspaces.variables.create(
      {
        parent: 'Test string',
      },
      {
        accountId: 'Test string',
        containerId: 'Test string',
        disablingTriggerId: ['Test string'],
        enablingTriggerId: ['Test string'],
        fingerprint: 'Test string',
        formatValue: {
          caseConversionType: 'Test string',
          convertFalseToValue: {
            isWeakReference: true,
            key: 'Test string',
            list: undefined,
            map: undefined,
            type: 'Test string',
            value: 'Test string',
          },
          convertNullToValue: {
            isWeakReference: true,
            key: 'Test string',
            list: undefined,
            map: undefined,
            type: 'Test string',
            value: 'Test string',
          },
          convertTrueToValue: {
            isWeakReference: true,
            key: 'Test string',
            list: undefined,
            map: undefined,
            type: 'Test string',
            value: 'Test string',
          },
          convertUndefinedToValue: {
            isWeakReference: true,
            key: 'Test string',
            list: undefined,
            map: undefined,
            type: 'Test string',
            value: 'Test string',
          },
        },
        name: 'Test string',
        notes: 'Test string',
        parameter: [
          {
            isWeakReference: true,
            key: 'Test string',
            list: undefined,
            map: undefined,
            type: 'Test string',
            value: 'Test string',
          },
        ],
        parentFolderId: 'Test string',
        path: 'Test string',
        scheduleEndMs: 'Test string',
        scheduleStartMs: 'Test string',
        tagManagerUrl: 'Test string',
        type: 'Test string',
        variableId: 'Test string',
        workspaceId: 'Test string',
      }
    );
    /** Deletes a GTM Variable. */
    await gapi.client.tagmanager.accounts.containers.workspaces.variables.delete(
      {
        path: 'Test string',
      }
    );
    /** Gets a GTM Variable. */
    await gapi.client.tagmanager.accounts.containers.workspaces.variables.get({
      path: 'Test string',
    });
    /** Lists all GTM Variables of a Container. */
    await gapi.client.tagmanager.accounts.containers.workspaces.variables.list({
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Reverts changes to a GTM Variable in a GTM Workspace. */
    await gapi.client.tagmanager.accounts.containers.workspaces.variables.revert(
      {
        fingerprint: 'Test string',
        path: 'Test string',
      }
    );
    /** Updates a GTM Variable. */
    await gapi.client.tagmanager.accounts.containers.workspaces.variables.update(
      {
        fingerprint: 'Test string',
        path: 'Test string',
      },
      {
        accountId: 'Test string',
        containerId: 'Test string',
        disablingTriggerId: ['Test string'],
        enablingTriggerId: ['Test string'],
        fingerprint: 'Test string',
        formatValue: {
          caseConversionType: 'Test string',
          convertFalseToValue: {
            isWeakReference: true,
            key: 'Test string',
            list: undefined,
            map: undefined,
            type: 'Test string',
            value: 'Test string',
          },
          convertNullToValue: {
            isWeakReference: true,
            key: 'Test string',
            list: undefined,
            map: undefined,
            type: 'Test string',
            value: 'Test string',
          },
          convertTrueToValue: {
            isWeakReference: true,
            key: 'Test string',
            list: undefined,
            map: undefined,
            type: 'Test string',
            value: 'Test string',
          },
          convertUndefinedToValue: {
            isWeakReference: true,
            key: 'Test string',
            list: undefined,
            map: undefined,
            type: 'Test string',
            value: 'Test string',
          },
        },
        name: 'Test string',
        notes: 'Test string',
        parameter: [
          {
            isWeakReference: true,
            key: 'Test string',
            list: undefined,
            map: undefined,
            type: 'Test string',
            value: 'Test string',
          },
        ],
        parentFolderId: 'Test string',
        path: 'Test string',
        scheduleEndMs: 'Test string',
        scheduleStartMs: 'Test string',
        tagManagerUrl: 'Test string',
        type: 'Test string',
        variableId: 'Test string',
        workspaceId: 'Test string',
      }
    );
    /** Creates a GTM Zone. */
    await gapi.client.tagmanager.accounts.containers.workspaces.zones.create(
      {
        parent: 'Test string',
      },
      {
        accountId: 'Test string',
        boundary: {
          condition: [
            {
              parameter: [
                {
                  isWeakReference: true,
                  key: 'Test string',
                  list: undefined,
                  map: undefined,
                  type: 'Test string',
                  value: 'Test string',
                },
              ],
              type: 'Test string',
            },
          ],
          customEvaluationTriggerId: ['Test string'],
        },
        childContainer: [
          {
            nickname: 'Test string',
            publicId: 'Test string',
          },
        ],
        containerId: 'Test string',
        fingerprint: 'Test string',
        name: 'Test string',
        notes: 'Test string',
        path: 'Test string',
        tagManagerUrl: 'Test string',
        typeRestriction: {
          enable: true,
          whitelistedTypeId: ['Test string'],
        },
        workspaceId: 'Test string',
        zoneId: 'Test string',
      }
    );
    /** Deletes a GTM Zone. */
    await gapi.client.tagmanager.accounts.containers.workspaces.zones.delete({
      path: 'Test string',
    });
    /** Gets a GTM Zone. */
    await gapi.client.tagmanager.accounts.containers.workspaces.zones.get({
      path: 'Test string',
    });
    /** Lists all GTM Zones of a GTM container workspace. */
    await gapi.client.tagmanager.accounts.containers.workspaces.zones.list({
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Reverts changes to a GTM Zone in a GTM Workspace. */
    await gapi.client.tagmanager.accounts.containers.workspaces.zones.revert({
      fingerprint: 'Test string',
      path: 'Test string',
    });
    /** Updates a GTM Zone. */
    await gapi.client.tagmanager.accounts.containers.workspaces.zones.update(
      {
        fingerprint: 'Test string',
        path: 'Test string',
      },
      {
        accountId: 'Test string',
        boundary: {
          condition: [
            {
              parameter: [
                {
                  isWeakReference: true,
                  key: 'Test string',
                  list: undefined,
                  map: undefined,
                  type: 'Test string',
                  value: 'Test string',
                },
              ],
              type: 'Test string',
            },
          ],
          customEvaluationTriggerId: ['Test string'],
        },
        childContainer: [
          {
            nickname: 'Test string',
            publicId: 'Test string',
          },
        ],
        containerId: 'Test string',
        fingerprint: 'Test string',
        name: 'Test string',
        notes: 'Test string',
        path: 'Test string',
        tagManagerUrl: 'Test string',
        typeRestriction: {
          enable: true,
          whitelistedTypeId: ['Test string'],
        },
        workspaceId: 'Test string',
        zoneId: 'Test string',
      }
    );
    /** Creates a user's Account & Container access. */
    await gapi.client.tagmanager.accounts.user_permissions.create(
      {
        parent: 'Test string',
      },
      {
        accountAccess: {
          permission: 'Test string',
        },
        accountId: 'Test string',
        containerAccess: [
          {
            containerId: 'Test string',
            permission: 'Test string',
          },
        ],
        emailAddress: 'Test string',
        path: 'Test string',
      }
    );
    /** Removes a user from the account, revoking access to it and all of its containers. */
    await gapi.client.tagmanager.accounts.user_permissions.delete({
      path: 'Test string',
    });
    /** Gets a user's Account & Container access. */
    await gapi.client.tagmanager.accounts.user_permissions.get({
      path: 'Test string',
    });
    /** List all users that have access to the account along with Account and Container user access granted to each of them. */
    await gapi.client.tagmanager.accounts.user_permissions.list({
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates a user's Account & Container access. */
    await gapi.client.tagmanager.accounts.user_permissions.update(
      {
        path: 'Test string',
      },
      {
        accountAccess: {
          permission: 'Test string',
        },
        accountId: 'Test string',
        containerAccess: [
          {
            containerId: 'Test string',
            permission: 'Test string',
          },
        ],
        emailAddress: 'Test string',
        path: 'Test string',
      }
    );
  }
});
