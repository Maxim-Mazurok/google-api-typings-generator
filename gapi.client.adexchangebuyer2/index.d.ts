// Type definitions for non-npm package Ad Exchange Buyer API II v2beta1 2.0
// Project: https://developers.google.com/authorized-buyers/apis/reference/rest/
// Definitions by: Maxim Mazurok <https://github.com/Maxim-Mazurok>
//                 Google API Typings Generator <https://github.com/google-api-typings-generator>
//                 Nick Amoscato <https://github.com/namoscato>
//                 Declan Vong <https://github.com/declanvong>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 2.8

// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
// Generated from: https://adexchangebuyer.googleapis.com/$discovery/rest?version=v2beta1
// Revision: 20200822

/// <reference types="gapi.client" />

declare namespace gapi.client {
    /** Load Ad Exchange Buyer API II v2beta1 */
    function load(name: "adexchangebuyer2", version: "v2beta1"): PromiseLike<void>;
    function load(name: "adexchangebuyer2", version: "v2beta1", callback: () => any): void;

    namespace adexchangebuyer2 {
        interface AbsoluteDateRange {
            /** The end date of the range (inclusive). Must be within the 30 days leading up to current date, and must be equal to or after start_date. */
            endDate?: Date;
            /** The start date of the range (inclusive). Must be within the 30 days leading up to current date, and must be equal to or before end_date. */
            startDate?: Date;
        }
        interface AcceptProposalRequest {
            /** The last known client revision number of the proposal. */
            proposalRevision?: string;
        }
        interface AddDealAssociationRequest {
            /** The association between a creative and a deal that should be added. */
            association?: CreativeDealAssociation;
        }
        interface AddNoteRequest {
            /** Details of the note to add. */
            note?: Note;
        }
        interface AdSize {
            /** The height of the ad slot in pixels. This field will be present only when size type is `PIXEL`. */
            height?: string;
            /** The size type of the ad slot. */
            sizeType?: string;
            /** The width of the ad slot in pixels. This field will be present only when size type is `PIXEL`. */
            width?: string;
        }
        interface AdTechnologyProviders {
            /**
             * The detected ad technology provider IDs for this creative. See https://storage.googleapis.com/adx-rtb-dictionaries/providers.csv for mapping of provider ID to provided name, a
             * privacy policy URL, and a list of domains which can be attributed to the provider. If the creative contains provider IDs that are outside of those listed in the
             * `BidRequest.adslot.consented_providers_settings.consented_providers` field on the (Google bid
             * protocol)[https://developers.google.com/authorized-buyers/rtb/downloads/realtime-bidding-proto] and the `BidRequest.user.ext.consented_providers_settings.consented_providers` field
             * on the (OpenRTB protocol)[https://developers.google.com/authorized-buyers/rtb/downloads/openrtb-adx-proto], and a bid is submitted with that creative for an impression that will
             * serve to an EEA user, the bid will be filtered before the auction.
             */
            detectedProviderIds?: string[];
            /**
             * Whether the creative contains an unidentified ad technology provider. If true for a given creative, any bid submitted with that creative for an impression that will serve to an EEA
             * user will be filtered before the auction.
             */
            hasUnidentifiedProvider?: boolean;
        }
        interface AppContext {
            /** The app types this restriction applies to. */
            appTypes?: string[];
        }
        interface AuctionContext {
            /** The auction types this restriction applies to. */
            auctionTypes?: string[];
        }
        interface BidMetricsRow {
            /** The number of bids that Ad Exchange received from the buyer. */
            bids?: MetricValue;
            /** The number of bids that were permitted to compete in the auction. */
            bidsInAuction?: MetricValue;
            /** The number of bids for which the buyer was billed. */
            billedImpressions?: MetricValue;
            /** The number of bids that won the auction. */
            impressionsWon?: MetricValue;
            /** The number of bids for which the corresponding impression was measurable for viewability (as defined by Active View). */
            measurableImpressions?: MetricValue;
            /** The number of bids that won the auction and also won the mediation waterfall (if any). */
            reachedQueries?: MetricValue;
            /** The values of all dimensions associated with metric values in this row. */
            rowDimensions?: RowDimensions;
            /** The number of bids for which the corresponding impression was viewable (as defined by Active View). */
            viewableImpressions?: MetricValue;
        }
        interface BidResponseWithoutBidsStatusRow {
            /** The number of impressions for which there was a bid response with the specified status. */
            impressionCount?: MetricValue;
            /** The values of all dimensions associated with metric values in this row. */
            rowDimensions?: RowDimensions;
            /** The status specifying why the bid responses were considered to have no applicable bids. */
            status?: string;
        }
        interface Buyer {
            /** Authorized Buyers account ID of the buyer. */
            accountId?: string;
        }
        interface CalloutStatusRow {
            /** The ID of the callout status. See [callout-status-codes](https://developers.google.com/authorized-buyers/rtb/downloads/callout-status-codes). */
            calloutStatusId?: number;
            /** The number of impressions for which there was a bid request or bid response with the specified callout status. */
            impressionCount?: MetricValue;
            /** The values of all dimensions associated with metric values in this row. */
            rowDimensions?: RowDimensions;
        }
        // tslint:disable-next-line:no-empty-interface
        interface CancelNegotiationRequest {
        }
        interface Client {
            /** The globally-unique numerical ID of the client. The value of this field is ignored in create and update operations. */
            clientAccountId?: string;
            /**
             * Name used to represent this client to publishers. You may have multiple clients that map to the same entity, but for each client the combination of `clientName` and entity must be
             * unique. You can specify this field as empty.
             */
            clientName?: string;
            /**
             * Numerical identifier of the client entity. The entity can be an advertiser, a brand, or an agency. This identifier is unique among all the entities with the same type. The value of
             * this field is ignored if the entity type is not provided. A list of all known advertisers with their identifiers is available in the
             * [advertisers.txt](https://storage.googleapis.com/adx-rtb-dictionaries/advertisers.txt) file. A list of all known brands with their identifiers is available in the
             * [brands.txt](https://storage.googleapis.com/adx-rtb-dictionaries/brands.txt) file. A list of all known agencies with their identifiers is available in the
             * [agencies.txt](https://storage.googleapis.com/adx-rtb-dictionaries/agencies.txt) file.
             */
            entityId?: string;
            /** The name of the entity. This field is automatically fetched based on the type and ID. The value of this field is ignored in create and update operations. */
            entityName?: string;
            /** An optional field for specifying the type of the client entity: `ADVERTISER`, `BRAND`, or `AGENCY`. */
            entityType?: string;
            /**
             * Optional arbitrary unique identifier of this client buyer from the standpoint of its Ad Exchange sponsor buyer. This field can be used to associate a client buyer with the
             * identifier in the namespace of its sponsor buyer, lookup client buyers by that identifier and verify whether an Ad Exchange counterpart of a given client buyer already exists. If
             * present, must be unique among all the client buyers for its Ad Exchange sponsor buyer.
             */
            partnerClientId?: string;
            /**
             * The role which is assigned to the client buyer. Each role implies a set of permissions granted to the client. Must be one of `CLIENT_DEAL_VIEWER`, `CLIENT_DEAL_NEGOTIATOR` or
             * `CLIENT_DEAL_APPROVER`.
             */
            role?: string;
            /** The status of the client buyer. */
            status?: string;
            /** Whether the client buyer will be visible to sellers. */
            visibleToSeller?: boolean;
        }
        interface ClientUser {
            /**
             * Numerical account ID of the client buyer with which the user is associated; the buyer must be a client of the current sponsor buyer. The value of this field is ignored in an update
             * operation.
             */
            clientAccountId?: string;
            /** User's email address. The value of this field is ignored in an update operation. */
            email?: string;
            /** The status of the client user. */
            status?: string;
            /** The unique numerical ID of the client user that has accepted an invitation. The value of this field is ignored in an update operation. */
            userId?: string;
        }
        interface ClientUserInvitation {
            /** Numerical account ID of the client buyer that the invited user is associated with. The value of this field is ignored in create operations. */
            clientAccountId?: string;
            /** The email address to which the invitation is sent. Email addresses should be unique among all client users under each sponsor buyer. */
            email?: string;
            /** The unique numerical ID of the invitation that is sent to the user. The value of this field is ignored in create operations. */
            invitationId?: string;
        }
        // tslint:disable-next-line:no-empty-interface
        interface CompleteSetupRequest {
        }
        interface ContactInformation {
            /** Email address for the contact. */
            email?: string;
            /** The name of the contact. */
            name?: string;
        }
        interface Correction {
            /** The contexts for the correction. */
            contexts?: ServingContext[];
            /** Additional details about what was corrected. */
            details?: string[];
            /** The type of correction that was applied to the creative. */
            type?: string;
        }
        interface Creative {
            /** The account that this creative belongs to. Can be used to filter the response of the creatives.list method. */
            accountId?: string;
            /** The link to AdChoices destination page. */
            adChoicesDestinationUrl?: string;
            /** Output only. The detected ad technology providers. */
            adTechnologyProviders?: AdTechnologyProviders;
            /** The name of the company being advertised in the creative. */
            advertiserName?: string;
            /** The agency ID for this creative. */
            agencyId?: string;
            /** Output only. The last update timestamp of the creative via API. */
            apiUpdateTime?: string;
            /** All attributes for the ads that may be shown from this creative. Can be used to filter the response of the creatives.list method. */
            attributes?: string[];
            /** The set of destination URLs for the creative. */
            clickThroughUrls?: string[];
            /** Output only. Shows any corrections that were applied to this creative. */
            corrections?: Correction[];
            /** The buyer-defined creative ID of this creative. Can be used to filter the response of the creatives.list method. */
            creativeId?: string;
            /**
             * Output only. The top-level deals status of this creative. If disapproved, an entry for 'auctionType=DIRECT_DEALS' (or 'ALL') in serving_restrictions will also exist. Note that this
             * may be nuanced with other contextual restrictions, in which case, it may be preferable to read from serving_restrictions directly. Can be used to filter the response of the
             * creatives.list method.
             */
            dealsStatus?: string;
            /** The set of declared destination URLs for the creative. */
            declaredClickThroughUrls?: string[];
            /** Output only. Detected advertiser IDs, if any. */
            detectedAdvertiserIds?: string[];
            /** Output only. The detected domains for this creative. */
            detectedDomains?: string[];
            /**
             * Output only. The detected languages for this creative. The order is arbitrary. The codes are 2 or 5 characters and are documented at
             * https://developers.google.com/adwords/api/docs/appendix/languagecodes.
             */
            detectedLanguages?: string[];
            /** Output only. Detected product categories, if any. See the ad-product-categories.txt file in the technical documentation for a list of IDs. */
            detectedProductCategories?: number[];
            /**
             * Output only. Detected sensitive categories, if any. See the ad-sensitive-categories.txt file in the technical documentation for a list of IDs. You should use these IDs along with
             * the excluded-sensitive-category field in the bid request to filter your bids.
             */
            detectedSensitiveCategories?: number[];
            /** An HTML creative. */
            html?: HtmlContent;
            /** The set of URLs to be called to record an impression. */
            impressionTrackingUrls?: string[];
            /** A native creative. */
            native?: NativeContent;
            /**
             * Output only. The top-level open auction status of this creative. If disapproved, an entry for 'auctionType = OPEN_AUCTION' (or 'ALL') in serving_restrictions will also exist. Note
             * that this may be nuanced with other contextual restrictions, in which case, it may be preferable to read from serving_restrictions directly. Can be used to filter the response of
             * the creatives.list method.
             */
            openAuctionStatus?: string;
            /** All restricted categories for the ads that may be shown from this creative. */
            restrictedCategories?: string[];
            /**
             * Output only. The granular status of this ad in specific contexts. A context here relates to where something ultimately serves (for example, a physical location, a platform, an HTTPS
             * vs HTTP request, or the type of auction).
             */
            servingRestrictions?: ServingRestriction[];
            /** All vendor IDs for the ads that may be shown from this creative. See https://storage.googleapis.com/adx-rtb-dictionaries/vendors.txt for possible values. */
            vendorIds?: number[];
            /** Output only. The version of this creative. */
            version?: number;
            /** A video creative. */
            video?: VideoContent;
        }
        interface CreativeDealAssociation {
            /** The account the creative belongs to. */
            accountId?: string;
            /** The ID of the creative associated with the deal. */
            creativeId?: string;
            /** The externalDealId for the deal associated with the creative. */
            dealsId?: string;
        }
        interface CreativeRestrictions {
            /** The format of the environment that the creatives will be displayed in. */
            creativeFormat?: string;
            creativeSpecifications?: CreativeSpecification[];
            /** Skippable video ads allow viewers to skip ads after 5 seconds. */
            skippableAdType?: string;
        }
        interface CreativeSize {
            /**
             * What formats are allowed by the publisher. If this repeated field is empty then all formats are allowed. For example, if this field contains AllowedFormatType.AUDIO then the
             * publisher only allows an audio ad (without any video).
             */
            allowedFormats?: string[];
            /** For video creatives specifies the sizes of companion ads (if present). Companion sizes may be filled in only when creative_size_type = VIDEO */
            companionSizes?: Size[];
            /** The creative size type. */
            creativeSizeType?: string;
            /** Output only. The native template for this creative. It will have a value only if creative_size_type = CreativeSizeType.NATIVE. */
            nativeTemplate?: string;
            /** For regular or video creative size type, specifies the size of the creative */
            size?: Size;
            /** The type of skippable ad for this creative. It will have a value only if creative_size_type = CreativeSizeType.VIDEO. */
            skippableAdType?: string;
        }
        interface CreativeSpecification {
            /** Companion sizes may be filled in only when this is a video creative. */
            creativeCompanionSizes?: AdSize[];
            /** The size of the creative. */
            creativeSize?: AdSize;
        }
        interface CreativeStatusRow {
            /** The number of bids with the specified status. */
            bidCount?: MetricValue;
            /** The ID of the creative status. See [creative-status-codes](https://developers.google.com/authorized-buyers/rtb/downloads/creative-status-codes). */
            creativeStatusId?: number;
            /** The values of all dimensions associated with metric values in this row. */
            rowDimensions?: RowDimensions;
        }
        interface CriteriaTargeting {
            /** A list of numeric IDs to be excluded. */
            excludedCriteriaIds?: string[];
            /** A list of numeric IDs to be included. */
            targetedCriteriaIds?: string[];
        }
        interface Date {
            /** Day of month. Must be from 1 to 31 and valid for the year and month, or 0 if specifying a year by itself or a year and month where the day is not significant. */
            day?: number;
            /** Month of year. Must be from 1 to 12, or 0 if specifying a year without a month and day. */
            month?: number;
            /** Year of date. Must be from 1 to 9999, or 0 if specifying a date without a year. */
            year?: number;
        }
        interface DayPart {
            /** The day of the week to target. If unspecified, applicable to all days. */
            dayOfWeek?: string;
            /** The ending time of the day for the ad to show (minute level granularity). The end time is exclusive. This field is not available for filtering in PQL queries. */
            endTime?: TimeOfDay;
            /** The starting time of day for the ad to show (minute level granularity). The start time is inclusive. This field is not available for filtering in PQL queries. */
            startTime?: TimeOfDay;
        }
        interface DayPartTargeting {
            /** A list of day part targeting criterion. */
            dayParts?: DayPart[];
            /** The timezone to use for interpreting the day part targeting. */
            timeZoneType?: string;
        }
        interface Deal {
            /** Proposed flight end time of the deal. This will generally be stored in a granularity of a second. A value is not required for Private Auction deals or Preferred Deals. */
            availableEndTime?: string;
            /**
             * Optional proposed flight start time of the deal. This will generally be stored in the granularity of one second since deal serving starts at seconds boundary. Any time specified
             * with more granularity (e.g., in milliseconds) will be truncated towards the start of time in seconds.
             */
            availableStartTime?: string;
            /** Buyer private data (hidden from seller). */
            buyerPrivateData?: PrivateData;
            /**
             * The product ID from which this deal was created. Note: This field may be set only when creating the resource. Modifying this field while updating the resource will result in an
             * error.
             */
            createProductId?: string;
            /**
             * Optional revision number of the product that the deal was created from. If present on create, and the server `product_revision` has advanced sinced the passed-in
             * `create_product_revision`, an `ABORTED` error will be returned. Note: This field may be set only when creating the resource. Modifying this field while updating the resource will
             * result in an error.
             */
            createProductRevision?: string;
            /** Output only. The time of the deal creation. */
            createTime?: string;
            /** Output only. Specifies the creative pre-approval policy. */
            creativePreApprovalPolicy?: string;
            /** Output only. Restricitions about the creatives associated with the deal (i.e., size) This is available for Programmatic Guaranteed/Preferred Deals in Ad Manager. */
            creativeRestrictions?: CreativeRestrictions;
            /** Output only. Specifies whether the creative is safeFrame compatible. */
            creativeSafeFrameCompatibility?: string;
            /** Output only. A unique deal ID for the deal (server-assigned). */
            dealId?: string;
            /** Output only. Metadata about the serving status of this deal. */
            dealServingMetadata?: DealServingMetadata;
            /** The negotiable terms of the deal. */
            dealTerms?: DealTerms;
            /** The set of fields around delivery control that are interesting for a buyer to see but are non-negotiable. These are set by the publisher. */
            deliveryControl?: DeliveryControl;
            /** Description for the deal terms. */
            description?: string;
            /** The name of the deal. */
            displayName?: string;
            /** Output only. The external deal ID assigned to this deal once the deal is finalized. This is the deal ID that shows up in serving/reporting etc. */
            externalDealId?: string;
            /** Output only. True, if the buyside inventory setup is complete for this deal. */
            isSetupComplete?: boolean;
            /** Output only. Specifies the creative source for programmatic deals. PUBLISHER means creative is provided by seller and ADVERTISER means creative is provided by buyer. */
            programmaticCreativeSource?: string;
            /** Output only. ID of the proposal that this deal is part of. */
            proposalId?: string;
            /** Output only. Seller contact information for the deal. */
            sellerContacts?: ContactInformation[];
            /**
             * The syndication product associated with the deal. Note: This field may be set only when creating the resource. Modifying this field while updating the resource will result in an
             * error.
             */
            syndicationProduct?: string;
            /** Output only. Specifies the subset of inventory targeted by the deal. */
            targeting?: MarketplaceTargeting;
            /** The shared targeting visible to buyers and sellers. Each shared targeting entity is AND'd together. */
            targetingCriterion?: TargetingCriteria[];
            /** Output only. The time when the deal was last updated. */
            updateTime?: string;
            /** The web property code for the seller copied over from the product. */
            webPropertyCode?: string;
        }
        interface DealPauseStatus {
            /** The buyer's reason for pausing, if the buyer paused the deal. */
            buyerPauseReason?: string;
            /** The role of the person who first paused this deal. */
            firstPausedBy?: string;
            /** True, if the buyer has paused the deal unilaterally. */
            hasBuyerPaused?: boolean;
            /** True, if the seller has paused the deal unilaterally. */
            hasSellerPaused?: boolean;
            /** The seller's reason for pausing, if the seller paused the deal. */
            sellerPauseReason?: string;
        }
        interface DealServingMetadata {
            /** Output only. Tracks which parties (if any) have paused a deal. */
            dealPauseStatus?: DealPauseStatus;
        }
        interface DealTerms {
            /** Visibility of the URL in bid requests. (default: BRANDED) */
            brandingType?: string;
            /** Publisher provided description for the terms. */
            description?: string;
            /** Non-binding estimate of the estimated gross spend for this deal. Can be set by buyer or seller. */
            estimatedGrossSpend?: Price;
            /** Non-binding estimate of the impressions served per day. Can be set by buyer or seller. */
            estimatedImpressionsPerDay?: string;
            /** The terms for guaranteed fixed price deals. */
            guaranteedFixedPriceTerms?: GuaranteedFixedPriceTerms;
            /** The terms for non-guaranteed auction deals. */
            nonGuaranteedAuctionTerms?: NonGuaranteedAuctionTerms;
            /** The terms for non-guaranteed fixed price deals. */
            nonGuaranteedFixedPriceTerms?: NonGuaranteedFixedPriceTerms;
            /**
             * The time zone name. For deals with Cost Per Day billing, defines the time zone used to mark the boundaries of a day. It should be an IANA TZ name, such as "America/Los_Angeles". For
             * more information, see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones.
             */
            sellerTimeZone?: string;
        }
        interface DeliveryControl {
            /** Output only. Specified the creative blocking levels to be applied. */
            creativeBlockingLevel?: string;
            /** Output only. Specifies how the impression delivery will be paced. */
            deliveryRateType?: string;
            /** Output only. Specifies any frequency caps. */
            frequencyCaps?: FrequencyCap[];
        }
        interface Disapproval {
            /** Additional details about the reason for disapproval. */
            details?: string[];
            /** The categorized reason for disapproval. */
            reason?: string;
        }
        // tslint:disable-next-line:no-empty-interface
        interface Empty {
        }
        interface FilteredBidCreativeRow {
            /** The number of bids with the specified creative. */
            bidCount?: MetricValue;
            /** The ID of the creative. */
            creativeId?: string;
            /** The values of all dimensions associated with metric values in this row. */
            rowDimensions?: RowDimensions;
        }
        interface FilteredBidDetailRow {
            /** The number of bids with the specified detail. */
            bidCount?: MetricValue;
            /** The ID of the detail, can be numeric or text. The associated value can be looked up in the dictionary file corresponding to the DetailType in the response message. */
            detail?: string;
            /**
             * Note: this field will be deprecated, use "detail" field instead. When "detail" field represents an integer value, this field is populated as the same integer value "detail" field
             * represents, otherwise this field will be 0. The ID of the detail. The associated value can be looked up in the dictionary file corresponding to the DetailType in the response
             * message.
             */
            detailId?: number;
            /** The values of all dimensions associated with metric values in this row. */
            rowDimensions?: RowDimensions;
        }
        interface FilterSet {
            /** An absolute date range, defined by a start date and an end date. Interpreted relative to Pacific time zone. */
            absoluteDateRange?: AbsoluteDateRange;
            /**
             * The set of dimensions along which to break down the response; may be empty. If multiple dimensions are requested, the breakdown is along the Cartesian product of the requested
             * dimensions.
             */
            breakdownDimensions?: string[];
            /**
             * The ID of the creative on which to filter; optional. This field may be set only for a filter set that accesses account-level troubleshooting data, i.e., one whose name matches the
             * `bidders/∗/accounts/∗/filterSets/*` pattern.
             */
            creativeId?: string;
            /**
             * The ID of the deal on which to filter; optional. This field may be set only for a filter set that accesses account-level troubleshooting data, i.e., one whose name matches the
             * `bidders/∗/accounts/∗/filterSets/*` pattern.
             */
            dealId?: string;
            /** The environment on which to filter; optional. */
            environment?: string;
            /** Creative format bidded on or allowed to bid on, can be empty. */
            format?: string;
            /**
             * Creative formats bidded on or allowed to bid on, can be empty. Although this field is a list, it can only be populated with a single item. A HTTP 400 bad request error will be
             * returned in the response if you specify multiple items.
             */
            formats?: string[];
            /**
             * A user-defined name of the filter set. Filter set names must be unique globally and match one of the patterns: - `bidders/∗/filterSets/*` (for accessing bidder-level troubleshooting
             * data) - `bidders/∗/accounts/∗/filterSets/*` (for accessing account-level troubleshooting data) This field is required in create operations.
             */
            name?: string;
            /**
             * The list of platforms on which to filter; may be empty. The filters represented by multiple platforms are ORed together (i.e., if non-empty, results must match any one of the
             * platforms).
             */
            platforms?: string[];
            /** For Open Bidding partners only. The list of publisher identifiers on which to filter; may be empty. The filters represented by multiple publisher identifiers are ORed together. */
            publisherIdentifiers?: string[];
            /** An open-ended realtime time range, defined by the aggregation start timestamp. */
            realtimeTimeRange?: RealtimeTimeRange;
            /** A relative date range, defined by an offset from today and a duration. Interpreted relative to Pacific time zone. */
            relativeDateRange?: RelativeDateRange;
            /**
             * For Authorized Buyers only. The list of IDs of the seller (publisher) networks on which to filter; may be empty. The filters represented by multiple seller network IDs are ORed
             * together (i.e., if non-empty, results must match any one of the publisher networks). See
             * [seller-network-ids](https://developers.google.com/authorized-buyers/rtb/downloads/seller-network-ids) file for the set of existing seller network IDs.
             */
            sellerNetworkIds?: number[];
            /** The granularity of time intervals if a time series breakdown is desired; optional. */
            timeSeriesGranularity?: string;
        }
        interface FirstPartyMobileApplicationTargeting {
            /** A list of application IDs to be excluded. */
            excludedAppIds?: string[];
            /** A list of application IDs to be included. */
            targetedAppIds?: string[];
        }
        interface FrequencyCap {
            /** The maximum number of impressions that can be served to a user within the specified time period. */
            maxImpressions?: number;
            /** The amount of time, in the units specified by time_unit_type. Defines the amount of time over which impressions per user are counted and capped. */
            numTimeUnits?: number;
            /** The time unit. Along with num_time_units defines the amount of time over which impressions per user are counted and capped. */
            timeUnitType?: string;
        }
        interface GuaranteedFixedPriceTerms {
            /** Fixed price for the specified buyer. */
            fixedPrices?: PricePerBuyer[];
            /** Guaranteed impressions as a percentage. This is the percentage of guaranteed looks that the buyer is guaranteeing to buy. */
            guaranteedImpressions?: string;
            /** Count of guaranteed looks. Required for deal, optional for product. */
            guaranteedLooks?: string;
            /** Daily minimum looks for CPD deal types. */
            minimumDailyLooks?: string;
        }
        interface HtmlContent {
            /** The height of the HTML snippet in pixels. */
            height?: number;
            /** The HTML snippet that displays the ad when inserted in the web page. */
            snippet?: string;
            /** The width of the HTML snippet in pixels. */
            width?: number;
        }
        // tslint:disable-next-line:interface-name
        interface Image {
            /** Image height in pixels. */
            height?: number;
            /** The URL of the image. */
            url?: string;
            /** Image width in pixels. */
            width?: number;
        }
        // tslint:disable-next-line:interface-name
        interface ImpressionMetricsRow {
            /** The number of impressions available to the buyer on Ad Exchange. In some cases this value may be unavailable. */
            availableImpressions?: MetricValue;
            /** The number of impressions for which Ad Exchange sent the buyer a bid request. */
            bidRequests?: MetricValue;
            /** The number of impressions that match the buyer's inventory pretargeting. */
            inventoryMatches?: MetricValue;
            /** The number of impressions for which Ad Exchange received a response from the buyer that contained at least one applicable bid. */
            responsesWithBids?: MetricValue;
            /** The values of all dimensions associated with metric values in this row. */
            rowDimensions?: RowDimensions;
            /** The number of impressions for which the buyer successfully sent a response to Ad Exchange. */
            successfulResponses?: MetricValue;
        }
        // tslint:disable-next-line:interface-name
        interface InventorySizeTargeting {
            /** A list of inventory sizes to be excluded. */
            excludedInventorySizes?: AdSize[];
            /** A list of inventory sizes to be included. */
            targetedInventorySizes?: AdSize[];
        }
        interface ListBidMetricsResponse {
            /** List of rows, each containing a set of bid metrics. */
            bidMetricsRows?: BidMetricsRow[];
            /**
             * A token to retrieve the next page of results. Pass this value in the ListBidMetricsRequest.pageToken field in the subsequent call to the bidMetrics.list method to retrieve the next
             * page of results.
             */
            nextPageToken?: string;
        }
        interface ListBidResponseErrorsResponse {
            /** List of rows, with counts of bid responses aggregated by callout status. */
            calloutStatusRows?: CalloutStatusRow[];
            /**
             * A token to retrieve the next page of results. Pass this value in the ListBidResponseErrorsRequest.pageToken field in the subsequent call to the bidResponseErrors.list method to
             * retrieve the next page of results.
             */
            nextPageToken?: string;
        }
        interface ListBidResponsesWithoutBidsResponse {
            /** List of rows, with counts of bid responses without bids aggregated by status. */
            bidResponseWithoutBidsStatusRows?: BidResponseWithoutBidsStatusRow[];
            /**
             * A token to retrieve the next page of results. Pass this value in the ListBidResponsesWithoutBidsRequest.pageToken field in the subsequent call to the bidResponsesWithoutBids.list
             * method to retrieve the next page of results.
             */
            nextPageToken?: string;
        }
        interface ListClientsResponse {
            /** The returned list of clients. */
            clients?: Client[];
            /**
             * A token to retrieve the next page of results. Pass this value in the ListClientsRequest.pageToken field in the subsequent call to the accounts.clients.list method to retrieve the
             * next page of results.
             */
            nextPageToken?: string;
        }
        interface ListClientUserInvitationsResponse {
            /** The returned list of client users. */
            invitations?: ClientUserInvitation[];
            /**
             * A token to retrieve the next page of results. Pass this value in the ListClientUserInvitationsRequest.pageToken field in the subsequent call to the clients.invitations.list method
             * to retrieve the next page of results.
             */
            nextPageToken?: string;
        }
        interface ListClientUsersResponse {
            /**
             * A token to retrieve the next page of results. Pass this value in the ListClientUsersRequest.pageToken field in the subsequent call to the clients.invitations.list method to retrieve
             * the next page of results.
             */
            nextPageToken?: string;
            /** The returned list of client users. */
            users?: ClientUser[];
        }
        interface ListCreativesResponse {
            /** The list of creatives. */
            creatives?: Creative[];
            /**
             * A token to retrieve the next page of results. Pass this value in the ListCreativesRequest.page_token field in the subsequent call to `ListCreatives` method to retrieve the next page
             * of results.
             */
            nextPageToken?: string;
        }
        interface ListCreativeStatusBreakdownByCreativeResponse {
            /** List of rows, with counts of bids with a given creative status aggregated by creative. */
            filteredBidCreativeRows?: FilteredBidCreativeRow[];
            /**
             * A token to retrieve the next page of results. Pass this value in the ListCreativeStatusBreakdownByCreativeRequest.pageToken field in the subsequent call to the
             * filteredBids.creatives.list method to retrieve the next page of results.
             */
            nextPageToken?: string;
        }
        interface ListCreativeStatusBreakdownByDetailResponse {
            /** The type of detail that the detail IDs represent. */
            detailType?: string;
            /** List of rows, with counts of bids with a given creative status aggregated by detail. */
            filteredBidDetailRows?: FilteredBidDetailRow[];
            /**
             * A token to retrieve the next page of results. Pass this value in the ListCreativeStatusBreakdownByDetailRequest.pageToken field in the subsequent call to the
             * filteredBids.details.list method to retrieve the next page of results.
             */
            nextPageToken?: string;
        }
        interface ListDealAssociationsResponse {
            /** The list of associations. */
            associations?: CreativeDealAssociation[];
            /**
             * A token to retrieve the next page of results. Pass this value in the ListDealAssociationsRequest.page_token field in the subsequent call to 'ListDealAssociation' method to retrieve
             * the next page of results.
             */
            nextPageToken?: string;
        }
        interface ListFilteredBidRequestsResponse {
            /** List of rows, with counts of filtered bid requests aggregated by callout status. */
            calloutStatusRows?: CalloutStatusRow[];
            /**
             * A token to retrieve the next page of results. Pass this value in the ListFilteredBidRequestsRequest.pageToken field in the subsequent call to the filteredBidRequests.list method to
             * retrieve the next page of results.
             */
            nextPageToken?: string;
        }
        interface ListFilteredBidsResponse {
            /** List of rows, with counts of filtered bids aggregated by filtering reason (i.e. creative status). */
            creativeStatusRows?: CreativeStatusRow[];
            /**
             * A token to retrieve the next page of results. Pass this value in the ListFilteredBidsRequest.pageToken field in the subsequent call to the filteredBids.list method to retrieve the
             * next page of results.
             */
            nextPageToken?: string;
        }
        interface ListFilterSetsResponse {
            /** The filter sets belonging to the buyer. */
            filterSets?: FilterSet[];
            /**
             * A token to retrieve the next page of results. Pass this value in the ListFilterSetsRequest.pageToken field in the subsequent call to the accounts.filterSets.list method to retrieve
             * the next page of results.
             */
            nextPageToken?: string;
        }
        interface ListImpressionMetricsResponse {
            /** List of rows, each containing a set of impression metrics. */
            impressionMetricsRows?: ImpressionMetricsRow[];
            /**
             * A token to retrieve the next page of results. Pass this value in the ListImpressionMetricsRequest.pageToken field in the subsequent call to the impressionMetrics.list method to
             * retrieve the next page of results.
             */
            nextPageToken?: string;
        }
        interface ListLosingBidsResponse {
            /** List of rows, with counts of losing bids aggregated by loss reason (i.e. creative status). */
            creativeStatusRows?: CreativeStatusRow[];
            /**
             * A token to retrieve the next page of results. Pass this value in the ListLosingBidsRequest.pageToken field in the subsequent call to the losingBids.list method to retrieve the next
             * page of results.
             */
            nextPageToken?: string;
        }
        interface ListNonBillableWinningBidsResponse {
            /**
             * A token to retrieve the next page of results. Pass this value in the ListNonBillableWinningBidsRequest.pageToken field in the subsequent call to the nonBillableWinningBids.list
             * method to retrieve the next page of results.
             */
            nextPageToken?: string;
            /** List of rows, with counts of bids not billed aggregated by reason. */
            nonBillableWinningBidStatusRows?: NonBillableWinningBidStatusRow[];
        }
        interface ListProductsResponse {
            /** List pagination support. */
            nextPageToken?: string;
            /** The list of matching products at their head revision number. */
            products?: Product[];
        }
        interface ListProposalsResponse {
            /** Continuation token for fetching the next page of results. */
            nextPageToken?: string;
            /** The list of proposals. */
            proposals?: Proposal[];
        }
        interface ListPublisherProfilesResponse {
            /** List pagination support */
            nextPageToken?: string;
            /** The list of matching publisher profiles. */
            publisherProfiles?: PublisherProfile[];
        }
        interface LocationContext {
            /**
             * IDs representing the geo location for this context. Please refer to the [geo-table.csv](https://storage.googleapis.com/adx-rtb-dictionaries/geo-table.csv) file for different geo
             * criteria IDs.
             */
            geoCriteriaIds?: number[];
        }
        interface MarketplaceTargeting {
            /** Geo criteria IDs to be included/excluded. */
            geoTargeting?: CriteriaTargeting;
            /** Inventory sizes to be included/excluded. */
            inventorySizeTargeting?: InventorySizeTargeting;
            /** Placement targeting information, e.g., URL, mobile applications. */
            placementTargeting?: PlacementTargeting;
            /** Technology targeting information, e.g., operating system, device category. */
            technologyTargeting?: TechnologyTargeting;
            /** Video targeting information. */
            videoTargeting?: VideoTargeting;
        }
        interface MetricValue {
            /** The expected value of the metric. */
            value?: string;
            /**
             * The variance (i.e. square of the standard deviation) of the metric value. If value is exact, variance is 0. Can be used to calculate margin of error as a percentage of value, using
             * the following formula, where Z is the standard constant that depends on the desired size of the confidence interval (e.g. for 90% confidence interval, use Z = 1.645): marginOfError
             * = 100 * Z * sqrt(variance) / value
             */
            variance?: string;
        }
        interface MobileApplicationTargeting {
            /** Publisher owned apps to be targeted or excluded by the publisher to display the ads in. */
            firstPartyTargeting?: FirstPartyMobileApplicationTargeting;
        }
        interface Money {
            /** The 3-letter currency code defined in ISO 4217. */
            currencyCode?: string;
            /**
             * Number of nano (10^-9) units of the amount. The value must be between -999,999,999 and +999,999,999 inclusive. If `units` is positive, `nanos` must be positive or zero. If `units`
             * is zero, `nanos` can be positive, zero, or negative. If `units` is negative, `nanos` must be negative or zero. For example $-1.75 is represented as `units`=-1 and
             * `nanos`=-750,000,000.
             */
            nanos?: number;
            /** The whole units of the amount. For example if `currencyCode` is `"USD"`, then 1 unit is one US dollar. */
            units?: string;
        }
        interface NativeContent {
            /** The name of the advertiser or sponsor, to be displayed in the ad creative. */
            advertiserName?: string;
            /** The app icon, for app download ads. */
            appIcon?: Image;
            /** A long description of the ad. */
            body?: string;
            /** A label for the button that the user is supposed to click. */
            callToAction?: string;
            /** The URL that the browser/SDK will load when the user clicks the ad. */
            clickLinkUrl?: string;
            /** The URL to use for click tracking. */
            clickTrackingUrl?: string;
            /** A short title for the ad. */
            headline?: string;
            /** A large image. */
            image?: Image;
            /** A smaller image, for the advertiser's logo. */
            logo?: Image;
            /** The price of the promoted app including currency info. */
            priceDisplayText?: string;
            /** The app rating in the app store. Must be in the range [0-5]. */
            starRating?: number;
            /** The URL to the app store to purchase/download the promoted app. */
            storeUrl?: string;
            /** The URL to fetch a native video ad. */
            videoUrl?: string;
        }
        interface NonBillableWinningBidStatusRow {
            /** The number of bids with the specified status. */
            bidCount?: MetricValue;
            /** The values of all dimensions associated with metric values in this row. */
            rowDimensions?: RowDimensions;
            /** The status specifying why the winning bids were not billed. */
            status?: string;
        }
        interface NonGuaranteedAuctionTerms {
            /** True if open auction buyers are allowed to compete with invited buyers in this private auction. */
            autoOptimizePrivateAuction?: boolean;
            /** Reserve price for the specified buyer. */
            reservePricesPerBuyer?: PricePerBuyer[];
        }
        interface NonGuaranteedFixedPriceTerms {
            /** Fixed price for the specified buyer. */
            fixedPrices?: PricePerBuyer[];
        }
        interface Note {
            /** Output only. The timestamp for when this note was created. */
            createTime?: string;
            /** Output only. The role of the person (buyer/seller) creating the note. */
            creatorRole?: string;
            /**
             * The actual note to attach. (max-length: 1024 unicode code units) Note: This field may be set only when creating the resource. Modifying this field while updating the resource will
             * result in an error.
             */
            note?: string;
            /** Output only. The unique ID for the note. */
            noteId?: string;
            /** Output only. The revision number of the proposal when the note is created. */
            proposalRevision?: string;
        }
        interface OperatingSystemTargeting {
            /** IDs of operating systems to be included/excluded. */
            operatingSystemCriteria?: CriteriaTargeting;
            /** IDs of operating system versions to be included/excluded. */
            operatingSystemVersionCriteria?: CriteriaTargeting;
        }
        interface PauseProposalRequest {
            /** The reason why the proposal is being paused. This human readable message will be displayed in the seller's UI. (Max length: 1000 unicode code units.) */
            reason?: string;
        }
        interface PlacementTargeting {
            /** Mobile application targeting information in a deal. This doesn't apply to Auction Packages. */
            mobileApplicationTargeting?: MobileApplicationTargeting;
            /** URLs to be included/excluded. */
            urlTargeting?: UrlTargeting;
        }
        interface PlatformContext {
            /** The platforms this restriction applies to. */
            platforms?: string[];
        }
        interface Price {
            /** The actual price with currency specified. */
            amount?: Money;
            /** The pricing type for the deal/product. (default: CPM) */
            pricingType?: string;
        }
        interface PricePerBuyer {
            /** The list of advertisers for this price when associated with this buyer. If empty, all advertisers with this buyer pay this price. */
            advertiserIds?: string[];
            /** The buyer who will pay this price. If unset, all buyers can pay this price (if the advertisers match, and there's no more specific rule matching the buyer). */
            buyer?: Buyer;
            /** The specified price. */
            price?: Price;
        }
        interface PrivateData {
            /** A buyer or seller specified reference ID. This can be queried in the list operations (max-length: 1024 unicode code units). */
            referenceId?: string;
        }
        interface Product {
            /** The proposed end time for the deal. The field will be truncated to the order of seconds during serving. */
            availableEndTime?: string;
            /**
             * Inventory availability dates. The start time will be truncated to seconds during serving. Thus, a field specified as 3:23:34.456 (HH:mm:ss.SSS) will be truncated to 3:23:34 when
             * serving.
             */
            availableStartTime?: string;
            /** Creation time. */
            createTime?: string;
            /** Optional contact information for the creator of this product. */
            creatorContacts?: ContactInformation[];
            /** The display name for this product as set by the seller. */
            displayName?: string;
            /**
             * If the creator has already signed off on the product, then the buyer can finalize the deal by accepting the product as is. When copying to a proposal, if any of the terms are
             * changed, then auto_finalize is automatically set to false.
             */
            hasCreatorSignedOff?: boolean;
            /** The unique ID for the product. */
            productId?: string;
            /** The revision number of the product (auto-assigned by Marketplace). */
            productRevision?: string;
            /** An ID which can be used by the Publisher Profile API to get more information about the seller that created this product. */
            publisherProfileId?: string;
            /** Information about the seller that created this product. */
            seller?: Seller;
            /** The syndication product associated with the deal. */
            syndicationProduct?: string;
            /** Targeting that is shared between the buyer and the seller. Each targeting criterion has a specified key and for each key there is a list of inclusion value or exclusion values. */
            targetingCriterion?: TargetingCriteria[];
            /** The negotiable terms of the deal. */
            terms?: DealTerms;
            /** Time of last update. */
            updateTime?: string;
            /** The web-property code for the seller. This needs to be copied as is when adding a new deal to a proposal. */
            webPropertyCode?: string;
        }
        interface Proposal {
            /** Output only. Reference to the buyer that will get billed for this proposal. */
            billedBuyer?: Buyer;
            /** Reference to the buyer on the proposal. Note: This field may be set only when creating the resource. Modifying this field while updating the resource will result in an error. */
            buyer?: Buyer;
            /** Contact information for the buyer. */
            buyerContacts?: ContactInformation[];
            /** Private data for buyer. (hidden from seller). */
            buyerPrivateData?: PrivateData;
            /** The deals associated with this proposal. For Private Auction proposals (whose deals have NonGuaranteedAuctionTerms), there will only be one deal. */
            deals?: Deal[];
            /** The name for the proposal. */
            displayName?: string;
            /** Output only. True if the proposal is being renegotiated. */
            isRenegotiating?: boolean;
            /** Output only. True, if the buyside inventory setup is complete for this proposal. */
            isSetupComplete?: boolean;
            /** Output only. The role of the last user that either updated the proposal or left a comment. */
            lastUpdaterOrCommentorRole?: string;
            /** Output only. The notes associated with this proposal. */
            notes?: Note[];
            /** Output only. Indicates whether the buyer/seller created the proposal. */
            originatorRole?: string;
            /** Output only. Private auction ID if this proposal is a private auction proposal. */
            privateAuctionId?: string;
            /** Output only. The unique ID of the proposal. */
            proposalId?: string;
            /**
             * Output only. The revision number for the proposal. Each update to the proposal or the deal causes the proposal revision number to auto-increment. The buyer keeps track of the last
             * revision number they know of and pass it in when making an update. If the head revision number on the server has since incremented, then an ABORTED error is returned during the
             * update operation to let the buyer know that a subsequent update was made.
             */
            proposalRevision?: string;
            /** Output only. The current state of the proposal. */
            proposalState?: string;
            /** Reference to the seller on the proposal. Note: This field may be set only when creating the resource. Modifying this field while updating the resource will result in an error. */
            seller?: Seller;
            /** Output only. Contact information for the seller. */
            sellerContacts?: ContactInformation[];
            /** Output only. The time when the proposal was last revised. */
            updateTime?: string;
        }
        interface PublisherProfile {
            /** Description on the publisher's audience. */
            audienceDescription?: string;
            /** Statement explaining what's unique about publisher's business, and why buyers should partner with the publisher. */
            buyerPitchStatement?: string;
            /** Contact information for direct reservation deals. This is free text entered by the publisher and may include information like names, phone numbers and email addresses. */
            directDealsContact?: string;
            /** Name of the publisher profile. */
            displayName?: string;
            /**
             * The list of domains represented in this publisher profile. Empty if this is a parent profile. These are top private domains, meaning that these will not contain a string like
             * "photos.google.co.uk/123", but will instead contain "google.co.uk".
             */
            domains?: string[];
            /** URL to publisher's Google+ page. */
            googlePlusUrl?: string;
            /**
             * Indicates if this profile is the parent profile of the seller. A parent profile represents all the inventory from the seller, as opposed to child profile that is created to brand a
             * portion of inventory. One seller should have only one parent publisher profile, and can have multiple child profiles. Publisher profiles for the same seller will have same value of
             * field google.ads.adexchange.buyer.v2beta1.PublisherProfile.seller. See https://support.google.com/admanager/answer/6035806 for details.
             */
            isParent?: boolean;
            /** A Google public URL to the logo for this publisher profile. The logo is stored as a PNG, JPG, or GIF image. */
            logoUrl?: string;
            /** URL to additional marketing and sales materials. */
            mediaKitUrl?: string;
            /** Overview of the publisher. */
            overview?: string;
            /** Contact information for programmatic deals. This is free text entered by the publisher and may include information like names, phone numbers and email addresses. */
            programmaticDealsContact?: string;
            /** Unique ID for publisher profile. */
            publisherProfileId?: string;
            /** URL to a publisher rate card. */
            rateCardInfoUrl?: string;
            /** URL to a sample content page. */
            samplePageUrl?: string;
            /** Seller of the publisher profile. */
            seller?: Seller;
            /** Up to three key metrics and rankings. Max 100 characters each. For example "#1 Mobile News Site for 20 Straight Months". */
            topHeadlines?: string[];
        }
        interface RealtimeTimeRange {
            /** The start timestamp of the real-time RTB metrics aggregation. */
            startTimestamp?: string;
        }
        interface RelativeDateRange {
            /** The number of days in the requested date range, e.g., for a range spanning today: 1. For a range spanning the last 7 days: 7. */
            durationDays?: number;
            /** The end date of the filter set, specified as the number of days before today, e.g., for a range where the last date is today: 0. */
            offsetDays?: number;
        }
        interface RemoveDealAssociationRequest {
            /** The association between a creative and a deal that should be removed. */
            association?: CreativeDealAssociation;
        }
        // tslint:disable-next-line:no-empty-interface
        interface ResumeProposalRequest {
        }
        interface RowDimensions {
            /**
             * The publisher identifier for this row, if a breakdown by
             * [BreakdownDimension.PUBLISHER_IDENTIFIER](https://developers.google.com/authorized-buyers/apis/reference/rest/v2beta1/bidders.accounts.filterSets#FilterSet.BreakdownDimension) was
             * requested.
             */
            publisherIdentifier?: string;
            /** The time interval that this row represents. */
            timeInterval?: TimeInterval;
        }
        interface SecurityContext {
            /** The security types in this context. */
            securities?: string[];
        }
        interface Seller {
            /** The unique ID for the seller. The seller fills in this field. The seller account ID is then available to buyer in the product. */
            accountId?: string;
            /** Optional sub-account ID for the seller. */
            subAccountId?: string;
        }
        interface ServingContext {
            /** Matches all contexts. */
            all?: string;
            /** Matches impressions for a particular app type. */
            appType?: AppContext;
            /** Matches impressions for a particular auction type. */
            auctionType?: AuctionContext;
            /** Matches impressions coming from users *or* publishers in a specific location. */
            location?: LocationContext;
            /** Matches impressions coming from a particular platform. */
            platform?: PlatformContext;
            /** Matches impressions for a particular security type. */
            securityType?: SecurityContext;
        }
        interface ServingRestriction {
            /** The contexts for the restriction. */
            contexts?: ServingContext[];
            /** Disapproval bound to this restriction. Only present if status=DISAPPROVED. Can be used to filter the response of the creatives.list method. */
            disapproval?: Disapproval;
            /**
             * Any disapprovals bound to this restriction. Only present if status=DISAPPROVED. Can be used to filter the response of the creatives.list method. Deprecated; please use disapproval
             * field instead.
             */
            disapprovalReasons?: Disapproval[];
            /** The status of the creative in this context (for example, it has been explicitly disapproved or is pending review). */
            status?: string;
        }
        interface Size {
            /** The height of the creative. */
            height?: number;
            /** The width of the creative */
            width?: number;
        }
        // tslint:disable-next-line:no-empty-interface
        interface StopWatchingCreativeRequest {
        }
        interface TargetingCriteria {
            /** The list of values to exclude from targeting. Each value is AND'd together. */
            exclusions?: TargetingValue[];
            /** The list of value to include as part of the targeting. Each value is OR'd together. */
            inclusions?: TargetingValue[];
            /**
             * The key representing the shared targeting criterion. Targeting criteria defined by Google ad servers will begin with GOOG_. Third parties may define their own keys. A list of
             * permissible keys along with the acceptable values will be provided as part of the external documentation.
             */
            key?: string;
        }
        interface TargetingValue {
            /** The creative size value to include/exclude. Filled in when key = GOOG_CREATIVE_SIZE */
            creativeSizeValue?: CreativeSize;
            /** The daypart targeting to include / exclude. Filled in when the key is GOOG_DAYPART_TARGETING. The definition of this targeting is derived from the structure used by Ad Manager. */
            dayPartTargetingValue?: DayPartTargeting;
            /** The long value to include/exclude. */
            longValue?: string;
            /** The string value to include/exclude. */
            stringValue?: string;
        }
        interface TechnologyTargeting {
            /** IDs of device capabilities to be included/excluded. */
            deviceCapabilityTargeting?: CriteriaTargeting;
            /** IDs of device categories to be included/excluded. */
            deviceCategoryTargeting?: CriteriaTargeting;
            /** Operating system related targeting information. */
            operatingSystemTargeting?: OperatingSystemTargeting;
        }
        interface TimeInterval {
            /** The timestamp marking the end of the range (exclusive) for which data is included. */
            endTime?: string;
            /** The timestamp marking the start of the range (inclusive) for which data is included. */
            startTime?: string;
        }
        interface TimeOfDay {
            /** Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value "24:00:00" for scenarios like business closing time. */
            hours?: number;
            /** Minutes of hour of day. Must be from 0 to 59. */
            minutes?: number;
            /** Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999. */
            nanos?: number;
            /** Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds. */
            seconds?: number;
        }
        interface UrlTargeting {
            /** A list of URLs to be excluded. */
            excludedUrls?: string[];
            /** A list of URLs to be included. */
            targetedUrls?: string[];
        }
        interface VideoContent {
            /** The URL to fetch a video ad. */
            videoUrl?: string;
            /** The contents of a VAST document for a video ad. This document should conform to the VAST 2.0 or 3.0 standard. */
            videoVastXml?: string;
        }
        interface VideoTargeting {
            /** A list of video positions to be excluded. Position types can either be included or excluded (XOR). */
            excludedPositionTypes?: string[];
            /** A list of video positions to be included. When the included list is present, the excluded list must be empty. When the excluded list is present, the included list must be empty. */
            targetedPositionTypes?: string[];
        }
        interface WatchCreativeRequest {
            /**
             * The Pub/Sub topic to publish notifications to. This topic must already exist and must give permission to ad-exchange-buyside-reports@google.com to write to the topic. This should be
             * the full resource name in "projects/{project_id}/topics/{topic_id}" format.
             */
            topic?: string;
        }
        // tslint:disable-next-line:interface-name
        interface InvitationsResource {
            /** Creates and sends out an email invitation to access an Ad Exchange client buyer account. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Numerical account ID of the client's sponsor buyer. (required) */
                accountId: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Numerical account ID of the client buyer that the user should be associated with. (required) */
                clientAccountId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: ClientUserInvitation;
            }): Request<ClientUserInvitation>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Numerical account ID of the client's sponsor buyer. (required) */
                accountId: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Numerical account ID of the client buyer that the user should be associated with. (required) */
                clientAccountId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: ClientUserInvitation): Request<ClientUserInvitation>;
            /** Retrieves an existing client user invitation. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Numerical account ID of the client's sponsor buyer. (required) */
                accountId: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Numerical account ID of the client buyer that the user invitation to be retrieved is associated with. (required) */
                clientAccountId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Numerical identifier of the user invitation to retrieve. (required) */
                invitationId: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ClientUserInvitation>;
            /** Lists all the client users invitations for a client with a given account ID. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Numerical account ID of the client's sponsor buyer. (required) */
                accountId: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /**
                 * Numerical account ID of the client buyer to list invitations for. (required) You must either specify a string representation of a numerical account identifier or the `-`
                 * character to list all the invitations for all the clients of a given sponsor buyer.
                 */
                clientAccountId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Requested page size. Server may return fewer clients than requested. If unspecified, server will pick an appropriate default. */
                pageSize?: number;
                /**
                 * A token identifying a page of results the server should return. Typically, this is the value of ListClientUserInvitationsResponse.nextPageToken returned from the previous call
                 * to the clients.invitations.list method.
                 */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListClientUserInvitationsResponse>;
        }
        interface UsersResource {
            /** Retrieves an existing client user. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Numerical account ID of the client's sponsor buyer. (required) */
                accountId: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Numerical account ID of the client buyer that the user to be retrieved is associated with. (required) */
                clientAccountId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Numerical identifier of the user to retrieve. (required) */
                userId: string;
            }): Request<ClientUser>;
            /** Lists all the known client users for a specified sponsor buyer account ID. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Numerical account ID of the sponsor buyer of the client to list users for. (required) */
                accountId: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /**
                 * The account ID of the client buyer to list users for. (required) You must specify either a string representation of a numerical account identifier or the `-` character to list
                 * all the client users for all the clients of a given sponsor buyer.
                 */
                clientAccountId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Requested page size. The server may return fewer clients than requested. If unspecified, the server will pick an appropriate default. */
                pageSize?: number;
                /**
                 * A token identifying a page of results the server should return. Typically, this is the value of ListClientUsersResponse.nextPageToken returned from the previous call to the
                 * accounts.clients.users.list method.
                 */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListClientUsersResponse>;
            /** Updates an existing client user. Only the user status can be changed on update. */
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Numerical account ID of the client's sponsor buyer. (required) */
                accountId: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Numerical account ID of the client buyer that the user to be retrieved is associated with. (required) */
                clientAccountId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Numerical identifier of the user to retrieve. (required) */
                userId: string;
                /** Request body */
                resource: ClientUser;
            }): Request<ClientUser>;
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Numerical account ID of the client's sponsor buyer. (required) */
                accountId: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Numerical account ID of the client buyer that the user to be retrieved is associated with. (required) */
                clientAccountId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Numerical identifier of the user to retrieve. (required) */
                userId: string;
            },
            body: ClientUser): Request<ClientUser>;
        }
        interface ClientsResource {
            /** Creates a new client buyer. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Unique numerical account ID for the buyer of which the client buyer is a customer; the sponsor buyer to create a client for. (required) */
                accountId: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Client;
            }): Request<Client>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Unique numerical account ID for the buyer of which the client buyer is a customer; the sponsor buyer to create a client for. (required) */
                accountId: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Client): Request<Client>;
            /** Gets a client buyer with a given client account ID. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Numerical account ID of the client's sponsor buyer. (required) */
                accountId: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Numerical account ID of the client buyer to retrieve. (required) */
                clientAccountId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Client>;
            /** Lists all the clients for the current sponsor buyer. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Unique numerical account ID of the sponsor buyer to list the clients for. */
                accountId: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Requested page size. The server may return fewer clients than requested. If unspecified, the server will pick an appropriate default. */
                pageSize?: number;
                /**
                 * A token identifying a page of results the server should return. Typically, this is the value of ListClientsResponse.nextPageToken returned from the previous call to the
                 * accounts.clients.list method.
                 */
                pageToken?: string;
                /**
                 * Optional unique identifier (from the standpoint of an Ad Exchange sponsor buyer partner) of the client to return. If specified, at most one client will be returned in the
                 * response.
                 */
                partnerClientId?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListClientsResponse>;
            /** Updates an existing client buyer. */
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Unique numerical account ID for the buyer of which the client buyer is a customer; the sponsor buyer to update a client for. (required) */
                accountId: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Unique numerical account ID of the client to update. (required) */
                clientAccountId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Client;
            }): Request<Client>;
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Unique numerical account ID for the buyer of which the client buyer is a customer; the sponsor buyer to update a client for. (required) */
                accountId: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Unique numerical account ID of the client to update. (required) */
                clientAccountId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Client): Request<Client>;
            invitations: InvitationsResource;
            users: UsersResource;
        }
        interface DealAssociationsResource {
            /** Associate an existing deal with a creative. */
            add(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** The account the creative belongs to. */
                accountId: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** The ID of the creative associated with the deal. */
                creativeId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: AddDealAssociationRequest;
            }): Request<{}>;
            add(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** The account the creative belongs to. */
                accountId: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** The ID of the creative associated with the deal. */
                creativeId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: AddDealAssociationRequest): Request<{}>;
            /** List all creative-deal associations. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** The account to list the associations from. Specify "-" to list all creatives the current user has access to. */
                accountId: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** The creative ID to list the associations from. Specify "-" to list all creatives under the above account. */
                creativeId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Requested page size. Server may return fewer associations than requested. If unspecified, server will pick an appropriate default. */
                pageSize?: number;
                /**
                 * A token identifying a page of results the server should return. Typically, this is the value of ListDealAssociationsResponse.next_page_token returned from the previous call to
                 * 'ListDealAssociations' method.
                 */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /**
                 * An optional query string to filter deal associations. If no filter is specified, all associations will be returned. Supported queries are: - accountId=*account_id_string* -
                 * creativeId=*creative_id_string* - dealsId=*deals_id_string* - dealsStatus:{approved, conditionally_approved, disapproved, not_checked} - openAuctionStatus:{approved,
                 * conditionally_approved, disapproved, not_checked} Example: 'dealsId=12345 AND dealsStatus:disapproved'
                 */
                query?: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListDealAssociationsResponse>;
            /** Remove the association between a deal and a creative. */
            remove(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** The account the creative belongs to. */
                accountId: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** The ID of the creative associated with the deal. */
                creativeId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: RemoveDealAssociationRequest;
            }): Request<{}>;
            remove(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** The account the creative belongs to. */
                accountId: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** The ID of the creative associated with the deal. */
                creativeId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: RemoveDealAssociationRequest): Request<{}>;
        }
        interface CreativesResource {
            /** Creates a creative. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** The account that this creative belongs to. Can be used to filter the response of the creatives.list method. */
                accountId: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Indicates if multiple creatives can share an ID or not. Default is NO_DUPLICATES (one ID per creative). */
                duplicateIdMode?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Creative;
            }): Request<Creative>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** The account that this creative belongs to. Can be used to filter the response of the creatives.list method. */
                accountId: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Indicates if multiple creatives can share an ID or not. Default is NO_DUPLICATES (one ID per creative). */
                duplicateIdMode?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Creative): Request<Creative>;
            /** Gets a creative. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** The account the creative belongs to. */
                accountId: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** The ID of the creative to retrieve. */
                creativeId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Creative>;
            /** Lists creatives. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** The account to list the creatives from. Specify "-" to list all creatives the current user has access to. */
                accountId: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Requested page size. The server may return fewer creatives than requested (due to timeout constraint) even if more are available via another call. If unspecified, server will
                 * pick an appropriate default. Acceptable values are 1 to 1000, inclusive.
                 */
                pageSize?: number;
                /**
                 * A token identifying a page of results the server should return. Typically, this is the value of ListCreativesResponse.next_page_token returned from the previous call to
                 * 'ListCreatives' method.
                 */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /**
                 * An optional query string to filter creatives. If no filter is specified, all active creatives will be returned. Supported queries are: - accountId=*account_id_string* -
                 * creativeId=*creative_id_string* - dealsStatus: {approved, conditionally_approved, disapproved, not_checked} - openAuctionStatus: {approved, conditionally_approved, disapproved,
                 * not_checked} - attribute: {a numeric attribute from the list of attributes} - disapprovalReason: {a reason from DisapprovalReason} Example: 'accountId=12345 AND
                 * (dealsStatus:disapproved AND disapprovalReason:unacceptable_content) OR attribute:47'
                 */
                query?: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListCreativesResponse>;
            /** Stops watching a creative. Will stop push notifications being sent to the topics when the creative changes status. */
            stopWatching(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** The account of the creative to stop notifications for. */
                accountId: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** The creative ID of the creative to stop notifications for. Specify "-" to specify stopping account level notifications. */
                creativeId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: StopWatchingCreativeRequest;
            }): Request<{}>;
            stopWatching(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** The account of the creative to stop notifications for. */
                accountId: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** The creative ID of the creative to stop notifications for. Specify "-" to specify stopping account level notifications. */
                creativeId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: StopWatchingCreativeRequest): Request<{}>;
            /** Updates a creative. */
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** The account that this creative belongs to. Can be used to filter the response of the creatives.list method. */
                accountId: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** The buyer-defined creative ID of this creative. Can be used to filter the response of the creatives.list method. */
                creativeId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Creative;
            }): Request<Creative>;
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** The account that this creative belongs to. Can be used to filter the response of the creatives.list method. */
                accountId: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** The buyer-defined creative ID of this creative. Can be used to filter the response of the creatives.list method. */
                creativeId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Creative): Request<Creative>;
            /** Watches a creative. Will result in push notifications being sent to the topic when the creative changes status. */
            watch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** The account of the creative to watch. */
                accountId: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /**
                 * The creative ID to watch for status changes. Specify "-" to watch all creatives under the above account. If both creative-level and account-level notifications are sent, only a
                 * single notification will be sent to the creative-level notification topic.
                 */
                creativeId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: WatchCreativeRequest;
            }): Request<{}>;
            watch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** The account of the creative to watch. */
                accountId: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /**
                 * The creative ID to watch for status changes. Specify "-" to watch all creatives under the above account. If both creative-level and account-level notifications are sent, only a
                 * single notification will be sent to the creative-level notification topic.
                 */
                creativeId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: WatchCreativeRequest): Request<{}>;
            dealAssociations: DealAssociationsResource;
        }
        interface FinalizedProposalsResource {
            /** List finalized proposals, regardless if a proposal is being renegotiated. A filter expression (PQL query) may be specified to filter the results. The notes will not be returned. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Account ID of the buyer. */
                accountId: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** An optional PQL filter query used to query for proposals. Nested repeated fields, such as proposal.deals.targetingCriterion, cannot be filtered. */
                filter?: string;
                /** Syntax the filter is written in. Current implementation defaults to PQL but in the future it will be LIST_FILTER. */
                filterSyntax?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default. */
                pageSize?: number;
                /** The page token as returned from ListProposalsResponse. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListProposalsResponse>;
        }
        interface ProductsResource {
            /** Gets the requested product by ID. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Account ID of the buyer. */
                accountId: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** The ID for the product to get the head revision for. */
                productId: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Product>;
            /** List all products visible to the buyer (optionally filtered by the specified PQL query). */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Account ID of the buyer. */
                accountId: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * An optional PQL query used to query for products. See https://developers.google.com/ad-manager/docs/pqlreference for documentation about PQL and examples. Nested repeated
                 * fields, such as product.targetingCriterion.inclusions, cannot be filtered.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default. */
                pageSize?: number;
                /** The page token as returned from ListProductsResponse. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListProductsResponse>;
        }
        interface ProposalsResource {
            /**
             * Mark the proposal as accepted at the given revision number. If the number does not match the server's revision number an `ABORTED` error message will be returned. This call updates
             * the proposal_state from `PROPOSED` to `BUYER_ACCEPTED`, or from `SELLER_ACCEPTED` to `FINALIZED`.
             */
            accept(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Account ID of the buyer. */
                accountId: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** The ID of the proposal to accept. */
                proposalId: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: AcceptProposalRequest;
            }): Request<Proposal>;
            accept(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Account ID of the buyer. */
                accountId: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** The ID of the proposal to accept. */
                proposalId: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: AcceptProposalRequest): Request<Proposal>;
            /** Create a new note and attach it to the proposal. The note is assigned a unique ID by the server. The proposal revision number will not increase when associated with a new note. */
            addNote(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Account ID of the buyer. */
                accountId: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** The ID of the proposal to attach the note to. */
                proposalId: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: AddNoteRequest;
            }): Request<Note>;
            addNote(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Account ID of the buyer. */
                accountId: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** The ID of the proposal to attach the note to. */
                proposalId: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: AddNoteRequest): Request<Note>;
            /** Cancel an ongoing negotiation on a proposal. This does not cancel or end serving for the deals if the proposal has been finalized, but only cancels a negotiation unilaterally. */
            cancelNegotiation(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Account ID of the buyer. */
                accountId: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** The ID of the proposal to cancel negotiation for. */
                proposalId: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: CancelNegotiationRequest;
            }): Request<Proposal>;
            cancelNegotiation(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Account ID of the buyer. */
                accountId: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** The ID of the proposal to cancel negotiation for. */
                proposalId: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: CancelNegotiationRequest): Request<Proposal>;
            /**
             * Update the given proposal to indicate that setup has been completed. This method is called by the buyer when the line items have been created on their end for a finalized proposal
             * and all the required creatives have been uploaded using the creatives API. This call updates the `is_setup_completed` bit on the proposal and also notifies the seller. The server
             * will advance the revision number of the most recent proposal.
             */
            completeSetup(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Account ID of the buyer. */
                accountId: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** The ID of the proposal to mark as setup completed. */
                proposalId: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: CompleteSetupRequest;
            }): Request<Proposal>;
            completeSetup(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Account ID of the buyer. */
                accountId: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** The ID of the proposal to mark as setup completed. */
                proposalId: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: CompleteSetupRequest): Request<Proposal>;
            /** Create the given proposal. Each created proposal and any deals it contains are assigned a unique ID by the server. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Account ID of the buyer. */
                accountId: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Proposal;
            }): Request<Proposal>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Account ID of the buyer. */
                accountId: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Proposal): Request<Proposal>;
            /** Gets a proposal given its ID. The proposal is returned at its head revision. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Account ID of the buyer. */
                accountId: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** The unique ID of the proposal */
                proposalId: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Proposal>;
            /**
             * List proposals. A filter expression (PQL query) may be specified to filter the results. To retrieve all finalized proposals, regardless if a proposal is being renegotiated, see the
             * FinalizedProposals resource. Note that Bidder/ChildSeat relationships differ from the usual behavior. A Bidder account can only see its child seats' proposals by specifying the
             * ChildSeat's accountId in the request path.
             */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Account ID of the buyer. */
                accountId: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** An optional PQL filter query used to query for proposals. Nested repeated fields, such as proposal.deals.targetingCriterion, cannot be filtered. */
                filter?: string;
                /** Syntax the filter is written in. Current implementation defaults to PQL but in the future it will be LIST_FILTER. */
                filterSyntax?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default. */
                pageSize?: number;
                /** The page token as returned from ListProposalsResponse. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListProposalsResponse>;
            /**
             * Update the given proposal to pause serving. This method will set the `DealServingMetadata.DealPauseStatus.has_buyer_paused` bit to true for all deals in the proposal. It is a no-op
             * to pause an already-paused proposal. It is an error to call PauseProposal for a proposal that is not finalized or renegotiating.
             */
            pause(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Account ID of the buyer. */
                accountId: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** The ID of the proposal to pause. */
                proposalId: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: PauseProposalRequest;
            }): Request<Proposal>;
            pause(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Account ID of the buyer. */
                accountId: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** The ID of the proposal to pause. */
                proposalId: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: PauseProposalRequest): Request<Proposal>;
            /**
             * Update the given proposal to resume serving. This method will set the `DealServingMetadata.DealPauseStatus.has_buyer_paused` bit to false for all deals in the proposal. Note that if
             * the `has_seller_paused` bit is also set, serving will not resume until the seller also resumes. It is a no-op to resume an already-running proposal. It is an error to call
             * ResumeProposal for a proposal that is not finalized or renegotiating.
             */
            resume(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Account ID of the buyer. */
                accountId: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** The ID of the proposal to resume. */
                proposalId: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: ResumeProposalRequest;
            }): Request<Proposal>;
            resume(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Account ID of the buyer. */
                accountId: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** The ID of the proposal to resume. */
                proposalId: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: ResumeProposalRequest): Request<Proposal>;
            /**
             * Update the given proposal at the client known revision number. If the server revision has advanced since the passed-in `proposal.proposal_revision`, an `ABORTED` error message will
             * be returned. Only the buyer-modifiable fields of the proposal will be updated. Note that the deals in the proposal will be updated to match the passed-in copy. If a passed-in deal
             * does not have a `deal_id`, the server will assign a new unique ID and create the deal. If passed-in deal has a `deal_id`, it will be updated to match the passed-in copy. Any
             * existing deals not present in the passed-in proposal will be deleted. It is an error to pass in a deal with a `deal_id` not present at head.
             */
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Account ID of the buyer. */
                accountId: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** The unique ID of the proposal. */
                proposalId: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Proposal;
            }): Request<Proposal>;
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Account ID of the buyer. */
                accountId: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** The unique ID of the proposal. */
                proposalId: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Proposal): Request<Proposal>;
        }
        interface PublisherProfilesResource {
            /** Gets the requested publisher profile by id. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Account ID of the buyer. */
                accountId: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** The id for the publisher profile to get. */
                publisherProfileId: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<PublisherProfile>;
            /** List all publisher profiles visible to the buyer */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Account ID of the buyer. */
                accountId: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Specify the number of results to include per page. */
                pageSize?: number;
                /** The page token as return from ListPublisherProfilesResponse. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListPublisherProfilesResponse>;
        }
        interface AccountsResource {
            clients: ClientsResource;
            creatives: CreativesResource;
            finalizedProposals: FinalizedProposalsResource;
            products: ProductsResource;
            proposals: ProposalsResource;
            publisherProfiles: PublisherProfilesResource;
        }
        interface BidMetricsResource {
            /** Lists all metrics that are measured in terms of number of bids. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * Name of the filter set that should be applied to the requested metrics. For example: - For a bidder-level filter set for bidder 123: `bidders/123/filterSets/abc` - For an
                 * account-level filter set for the buyer account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` - For an account-level filter set for the child seat buyer
                 * account 456 whose bidder is 123: `bidders/123/accounts/456/filterSets/abc`
                 */
                filterSetName: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default. */
                pageSize?: number;
                /**
                 * A token identifying a page of results the server should return. Typically, this is the value of ListBidMetricsResponse.nextPageToken returned from the previous call to the
                 * bidMetrics.list method.
                 */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListBidMetricsResponse>;
        }
        interface BidResponseErrorsResource {
            /** List all errors that occurred in bid responses, with the number of bid responses affected for each reason. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * Name of the filter set that should be applied to the requested metrics. For example: - For a bidder-level filter set for bidder 123: `bidders/123/filterSets/abc` - For an
                 * account-level filter set for the buyer account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` - For an account-level filter set for the child seat buyer
                 * account 456 whose bidder is 123: `bidders/123/accounts/456/filterSets/abc`
                 */
                filterSetName: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default. */
                pageSize?: number;
                /**
                 * A token identifying a page of results the server should return. Typically, this is the value of ListBidResponseErrorsResponse.nextPageToken returned from the previous call to
                 * the bidResponseErrors.list method.
                 */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListBidResponseErrorsResponse>;
        }
        interface BidResponsesWithoutBidsResource {
            /** List all reasons for which bid responses were considered to have no applicable bids, with the number of bid responses affected for each reason. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * Name of the filter set that should be applied to the requested metrics. For example: - For a bidder-level filter set for bidder 123: `bidders/123/filterSets/abc` - For an
                 * account-level filter set for the buyer account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` - For an account-level filter set for the child seat buyer
                 * account 456 whose bidder is 123: `bidders/123/accounts/456/filterSets/abc`
                 */
                filterSetName: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default. */
                pageSize?: number;
                /**
                 * A token identifying a page of results the server should return. Typically, this is the value of ListBidResponsesWithoutBidsResponse.nextPageToken returned from the previous call
                 * to the bidResponsesWithoutBids.list method.
                 */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListBidResponsesWithoutBidsResponse>;
        }
        interface FilteredBidRequestsResource {
            /** List all reasons that caused a bid request not to be sent for an impression, with the number of bid requests not sent for each reason. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * Name of the filter set that should be applied to the requested metrics. For example: - For a bidder-level filter set for bidder 123: `bidders/123/filterSets/abc` - For an
                 * account-level filter set for the buyer account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` - For an account-level filter set for the child seat buyer
                 * account 456 whose bidder is 123: `bidders/123/accounts/456/filterSets/abc`
                 */
                filterSetName: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default. */
                pageSize?: number;
                /**
                 * A token identifying a page of results the server should return. Typically, this is the value of ListFilteredBidRequestsResponse.nextPageToken returned from the previous call to
                 * the filteredBidRequests.list method.
                 */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListFilteredBidRequestsResponse>;
        }
        interface CreativesResource {
            /** List all creatives associated with a specific reason for which bids were filtered, with the number of bids filtered for each creative. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /**
                 * The ID of the creative status for which to retrieve a breakdown by creative. See
                 * [creative-status-codes](https://developers.google.com/authorized-buyers/rtb/downloads/creative-status-codes).
                 */
                creativeStatusId: number;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * Name of the filter set that should be applied to the requested metrics. For example: - For a bidder-level filter set for bidder 123: `bidders/123/filterSets/abc` - For an
                 * account-level filter set for the buyer account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` - For an account-level filter set for the child seat buyer
                 * account 456 whose bidder is 123: `bidders/123/accounts/456/filterSets/abc`
                 */
                filterSetName: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default. */
                pageSize?: number;
                /**
                 * A token identifying a page of results the server should return. Typically, this is the value of ListCreativeStatusBreakdownByCreativeResponse.nextPageToken returned from the
                 * previous call to the filteredBids.creatives.list method.
                 */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListCreativeStatusBreakdownByCreativeResponse>;
        }
        interface DetailsResource {
            /** List all details associated with a specific reason for which bids were filtered, with the number of bids filtered for each detail. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /**
                 * The ID of the creative status for which to retrieve a breakdown by detail. See
                 * [creative-status-codes](https://developers.google.com/authorized-buyers/rtb/downloads/creative-status-codes). Details are only available for statuses 10, 14, 15, 17, 18, 19, 86,
                 * and 87.
                 */
                creativeStatusId: number;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * Name of the filter set that should be applied to the requested metrics. For example: - For a bidder-level filter set for bidder 123: `bidders/123/filterSets/abc` - For an
                 * account-level filter set for the buyer account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` - For an account-level filter set for the child seat buyer
                 * account 456 whose bidder is 123: `bidders/123/accounts/456/filterSets/abc`
                 */
                filterSetName: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default. */
                pageSize?: number;
                /**
                 * A token identifying a page of results the server should return. Typically, this is the value of ListCreativeStatusBreakdownByDetailResponse.nextPageToken returned from the
                 * previous call to the filteredBids.details.list method.
                 */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListCreativeStatusBreakdownByDetailResponse>;
        }
        interface FilteredBidsResource {
            /** List all reasons for which bids were filtered, with the number of bids filtered for each reason. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * Name of the filter set that should be applied to the requested metrics. For example: - For a bidder-level filter set for bidder 123: `bidders/123/filterSets/abc` - For an
                 * account-level filter set for the buyer account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` - For an account-level filter set for the child seat buyer
                 * account 456 whose bidder is 123: `bidders/123/accounts/456/filterSets/abc`
                 */
                filterSetName: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default. */
                pageSize?: number;
                /**
                 * A token identifying a page of results the server should return. Typically, this is the value of ListFilteredBidsResponse.nextPageToken returned from the previous call to the
                 * filteredBids.list method.
                 */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListFilteredBidsResponse>;
            creatives: CreativesResource;
            details: DetailsResource;
        }
        // tslint:disable-next-line:interface-name
        interface ImpressionMetricsResource {
            /** Lists all metrics that are measured in terms of number of impressions. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * Name of the filter set that should be applied to the requested metrics. For example: - For a bidder-level filter set for bidder 123: `bidders/123/filterSets/abc` - For an
                 * account-level filter set for the buyer account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` - For an account-level filter set for the child seat buyer
                 * account 456 whose bidder is 123: `bidders/123/accounts/456/filterSets/abc`
                 */
                filterSetName: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default. */
                pageSize?: number;
                /**
                 * A token identifying a page of results the server should return. Typically, this is the value of ListImpressionMetricsResponse.nextPageToken returned from the previous call to
                 * the impressionMetrics.list method.
                 */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListImpressionMetricsResponse>;
        }
        interface LosingBidsResource {
            /** List all reasons for which bids lost in the auction, with the number of bids that lost for each reason. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * Name of the filter set that should be applied to the requested metrics. For example: - For a bidder-level filter set for bidder 123: `bidders/123/filterSets/abc` - For an
                 * account-level filter set for the buyer account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` - For an account-level filter set for the child seat buyer
                 * account 456 whose bidder is 123: `bidders/123/accounts/456/filterSets/abc`
                 */
                filterSetName: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default. */
                pageSize?: number;
                /**
                 * A token identifying a page of results the server should return. Typically, this is the value of ListLosingBidsResponse.nextPageToken returned from the previous call to the
                 * losingBids.list method.
                 */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListLosingBidsResponse>;
        }
        interface NonBillableWinningBidsResource {
            /** List all reasons for which winning bids were not billable, with the number of bids not billed for each reason. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * Name of the filter set that should be applied to the requested metrics. For example: - For a bidder-level filter set for bidder 123: `bidders/123/filterSets/abc` - For an
                 * account-level filter set for the buyer account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` - For an account-level filter set for the child seat buyer
                 * account 456 whose bidder is 123: `bidders/123/accounts/456/filterSets/abc`
                 */
                filterSetName: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default. */
                pageSize?: number;
                /**
                 * A token identifying a page of results the server should return. Typically, this is the value of ListNonBillableWinningBidsResponse.nextPageToken returned from the previous call
                 * to the nonBillableWinningBids.list method.
                 */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListNonBillableWinningBidsResponse>;
        }
        interface FilterSetsResource {
            /** Creates the specified filter set for the account with the given account ID. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * Whether the filter set is transient, or should be persisted indefinitely. By default, filter sets are not transient. If transient, it will be available for at least 1 hour after
                 * creation.
                 */
                isTransient?: boolean;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Name of the owner (bidder or account) of the filter set to be created. For example: - For a bidder-level filter set for bidder 123: `bidders/123` - For an account-level filter
                 * set for the buyer account representing bidder 123: `bidders/123/accounts/123` - For an account-level filter set for the child seat buyer account 456 whose bidder is 123:
                 * `bidders/123/accounts/456`
                 */
                ownerName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: FilterSet;
            }): Request<FilterSet>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * Whether the filter set is transient, or should be persisted indefinitely. By default, filter sets are not transient. If transient, it will be available for at least 1 hour after
                 * creation.
                 */
                isTransient?: boolean;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Name of the owner (bidder or account) of the filter set to be created. For example: - For a bidder-level filter set for bidder 123: `bidders/123` - For an account-level filter
                 * set for the buyer account representing bidder 123: `bidders/123/accounts/123` - For an account-level filter set for the child seat buyer account 456 whose bidder is 123:
                 * `bidders/123/accounts/456`
                 */
                ownerName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: FilterSet): Request<FilterSet>;
            /** Deletes the requested filter set from the account with the given account ID. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * Full name of the resource to delete. For example: - For a bidder-level filter set for bidder 123: `bidders/123/filterSets/abc` - For an account-level filter set for the buyer
                 * account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` - For an account-level filter set for the child seat buyer account 456 whose bidder is 123:
                 * `bidders/123/accounts/456/filterSets/abc`
                 */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<{}>;
            /** Retrieves the requested filter set for the account with the given account ID. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * Full name of the resource being requested. For example: - For a bidder-level filter set for bidder 123: `bidders/123/filterSets/abc` - For an account-level filter set for the
                 * buyer account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` - For an account-level filter set for the child seat buyer account 456 whose bidder is 123:
                 * `bidders/123/accounts/456/filterSets/abc`
                 */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<FilterSet>;
            /** Lists all filter sets for the account with the given account ID. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Name of the owner (bidder or account) of the filter sets to be listed. For example: - For a bidder-level filter set for bidder 123: `bidders/123` - For an account-level filter
                 * set for the buyer account representing bidder 123: `bidders/123/accounts/123` - For an account-level filter set for the child seat buyer account 456 whose bidder is 123:
                 * `bidders/123/accounts/456`
                 */
                ownerName: string;
                /** Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default. */
                pageSize?: number;
                /**
                 * A token identifying a page of results the server should return. Typically, this is the value of ListFilterSetsResponse.nextPageToken returned from the previous call to the
                 * accounts.filterSets.list method.
                 */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListFilterSetsResponse>;
            bidMetrics: BidMetricsResource;
            bidResponseErrors: BidResponseErrorsResource;
            bidResponsesWithoutBids: BidResponsesWithoutBidsResource;
            filteredBidRequests: FilteredBidRequestsResource;
            filteredBids: FilteredBidsResource;
            impressionMetrics: ImpressionMetricsResource;
            losingBids: LosingBidsResource;
            nonBillableWinningBids: NonBillableWinningBidsResource;
        }
        interface AccountsResource {
            filterSets: FilterSetsResource;
        }
        interface BidMetricsResource {
            /** Lists all metrics that are measured in terms of number of bids. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * Name of the filter set that should be applied to the requested metrics. For example: - For a bidder-level filter set for bidder 123: `bidders/123/filterSets/abc` - For an
                 * account-level filter set for the buyer account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` - For an account-level filter set for the child seat buyer
                 * account 456 whose bidder is 123: `bidders/123/accounts/456/filterSets/abc`
                 */
                filterSetName: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default. */
                pageSize?: number;
                /**
                 * A token identifying a page of results the server should return. Typically, this is the value of ListBidMetricsResponse.nextPageToken returned from the previous call to the
                 * bidMetrics.list method.
                 */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListBidMetricsResponse>;
        }
        interface BidResponseErrorsResource {
            /** List all errors that occurred in bid responses, with the number of bid responses affected for each reason. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * Name of the filter set that should be applied to the requested metrics. For example: - For a bidder-level filter set for bidder 123: `bidders/123/filterSets/abc` - For an
                 * account-level filter set for the buyer account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` - For an account-level filter set for the child seat buyer
                 * account 456 whose bidder is 123: `bidders/123/accounts/456/filterSets/abc`
                 */
                filterSetName: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default. */
                pageSize?: number;
                /**
                 * A token identifying a page of results the server should return. Typically, this is the value of ListBidResponseErrorsResponse.nextPageToken returned from the previous call to
                 * the bidResponseErrors.list method.
                 */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListBidResponseErrorsResponse>;
        }
        interface BidResponsesWithoutBidsResource {
            /** List all reasons for which bid responses were considered to have no applicable bids, with the number of bid responses affected for each reason. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * Name of the filter set that should be applied to the requested metrics. For example: - For a bidder-level filter set for bidder 123: `bidders/123/filterSets/abc` - For an
                 * account-level filter set for the buyer account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` - For an account-level filter set for the child seat buyer
                 * account 456 whose bidder is 123: `bidders/123/accounts/456/filterSets/abc`
                 */
                filterSetName: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default. */
                pageSize?: number;
                /**
                 * A token identifying a page of results the server should return. Typically, this is the value of ListBidResponsesWithoutBidsResponse.nextPageToken returned from the previous call
                 * to the bidResponsesWithoutBids.list method.
                 */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListBidResponsesWithoutBidsResponse>;
        }
        interface FilteredBidRequestsResource {
            /** List all reasons that caused a bid request not to be sent for an impression, with the number of bid requests not sent for each reason. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * Name of the filter set that should be applied to the requested metrics. For example: - For a bidder-level filter set for bidder 123: `bidders/123/filterSets/abc` - For an
                 * account-level filter set for the buyer account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` - For an account-level filter set for the child seat buyer
                 * account 456 whose bidder is 123: `bidders/123/accounts/456/filterSets/abc`
                 */
                filterSetName: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default. */
                pageSize?: number;
                /**
                 * A token identifying a page of results the server should return. Typically, this is the value of ListFilteredBidRequestsResponse.nextPageToken returned from the previous call to
                 * the filteredBidRequests.list method.
                 */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListFilteredBidRequestsResponse>;
        }
        interface CreativesResource {
            /** List all creatives associated with a specific reason for which bids were filtered, with the number of bids filtered for each creative. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /**
                 * The ID of the creative status for which to retrieve a breakdown by creative. See
                 * [creative-status-codes](https://developers.google.com/authorized-buyers/rtb/downloads/creative-status-codes).
                 */
                creativeStatusId: number;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * Name of the filter set that should be applied to the requested metrics. For example: - For a bidder-level filter set for bidder 123: `bidders/123/filterSets/abc` - For an
                 * account-level filter set for the buyer account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` - For an account-level filter set for the child seat buyer
                 * account 456 whose bidder is 123: `bidders/123/accounts/456/filterSets/abc`
                 */
                filterSetName: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default. */
                pageSize?: number;
                /**
                 * A token identifying a page of results the server should return. Typically, this is the value of ListCreativeStatusBreakdownByCreativeResponse.nextPageToken returned from the
                 * previous call to the filteredBids.creatives.list method.
                 */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListCreativeStatusBreakdownByCreativeResponse>;
        }
        interface DetailsResource {
            /** List all details associated with a specific reason for which bids were filtered, with the number of bids filtered for each detail. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /**
                 * The ID of the creative status for which to retrieve a breakdown by detail. See
                 * [creative-status-codes](https://developers.google.com/authorized-buyers/rtb/downloads/creative-status-codes). Details are only available for statuses 10, 14, 15, 17, 18, 19, 86,
                 * and 87.
                 */
                creativeStatusId: number;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * Name of the filter set that should be applied to the requested metrics. For example: - For a bidder-level filter set for bidder 123: `bidders/123/filterSets/abc` - For an
                 * account-level filter set for the buyer account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` - For an account-level filter set for the child seat buyer
                 * account 456 whose bidder is 123: `bidders/123/accounts/456/filterSets/abc`
                 */
                filterSetName: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default. */
                pageSize?: number;
                /**
                 * A token identifying a page of results the server should return. Typically, this is the value of ListCreativeStatusBreakdownByDetailResponse.nextPageToken returned from the
                 * previous call to the filteredBids.details.list method.
                 */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListCreativeStatusBreakdownByDetailResponse>;
        }
        interface FilteredBidsResource {
            /** List all reasons for which bids were filtered, with the number of bids filtered for each reason. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * Name of the filter set that should be applied to the requested metrics. For example: - For a bidder-level filter set for bidder 123: `bidders/123/filterSets/abc` - For an
                 * account-level filter set for the buyer account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` - For an account-level filter set for the child seat buyer
                 * account 456 whose bidder is 123: `bidders/123/accounts/456/filterSets/abc`
                 */
                filterSetName: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default. */
                pageSize?: number;
                /**
                 * A token identifying a page of results the server should return. Typically, this is the value of ListFilteredBidsResponse.nextPageToken returned from the previous call to the
                 * filteredBids.list method.
                 */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListFilteredBidsResponse>;
            creatives: CreativesResource;
            details: DetailsResource;
        }
        // tslint:disable-next-line:interface-name
        interface ImpressionMetricsResource {
            /** Lists all metrics that are measured in terms of number of impressions. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * Name of the filter set that should be applied to the requested metrics. For example: - For a bidder-level filter set for bidder 123: `bidders/123/filterSets/abc` - For an
                 * account-level filter set for the buyer account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` - For an account-level filter set for the child seat buyer
                 * account 456 whose bidder is 123: `bidders/123/accounts/456/filterSets/abc`
                 */
                filterSetName: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default. */
                pageSize?: number;
                /**
                 * A token identifying a page of results the server should return. Typically, this is the value of ListImpressionMetricsResponse.nextPageToken returned from the previous call to
                 * the impressionMetrics.list method.
                 */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListImpressionMetricsResponse>;
        }
        interface LosingBidsResource {
            /** List all reasons for which bids lost in the auction, with the number of bids that lost for each reason. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * Name of the filter set that should be applied to the requested metrics. For example: - For a bidder-level filter set for bidder 123: `bidders/123/filterSets/abc` - For an
                 * account-level filter set for the buyer account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` - For an account-level filter set for the child seat buyer
                 * account 456 whose bidder is 123: `bidders/123/accounts/456/filterSets/abc`
                 */
                filterSetName: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default. */
                pageSize?: number;
                /**
                 * A token identifying a page of results the server should return. Typically, this is the value of ListLosingBidsResponse.nextPageToken returned from the previous call to the
                 * losingBids.list method.
                 */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListLosingBidsResponse>;
        }
        interface NonBillableWinningBidsResource {
            /** List all reasons for which winning bids were not billable, with the number of bids not billed for each reason. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * Name of the filter set that should be applied to the requested metrics. For example: - For a bidder-level filter set for bidder 123: `bidders/123/filterSets/abc` - For an
                 * account-level filter set for the buyer account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` - For an account-level filter set for the child seat buyer
                 * account 456 whose bidder is 123: `bidders/123/accounts/456/filterSets/abc`
                 */
                filterSetName: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default. */
                pageSize?: number;
                /**
                 * A token identifying a page of results the server should return. Typically, this is the value of ListNonBillableWinningBidsResponse.nextPageToken returned from the previous call
                 * to the nonBillableWinningBids.list method.
                 */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListNonBillableWinningBidsResponse>;
        }
        interface FilterSetsResource {
            /** Creates the specified filter set for the account with the given account ID. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * Whether the filter set is transient, or should be persisted indefinitely. By default, filter sets are not transient. If transient, it will be available for at least 1 hour after
                 * creation.
                 */
                isTransient?: boolean;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Name of the owner (bidder or account) of the filter set to be created. For example: - For a bidder-level filter set for bidder 123: `bidders/123` - For an account-level filter
                 * set for the buyer account representing bidder 123: `bidders/123/accounts/123` - For an account-level filter set for the child seat buyer account 456 whose bidder is 123:
                 * `bidders/123/accounts/456`
                 */
                ownerName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: FilterSet;
            }): Request<FilterSet>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * Whether the filter set is transient, or should be persisted indefinitely. By default, filter sets are not transient. If transient, it will be available for at least 1 hour after
                 * creation.
                 */
                isTransient?: boolean;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Name of the owner (bidder or account) of the filter set to be created. For example: - For a bidder-level filter set for bidder 123: `bidders/123` - For an account-level filter
                 * set for the buyer account representing bidder 123: `bidders/123/accounts/123` - For an account-level filter set for the child seat buyer account 456 whose bidder is 123:
                 * `bidders/123/accounts/456`
                 */
                ownerName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: FilterSet): Request<FilterSet>;
            /** Deletes the requested filter set from the account with the given account ID. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * Full name of the resource to delete. For example: - For a bidder-level filter set for bidder 123: `bidders/123/filterSets/abc` - For an account-level filter set for the buyer
                 * account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` - For an account-level filter set for the child seat buyer account 456 whose bidder is 123:
                 * `bidders/123/accounts/456/filterSets/abc`
                 */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<{}>;
            /** Retrieves the requested filter set for the account with the given account ID. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * Full name of the resource being requested. For example: - For a bidder-level filter set for bidder 123: `bidders/123/filterSets/abc` - For an account-level filter set for the
                 * buyer account representing bidder 123: `bidders/123/accounts/123/filterSets/abc` - For an account-level filter set for the child seat buyer account 456 whose bidder is 123:
                 * `bidders/123/accounts/456/filterSets/abc`
                 */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<FilterSet>;
            /** Lists all filter sets for the account with the given account ID. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Name of the owner (bidder or account) of the filter sets to be listed. For example: - For a bidder-level filter set for bidder 123: `bidders/123` - For an account-level filter
                 * set for the buyer account representing bidder 123: `bidders/123/accounts/123` - For an account-level filter set for the child seat buyer account 456 whose bidder is 123:
                 * `bidders/123/accounts/456`
                 */
                ownerName: string;
                /** Requested page size. The server may return fewer results than requested. If unspecified, the server will pick an appropriate default. */
                pageSize?: number;
                /**
                 * A token identifying a page of results the server should return. Typically, this is the value of ListFilterSetsResponse.nextPageToken returned from the previous call to the
                 * accounts.filterSets.list method.
                 */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListFilterSetsResponse>;
            bidMetrics: BidMetricsResource;
            bidResponseErrors: BidResponseErrorsResource;
            bidResponsesWithoutBids: BidResponsesWithoutBidsResource;
            filteredBidRequests: FilteredBidRequestsResource;
            filteredBids: FilteredBidsResource;
            impressionMetrics: ImpressionMetricsResource;
            losingBids: LosingBidsResource;
            nonBillableWinningBids: NonBillableWinningBidsResource;
        }
        interface BiddersResource {
            accounts: AccountsResource;
            filterSets: FilterSetsResource;
        }

        const accounts: AccountsResource;

        const bidders: BiddersResource;
    }
}
