/* Type definitions for non-npm package Pollen API v1 0.0 */
// Project: https://developers.google.com/maps/documentation/pollen
// Definitions by: Maxim Mazurok <https://github.com/Maxim-Mazurok>
//                 Nick Amoscato <https://github.com/namoscato>
//                 Declan Vong <https://github.com/declanvong>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped

// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
// Generated from: https://pollen.googleapis.com/$discovery/rest?version=v1
// Revision: 20250909

/// <reference types="gapi.client" />

declare namespace gapi.client {
  /** Load Pollen API v1 */
  function load(
    urlOrObject: 'https://pollen.googleapis.com/$discovery/rest?version=v1',
  ): Promise<void>;
  /** @deprecated Please load APIs with discovery documents. */
  function load(name: 'pollen', version: 'v1'): Promise<void>;
  /** @deprecated Please load APIs with discovery documents. */
  function load(name: 'pollen', version: 'v1', callback: () => any): void;

  namespace pollen {
    interface Color {
      /** The fraction of this color that should be applied to the pixel. That is, the final pixel color is defined by the equation: `pixel color = alpha * (this color) + (1.0 - alpha) * (background color)` This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0 corresponds to a completely transparent color. This uses a wrapper message rather than a simple float scalar so that it is possible to distinguish between a default value and the value being unset. If omitted, this color object is rendered as a solid color (as if the alpha value had been explicitly given a value of 1.0). */
      alpha?: number;
      /** The amount of blue in the color as a value in the interval [0, 1]. */
      blue?: number;
      /** The amount of green in the color as a value in the interval [0, 1]. */
      green?: number;
      /** The amount of red in the color as a value in the interval [0, 1]. */
      red?: number;
    }
    interface Date {
      /** Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant. */
      day?: number;
      /** Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day. */
      month?: number;
      /** Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year. */
      year?: number;
    }
    interface DayInfo {
      /** The date in UTC at which the pollen forecast data is represented. */
      date?: Date;
      /** This list will include up to 15 pollen species affecting the location specified in the request. */
      plantInfo?: PlantInfo[];
      /** This list will include up to three pollen types (GRASS, WEED, TREE) affecting the location specified in the request. */
      pollenTypeInfo?: PollenTypeInfo[];
    }
    interface HttpBody {
      /** The HTTP Content-Type header value specifying the content type of the body. */
      contentType?: string;
      /** The HTTP request/response body as raw binary. */
      data?: string;
      /** Application specific response metadata. Must be set in the first response for streaming APIs. */
      extensions?: Array<{[P in string]: any}>;
    }
    interface IndexInfo {
      /** Text classification of index numerical score interpretation. The index consists of six categories: * 0: "None" * 1: "Very low" * 2: "Low" * 3: "Moderate" * 4: "High" * 5: "Very high */
      category?: string;
      /** The index's code. This field represents the index for programming purposes by using snake cases instead of spaces. Example: "UPI". */
      code?: string;
      /** The color used to represent the Pollen Index numeric score. */
      color?: Color;
      /** A human readable representation of the index name. Example: "Universal Pollen Index". */
      displayName?: string;
      /** Textual explanation of current index level. */
      indexDescription?: string;
      /** The index's numeric score. Numeric range is between 0 and 5. */
      value?: number;
    }
    interface LookupForecastResponse {
      /** Required. This object contains the daily forecast information for each day requested. */
      dailyInfo?: DayInfo[];
      /** Optional. The token to retrieve the next page. */
      nextPageToken?: string;
      /** The ISO_3166-1 alpha-2 code of the country/region corresponding to the location provided in the request. This field might be omitted from the response if the location provided in the request resides in a disputed territory. */
      regionCode?: string;
    }
    interface PlantDescription {
      /** Textual description of pollen cross reaction plants. Example: Alder, Hazel, Hornbeam, Beech, Willow, and Oak pollen. */
      crossReaction?: string;
      /** A human readable representation of the plant family name. Example: "Betulaceae (the Birch family)". */
      family?: string;
      /** Link to the picture of the plant. */
      picture?: string;
      /** Link to a closeup picture of the plant. */
      pictureCloseup?: string;
      /** Textual list of explanations of seasons where the pollen is active. Example: "Late winter, spring". */
      season?: string;
      /** Textual description of the plants' colors of leaves, bark, flowers or seeds that helps identify the plant. */
      specialColors?: string;
      /** Textual description of the plants' shapes of leaves, bark, flowers or seeds that helps identify the plant. */
      specialShapes?: string;
      /** The plant's pollen type. For example: "GRASS". A list of all available codes could be found here. */
      type?: string;
    }
    interface PlantInfo {
      /** The plant code name. For example: "COTTONWOOD". A list of all available codes could be found here. */
      code?: string;
      /** A human readable representation of the plant name. Example: â€œCottonwood". */
      displayName?: string;
      /** This object contains data representing specific pollen index value, category and description. */
      indexInfo?: IndexInfo;
      /** Indication of either the plant is in season or not. */
      inSeason?: boolean;
      /** Contains general information about plants, including details on their seasonality, special shapes and colors, information about allergic cross-reactions, and plant photos. */
      plantDescription?: PlantDescription;
    }
    interface PollenTypeInfo {
      /** The pollen type's code name. For example: "GRASS" */
      code?: string;
      /** A human readable representation of the pollen type name. Example: "Grass" */
      displayName?: string;
      /** Textual list of explanations, related to health insights based on the current pollen levels. */
      healthRecommendations?: string[];
      /** Contains the Universal Pollen Index (UPI) data for the pollen type. */
      indexInfo?: IndexInfo;
      /** Indication whether the plant is in season or not. */
      inSeason?: boolean;
    }
    interface ForecastResource {
      /** Returns up to 5 days of daily pollen information in more than 65 countries, up to 1km resolution. */
      lookup(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Required. A number that indicates how many forecast days to request (minimum value 1, maximum value is 5). */
        days?: number;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Optional. Allows the client to choose the language for the response. If data cannot be provided for that language, the API uses the closest match. Allowed values rely on the IETF BCP-47 standard. The default value is "en". */
        languageCode?: string;
        /** The latitude in degrees. It must be in the range [-90.0, +90.0]. */
        'location.latitude'?: number;
        /** The longitude in degrees. It must be in the range [-180.0, +180.0]. */
        'location.longitude'?: number;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Optional. The maximum number of daily info records to return per page. The default and max value is 5, indicating 5 days of data. */
        pageSize?: number;
        /** Optional. A page token received from a previous daily call. It is used to retrieve the subsequent page. Note that when providing a value for the page token, all other request parameters provided must match the previous call that provided the page token. */
        pageToken?: string;
        /** Optional. Contains general information about plants, including details on their seasonality, special shapes and colors, information about allergic cross-reactions, and plant photos. The default value is "true". */
        plantsDescription?: boolean;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<LookupForecastResponse>;
    }
    interface HeatmapTilesResource {
      /** Returns a byte array containing the data of the tile PNG image. */
      lookupHeatmapTile(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. The type of the pollen heatmap. Defines the combination of pollen type and index that the map will graphically represent. */
        mapType: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Required. Defines the east-west point in the requested tile. */
        x: number;
        /** Required. Defines the north-south point in the requested tile. */
        y: number;
        /** Required. The map's zoom level. Defines how large or small the contents of a map appear in a map view. * Zoom level 0 is the entire world in a single tile. * Zoom level 1 is the entire world in 4 tiles. * Zoom level 2 is the entire world in 16 tiles. * Zoom level 16 is the entire world in 65,536 tiles. Allowed values: 0-16 */
        zoom: number;
      }): Request<HttpBody>;
    }
    interface MapTypesResource {
      heatmapTiles: HeatmapTilesResource;
    }

    const forecast: ForecastResource;

    const mapTypes: MapTypesResource;
  }
}
