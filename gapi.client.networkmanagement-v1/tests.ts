/* This is stub file for gapi.client.networkmanagement-v1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20220812

gapi.load('client', async () => {
    /** now we can use gapi.client */

    await gapi.client.load('https://networkmanagement.googleapis.com/$discovery/rest?version=v1');
    /** now we can use gapi.client.networkmanagement */

    /** don't forget to authenticate your client before sending any request to resources: */
    /** declare client_id registered in Google Developers Console */
    const client_id = '<<PUT YOUR CLIENT ID HERE>>';
    const scope = [
        /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
        'https://www.googleapis.com/auth/cloud-platform',
    ];
    const immediate = false;
    gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
        if (authResult && !authResult.error) {
            /** handle successful authorization */
            run();
        } else {
            /** handle authorization error */
        }
    });

    async function run() {
        /** Gets information about a location. */
        await gapi.client.networkmanagement.projects.locations.get({
            name: "Test string",
        });
        /** Lists information about the supported locations for this service. */
        await gapi.client.networkmanagement.projects.locations.list({
            filter: "Test string",
            name: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /**
         * Creates a new Connectivity Test. After you create a test, the reachability analysis is performed as part of the long running operation, which completes when the analysis completes. If
         * the endpoint specifications in `ConnectivityTest` are invalid (for example, containing non-existent resources in the network, or you don't have read permissions to the network
         * configurations of listed projects), then the reachability result returns a value of `UNKNOWN`. If the endpoint specifications in `ConnectivityTest` are incomplete, the reachability
         * result returns a value of AMBIGUOUS. For more information, see the Connectivity Test documentation.
         */
        await gapi.client.networkmanagement.projects.locations.global.connectivityTests.create({
            parent: "Test string",
            testId: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            destination: {
                cloudFunction: {
                    uri: "Test string",
                },
                cloudSqlInstance: "Test string",
                gkeMasterCluster: "Test string",
                instance: "Test string",
                ipAddress: "Test string",
                network: "Test string",
                networkType: "Test string",
                port: 42,
                projectId: "Test string",
            },
            displayName: "Test string",
            labels: {
                A: "Test string"
            },
            name: "Test string",
            protocol: "Test string",
            reachabilityDetails: {
                error: {
                    code: 42,
                    details: [
                        {
                            A: 42
                        }
                    ],
                    message: "Test string",
                },
                result: "Test string",
                traces: [
                    {
                        endpointInfo: {
                            destinationIp: "Test string",
                            destinationNetworkUri: "Test string",
                            destinationPort: 42,
                            protocol: "Test string",
                            sourceIp: "Test string",
                            sourceNetworkUri: "Test string",
                            sourcePort: 42,
                        },
                        steps: [
                            {
                                abort: {
                                    cause: "Test string",
                                    projectsMissingPermission: [
                                        "Test string"
                                    ],
                                    resourceUri: "Test string",
                                },
                                causesDrop: true,
                                cloudFunction: {
                                    displayName: "Test string",
                                    location: "Test string",
                                    uri: "Test string",
                                    versionId: "Test string",
                                },
                                cloudSqlInstance: {
                                    displayName: "Test string",
                                    externalIp: "Test string",
                                    internalIp: "Test string",
                                    networkUri: "Test string",
                                    region: "Test string",
                                    uri: "Test string",
                                },
                                deliver: {
                                    resourceUri: "Test string",
                                    target: "Test string",
                                },
                                description: "Test string",
                                drop: {
                                    cause: "Test string",
                                    resourceUri: "Test string",
                                },
                                endpoint: {
                                    destinationIp: "Test string",
                                    destinationNetworkUri: "Test string",
                                    destinationPort: 42,
                                    protocol: "Test string",
                                    sourceIp: "Test string",
                                    sourceNetworkUri: "Test string",
                                    sourcePort: 42,
                                },
                                firewall: {
                                    action: "Test string",
                                    direction: "Test string",
                                    displayName: "Test string",
                                    firewallRuleType: "Test string",
                                    networkUri: "Test string",
                                    policy: "Test string",
                                    priority: 42,
                                    targetServiceAccounts: [
                                        "Test string"
                                    ],
                                    targetTags: [
                                        "Test string"
                                    ],
                                    uri: "Test string",
                                },
                                forward: {
                                    resourceUri: "Test string",
                                    target: "Test string",
                                },
                                forwardingRule: {
                                    displayName: "Test string",
                                    matchedPortRange: "Test string",
                                    matchedProtocol: "Test string",
                                    networkUri: "Test string",
                                    target: "Test string",
                                    uri: "Test string",
                                    vip: "Test string",
                                },
                                gkeMaster: {
                                    clusterNetworkUri: "Test string",
                                    clusterUri: "Test string",
                                    externalIp: "Test string",
                                    internalIp: "Test string",
                                },
                                instance: {
                                    displayName: "Test string",
                                    externalIp: "Test string",
                                    interface: "Test string",
                                    internalIp: "Test string",
                                    networkTags: [
                                        "Test string"
                                    ],
                                    networkUri: "Test string",
                                    serviceAccount: "Test string",
                                    uri: "Test string",
                                },
                                loadBalancer: {
                                    backends: [
                                        {
                                            displayName: "Test string",
                                            healthCheckAllowingFirewallRules: [
                                                "Test string"
                                            ],
                                            healthCheckBlockingFirewallRules: [
                                                "Test string"
                                            ],
                                            healthCheckFirewallState: "Test string",
                                            uri: "Test string",
                                        }
                                    ],
                                    backendType: "Test string",
                                    backendUri: "Test string",
                                    healthCheckUri: "Test string",
                                    loadBalancerType: "Test string",
                                },
                                network: {
                                    displayName: "Test string",
                                    matchedIpRange: "Test string",
                                    uri: "Test string",
                                },
                                projectId: "Test string",
                                route: {
                                    destIpRange: "Test string",
                                    displayName: "Test string",
                                    instanceTags: [
                                        "Test string"
                                    ],
                                    networkUri: "Test string",
                                    nextHop: "Test string",
                                    nextHopType: "Test string",
                                    priority: 42,
                                    routeType: "Test string",
                                    uri: "Test string",
                                },
                                state: "Test string",
                                vpcConnector: {
                                    displayName: "Test string",
                                    location: "Test string",
                                    uri: "Test string",
                                },
                                vpnGateway: {
                                    displayName: "Test string",
                                    ipAddress: "Test string",
                                    networkUri: "Test string",
                                    region: "Test string",
                                    uri: "Test string",
                                    vpnTunnelUri: "Test string",
                                },
                                vpnTunnel: {
                                    displayName: "Test string",
                                    networkUri: "Test string",
                                    region: "Test string",
                                    remoteGateway: "Test string",
                                    remoteGatewayIp: "Test string",
                                    routingType: "Test string",
                                    sourceGateway: "Test string",
                                    sourceGatewayIp: "Test string",
                                    uri: "Test string",
                                },
                            }
                        ],
                    }
                ],
                verifyTime: "Test string",
            },
            relatedProjects: [
                "Test string"
            ],
            source: {
                cloudFunction: {
                    uri: "Test string",
                },
                cloudSqlInstance: "Test string",
                gkeMasterCluster: "Test string",
                instance: "Test string",
                ipAddress: "Test string",
                network: "Test string",
                networkType: "Test string",
                port: 42,
                projectId: "Test string",
            },
            updateTime: "Test string",
        });
        /** Deletes a specific `ConnectivityTest`. */
        await gapi.client.networkmanagement.projects.locations.global.connectivityTests.delete({
            name: "Test string",
        });
        /** Gets the details of a specific Connectivity Test. */
        await gapi.client.networkmanagement.projects.locations.global.connectivityTests.get({
            name: "Test string",
        });
        /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
        await gapi.client.networkmanagement.projects.locations.global.connectivityTests.getIamPolicy({
            "options.requestedPolicyVersion": 42,
            resource: "Test string",
        });
        /** Lists all Connectivity Tests owned by a project. */
        await gapi.client.networkmanagement.projects.locations.global.connectivityTests.list({
            filter: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Updates the configuration of an existing `ConnectivityTest`. After you update a test, the reachability analysis is performed as part of the long running operation, which completes when
         * the analysis completes. The Reachability state in the test resource is updated with the new result. If the endpoint specifications in `ConnectivityTest` are invalid (for example, they
         * contain non-existent resources in the network, or the user does not have read permissions to the network configurations of listed projects), then the reachability result returns a value
         * of UNKNOWN. If the endpoint specifications in `ConnectivityTest` are incomplete, the reachability result returns a value of `AMBIGUOUS`. See the documentation in `ConnectivityTest` for
         * for more details.
         */
        await gapi.client.networkmanagement.projects.locations.global.connectivityTests.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            destination: {
                cloudFunction: {
                    uri: "Test string",
                },
                cloudSqlInstance: "Test string",
                gkeMasterCluster: "Test string",
                instance: "Test string",
                ipAddress: "Test string",
                network: "Test string",
                networkType: "Test string",
                port: 42,
                projectId: "Test string",
            },
            displayName: "Test string",
            labels: {
                A: "Test string"
            },
            name: "Test string",
            protocol: "Test string",
            reachabilityDetails: {
                error: {
                    code: 42,
                    details: [
                        {
                            A: 42
                        }
                    ],
                    message: "Test string",
                },
                result: "Test string",
                traces: [
                    {
                        endpointInfo: {
                            destinationIp: "Test string",
                            destinationNetworkUri: "Test string",
                            destinationPort: 42,
                            protocol: "Test string",
                            sourceIp: "Test string",
                            sourceNetworkUri: "Test string",
                            sourcePort: 42,
                        },
                        steps: [
                            {
                                abort: {
                                    cause: "Test string",
                                    projectsMissingPermission: [
                                        "Test string"
                                    ],
                                    resourceUri: "Test string",
                                },
                                causesDrop: true,
                                cloudFunction: {
                                    displayName: "Test string",
                                    location: "Test string",
                                    uri: "Test string",
                                    versionId: "Test string",
                                },
                                cloudSqlInstance: {
                                    displayName: "Test string",
                                    externalIp: "Test string",
                                    internalIp: "Test string",
                                    networkUri: "Test string",
                                    region: "Test string",
                                    uri: "Test string",
                                },
                                deliver: {
                                    resourceUri: "Test string",
                                    target: "Test string",
                                },
                                description: "Test string",
                                drop: {
                                    cause: "Test string",
                                    resourceUri: "Test string",
                                },
                                endpoint: {
                                    destinationIp: "Test string",
                                    destinationNetworkUri: "Test string",
                                    destinationPort: 42,
                                    protocol: "Test string",
                                    sourceIp: "Test string",
                                    sourceNetworkUri: "Test string",
                                    sourcePort: 42,
                                },
                                firewall: {
                                    action: "Test string",
                                    direction: "Test string",
                                    displayName: "Test string",
                                    firewallRuleType: "Test string",
                                    networkUri: "Test string",
                                    policy: "Test string",
                                    priority: 42,
                                    targetServiceAccounts: [
                                        "Test string"
                                    ],
                                    targetTags: [
                                        "Test string"
                                    ],
                                    uri: "Test string",
                                },
                                forward: {
                                    resourceUri: "Test string",
                                    target: "Test string",
                                },
                                forwardingRule: {
                                    displayName: "Test string",
                                    matchedPortRange: "Test string",
                                    matchedProtocol: "Test string",
                                    networkUri: "Test string",
                                    target: "Test string",
                                    uri: "Test string",
                                    vip: "Test string",
                                },
                                gkeMaster: {
                                    clusterNetworkUri: "Test string",
                                    clusterUri: "Test string",
                                    externalIp: "Test string",
                                    internalIp: "Test string",
                                },
                                instance: {
                                    displayName: "Test string",
                                    externalIp: "Test string",
                                    interface: "Test string",
                                    internalIp: "Test string",
                                    networkTags: [
                                        "Test string"
                                    ],
                                    networkUri: "Test string",
                                    serviceAccount: "Test string",
                                    uri: "Test string",
                                },
                                loadBalancer: {
                                    backends: [
                                        {
                                            displayName: "Test string",
                                            healthCheckAllowingFirewallRules: [
                                                "Test string"
                                            ],
                                            healthCheckBlockingFirewallRules: [
                                                "Test string"
                                            ],
                                            healthCheckFirewallState: "Test string",
                                            uri: "Test string",
                                        }
                                    ],
                                    backendType: "Test string",
                                    backendUri: "Test string",
                                    healthCheckUri: "Test string",
                                    loadBalancerType: "Test string",
                                },
                                network: {
                                    displayName: "Test string",
                                    matchedIpRange: "Test string",
                                    uri: "Test string",
                                },
                                projectId: "Test string",
                                route: {
                                    destIpRange: "Test string",
                                    displayName: "Test string",
                                    instanceTags: [
                                        "Test string"
                                    ],
                                    networkUri: "Test string",
                                    nextHop: "Test string",
                                    nextHopType: "Test string",
                                    priority: 42,
                                    routeType: "Test string",
                                    uri: "Test string",
                                },
                                state: "Test string",
                                vpcConnector: {
                                    displayName: "Test string",
                                    location: "Test string",
                                    uri: "Test string",
                                },
                                vpnGateway: {
                                    displayName: "Test string",
                                    ipAddress: "Test string",
                                    networkUri: "Test string",
                                    region: "Test string",
                                    uri: "Test string",
                                    vpnTunnelUri: "Test string",
                                },
                                vpnTunnel: {
                                    displayName: "Test string",
                                    networkUri: "Test string",
                                    region: "Test string",
                                    remoteGateway: "Test string",
                                    remoteGatewayIp: "Test string",
                                    routingType: "Test string",
                                    sourceGateway: "Test string",
                                    sourceGatewayIp: "Test string",
                                    uri: "Test string",
                                },
                            }
                        ],
                    }
                ],
                verifyTime: "Test string",
            },
            relatedProjects: [
                "Test string"
            ],
            source: {
                cloudFunction: {
                    uri: "Test string",
                },
                cloudSqlInstance: "Test string",
                gkeMasterCluster: "Test string",
                instance: "Test string",
                ipAddress: "Test string",
                network: "Test string",
                networkType: "Test string",
                port: 42,
                projectId: "Test string",
            },
            updateTime: "Test string",
        });
        /**
         * Rerun an existing `ConnectivityTest`. After the user triggers the rerun, the reachability analysis is performed as part of the long running operation, which completes when the analysis
         * completes. Even though the test configuration remains the same, the reachability result may change due to underlying network configuration changes. If the endpoint specifications in
         * `ConnectivityTest` become invalid (for example, specified resources are deleted in the network, or you lost read permissions to the network configurations of listed projects), then the
         * reachability result returns a value of `UNKNOWN`.
         */
        await gapi.client.networkmanagement.projects.locations.global.connectivityTests.rerun({
            name: "Test string",
        }, {
        });
        /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
        await gapi.client.networkmanagement.projects.locations.global.connectivityTests.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                auditConfigs: [
                    {
                        auditLogConfigs: [
                            {
                                exemptedMembers: [
                                    "Test string"
                                ],
                                logType: "Test string",
                            }
                        ],
                        service: "Test string",
                    }
                ],
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"
                        ],
                        role: "Test string",
                    }
                ],
                etag: "Test string",
                version: 42,
            },
            updateMask: "Test string",
        });
        /**
         * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This
         * operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
         */
        await gapi.client.networkmanagement.projects.locations.global.connectivityTests.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"
            ],
        });
        /**
         * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this
         * method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation
         * completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of
         * 1, corresponding to `Code.CANCELLED`.
         */
        await gapi.client.networkmanagement.projects.locations.global.operations.cancel({
            name: "Test string",
        }, {
        });
        /**
         * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support
         * this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
         */
        await gapi.client.networkmanagement.projects.locations.global.operations.delete({
            name: "Test string",
        });
        /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
        await gapi.client.networkmanagement.projects.locations.global.operations.get({
            name: "Test string",
        });
        /**
         * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to
         * override the binding to use different resource name schemes, such as `users/*‍/operations`. To override the binding, API services can add a binding such as
         * `"/v1/{name=users/*}/operations"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must
         * ensure the name binding is the parent resource, without the operations collection id.
         */
        await gapi.client.networkmanagement.projects.locations.global.operations.list({
            filter: "Test string",
            name: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
    }
});
