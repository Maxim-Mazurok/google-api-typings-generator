/* Type definitions for non-npm package Display & Video 360 API v1 0.0 */
// Project: https://developers.google.com/display-video/
// Definitions by: Maxim Mazurok <https://github.com/Maxim-Mazurok>
//                 Nick Amoscato <https://github.com/namoscato>
//                 Declan Vong <https://github.com/declanvong>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped

// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
// Generated from: https://displayvideo.googleapis.com/$discovery/rest?version=v1
// Revision: 20230601

/// <reference types="gapi.client" />

declare namespace gapi.client {
    /** Load Display & Video 360 API v1 */
    function load(urlOrObject: "https://displayvideo.googleapis.com/$discovery/rest?version=v1"): Promise<void>;
    /** @deprecated Please load APIs with discovery documents. */
    function load(name: "displayvideo", version: "v1"): Promise<void>;
    /** @deprecated Please load APIs with discovery documents. */
    function load(name: "displayvideo", version: "v1", callback: () => any): void;

    namespace displayvideo {
        // tslint:disable-next-line:no-empty-interface
        interface ActivateManualTriggerRequest {
        }
        interface ActiveViewVideoViewabilityMetricConfig {
            /** Required. The display name of the custom metric. */
            displayName?:
                string;
            /**
             * The minimum visible video duration required (in seconds) in order for an impression to be recorded. You must specify minimum_duration, minimum_quartile or both. If both are
             * specified, an impression meets the metric criteria if either requirement is met (whichever happens first).
             */
            minimumDuration?:
                string;
            /**
             * The minimum visible video duration required, based on the video quartiles, in order for an impression to be recorded. You must specify minimum_duration, minimum_quartile or both. If
             * both are specified, an impression meets the metric criteria if either requirement is met (whichever happens first).
             */
            minimumQuartile?:
                string;
            /** Required. The minimum percentage of the video ad's pixels visible on the screen in order for an impression to be recorded. */
            minimumViewability?:
                string;
            /** Required. The minimum percentage of the video ad's volume required in order for an impression to be recorded. */
            minimumVolume?:
                string;
        }
        interface Adloox {
            /** Adloox's brand safety settings. */
            excludedAdlooxCategories?:
                string[];
        }
        interface Advertiser {
            /** Required. Immutable. Ad server related settings of the advertiser. */
            adServerConfig?:
                AdvertiserAdServerConfig;
            /** Output only. The unique ID of the advertiser. Assigned by the system. */
            advertiserId?:
                string;
            /** Required. Creative related settings of the advertiser. */
            creativeConfig?:
                AdvertiserCreativeConfig;
            /** Settings that control how advertiser data may be accessed. */
            dataAccessConfig?:
                AdvertiserDataAccessConfig;
            /** Required. The display name of the advertiser. Must be UTF-8 encoded with a maximum size of 240 bytes. */
            displayName?:
                string;
            /**
             * Required. Controls whether or not insertion orders and line items of the advertiser can spend their budgets and bid on inventory. * Accepted values are `ENTITY_STATUS_ACTIVE`,
             * `ENTITY_STATUS_PAUSED` and `ENTITY_STATUS_SCHEDULED_FOR_DELETION`. * If set to `ENTITY_STATUS_SCHEDULED_FOR_DELETION`, the advertiser will be deleted 30 days from when it was first
             * scheduled for deletion.
             */
            entityStatus?:
                string;
            /** Required. General settings of the advertiser. */
            generalConfig?:
                AdvertiserGeneralConfig;
            /**
             * Integration details of the advertiser. Only integrationCode is currently applicable to advertiser. Other fields of IntegrationDetails are not supported and will be ignored if
             * provided.
             */
            integrationDetails?:
                IntegrationDetails;
            /** Output only. The resource name of the advertiser. */
            name?:
                string;
            /** Required. Immutable. The unique ID of the partner that the advertiser belongs to. */
            partnerId?:
                string;
            /**
             * Whether integration with Mediaocean (Prisma) is enabled. By enabling this, you agree to the following: On behalf of my company, I authorize Mediaocean (Prisma) to send budget
             * segment plans to Google, and I authorize Google to send corresponding reporting and invoices from DV360 to Mediaocean for the purposes of budget planning, billing, and
             * reconciliation for this advertiser.
             */
            prismaEnabled?:
                boolean;
            /** Targeting settings related to ad serving of the advertiser. */
            servingConfig?:
                AdvertiserTargetingConfig;
            /** Output only. The timestamp when the advertiser was last updated. Assigned by the system. */
            updateTime?:
                string;
        }
        interface AdvertiserAdServerConfig {
            /** The configuration for advertisers that use both Campaign Manager 360 (CM360) and third-party ad servers. */
            cmHybridConfig?:
                CmHybridConfig;
            /** The configuration for advertisers that use third-party ad servers only. */
            thirdPartyOnlyConfig?:
                ThirdPartyOnlyConfig;
        }
        interface AdvertiserCreativeConfig {
            /** Whether or not the advertiser is enabled for dynamic creatives. */
            dynamicCreativeEnabled?:
                boolean;
            /** An ID for configuring campaign monitoring provided by Integral Ad Service (IAS). The DV360 system will append an IAS "Campaign Monitor" tag containing this ID to the creative tag. */
            iasClientId?:
                string;
            /**
             * Whether or not to use DV360's Online Behavioral Advertising (OBA) compliance. Warning: Changing OBA settings may cause the audit status of your creatives to be reset by some ad
             * exchanges, making them ineligible to serve until they are re-approved.
             */
            obaComplianceDisabled?:
                boolean;
            /**
             * By setting this field to `true`, you, on behalf of your company, authorize Google to use video creatives associated with this Display & Video 360 advertiser to provide reporting and
             * features related to the advertiser's television campaigns. Applicable only when the advertiser has a CM360 hybrid ad server configuration.
             */
            videoCreativeDataSharingAuthorized?:
                boolean;
        }
        interface AdvertiserDataAccessConfig {
            /** Structured Data Files (SDF) settings for the advertiser. If not specified, the SDF settings of the parent partner are used. */
            sdfConfig?:
                AdvertiserSdfConfig;
        }
        interface AdvertiserGeneralConfig {
            /**
             * Required. Immutable. Advertiser's currency in ISO 4217 format. Accepted codes and the currencies they represent are: Currency Code : Currency Name * `ARS` : Argentine Peso * `AUD` :
             * Australian Dollar * `BRL` : Brazilian Real * `CAD` : Canadian Dollar * `CHF` : Swiss Franc * `CLP` : Chilean Peso * `CNY` : Chinese Yuan * `COP` : Colombian Peso * `CZK` : Czech
             * Koruna * `DKK` : Danish Krone * `EGP` : Egyption Pound * `EUR` : Euro * `GBP` : British Pound * `HKD` : Hong Kong Dollar * `HUF` : Hungarian Forint * `IDR` : Indonesian Rupiah *
             * `ILS` : Israeli Shekel * `INR` : Indian Rupee * `JPY` : Japanese Yen * `KRW` : South Korean Won * `MXN` : Mexican Pesos * `MYR` : Malaysian Ringgit * `NGN` : Nigerian Naira * `NOK`
             * : Norwegian Krone * `NZD` : New Zealand Dollar * `PEN` : Peruvian Nuevo Sol * `PLN` : Polish Zloty * `RON` : New Romanian Leu * `RUB` : Russian Ruble * `SEK` : Swedish Krona * `TRY`
             * : Turkish Lira * `TWD` : New Taiwan Dollar * `USD` : US Dollar * `ZAR` : South African Rand
             */
            currencyCode?:
                string;
            /**
             * Required. The domain URL of the advertiser's primary website. The system will send this information to publishers that require website URL to associate a campaign with an
             * advertiser. Provide a URL with no path or query string, beginning with `http:` or `https:`. For example, http://www.example.com
             */
            domainUrl?:
                string;
            /**
             * Output only. The standard TZ database name of the advertiser's time zone. For example, `America/New_York`. See more at: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
             * For CM360 hybrid advertisers, the time zone is the same as that of the associated CM360 account; for third-party only advertisers, the time zone is the same as that of the parent
             * partner.
             */
            timeZone?:
                string;
        }
        interface AdvertiserSdfConfig {
            /**
             * Whether or not this advertiser overrides the SDF configuration of its parent partner. By default, an advertiser inherits the SDF configuration from the parent partner. To override
             * the partner configuration, set this field to `true` and provide the new configuration in sdfConfig.
             */
            overridePartnerSdfConfig?:
                boolean;
            /** The SDF configuration for the advertiser. * Required when overridePartnerSdfConfig is `true`. * Output only when overridePartnerSdfConfig is `false`. */
            sdfConfig?:
                SdfConfig;
        }
        interface AdvertiserTargetingConfig {
            /** Whether or not connected TV devices are exempt from viewability targeting for all video line items under the advertiser. */
            exemptTvFromViewabilityTargeting?:
                boolean;
        }
        interface AgeRangeAssignedTargetingOptionDetails {
            /**
             * The age range of an audience. We only support targeting a continuous age range of an audience. Thus, the age range represented in this field can be 1) targeted solely, or, 2) part
             * of a larger continuous age range. The reach of a continuous age range targeting can be expanded by also targeting an audience of an unknown age. Output only in v1. Required in v2.
             */
            ageRange?:
                string;
            /** Required. The targeting_option_id of a TargetingOption of type `TARGETING_TYPE_AGE_RANGE`. */
            targetingOptionId?:
                string;
        }
        interface AgeRangeTargetingOptionDetails {
            /** Output only. The age range of an audience. */
            ageRange?:
                string;
        }
        interface AppAssignedTargetingOptionDetails {
            /** Required. The ID of the app. Android's Play store app uses bundle ID, for example `com.google.android.gm`. Apple's App store app ID uses 9 digit string, for example `422689480`. */
            appId?:
                string;
            /**
             * Indicates the platform of the targeted app. If this field is not specified, the app platform will be assumed to be mobile (i.e., Android or iOS), and we will derive the appropriate
             * mobile platform from the app ID.
             */
            appPlatform?:
                string;
            /** Output only. The display name of the app. */
            displayName?:
                string;
            /** Indicates if this option is being negatively targeted. */
            negative?:
                boolean;
        }
        interface AppCategoryAssignedTargetingOptionDetails {
            /** Output only. The display name of the app category. */
            displayName?:
                string;
            /** Indicates if this option is being negatively targeted. */
            negative?:
                boolean;
            /** Required. The targeting_option_id field when targeting_type is `TARGETING_TYPE_APP_CATEGORY`. */
            targetingOptionId?:
                string;
        }
        interface AppCategoryTargetingOptionDetails {
            /** Output only. The name of the app collection. */
            displayName?:
                string;
        }
        interface Asset {
            /** The asset content. For uploaded assets, the content is the serving path. */
            content?:
                string;
            /**
             * Media ID of the uploaded asset. This is a unique identifier for the asset. This ID can be passed to other API calls, e.g. CreateCreative to associate the asset with a creative. The
             * Media ID space updated on **April 5, 2023**. Update media IDs cached before **April 5, 2023** by retrieving the new media ID from associated creative resources or re-uploading the
             * asset.
             */
            mediaId?:
                string;
        }
        interface AssetAssociation {
            /** The associated asset. */
            asset?:
                Asset;
            /** The role of this asset for the creative. */
            role?:
                string;
        }
        interface AssignedInventorySource {
            /** Output only. The unique ID of the assigned inventory source. The ID is only unique within a given inventory source group. It may be reused in other contexts. */
            assignedInventorySourceId?:
                string;
            /** Required. The ID of the inventory source entity being targeted. */
            inventorySourceId?:
                string;
            /** Output only. The resource name of the assigned inventory source. */
            name?:
                string;
        }
        interface AssignedLocation {
            /** Output only. The unique ID of the assigned location. The ID is only unique within a location list. It may be reused in other contexts. */
            assignedLocationId?:
                string;
            /** Output only. The resource name of the assigned location. */
            name?:
                string;
            /** Required. The ID of the targeting option assigned to the location list. Must be of type TARGETING_TYPE_GEO_REGION. */
            targetingOptionId?:
                string;
        }
        interface AssignedTargetingOption {
            /** Age range details. This field will be populated when the targeting_type is `TARGETING_TYPE_AGE_RANGE`. */
            ageRangeDetails?:
                AgeRangeAssignedTargetingOptionDetails;
            /** App category details. This field will be populated when the targeting_type is `TARGETING_TYPE_APP_CATEGORY`. */
            appCategoryDetails?:
                AppCategoryAssignedTargetingOptionDetails;
            /** App details. This field will be populated when the targeting_type is `TARGETING_TYPE_APP`. */
            appDetails?:
                AppAssignedTargetingOptionDetails;
            /** Output only. The unique ID of the assigned targeting option. The ID is only unique within a given resource and targeting type. It may be reused in other contexts. */
            assignedTargetingOptionId?:
                string;
            /** Audience targeting details. This field will be populated when the targeting_type is `TARGETING_TYPE_AUDIENCE_GROUP`. You can only target one audience group option per resource. */
            audienceGroupDetails?:
                AudienceGroupAssignedTargetingOptionDetails;
            /** Audio content type details. This field will be populated when the targeting_type is `TARGETING_TYPE_AUDIO_CONTENT_TYPE`. */
            audioContentTypeDetails?:
                AudioContentTypeAssignedTargetingOptionDetails;
            /**
             * Authorized seller status details. This field will be populated when the targeting_type is `TARGETING_TYPE_AUTHORIZED_SELLER_STATUS`. You can only target one authorized seller status
             * option per resource. If a resource doesn't have an authorized seller status option, all authorized sellers indicated as DIRECT or RESELLER in the ads.txt file are targeted by
             * default.
             */
            authorizedSellerStatusDetails?:
                AuthorizedSellerStatusAssignedTargetingOptionDetails;
            /** Browser details. This field will be populated when the targeting_type is `TARGETING_TYPE_BROWSER`. */
            browserDetails?:
                BrowserAssignedTargetingOptionDetails;
            /** Business chain details. This field will be populated when the targeting_type is `TARGETING_TYPE_BUSINESS_CHAIN`. */
            businessChainDetails?:
                BusinessChainAssignedTargetingOptionDetails;
            /** Carrier and ISP details. This field will be populated when the targeting_type is `TARGETING_TYPE_CARRIER_AND_ISP`. */
            carrierAndIspDetails?:
                CarrierAndIspAssignedTargetingOptionDetails;
            /**
             * Category details. This field will be populated when the targeting_type is `TARGETING_TYPE_CATEGORY`. Targeting a category will also target its subcategories. If a category is
             * excluded from targeting and a subcategory is included, the exclusion will take precedence.
             */
            categoryDetails?:
                CategoryAssignedTargetingOptionDetails;
            /** Channel details. This field will be populated when the targeting_type is `TARGETING_TYPE_CHANNEL`. */
            channelDetails?:
                ChannelAssignedTargetingOptionDetails;
            /** Content duration details. This field will be populated when the targeting_type is `TARGETING_TYPE_CONTENT_DURATION`. */
            contentDurationDetails?:
                ContentDurationAssignedTargetingOptionDetails;
            /** Content genre details. This field will be populated when the targeting_type is `TARGETING_TYPE_CONTENT_GENRE`. */
            contentGenreDetails?:
                ContentGenreAssignedTargetingOptionDetails;
            /** Content instream position details. This field will be populated when the targeting_type is `TARGETING_TYPE_CONTENT_INSTREAM_POSITION`. */
            contentInstreamPositionDetails?:
                ContentInstreamPositionAssignedTargetingOptionDetails;
            /** Content outstream position details. This field will be populated when the targeting_type is `TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION`. */
            contentOutstreamPositionDetails?:
                ContentOutstreamPositionAssignedTargetingOptionDetails;
            /** Content duration details. This field will be populated when the TargetingType is `TARGETING_TYPE_CONTENT_STREAM_TYPE`. */
            contentStreamTypeDetails?:
                ContentStreamTypeAssignedTargetingOptionDetails;
            /** Day and time details. This field will be populated when the targeting_type is `TARGETING_TYPE_DAY_AND_TIME`. */
            dayAndTimeDetails?:
                DayAndTimeAssignedTargetingOptionDetails;
            /** Device make and model details. This field will be populated when the targeting_type is `TARGETING_TYPE_DEVICE_MAKE_MODEL`. */
            deviceMakeModelDetails?:
                DeviceMakeModelAssignedTargetingOptionDetails;
            /** Device Type details. This field will be populated when the targeting_type is `TARGETING_TYPE_DEVICE_TYPE`. */
            deviceTypeDetails?:
                DeviceTypeAssignedTargetingOptionDetails;
            /**
             * Digital content label details. This field will be populated when the targeting_type is `TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION`. Digital content labels are targeting
             * exclusions. Advertiser level digital content label exclusions, if set, are always applied in serving (even though they aren't visible in resource settings). Resource settings can
             * exclude content labels in addition to advertiser exclusions, but can't override them. A line item won't serve if all the digital content labels are excluded.
             */
            digitalContentLabelExclusionDetails?:
                DigitalContentLabelAssignedTargetingOptionDetails;
            /** Environment details. This field will be populated when the targeting_type is `TARGETING_TYPE_ENVIRONMENT`. */
            environmentDetails?:
                EnvironmentAssignedTargetingOptionDetails;
            /** Exchange details. This field will be populated when the targeting_type is `TARGETING_TYPE_EXCHANGE`. */
            exchangeDetails?:
                ExchangeAssignedTargetingOptionDetails;
            /** Gender details. This field will be populated when the targeting_type is `TARGETING_TYPE_GENDER`. */
            genderDetails?:
                GenderAssignedTargetingOptionDetails;
            /** Geographic region details. This field will be populated when the targeting_type is `TARGETING_TYPE_GEO_REGION`. */
            geoRegionDetails?:
                GeoRegionAssignedTargetingOptionDetails;
            /** Household income details. This field will be populated when the targeting_type is `TARGETING_TYPE_HOUSEHOLD_INCOME`. */
            householdIncomeDetails?:
                HouseholdIncomeAssignedTargetingOptionDetails;
            /** Output only. The inheritance status of the assigned targeting option. */
            inheritance?:
                string;
            /** Inventory source details. This field will be populated when the targeting_type is `TARGETING_TYPE_INVENTORY_SOURCE`. */
            inventorySourceDetails?:
                InventorySourceAssignedTargetingOptionDetails;
            /** Inventory source group details. This field will be populated when the targeting_type is `TARGETING_TYPE_INVENTORY_SOURCE_GROUP`. */
            inventorySourceGroupDetails?:
                InventorySourceGroupAssignedTargetingOptionDetails;
            /**
             * Keyword details. This field will be populated when the targeting_type is `TARGETING_TYPE_KEYWORD`. A maximum of 5000 direct negative keywords can be assigned to a resource. No limit
             * on number of positive keywords that can be assigned.
             */
            keywordDetails?:
                KeywordAssignedTargetingOptionDetails;
            /** Language details. This field will be populated when the targeting_type is `TARGETING_TYPE_LANGUAGE`. */
            languageDetails?:
                LanguageAssignedTargetingOptionDetails;
            /** Output only. The resource name for this assigned targeting option. */
            name?:
                string;
            /** Native content position details. This field will be populated when the targeting_type is `TARGETING_TYPE_NATIVE_CONTENT_POSITION`. */
            nativeContentPositionDetails?:
                NativeContentPositionAssignedTargetingOptionDetails;
            /** Keyword details. This field will be populated when the targeting_type is `TARGETING_TYPE_NEGATIVE_KEYWORD_LIST`. A maximum of 4 negative keyword lists can be assigned to a resource. */
            negativeKeywordListDetails?:
                NegativeKeywordListAssignedTargetingOptionDetails;
            /** Open Measurement enabled inventory details. This field will be populated when the targeting_type is `TARGETING_TYPE_OMID`. */
            omidDetails?:
                OmidAssignedTargetingOptionDetails;
            /** On screen position details. This field will be populated when the targeting_type is `TARGETING_TYPE_ON_SCREEN_POSITION`. */
            onScreenPositionDetails?:
                OnScreenPositionAssignedTargetingOptionDetails;
            /** Operating system details. This field will be populated when the targeting_type is `TARGETING_TYPE_OPERATING_SYSTEM`. */
            operatingSystemDetails?:
                OperatingSystemAssignedTargetingOptionDetails;
            /** Parental status details. This field will be populated when the targeting_type is `TARGETING_TYPE_PARENTAL_STATUS`. */
            parentalStatusDetails?:
                ParentalStatusAssignedTargetingOptionDetails;
            /** POI details. This field will be populated when the targeting_type is `TARGETING_TYPE_POI`. */
            poiDetails?:
                PoiAssignedTargetingOptionDetails;
            /** Proximity location list details. This field will be populated when the targeting_type is `TARGETING_TYPE_PROXIMITY_LOCATION_LIST`. */
            proximityLocationListDetails?:
                ProximityLocationListAssignedTargetingOptionDetails;
            /** Regional location list details. This field will be populated when the targeting_type is `TARGETING_TYPE_REGIONAL_LOCATION_LIST`. */
            regionalLocationListDetails?:
                RegionalLocationListAssignedTargetingOptionDetails;
            /**
             * Sensitive category details. This field will be populated when the targeting_type is `TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION`. Sensitive categories are targeting exclusions.
             * Advertiser level sensitive category exclusions, if set, are always applied in serving (even though they aren't visible in resource settings). Resource settings can exclude sensitive
             * categories in addition to advertiser exclusions, but can't override them.
             */
            sensitiveCategoryExclusionDetails?:
                SensitiveCategoryAssignedTargetingOptionDetails;
            /** Sub-exchange details. This field will be populated when the targeting_type is `TARGETING_TYPE_SUB_EXCHANGE`. */
            subExchangeDetails?:
                SubExchangeAssignedTargetingOptionDetails;
            /** Output only. Identifies the type of this assigned targeting option. */
            targetingType?:
                string;
            /** Third party verification details. This field will be populated when the targeting_type is `TARGETING_TYPE_THIRD_PARTY_VERIFIER`. */
            thirdPartyVerifierDetails?:
                ThirdPartyVerifierAssignedTargetingOptionDetails;
            /** URL details. This field will be populated when the targeting_type is `TARGETING_TYPE_URL`. */
            urlDetails?:
                UrlAssignedTargetingOptionDetails;
            /** User rewarded content details. This field will be populated when the targeting_type is `TARGETING_TYPE_USER_REWARDED_CONTENT`. */
            userRewardedContentDetails?:
                UserRewardedContentAssignedTargetingOptionDetails;
            /** Video player size details. This field will be populated when the targeting_type is `TARGETING_TYPE_VIDEO_PLAYER_SIZE`. */
            videoPlayerSizeDetails?:
                VideoPlayerSizeAssignedTargetingOptionDetails;
            /** Viewability details. This field will be populated when the targeting_type is `TARGETING_TYPE_VIEWABILITY`. You can only target one viewability option per resource. */
            viewabilityDetails?:
                ViewabilityAssignedTargetingOptionDetails;
        }
        interface AssignedUserRole {
            /** The ID of the advertiser that the assigend user role applies to. */
            advertiserId?:
                string;
            /** Output only. The ID of the assigned user role. */
            assignedUserRoleId?:
                string;
            /** The ID of the partner that the assigned user role applies to. */
            partnerId?:
                string;
            /** Required. The user role to assign to a user for the entity. */
            userRole?:
                string;
        }
        interface AudienceGroupAssignedTargetingOptionDetails {
            /**
             * The first and third party audience ids and recencies of the excluded first and third party audience group. Used for negative targeting. The COMPLEMENT of the UNION of this group and
             * other excluded audience groups is used as an INTERSECTION to any positive audience targeting. All items are logically ‘OR’ of each other. **Warning:** `ACTIVITY_BASED` and
             * `FREQUENCY_CAP` audience types will be deprecated on **May 20, 2023**. After this date, these audiences will not be able to be added to resource targeting. Read our [feature
             * deprecation announcement](/display-video/api/deprecations#features.first_and_third_party_audience_types) for more information.
             */
            excludedFirstAndThirdPartyAudienceGroup?:
                FirstAndThirdPartyAudienceGroup;
            /**
             * The Google audience ids of the excluded Google audience group. Used for negative targeting. The COMPLEMENT of the UNION of this group and other excluded audience groups is used as
             * an INTERSECTION to any positive audience targeting. Only contains Affinity, In-market and Installed-apps type Google audiences. All items are logically ‘OR’ of each other.
             * **Warning:** `GOOGLE_AUDIENCE_TYPE_INSTALLED_APPS` and `GOOGLE_AUDIENCE_TYPE_NEW_MOBILE_DEVICES` audience types will be deprecated on **May 20, 2023**. After this date, these
             * audiences will not be able to be added to resource targeting. Read our [feature deprecation announcement](/display-video/api/deprecations#features.google_audience_types) for more
             * information.
             */
            excludedGoogleAudienceGroup?:
                GoogleAudienceGroup;
            /** The combined audience ids of the included combined audience group. Contains combined audience ids only. */
            includedCombinedAudienceGroup?:
                CombinedAudienceGroup;
            /** The custom list ids of the included custom list group. Contains custom list ids only. */
            includedCustomListGroup?:
                CustomListGroup;
            /**
             * The first and third party audience ids and recencies of included first and third party audience groups. Each first and third party audience group contains first and third party
             * audience ids only. The relation between each first and third party audience group is INTERSECTION, and the result is UNION'ed with other audience groups. Repeated groups with same
             * settings will be ignored. **Warning:** `ACTIVITY_BASED` and `FREQUENCY_CAP` audience types will be deprecated on **May 20, 2023**. After this date, these audiences will not be able
             * to be added to resource targeting. Read our [feature deprecation announcement](/display-video/api/deprecations#features.first_and_third_party_audience_types) for more information.
             */
            includedFirstAndThirdPartyAudienceGroups?:
                FirstAndThirdPartyAudienceGroup[];
            /**
             * The Google audience ids of the included Google audience group. Contains Google audience ids only. **Warning:** `GOOGLE_AUDIENCE_TYPE_INSTALLED_APPS` and
             * `GOOGLE_AUDIENCE_TYPE_NEW_MOBILE_DEVICES` audience types will be deprecated on **May 20, 2023**. After this date, these audiences will not be able to be added to resource targeting.
             * Read our [feature deprecation announcement](/display-video/api/deprecations#features.google_audience_types) for more information.
             */
            includedGoogleAudienceGroup?:
                GoogleAudienceGroup;
        }
        interface AudioContentTypeAssignedTargetingOptionDetails {
            /** The audio content type. Output only in v1. Required in v2. */
            audioContentType?:
                string;
            /** Required. The targeting_option_id field when targeting_type is `TARGETING_TYPE_AUDIO_CONTENT_TYPE`. */
            targetingOptionId?:
                string;
        }
        interface AudioContentTypeTargetingOptionDetails {
            /** Output only. The audio content type. */
            audioContentType?:
                string;
        }
        interface AudioVideoOffset {
            /** The offset in percentage of the audio or video duration. */
            percentage?:
                string;
            /** The offset in seconds from the start of the audio or video. */
            seconds?:
                string;
        }
        interface AuditAdvertiserResponse {
            /**
             * The number of individual targeting options from the following targeting types that are assigned to a line item under this advertiser. These individual targeting options count
             * towards the limit of 4500000 ad group targeting options per advertiser. Qualifying Targeting types: * Channels, URLs, apps, and collections * Demographic * Google Audiences,
             * including Affinity, Custom Affinity, and In-market audiences * Inventory source * Keyword * Mobile app category * User lists * Video targeting * Viewability
             */
            adGroupCriteriaCount?:
                string;
            /**
             * The number of individual targeting options from the following targeting types that are assigned to a line item under this advertiser. These individual targeting options count
             * towards the limit of 900000 campaign targeting options per advertiser. Qualifying Targeting types: * Position * Browser * Connection speed * Day and time * Device and operating
             * system * Digital content label * Sensitive categories * Environment * Geography, including business chains and proximity * ISP * Language * Third-party verification
             */
            campaignCriteriaCount?:
                string;
            /** The number of channels created under this advertiser. These channels count towards the limit of 1000 channels per advertiser. */
            channelsCount?:
                string;
            /** The number of negative keyword lists created under this advertiser. These negative keyword lists count towards the limit of 20 negative keyword lists per advertiser. */
            negativeKeywordListsCount?:
                string;
            /**
             * The number of negatively targeted channels created under this advertiser. These negatively targeted channels count towards the limit of 5 negatively targeted channels per
             * advertiser.
             */
            negativelyTargetedChannelsCount?:
                string;
            /** The number of ACTIVE and PAUSED campaigns under this advertiser. These campaigns count towards the limit of 9999 campaigns per advertiser. */
            usedCampaignsCount?:
                string;
            /** The number of ACTIVE, PAUSED and DRAFT insertion orders under this advertiser. These insertion orders count towards the limit of 9999 insertion orders per advertiser. */
            usedInsertionOrdersCount?:
                string;
            /** The number of ACTIVE, PAUSED, and DRAFT line items under this advertiser. These line items count towards the limit of 9999 line items per advertiser. */
            usedLineItemsCount?:
                string;
        }
        interface AuthorizedSellerStatusAssignedTargetingOptionDetails {
            /** Output only. The authorized seller status to target. */
            authorizedSellerStatus?:
                string;
            /** Required. The targeting_option_id of a TargetingOption of type `TARGETING_TYPE_AUTHORIZED_SELLER_STATUS`. */
            targetingOptionId?:
                string;
        }
        interface AuthorizedSellerStatusTargetingOptionDetails {
            /** Output only. The authorized seller status. */
            authorizedSellerStatus?:
                string;
        }
        interface BiddingStrategy {
            /** A strategy that uses a fixed bid price. */
            fixedBid?:
                FixedBidStrategy;
            /**
             * A strategy that automatically adjusts the bid to optimize to your performance goal while spending the full budget. At insertion order level, the markup_type of line items cannot be
             * set to `PARTNER_REVENUE_MODEL_MARKUP_TYPE_CPM`. In addition, when performance_goal_type is one of: * `BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_CPA` *
             * `BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_CPC` * `BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_AV_VIEWED` , the line_item_type of the insertion order line items must be either: *
             * `LINE_ITEM_TYPE_DISPLAY_DEFAULT` * `LINE_ITEM_TYPE_VIDEO_DEFAULT` , and when performance_goal_type is either: * `BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_CIVA` *
             * `BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_IVO_TEN` the line_item_type of the insertion order line items must be `LINE_ITEM_TYPE_VIDEO_DEFAULT`.
             */
            maximizeSpendAutoBid?:
                MaximizeSpendBidStrategy;
            /** A strategy that automatically adjusts the bid to meet or beat a specified performance goal. It is to be used only for a line item entity. */
            performanceGoalAutoBid?:
                PerformanceGoalBidStrategy;
        }
        interface BrowserAssignedTargetingOptionDetails {
            /** Output only. The display name of the browser. */
            displayName?:
                string;
            /** Indicates if this option is being negatively targeted. All assigned browser targeting options on the same resource must have the same value for this field. */
            negative?:
                boolean;
            /** Required. The targeting_option_id of a TargetingOption of type `TARGETING_TYPE_BROWSER`. */
            targetingOptionId?:
                string;
        }
        interface BrowserTargetingOptionDetails {
            /** Output only. The display name of the browser. */
            displayName?:
                string;
        }
        interface BudgetSummary {
            /** Corresponds to the external_budget_id of a campaign budget. If the value is not set in the campaign budget, this field will be empty. */
            externalBudgetId?:
                string;
            /** The sum of charges made under this budget before taxes, in micros of the invoice's currency. For example, if currency_code is `USD`, then 1000000 represents one US dollar. */
            preTaxAmountMicros?:
                string;
            /**
             * Relevant client, product, and estimate codes from the Mediaocean Prisma tool. Only applicable for campaign budgets with an external_budget_source of
             * EXTERNAL_BUDGET_SOURCE_MEDIA_OCEAN.
             */
            prismaCpeCode?:
                PrismaCpeCode;
            /** The amount of tax applied to charges under this budget, in micros of the invoice's currency. For example, if currency_code is `USD`, then 1000000 represents one US dollar. */
            taxAmountMicros?:
                string;
            /** The total sum of charges made under this budget, including tax, in micros of the invoice's currency. For example, if currency_code is `USD`, then 1000000 represents one US dollar. */
            totalAmountMicros?:
                string;
        }
        interface BulkEditAdvertiserAssignedTargetingOptionsRequest {
            /**
             * The assigned targeting options to create in batch, specified as a list of `CreateAssignedTargetingOptionsRequest`. Supported targeting types: * `TARGETING_TYPE_CHANNEL` *
             * `TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION` * `TARGETING_TYPE_OMID` * `TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION`
             */
            createRequests?:
                CreateAssignedTargetingOptionsRequest[];
            /**
             * The assigned targeting options to delete in batch, specified as a list of `DeleteAssignedTargetingOptionsRequest`. Supported targeting types: * `TARGETING_TYPE_CHANNEL` *
             * `TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION` * `TARGETING_TYPE_OMID` * `TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION`
             */
            deleteRequests?:
                DeleteAssignedTargetingOptionsRequest[];
        }
        interface BulkEditAdvertiserAssignedTargetingOptionsResponse {
            /** The list of assigned targeting options that have been successfully created. This list will be absent if empty. */
            createdAssignedTargetingOptions?:
                AssignedTargetingOption[];
        }
        interface BulkEditAssignedInventorySourcesRequest {
            /** The ID of the advertiser that owns the parent inventory source group. The parent partner does not have access to these assigned inventory sources. */
            advertiserId?:
                string;
            /** The assigned inventory sources to create in bulk, specified as a list of AssignedInventorySources. */
            createdAssignedInventorySources?:
                AssignedInventorySource[];
            /** The IDs of the assigned inventory sources to delete in bulk, specified as a list of assigned_inventory_source_ids. */
            deletedAssignedInventorySources?:
                string[];
            /** The ID of the partner that owns the inventory source group. Only this partner has write access to these assigned inventory sources. */
            partnerId?:
                string;
        }
        interface BulkEditAssignedInventorySourcesResponse {
            /** The list of assigned inventory sources that have been successfully created. This list will be absent if empty. */
            assignedInventorySources?:
                AssignedInventorySource[];
        }
        interface BulkEditAssignedLocationsRequest {
            /** The assigned locations to create in bulk, specified as a list of AssignedLocations. */
            createdAssignedLocations?:
                AssignedLocation[];
            /** The IDs of the assigned locations to delete in bulk, specified as a list of assigned_location_ids. */
            deletedAssignedLocations?:
                string[];
        }
        interface BulkEditAssignedLocationsResponse {
            /** The list of assigned locations that have been successfully created. This list will be absent if empty. */
            assignedLocations?:
                AssignedLocation[];
        }
        interface BulkEditAssignedUserRolesRequest {
            /** The assigned user roles to create in batch, specified as a list of AssignedUserRoles. */
            createdAssignedUserRoles?:
                AssignedUserRole[];
            /** The assigned user roles to delete in batch, specified as a list of assigned_user_role_ids. The format of assigned_user_role_id is `entityType-entityid`, for example `partner-123`. */
            deletedAssignedUserRoles?:
                string[];
        }
        interface BulkEditAssignedUserRolesResponse {
            /** The list of assigned user roles that have been successfully created. This list will be absent if empty. */
            createdAssignedUserRoles?:
                AssignedUserRole[];
        }
        interface BulkEditLineItemAssignedTargetingOptionsRequest {
            /** The assigned targeting options to create in batch, specified as a list of `CreateAssignedTargetingOptionsRequest`. */
            createRequests?:
                CreateAssignedTargetingOptionsRequest[];
            /** The assigned targeting options to delete in batch, specified as a list of `DeleteAssignedTargetingOptionsRequest`. */
            deleteRequests?:
                DeleteAssignedTargetingOptionsRequest[];
        }
        interface BulkEditLineItemAssignedTargetingOptionsResponse {
            /** The list of assigned targeting options that have been successfully created. This list will be absent if empty. */
            createdAssignedTargetingOptions?:
                AssignedTargetingOption[];
        }
        interface BulkEditNegativeKeywordsRequest {
            /** The negative keywords to create in batch, specified as a list of NegativeKeywords. */
            createdNegativeKeywords?:
                NegativeKeyword[];
            /** The negative keywords to delete in batch, specified as a list of keyword_values. */
            deletedNegativeKeywords?:
                string[];
        }
        interface BulkEditNegativeKeywordsResponse {
            /** The list of negative keywords that have been successfully created. This list will be absent if empty. */
            negativeKeywords?:
                NegativeKeyword[];
        }
        interface BulkEditPartnerAssignedTargetingOptionsRequest {
            /** The assigned targeting options to create in batch, specified as a list of `CreateAssignedTargetingOptionsRequest`. Supported targeting types: * `TARGETING_TYPE_CHANNEL` */
            createRequests?:
                CreateAssignedTargetingOptionsRequest[];
            /** The assigned targeting options to delete in batch, specified as a list of `DeleteAssignedTargetingOptionsRequest`. Supported targeting types: * `TARGETING_TYPE_CHANNEL` */
            deleteRequests?:
                DeleteAssignedTargetingOptionsRequest[];
        }
        interface BulkEditPartnerAssignedTargetingOptionsResponse {
            /** The list of assigned targeting options that have been successfully created. This list will be absent if empty. */
            createdAssignedTargetingOptions?:
                AssignedTargetingOption[];
        }
        interface BulkEditSitesRequest {
            /** The ID of the advertiser that owns the parent channel. */
            advertiserId?:
                string;
            /** The sites to create in batch, specified as a list of Sites. */
            createdSites?:
                Site[];
            /** The sites to delete in batch, specified as a list of site url_or_app_ids. */
            deletedSites?:
                string[];
            /** The ID of the partner that owns the parent channel. */
            partnerId?:
                string;
        }
        interface BulkEditSitesResponse {
            /** The list of sites that have been successfully created. This list will be absent if empty. */
            sites?:
                Site[];
        }
        interface BulkListAdvertiserAssignedTargetingOptionsResponse {
            /** The list of assigned targeting options. This list will be absent if empty. */
            assignedTargetingOptions?:
                AssignedTargetingOption[];
            /**
             * A token identifying the next page of results. This value should be specified as the pageToken in a subsequent BulkListAdvertiserAssignedTargetingOptionsRequest to fetch the next
             * page of results. This token will be absent if there are no more assigned_targeting_options to return.
             */
            nextPageToken?:
                string;
        }
        interface BulkListCampaignAssignedTargetingOptionsResponse {
            /** The list of assigned targeting options. This list will be absent if empty. */
            assignedTargetingOptions?:
                AssignedTargetingOption[];
            /**
             * A token identifying the next page of results. This value should be specified as the pageToken in a subsequent BulkListCampaignAssignedTargetingOptionsRequest to fetch the next page
             * of results. This token will be absent if there are no more assigned_targeting_options to return.
             */
            nextPageToken?:
                string;
        }
        interface BulkListInsertionOrderAssignedTargetingOptionsResponse {
            /** The list of assigned targeting options. This list will be absent if empty. */
            assignedTargetingOptions?:
                AssignedTargetingOption[];
            /**
             * A token identifying the next page of results. This value should be specified as the pageToken in a subsequent BulkListInsertionOrderAssignedTargetingOptionsRequest to fetch the next
             * page of results. This token will be absent if there are no more assigned_targeting_options to return.
             */
            nextPageToken?:
                string;
        }
        interface BulkListLineItemAssignedTargetingOptionsResponse {
            /** The list of assigned targeting options. This list will be absent if empty. */
            assignedTargetingOptions?:
                AssignedTargetingOption[];
            /**
             * A token identifying the next page of results. This value should be specified as the pageToken in a subsequent BulkListLineItemAssignedTargetingOptionsRequest to fetch the next page
             * of results. This token will be absent if there are no more assigned_targeting_options to return.
             */
            nextPageToken?:
                string;
        }
        interface BusinessChainAssignedTargetingOptionDetails {
            /** Output only. The display name of a business chain, e.g. "KFC", "Chase Bank". */
            displayName?:
                string;
            /**
             * Required. The radius of the area around the business chain that will be targeted. The units of the radius are specified by proximity_radius_unit. Must be 1 to 800 if unit is
             * `DISTANCE_UNIT_KILOMETERS` and 1 to 500 if unit is `DISTANCE_UNIT_MILES`. The minimum increment for both cases is 0.1. Inputs will be rounded to the nearest acceptable value if it
             * is too granular, e.g. 15.57 will become 15.6.
             */
            proximityRadiusAmount?:
                number;
            /** Required. The unit of distance by which the targeting radius is measured. */
            proximityRadiusUnit?:
                string;
            /**
             * Required. The targeting_option_id of a TargetingOption of type `TARGETING_TYPE_BUSINESS_CHAIN`. Accepted business chain targeting option IDs can be retrieved using
             * SearchTargetingOptions.
             */
            targetingOptionId?:
                string;
        }
        interface BusinessChainSearchTerms {
            /** The search query for the desired business chain. The query must be the full name of the business, e.g. "KFC", "mercedes-benz". */
            businessChainQuery?:
                string;
            /** The search query for the desired geo region, e.g. "Seattle", "United State". */
            regionQuery?:
                string;
        }
        interface BusinessChainTargetingOptionDetails {
            /** Output only. The display name of the business chain, e.g. "KFC", "Chase Bank". */
            businessChain?:
                string;
            /** Output only. The display name of the geographic region, e.g. "Ontario, Canada". */
            geoRegion?:
                string;
            /** Output only. The type of the geographic region. */
            geoRegionType?:
                string;
        }
        interface Campaign {
            /** Output only. The unique ID of the advertiser the campaign belongs to. */
            advertiserId?:
                string;
            /** The list of budgets available to this campaign. If this field is not set, the campaign uses an unlimited budget. */
            campaignBudgets?:
                CampaignBudget[];
            /** Required. The planned spend and duration of the campaign. */
            campaignFlight?:
                CampaignFlight;
            /** Required. The goal of the campaign. */
            campaignGoal?:
                CampaignGoal;
            /** Output only. The unique ID of the campaign. Assigned by the system. */
            campaignId?:
                string;
            /** Required. The display name of the campaign. Must be UTF-8 encoded with a maximum size of 240 bytes. */
            displayName?:
                string;
            /**
             * Required. Controls whether or not the insertion orders under this campaign can spend their budgets and bid on inventory. * Accepted values are `ENTITY_STATUS_ACTIVE`,
             * `ENTITY_STATUS_ARCHIVED`, and `ENTITY_STATUS_PAUSED`. * For CreateCampaign method, `ENTITY_STATUS_ARCHIVED` is not allowed.
             */
            entityStatus?:
                string;
            /** Required. The frequency cap setting of the campaign. */
            frequencyCap?:
                FrequencyCap;
            /** Output only. The resource name of the campaign. */
            name?:
                string;
            /** Output only. The timestamp when the campaign was last updated. Assigned by the system. */
            updateTime?:
                string;
        }
        interface CampaignBudget {
            /**
             * Required. The total amount the linked insertion order segments can budget. The amount is in micros. Must be greater than 0. For example, 500000000 represents 500 standard units of
             * the currency.
             */
            budgetAmountMicros?:
                string;
            /**
             * The unique ID of the campaign budget. Assigned by the system. Do not set for new budgets. Must be included when updating or adding budgets to campaign_budgets. Otherwise, a new ID
             * will be generated and assigned.
             */
            budgetId?:
                string;
            /** Required. Immutable. Specifies whether the budget is measured in currency or impressions. */
            budgetUnit?:
                string;
            /**
             * Required. The date range for the campaign budget. Linked budget segments may have a different date range. They are resolved relative to the parent advertiser's time zone. Both
             * `start_date` and `end_date` must be before the year 2037.
             */
            dateRange?:
                DateRange;
            /** Required. The display name of the budget. Must be UTF-8 encoded with a maximum size of 240 bytes. */
            displayName?:
                string;
            /**
             * Immutable. The ID identifying this budget to the external source. If this field is set and the invoice detail level of the corresponding billing profile is set to "Budget level PO",
             * all impressions served against this budget will include this ID on the invoice. Must be unique under the campaign.
             */
            externalBudgetId?:
                string;
            /** Required. The external source of the budget. */
            externalBudgetSource?:
                string;
            /**
             * Immutable. The ID used to group budgets to be included the same invoice. If this field is set and the invoice level of the corresponding billing profile is set to "Budget invoice
             * grouping ID", all external_budget_id sharing the same invoice_grouping_id will be grouped in the same invoice.
             */
            invoiceGroupingId?:
                string;
            /** Additional metadata for use by the Mediaocean Prisma tool. Required for Mediaocean budgets. Only applicable to prisma_enabled advertisers. */
            prismaConfig?:
                PrismaConfig;
        }
        interface CampaignFlight {
            /**
             * Required. The dates that the campaign is expected to run. They are resolved relative to the parent advertiser's time zone. * The dates specified here will not affect serving. They
             * are used to generate alerts and warnings. For example, if the flight date of any child insertion order is outside the range of these dates, the user interface will show a warning. *
             * `start_date` is required and must be the current date or later. * `end_date` is optional. If specified, it must be the `start_date` or later. * Any specified date must be before the
             * year 2037.
             */
            plannedDates?:
                DateRange;
            /**
             * The amount the campaign is expected to spend for its given planned_dates. This will not limit serving, but will be used for tracking spend in the DV360 UI. The amount is in micros.
             * Must be greater than or equal to 0. For example, 500000000 represents 500 standard units of the currency.
             */
            plannedSpendAmountMicros?:
                string;
        }
        interface CampaignGoal {
            /** Required. The type of the campaign goal. */
            campaignGoalType?:
                string;
            /**
             * Required. The performance goal of the campaign. Acceptable values for performance_goal_type are: * `PERFORMANCE_GOAL_TYPE_CPM` * `PERFORMANCE_GOAL_TYPE_CPC` *
             * `PERFORMANCE_GOAL_TYPE_CPA` * `PERFORMANCE_GOAL_TYPE_CPIAVC` * `PERFORMANCE_GOAL_TYPE_CTR` * `PERFORMANCE_GOAL_TYPE_VIEWABILITY` * `PERFORMANCE_GOAL_TYPE_OTHER`
             */
            performanceGoal?:
                PerformanceGoal;
        }
        interface CarrierAndIspAssignedTargetingOptionDetails {
            /** Output only. The display name of the carrier or ISP. */
            displayName?:
                string;
            /** Indicates if this option is being negatively targeted. All assigned carrier and ISP targeting options on the same resource must have the same value for this field. */
            negative?:
                boolean;
            /** Required. The targeting_option_id of a TargetingOption of type `TARGETING_TYPE_CARRIER_AND_ISP`. */
            targetingOptionId?:
                string;
        }
        interface CarrierAndIspTargetingOptionDetails {
            /** Output only. The display name of the carrier or ISP. */
            displayName?:
                string;
            /** Output only. The type indicating if it's carrier or ISP. */
            type?:
                string;
        }
        interface CategoryAssignedTargetingOptionDetails {
            /** Output only. The display name of the category. */
            displayName?:
                string;
            /** Indicates if this option is being negatively targeted. */
            negative?:
                boolean;
            /** Required. The targeting_option_id field when targeting_type is `TARGETING_TYPE_CATEGORY`. */
            targetingOptionId?:
                string;
        }
        interface CategoryTargetingOptionDetails {
            /** Output only. The display name of the category. */
            displayName?:
                string;
        }
        interface Channel {
            /** The ID of the advertiser that owns the channel. */
            advertiserId?:
                string;
            /** Output only. The unique ID of the channel. Assigned by the system. */
            channelId?:
                string;
            /** Required. The display name of the channel. Must be UTF-8 encoded with a maximum length of 240 bytes. */
            displayName?:
                string;
            /** Output only. The resource name of the channel. */
            name?:
                string;
            /** Output only. Number of line items that are directly targeting this channel negatively. */
            negativelyTargetedLineItemCount?:
                string;
            /** The ID of the partner that owns the channel. */
            partnerId?:
                string;
            /** Output only. Number of line items that are directly targeting this channel positively. */
            positivelyTargetedLineItemCount?:
                string;
        }
        interface ChannelAssignedTargetingOptionDetails {
            /**
             * Required. ID of the channel. Should refer to the channel ID field on a [Partner-owned channel](partners.channels#Channel.FIELDS.channel_id) or [advertiser-owned
             * channel](advertisers.channels#Channel.FIELDS.channel_id) resource.
             */
            channelId?:
                string;
            /** Indicates if this option is being negatively targeted. For advertiser level assigned targeting option, this field must be true. */
            negative?:
                boolean;
        }
        interface CmHybridConfig {
            /** Required. Immutable. Account ID of the CM360 Floodlight configuration linked with the DV360 advertiser. */
            cmAccountId?:
                string;
            /** Required. Immutable. ID of the CM360 Floodlight configuration linked with the DV360 advertiser. */
            cmFloodlightConfigId?:
                string;
            /**
             * Required. Immutable. By setting this field to `true`, you, on behalf of your company, authorize the sharing of information from the given Floodlight configuration to this Display &
             * Video 360 advertiser.
             */
            cmFloodlightLinkingAuthorized?:
                boolean;
            /**
             * A list of CM360 sites whose placements will be synced to DV360 as creatives. If absent or empty in CreateAdvertiser method, the system will automatically create a CM360 site.
             * Removing sites from this list may cause DV360 creatives synced from CM360 to be deleted. At least one site must be specified.
             */
            cmSyncableSiteIds?:
                string[];
            /** Whether or not to report DV360 cost to CM360. */
            dv360ToCmCostReportingEnabled?:
                boolean;
            /** Whether or not to include DV360 data in CM360 data transfer reports. */
            dv360ToCmDataSharingEnabled?:
                boolean;
        }
        interface CmTrackingAd {
            /** The ad ID of the campaign manager 360 tracking Ad. */
            cmAdId?:
                string;
            /** The creative ID of the campaign manager 360 tracking Ad. */
            cmCreativeId?:
                string;
            /** The placement ID of the campaign manager 360 tracking Ad. */
            cmPlacementId?:
                string;
        }
        interface CombinedAudience {
            /** Output only. The unique ID of the combined audience. Assigned by the system. */
            combinedAudienceId?:
                string;
            /** Output only. The display name of the combined audience. . */
            displayName?:
                string;
            /** Output only. The resource name of the combined audience. */
            name?:
                string;
        }
        interface CombinedAudienceGroup {
            /**
             * Required. All combined audience targeting settings in combined audience group. Repeated settings with same id will be ignored. The number of combined audience settings should be no
             * more than five, error will be thrown otherwise.
             */
            settings?:
                CombinedAudienceTargetingSetting[];
        }
        interface CombinedAudienceTargetingSetting {
            /** Required. Combined audience id of combined audience targeting setting. This id is combined_audience_id. */
            combinedAudienceId?:
                string;
        }
        interface ContactInfo {
            /** Country code of the member. Must also be set with the following fields: * hashed_first_name * hashed_last_name * zip_codes */
            countryCode?:
                string;
            /** A list of SHA256 hashed email of the member. Before hashing, remove all whitespace and make sure the string is all lowercase. */
            hashedEmails?:
                string[];
            /**
             * SHA256 hashed first name of the member. Before hashing, remove all whitespace and make sure the string is all lowercase. Must also be set with the following fields: * country_code *
             * hashed_last_name * zip_codes
             */
            hashedFirstName?:
                string;
            /**
             * SHA256 hashed last name of the member. Before hashing, remove all whitespace and make sure the string is all lowercase. Must also be set with the following fields: * country_code *
             * hashed_first_name * zip_codes
             */
            hashedLastName?:
                string;
            /**
             * A list of SHA256 hashed phone numbers of the member. Before hashing, all phone numbers must be formatted using the [E.164 format](//en.wikipedia.org/wiki/E.164) and include the
             * country calling code.
             */
            hashedPhoneNumbers?:
                string[];
            /** A list of zip codes of the member. Must also be set with the following fields: * country_code * hashed_first_name * hashed_last_name */
            zipCodes?:
                string[];
        }
        interface ContactInfoList {
            /** A list of ContactInfo objects defining Customer Match audience members. The size of members after splitting the contact_infos mustn't be greater than 500,000. */
            contactInfos?:
                ContactInfo[];
        }
        interface ContentDurationAssignedTargetingOptionDetails {
            /** Output only. The content duration. */
            contentDuration?:
                string;
            /** Required. The targeting_option_id field when targeting_type is `TARGETING_TYPE_CONTENT_DURATION`. */
            targetingOptionId?:
                string;
        }
        interface ContentDurationTargetingOptionDetails {
            /** Output only. The content duration. */
            contentDuration?:
                string;
        }
        interface ContentGenreAssignedTargetingOptionDetails {
            /** Output only. The display name of the content genre. */
            displayName?:
                string;
            /** Indicates if this option is being negatively targeted. */
            negative?:
                boolean;
            /** Required. The targeting_option_id field when targeting_type is `TARGETING_TYPE_CONTENT_GENRE`. */
            targetingOptionId?:
                string;
        }
        interface ContentGenreTargetingOptionDetails {
            /** Output only. The display name of the content genre */
            displayName?:
                string;
        }
        interface ContentInstreamPositionAssignedTargetingOptionDetails {
            /**
             * Output only. The ad type to target. Only applicable to insertion order targeting and new line items supporting the specified ad type will inherit this targeting option by default.
             * Possible values are: * `AD_TYPE_VIDEO`, the setting will be inherited by new line item when line_item_type is `LINE_ITEM_TYPE_VIDEO_DEFAULT`. * `AD_TYPE_AUDIO`, the setting will be
             * inherited by new line item when line_item_type is `LINE_ITEM_TYPE_AUDIO_DEFAULT`.
             */
            adType?:
                string;
            /** The content instream position for video or audio ads. Output only in v1. Required in v2. */
            contentInstreamPosition?:
                string;
            /** Required. The targeting_option_id field when targeting_type is `TARGETING_TYPE_CONTENT_INSTREAM_POSITION`. */
            targetingOptionId?:
                string;
        }
        interface ContentInstreamPositionTargetingOptionDetails {
            /** Output only. The content instream position. */
            contentInstreamPosition?:
                string;
        }
        interface ContentOutstreamPositionAssignedTargetingOptionDetails {
            /**
             * Output only. The ad type to target. Only applicable to insertion order targeting and new line items supporting the specified ad type will inherit this targeting option by default.
             * Possible values are: * `AD_TYPE_DISPLAY`, the setting will be inherited by new line item when line_item_type is `LINE_ITEM_TYPE_DISPLAY_DEFAULT`. * `AD_TYPE_VIDEO`, the setting will
             * be inherited by new line item when line_item_type is `LINE_ITEM_TYPE_VIDEO_DEFAULT`.
             */
            adType?:
                string;
            /** The content outstream position. Output only in v1. Required in v2. */
            contentOutstreamPosition?:
                string;
            /** Required. The targeting_option_id field when targeting_type is `TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION`. */
            targetingOptionId?:
                string;
        }
        interface ContentOutstreamPositionTargetingOptionDetails {
            /** Output only. The content outstream position. */
            contentOutstreamPosition?:
                string;
        }
        interface ContentStreamTypeAssignedTargetingOptionDetails {
            /** Output only. The content stream type. */
            contentStreamType?:
                string;
            /** Required. The targeting_option_id field when targeting_type is `TARGETING_TYPE_CONTENT_STREAM_TYPE`. */
            targetingOptionId?:
                string;
        }
        interface ContentStreamTypeTargetingOptionDetails {
            /** Output only. The content stream type. */
            contentStreamType?:
                string;
        }
        interface ConversionCountingConfig {
            /**
             * The Floodlight activity configs used to track conversions. The number of conversions counted is the sum of all of the conversions counted by all of the Floodlight activity IDs
             * specified in this field.
             */
            floodlightActivityConfigs?:
                TrackingFloodlightActivityConfig[];
            /**
             * The percentage of post-view conversions to count, in millis (1/1000 of a percent). Must be between 0 and 100000 inclusive. For example, to track 50% of the post-click conversions,
             * set a value of 50000.
             */
            postViewCountPercentageMillis?:
                string;
        }
        interface CounterEvent {
            /** Required. The name of the counter event. */
            name?:
                string;
            /** Required. The name used to identify this counter event in reports. */
            reportingName?:
                string;
        }
        interface CreateAssetRequest {
            /** Required. The filename of the asset, including the file extension. The filename must be UTF-8 encoded with a maximum size of 240 bytes. */
            filename?:
                string;
        }
        interface CreateAssetResponse {
            /** The uploaded asset, if successful. */
            asset?:
                Asset;
        }
        interface CreateAssignedTargetingOptionsRequest {
            /** Required. The assigned targeting options to create and add. */
            assignedTargetingOptions?:
                AssignedTargetingOption[];
            /** Required. Identifies the type of this assigned targeting option. */
            targetingType?:
                string;
        }
        interface CreateSdfDownloadTaskRequest {
            /** The ID of the advertiser to download SDF for. */
            advertiserId?:
                string;
            /** Filters on entities by their entity IDs. */
            idFilter?:
                IdFilter;
            /** Filters on Inventory Sources by their IDs. */
            inventorySourceFilter?:
                InventorySourceFilter;
            /**
             * Filters on selected file types. The entities in each file are filtered by a chosen set of filter entities. The filter entities must be the same type as, or a parent type of, the
             * selected file types.
             */
            parentEntityFilter?:
                ParentEntityFilter;
            /** The ID of the partner to download SDF for. */
            partnerId?:
                string;
            /**
             * Required. The SDF version of the downloaded file. If set to `SDF_VERSION_UNSPECIFIED`, this will default to the version specified by the advertiser or partner identified by
             * `root_id`. An advertiser inherits its SDF version from its partner unless configured otherwise.
             */
            version?:
                string;
        }
        interface Creative {
            /**
             * Additional dimensions. Applicable when creative_type is one of: * `CREATIVE_TYPE_STANDARD` * `CREATIVE_TYPE_EXPANDABLE` * `CREATIVE_TYPE_NATIVE` * `CREATIVE_TYPE_NATIVE_SITE_SQUARE`
             * * `CREATIVE_TYPE_LIGHTBOX` * `CREATIVE_TYPE_PUBLISHER_HOSTED` If this field is specified, width_pixels and height_pixels are both required and must be greater than or equal to 0.
             */
            additionalDimensions?:
                Dimensions[];
            /** Output only. The unique ID of the advertiser the creative belongs to. */
            advertiserId?:
                string;
            /** Third-party HTML tracking tag to be appended to the creative tag. */
            appendedTag?:
                string;
            /** Required. Assets associated to this creative. */
            assets?:
                AssetAssociation[];
            /** Output only. The unique ID of the Campaign Manager 360 placement associated with the creative. This field is only applicable for creatives that are synced from Campaign Manager. */
            cmPlacementId?:
                string;
            /**
             * The Campaign Manager 360 tracking ad associated with the creative. Optional for the following creative_type when created by an advertiser that uses both Campaign Manager 360 and
             * third-party ad serving: * `CREATIVE_TYPE_NATIVE` * `CREATIVE_TYPE_NATIVE_SITE_SQUARE` Output only for other cases.
             */
            cmTrackingAd?:
                CmTrackingAd;
            /**
             * The IDs of companion creatives for a video creative. You can assign existing display creatives (with image or HTML5 assets) to serve surrounding the publisher's video player.
             * Companions display around the video player while the video is playing and remain after the video has completed. Creatives contain additional dimensions can not be companion
             * creatives. This field is only supported for following creative_type: * `CREATIVE_TYPE_AUDIO` * `CREATIVE_TYPE_VIDEO`
             */
            companionCreativeIds?:
                string[];
            /**
             * Counter events for a rich media creative. Counters track the number of times that a user interacts with any part of a rich media creative in a specified way (mouse-overs,
             * mouse-outs, clicks, taps, data loading, keyboard entries, etc.). Any event that can be captured in the creative can be recorded as a counter. Leave it empty or unset for creatives
             * containing image assets only.
             */
            counterEvents?:
                CounterEvent[];
            /** Output only. The timestamp when the creative was created. Assigned by the system. */
            createTime?:
                string;
            /** Output only. A list of attributes of the creative that is generated by the system. */
            creativeAttributes?:
                string[];
            /** Output only. The unique ID of the creative. Assigned by the system. */
            creativeId?:
                string;
            /** Required. Immutable. The type of the creative. */
            creativeType?:
                string;
            /**
             * Required. Primary dimensions of the creative. Applicable to all creative types. The value of width_pixels and height_pixels defaults to `0` when creative_type is one of: *
             * `CREATIVE_TYPE_VIDEO` * `CREATIVE_TYPE_AUDIO` * `CREATIVE_TYPE_NATIVE_VIDEO`
             */
            dimensions?:
                Dimensions;
            /** Required. The display name of the creative. Must be UTF-8 encoded with a maximum size of 240 bytes. */
            displayName?:
                string;
            /** Output only. Indicates whether the creative is dynamic. */
            dynamic?:
                boolean;
            /** Required. Controls whether or not the creative can serve. Accepted values are: * `ENTITY_STATUS_ACTIVE` * `ENTITY_STATUS_ARCHIVED` * `ENTITY_STATUS_PAUSED` */
            entityStatus?:
                string;
            /**
             * Required. Exit events for this creative. An exit (also known as a click tag) is any area in your creative that someone can click or tap to open an advertiser's landing page. Every
             * creative must include at least one exit. You can add an exit to your creative in any of the following ways: * Use Google Web Designer's tap area. * Define a JavaScript variable
             * called "clickTag". * Use the Enabler (Enabler.exit()) to track exits in rich media formats.
             */
            exitEvents?:
                ExitEvent[];
            /**
             * Optional. Specifies the expanding direction of the creative. Required and only valid for third-party expandable creatives. Third-party expandable creatives are creatives with
             * following hosting source: * `HOSTING_SOURCE_THIRD_PARTY` combined with following creative_type: * `CREATIVE_TYPE_EXPANDABLE`
             */
            expandingDirection?:
                string;
            /**
             * Optional. Indicates the creative will automatically expand on hover. Optional and only valid for third-party expandable creatives. Third-party expandable creatives are creatives
             * with following hosting source: * `HOSTING_SOURCE_THIRD_PARTY` combined with following creative_type: * `CREATIVE_TYPE_EXPANDABLE`
             */
            expandOnHover?:
                boolean;
            /** Required. Indicates where the creative is hosted. */
            hostingSource?:
                string;
            /**
             * Output only. Indicates the third-party VAST tag creative requires HTML5 Video support. Output only and only valid for third-party VAST tag creatives. Third-party VAST tag creatives
             * are creatives with following hosting_source: * `HOSTING_SOURCE_THIRD_PARTY` combined with following creative_type: * `CREATIVE_TYPE_VIDEO`
             */
            html5Video?:
                boolean;
            /**
             * Indicates whether Integral Ad Science (IAS) campaign monitoring is enabled. To enable this for the creative, make sure the Advertiser.creative_config.ias_client_id has been set to
             * your IAS client ID.
             */
            iasCampaignMonitoring?:
                boolean;
            /** ID information used to link this creative to an external system. Must be UTF-8 encoded with a length of no more than 10,000 characters. */
            integrationCode?:
                string;
            /**
             * JavaScript measurement URL from supported third-party verification providers (ComScore, DoubleVerify, IAS, Moat). HTML script tags are not supported. This field is only writeable in
             * following creative_type: * `CREATIVE_TYPE_NATIVE` * `CREATIVE_TYPE_NATIVE_SITE_SQUARE` * `CREATIVE_TYPE_NATIVE_VIDEO`
             */
            jsTrackerUrl?:
                string;
            /** Output only. The IDs of the line items this creative is associated with. To associate a creative to a line item, use LineItem.creative_ids instead. */
            lineItemIds?:
                string[];
            /**
             * Output only. Media duration of the creative. Applicable when creative_type is one of: * `CREATIVE_TYPE_VIDEO` * `CREATIVE_TYPE_AUDIO` * `CREATIVE_TYPE_NATIVE_VIDEO` *
             * `CREATIVE_TYPE_PUBLISHER_HOSTED`
             */
            mediaDuration?:
                string;
            /**
             * Output only. Indicates the third-party audio creative supports MP3. Output only and only valid for third-party audio creatives. Third-party audio creatives are creatives with
             * following hosting_source: * `HOSTING_SOURCE_THIRD_PARTY` combined with following creative_type: * `CREATIVE_TYPE_AUDIO`
             */
            mp3Audio?:
                boolean;
            /** Output only. The resource name of the creative. */
            name?:
                string;
            /** User notes for this creative. Must be UTF-8 encoded with a length of no more than 20,000 characters. */
            notes?:
                string;
            /** Specifies the OBA icon for a video creative. This field is only supported in following creative_type: * `CREATIVE_TYPE_VIDEO` */
            obaIcon?:
                ObaIcon;
            /**
             * Output only. Indicates the third-party audio creative supports OGG. Output only and only valid for third-party audio creatives. Third-party audio creatives are creatives with
             * following hosting_source: * `HOSTING_SOURCE_THIRD_PARTY` combined with following creative_type: * `CREATIVE_TYPE_AUDIO`
             */
            oggAudio?:
                boolean;
            /**
             * Amount of time to play the video before counting a view. This field is required when skippable is true. This field is only supported for the following creative_type: *
             * `CREATIVE_TYPE_VIDEO`
             */
            progressOffset?:
                AudioVideoOffset;
            /**
             * Optional. Indicates that the creative relies on HTML5 to render properly. Optional and only valid for third-party tag creatives. Third-party tag creatives are creatives with
             * following hosting_source: * `HOSTING_SOURCE_THIRD_PARTY` combined with following creative_type: * `CREATIVE_TYPE_STANDARD` * `CREATIVE_TYPE_EXPANDABLE`
             */
            requireHtml5?:
                boolean;
            /**
             * Optional. Indicates that the creative requires MRAID (Mobile Rich Media Ad Interface Definitions system). Set this if the creative relies on mobile gestures for interactivity, such
             * as swiping or tapping. Optional and only valid for third-party tag creatives. Third-party tag creatives are creatives with following hosting_source: * `HOSTING_SOURCE_THIRD_PARTY`
             * combined with following creative_type: * `CREATIVE_TYPE_STANDARD` * `CREATIVE_TYPE_EXPANDABLE`
             */
            requireMraid?:
                boolean;
            /**
             * Optional. Indicates that the creative will wait for a return ping for attribution. Only valid when using a Campaign Manager 360 tracking ad with a third-party ad server parameter
             * and the ${DC_DBM_TOKEN} macro. Optional and only valid for third-party tag creatives or third-party VAST tag creatives. Third-party tag creatives are creatives with following
             * hosting_source: * `HOSTING_SOURCE_THIRD_PARTY` combined with following creative_type: * `CREATIVE_TYPE_STANDARD` * `CREATIVE_TYPE_EXPANDABLE` Third-party VAST tag creatives are
             * creatives with following hosting_source: * `HOSTING_SOURCE_THIRD_PARTY` combined with following creative_type: * `CREATIVE_TYPE_AUDIO` * `CREATIVE_TYPE_VIDEO`
             */
            requirePingForAttribution?:
                boolean;
            /** Output only. The current status of the creative review process. */
            reviewStatus?:
                ReviewStatusInfo;
            /**
             * Amount of time to play the video before the skip button appears. This field is required when skippable is true. This field is only supported for the following creative_type: *
             * `CREATIVE_TYPE_VIDEO`
             */
            skipOffset?:
                AudioVideoOffset;
            /** Whether the user can choose to skip a video creative. This field is only supported for the following creative_type: * `CREATIVE_TYPE_VIDEO` */
            skippable?:
                boolean;
            /**
             * Optional. The original third-party tag used for the creative. Required and only valid for third-party tag creatives. Third-party tag creatives are creatives with following
             * hosting_source: * `HOSTING_SOURCE_THIRD_PARTY` combined with following creative_type: * `CREATIVE_TYPE_STANDARD` * `CREATIVE_TYPE_EXPANDABLE`
             */
            thirdPartyTag?:
                string;
            /**
             * Tracking URLs from third parties to track interactions with a video creative. This field is only supported for the following creative_type: * `CREATIVE_TYPE_AUDIO` *
             * `CREATIVE_TYPE_VIDEO` * `CREATIVE_TYPE_NATIVE_VIDEO`
             */
            thirdPartyUrls?:
                ThirdPartyUrl[];
            /**
             * Timer custom events for a rich media creative. Timers track the time during which a user views and interacts with a specified part of a rich media creative. A creative can have
             * multiple timer events, each timed independently. Leave it empty or unset for creatives containing image assets only.
             */
            timerEvents?:
                TimerEvent[];
            /**
             * Tracking URLs for analytics providers or third-party ad technology vendors. The URLs must start with https (except on inventory that doesn't require SSL compliance). If using macros
             * in your URL, use only macros supported by Display & Video 360. Standard URLs only, no IMG or SCRIPT tags. This field is only writeable in following creative_type: *
             * `CREATIVE_TYPE_NATIVE` * `CREATIVE_TYPE_NATIVE_SITE_SQUARE` * `CREATIVE_TYPE_NATIVE_VIDEO`
             */
            trackerUrls?:
                string[];
            /**
             * Output only. Audio/Video transcodes. Display & Video 360 transcodes the main asset into a number of alternative versions that use different file formats or have different properties
             * (resolution, audio bit rate, and video bit rate), each designed for specific video players or bandwidths. These transcodes give a publisher's system more options to choose from for
             * each impression on your video and ensures that the appropriate file serves based on the viewer’s connection and screen size. This field is only supported in following creative_type:
             * * `CREATIVE_TYPE_VIDEO` * `CREATIVE_TYPE_NATIVE_VIDEO` * `CREATIVE_TYPE_AUDIO`
             */
            transcodes?:
                Transcode[];
            /**
             * Optional. An optional creative identifier provided by a registry that is unique across all platforms. Universal Ad ID is part of the VAST 4.0 standard. It can be modified after the
             * creative is created. This field is only supported for the following creative_type: * `CREATIVE_TYPE_VIDEO`
             */
            universalAdId?:
                UniversalAdId;
            /** Output only. The timestamp when the creative was last updated, either by the user or system (e.g. creative review). Assigned by the system. */
            updateTime?:
                string;
            /**
             * Optional. The URL of the VAST tag for a third-party VAST tag creative. Required and only valid for third-party VAST tag creatives. Third-party VAST tag creatives are creatives with
             * following hosting_source: * `HOSTING_SOURCE_THIRD_PARTY` combined with following creative_type: * `CREATIVE_TYPE_AUDIO` * `CREATIVE_TYPE_VIDEO`
             */
            vastTagUrl?:
                string;
            /**
             * Output only. Indicates the third-party VAST tag creative requires VPAID (Digital Video Player-Ad Interface). Output only and only valid for third-party VAST tag creatives.
             * Third-party VAST tag creatives are creatives with following hosting_source: * `HOSTING_SOURCE_THIRD_PARTY` combined with following creative_type: * `CREATIVE_TYPE_VIDEO`
             */
            vpaid?:
                boolean;
        }
        interface CreativeConfig {
            /** The type of creative that can be assigned to the inventory source. Only the following types are supported: * `CREATIVE_TYPE_STANDARD` * `CREATIVE_TYPE_VIDEO` */
            creativeType?:
                string;
            /** The configuration for display creatives. Applicable when creative_type is `CREATIVE_TYPE_STANDARD`. */
            displayCreativeConfig?:
                InventorySourceDisplayCreativeConfig;
            /** The configuration for video creatives. Applicable when creative_type is `CREATIVE_TYPE_VIDEO`. */
            videoCreativeConfig?:
                InventorySourceVideoCreativeConfig;
        }
        interface CustomBiddingAlgorithm {
            /** Immutable. The unique ID of the advertiser that owns the custom bidding algorithm. */
            advertiserId?:
                string;
            /** Output only. The unique ID of the custom bidding algorithm. Assigned by the system. */
            customBiddingAlgorithmId?:
                string;
            /** Output only. The status of custom bidding algorithm. */
            customBiddingAlgorithmState?:
                string;
            /** Required. Immutable. The type of custom bidding algorithm. */
            customBiddingAlgorithmType?:
                string;
            /** Required. The display name of the custom bidding algorithm. Must be UTF-8 encoded with a maximum size of 240 bytes. */
            displayName?:
                string;
            /** Controls whether or not the custom bidding algorithm can be used as a bidding strategy. Accepted values are: * `ENTITY_STATUS_ACTIVE` * `ENTITY_STATUS_ARCHIVED` */
            entityStatus?:
                string;
            /**
             * Output only. The state of custom bidding model readiness for each advertiser who has access. This field may only include the state of the queried advertiser if the algorithm
             * [`owner`](/display-video/api/reference/rest/v1/customBiddingAlgorithms#CustomBiddingAlgorithm.FIELDS.oneof_owner) is a partner and is being retrieved using an advertiser
             * [`accessor`](/display-video/api/reference/rest/v1/customBiddingAlgorithms/list#body.QUERY_PARAMETERS.oneof_accessor).
             */
            modelReadiness?:
                CustomBiddingModelReadinessState[];
            /** Output only. The resource name of the custom bidding algorithm. */
            name?:
                string;
            /** Immutable. The unique ID of the partner that owns the custom bidding algorithm. */
            partnerId?:
                string;
            /**
             * The IDs of the advertisers who have access to this algorithm. If advertiser_id is set, this field will only consist of that value. This field will not be set if the algorithm
             * [`owner`](/display-video/api/reference/rest/v1/customBiddingAlgorithms#CustomBiddingAlgorithm.FIELDS.oneof_owner) is a partner and is being retrieved using an advertiser
             * [`accessor`](/display-video/api/reference/rest/v1/customBiddingAlgorithms/list#body.QUERY_PARAMETERS.oneof_accessor).
             */
            sharedAdvertiserIds?:
                string[];
        }
        interface CustomBiddingModelReadinessState {
            /** The unique ID of the relevant advertiser. */
            advertiserId?:
                string;
            /** The readiness state of custom bidding model. */
            readinessState?:
                string;
        }
        interface CustomBiddingScript {
            /** Output only. Whether the script is currently being used for scoring by the parent algorithm. */
            active?:
                boolean;
            /** Output only. The time when the script was created. */
            createTime?:
                string;
            /** Output only. The unique ID of the custom bidding algorithm the script belongs to. */
            customBiddingAlgorithmId?:
                string;
            /** Output only. The unique ID of the custom bidding script. */
            customBiddingScriptId?:
                string;
            /** Output only. Error details of a rejected custom bidding script. This field will only be populated when Script.state is REJECTED. */
            errors?:
                ScriptError[];
            /** Output only. The resource name of the custom bidding script. */
            name?:
                string;
            /** The reference to the uploaded script file. */
            script?:
                CustomBiddingScriptRef;
            /** Output only. The state of the custom bidding script. */
            state?:
                string;
        }
        interface CustomBiddingScriptRef {
            /**
             * A resource name to be used in media.download to Download the script files. Or media.upload to Upload the script files. Resource names have the format
             * `customBiddingAlgorithms/{custom_bidding_algorithm_id}/scriptRef/{ref_id}`.
             */
            resourceName?:
                string;
        }
        interface CustomList {
            /** Output only. The unique ID of the custom list. Assigned by the system. */
            customListId?:
                string;
            /** Output only. The display name of the custom list. . */
            displayName?:
                string;
            /** Output only. The resource name of the custom list. */
            name?:
                string;
        }
        interface CustomListGroup {
            /** Required. All custom list targeting settings in custom list group. Repeated settings with same id will be ignored. */
            settings?:
                CustomListTargetingSetting[];
        }
        interface CustomListTargetingSetting {
            /** Required. Custom id of custom list targeting setting. This id is custom_list_id. */
            customListId?:
                string;
        }
        interface Date {
            /** Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant. */
            day?:
                number;
            /** Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day. */
            month?:
                number;
            /** Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year. */
            year?:
                number;
        }
        interface DateRange {
            /** The upper bound of the date range, inclusive. Must specify a positive value for `year`, `month`, and `day`. */
            endDate?:
                Date;
            /** The lower bound of the date range, inclusive. Must specify a positive value for `year`, `month`, and `day`. */
            startDate?:
                Date;
        }
        interface DayAndTimeAssignedTargetingOptionDetails {
            /** Required. The day of the week for this day and time targeting setting. */
            dayOfWeek?:
                string;
            /** Required. The end hour for day and time targeting. Must be between 1 (1 hour after start of day) and 24 (end of day). */
            endHour?:
                number;
            /** Required. The start hour for day and time targeting. Must be between 0 (start of day) and 23 (1 hour before end of day). */
            startHour?:
                number;
            /** Required. The mechanism used to determine which timezone to use for this day and time targeting setting. */
            timeZoneResolution?:
                string;
        }
        // tslint:disable-next-line:no-empty-interface
        interface DeactivateManualTriggerRequest {
        }
        interface DeleteAssignedTargetingOptionsRequest {
            /** Required. The assigned targeting option IDs to delete. */
            assignedTargetingOptionIds?:
                string[];
            /** Required. Identifies the type of this assigned targeting option. */
            targetingType?:
                string;
        }
        interface DeviceMakeModelAssignedTargetingOptionDetails {
            /** Output only. The display name of the device make and model. */
            displayName?:
                string;
            /** Indicates if this option is being negatively targeted. */
            negative?:
                boolean;
            /** Required. The targeting_option_id field when targeting_type is `TARGETING_TYPE_DEVICE_MAKE_MODEL`. */
            targetingOptionId?:
                string;
        }
        interface DeviceMakeModelTargetingOptionDetails {
            /** Output only. The display name of the device make and model. */
            displayName?:
                string;
        }
        interface DeviceTypeAssignedTargetingOptionDetails {
            /** The display name of the device type. Output only in v1. Required in v2. */
            deviceType?:
                string;
            /** Required. ID of the device type. */
            targetingOptionId?:
                string;
        }
        interface DeviceTypeTargetingOptionDetails {
            /** Output only. The device type that is used to be targeted. */
            deviceType?:
                string;
        }
        interface DigitalContentLabelAssignedTargetingOptionDetails {
            /** Output only. The display name of the digital content label rating tier. */
            contentRatingTier?:
                string;
            /** Required. ID of the digital content label to be EXCLUDED. */
            excludedTargetingOptionId?:
                string;
        }
        interface DigitalContentLabelTargetingOptionDetails {
            /** Output only. An enum for the content label brand safety tiers. */
            contentRatingTier?:
                string;
        }
        interface Dimensions {
            /** The height in pixels. */
            heightPixels?:
                number;
            /** The width in pixels. */
            widthPixels?:
                number;
        }
        interface DoubleVerify {
            /** Avoid bidding on apps with the star ratings. */
            appStarRating?:
                DoubleVerifyAppStarRating;
            /** Avoid bidding on apps with the age rating. */
            avoidedAgeRatings?:
                string[];
            /** DV Brand Safety Controls. */
            brandSafetyCategories?:
                DoubleVerifyBrandSafetyCategories;
            /**
             * The custom segment ID provided by DoubleVerify. The ID must start with "51" and consist of eight digits. Custom segment ID cannot be specified along with any of the following
             * fields: * brand_safety_categories * avoided_age_ratings * app_star_rating * fraud_invalid_traffic
             */
            customSegmentId?:
                string;
            /** Display viewability settings (applicable to display line items only). */
            displayViewability?:
                DoubleVerifyDisplayViewability;
            /** Avoid Sites and Apps with historical Fraud & IVT Rates. */
            fraudInvalidTraffic?:
                DoubleVerifyFraudInvalidTraffic;
            /** Video viewability settings (applicable to video line items only). */
            videoViewability?:
                DoubleVerifyVideoViewability;
        }
        interface DoubleVerifyAppStarRating {
            /** Avoid bidding on apps with the star ratings. */
            avoidedStarRating?:
                string;
            /** Avoid bidding on apps with insufficient star ratings. */
            avoidInsufficientStarRating?:
                boolean;
        }
        interface DoubleVerifyBrandSafetyCategories {
            /** Brand safety high severity avoidance categories. */
            avoidedHighSeverityCategories?:
                string[];
            /** Brand safety medium severity avoidance categories. */
            avoidedMediumSeverityCategories?:
                string[];
            /** Unknown or unrateable. */
            avoidUnknownBrandSafetyCategory?:
                boolean;
        }
        interface DoubleVerifyDisplayViewability {
            /** Target web and app inventory to maximize IAB viewable rate. */
            iab?:
                string;
            /** Target web and app inventory to maximize 100% viewable duration. */
            viewableDuring?:
                string;
        }
        interface DoubleVerifyFraudInvalidTraffic {
            /** Avoid Sites and Apps with historical Fraud & IVT. */
            avoidedFraudOption?:
                string;
            /** Insufficient Historical Fraud & IVT Stats. */
            avoidInsufficientOption?:
                boolean;
        }
        interface DoubleVerifyVideoViewability {
            /** Target inventory to maximize impressions with 400x300 or greater player size. */
            playerImpressionRate?:
                string;
            /** Target web inventory to maximize IAB viewable rate. */
            videoIab?:
                string;
            /** Target web inventory to maximize fully viewable rate. */
            videoViewableRate?:
                string;
        }
        interface EditCustomerMatchMembersRequest {
            /** Input only. A list of contact information to define the members to be added. */
            addedContactInfoList?:
                ContactInfoList;
            /** Input only. A list of mobile device IDs to define the members to be added. */
            addedMobileDeviceIdList?:
                MobileDeviceIdList;
            /** Required. The ID of the owner advertiser of the updated Customer Match FirstAndThirdPartyAudience. */
            advertiserId?:
                string;
        }
        interface EditCustomerMatchMembersResponse {
            /** Required. The ID of the updated Customer Match FirstAndThirdPartyAudience. */
            firstAndThirdPartyAudienceId?:
                string;
        }
        interface EditGuaranteedOrderReadAccessorsRequest {
            /** The advertisers to add as read accessors to the guaranteed order. */
            addedAdvertisers?:
                string[];
            /** Required. The partner context in which the change is being made. */
            partnerId?:
                string;
            /** Whether to give all advertisers of the read/write accessor partner read access to the guaranteed order. Only applicable if read_write_partner_id is set in the guaranteed order. */
            readAccessInherited?:
                boolean;
            /** The advertisers to remove as read accessors to the guaranteed order. */
            removedAdvertisers?:
                string[];
        }
        interface EditGuaranteedOrderReadAccessorsResponse {
            /** Whether all advertisers of read_write_partner_id have read access to the guaranteed order. */
            readAccessInherited?:
                boolean;
            /** The IDs of advertisers with read access to the guaranteed order. */
            readAdvertiserIds?:
                string[];
        }
        interface EditInventorySourceReadWriteAccessorsRequest {
            /** The advertisers to add or remove from the list of advertisers that have read/write access to the inventory source. This change will remove an existing partner read/write accessor. */
            advertisersUpdate?:
                EditInventorySourceReadWriteAccessorsRequestAdvertisersUpdate;
            /** Set the partner context as read/write accessor of the inventory source. This will remove all other current read/write advertiser accessors. */
            assignPartner?:
                boolean;
            /** Required. The partner context by which the accessors change is being made. */
            partnerId?:
                string;
        }
        interface EditInventorySourceReadWriteAccessorsRequestAdvertisersUpdate {
            /** The advertisers to add. */
            addedAdvertisers?:
                string[];
            /** The advertisers to remove. */
            removedAdvertisers?:
                string[];
        }
        // tslint:disable-next-line:no-empty-interface
        interface Empty {
        }
        interface EnvironmentAssignedTargetingOptionDetails {
            /** The serving environment. Output only in v1. Required in v2. */
            environment?:
                string;
            /** Required. The targeting_option_id of a TargetingOption of type `TARGETING_TYPE_ENVIRONMENT` (e.g., "508010" for targeting the `ENVIRONMENT_WEB_OPTIMIZED` option). */
            targetingOptionId?:
                string;
        }
        interface EnvironmentTargetingOptionDetails {
            /** Output only. The serving environment. */
            environment?:
                string;
        }
        interface ExchangeAssignedTargetingOptionDetails {
            /** Required. The targeting_option_id of a TargetingOption of type `TARGETING_TYPE_EXCHANGE`. */
            targetingOptionId?:
                string;
        }
        interface ExchangeConfig {
            /** All enabled exchanges in the partner. Duplicate enabled exchanges will be ignored. */
            enabledExchanges?:
                ExchangeConfigEnabledExchange[];
        }
        interface ExchangeConfigEnabledExchange {
            /** The enabled exchange. */
            exchange?:
                string;
            /** Output only. Agency ID of Google Ad Manager. The field is only relevant when Google Ad Manager is the enabled exchange. */
            googleAdManagerAgencyId?:
                string;
            /** Output only. Network ID of Google Ad Manager. The field is only relevant when Google Ad Manager is the enabled exchange. */
            googleAdManagerBuyerNetworkId?:
                string;
            /** Output only. Seat ID of the enabled exchange. */
            seatId?:
                string;
        }
        interface ExchangeReviewStatus {
            /** The exchange reviewing the creative. */
            exchange?:
                string;
            /** Status of the exchange review. */
            status?:
                string;
        }
        interface ExchangeTargetingOptionDetails {
            /** Output only. The type of exchange. */
            exchange?:
                string;
        }
        interface ExitEvent {
            /** The name of the click tag of the exit event. The name must be unique within one creative. Leave it empty or unset for creatives containing image assets only. */
            name?:
                string;
            /** The name used to identify this event in reports. Leave it empty or unset for creatives containing image assets only. */
            reportingName?:
                string;
            /** Required. The type of the exit event. */
            type?:
                string;
            /** Required. The click through URL of the exit event. This is required when type is: * `EXIT_EVENT_TYPE_DEFAULT` * `EXIT_EVENT_TYPE_BACKUP` */
            url?:
                string;
        }
        interface FirstAndThirdPartyAudience {
            /**
             * Output only. The estimated audience size for the Display network in the past month. If the size is less than 1000, the number will be hidden and 0 will be returned due to privacy
             * reasons. Otherwise, the number will be rounded off to two significant digits. Only returned in GET request.
             */
            activeDisplayAudienceSize?:
                string;
            /** The app_id matches with the type of the mobile_device_ids being uploaded. Only applicable to audience_type `CUSTOMER_MATCH_DEVICE_ID` */
            appId?:
                string;
            /** Output only. The source of the audience. */
            audienceSource?:
                string;
            /** The type of the audience. */
            audienceType?:
                string;
            /** Input only. A list of contact information to define the initial audience members. Only applicable to audience_type `CUSTOMER_MATCH_CONTACT_INFO` */
            contactInfoList?:
                ContactInfoList;
            /** The user-provided description of the audience. Only applicable to first party audiences. */
            description?:
                string;
            /**
             * Output only. The estimated audience size for the Display network. If the size is less than 1000, the number will be hidden and 0 will be returned due to privacy reasons. Otherwise,
             * the number will be rounded off to two significant digits. Only returned in GET request.
             */
            displayAudienceSize?:
                string;
            /**
             * Output only. The estimated desktop audience size in Display network. If the size is less than 1000, the number will be hidden and 0 will be returned due to privacy reasons.
             * Otherwise, the number will be rounded off to two significant digits. Only applicable to first party audiences. Only returned in GET request.
             */
            displayDesktopAudienceSize?:
                string;
            /**
             * Output only. The estimated mobile app audience size in Display network. If the size is less than 1000, the number will be hidden and 0 will be returned due to privacy reasons.
             * Otherwise, the number will be rounded off to two significant digits. Only applicable to first party audiences. Only returned in GET request.
             */
            displayMobileAppAudienceSize?:
                string;
            /**
             * Output only. The estimated mobile web audience size in Display network. If the size is less than 1000, the number will be hidden and 0 will be returned due to privacy reasons.
             * Otherwise, the number will be rounded off to two significant digits. Only applicable to first party audiences. Only returned in GET request.
             */
            displayMobileWebAudienceSize?:
                string;
            /** The display name of the first and third party audience. */
            displayName?:
                string;
            /** Output only. The unique ID of the first and third party audience. Assigned by the system. */
            firstAndThirdPartyAudienceId?:
                string;
            /** Whether the audience is a first or third party audience. */
            firstAndThirdPartyAudienceType?:
                string;
            /**
             * Output only. The estimated audience size for Gmail network. If the size is less than 1000, the number will be hidden and 0 will be returned due to privacy reasons. Otherwise, the
             * number will be rounded off to two significant digits. Only applicable to first party audiences. Only returned in GET request.
             */
            gmailAudienceSize?:
                string;
            /**
             * The duration in days that an entry remains in the audience after the qualifying event. If the audience has no expiration, set the value of this field to 10000. Otherwise, the set
             * value must be greater than 0 and less than or equal to 540. Only applicable to first party audiences. This field is required if one of the following audience_type is used: *
             * `CUSTOMER_MATCH_CONTACT_INFO` * `CUSTOMER_MATCH_DEVICE_ID`
             */
            membershipDurationDays?:
                string;
            /** Input only. A list of mobile device IDs to define the initial audience members. Only applicable to audience_type `CUSTOMER_MATCH_DEVICE_ID` */
            mobileDeviceIdList?:
                MobileDeviceIdList;
            /** Output only. The resource name of the first and third party audience. */
            name?:
                string;
            /**
             * Output only. The estimated audience size for YouTube network. If the size is less than 1000, the number will be hidden and 0 will be returned due to privacy reasons. Otherwise, the
             * number will be rounded off to two significant digits. Only applicable to first party audiences. Only returned in GET request.
             */
            youtubeAudienceSize?:
                string;
        }
        interface FirstAndThirdPartyAudienceGroup {
            /** Required. All first and third party audience targeting settings in first and third party audience group. Repeated settings with same id are not allowed. */
            settings?:
                FirstAndThirdPartyAudienceTargetingSetting[];
        }
        interface FirstAndThirdPartyAudienceTargetingSetting {
            /** Required. First and third party audience id of the first and third party audience targeting setting. This id is first_and_third_party_audience_id. */
            firstAndThirdPartyAudienceId?:
                string;
            /**
             * The recency of the first and third party audience targeting setting. Only applicable to first party audiences, otherwise will be ignored. For more info, refer to
             * https://support.google.com/displayvideo/answer/2949947#recency When unspecified, no recency limit will be used.
             */
            recency?:
                string;
        }
        interface FixedBidStrategy {
            /**
             * The fixed bid amount, in micros of the advertiser's currency. For insertion order entity, bid_amount_micros should be set as 0. For line item entity, bid_amount_micros must be
             * greater than or equal to billable unit of the given currency and smaller than or equal to the upper limit 1000000000. For example, 1500000 represents 1.5 standard units of the
             * currency.
             */
            bidAmountMicros?:
                string;
        }
        interface FloodlightGroup {
            /** The Active View video viewability metric configuration for the Floodlight group. */
            activeViewConfig?:
                ActiveViewVideoViewabilityMetricConfig;
            /**
             * User-defined custom variables owned by the Floodlight group. Use custom Floodlight variables to create reporting data that is tailored to your unique business needs. Custom
             * Floodlight variables use the keys `U1=`, `U2=`, and so on, and can take any values that you choose to pass to them. You can use them to track virtually any type of data that you
             * collect about your customers, such as the genre of movie that a customer purchases, the country to which the item is shipped, and so on. Custom Floodlight variables may not be used
             * to pass any data that could be used or recognized as personally identifiable information (PII). Example: `custom_variables { fields { "U1": value { number_value: 123.4 }, "U2":
             * value { string_value: "MyVariable2" }, "U3": value { string_value: "MyVariable3" } } }` Acceptable values for keys are "U1" through "U100", inclusive. String values must be less
             * than 64 characters long, and cannot contain the following characters: `"<>`.
             */
            customVariables?:
                { [P in string]: any };
            /** Required. The display name of the Floodlight group. */
            displayName?:
                string;
            /** Output only. The unique ID of the Floodlight group. Assigned by the system. */
            floodlightGroupId?:
                string;
            /** Required. The lookback window for the Floodlight group. Both click_days and impression_days are required. Acceptable values for both are `0` to `90`, inclusive. */
            lookbackWindow?:
                LookbackWindow;
            /** Output only. The resource name of the Floodlight group. */
            name?:
                string;
            /** Required. The web tag type enabled for the Floodlight group. */
            webTagType?:
                string;
        }
        interface FrequencyCap {
            /** The maximum number of times a user may be shown the same ad during this period. Must be greater than 0. Required when unlimited is `false` and max_views is not set. */
            maxImpressions?:
                number;
            /** The time unit in which the frequency cap will be applied. Required when unlimited is `false`. */
            timeUnit?:
                string;
            /**
             * The number of time_unit the frequency cap will last. Required when unlimited is `false`. The following restrictions apply based on the value of time_unit: * `TIME_UNIT_LIFETIME` -
             * this field is output only and will default to 1 * `TIME_UNIT_MONTHS` - must be between 1 and 2 * `TIME_UNIT_WEEKS` - must be between 1 and 4 * `TIME_UNIT_DAYS` - must be between 1
             * and 6 * `TIME_UNIT_HOURS` - must be between 1 and 23 * `TIME_UNIT_MINUTES` - must be between 1 and 59
             */
            timeUnitCount?:
                number;
            /** Whether unlimited frequency capping is applied. When this field is set to `true`, the remaining frequency cap fields are not applicable. */
            unlimited?:
                boolean;
        }
        interface GenderAssignedTargetingOptionDetails {
            /** The gender of the audience. Output only in v1. Required in v2. */
            gender?:
                string;
            /** Required. The targeting_option_id of a TargetingOption of type `TARGETING_TYPE_GENDER`. */
            targetingOptionId?:
                string;
        }
        interface GenderTargetingOptionDetails {
            /** Output only. The gender of an audience. */
            gender?:
                string;
        }
        interface GenerateDefaultLineItemRequest {
            /** Required. The display name of the line item. Must be UTF-8 encoded with a maximum size of 240 bytes. */
            displayName?:
                string;
            /** Required. The unique ID of the insertion order that the line item belongs to. */
            insertionOrderId?:
                string;
            /** Required. The type of the line item. */
            lineItemType?:
                string;
            /**
             * The mobile app promoted by the line item. This is applicable only when line_item_type is either `LINE_ITEM_TYPE_DISPLAY_MOBILE_APP_INSTALL` or
             * `LINE_ITEM_TYPE_VIDEO_MOBILE_APP_INSTALL`.
             */
            mobileApp?:
                MobileApp;
        }
        interface GeoRegionAssignedTargetingOptionDetails {
            /** Output only. The display name of the geographic region (e.g., "Ontario, Canada"). */
            displayName?:
                string;
            /** Output only. The type of geographic region targeting. */
            geoRegionType?:
                string;
            /** Indicates if this option is being negatively targeted. */
            negative?:
                boolean;
            /** Required. The targeting_option_id of a TargetingOption of type `TARGETING_TYPE_GEO_REGION`. */
            targetingOptionId?:
                string;
        }
        interface GeoRegionSearchTerms {
            /** The search query for the desired geo region. The query can be a prefix, e.g. "New Yor", "Seattle", "USA", etc. */
            geoRegionQuery?:
                string;
        }
        interface GeoRegionTargetingOptionDetails {
            /** Output only. The display name of the geographic region (e.g., "Ontario, Canada"). */
            displayName?:
                string;
            /** Output only. The type of geographic region targeting. */
            geoRegionType?:
                string;
        }
        interface GoogleAudience {
            /** Output only. The display name of the Google audience. . */
            displayName?:
                string;
            /** Output only. The unique ID of the Google audience. Assigned by the system. */
            googleAudienceId?:
                string;
            /** Output only. The type of Google audience. . */
            googleAudienceType?:
                string;
            /** Output only. The resource name of the google audience. */
            name?:
                string;
        }
        interface GoogleAudienceGroup {
            /** Required. All Google audience targeting settings in Google audience group. Repeated settings with same id will be ignored. */
            settings?:
                GoogleAudienceTargetingSetting[];
        }
        interface GoogleAudienceTargetingSetting {
            /** Required. Google audience id of the Google audience targeting setting. This id is google_audience_id. */
            googleAudienceId?:
                string;
        }
        interface GoogleBytestreamMedia {
            /** Name of the media resource. */
            resourceName?:
                string;
        }
        interface GuaranteedOrder {
            /**
             * Output only. The ID of default advertiser of the guaranteed order. The default advertiser is either the read_write_advertiser_id or, if that is not set, the first advertiser listed
             * in read_advertiser_ids. Otherwise, there is no default advertiser.
             */
            defaultAdvertiserId?:
                string;
            /** The ID of the default campaign that is assigned to the guaranteed order. The default campaign must belong to the default advertiser. */
            defaultCampaignId?:
                string;
            /** Required. The display name of the guaranteed order. Must be UTF-8 encoded with a maximum size of 240 bytes. */
            displayName?:
                string;
            /** Required. Immutable. The exchange where the guaranteed order originated. */
            exchange?:
                string;
            /** Output only. The unique identifier of the guaranteed order. The guaranteed order IDs have the format `{exchange}-{legacy_guaranteed_order_id}`. */
            guaranteedOrderId?:
                string;
            /**
             * Output only. The legacy ID of the guaranteed order. Assigned by the original exchange. The legacy ID is unique within one exchange, but is not guaranteed to be unique across all
             * guaranteed orders. This ID is used in SDF and UI.
             */
            legacyGuaranteedOrderId?:
                string;
            /** Output only. The resource name of the guaranteed order. */
            name?:
                string;
            /** Required. The publisher name of the guaranteed order. Must be UTF-8 encoded with a maximum size of 240 bytes. */
            publisherName?:
                string;
            /** Whether all advertisers of read_write_partner_id have read access to the guaranteed order. Only applicable if read_write_partner_id is set. If True, overrides read_advertiser_ids. */
            readAccessInherited?:
                boolean;
            /**
             * The IDs of advertisers with read access to the guaranteed order. This field must not include the advertiser assigned to read_write_advertiser_id if it is set. All advertisers in
             * this field must belong to read_write_partner_id or the same partner as read_write_advertiser_id.
             */
            readAdvertiserIds?:
                string[];
            /** The advertiser with read/write access to the guaranteed order. This is also the default advertiser of the guaranteed order. */
            readWriteAdvertiserId?:
                string;
            /** The partner with read/write access to the guaranteed order. */
            readWritePartnerId?:
                string;
            /** The status settings of the guaranteed order. */
            status?:
                GuaranteedOrderStatus;
            /** Output only. The timestamp when the guaranteed order was last updated. Assigned by the system. */
            updateTime?:
                string;
        }
        interface GuaranteedOrderStatus {
            /**
             * Output only. The configuration status of the guaranteed order. Acceptable values are `PENDING` and `COMPLETED`. A guaranteed order must be configured (fill in the required fields,
             * choose creatives, and select a default campaign) before it can serve. Currently the configuration action can only be performed via UI.
             */
            configStatus?:
                string;
            /**
             * The user-provided reason for pausing this guaranteed order. Must be UTF-8 encoded with a maximum length of 100 bytes. Only applicable when entity_status is set to
             * `ENTITY_STATUS_PAUSED`.
             */
            entityPauseReason?:
                string;
            /**
             * Whether or not the guaranteed order is servable. Acceptable values are `ENTITY_STATUS_ACTIVE`, `ENTITY_STATUS_ARCHIVED`, and `ENTITY_STATUS_PAUSED`. Default value is
             * `ENTITY_STATUS_ACTIVE`.
             */
            entityStatus?:
                string;
        }
        interface HouseholdIncomeAssignedTargetingOptionDetails {
            /** The household income of the audience. Output only in v1. Required in v2. */
            householdIncome?:
                string;
            /** Required. The targeting_option_id of a TargetingOption of type `TARGETING_TYPE_HOUSEHOLD_INCOME`. */
            targetingOptionId?:
                string;
        }
        interface HouseholdIncomeTargetingOptionDetails {
            /** Output only. The household income of an audience. */
            householdIncome?:
                string;
        }
        interface IdFilter {
            /** YouTube Ads to download by ID. All IDs must belong to the same Advertiser or Partner specified in CreateSdfDownloadTaskRequest. */
            adGroupAdIds?:
                string[];
            /** YouTube Ad Groups to download by ID. All IDs must belong to the same Advertiser or Partner specified in CreateSdfDownloadTaskRequest. */
            adGroupIds?:
                string[];
            /** Campaigns to download by ID. All IDs must belong to the same Advertiser or Partner specified in CreateSdfDownloadTaskRequest. */
            campaignIds?:
                string[];
            /** Insertion Orders to download by ID. All IDs must belong to the same Advertiser or Partner specified in CreateSdfDownloadTaskRequest. */
            insertionOrderIds?:
                string[];
            /** Line Items to download by ID. All IDs must belong to the same Advertiser or Partner specified in CreateSdfDownloadTaskRequest. */
            lineItemIds?:
                string[];
            /** Media Products to download by ID. All IDs must belong to the same Advertiser or Partner specified in CreateSdfDownloadTaskRequest. */
            mediaProductIds?:
                string[];
        }
        interface InsertionOrder {
            /** Output only. The unique ID of the advertiser the insertion order belongs to. */
            advertiserId?:
                string;
            /** The bidding strategy of the insertion order. By default, fixed_bid is set. */
            bidStrategy?:
                BiddingStrategy;
            /** Immutable. The billable outcome of the insertion order. */
            billableOutcome?:
                string;
            /** Required. The budget allocation settings of the insertion order. */
            budget?:
                InsertionOrderBudget;
            /** Required. Immutable. The unique ID of the campaign that the insertion order belongs to. */
            campaignId?:
                string;
            /** Required. The display name of the insertion order. Must be UTF-8 encoded with a maximum size of 240 bytes. */
            displayName?:
                string;
            /**
             * Required. Controls whether or not the insertion order can spend its budget and bid on inventory. * For CreateInsertionOrder method, only `ENTITY_STATUS_DRAFT` is allowed. To
             * activate an insertion order, use UpdateInsertionOrder method and update the status to `ENTITY_STATUS_ACTIVE` after creation. * An insertion order cannot be changed back to
             * `ENTITY_STATUS_DRAFT` status from any other status. * An insertion order cannot be set to `ENTITY_STATUS_ACTIVE` if its parent campaign is not active.
             */
            entityStatus?:
                string;
            /** Required. The frequency capping setting of the insertion order. */
            frequencyCap?:
                FrequencyCap;
            /** Output only. The unique ID of the insertion order. Assigned by the system. */
            insertionOrderId?:
                string;
            /** The type of insertion order. If this field is unspecified in creation, the value defaults to `RTB`. */
            insertionOrderType?:
                string;
            /** Additional integration details of the insertion order. */
            integrationDetails?:
                IntegrationDetails;
            /** Output only. The resource name of the insertion order. */
            name?:
                string;
            /** Required. The budget spending speed setting of the insertion order. */
            pacing?:
                Pacing;
            /**
             * The partner costs associated with the insertion order. If absent or empty in CreateInsertionOrder method, the newly created insertion order will inherit partner costs from the
             * partner settings.
             */
            partnerCosts?:
                PartnerCost[];
            /** Required. Performance goal of the insertion order. */
            performanceGoal?:
                PerformanceGoal;
            /** Output only. The reservation type of the insertion order. */
            reservationType?:
                string;
            /** Output only. The timestamp when the insertion order was last updated. Assigned by the system. */
            updateTime?:
                string;
        }
        interface InsertionOrderBudget {
            /** The type of automation used to manage bid and budget for the insertion order. If this field is unspecified in creation, the value defaults to `INSERTION_ORDER_AUTOMATION_TYPE_NONE`. */
            automationType?:
                string;
            /** Required. The list of budget segments. Use a budget segment to specify a specific budget for a given period of time an insertion order is running. */
            budgetSegments?:
                InsertionOrderBudgetSegment[];
            /** Required. Immutable. The budget unit specifies whether the budget is currency based or impression based. */
            budgetUnit?:
                string;
        }
        interface InsertionOrderBudgetSegment {
            /**
             * Required. The budget amount the insertion order will spend for the given date_range. The amount is in micros. Must be greater than 0. For example, 500000000 represents 500 standard
             * units of the currency.
             */
            budgetAmountMicros?:
                string;
            /** The budget_id of the campaign budget that this insertion order budget segment is a part of. */
            campaignBudgetId?:
                string;
            /**
             * Required. The start and end date settings of the budget segment. They are resolved relative to the parent advertiser's time zone. * When creating a new budget segment, both
             * `start_date` and `end_date` must be in the future. * An existing budget segment with a `start_date` in the past has a mutable `end_date` but an immutable `start_date`. * `end_date`
             * must be the `start_date` or later, both before the year 2037.
             */
            dateRange?:
                DateRange;
            /** The budget segment description. It can be used to enter Purchase Order information for each budget segment and have that information printed on the invoices. Must be UTF-8 encoded. */
            description?:
                string;
        }
        interface IntegralAdScience {
            /** The custom segment ID provided by Integral Ad Science. The ID must be between `1000001` and `1999999`, inclusive. */
            customSegmentId?:
                string[];
            /** Display Viewability section (applicable to display line items only). */
            displayViewability?:
                string;
            /** Ad Fraud settings. */
            excludedAdFraudRisk?:
                string;
            /** Brand Safety - **Adult content**. */
            excludedAdultRisk?:
                string;
            /** Brand Safety - **Alcohol**. */
            excludedAlcoholRisk?:
                string;
            /** Brand Safety - **Drugs**. */
            excludedDrugsRisk?:
                string;
            /** Brand Safety - **Gambling**. */
            excludedGamblingRisk?:
                string;
            /** Brand Safety - **Hate speech**. */
            excludedHateSpeechRisk?:
                string;
            /** Brand Safety - **Illegal downloads**. */
            excludedIllegalDownloadsRisk?:
                string;
            /** Brand Safety - **Offensive language**. */
            excludedOffensiveLanguageRisk?:
                string;
            /** Brand Safety - **Violence**. */
            excludedViolenceRisk?:
                string;
            /** Brand Safety - **Unrateable**. */
            excludeUnrateable?:
                boolean;
            /** True advertising quality (applicable to Display line items only). */
            traqScoreOption?:
                string;
            /** Video Viewability Section (applicable to video line items only). */
            videoViewability?:
                string;
        }
        interface IntegrationDetails {
            /** Additional details of the entry in string format. Must be UTF-8 encoded with a length of no more than 1000 characters. */
            details?:
                string;
            /**
             * An external identifier to be associated with the entry. The integration code will show up together with the entry in many places in the system, for example, reporting. Must be UTF-8
             * encoded with a length of no more than 500 characters.
             */
            integrationCode?:
                string;
        }
        interface InventorySource {
            /** Whether the inventory source has a guaranteed or non-guaranteed delivery. */
            commitment?:
                string;
            /** The creative requirements of the inventory source. Not applicable for auction packages. */
            creativeConfigs?:
                CreativeConfig[];
            /** The ID in the exchange space that uniquely identifies the inventory source. Must be unique across buyers within each exchange but not necessarily unique across exchanges. */
            dealId?:
                string;
            /**
             * The delivery method of the inventory source. * For non-guaranteed inventory sources, the only acceptable value is `INVENTORY_SOURCE_DELIVERY_METHOD_PROGRAMMATIC`. * For guaranteed
             * inventory sources, acceptable values are `INVENTORY_SOURCE_DELIVERY_METHOD_TAG` and `INVENTORY_SOURCE_DELIVERY_METHOD_PROGRAMMATIC`.
             */
            deliveryMethod?:
                string;
            /** The display name of the inventory source. Must be UTF-8 encoded with a maximum size of 240 bytes. */
            displayName?:
                string;
            /** The exchange to which the inventory source belongs. */
            exchange?:
                string;
            /** Immutable. The ID of the guaranteed order that this inventory source belongs to. Only applicable when commitment is `INVENTORY_SOURCE_COMMITMENT_GUARANTEED`. */
            guaranteedOrderId?:
                string;
            /** Output only. The unique ID of the inventory source. Assigned by the system. */
            inventorySourceId?:
                string;
            /** Output only. The product type of the inventory source, denoting the way through which it sells inventory. */
            inventorySourceProductType?:
                string;
            /** Denotes the type of the inventory source. */
            inventorySourceType?:
                string;
            /** Output only. The resource name of the inventory source. */
            name?:
                string;
            /** The publisher/seller name of the inventory source. */
            publisherName?:
                string;
            /** Required. The rate details of the inventory source. */
            rateDetails?:
                RateDetails;
            /** Output only. The IDs of advertisers with read-only access to the inventory source. */
            readAdvertiserIds?:
                string[];
            /** Output only. The IDs of partners with read-only access to the inventory source. All advertisers of partners in this field inherit read-only access to the inventory source. */
            readPartnerIds?:
                string[];
            /**
             * The partner or advertisers that have read/write access to the inventory source. Output only when commitment is `INVENTORY_SOURCE_COMMITMENT_GUARANTEED`, in which case the read/write
             * accessors are inherited from the parent guaranteed order. Required when commitment is `INVENTORY_SOURCE_COMMITMENT_NON_GUARANTEED`. If commitment is
             * `INVENTORY_SOURCE_COMMITMENT_NON_GUARANTEED` and a partner is set in this field, all advertisers under this partner will automatically have read-only access to the inventory source.
             * These advertisers will not be included in read_advertiser_ids.
             */
            readWriteAccessors?:
                InventorySourceAccessors;
            /** The status settings of the inventory source. */
            status?:
                InventorySourceStatus;
            /** Immutable. The unique ID of the sub-site property assigned to this inventory source. */
            subSitePropertyId?:
                string;
            /** The time range when this inventory source starts and stops serving. */
            timeRange?:
                TimeRange;
            /** Output only. The timestamp when the inventory source was last updated. Assigned by the system. */
            updateTime?:
                string;
        }
        interface InventorySourceAccessors {
            /** The advertisers with access to the inventory source. All advertisers must belong to the same partner. */
            advertisers?:
                InventorySourceAccessorsAdvertiserAccessors;
            /** The partner with access to the inventory source. */
            partner?:
                InventorySourceAccessorsPartnerAccessor;
        }
        interface InventorySourceAccessorsAdvertiserAccessors {
            /** The IDs of the advertisers. */
            advertiserIds?:
                string[];
        }
        interface InventorySourceAccessorsPartnerAccessor {
            /** The ID of the partner. */
            partnerId?:
                string;
        }
        interface InventorySourceAssignedTargetingOptionDetails {
            /** Required. ID of the inventory source. Should refer to the inventory_source_id field of an InventorySource resource. */
            inventorySourceId?:
                string;
        }
        interface InventorySourceDisplayCreativeConfig {
            /** The size requirements for display creatives that can be assigned to the inventory source. */
            creativeSize?:
                Dimensions;
        }
        interface InventorySourceFilter {
            /**
             * Inventory Sources to download by ID. All IDs must belong to the same Advertiser or Partner specified in CreateSdfDownloadTaskRequest. Leave empty to download all Inventory Sources
             * for the selected Advertiser or Partner.
             */
            inventorySourceIds?:
                string[];
        }
        interface InventorySourceGroup {
            /** Required. The display name of the inventory source group. Must be UTF-8 encoded with a maximum size of 240 bytes. */
            displayName?:
                string;
            /** Output only. The unique ID of the inventory source group. Assigned by the system. */
            inventorySourceGroupId?:
                string;
            /** Output only. The resource name of the inventory source group. */
            name?:
                string;
        }
        interface InventorySourceGroupAssignedTargetingOptionDetails {
            /** Required. ID of the inventory source group. Should refer to the inventory_source_group_id field of an InventorySourceGroup resource. */
            inventorySourceGroupId?:
                string;
        }
        interface InventorySourceStatus {
            /**
             * Output only. The configuration status of the inventory source. Only applicable for guaranteed inventory sources. Acceptable values are `INVENTORY_SOURCE_CONFIG_STATUS_PENDING` and
             * `INVENTORY_SOURCE_CONFIG_STATUS_COMPLETED`. An inventory source must be configured (fill in the required fields, choose creatives, and select a default campaign) before it can
             * serve.
             */
            configStatus?:
                string;
            /** The user-provided reason for pausing this inventory source. Must not exceed 100 characters. Only applicable when entity_status is set to `ENTITY_STATUS_PAUSED`. */
            entityPauseReason?:
                string;
            /**
             * Whether or not the inventory source is servable. Acceptable values are `ENTITY_STATUS_ACTIVE`, `ENTITY_STATUS_ARCHIVED`, and `ENTITY_STATUS_PAUSED`. Default value is
             * `ENTITY_STATUS_ACTIVE`.
             */
            entityStatus?:
                string;
            /**
             * Output only. The seller-provided reason for pausing this inventory source. Only applicable for inventory sources synced directly from the publishers and when seller_status is set to
             * `ENTITY_STATUS_PAUSED`.
             */
            sellerPauseReason?:
                string;
            /**
             * Output only. The status set by the seller for the inventory source. Only applicable for inventory sources synced directly from the publishers. Acceptable values are
             * `ENTITY_STATUS_ACTIVE` and `ENTITY_STATUS_PAUSED`.
             */
            sellerStatus?:
                string;
        }
        interface InventorySourceVideoCreativeConfig {
            /** The duration requirements for the video creatives that can be assigned to the inventory source. */
            duration?:
                string;
        }
        interface Invoice {
            /** The budget grouping ID for this invoice. This field will only be set if the invoice level of the corresponding billing profile was set to "Budget invoice grouping ID". */
            budgetInvoiceGroupingId?:
                string;
            /**
             * The list of summarized information for each budget associated with this invoice. This field will only be set if the invoice detail level of the corresponding billing profile was set
             * to "Budget level PO".
             */
            budgetSummaries?:
                BudgetSummary[];
            /**
             * The ID of the original invoice being adjusted by this invoice, if applicable. May appear on the invoice PDF as `Reference invoice number`. If replaced_invoice_ids is set, this field
             * will be empty.
             */
            correctedInvoiceId?:
                string;
            /** The currency used in the invoice in ISO 4217 format. */
            currencyCode?:
                string;
            /** The display name of the invoice. */
            displayName?:
                string;
            /** The date when the invoice is due. */
            dueDate?:
                Date;
            /** The unique ID of the invoice. */
            invoiceId?:
                string;
            /** The type of invoice document. */
            invoiceType?:
                string;
            /** The date when the invoice was issued. */
            issueDate?:
                Date;
            /** The resource name of the invoice. */
            name?:
                string;
            /**
             * The total amount of costs or adjustments not tied to a particular budget, in micros of the invoice's currency. For example, if currency_code is `USD`, then 1000000 represents one US
             * dollar.
             */
            nonBudgetMicros?:
                string;
            /** The ID of the payments account the invoice belongs to. Appears on the invoice PDF as `Billing Account Number`. */
            paymentsAccountId?:
                string;
            /** The ID of the payments profile the invoice belongs to. Appears on the invoice PDF as `Billing ID`. */
            paymentsProfileId?:
                string;
            /**
             * The URL to download a PDF copy of the invoice. This URL is user specific and requires a valid OAuth 2.0 access token to access. The access token must be provided in an
             * `Authorization: Bearer` HTTP header and be authorized for one of the following scopes: * `https://www.googleapis.com/auth/display-video-mediaplanning` *
             * `https://www.googleapis.com/auth/display-video` The URL will be valid for 7 days after retrieval of this invoice object or until this invoice is retrieved again.
             */
            pdfUrl?:
                string;
            /** Purchase order number associated with the invoice. */
            purchaseOrderNumber?:
                string;
            /**
             * The ID(s) of any originally issued invoice that is being cancelled by this invoice, if applicable. Multiple invoices may be listed if those invoices are being consolidated into a
             * single invoice. May appear on invoice PDF as `Replaced invoice numbers`. If corrected_invoice_id is set, this field will be empty.
             */
            replacedInvoiceIds?:
                string[];
            /** The service start and end dates which are covered by this invoice. */
            serviceDateRange?:
                DateRange;
            /** The pre-tax subtotal amount, in micros of the invoice's currency. For example, if currency_code is `USD`, then 1000000 represents one US dollar. */
            subtotalAmountMicros?:
                string;
            /** The invoice total amount, in micros of the invoice's currency. For example, if currency_code is `USD`, then 1000000 represents one US dollar. */
            totalAmountMicros?:
                string;
            /** The sum of all taxes in invoice, in micros of the invoice's currency. For example, if currency_code is `USD`, then 1000000 represents one US dollar. */
            totalTaxAmountMicros?:
                string;
        }
        interface KeywordAssignedTargetingOptionDetails {
            /**
             * Required. The keyword, for example `car insurance`. Positive keyword cannot be offensive word. Must be UTF-8 encoded with a maximum size of 255 bytes. Maximum number of characters
             * is 80. Maximum number of words is 10.
             */
            keyword?:
                string;
            /** Indicates if this option is being negatively targeted. */
            negative?:
                boolean;
        }
        interface LanguageAssignedTargetingOptionDetails {
            /** Output only. The display name of the language (e.g., "French"). */
            displayName?:
                string;
            /** Indicates if this option is being negatively targeted. All assigned language targeting options on the same resource must have the same value for this field. */
            negative?:
                boolean;
            /** Required. The targeting_option_id of a TargetingOption of type `TARGETING_TYPE_LANGUAGE`. */
            targetingOptionId?:
                string;
        }
        interface LanguageTargetingOptionDetails {
            /** Output only. The display name of the language (e.g., "French"). */
            displayName?:
                string;
        }
        interface LineItem {
            /** Output only. The unique ID of the advertiser the line item belongs to. */
            advertiserId?:
                string;
            /** Required. The bidding strategy of the line item. */
            bidStrategy?:
                BiddingStrategy;
            /** Required. The budget allocation setting of the line item. */
            budget?:
                LineItemBudget;
            /** Output only. The unique ID of the campaign that the line item belongs to. */
            campaignId?:
                string;
            /** The conversion tracking setting of the line item. */
            conversionCounting?:
                ConversionCountingConfig;
            /** The IDs of the creatives associated with the line item. */
            creativeIds?:
                string[];
            /** Required. The display name of the line item. Must be UTF-8 encoded with a maximum size of 240 bytes. */
            displayName?:
                string;
            /**
             * Required. Controls whether or not the line item can spend its budget and bid on inventory. * For CreateLineItem method, only `ENTITY_STATUS_DRAFT` is allowed. To activate a line
             * item, use UpdateLineItem method and update the status to `ENTITY_STATUS_ACTIVE` after creation. * A line item cannot be changed back to `ENTITY_STATUS_DRAFT` status from any other
             * status. * If the line item's parent insertion order is not active, the line item can't spend its budget even if its own status is `ENTITY_STATUS_ACTIVE`.
             */
            entityStatus?:
                string;
            /** Whether to exclude new exchanges from automatically being targeted by the line item. This field is false by default. */
            excludeNewExchanges?:
                boolean;
            /** Required. The start and end time of the line item's flight. */
            flight?:
                LineItemFlight;
            /** Required. The impression frequency cap settings of the line item. The max_impressions field in this settings object must be used if assigning a limited cap. */
            frequencyCap?:
                FrequencyCap;
            /** Required. Immutable. The unique ID of the insertion order that the line item belongs to. */
            insertionOrderId?:
                string;
            /** Integration details of the line item. */
            integrationDetails?:
                IntegrationDetails;
            /** The IDs of the private inventory sources assigned to the line item. */
            inventorySourceIds?:
                string[];
            /** Output only. The unique ID of the line item. Assigned by the system. */
            lineItemId?:
                string;
            /** Required. Immutable. The type of the line item. */
            lineItemType?:
                string;
            /**
             * The mobile app promoted by the line item. This is applicable only when line_item_type is either `LINE_ITEM_TYPE_DISPLAY_MOBILE_APP_INSTALL` or
             * `LINE_ITEM_TYPE_VIDEO_MOBILE_APP_INSTALL`.
             */
            mobileApp?:
                MobileApp;
            /** Output only. The resource name of the line item. */
            name?:
                string;
            /** Required. The budget spending speed setting of the line item. */
            pacing?:
                Pacing;
            /** The partner costs associated with the line item. If absent or empty in CreateLineItem method, the newly created line item will inherit partner costs from its parent insertion order. */
            partnerCosts?:
                PartnerCost[];
            /** Required. The partner revenue model setting of the line item. */
            partnerRevenueModel?:
                PartnerRevenueModel;
            /** Output only. The reservation type of the line item. */
            reservationType?:
                string;
            /**
             * The [optimized targeting](//support.google.com/displayvideo/answer/12060859) settings of the line item. This config is only applicable for display, video, or audio line items that
             * use automated bidding and positively target eligible audience lists.
             */
            targetingExpansion?:
                TargetingExpansionConfig;
            /** Output only. The timestamp when the line item was last updated. Assigned by the system. */
            updateTime?:
                string;
            /** Output only. The warning messages generated by the line item. These warnings do not block saving the line item, but some may block the line item from running. */
            warningMessages?:
                string[];
        }
        interface LineItemBudget {
            /**
             * Required. The type of the budget allocation. `LINE_ITEM_BUDGET_ALLOCATION_TYPE_AUTOMATIC` is only applicable when automatic budget allocation is enabled for the parent insertion
             * order.
             */
            budgetAllocationType?:
                string;
            /** Output only. The budget unit specifies whether the budget is currency based or impression based. This value is inherited from the parent insertion order. */
            budgetUnit?:
                string;
            /**
             * The maximum budget amount the line item will spend. Must be greater than 0. When budget_allocation_type is: * `LINE_ITEM_BUDGET_ALLOCATION_TYPE_AUTOMATIC`, this field is immutable
             * and is set by the system. * `LINE_ITEM_BUDGET_ALLOCATION_TYPE_FIXED`, if budget_unit is: - `BUDGET_UNIT_CURRENCY`, this field represents maximum budget amount to spend, in micros of
             * the advertiser's currency. For example, 1500000 represents 1.5 standard units of the currency. - `BUDGET_UNIT_IMPRESSIONS`, this field represents the maximum number of impressions
             * to serve. * `LINE_ITEM_BUDGET_ALLOCATION_TYPE_UNLIMITED`, this field is not applicable and will be ignored by the system.
             */
            maxAmount?:
                string;
        }
        interface LineItemFlight {
            /**
             * The flight start and end dates of the line item. They are resolved relative to the parent advertiser's time zone. * Required when flight_date_type is
             * `LINE_ITEM_FLIGHT_DATE_TYPE_CUSTOM`. Output only otherwise. * When creating a new flight, both `start_date` and `end_date` must be in the future. * An existing flight with a
             * `start_date` in the past has a mutable `end_date` but an immutable `start_date`. * `end_date` must be the `start_date` or later, both before the year 2037.
             */
            dateRange?:
                DateRange;
            /** Required. The type of the line item's flight dates. */
            flightDateType?:
                string;
            /**
             * The ID of the manual trigger associated with the line item. * Required when flight_date_type is `LINE_ITEM_FLIGHT_DATE_TYPE_TRIGGER`. Must not be set otherwise. * When set, the line
             * item's flight dates are inherited from its parent insertion order. * Active line items will spend when the selected trigger is activated within the parent insertion order's flight
             * dates. **Warning:** Line Items using manual triggers no longer serve in Display & Video 360. This field will sunset on August 1, 2023. Read our [feature deprecation
             * announcement](/display-video/api/deprecations#features.manual_triggers) for more information.
             */
            triggerId?:
                string;
        }
        interface ListAdvertiserAssignedTargetingOptionsResponse {
            /** The list of assigned targeting options. This list will be absent if empty. */
            assignedTargetingOptions?:
                AssignedTargetingOption[];
            /**
             * A token identifying the next page of results. This value should be specified as the pageToken in a subsequent ListAdvertiserAssignedTargetingOptionsRequest to fetch the next page of
             * results. This token will be absent if there are no more assigned_targeting_options to return.
             */
            nextPageToken?:
                string;
        }
        interface ListAdvertisersResponse {
            /** The list of advertisers. This list will be absent if empty. */
            advertisers?:
                Advertiser[];
            /** A token to retrieve the next page of results. Pass this value in the page_token field in the subsequent call to `ListAdvertisers` method to retrieve the next page of results. */
            nextPageToken?:
                string;
        }
        interface ListAssignedInventorySourcesResponse {
            /** The list of assigned inventory sources. This list will be absent if empty. */
            assignedInventorySources?:
                AssignedInventorySource[];
            /**
             * A token to retrieve the next page of results. Pass this value in the page_token field in the subsequent call to `ListAssignedInventorySources` method to retrieve the next page of
             * results.
             */
            nextPageToken?:
                string;
        }
        interface ListAssignedLocationsResponse {
            /** The list of assigned locations. This list will be absent if empty. */
            assignedLocations?:
                AssignedLocation[];
            /** A token to retrieve the next page of results. Pass this value in the page_token field in the subsequent call to `ListAssignedLocations` method to retrieve the next page of results. */
            nextPageToken?:
                string;
        }
        interface ListCampaignAssignedTargetingOptionsResponse {
            /** The list of assigned targeting options. This list will be absent if empty. */
            assignedTargetingOptions?:
                AssignedTargetingOption[];
            /**
             * A token identifying the next page of results. This value should be specified as the pageToken in a subsequent ListCampaignAssignedTargetingOptionsRequest to fetch the next page of
             * results. This token will be absent if there are no more assigned_targeting_options to return.
             */
            nextPageToken?:
                string;
        }
        interface ListCampaignsResponse {
            /** The list of campaigns. This list will be absent if empty. */
            campaigns?:
                Campaign[];
            /** A token to retrieve the next page of results. Pass this value in the page_token field in the subsequent call to `ListCampaigns` method to retrieve the next page of results. */
            nextPageToken?:
                string;
        }
        interface ListChannelsResponse {
            /** The list of channels. This list will be absent if empty. */
            channels?:
                Channel[];
            /** A token to retrieve the next page of results. Pass this value in the page_token field in the subsequent call to `ListChannels` method to retrieve the next page of results. */
            nextPageToken?:
                string;
        }
        interface ListCombinedAudiencesResponse {
            /** The list of combined audiences. This list will be absent if empty. */
            combinedAudiences?:
                CombinedAudience[];
            /** A token to retrieve the next page of results. Pass this value in the page_token field in the subsequent call to `ListCombinedAudiences` method to retrieve the next page of results. */
            nextPageToken?:
                string;
        }
        interface ListCreativesResponse {
            /** The list of creatives. This list will be absent if empty. */
            creatives?:
                Creative[];
            /**
             * A token to retrieve the next page of results. Pass this value in the page_token field in the subsequent call to `ListCreativesRequest` method to retrieve the next page of results.
             * If this field is null, it means this is the last page.
             */
            nextPageToken?:
                string;
        }
        interface ListCustomBiddingAlgorithmsResponse {
            /** The list of custom bidding algorithms. This list will be absent if empty. */
            customBiddingAlgorithms?:
                CustomBiddingAlgorithm[];
            /**
             * A token to retrieve the next page of results. Pass this value in the page_token field in the subsequent call to `ListCustomBiddingAlgorithmsRequest` method to retrieve the next page
             * of results. If this field is null, it means this is the last page.
             */
            nextPageToken?:
                string;
        }
        interface ListCustomBiddingScriptsResponse {
            /** The list of custom bidding scripts. This list will be absent if empty. */
            customBiddingScripts?:
                CustomBiddingScript[];
            /**
             * A token to retrieve the next page of results. Pass this value in the page_token field in the subsequent call to `ListCustomBiddingScriptsRequest` method to retrieve the next page of
             * results. If this field is null, it means this is the last page.
             */
            nextPageToken?:
                string;
        }
        interface ListCustomListsResponse {
            /** The list of custom lists. This list will be absent if empty. */
            customLists?:
                CustomList[];
            /** A token to retrieve the next page of results. Pass this value in the page_token field in the subsequent call to `ListCustomLists` method to retrieve the next page of results. */
            nextPageToken?:
                string;
        }
        interface ListFirstAndThirdPartyAudiencesResponse {
            /** The list of first and third party audiences. Audience size properties will not be included. This list will be absent if empty. */
            firstAndThirdPartyAudiences?:
                FirstAndThirdPartyAudience[];
            /**
             * A token to retrieve the next page of results. Pass this value in the page_token field in the subsequent call to `ListFirstAndThirdPartyAudiences` method to retrieve the next page of
             * results.
             */
            nextPageToken?:
                string;
        }
        interface ListGoogleAudiencesResponse {
            /** The list of Google audiences. This list will be absent if empty. */
            googleAudiences?:
                GoogleAudience[];
            /** A token to retrieve the next page of results. Pass this value in the page_token field in the subsequent call to `ListGoogleAudiences` method to retrieve the next page of results. */
            nextPageToken?:
                string;
        }
        interface ListGuaranteedOrdersResponse {
            /** The list of guaranteed orders. This list will be absent if empty. */
            guaranteedOrders?:
                GuaranteedOrder[];
            /** A token to retrieve the next page of results. Pass this value in the page_token field in the subsequent call to `ListGuaranteedOrders` method to retrieve the next page of results. */
            nextPageToken?:
                string;
        }
        interface ListInsertionOrderAssignedTargetingOptionsResponse {
            /** The list of assigned targeting options. This list will be absent if empty. */
            assignedTargetingOptions?:
                AssignedTargetingOption[];
            /**
             * A token identifying the next page of results. This value should be specified as the pageToken in a subsequent ListInsertionOrderAssignedTargetingOptionsRequest to fetch the next
             * page of results. This token will be absent if there are no more assigned_targeting_options to return.
             */
            nextPageToken?:
                string;
        }
        interface ListInsertionOrdersResponse {
            /** The list of insertion orders. This list will be absent if empty. */
            insertionOrders?:
                InsertionOrder[];
            /** A token to retrieve the next page of results. Pass this value in the page_token field in the subsequent call to `ListInsertionOrders` method to retrieve the next page of results. */
            nextPageToken?:
                string;
        }
        interface ListInventorySourceGroupsResponse {
            /** The list of inventory source groups. This list will be absent if empty. */
            inventorySourceGroups?:
                InventorySourceGroup[];
            /**
             * A token to retrieve the next page of results. Pass this value in the page_token field in the subsequent call to `ListInventorySourceGroups` method to retrieve the next page of
             * results.
             */
            nextPageToken?:
                string;
        }
        interface ListInventorySourcesResponse {
            /** The list of inventory sources. This list will be absent if empty. */
            inventorySources?:
                InventorySource[];
            /** A token to retrieve the next page of results. Pass this value in the page_token field in the subsequent call to `ListInventorySources` method to retrieve the next page of results. */
            nextPageToken?:
                string;
        }
        interface ListInvoicesResponse {
            /** The list of invoices. This list will be absent if empty. */
            invoices?:
                Invoice[];
            /**
             * A token to retrieve the next page of results. Pass this value in the page_token field in the subsequent call to `ListInvoices` method to retrieve the next page of results. This
             * token will be absent if there are no more invoices to return.
             */
            nextPageToken?:
                string;
        }
        interface ListLineItemAssignedTargetingOptionsResponse {
            /** The list of assigned targeting options. This list will be absent if empty. */
            assignedTargetingOptions?:
                AssignedTargetingOption[];
            /**
             * A token identifying the next page of results. This value should be specified as the pageToken in a subsequent ListLineItemAssignedTargetingOptionsRequest to fetch the next page of
             * results. This token will be absent if there are no more assigned_targeting_options to return.
             */
            nextPageToken?:
                string;
        }
        interface ListLineItemsResponse {
            /** The list of line items. This list will be absent if empty. */
            lineItems?:
                LineItem[];
            /** A token to retrieve the next page of results. Pass this value in the page_token field in the subsequent call to `ListLineItems` method to retrieve the next page of results. */
            nextPageToken?:
                string;
        }
        interface ListLocationListsResponse {
            /** The list of location lists. This list will be absent if empty. */
            locationLists?:
                LocationList[];
            /** A token to retrieve the next page of results. Pass this value in the page_token field in the subsequent call to `ListLocationLists` method to retrieve the next page of results. */
            nextPageToken?:
                string;
        }
        interface ListManualTriggersResponse {
            /** The list of manual triggers. This list will be absent if empty. */
            manualTriggers?:
                ManualTrigger[];
            /** A token to retrieve the next page of results. Pass this value in the page_token field in the subsequent call to `ListManualTriggers` method to retrieve the next page of results. */
            nextPageToken?:
                string;
        }
        interface ListNegativeKeywordListsResponse {
            /** The list of negative keyword lists. This list will be absent if empty. */
            negativeKeywordLists?:
                NegativeKeywordList[];
            /**
             * A token to retrieve the next page of results. Pass this value in the page_token field in the subsequent call to `ListNegativeKeywordLists` method to retrieve the next page of
             * results.
             */
            nextPageToken?:
                string;
        }
        interface ListNegativeKeywordsResponse {
            /** The list of negative keywords. This list will be absent if empty. */
            negativeKeywords?:
                NegativeKeyword[];
            /** A token to retrieve the next page of results. Pass this value in the page_token field in the subsequent call to `ListNegativeKeywords` method to retrieve the next page of results. */
            nextPageToken?:
                string;
        }
        interface ListPartnerAssignedTargetingOptionsResponse {
            /** The list of assigned targeting options. This list will be absent if empty. */
            assignedTargetingOptions?:
                AssignedTargetingOption[];
            /**
             * A token identifying the next page of results. This value should be specified as the pageToken in a subsequent ListPartnerAssignedTargetingOptionsRequest to fetch the next page of
             * results. This token will be absent if there are no more assigned_targeting_options to return.
             */
            nextPageToken?:
                string;
        }
        interface ListPartnersResponse {
            /** A token to retrieve the next page of results. Pass this value in the page_token field in the subsequent call to `ListPartners` method to retrieve the next page of results. */
            nextPageToken?:
                string;
            /** The list of partners. This list will be absent if empty. */
            partners?:
                Partner[];
        }
        interface ListSitesResponse {
            /** A token to retrieve the next page of results. Pass this value in the page_token field in the subsequent call to `ListSites` method to retrieve the next page of results. */
            nextPageToken?:
                string;
            /** The list of sites. This list will be absent if empty. */
            sites?:
                Site[];
        }
        interface ListTargetingOptionsResponse {
            /** A token to retrieve the next page of results. Pass this value in the page_token field in the subsequent call to `ListTargetingOptions` method to retrieve the next page of results. */
            nextPageToken?:
                string;
            /** The list of targeting options. This list will be absent if empty. */
            targetingOptions?:
                TargetingOption[];
        }
        interface ListUsersResponse {
            /**
             * A token to retrieve the next page of results. Pass this value in the page_token field in the subsequent call to `ListUsers` method to retrieve the next page of results. This token
             * will be absent if there are no more results to return.
             */
            nextPageToken?:
                string;
            /** The list of users. This list will be absent if empty. */
            users?:
                User[];
        }
        interface LocationList {
            /** Required. Immutable. The unique ID of the advertiser the location list belongs to. */
            advertiserId?:
                string;
            /** Required. The display name of the location list. Must be UTF-8 encoded with a maximum size of 240 bytes. */
            displayName?:
                string;
            /** Output only. The unique ID of the location list. Assigned by the system. */
            locationListId?:
                string;
            /** Required. Immutable. The type of location. All locations in the list will share this type. */
            locationType?:
                string;
            /** Output only. The resource name of the location list. */
            name?:
                string;
        }
        interface LookbackWindow {
            /** Lookback window, in days, from the last time a given user clicked on one of your ads. */
            clickDays?:
                number;
            /** Lookback window, in days, from the last time a given user viewed one of your ads. */
            impressionDays?:
                number;
        }
        interface LookupInvoiceCurrencyResponse {
            /** Currency used by the advertiser in ISO 4217 format. */
            currencyCode?:
                string;
        }
        interface ManualTrigger {
            /** Required. The maximum duration of each activation in minutes. Must be between 1 and 360 inclusive. After this duration, the trigger will be automatically deactivated. */
            activationDurationMinutes?:
                string;
            /** Required. Immutable. The unique ID of the advertiser that the manual trigger belongs to. */
            advertiserId?:
                string;
            /** Required. The display name of the manual trigger. Must be UTF-8 encoded with a maximum size of 240 bytes. */
            displayName?:
                string;
            /** Output only. The timestamp of the trigger's latest activation. */
            latestActivationTime?:
                string;
            /** Output only. The resource name of the manual trigger. */
            name?:
                string;
            /** Output only. The state of the manual trigger. Will be set to the `INACTIVE` state upon creation. */
            state?:
                string;
            /** Output only. The unique ID of the manual trigger. */
            triggerId?:
                string;
        }
        interface MaximizeSpendBidStrategy {
            /** The ID of the Custom Bidding Algorithm used by this strategy. Only applicable when performance_goal_type is set to `BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_CUSTOM_ALGO`. */
            customBiddingAlgorithmId?:
                string;
            /**
             * The maximum average CPM that may be bid, in micros of the advertiser's currency. Must be greater than or equal to a billable unit of the given currency. For example, 1500000
             * represents 1.5 standard units of the currency.
             */
            maxAverageCpmBidAmountMicros?:
                string;
            /**
             * Required. The type of the performance goal that the bidding strategy tries to minimize while spending the full budget. `BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_VIEWABLE_CPM` is not
             * supported for this strategy.
             */
            performanceGoalType?:
                string;
            /** Whether the strategy takes deal floor prices into account. */
            raiseBidForDeals?:
                boolean;
        }
        interface MeasurementConfig {
            /** Whether or not to report DV360 cost to CM360. */
            dv360ToCmCostReportingEnabled?:
                boolean;
            /** Whether or not to include DV360 data in CM360 data transfer reports. */
            dv360ToCmDataSharingEnabled?:
                boolean;
        }
        interface MobileApp {
            /**
             * Required. The ID of the app provided by the platform store. Android apps are identified by the bundle ID used by Android's Play store, such as `com.google.android.gm`. iOS apps are
             * identified by a nine-digit app ID used by Apple's App store, such as `422689480`.
             */
            appId?:
                string;
            /** Output only. The app name. */
            displayName?:
                string;
            /** Output only. The app platform. */
            platform?:
                string;
            /** Output only. The app publisher. */
            publisher?:
                string;
        }
        interface MobileDeviceIdList {
            /** A list of mobile device IDs defining Customer Match audience members. The size of mobile_device_ids mustn't be greater than 500,000. */
            mobileDeviceIds?:
                string[];
        }
        interface Money {
            /** The three-letter currency code defined in ISO 4217. */
            currencyCode?:
                string;
            /**
             * Number of nano (10^-9) units of the amount. The value must be between -999,999,999 and +999,999,999 inclusive. If `units` is positive, `nanos` must be positive or zero. If `units`
             * is zero, `nanos` can be positive, zero, or negative. If `units` is negative, `nanos` must be negative or zero. For example $-1.75 is represented as `units`=-1 and
             * `nanos`=-750,000,000.
             */
            nanos?:
                number;
            /** The whole units of the amount. For example if `currencyCode` is `"USD"`, then 1 unit is one US dollar. */
            units?:
                string;
        }
        interface NativeContentPositionAssignedTargetingOptionDetails {
            /** The content position. Output only in v1. Required in v2. */
            contentPosition?:
                string;
            /** Required. The targeting_option_id field when targeting_type is `TARGETING_TYPE_NATIVE_CONTENT_POSITION`. */
            targetingOptionId?:
                string;
        }
        interface NativeContentPositionTargetingOptionDetails {
            /** Output only. The content position. */
            contentPosition?:
                string;
        }
        interface NegativeKeyword {
            /**
             * Required. Immutable. The negatively targeted keyword, for example `car insurance`. Must be UTF-8 encoded with a maximum size of 255 bytes. Maximum number of characters is 80.
             * Maximum number of words is 10. Valid characters are restricted to ASCII characters only. The only URL-escaping permitted is for representing whitespace between words. Leading or
             * trailing whitespace is ignored.
             */
            keywordValue?:
                string;
            /** Output only. The resource name of the negative keyword. */
            name?:
                string;
        }
        interface NegativeKeywordList {
            /** Output only. The unique ID of the advertiser the negative keyword list belongs to. */
            advertiserId?:
                string;
            /** Required. The display name of the negative keyword list. Must be UTF-8 encoded with a maximum size of 255 bytes. */
            displayName?:
                string;
            /** Output only. The resource name of the negative keyword list. */
            name?:
                string;
            /** Output only. The unique ID of the negative keyword list. Assigned by the system. */
            negativeKeywordListId?:
                string;
            /** Output only. Number of line items that are directly targeting this negative keyword list. */
            targetedLineItemCount?:
                string;
        }
        interface NegativeKeywordListAssignedTargetingOptionDetails {
            /** Required. ID of the negative keyword list. Should refer to the negative_keyword_list_id field of a NegativeKeywordList resource. */
            negativeKeywordListId?:
                string;
        }
        interface ObaIcon {
            /** Required. The click tracking URL of the OBA icon. Only URLs of the following domains are allowed: * https://info.evidon.com * https://l.betrad.com */
            clickTrackingUrl?:
                string;
            /** The dimensions of the OBA icon. */
            dimensions?:
                Dimensions;
            /** Required. The landing page URL of the OBA icon. Only URLs of the following domains are allowed: * https://info.evidon.com * https://l.betrad.com */
            landingPageUrl?:
                string;
            /** The position of the OBA icon on the creative. */
            position?:
                string;
            /** The program of the OBA icon. For example: “AdChoices”. */
            program?:
                string;
            /** The MIME type of the OBA icon resource. */
            resourceMimeType?:
                string;
            /** The URL of the OBA icon resource. */
            resourceUrl?:
                string;
            /** Required. The view tracking URL of the OBA icon. Only URLs of the following domains are allowed: * https://info.evidon.com * https://l.betrad.com */
            viewTrackingUrl?:
                string;
        }
        interface OmidAssignedTargetingOptionDetails {
            /** The type of Open Measurement enabled inventory. Output only in v1. Required in v2. */
            omid?:
                string;
            /** Required. The targeting_option_id of a TargetingOption of type `TARGETING_TYPE_OMID`. */
            targetingOptionId?:
                string;
        }
        interface OmidTargetingOptionDetails {
            /** Output only. The type of Open Measurement enabled inventory. */
            omid?:
                string;
        }
        interface OnScreenPositionAssignedTargetingOptionDetails {
            /**
             * Output only. The ad type to target. Only applicable to insertion order targeting and new line items supporting the specified ad type will inherit this targeting option by default.
             * Possible values are: * `AD_TYPE_DISPLAY`, the setting will be inherited by new line item when line_item_type is `LINE_ITEM_TYPE_DISPLAY_DEFAULT`. * `AD_TYPE_VIDEO`, the setting will
             * be inherited by new line item when line_item_type is `LINE_ITEM_TYPE_VIDEO_DEFAULT`.
             */
            adType?:
                string;
            /** Output only. The on screen position. */
            onScreenPosition?:
                string;
            /** Required. The targeting_option_id field when targeting_type is `TARGETING_TYPE_ON_SCREEN_POSITION`. */
            targetingOptionId?:
                string;
        }
        interface OnScreenPositionTargetingOptionDetails {
            /** Output only. The on screen position. */
            onScreenPosition?:
                string;
        }
        interface OperatingSystemAssignedTargetingOptionDetails {
            /** Output only. The display name of the operating system. */
            displayName?:
                string;
            /** Indicates if this option is being negatively targeted. */
            negative?:
                boolean;
            /** Required. The targeting option ID populated in targeting_option_id field when targeting_type is `TARGETING_TYPE_OPERATING_SYSTEM`. */
            targetingOptionId?:
                string;
        }
        interface OperatingSystemTargetingOptionDetails {
            /** Output only. The display name of the operating system. */
            displayName?:
                string;
        }
        interface Operation {
            /** If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available. */
            done?:
                boolean;
            /** The error result of the operation in case of failure or cancellation. */
            error?:
                Status;
            /**
             * Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such
             * metadata. Any method that returns a long-running operation should document the metadata type, if any.
             */
            metadata?:
                { [P in string]: any };
            /**
             * The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending
             * with `operations/{unique_id}`.
             */
            name?:
                string;
            /**
             * The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the
             * original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the
             * original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
             */
            response?:
                { [P in string]: any };
        }
        interface Pacing {
            /** Maximum number of impressions to serve every day. Applicable when the budget is impression based. Must be greater than 0. */
            dailyMaxImpressions?:
                string;
            /**
             * Maximum currency amount to spend every day in micros of advertiser's currency. Applicable when the budget is currency based. Must be greater than 0. For example, for 1.5 standard
             * unit of the currency, set this field to 1500000. The value assigned will be rounded to whole billable units for the relevant currency by the following rules: any positive value less
             * than a single billable unit will be rounded up to one billable unit and any value larger than a single billable unit will be rounded down to the nearest billable value. For example,
             * if the currency's billable unit is 0.01, and this field is set to 10257770, it will round down to 10250000, a value of 10.25. If set to 505, it will round up to 10000, a value of
             * 0.01.
             */
            dailyMaxMicros?:
                string;
            /**
             * Required. The time period in which the pacing budget will be spent. When automatic budget allocation is enabled at the insertion order via auto_budget_allocation, this field is
             * output only and defaults to `PACING_PERIOD_FLIGHT`.
             */
            pacingPeriod?:
                string;
            /** Required. The type of pacing that defines how the budget amount will be spent across the pacing_period. */
            pacingType?:
                string;
        }
        interface ParentalStatusAssignedTargetingOptionDetails {
            /** The parental status of the audience. Output only in v1. Required in v2. */
            parentalStatus?:
                string;
            /** Required. The targeting_option_id of a TargetingOption of type `TARGETING_TYPE_PARENTAL_STATUS`. */
            targetingOptionId?:
                string;
        }
        interface ParentalStatusTargetingOptionDetails {
            /** Output only. The parental status of an audience. */
            parentalStatus?:
                string;
        }
        interface ParentEntityFilter {
            /** Required. File types that will be returned. */
            fileType?:
                string[];
            /** The IDs of the specified filter type. This is used to filter entities to fetch. If filter type is not `FILTER_TYPE_NONE`, at least one ID must be specified. */
            filterIds?:
                string[];
            /** Required. Filter type used to filter fetched entities. */
            filterType?:
                string;
        }
        interface Partner {
            /** Ad server related settings of the partner. */
            adServerConfig?:
                PartnerAdServerConfig;
            /** Settings that control how partner data may be accessed. */
            dataAccessConfig?:
                PartnerDataAccessConfig;
            /** The display name of the partner. Must be UTF-8 encoded with a maximum size of 240 bytes. */
            displayName?:
                string;
            /** Output only. The status of the partner. */
            entityStatus?:
                string;
            /** Settings that control which exchanges are enabled for the partner. */
            exchangeConfig?:
                ExchangeConfig;
            /** General settings of the partner. */
            generalConfig?:
                PartnerGeneralConfig;
            /** Output only. The resource name of the partner. */
            name?:
                string;
            /** Output only. The unique ID of the partner. Assigned by the system. */
            partnerId?:
                string;
            /** Output only. The timestamp when the partner was last updated. Assigned by the system. */
            updateTime?:
                string;
        }
        interface PartnerAdServerConfig {
            /** Measurement settings of a partner. */
            measurementConfig?:
                MeasurementConfig;
        }
        interface PartnerCost {
            /** Required. The type of the partner cost. */
            costType?:
                string;
            /**
             * The CPM fee amount in micros of advertiser's currency. Applicable when the fee_type is `PARTNER_FEE_TYPE_CPM_FEE`. Must be greater than or equal to 0. For example, for 1.5 standard
             * unit of the advertiser's currency, set this field to 1500000.
             */
            feeAmount?:
                string;
            /**
             * The media fee percentage in millis (1/1000 of a percent). Applicable when the fee_type is `PARTNER_FEE_TYPE_MEDIA_FEE`. Must be greater than or equal to 0. For example: 100
             * represents 0.1%.
             */
            feePercentageMillis?:
                string;
            /** Required. The fee type for this partner cost. */
            feeType?:
                string;
            /**
             * The invoice type for this partner cost. * Required when cost_type is one of: - `PARTNER_COST_TYPE_ADLOOX` - `PARTNER_COST_TYPE_DOUBLE_VERIFY` -
             * `PARTNER_COST_TYPE_INTEGRAL_AD_SCIENCE`. * Output only for other types.
             */
            invoiceType?:
                string;
        }
        interface PartnerDataAccessConfig {
            /** Structured Data Files (SDF) settings for the partner. The SDF configuration for the partner. */
            sdfConfig?:
                SdfConfig;
        }
        interface PartnerGeneralConfig {
            /** Immutable. Partner's currency in ISO 4217 format. */
            currencyCode?:
                string;
            /** Immutable. The standard TZ database name of the partner's time zone. For example, `America/New_York`. See more at: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones */
            timeZone?:
                string;
        }
        interface PartnerRevenueModel {
            /**
             * Required. The markup amount of the partner revenue model. Must be greater than or equal to 0. * When the markup_type is set to be `PARTNER_REVENUE_MODEL_MARKUP_TYPE_CPM`, this field
             * represents the CPM markup in micros of advertiser's currency. For example, 1500000 represents 1.5 standard units of the currency. * When the markup_type is set to be
             * `PARTNER_REVENUE_MODEL_MARKUP_TYPE_MEDIA_COST_MARKUP`, this field represents the media cost percent markup in millis. For example, 100 represents 0.1% (decimal 0.001). * When the
             * markup_type is set to be `PARTNER_REVENUE_MODEL_MARKUP_TYPE_TOTAL_MEDIA_COST_MARKUP`, this field represents the total media cost percent markup in millis. For example, 100
             * represents 0.1% (decimal 0.001).
             */
            markupAmount?:
                string;
            /** Required. The markup type of the partner revenue model. */
            markupType?:
                string;
        }
        interface PerformanceGoal {
            /**
             * The goal amount, in micros of the advertiser's currency. Applicable when performance_goal_type is one of: * `PERFORMANCE_GOAL_TYPE_CPM` * `PERFORMANCE_GOAL_TYPE_CPC` *
             * `PERFORMANCE_GOAL_TYPE_CPA` * `PERFORMANCE_GOAL_TYPE_CPIAVC` * `PERFORMANCE_GOAL_TYPE_VCPM` For example 1500000 represents 1.5 standard units of the currency.
             */
            performanceGoalAmountMicros?:
                string;
            /**
             * The decimal representation of the goal percentage in micros. Applicable when performance_goal_type is one of: * `PERFORMANCE_GOAL_TYPE_CTR` * `PERFORMANCE_GOAL_TYPE_VIEWABILITY` *
             * `PERFORMANCE_GOAL_TYPE_CLICK_CVR` * `PERFORMANCE_GOAL_TYPE_IMPRESSION_CVR` * `PERFORMANCE_GOAL_TYPE_VTR` * `PERFORMANCE_GOAL_TYPE_AUDIO_COMPLETION_RATE` *
             * `PERFORMANCE_GOAL_TYPE_VIDEO_COMPLETION_RATE` For example, 70000 represents 7% (decimal 0.07).
             */
            performanceGoalPercentageMicros?:
                string;
            /**
             * A key performance indicator (KPI) string, which can be empty. Must be UTF-8 encoded with a length of no more than 100 characters. Applicable when performance_goal_type is set to
             * `PERFORMANCE_GOAL_TYPE_OTHER`.
             */
            performanceGoalString?:
                string;
            /** Required. The type of the performance goal. */
            performanceGoalType?:
                string;
        }
        interface PerformanceGoalBidStrategy {
            /** The ID of the Custom Bidding Algorithm used by this strategy. Only applicable when performance_goal_type is set to `BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_CUSTOM_ALGO`. */
            customBiddingAlgorithmId?:
                string;
            /**
             * The maximum average CPM that may be bid, in micros of the advertiser's currency. Must be greater than or equal to a billable unit of the given currency. Not applicable when
             * performance_goal_type is set to `BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_VIEWABLE_CPM`. For example, 1500000 represents 1.5 standard units of the currency.
             */
            maxAverageCpmBidAmountMicros?:
                string;
            /**
             * Required. The performance goal the bidding strategy will attempt to meet or beat, in micros of the advertiser's currency or in micro of the ROAS (Return On Advertising Spend) value
             * which is also based on advertiser's currency. Must be greater than or equal to a billable unit of the given currency and smaller or equal to upper bounds. Each performance_goal_type
             * has its upper bound: * when performance_goal_type is `BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_CPA`, upper bound is 10000.00 USD. * when performance_goal_type is
             * `BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_CPC`, upper bound is 1000.00 USD. * when performance_goal_type is `BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_VIEWABLE_CPM`, upper bound is
             * 1000.00 USD. * when performance_goal_type is `BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_CUSTOM_ALGO`, upper bound is 1000.00 and lower bound is 0.01. Example: If set to
             * `BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_VIEWABLE_CPM`, the bid price will be based on the probability that each available impression will be viewable. For example, if viewable CPM
             * target is $2 and an impression is 40% likely to be viewable, the bid price will be $0.80 CPM (40% of $2). For example, 1500000 represents 1.5 standard units of the currency or ROAS
             * value.
             */
            performanceGoalAmountMicros?:
                string;
            /**
             * Required. The type of the performance goal that the bidding strategy will try to meet or beat. For line item level usage, the value must be one of: *
             * `BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_CPA` * `BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_CPC` * `BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_VIEWABLE_CPM` *
             * `BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_CUSTOM_ALGO`.
             */
            performanceGoalType?:
                string;
        }
        interface PoiAssignedTargetingOptionDetails {
            /** Output only. The display name of a POI, e.g. "Times Square", "Space Needle", followed by its full address if available. */
            displayName?:
                string;
            /** Output only. Latitude of the POI rounding to 6th decimal place. */
            latitude?:
                number;
            /** Output only. Longitude of the POI rounding to 6th decimal place. */
            longitude?:
                number;
            /**
             * Required. The radius of the area around the POI that will be targeted. The units of the radius are specified by proximity_radius_unit. Must be 1 to 800 if unit is
             * `DISTANCE_UNIT_KILOMETERS` and 1 to 500 if unit is `DISTANCE_UNIT_MILES`.
             */
            proximityRadiusAmount?:
                number;
            /** Required. The unit of distance by which the targeting radius is measured. */
            proximityRadiusUnit?:
                string;
            /**
             * Required. The targeting_option_id of a TargetingOption of type `TARGETING_TYPE_POI`. Accepted POI targeting option IDs can be retrieved using SearchTargetingOptions. If targeting a
             * specific latitude/longitude coordinate removed from an address or POI name, you can generate the necessary targeting option ID by rounding the desired coordinate values to the 6th
             * decimal place, removing the decimals, and concatenating the string values separated by a semicolon. For example, you can target the latitude/longitude pair of 40.7414691, -74.003387
             * using the targeting option ID "40741469;-74003387".
             */
            targetingOptionId?:
                string;
        }
        interface PoiSearchTerms {
            /**
             * The search query for the desired POI name, street address, or coordinate of the desired POI. The query can be a prefix, e.g. "Times squar", "40.7505045,-73.99562", "315 W 44th St",
             * etc.
             */
            poiQuery?:
                string;
        }
        interface PoiTargetingOptionDetails {
            /** Output only. The display name of a POI(e.g. "Times Square", "Space Needle"), followed by its full address if available. */
            displayName?:
                string;
            /** Output only. Latitude of the POI rounding to 6th decimal place. */
            latitude?:
                number;
            /** Output only. Longitude of the POI rounding to 6th decimal place. */
            longitude?:
                number;
        }
        interface PrismaConfig {
            /** Required. Relevant client, product, and estimate codes from the Mediaocean Prisma tool. */
            prismaCpeCode?:
                PrismaCpeCode;
            /** Required. The Prisma type. */
            prismaType?:
                string;
            /** Required. The entity allocated this budget (DSP, site, etc.). */
            supplier?:
                string;
        }
        interface PrismaCpeCode {
            /** The Prisma client code. */
            prismaClientCode?:
                string;
            /** The Prisma estimate code. */
            prismaEstimateCode?:
                string;
            /** The Prisma product code. */
            prismaProductCode?:
                string;
        }
        interface ProximityLocationListAssignedTargetingOptionDetails {
            /** Required. ID of the proximity location list. Should refer to the location_list_id field of a LocationList resource whose type is `TARGETING_LOCATION_TYPE_PROXIMITY`. */
            proximityLocationListId?:
                string;
            /**
             * Required. Radius range for proximity location list. This represents the size of the area around a chosen location that will be targeted. `All` proximity location targeting under a
             * single resource must have the same radius range value. Set this value to match any existing targeting. If updated, this field will change the radius range for all proximity
             * targeting under the resource.
             */
            proximityRadiusRange?:
                string;
        }
        interface PublisherReviewStatus {
            /** The publisher reviewing the creative. */
            publisherName?:
                string;
            /** Status of the publisher review. */
            status?:
                string;
        }
        interface RateDetails {
            /** The rate type. Acceptable values are `INVENTORY_SOURCE_RATE_TYPE_CPM_FIXED`, `INVENTORY_SOURCE_RATE_TYPE_CPM_FLOOR`, and `INVENTORY_SOURCE_RATE_TYPE_CPD`. */
            inventorySourceRateType?:
                string;
            /** Output only. The amount that the buyer has committed to spending on the inventory source up front. Only applicable for guaranteed inventory sources. */
            minimumSpend?:
                Money;
            /** The rate for the inventory source. */
            rate?:
                Money;
            /** Required for guaranteed inventory sources. The number of impressions guaranteed by the seller. */
            unitsPurchased?:
                string;
        }
        interface RegionalLocationListAssignedTargetingOptionDetails {
            /** Indicates if this option is being negatively targeted. */
            negative?:
                boolean;
            /** Required. ID of the regional location list. Should refer to the location_list_id field of a LocationList resource whose type is `TARGETING_LOCATION_TYPE_REGIONAL`. */
            regionalLocationListId?:
                string;
        }
        interface ReplaceNegativeKeywordsRequest {
            /** The negative keywords that will replace the existing keywords in the negative keyword list, specified as a list of NegativeKeywords. */
            newNegativeKeywords?:
                NegativeKeyword[];
        }
        interface ReplaceNegativeKeywordsResponse {
            /** The full list of negative keywords now present in the negative keyword list. */
            negativeKeywords?:
                NegativeKeyword[];
        }
        interface ReplaceSitesRequest {
            /** The ID of the advertiser that owns the parent channel. */
            advertiserId?:
                string;
            /** The sites that will replace the existing sites assigned to the channel, specified as a list of Sites. */
            newSites?:
                Site[];
            /** The ID of the partner that owns the parent channel. */
            partnerId?:
                string;
        }
        interface ReplaceSitesResponse {
            /** The list of sites in the channel after replacing. */
            sites?:
                Site[];
        }
        interface ReviewStatusInfo {
            /** Represents the basic approval needed for a creative to begin serving. Summary of creative_and_landing_page_review_status and content_and_policy_review_status. */
            approvalStatus?:
                string;
            /** Content and policy review status for the creative. */
            contentAndPolicyReviewStatus?:
                string;
            /** Creative and landing page review status for the creative. */
            creativeAndLandingPageReviewStatus?:
                string;
            /** Exchange review statuses for the creative. */
            exchangeReviewStatuses?:
                ExchangeReviewStatus[];
            /** Publisher review statuses for the creative. */
            publisherReviewStatuses?:
                PublisherReviewStatus[];
        }
        interface ScriptError {
            /** The column number in the script where the error was thrown. */
            column?:
                string;
            /** The type of error. */
            errorCode?:
                string;
            /** The detailed error message. */
            errorMessage?:
                string;
            /** The line number in the script where the error was thrown. */
            line?:
                string;
        }
        interface SdfConfig {
            /** An administrator email address to which the SDF processing status reports will be sent. */
            adminEmail?:
                string;
            /** Required. The version of SDF being used. */
            version?:
                string;
        }
        interface SdfDownloadTask {
            /**
             * A resource name to be used in media.download to Download the prepared files. Resource names have the format `download/sdfdownloadtasks/media/{media_id}`. `media_id` will be made
             * available by the long running operation service once the task status is done.
             */
            resourceName?:
                string;
        }
        interface SdfDownloadTaskMetadata {
            /** The time when the operation was created. */
            createTime?:
                string;
            /** The time when execution was completed. */
            endTime?:
                string;
            /** The SDF version used to execute this download task. */
            version?:
                string;
        }
        interface SearchTargetingOptionsRequest {
            /** Required. The Advertiser this request is being made in the context of. */
            advertiserId?:
                string;
            /** Search terms for Business Chain targeting options. Can only be used when targeting_type is `TARGETING_TYPE_BUSINESS_CHAIN`. */
            businessChainSearchTerms?:
                BusinessChainSearchTerms;
            /** Search terms for geo region targeting options. Can only be used when targeting_type is `TARGETING_TYPE_GEO_REGION`. */
            geoRegionSearchTerms?:
                GeoRegionSearchTerms;
            /** Requested page size. Must be between `1` and `200`. If unspecified will default to `100`. Returns error code `INVALID_ARGUMENT` if an invalid value is specified. */
            pageSize?:
                number;
            /**
             * A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `SearchTargetingOptions` method.
             * If not specified, the first page of results will be returned.
             */
            pageToken?:
                string;
            /** Search terms for POI targeting options. Can only be used when targeting_type is `TARGETING_TYPE_POI`. */
            poiSearchTerms?:
                PoiSearchTerms;
        }
        interface SearchTargetingOptionsResponse {
            /** A token to retrieve the next page of results. Pass this value in the page_token field in the subsequent call to `SearchTargetingOptions` method to retrieve the next page of results. */
            nextPageToken?:
                string;
            /** The list of targeting options that match the search criteria. This list will be absent if empty. */
            targetingOptions?:
                TargetingOption[];
        }
        interface SensitiveCategoryAssignedTargetingOptionDetails {
            /** Required. ID of the sensitive category to be EXCLUDED. */
            excludedTargetingOptionId?:
                string;
            /** Output only. An enum for the DV360 Sensitive category content classifier. */
            sensitiveCategory?:
                string;
        }
        interface SensitiveCategoryTargetingOptionDetails {
            /** Output only. An enum for the DV360 Sensitive category content classifier. */
            sensitiveCategory?:
                string;
        }
        interface Site {
            /** Output only. The resource name of the site. */
            name?:
                string;
            /** Required. The app ID or URL of the site. Must be UTF-8 encoded with a maximum length of 240 bytes. */
            urlOrAppId?:
                string;
        }
        interface Status {
            /** The status code, which should be an enum value of google.rpc.Code. */
            code?:
                number;
            /** A list of messages that carry the error details. There is a common set of message types for APIs to use. */
            details?:
                Array<{ [P in string]: any }>;
            /**
             * A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the
             * client.
             */
            message?:
                string;
        }
        interface SubExchangeAssignedTargetingOptionDetails {
            /** Required. The targeting_option_id of a TargetingOption of type `TARGETING_TYPE_SUB_EXCHANGE`. */
            targetingOptionId?:
                string;
        }
        interface SubExchangeTargetingOptionDetails {
            /** Output only. The display name of the sub-exchange. */
            displayName?:
                string;
        }
        interface TargetingExpansionConfig {
            /**
             * Whether to exclude first-party audiences from use in targeting expansion. This field was deprecated with the launch of [optimized
             * targeting](//support.google.com/displayvideo/answer/12060859). This field will be set to `false`. If this field is set to `true` when deprecated, all positive first-party audience
             * targeting assigned to this line item will be replaced with negative targeting of the same first-party audiences to ensure the continued exclusion of those audiences.
             */
            excludeFirstPartyAudience?:
                boolean;
            /**
             * Required. Whether optimized targeting is turned on. This field supports the following values: * `NO_EXPANSION`: optimized targeting is turned off * `LEAST_EXPANSION`: optimized
             * targeting is turned on If this field is set to any other value, it will automatically be set to `LEAST_EXPANSION`. `NO_EXPANSION` will be the default value for the field and will be
             * automatically assigned if you do not set the field.
             */
            targetingExpansionLevel?:
                string;
        }
        interface TargetingOption {
            /** Age range details. */
            ageRangeDetails?:
                AgeRangeTargetingOptionDetails;
            /** App category details. */
            appCategoryDetails?:
                AppCategoryTargetingOptionDetails;
            /** Audio content type details. */
            audioContentTypeDetails?:
                AudioContentTypeTargetingOptionDetails;
            /** Authorized seller status resource details. */
            authorizedSellerStatusDetails?:
                AuthorizedSellerStatusTargetingOptionDetails;
            /** Browser details. */
            browserDetails?:
                BrowserTargetingOptionDetails;
            /** Business chain resource details. */
            businessChainDetails?:
                BusinessChainTargetingOptionDetails;
            /** Carrier and ISP details. */
            carrierAndIspDetails?:
                CarrierAndIspTargetingOptionDetails;
            /** Category resource details. */
            categoryDetails?:
                CategoryTargetingOptionDetails;
            /** Content duration resource details. */
            contentDurationDetails?:
                ContentDurationTargetingOptionDetails;
            /** Content genre resource details. */
            contentGenreDetails?:
                ContentGenreTargetingOptionDetails;
            /** Content instream position details. */
            contentInstreamPositionDetails?:
                ContentInstreamPositionTargetingOptionDetails;
            /** Content outstream position details. */
            contentOutstreamPositionDetails?:
                ContentOutstreamPositionTargetingOptionDetails;
            /** Content stream type resource details. */
            contentStreamTypeDetails?:
                ContentStreamTypeTargetingOptionDetails;
            /** Device make and model resource details. */
            deviceMakeModelDetails?:
                DeviceMakeModelTargetingOptionDetails;
            /** Device type details. */
            deviceTypeDetails?:
                DeviceTypeTargetingOptionDetails;
            /** Digital content label details. */
            digitalContentLabelDetails?:
                DigitalContentLabelTargetingOptionDetails;
            /** Environment details. */
            environmentDetails?:
                EnvironmentTargetingOptionDetails;
            /** Exchange details. */
            exchangeDetails?:
                ExchangeTargetingOptionDetails;
            /** Gender details. */
            genderDetails?:
                GenderTargetingOptionDetails;
            /** Geographic region resource details. */
            geoRegionDetails?:
                GeoRegionTargetingOptionDetails;
            /** Household income details. */
            householdIncomeDetails?:
                HouseholdIncomeTargetingOptionDetails;
            /** Language resource details. */
            languageDetails?:
                LanguageTargetingOptionDetails;
            /** Output only. The resource name for this targeting option. */
            name?:
                string;
            /** Native content position details. */
            nativeContentPositionDetails?:
                NativeContentPositionTargetingOptionDetails;
            /** Open Measurement enabled inventory details. */
            omidDetails?:
                OmidTargetingOptionDetails;
            /** On screen position details. */
            onScreenPositionDetails?:
                OnScreenPositionTargetingOptionDetails;
            /** Operating system resources details. */
            operatingSystemDetails?:
                OperatingSystemTargetingOptionDetails;
            /** Parental status details. */
            parentalStatusDetails?:
                ParentalStatusTargetingOptionDetails;
            /** POI resource details. */
            poiDetails?:
                PoiTargetingOptionDetails;
            /** Sensitive Category details. */
            sensitiveCategoryDetails?:
                SensitiveCategoryTargetingOptionDetails;
            /** Sub-exchange details. */
            subExchangeDetails?:
                SubExchangeTargetingOptionDetails;
            /** Output only. A unique identifier for this targeting option. The tuple {`targeting_type`, `targeting_option_id`} will be unique. */
            targetingOptionId?:
                string;
            /** Output only. The type of this targeting option. */
            targetingType?:
                string;
            /** User rewarded content details. */
            userRewardedContentDetails?:
                UserRewardedContentTargetingOptionDetails;
            /** Video player size details. */
            videoPlayerSizeDetails?:
                VideoPlayerSizeTargetingOptionDetails;
            /** Viewability resource details. */
            viewabilityDetails?:
                ViewabilityTargetingOptionDetails;
        }
        interface ThirdPartyOnlyConfig {
            /** Whether or not order ID reporting for pixels is enabled. This value cannot be changed once set to `true`. */
            pixelOrderIdReportingEnabled?:
                boolean;
        }
        interface ThirdPartyUrl {
            /** The type of interaction needs to be tracked by the tracking URL */
            type?:
                string;
            /** Tracking URL used to track the interaction. Provide a URL with optional path or query string, beginning with `https:`. For example, https://www.example.com/path */
            url?:
                string;
        }
        interface ThirdPartyVerifierAssignedTargetingOptionDetails {
            /** Third party brand verifier -- Adloox. */
            adloox?:
                Adloox;
            /** Third party brand verifier -- DoubleVerify. */
            doubleVerify?:
                DoubleVerify;
            /** Third party brand verifier -- Integral Ad Science. */
            integralAdScience?:
                IntegralAdScience;
        }
        interface TimeRange {
            /** Required. The upper bound of a time range, inclusive. */
            endTime?:
                string;
            /** Required. The lower bound of a time range, inclusive. */
            startTime?:
                string;
        }
        interface TimerEvent {
            /** Required. The name of the timer event. */
            name?:
                string;
            /** Required. The name used to identify this timer event in reports. */
            reportingName?:
                string;
        }
        interface TrackingFloodlightActivityConfig {
            /** Required. The ID of the Floodlight activity. */
            floodlightActivityId?:
                string;
            /** Required. The number of days after an ad has been clicked in which a conversion may be counted. Must be between 0 and 90 inclusive. */
            postClickLookbackWindowDays?:
                number;
            /** Required. The number of days after an ad has been viewed in which a conversion may be counted. Must be between 0 and 90 inclusive. */
            postViewLookbackWindowDays?:
                number;
        }
        interface Transcode {
            /** The bit rate for the audio stream of the transcoded video, or the bit rate for the transcoded audio, in kilobits per second. */
            audioBitRateKbps?:
                string;
            /** The sample rate for the audio stream of the transcoded video, or the sample rate for the transcoded audio, in hertz. */
            audioSampleRateHz?:
                string;
            /** The transcoding bit rate of the transcoded video, in kilobits per second. */
            bitRateKbps?:
                string;
            /** The dimensions of the transcoded video. */
            dimensions?:
                Dimensions;
            /** The size of the transcoded file, in bytes. */
            fileSizeBytes?:
                string;
            /** The frame rate of the transcoded video, in frames per second. */
            frameRate?:
                number;
            /** The MIME type of the transcoded file. */
            mimeType?:
                string;
            /** The name of the transcoded file. */
            name?:
                string;
            /** Indicates if the transcoding was successful. */
            transcoded?:
                boolean;
        }
        interface UniversalAdId {
            /** The unique creative identifier. */
            id?:
                string;
            /** The registry provides unique creative identifiers. */
            registry?:
                string;
        }
        interface UrlAssignedTargetingOptionDetails {
            /** Indicates if this option is being negatively targeted. */
            negative?:
                boolean;
            /**
             * Required. The URL, for example `example.com`. DV360 supports two levels of subdirectory targeting, for example `www.example.com/one-subdirectory-level/second-level`, and five levels
             * of subdomain targeting, for example `five.four.three.two.one.example.com`.
             */
            url?:
                string;
        }
        interface User {
            /** The assigned user roles. Required in CreateUser. Output only in UpdateUser. Can only be updated through BulkEditAssignedUserRoles. */
            assignedUserRoles?:
                AssignedUserRole[];
            /** Required. The display name of the user. Must be UTF-8 encoded with a maximum size of 240 bytes. */
            displayName?:
                string;
            /** Required. Immutable. The email address used to identify the user. */
            email?:
                string;
            /** Output only. The resource name of the user. */
            name?:
                string;
            /** Output only. The unique ID of the user. Assigned by the system. */
            userId?:
                string;
        }
        interface UserRewardedContentAssignedTargetingOptionDetails {
            /** Required. The targeting_option_id field when targeting_type is `TARGETING_TYPE_USER_REWARDED_CONTENT`. */
            targetingOptionId?:
                string;
            /** Output only. User rewarded content status for video ads. */
            userRewardedContent?:
                string;
        }
        interface UserRewardedContentTargetingOptionDetails {
            /** Output only. User rewarded content status for video ads. */
            userRewardedContent?:
                string;
        }
        interface VideoPlayerSizeAssignedTargetingOptionDetails {
            /** Required. The targeting_option_id field when targeting_type is `TARGETING_TYPE_VIDEO_PLAYER_SIZE`. */
            targetingOptionId?:
                string;
            /** The video player size. Output only in v1. Required in v2. */
            videoPlayerSize?:
                string;
        }
        interface VideoPlayerSizeTargetingOptionDetails {
            /** Output only. The video player size. */
            videoPlayerSize?:
                string;
        }
        interface ViewabilityAssignedTargetingOptionDetails {
            /** Required. The targeting_option_id of a TargetingOption of type `TARGETING_TYPE_VIEWABILITY` (e.g., "509010" for targeting the `VIEWABILITY_10_PERCENT_OR_MORE` option). */
            targetingOptionId?:
                string;
            /** The predicted viewability percentage. Output only in v1. Required in v2. */
            viewability?:
                string;
        }
        interface ViewabilityTargetingOptionDetails {
            /** Output only. The predicted viewability percentage. */
            viewability?:
                string;
        }
        interface AssetsResource {
            /**
             * Uploads an asset. Returns the ID of the newly uploaded asset if successful. The asset file size should be no more than 10 MB for images, 200 MB for ZIP files, and 1 GB for videos.
             * Must be used within the [multipart media upload process](/display-video/api/guides/how-tos/upload#multipart). Examples using provided client libraries can be found in our [Creating
             * Creatives guide](/display-video/api/guides/creating-creatives/overview#upload_an_asset).
             */
            upload(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Required. The ID of the advertiser this asset belongs to. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    CreateAssetRequest;
            }): Request<CreateAssetResponse>;
            upload(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Required. The ID of the advertiser this asset belongs to. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: CreateAssetRequest): Request<CreateAssetResponse>;
        }
        interface AssignedTargetingOptionsResource {
            /** Gets a single targeting option assigned to a campaign. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Required. The ID of the advertiser the campaign belongs to. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** Required. An identifier unique to the targeting type in this campaign that identifies the assigned targeting option being requested. */
                assignedTargetingOptionId:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Required. The ID of the campaign the assigned targeting option belongs to. */
                campaignId:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /**
                 * Required. Identifies the type of this assigned targeting option. Supported targeting types: * `TARGETING_TYPE_AGE_RANGE` * `TARGETING_TYPE_AUTHORIZED_SELLER_STATUS` *
                 * `TARGETING_TYPE_CONTENT_INSTREAM_POSITION` * `TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION` * `TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION` * `TARGETING_TYPE_ENVIRONMENT` *
                 * `TARGETING_TYPE_EXCHANGE` * `TARGETING_TYPE_GENDER` * `TARGETING_TYPE_GEO_REGION` * `TARGETING_TYPE_HOUSEHOLD_INCOME` * `TARGETING_TYPE_INVENTORY_SOURCE` *
                 * `TARGETING_TYPE_INVENTORY_SOURCE_GROUP` * `TARGETING_TYPE_LANGUAGE` * `TARGETING_TYPE_ON_SCREEN_POSITION` * `TARGETING_TYPE_PARENTAL_STATUS` *
                 * `TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION` * `TARGETING_TYPE_SUB_EXCHANGE` * `TARGETING_TYPE_THIRD_PARTY_VERIFIER` * `TARGETING_TYPE_VIEWABILITY`
                 */
                targetingType:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<AssignedTargetingOption>;
            /** Lists the targeting options assigned to a campaign for a specified targeting type. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Required. The ID of the advertiser the campaign belongs to. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Required. The ID of the campaign to list assigned targeting options for. */
                campaignId:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /**
                 * Allows filtering by assigned targeting option fields. Supported syntax: * Filter expressions are made up of one or more restrictions. * Restrictions can be combined by the `OR`
                 * logical operator. * A restriction has the form of `{field} {operator} {value}`. * All fields must use the `EQUALS (=)` operator. Supported fields: * `assignedTargetingOptionId`
                 * * `inheritance` Examples: * `AssignedTargetingOption` resources with ID 1 or 2 `assignedTargetingOptionId="1" OR assignedTargetingOptionId="2"` * `AssignedTargetingOption`
                 * resources with inheritance status of `NOT_INHERITED` or `INHERITED_FROM_PARTNER` `inheritance="NOT_INHERITED" OR inheritance="INHERITED_FROM_PARTNER"` The length of this field
                 * should be no more than 500 characters. Reference our [filter `LIST` requests](/display-video/api/guides/how-tos/filters) guide for more information.
                 */
                filter?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /**
                 * Field by which to sort the list. Acceptable values are: * `assignedTargetingOptionId` (default) The default sorting order is ascending. To specify descending order for a field,
                 * a suffix "desc" should be added to the field name. Example: `assignedTargetingOptionId desc`.
                 */
                orderBy?:
                    string;
                /** Requested page size. Must be between `1` and `5000`. If unspecified will default to `100`. Returns error code `INVALID_ARGUMENT` if an invalid value is specified. */
                pageSize?:
                    number;
                /**
                 * A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to
                 * `ListCampaignAssignedTargetingOptions` method. If not specified, the first page of results will be returned.
                 */
                pageToken?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /**
                 * Required. Identifies the type of assigned targeting options to list. Supported targeting types: * `TARGETING_TYPE_AGE_RANGE` * `TARGETING_TYPE_AUTHORIZED_SELLER_STATUS` *
                 * `TARGETING_TYPE_CONTENT_INSTREAM_POSITION` * `TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION` * `TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION` * `TARGETING_TYPE_ENVIRONMENT` *
                 * `TARGETING_TYPE_EXCHANGE` * `TARGETING_TYPE_GENDER` * `TARGETING_TYPE_GEO_REGION` * `TARGETING_TYPE_HOUSEHOLD_INCOME` * `TARGETING_TYPE_INVENTORY_SOURCE` *
                 * `TARGETING_TYPE_INVENTORY_SOURCE_GROUP` * `TARGETING_TYPE_LANGUAGE` * `TARGETING_TYPE_ON_SCREEN_POSITION` * `TARGETING_TYPE_PARENTAL_STATUS` *
                 * `TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION` * `TARGETING_TYPE_SUB_EXCHANGE` * `TARGETING_TYPE_THIRD_PARTY_VERIFIER` * `TARGETING_TYPE_VIEWABILITY`
                 */
                targetingType:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<ListCampaignAssignedTargetingOptionsResponse>;
        }
        interface TargetingTypesResource {
            assignedTargetingOptions:
                AssignedTargetingOptionsResource;
        }
        interface CampaignsResource {
            /** Lists assigned targeting options of a campaign across targeting types. */
            bulkListCampaignAssignedTargetingOptions(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Required. The ID of the advertiser the campaign belongs to. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Required. The ID of the campaign to list assigned targeting options for. */
                campaignId:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /**
                 * Allows filtering by assigned targeting option fields. Supported syntax: * Filter expressions are made up of one or more restrictions. * Restrictions can be combined by the `OR`
                 * logical operator. * A restriction has the form of `{field} {operator} {value}`. * All fields must use the `EQUALS (=)` operator. Supported fields: * `targetingType` *
                 * `inheritance` Examples: * `AssignedTargetingOption` resources of targeting type `TARGETING_TYPE_LANGUAGE` or `TARGETING_TYPE_GENDER`: `targetingType="TARGETING_TYPE_LANGUAGE" OR
                 * targetingType="TARGETING_TYPE_GENDER"` * `AssignedTargetingOption` resources with inheritance status of `NOT_INHERITED` or `INHERITED_FROM_PARTNER`: `inheritance="NOT_INHERITED"
                 * OR inheritance="INHERITED_FROM_PARTNER"` The length of this field should be no more than 500 characters. Reference our [filter `LIST`
                 * requests](/display-video/api/guides/how-tos/filters) guide for more information.
                 */
                filter?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /**
                 * Field by which to sort the list. Acceptable values are: * `targetingType` (default) The default sorting order is ascending. To specify descending order for a field, a suffix
                 * "desc" should be added to the field name. Example: `targetingType desc`.
                 */
                orderBy?:
                    string;
                /**
                 * Requested page size. The size must be an integer between `1` and `5000`. If unspecified, the default is `5000`. Returns error code `INVALID_ARGUMENT` if an invalid value is
                 * specified.
                 */
                pageSize?:
                    number;
                /**
                 * A token that lets the client fetch the next page of results. Typically, this is the value of next_page_token returned from the previous call to
                 * `BulkListCampaignAssignedTargetingOptions` method. If not specified, the first page of results will be returned.
                 */
                pageToken?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<BulkListCampaignAssignedTargetingOptionsResponse>;
            /** Creates a new campaign. Returns the newly created campaign if successful. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Output only. The unique ID of the advertiser the campaign belongs to. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    Campaign;
            }): Request<Campaign>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Output only. The unique ID of the advertiser the campaign belongs to. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: Campaign): Request<Campaign>;
            /**
             * Permanently deletes a campaign. A deleted campaign cannot be recovered. The campaign should be archived first, i.e. set entity_status to `ENTITY_STATUS_ARCHIVED`, to be able to
             * delete it.
             */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** The ID of the advertiser this campaign belongs to. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** The ID of the campaign we need to delete. */
                campaignId:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<{}>;
            /** Gets a campaign. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Required. The ID of the advertiser this campaign belongs to. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Required. The ID of the campaign to fetch. */
                campaignId:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<Campaign>;
            /**
             * Lists campaigns in an advertiser. The order is defined by the order_by parameter. If a filter by entity_status is not specified, campaigns with `ENTITY_STATUS_ARCHIVED` will not be
             * included in the results.
             */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** The ID of the advertiser to list campaigns for. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /**
                 * Allows filtering by campaign fields. Supported syntax: * Filter expressions are made up of one or more restrictions. * Restrictions can be combined by `AND` or `OR` logical
                 * operators. A sequence of restrictions implicitly uses `AND`. * A restriction has the form of `{field} {operator} {value}`. * The `updateTime` field must use the `GREATER THAN OR
                 * EQUAL TO (>=)` or `LESS THAN OR EQUAL TO (<=)` operators. * All other fields must use the `EQUALS (=)` operator. Supported fields: * `campaignId` * `displayName` *
                 * `entityStatus` * `updateTime` (input in ISO 8601 format, or `YYYY-MM-DDTHH:MM:SSZ`) Examples: * All `ENTITY_STATUS_ACTIVE` or `ENTITY_STATUS_PAUSED` campaigns under an
                 * advertiser: `(entityStatus="ENTITY_STATUS_ACTIVE" OR entityStatus="ENTITY_STATUS_PAUSED")` * All campaigns with an update time less than or equal to 2020-11-04T18:54:47Z (format
                 * of ISO 8601): `updateTime<="2020-11-04T18:54:47Z"` * All campaigns with an update time greater than or equal to 2020-11-04T18:54:47Z (format of ISO 8601):
                 * `updateTime>="2020-11-04T18:54:47Z"` The length of this field should be no more than 500 characters. Reference our [filter `LIST`
                 * requests](/display-video/api/guides/how-tos/filters) guide for more information.
                 */
                filter?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /**
                 * Field by which to sort the list. Acceptable values are: * `displayName` (default) * `entityStatus` * `updateTime` The default sorting order is ascending. To specify descending
                 * order for a field, a suffix "desc" should be added to the field name. Example: `displayName desc`.
                 */
                orderBy?:
                    string;
                /** Requested page size. Must be between `1` and `200`. If unspecified will default to `100`. */
                pageSize?:
                    number;
                /**
                 * A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `ListCampaigns` method. If not
                 * specified, the first page of results will be returned.
                 */
                pageToken?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<ListCampaignsResponse>;
            /** Updates an existing campaign. Returns the updated campaign if successful. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Output only. The unique ID of the advertiser the campaign belongs to. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Output only. The unique ID of the campaign. Assigned by the system. */
                campaignId:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Required. The mask to control which fields to update. */
                updateMask?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    Campaign;
            }): Request<Campaign>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Output only. The unique ID of the advertiser the campaign belongs to. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Output only. The unique ID of the campaign. Assigned by the system. */
                campaignId:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Required. The mask to control which fields to update. */
                updateMask?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: Campaign): Request<Campaign>;
            targetingTypes:
                TargetingTypesResource;
        }
        interface SitesResource {
            /**
             * Bulk edits sites under a single channel. The operation will delete the sites provided in BulkEditSitesRequest.deleted_sites and then create the sites provided in
             * BulkEditSitesRequest.created_sites.
             */
            bulkEdit(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** The ID of the advertiser that owns the parent channel. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Required. The ID of the parent channel to which the sites belong. */
                channelId:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    BulkEditSitesRequest;
            }): Request<BulkEditSitesResponse>;
            bulkEdit(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** The ID of the advertiser that owns the parent channel. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Required. The ID of the parent channel to which the sites belong. */
                channelId:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: BulkEditSitesRequest): Request<BulkEditSitesResponse>;
            /** Creates a site in a channel. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** The ID of the advertiser that owns the parent channel. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Required. The ID of the parent channel in which the site will be created. */
                channelId:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** The ID of the partner that owns the parent channel. */
                partnerId?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    Site;
            }): Request<Site>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** The ID of the advertiser that owns the parent channel. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Required. The ID of the parent channel in which the site will be created. */
                channelId:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** The ID of the partner that owns the parent channel. */
                partnerId?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: Site): Request<Site>;
            /** Deletes a site from a channel. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** The ID of the advertiser that owns the parent channel. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Required. The ID of the parent channel to which the site belongs. */
                channelId:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** The ID of the partner that owns the parent channel. */
                partnerId?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Required. The URL or app ID of the site to delete. */
                urlOrAppId:
                    string;
            }): Request<{}>;
            /** Lists sites in a channel. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** The ID of the advertiser that owns the parent channel. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Required. The ID of the parent channel to which the requested sites belong. */
                channelId:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /**
                 * Allows filtering by site fields. Supported syntax: * Filter expressions for site retrieval can only contain at most one restriction. * A restriction has the form of `{field}
                 * {operator} {value}`. * All fields must use the `HAS (:)` operator. Supported fields: * `urlOrAppId` Examples: * All sites for which the URL or app ID contains "google":
                 * `urlOrAppId : "google"` The length of this field should be no more than 500 characters. Reference our [filter `LIST` requests](/display-video/api/guides/how-tos/filters) guide
                 * for more information.
                 */
                filter?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /**
                 * Field by which to sort the list. Acceptable values are: * `urlOrAppId` (default) The default sorting order is ascending. To specify descending order for a field, a suffix "
                 * desc" should be added to the field name. Example: `urlOrAppId desc`.
                 */
                orderBy?:
                    string;
                /** Requested page size. Must be between `1` and `10000`. If unspecified will default to `100`. Returns error code `INVALID_ARGUMENT` if an invalid value is specified. */
                pageSize?:
                    number;
                /**
                 * A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `ListSites` method. If not
                 * specified, the first page of results will be returned.
                 */
                pageToken?:
                    string;
                /** The ID of the partner that owns the parent channel. */
                partnerId?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<ListSitesResponse>;
            /** Replaces all of the sites under a single channel. The operation will replace the sites under a channel with the sites provided in ReplaceSitesRequest.new_sites. */
            replace(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** The ID of the advertiser that owns the parent channel. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Required. The ID of the parent channel whose sites will be replaced. */
                channelId:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    ReplaceSitesRequest;
            }): Request<ReplaceSitesResponse>;
            replace(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** The ID of the advertiser that owns the parent channel. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Required. The ID of the parent channel whose sites will be replaced. */
                channelId:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: ReplaceSitesRequest): Request<ReplaceSitesResponse>;
        }
        interface ChannelsResource {
            /** Creates a new channel. Returns the newly created channel if successful. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** The ID of the advertiser that owns the created channel. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** The ID of the partner that owns the created channel. */
                partnerId?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    Channel;
            }): Request<Channel>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** The ID of the advertiser that owns the created channel. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** The ID of the partner that owns the created channel. */
                partnerId?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: Channel): Request<Channel>;
            /** Gets a channel for a partner or advertiser. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** The ID of the advertiser that owns the fetched channel. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Required. The ID of the channel to fetch. */
                channelId:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** The ID of the partner that owns the fetched channel. */
                partnerId?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<Channel>;
            /** Lists channels for a partner or advertiser. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** The ID of the advertiser that owns the channels. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /**
                 * Allows filtering by channel fields. Supported syntax: * Filter expressions for channel can only contain at most one restriction. * A restriction has the form of `{field}
                 * {operator} {value}`. * All fields must use the `HAS (:)` operator. Supported fields: * `displayName` Examples: * All channels for which the display name contains "google":
                 * `displayName : "google"`. The length of this field should be no more than 500 characters. Reference our [filter `LIST` requests](/display-video/api/guides/how-tos/filters) guide
                 * for more information.
                 */
                filter?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /**
                 * Field by which to sort the list. Acceptable values are: * `displayName` (default) * `channelId` The default sorting order is ascending. To specify descending order for a field,
                 * a suffix " desc" should be added to the field name. Example: `displayName desc`.
                 */
                orderBy?:
                    string;
                /** Requested page size. Must be between `1` and `200`. If unspecified will default to `100`. Returns error code `INVALID_ARGUMENT` if an invalid value is specified. */
                pageSize?:
                    number;
                /**
                 * A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `ListChannels` method. If not
                 * specified, the first page of results will be returned.
                 */
                pageToken?:
                    string;
                /** The ID of the partner that owns the channels. */
                partnerId?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<ListChannelsResponse>;
            /** Updates a channel. Returns the updated channel if successful. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** The ID of the advertiser that owns the created channel. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Output only. The unique ID of the channel. Assigned by the system. */
                channelId:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** The ID of the partner that owns the created channel. */
                partnerId?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Required. The mask to control which fields to update. */
                updateMask?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    Channel;
            }): Request<Channel>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** The ID of the advertiser that owns the created channel. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Output only. The unique ID of the channel. Assigned by the system. */
                channelId:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** The ID of the partner that owns the created channel. */
                partnerId?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Required. The mask to control which fields to update. */
                updateMask?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: Channel): Request<Channel>;
            sites:
                SitesResource;
        }
        interface CreativesResource {
            /** Creates a new creative. Returns the newly created creative if successful. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Output only. The unique ID of the advertiser the creative belongs to. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    Creative;
            }): Request<Creative>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Output only. The unique ID of the advertiser the creative belongs to. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: Creative): Request<Creative>;
            /**
             * Deletes a creative. Returns error code `NOT_FOUND` if the creative does not exist. The creative should be archived first, i.e. set entity_status to `ENTITY_STATUS_ARCHIVED`, before
             * it can be deleted.
             */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** The ID of the advertiser this creative belongs to. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** The ID of the creative to be deleted. */
                creativeId:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<{}>;
            /** Gets a creative. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Required. The ID of the advertiser this creative belongs to. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Required. The ID of the creative to fetch. */
                creativeId:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<Creative>;
            /**
             * Lists creatives in an advertiser. The order is defined by the order_by parameter. If a filter by entity_status is not specified, creatives with `ENTITY_STATUS_ARCHIVED` will not be
             * included in the results.
             */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Required. The ID of the advertiser to list creatives for. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /**
                 * Allows filtering by creative fields. Supported syntax: * Filter expressions are made up of one or more restrictions. * Restrictions can be combined by `AND` or `OR` logical
                 * operators. A sequence of restrictions implicitly uses `AND`. * A restriction has the form of `{field} {operator} {value}`. * The `lineItemIds` field must use the `HAS (:)`
                 * operator. * The `updateTime` field must use the `GREATER THAN OR EQUAL TO (>=)` or `LESS THAN OR EQUAL TO (<=)` operators. * All other fields must use the `EQUALS (=)` operator.
                 * * For `entityStatus`, `minDuration`, `maxDuration`, `updateTime`, and `dynamic` fields, there may be at most one restriction. Supported Fields: * `approvalStatus` * `creativeId`
                 * * `creativeType` * `dimensions` (input in the form of `{width}x{height}`) * `dynamic` * `entityStatus` * `exchangeReviewStatus` (input in the form of
                 * `{exchange}-{reviewStatus}`) * `lineItemIds` * `maxDuration` (input in the form of `{duration}s`. Only seconds are supported) * `minDuration` (input in the form of
                 * `{duration}s`. Only seconds are supported) * `updateTime` (input in ISO 8601 format, or `YYYY-MM-DDTHH:MM:SSZ`) Notes: * For `updateTime`, a creative resource's field value
                 * reflects the last time that a creative has been updated, which includes updates made by the system (e.g. creative review updates). Examples: * All native creatives:
                 * `creativeType="CREATIVE_TYPE_NATIVE"` * All active creatives with 300x400 or 50x100 dimensions: `entityStatus="ENTITY_STATUS_ACTIVE" AND (dimensions="300x400" OR
                 * dimensions="50x100")` * All dynamic creatives that are approved by AdX or AppNexus, with a minimum duration of 5 seconds and 200ms: `dynamic="true" AND minDuration="5.2s" AND
                 * (exchangeReviewStatus="EXCHANGE_GOOGLE_AD_MANAGER-REVIEW_STATUS_APPROVED" OR exchangeReviewStatus="EXCHANGE_APPNEXUS-REVIEW_STATUS_APPROVED")` * All video creatives that are
                 * associated with line item ID 1 or 2: `creativeType="CREATIVE_TYPE_VIDEO" AND (lineItemIds:1 OR lineItemIds:2)` * Find creatives by multiple creative IDs: `creativeId=1 OR
                 * creativeId=2` * All creatives with an update time greater than or equal to 2020-11-04T18:54:47Z (format of ISO 8601): `updateTime>="2020-11-04T18:54:47Z"` The length of this
                 * field should be no more than 500 characters. Reference our [filter `LIST` requests](/display-video/api/guides/how-tos/filters) guide for more information.
                 */
                filter?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /**
                 * Field by which to sort the list. Acceptable values are: * `creativeId` (default) * `createTime` * `mediaDuration` * `dimensions` (sorts by width first, then by height) The
                 * default sorting order is ascending. To specify descending order for a field, a suffix "desc" should be added to the field name. Example: `createTime desc`.
                 */
                orderBy?:
                    string;
                /** Requested page size. Must be between `1` and `200`. If unspecified will default to `100`. Returns error code `INVALID_ARGUMENT` if an invalid value is specified. */
                pageSize?:
                    number;
                /**
                 * A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `ListCreatives` method. If not
                 * specified, the first page of results will be returned.
                 */
                pageToken?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<ListCreativesResponse>;
            /** Updates an existing creative. Returns the updated creative if successful. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Output only. The unique ID of the advertiser the creative belongs to. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Output only. The unique ID of the creative. Assigned by the system. */
                creativeId:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Required. The mask to control which fields to update. */
                updateMask?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    Creative;
            }): Request<Creative>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Output only. The unique ID of the advertiser the creative belongs to. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Output only. The unique ID of the creative. Assigned by the system. */
                creativeId:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Required. The mask to control which fields to update. */
                updateMask?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: Creative): Request<Creative>;
        }
        interface AssignedTargetingOptionsResource {
            /** Gets a single targeting option assigned to an insertion order. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Required. The ID of the advertiser the insertion order belongs to. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** Required. An identifier unique to the targeting type in this insertion order that identifies the assigned targeting option being requested. */
                assignedTargetingOptionId:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** Required. The ID of the insertion order the assigned targeting option belongs to. */
                insertionOrderId:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /**
                 * Required. Identifies the type of this assigned targeting option. Supported targeting types include: * `TARGETING_TYPE_AGE_RANGE` * `TARGETING_TYPE_APP` *
                 * `TARGETING_TYPE_APP_CATEGORY` * `TARGETING_TYPE_AUDIENCE_GROUP` * `TARGETING_TYPE_AUDIO_CONTENT_TYPE` * `TARGETING_TYPE_AUTHORIZED_SELLER_STATUS` * `TARGETING_TYPE_BROWSER` *
                 * `TARGETING_TYPE_BUSINESS_CHAIN` * `TARGETING_TYPE_CARRIER_AND_ISP` * `TARGETING_TYPE_CATEGORY` * `TARGETING_TYPE_CHANNEL` * `TARGETING_TYPE_CONTENT_DURATION` *
                 * `TARGETING_TYPE_CONTENT_GENRE` * `TARGETING_TYPE_CONTENT_INSTREAM_POSITION` * `TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION` * `TARGETING_TYPE_CONTENT_STREAM_TYPE` *
                 * `TARGETING_TYPE_DAY_AND_TIME` * `TARGETING_TYPE_DEVICE_MAKE_MODEL` * `TARGETING_TYPE_DEVICE_TYPE` * `TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION` *
                 * `TARGETING_TYPE_ENVIRONMENT` * `TARGETING_TYPE_EXCHANGE` * `TARGETING_TYPE_GENDER` * `TARGETING_TYPE_GEO_REGION` * `TARGETING_TYPE_HOUSEHOLD_INCOME` *
                 * `TARGETING_TYPE_INVENTORY_SOURCE` * `TARGETING_TYPE_INVENTORY_SOURCE_GROUP` * `TARGETING_TYPE_KEYWORD` * `TARGETING_TYPE_LANGUAGE` * `TARGETING_TYPE_NATIVE_CONTENT_POSITION` *
                 * `TARGETING_TYPE_NEGATIVE_KEYWORD_LIST` * `TARGETING_TYPE_OMID` * `TARGETING_TYPE_ON_SCREEN_POSITION` * `TARGETING_TYPE_OPERATING_SYSTEM` * `TARGETING_TYPE_PARENTAL_STATUS` *
                 * `TARGETING_TYPE_POI` * `TARGETING_TYPE_PROXIMITY_LOCATION_LIST` * `TARGETING_TYPE_REGIONAL_LOCATION_LIST` * `TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION` *
                 * `TARGETING_TYPE_SUB_EXCHANGE` * `TARGETING_TYPE_THIRD_PARTY_VERIFIER` * `TARGETING_TYPE_URL` * `TARGETING_TYPE_USER_REWARDED_CONTENT` * `TARGETING_TYPE_VIDEO_PLAYER_SIZE` *
                 * `TARGETING_TYPE_VIEWABILITY`
                 */
                targetingType:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<AssignedTargetingOption>;
            /** Lists the targeting options assigned to an insertion order. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Required. The ID of the advertiser the insertion order belongs to. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /**
                 * Allows filtering by assigned targeting option fields. Supported syntax: * Filter expressions are made up of one or more restrictions. * Restrictions can be combined by the
                 * logical operator `OR`. * A restriction has the form of `{field} {operator} {value}`. * All fields must use the `EQUALS (=)` operator. Supported fields: *
                 * `assignedTargetingOptionId` * `inheritance` Examples: * `AssignedTargetingOption` resources with ID 1 or 2: `assignedTargetingOptionId="1" OR assignedTargetingOptionId="2"` *
                 * `AssignedTargetingOption` resources with inheritance status of `NOT_INHERITED` or `INHERITED_FROM_PARTNER`: `inheritance="NOT_INHERITED" OR inheritance="INHERITED_FROM_PARTNER"`
                 * The length of this field should be no more than 500 characters. Reference our [filter `LIST` requests](/display-video/api/guides/how-tos/filters) guide for more information.
                 */
                filter?:
                    string;
                /** Required. The ID of the insertion order to list assigned targeting options for. */
                insertionOrderId:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /**
                 * Field by which to sort the list. Acceptable values are: * `assignedTargetingOptionId` (default) The default sorting order is ascending. To specify descending order for a field,
                 * a suffix "desc" should be added to the field name. Example: `assignedTargetingOptionId desc`.
                 */
                orderBy?:
                    string;
                /** Requested page size. Must be between `1` and `5000`. If unspecified will default to `100`. Returns error code `INVALID_ARGUMENT` if an invalid value is specified. */
                pageSize?:
                    number;
                /**
                 * A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to
                 * `ListInsertionOrderAssignedTargetingOptions` method. If not specified, the first page of results will be returned.
                 */
                pageToken?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /**
                 * Required. Identifies the type of assigned targeting options to list. Supported targeting types include: * `TARGETING_TYPE_AGE_RANGE` * `TARGETING_TYPE_APP` *
                 * `TARGETING_TYPE_APP_CATEGORY` * `TARGETING_TYPE_AUDIENCE_GROUP` * `TARGETING_TYPE_AUDIO_CONTENT_TYPE` * `TARGETING_TYPE_AUTHORIZED_SELLER_STATUS` * `TARGETING_TYPE_BROWSER` *
                 * `TARGETING_TYPE_BUSINESS_CHAIN` * `TARGETING_TYPE_CARRIER_AND_ISP` * `TARGETING_TYPE_CATEGORY` * `TARGETING_TYPE_CHANNEL` * `TARGETING_TYPE_CONTENT_DURATION` *
                 * `TARGETING_TYPE_CONTENT_GENRE` * `TARGETING_TYPE_CONTENT_INSTREAM_POSITION` * `TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION` * `TARGETING_TYPE_CONTENT_STREAM_TYPE` *
                 * `TARGETING_TYPE_DAY_AND_TIME` * `TARGETING_TYPE_DEVICE_MAKE_MODEL` * `TARGETING_TYPE_DEVICE_TYPE` * `TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION` *
                 * `TARGETING_TYPE_ENVIRONMENT` * `TARGETING_TYPE_EXCHANGE` * `TARGETING_TYPE_GENDER` * `TARGETING_TYPE_GEO_REGION` * `TARGETING_TYPE_HOUSEHOLD_INCOME` *
                 * `TARGETING_TYPE_INVENTORY_SOURCE` * `TARGETING_TYPE_INVENTORY_SOURCE_GROUP` * `TARGETING_TYPE_KEYWORD` * `TARGETING_TYPE_LANGUAGE` * `TARGETING_TYPE_NATIVE_CONTENT_POSITION` *
                 * `TARGETING_TYPE_NEGATIVE_KEYWORD_LIST` * `TARGETING_TYPE_OMID` * `TARGETING_TYPE_ON_SCREEN_POSITION` * `TARGETING_TYPE_OPERATING_SYSTEM` * `TARGETING_TYPE_PARENTAL_STATUS` *
                 * `TARGETING_TYPE_POI` * `TARGETING_TYPE_PROXIMITY_LOCATION_LIST` * `TARGETING_TYPE_REGIONAL_LOCATION_LIST` * `TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION` *
                 * `TARGETING_TYPE_SUB_EXCHANGE` * `TARGETING_TYPE_THIRD_PARTY_VERIFIER` * `TARGETING_TYPE_URL` * `TARGETING_TYPE_USER_REWARDED_CONTENT` * `TARGETING_TYPE_VIDEO_PLAYER_SIZE` *
                 * `TARGETING_TYPE_VIEWABILITY`
                 */
                targetingType:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<ListInsertionOrderAssignedTargetingOptionsResponse>;
        }
        interface TargetingTypesResource {
            assignedTargetingOptions:
                AssignedTargetingOptionsResource;
        }
        interface InsertionOrdersResource {
            /** Lists assigned targeting options of an insertion order across targeting types. */
            bulkListInsertionOrderAssignedTargetingOptions(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Required. The ID of the advertiser the insertion order belongs to. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /**
                 * Allows filtering by assigned targeting option fields. Supported syntax: * Filter expressions are made up of one or more restrictions. * Restrictions can be combined by the
                 * logical operator `OR`. * A restriction has the form of `{field} {operator} {value}`. * All fields must use the `EQUALS (=)` operator. Supported fields: * `targetingType` *
                 * `inheritance` Examples: * `AssignedTargetingOption` resources of targeting type `TARGETING_TYPE_PROXIMITY_LOCATION_LIST` or `TARGETING_TYPE_CHANNEL`:
                 * `targetingType="TARGETING_TYPE_PROXIMITY_LOCATION_LIST" OR targetingType="TARGETING_TYPE_CHANNEL"` * `AssignedTargetingOption` resources with inheritance status of
                 * `NOT_INHERITED` or `INHERITED_FROM_PARTNER`: `inheritance="NOT_INHERITED" OR inheritance="INHERITED_FROM_PARTNER"` The length of this field should be no more than 500
                 * characters. Reference our [filter `LIST` requests](/display-video/api/guides/how-tos/filters) guide for more information.
                 */
                filter?:
                    string;
                /** Required. The ID of the insertion order to list assigned targeting options for. */
                insertionOrderId:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /**
                 * Field by which to sort the list. Acceptable values are: * `targetingType` (default) The default sorting order is ascending. To specify descending order for a field, a suffix
                 * "desc" should be added to the field name. Example: `targetingType desc`.
                 */
                orderBy?:
                    string;
                /**
                 * Requested page size. The size must be an integer between `1` and `5000`. If unspecified, the default is `5000`. Returns error code `INVALID_ARGUMENT` if an invalid value is
                 * specified.
                 */
                pageSize?:
                    number;
                /**
                 * A token that lets the client fetch the next page of results. Typically, this is the value of next_page_token returned from the previous call to
                 * `BulkListInsertionOrderAssignedTargetingOptions` method. If not specified, the first page of results will be returned.
                 */
                pageToken?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<BulkListInsertionOrderAssignedTargetingOptionsResponse>;
            /** Creates a new insertion order. Returns the newly created insertion order if successful. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Output only. The unique ID of the advertiser the insertion order belongs to. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    InsertionOrder;
            }): Request<InsertionOrder>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Output only. The unique ID of the advertiser the insertion order belongs to. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: InsertionOrder): Request<InsertionOrder>;
            /**
             * Deletes an insertion order. Returns error code `NOT_FOUND` if the insertion order does not exist. The insertion order should be archived first, i.e. set entity_status to
             * `ENTITY_STATUS_ARCHIVED`, to be able to delete it.
             */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** The ID of the advertiser this insertion order belongs to. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** The ID of the insertion order to delete. */
                insertionOrderId:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<{}>;
            /** Gets an insertion order. Returns error code `NOT_FOUND` if the insertion order does not exist. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Required. The ID of the advertiser this insertion order belongs to. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** Required. The ID of the insertion order to fetch. */
                insertionOrderId:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<InsertionOrder>;
            /**
             * Lists insertion orders in an advertiser. The order is defined by the order_by parameter. If a filter by entity_status is not specified, insertion orders with
             * `ENTITY_STATUS_ARCHIVED` will not be included in the results.
             */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Required. The ID of the advertiser to list insertion orders for. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /**
                 * Allows filtering by insertion order fields. Supported syntax: * Filter expressions are made up of one or more restrictions. * Restrictions can be combined by `AND` or `OR`
                 * logical operators. A sequence of restrictions implicitly uses `AND`. * A restriction has the form of `{field} {operator} {value}`. * The
                 * `budget.budget_segments.date_range.end_date` field must use the `LESS THAN (<)` operator. * The `updateTime` field must use the `GREATER THAN OR EQUAL TO (>=)` or `LESS THAN OR
                 * EQUAL TO (<=)` operators. * All other fields must use the `EQUALS (=)` operator. Supported fields: * `campaignId` * `displayName` * `entityStatus` *
                 * `budget.budget_segments.date_range.end_date` (input in the form of `YYYY-MM-DD`) **Deprecated. Not available after June 8, 2023** * `updateTime` (input in ISO 8601 format, or
                 * `YYYY-MM-DDTHH:MM:SSZ`) Examples: * All insertion orders under a campaign: `campaignId="1234"` * All `ENTITY_STATUS_ACTIVE` or `ENTITY_STATUS_PAUSED` insertion orders under an
                 * advertiser: `(entityStatus="ENTITY_STATUS_ACTIVE" OR entityStatus="ENTITY_STATUS_PAUSED")` * All insertion orders with an update time less than or equal to 2020-11-04T18:54:47Z
                 * (format of ISO 8601): `updateTime<="2020-11-04T18:54:47Z"` * All insertion orders with an update time greater than or equal to 2020-11-04T18:54:47Z (format of ISO 8601):
                 * `updateTime>="2020-11-04T18:54:47Z"` The length of this field should be no more than 500 characters. Reference our [filter `LIST`
                 * requests](/display-video/api/guides/how-tos/filters) guide for more information.
                 */
                filter?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /**
                 * Field by which to sort the list. Acceptable values are: * "displayName" (default) * "entityStatus" * "updateTime" The default sorting order is ascending. To specify descending
                 * order for a field, a suffix "desc" should be added to the field name. Example: `displayName desc`.
                 */
                orderBy?:
                    string;
                /** Requested page size. Must be between `1` and `100`. If unspecified will default to `100`. Returns error code `INVALID_ARGUMENT` if an invalid value is specified. */
                pageSize?:
                    number;
                /**
                 * A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `ListInsertionOrders` method.
                 * If not specified, the first page of results will be returned.
                 */
                pageToken?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<ListInsertionOrdersResponse>;
            /** Updates an existing insertion order. Returns the updated insertion order if successful. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Output only. The unique ID of the advertiser the insertion order belongs to. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** Output only. The unique ID of the insertion order. Assigned by the system. */
                insertionOrderId:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Required. The mask to control which fields to update. */
                updateMask?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    InsertionOrder;
            }): Request<InsertionOrder>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Output only. The unique ID of the advertiser the insertion order belongs to. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** Output only. The unique ID of the insertion order. Assigned by the system. */
                insertionOrderId:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Required. The mask to control which fields to update. */
                updateMask?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: InsertionOrder): Request<InsertionOrder>;
            targetingTypes:
                TargetingTypesResource;
        }
        interface InvoicesResource {
            /** Lists invoices posted for an advertiser in a given month. Invoices generated by billing profiles with a "Partner" invoice level are not retrievable through this method. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Required. The ID of the advertiser to list invoices for. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** The month to list the invoices for. If not set, the request will retrieve invoices for the previous month. Must be in the format YYYYMM. */
                issueMonth?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Select type of invoice to retrieve for Loi Sapin advertisers. Only applicable to Loi Sapin advertisers. Will be ignored otherwise. */
                loiSapinInvoiceType?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Requested page size. Must be between `1` and `200`. If unspecified will default to `100`. Returns error code `INVALID_ARGUMENT` if an invalid value is specified. */
                pageSize?:
                    number;
                /**
                 * A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `ListInvoices` method. If not
                 * specified, the first page of results will be returned.
                 */
                pageToken?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<ListInvoicesResponse>;
            /** Retrieves the invoice currency used by an advertiser in a given month. */
            lookupInvoiceCurrency(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Required. The ID of the advertiser to lookup currency for. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** Month for which the currency is needed. If not set, the request will return existing currency settings for the advertiser. Must be in the format YYYYMM. */
                invoiceMonth?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<LookupInvoiceCurrencyResponse>;
        }
        interface AssignedTargetingOptionsResource {
            /**
             * Assigns a targeting option to a line item. Returns the assigned targeting option if successful. Requests to this endpoint cannot be made concurrently with the following requests
             * updating the same line item: * BulkEditAssignedTargetingOptions * BulkUpdate * UpdateLineItem * DeleteLineItemAssignedTargetingOption
             */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Required. The ID of the advertiser the line item belongs to. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. The ID of the line item the assigned targeting option will belong to. */
                lineItemId:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /**
                 * Required. Identifies the type of this assigned targeting option. Supported targeting types include: * `TARGETING_TYPE_AGE_RANGE` * `TARGETING_TYPE_APP` *
                 * `TARGETING_TYPE_APP_CATEGORY` * `TARGETING_TYPE_AUDIENCE_GROUP` * `TARGETING_TYPE_AUDIO_CONTENT_TYPE` * `TARGETING_TYPE_AUTHORIZED_SELLER_STATUS` * `TARGETING_TYPE_BROWSER` *
                 * `TARGETING_TYPE_BUSINESS_CHAIN` * `TARGETING_TYPE_CARRIER_AND_ISP` * `TARGETING_TYPE_CATEGORY` * `TARGETING_TYPE_CHANNEL` * `TARGETING_TYPE_CONTENT_DURATION` *
                 * `TARGETING_TYPE_CONTENT_GENRE` * `TARGETING_TYPE_CONTENT_INSTREAM_POSITION` * `TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION` * `TARGETING_TYPE_CONTENT_STREAM_TYPE` *
                 * `TARGETING_TYPE_DAY_AND_TIME` * `TARGETING_TYPE_DEVICE_MAKE_MODEL` * `TARGETING_TYPE_DEVICE_TYPE` * `TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION` *
                 * `TARGETING_TYPE_ENVIRONMENT` * `TARGETING_TYPE_EXCHANGE` * `TARGETING_TYPE_GENDER` * `TARGETING_TYPE_GEO_REGION` * `TARGETING_TYPE_HOUSEHOLD_INCOME` *
                 * `TARGETING_TYPE_INVENTORY_SOURCE` * `TARGETING_TYPE_INVENTORY_SOURCE_GROUP` * `TARGETING_TYPE_KEYWORD` * `TARGETING_TYPE_LANGUAGE` * `TARGETING_TYPE_NATIVE_CONTENT_POSITION` *
                 * `TARGETING_TYPE_NEGATIVE_KEYWORD_LIST` * `TARGETING_TYPE_OMID` * `TARGETING_TYPE_ON_SCREEN_POSITION` * `TARGETING_TYPE_OPERATING_SYSTEM` * `TARGETING_TYPE_PARENTAL_STATUS` *
                 * `TARGETING_TYPE_POI` * `TARGETING_TYPE_PROXIMITY_LOCATION_LIST` * `TARGETING_TYPE_REGIONAL_LOCATION_LIST` * `TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION` *
                 * `TARGETING_TYPE_SUB_EXCHANGE` * `TARGETING_TYPE_THIRD_PARTY_VERIFIER` * `TARGETING_TYPE_URL` * `TARGETING_TYPE_USER_REWARDED_CONTENT` * `TARGETING_TYPE_VIDEO_PLAYER_SIZE` *
                 * `TARGETING_TYPE_VIEWABILITY`
                 */
                targetingType:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    AssignedTargetingOption;
            }): Request<AssignedTargetingOption>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Required. The ID of the advertiser the line item belongs to. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. The ID of the line item the assigned targeting option will belong to. */
                lineItemId:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /**
                 * Required. Identifies the type of this assigned targeting option. Supported targeting types include: * `TARGETING_TYPE_AGE_RANGE` * `TARGETING_TYPE_APP` *
                 * `TARGETING_TYPE_APP_CATEGORY` * `TARGETING_TYPE_AUDIENCE_GROUP` * `TARGETING_TYPE_AUDIO_CONTENT_TYPE` * `TARGETING_TYPE_AUTHORIZED_SELLER_STATUS` * `TARGETING_TYPE_BROWSER` *
                 * `TARGETING_TYPE_BUSINESS_CHAIN` * `TARGETING_TYPE_CARRIER_AND_ISP` * `TARGETING_TYPE_CATEGORY` * `TARGETING_TYPE_CHANNEL` * `TARGETING_TYPE_CONTENT_DURATION` *
                 * `TARGETING_TYPE_CONTENT_GENRE` * `TARGETING_TYPE_CONTENT_INSTREAM_POSITION` * `TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION` * `TARGETING_TYPE_CONTENT_STREAM_TYPE` *
                 * `TARGETING_TYPE_DAY_AND_TIME` * `TARGETING_TYPE_DEVICE_MAKE_MODEL` * `TARGETING_TYPE_DEVICE_TYPE` * `TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION` *
                 * `TARGETING_TYPE_ENVIRONMENT` * `TARGETING_TYPE_EXCHANGE` * `TARGETING_TYPE_GENDER` * `TARGETING_TYPE_GEO_REGION` * `TARGETING_TYPE_HOUSEHOLD_INCOME` *
                 * `TARGETING_TYPE_INVENTORY_SOURCE` * `TARGETING_TYPE_INVENTORY_SOURCE_GROUP` * `TARGETING_TYPE_KEYWORD` * `TARGETING_TYPE_LANGUAGE` * `TARGETING_TYPE_NATIVE_CONTENT_POSITION` *
                 * `TARGETING_TYPE_NEGATIVE_KEYWORD_LIST` * `TARGETING_TYPE_OMID` * `TARGETING_TYPE_ON_SCREEN_POSITION` * `TARGETING_TYPE_OPERATING_SYSTEM` * `TARGETING_TYPE_PARENTAL_STATUS` *
                 * `TARGETING_TYPE_POI` * `TARGETING_TYPE_PROXIMITY_LOCATION_LIST` * `TARGETING_TYPE_REGIONAL_LOCATION_LIST` * `TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION` *
                 * `TARGETING_TYPE_SUB_EXCHANGE` * `TARGETING_TYPE_THIRD_PARTY_VERIFIER` * `TARGETING_TYPE_URL` * `TARGETING_TYPE_USER_REWARDED_CONTENT` * `TARGETING_TYPE_VIDEO_PLAYER_SIZE` *
                 * `TARGETING_TYPE_VIEWABILITY`
                 */
                targetingType:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: AssignedTargetingOption): Request<AssignedTargetingOption>;
            /**
             * Deletes an assigned targeting option from a line item. Requests to this endpoint cannot be made concurrently with the following requests updating the same line item: *
             * BulkEditAssignedTargetingOptions * BulkUpdate * UpdateLineItem * CreateLineItemAssignedTargetingOption
             */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Required. The ID of the advertiser the line item belongs to. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** Required. The ID of the assigned targeting option to delete. */
                assignedTargetingOptionId:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. The ID of the line item the assigned targeting option belongs to. */
                lineItemId:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /**
                 * Required. Identifies the type of this assigned targeting option. Supported targeting types include: * `TARGETING_TYPE_AGE_RANGE` * `TARGETING_TYPE_APP` *
                 * `TARGETING_TYPE_APP_CATEGORY` * `TARGETING_TYPE_AUDIENCE_GROUP` * `TARGETING_TYPE_AUDIO_CONTENT_TYPE` * `TARGETING_TYPE_AUTHORIZED_SELLER_STATUS` * `TARGETING_TYPE_BROWSER` *
                 * `TARGETING_TYPE_BUSINESS_CHAIN` * `TARGETING_TYPE_CARRIER_AND_ISP` * `TARGETING_TYPE_CATEGORY` * `TARGETING_TYPE_CHANNEL` * `TARGETING_TYPE_CONTENT_DURATION` *
                 * `TARGETING_TYPE_CONTENT_GENRE` * `TARGETING_TYPE_CONTENT_INSTREAM_POSITION` * `TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION` * `TARGETING_TYPE_CONTENT_STREAM_TYPE` *
                 * `TARGETING_TYPE_DAY_AND_TIME` * `TARGETING_TYPE_DEVICE_MAKE_MODEL` * `TARGETING_TYPE_DEVICE_TYPE` * `TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION` *
                 * `TARGETING_TYPE_ENVIRONMENT` * `TARGETING_TYPE_EXCHANGE` * `TARGETING_TYPE_GENDER` * `TARGETING_TYPE_GEO_REGION` * `TARGETING_TYPE_HOUSEHOLD_INCOME` *
                 * `TARGETING_TYPE_INVENTORY_SOURCE` * `TARGETING_TYPE_INVENTORY_SOURCE_GROUP` * `TARGETING_TYPE_KEYWORD` * `TARGETING_TYPE_LANGUAGE` * `TARGETING_TYPE_NATIVE_CONTENT_POSITION` *
                 * `TARGETING_TYPE_NEGATIVE_KEYWORD_LIST` * `TARGETING_TYPE_OMID` * `TARGETING_TYPE_ON_SCREEN_POSITION` * `TARGETING_TYPE_OPERATING_SYSTEM` * `TARGETING_TYPE_PARENTAL_STATUS` *
                 * `TARGETING_TYPE_POI` * `TARGETING_TYPE_PROXIMITY_LOCATION_LIST` * `TARGETING_TYPE_REGIONAL_LOCATION_LIST` * `TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION` *
                 * `TARGETING_TYPE_SUB_EXCHANGE` * `TARGETING_TYPE_THIRD_PARTY_VERIFIER` * `TARGETING_TYPE_URL` * `TARGETING_TYPE_USER_REWARDED_CONTENT` * `TARGETING_TYPE_VIDEO_PLAYER_SIZE` *
                 * `TARGETING_TYPE_VIEWABILITY`
                 */
                targetingType:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<{}>;
            /** Gets a single targeting option assigned to a line item. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Required. The ID of the advertiser the line item belongs to. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** Required. An identifier unique to the targeting type in this line item that identifies the assigned targeting option being requested. */
                assignedTargetingOptionId:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. The ID of the line item the assigned targeting option belongs to. */
                lineItemId:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /**
                 * Required. Identifies the type of this assigned targeting option. Supported targeting types include: * `TARGETING_TYPE_AGE_RANGE` * `TARGETING_TYPE_APP` *
                 * `TARGETING_TYPE_APP_CATEGORY` * `TARGETING_TYPE_AUDIENCE_GROUP` * `TARGETING_TYPE_AUDIO_CONTENT_TYPE` * `TARGETING_TYPE_AUTHORIZED_SELLER_STATUS` * `TARGETING_TYPE_BROWSER` *
                 * `TARGETING_TYPE_BUSINESS_CHAIN` * `TARGETING_TYPE_CARRIER_AND_ISP` * `TARGETING_TYPE_CATEGORY` * `TARGETING_TYPE_CHANNEL` * `TARGETING_TYPE_CONTENT_DURATION` *
                 * `TARGETING_TYPE_CONTENT_GENRE` * `TARGETING_TYPE_CONTENT_INSTREAM_POSITION` * `TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION` * `TARGETING_TYPE_CONTENT_STREAM_TYPE` *
                 * `TARGETING_TYPE_DAY_AND_TIME` * `TARGETING_TYPE_DEVICE_MAKE_MODEL` * `TARGETING_TYPE_DEVICE_TYPE` * `TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION` *
                 * `TARGETING_TYPE_ENVIRONMENT` * `TARGETING_TYPE_EXCHANGE` * `TARGETING_TYPE_GENDER` * `TARGETING_TYPE_GEO_REGION` * `TARGETING_TYPE_HOUSEHOLD_INCOME` *
                 * `TARGETING_TYPE_INVENTORY_SOURCE` * `TARGETING_TYPE_INVENTORY_SOURCE_GROUP` * `TARGETING_TYPE_KEYWORD` * `TARGETING_TYPE_LANGUAGE` * `TARGETING_TYPE_NATIVE_CONTENT_POSITION` *
                 * `TARGETING_TYPE_NEGATIVE_KEYWORD_LIST` * `TARGETING_TYPE_OMID` * `TARGETING_TYPE_ON_SCREEN_POSITION` * `TARGETING_TYPE_OPERATING_SYSTEM` * `TARGETING_TYPE_PARENTAL_STATUS` *
                 * `TARGETING_TYPE_POI` * `TARGETING_TYPE_PROXIMITY_LOCATION_LIST` * `TARGETING_TYPE_REGIONAL_LOCATION_LIST` * `TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION` *
                 * `TARGETING_TYPE_SUB_EXCHANGE` * `TARGETING_TYPE_THIRD_PARTY_VERIFIER` * `TARGETING_TYPE_URL` * `TARGETING_TYPE_USER_REWARDED_CONTENT` * `TARGETING_TYPE_VIDEO_PLAYER_SIZE` *
                 * `TARGETING_TYPE_VIEWABILITY` * `TARGETING_TYPE_YOUTUBE_CHANNEL` (only for `LINE_ITEM_TYPE_YOUTUBE_AND_PARTNERS_VIDEO_SEQUENCE` line items) * `TARGETING_TYPE_YOUTUBE_VIDEO` (only
                 * for `LINE_ITEM_TYPE_YOUTUBE_AND_PARTNERS_VIDEO_SEQUENCE` line items)
                 */
                targetingType:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<AssignedTargetingOption>;
            /** Lists the targeting options assigned to a line item. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Required. The ID of the advertiser the line item belongs to. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /**
                 * Allows filtering by assigned targeting option fields. Supported syntax: * Filter expressions are made up of one or more restrictions. * Restrictions can be combined by the
                 * logical operator `OR`. * A restriction has the form of `{field} {operator} {value}`. * All fields must use the `EQUALS (=)` operator. Supported fields: *
                 * `assignedTargetingOptionId` * `inheritance` Examples: * `AssignedTargetingOption` resources with ID 1 or 2: `assignedTargetingOptionId="1" OR assignedTargetingOptionId="2"` *
                 * `AssignedTargetingOption` resources with inheritance status of `NOT_INHERITED` or `INHERITED_FROM_PARTNER`: `inheritance="NOT_INHERITED" OR inheritance="INHERITED_FROM_PARTNER"`
                 * The length of this field should be no more than 500 characters. Reference our [filter `LIST` requests](/display-video/api/guides/how-tos/filters) guide for more information.
                 */
                filter?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. The ID of the line item to list assigned targeting options for. */
                lineItemId:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /**
                 * Field by which to sort the list. Acceptable values are: * `assignedTargetingOptionId` (default) The default sorting order is ascending. To specify descending order for a field,
                 * a suffix "desc" should be added to the field name. Example: `assignedTargetingOptionId desc`.
                 */
                orderBy?:
                    string;
                /** Requested page size. Must be between `1` and `5000`. If unspecified will default to `100`. Returns error code `INVALID_ARGUMENT` if an invalid value is specified. */
                pageSize?:
                    number;
                /**
                 * A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to
                 * `ListLineItemAssignedTargetingOptions` method. If not specified, the first page of results will be returned.
                 */
                pageToken?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /**
                 * Required. Identifies the type of assigned targeting options to list. Supported targeting types include: * `TARGETING_TYPE_AGE_RANGE` * `TARGETING_TYPE_APP` *
                 * `TARGETING_TYPE_APP_CATEGORY` * `TARGETING_TYPE_AUDIENCE_GROUP` * `TARGETING_TYPE_AUDIO_CONTENT_TYPE` * `TARGETING_TYPE_AUTHORIZED_SELLER_STATUS` * `TARGETING_TYPE_BROWSER` *
                 * `TARGETING_TYPE_BUSINESS_CHAIN` * `TARGETING_TYPE_CARRIER_AND_ISP` * `TARGETING_TYPE_CATEGORY` * `TARGETING_TYPE_CHANNEL` * `TARGETING_TYPE_CONTENT_DURATION` *
                 * `TARGETING_TYPE_CONTENT_GENRE` * `TARGETING_TYPE_CONTENT_INSTREAM_POSITION` * `TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION` * `TARGETING_TYPE_CONTENT_STREAM_TYPE` *
                 * `TARGETING_TYPE_DAY_AND_TIME` * `TARGETING_TYPE_DEVICE_MAKE_MODEL` * `TARGETING_TYPE_DEVICE_TYPE` * `TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION` *
                 * `TARGETING_TYPE_ENVIRONMENT` * `TARGETING_TYPE_EXCHANGE` * `TARGETING_TYPE_GENDER` * `TARGETING_TYPE_GEO_REGION` * `TARGETING_TYPE_HOUSEHOLD_INCOME` *
                 * `TARGETING_TYPE_INVENTORY_SOURCE` * `TARGETING_TYPE_INVENTORY_SOURCE_GROUP` * `TARGETING_TYPE_KEYWORD` * `TARGETING_TYPE_LANGUAGE` * `TARGETING_TYPE_NATIVE_CONTENT_POSITION` *
                 * `TARGETING_TYPE_NEGATIVE_KEYWORD_LIST` * `TARGETING_TYPE_OMID` * `TARGETING_TYPE_ON_SCREEN_POSITION` * `TARGETING_TYPE_OPERATING_SYSTEM` * `TARGETING_TYPE_PARENTAL_STATUS` *
                 * `TARGETING_TYPE_POI` * `TARGETING_TYPE_PROXIMITY_LOCATION_LIST` * `TARGETING_TYPE_REGIONAL_LOCATION_LIST` * `TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION` *
                 * `TARGETING_TYPE_SUB_EXCHANGE` * `TARGETING_TYPE_THIRD_PARTY_VERIFIER` * `TARGETING_TYPE_URL` * `TARGETING_TYPE_USER_REWARDED_CONTENT` * `TARGETING_TYPE_VIDEO_PLAYER_SIZE` *
                 * `TARGETING_TYPE_VIEWABILITY` * `TARGETING_TYPE_YOUTUBE_CHANNEL` (only for `LINE_ITEM_TYPE_YOUTUBE_AND_PARTNERS_VIDEO_SEQUENCE` line items) * `TARGETING_TYPE_YOUTUBE_VIDEO` (only
                 * for `LINE_ITEM_TYPE_YOUTUBE_AND_PARTNERS_VIDEO_SEQUENCE` line items)
                 */
                targetingType:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<ListLineItemAssignedTargetingOptionsResponse>;
        }
        interface TargetingTypesResource {
            assignedTargetingOptions:
                AssignedTargetingOptionsResource;
        }
        interface LineItemsResource {
            /**
             * Bulk edits targeting options under a single line item. The operation will delete the assigned targeting options provided in
             * BulkEditLineItemAssignedTargetingOptionsRequest.delete_requests and then create the assigned targeting options provided in
             * BulkEditLineItemAssignedTargetingOptionsRequest.create_requests. Requests to this endpoint cannot be made concurrently with the following requests updating the same line item: *
             * UpdateLineItem * CreateLineItemAssignedTargetingOption * DeleteLineItemAssignedTargetingOption
             */
            bulkEditLineItemAssignedTargetingOptions(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Required. The ID of the advertiser the line item belongs to. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. The ID of the line item the assigned targeting option will belong to. */
                lineItemId:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    BulkEditLineItemAssignedTargetingOptionsRequest;
            }): Request<BulkEditLineItemAssignedTargetingOptionsResponse>;
            bulkEditLineItemAssignedTargetingOptions(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Required. The ID of the advertiser the line item belongs to. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. The ID of the line item the assigned targeting option will belong to. */
                lineItemId:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: BulkEditLineItemAssignedTargetingOptionsRequest): Request<BulkEditLineItemAssignedTargetingOptionsResponse>;
            /** Lists assigned targeting options of a line item across targeting types. */
            bulkListLineItemAssignedTargetingOptions(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Required. The ID of the advertiser the line item belongs to. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /**
                 * Allows filtering by assigned targeting option fields. Supported syntax: * Filter expressions are made up of one or more restrictions. * Restrictions can be combined by the
                 * logical operator `OR`. * A restriction has the form of `{field} {operator} {value}`. * All fields must use the `EQUALS (=)` operator. Supported fields: * `targetingType` *
                 * `inheritance` Examples: * `AssignedTargetingOption` resources of targeting type `TARGETING_TYPE_PROXIMITY_LOCATION_LIST` or `TARGETING_TYPE_CHANNEL`:
                 * `targetingType="TARGETING_TYPE_PROXIMITY_LOCATION_LIST" OR targetingType="TARGETING_TYPE_CHANNEL"` * `AssignedTargetingOption` resources with inheritance status of
                 * `NOT_INHERITED` or `INHERITED_FROM_PARTNER`: `inheritance="NOT_INHERITED" OR inheritance="INHERITED_FROM_PARTNER"` The length of this field should be no more than 500
                 * characters. Reference our [filter `LIST` requests](/display-video/api/guides/how-tos/filters) guide for more information.
                 */
                filter?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. The ID of the line item to list assigned targeting options for. */
                lineItemId:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /**
                 * Field by which to sort the list. Acceptable values are: * `targetingType` (default) The default sorting order is ascending. To specify descending order for a field, a suffix
                 * "desc" should be added to the field name. Example: `targetingType desc`.
                 */
                orderBy?:
                    string;
                /**
                 * Requested page size. The size must be an integer between `1` and `5000`. If unspecified, the default is `5000`. Returns error code `INVALID_ARGUMENT` if an invalid value is
                 * specified.
                 */
                pageSize?:
                    number;
                /**
                 * A token that lets the client fetch the next page of results. Typically, this is the value of next_page_token returned from the previous call to
                 * `BulkListLineItemAssignedTargetingOptions` method. If not specified, the first page of results will be returned.
                 */
                pageToken?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<BulkListLineItemAssignedTargetingOptionsResponse>;
            /** Creates a new line item. Returns the newly created line item if successful. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Output only. The unique ID of the advertiser the line item belongs to. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    LineItem;
            }): Request<LineItem>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Output only. The unique ID of the advertiser the line item belongs to. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: LineItem): Request<LineItem>;
            /**
             * Deletes a line item. Returns error code `NOT_FOUND` if the line item does not exist. The line item should be archived first, i.e. set entity_status to `ENTITY_STATUS_ARCHIVED`, to
             * be able to delete it.
             */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** The ID of the advertiser this line item belongs to. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** The ID of the line item to delete. */
                lineItemId:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<{}>;
            /**
             * Creates a new line item with settings (including targeting) inherited from the insertion order and an `ENTITY_STATUS_DRAFT` entity_status. Returns the newly created line item if
             * successful. There are default values based on the three fields: * The insertion order's insertion_order_type * The insertion order's automation_type * The given line_item_type
             */
            generateDefault(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Required. The ID of the advertiser this line item belongs to. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    GenerateDefaultLineItemRequest;
            }): Request<LineItem>;
            generateDefault(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Required. The ID of the advertiser this line item belongs to. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: GenerateDefaultLineItemRequest): Request<LineItem>;
            /** Gets a line item. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Required. The ID of the advertiser this line item belongs to. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. The ID of the line item to fetch. */
                lineItemId:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<LineItem>;
            /**
             * Lists line items in an advertiser. The order is defined by the order_by parameter. If a filter by entity_status is not specified, line items with `ENTITY_STATUS_ARCHIVED` will not
             * be included in the results.
             */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Required. The ID of the advertiser to list line items for. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /**
                 * Allows filtering by line item fields. Supported syntax: * Filter expressions are made up of one or more restrictions. * Restrictions can be combined by `AND` or `OR` logical
                 * operators. A sequence of restrictions implicitly uses `AND`. * A restriction has the form of `{field} {operator} {value}`. * The `flight.dateRange.endDate` field must use the
                 * `LESS THAN (<)` operator. * The `updateTime` field must use the `GREATER THAN OR EQUAL TO (>=)` or `LESS THAN OR EQUAL TO (<=)` operators. * The `warningMessages` field must use
                 * the `HAS (:)` operator. * All other fields must use the `EQUALS (=)` operator. Supported fields: * `campaignId` * `displayName` * `entityStatus` * `flight.dateRange.endDate`
                 * (input formatted as `YYYY-MM-DD`) **Deprecated. Not available after June 8, 2023** * `flight.triggerId` * `insertionOrderId` * `lineItemId` * `lineItemType` *
                 * `targetedChannelId` * `targetedNegativeKeywordListId` * `updateTime` (input in ISO 8601 format, or `YYYY-MM-DDTHH:MM:SSZ`) * `warningMessages` Examples: * All line items under
                 * an insertion order: `insertionOrderId="1234"` * All `ENTITY_STATUS_ACTIVE` or `ENTITY_STATUS_PAUSED` and `LINE_ITEM_TYPE_DISPLAY_DEFAULT` line items under an advertiser:
                 * `(entityStatus="ENTITY_STATUS_ACTIVE" OR entityStatus="ENTITY_STATUS_PAUSED") AND lineItemType="LINE_ITEM_TYPE_DISPLAY_DEFAULT"` * All line items whose flight dates end before
                 * March 28, 2019: `flight.dateRange.endDate<"2019-03-28"` * All line items that have `NO_VALID_CREATIVE` in `warningMessages`: `warningMessages:"NO_VALID_CREATIVE"` * All line
                 * items with an update time less than or equal to 2020-11-04T18:54:47Z (format of ISO 8601): `updateTime<="2020-11-04T18:54:47Z"` * All line items with an update time greater than
                 * or equal to 2020-11-04T18:54:47Z (format of ISO 8601): `updateTime>="2020-11-04T18:54:47Z"` * All line items that are using both the specified channel and specified negative
                 * keyword list in their targeting: `targetedNegativeKeywordListId=789 AND targetedChannelId=12345` The length of this field should be no more than 500 characters. Reference our
                 * [filter `LIST` requests](/display-video/api/guides/how-tos/filters) guide for more information.
                 */
                filter?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /**
                 * Field by which to sort the list. Acceptable values are: * `displayName` (default) * `entityStatus` * `flight.dateRange.endDate` **Deprecated. Not available after June 8, 2023**
                 * * `updateTime` The default sorting order is ascending. To specify descending order for a field, a suffix "desc" should be added to the field name. Example: `displayName desc`.
                 */
                orderBy?:
                    string;
                /** Requested page size. Must be between `1` and `200`. If unspecified will default to `100`. Returns error code `INVALID_ARGUMENT` if an invalid value is specified. */
                pageSize?:
                    number;
                /**
                 * A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `ListLineItems` method. If not
                 * specified, the first page of results will be returned.
                 */
                pageToken?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<ListLineItemsResponse>;
            /**
             * Updates an existing line item. Returns the updated line item if successful. Requests to this endpoint cannot be made concurrently with the following requests updating the same line
             * item: * BulkEditAssignedTargetingOptions * BulkUpdateLineItems * CreateLineItemAssignedTargetingOption * DeleteLineItemAssignedTargetingOption
             */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Output only. The unique ID of the advertiser the line item belongs to. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Output only. The unique ID of the line item. Assigned by the system. */
                lineItemId:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Required. The mask to control which fields to update. */
                updateMask?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    LineItem;
            }): Request<LineItem>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Output only. The unique ID of the advertiser the line item belongs to. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Output only. The unique ID of the line item. Assigned by the system. */
                lineItemId:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Required. The mask to control which fields to update. */
                updateMask?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: LineItem): Request<LineItem>;
            targetingTypes:
                TargetingTypesResource;
        }
        interface AssignedLocationsResource {
            /**
             * Bulk edits multiple assignments between locations and a single location list. The operation will delete the assigned locations provided in
             * BulkEditAssignedLocationsRequest.deleted_assigned_locations and then create the assigned locations provided in BulkEditAssignedLocationsRequest.created_assigned_locations.
             */
            bulkEdit(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Required. The ID of the DV360 advertiser to which the location list belongs. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. The ID of the location list to which these assignments are assigned. */
                locationListId:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    BulkEditAssignedLocationsRequest;
            }): Request<BulkEditAssignedLocationsResponse>;
            bulkEdit(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Required. The ID of the DV360 advertiser to which the location list belongs. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. The ID of the location list to which these assignments are assigned. */
                locationListId:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: BulkEditAssignedLocationsRequest): Request<BulkEditAssignedLocationsResponse>;
            /** Creates an assignment between a location and a location list. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Required. The ID of the DV360 advertiser to which the location list belongs. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. The ID of the location list for which the assignment will be created. */
                locationListId:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    AssignedLocation;
            }): Request<AssignedLocation>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Required. The ID of the DV360 advertiser to which the location list belongs. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. The ID of the location list for which the assignment will be created. */
                locationListId:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: AssignedLocation): Request<AssignedLocation>;
            /** Deletes the assignment between a location and a location list. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Required. The ID of the DV360 advertiser to which the location list belongs. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** Required. The ID of the assigned location to delete. */
                assignedLocationId:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. The ID of the location list to which this assignment is assigned. */
                locationListId:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<{}>;
            /** Lists locations assigned to a location list. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Required. The ID of the DV360 advertiser to which the location list belongs. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /**
                 * Allows filtering by location list assignment fields. Supported syntax: * Filter expressions are made up of one or more restrictions. * Restrictions can be combined by the `OR`
                 * logical operator. * A restriction has the form of `{field} {operator} {value}`. * All fields must use the `EQUALS (=)` operator. Supported fields: * `assignedLocationId` The
                 * length of this field should be no more than 500 characters. Reference our [filter `LIST` requests](/display-video/api/guides/how-tos/filters) guide for more information.
                 */
                filter?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. The ID of the location list to which these assignments are assigned. */
                locationListId:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /**
                 * Field by which to sort the list. Acceptable values are: * `assignedLocationId` (default) The default sorting order is ascending. To specify descending order for a field, a
                 * suffix " desc" should be added to the field name. Example: `assignedLocationId desc`.
                 */
                orderBy?:
                    string;
                /** Requested page size. Must be between `1` and `200`. If unspecified will default to `100`. Returns error code `INVALID_ARGUMENT` if an invalid value is specified. */
                pageSize?:
                    number;
                /**
                 * A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `ListAssignedLocations`
                 * method. If not specified, the first page of results will be returned.
                 */
                pageToken?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<ListAssignedLocationsResponse>;
        }
        interface LocationListsResource {
            /** Creates a new location list. Returns the newly created location list if successful. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Required. The ID of the DV360 advertiser to which the location list belongs. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    LocationList;
            }): Request<LocationList>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Required. The ID of the DV360 advertiser to which the location list belongs. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: LocationList): Request<LocationList>;
            /** Gets a location list. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Required. The ID of the DV360 advertiser to which the fetched location list belongs. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. The ID of the location list to fetch. */
                locationListId:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<LocationList>;
            /** Lists location lists based on a given advertiser id. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Required. The ID of the DV360 advertiser to which the fetched location lists belong. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /**
                 * Allows filtering by location list fields. Supported syntax: * Filter expressions are made up of one or more restrictions. * Restrictions can be combined by `AND` or `OR` logical
                 * operators. A sequence of restrictions implicitly uses `AND`. * A restriction has the form of `{field} {operator} {value}`. * All fields must use the `EQUALS (=)` operator.
                 * Supported fields: * `locationType` Examples: * All regional location list: `locationType="TARGETING_LOCATION_TYPE_REGIONAL"` * All proximity location list:
                 * `locationType="TARGETING_LOCATION_TYPE_PROXIMITY"` The length of this field should be no more than 500 characters. Reference our [filter `LIST`
                 * requests](/display-video/api/guides/how-tos/filters) guide for more information.
                 */
                filter?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /**
                 * Field by which to sort the list. Acceptable values are: * `locationListId` (default) * `displayName` The default sorting order is ascending. To specify descending order for a
                 * field, a suffix "desc" should be added to the field name. Example: `displayName desc`.
                 */
                orderBy?:
                    string;
                /** Requested page size. Must be between `1` and `200`. Defaults to `100` if not set. Returns error code `INVALID_ARGUMENT` if an invalid value is specified. */
                pageSize?:
                    number;
                /**
                 * A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `ListLocationLists` method. If
                 * not specified, the first page of results will be returned.
                 */
                pageToken?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<ListLocationListsResponse>;
            /** Updates a location list. Returns the updated location list if successful. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Required. The ID of the DV360 advertiser to which the location lists belongs. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Output only. The unique ID of the location list. Assigned by the system. */
                locationListId:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Required. The mask to control which fields to update. */
                updateMask?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    LocationList;
            }): Request<LocationList>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Required. The ID of the DV360 advertiser to which the location lists belongs. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Output only. The unique ID of the location list. Assigned by the system. */
                locationListId:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Required. The mask to control which fields to update. */
                updateMask?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: LocationList): Request<LocationList>;
            assignedLocations:
                AssignedLocationsResource;
        }
        interface ManualTriggersResource {
            /**
             * Activates a manual trigger. Each activation of the manual trigger must be at least 5 minutes apart, otherwise an error will be returned. **Warning:** Line Items using manual
             * triggers no longer serve in Display & Video 360. This method will sunset on August 1, 2023. Read our [feature deprecation
             * announcement](/display-video/api/deprecations#features.manual_triggers) for more information.
             */
            activate(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Required. The ID of the advertiser that the manual trigger belongs. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Required. The ID of the manual trigger to activate. */
                triggerId:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    ActivateManualTriggerRequest;
            }): Request<ManualTrigger>;
            activate(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Required. The ID of the advertiser that the manual trigger belongs. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Required. The ID of the manual trigger to activate. */
                triggerId:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: ActivateManualTriggerRequest): Request<ManualTrigger>;
            /**
             * Creates a new manual trigger. Returns the newly created manual trigger if successful. **Warning:** Line Items using manual triggers no longer serve in Display & Video 360. This
             * method will sunset on August 1, 2023. Read our [feature deprecation announcement](/display-video/api/deprecations#features.manual_triggers) for more information.
             */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Required. Immutable. The unique ID of the advertiser that the manual trigger belongs to. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    ManualTrigger;
            }): Request<ManualTrigger>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Required. Immutable. The unique ID of the advertiser that the manual trigger belongs to. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: ManualTrigger): Request<ManualTrigger>;
            /**
             * Deactivates a manual trigger. **Warning:** Line Items using manual triggers no longer serve in Display & Video 360. This method will sunset on August 1, 2023. Read our [feature
             * deprecation announcement](/display-video/api/deprecations#features.manual_triggers) for more information.
             */
            deactivate(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Required. The ID of the advertiser that the manual trigger belongs. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Required. The ID of the manual trigger to deactivate. */
                triggerId:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    DeactivateManualTriggerRequest;
            }): Request<ManualTrigger>;
            deactivate(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Required. The ID of the advertiser that the manual trigger belongs. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Required. The ID of the manual trigger to deactivate. */
                triggerId:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: DeactivateManualTriggerRequest): Request<ManualTrigger>;
            /**
             * Gets a manual trigger. **Warning:** Line Items using manual triggers no longer serve in Display & Video 360. This method will sunset on August 1, 2023. Read our [feature deprecation
             * announcement](/display-video/api/deprecations#features.manual_triggers) for more information.
             */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Required. The ID of the advertiser this manual trigger belongs to. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Required. The ID of the manual trigger to fetch. */
                triggerId:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<ManualTrigger>;
            /**
             * Lists manual triggers that are accessible to the current user for a given advertiser ID. The order is defined by the order_by parameter. A single advertiser_id is required.
             * **Warning:** Line Items using manual triggers no longer serve in Display & Video 360. This method will sunset on August 1, 2023. Read our [feature deprecation
             * announcement](/display-video/api/deprecations#features.manual_triggers) for more information.
             */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Required. The ID of the advertiser that the fetched manual triggers belong to. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /**
                 * Allows filtering by manual trigger fields. Supported syntax: * Filter expressions are made up of one or more restrictions. * Restrictions can be combined by `AND` or `OR`
                 * logical operators. A sequence of restrictions implicitly uses `AND`. * A restriction has the form of `{field} {operator} {value}`. * All fields must use the `EQUALS (=)`
                 * operator. Supported fields: * `displayName` * `state` Examples: * All active manual triggers under an advertiser: `state="ACTIVE"` The length of this field should be no more
                 * than 500 characters. Reference our [filter `LIST` requests](/display-video/api/guides/how-tos/filters) guide for more information.
                 */
                filter?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /**
                 * Field by which to sort the list. Acceptable values are: * `displayName` (default) * `state` The default sorting order is ascending. To specify descending order for a field, a
                 * suffix "desc" should be added to the field name. For example, `displayName desc`.
                 */
                orderBy?:
                    string;
                /** Requested page size. Must be between `1` and `200`. If unspecified will default to `100`. */
                pageSize?:
                    number;
                /**
                 * A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `ListManualTriggers` method.
                 * If not specified, the first page of results will be returned.
                 */
                pageToken?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<ListManualTriggersResponse>;
            /**
             * Updates a manual trigger. Returns the updated manual trigger if successful. **Warning:** Line Items using manual triggers no longer serve in Display & Video 360. This method will
             * sunset on August 1, 2023. Read our [feature deprecation announcement](/display-video/api/deprecations#features.manual_triggers) for more information.
             */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Required. Immutable. The unique ID of the advertiser that the manual trigger belongs to. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Output only. The unique ID of the manual trigger. */
                triggerId:
                    string;
                /** Required. The mask to control which fields to update. */
                updateMask?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    ManualTrigger;
            }): Request<ManualTrigger>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Required. Immutable. The unique ID of the advertiser that the manual trigger belongs to. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Output only. The unique ID of the manual trigger. */
                triggerId:
                    string;
                /** Required. The mask to control which fields to update. */
                updateMask?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: ManualTrigger): Request<ManualTrigger>;
        }
        interface NegativeKeywordsResource {
            /**
             * Bulk edits negative keywords in a single negative keyword list. The operation will delete the negative keywords provided in BulkEditNegativeKeywordsRequest.deleted_negative_keywords
             * and then create the negative keywords provided in BulkEditNegativeKeywordsRequest.created_negative_keywords. This operation is guaranteed to be atomic and will never result in a
             * partial success or partial failure.
             */
            bulkEdit(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Required. The ID of the DV360 advertiser to which the parent negative keyword list belongs. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. The ID of the parent negative keyword list to which the negative keywords belong. */
                negativeKeywordListId:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    BulkEditNegativeKeywordsRequest;
            }): Request<BulkEditNegativeKeywordsResponse>;
            bulkEdit(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Required. The ID of the DV360 advertiser to which the parent negative keyword list belongs. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. The ID of the parent negative keyword list to which the negative keywords belong. */
                negativeKeywordListId:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: BulkEditNegativeKeywordsRequest): Request<BulkEditNegativeKeywordsResponse>;
            /** Creates a negative keyword in a negative keyword list. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Required. The ID of the DV360 advertiser to which the parent negative keyword list belongs. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. The ID of the parent negative keyword list in which the negative keyword will be created. */
                negativeKeywordListId:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    NegativeKeyword;
            }): Request<NegativeKeyword>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Required. The ID of the DV360 advertiser to which the parent negative keyword list belongs. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. The ID of the parent negative keyword list in which the negative keyword will be created. */
                negativeKeywordListId:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: NegativeKeyword): Request<NegativeKeyword>;
            /** Deletes a negative keyword from a negative keyword list. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Required. The ID of the DV360 advertiser to which the parent negative keyword list belongs. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. The keyword value of the negative keyword to delete. */
                keywordValue:
                    string;
                /** Required. The ID of the parent negative keyword list to which the negative keyword belongs. */
                negativeKeywordListId:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<{}>;
            /** Lists negative keywords in a negative keyword list. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Required. The ID of the DV360 advertiser to which the parent negative keyword list belongs. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /**
                 * Allows filtering by negative keyword fields. Supported syntax: * Filter expressions for negative keywords can only contain at most one restriction. * A restriction has the form
                 * of `{field} {operator} {value}`. * All fields must use the `HAS (:)` operator. Supported fields: * `keywordValue` Examples: * All negative keywords for which the keyword value
                 * contains "google": `keywordValue : "google"` The length of this field should be no more than 500 characters. Reference our [filter `LIST`
                 * requests](/display-video/api/guides/how-tos/filters) guide for more information.
                 */
                filter?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. The ID of the parent negative keyword list to which the requested negative keywords belong. */
                negativeKeywordListId:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /**
                 * Field by which to sort the list. Acceptable values are: * `keywordValue` (default) The default sorting order is ascending. To specify descending order for a field, a suffix "
                 * desc" should be added to the field name. Example: `keywordValue desc`.
                 */
                orderBy?:
                    string;
                /** Requested page size. Must be between `1` and `1000`. If unspecified will default to `100`. Returns error code `INVALID_ARGUMENT` if an invalid value is specified. */
                pageSize?:
                    number;
                /**
                 * A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `ListNegativeKeywords` method.
                 * If not specified, the first page of results will be returned.
                 */
                pageToken?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<ListNegativeKeywordsResponse>;
            /**
             * Replaces all negative keywords in a single negative keyword list. The operation will replace the keywords in a negative keyword list with keywords provided in
             * ReplaceNegativeKeywordsRequest.new_negative_keywords.
             */
            replace(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Required. The ID of the DV360 advertiser to which the parent negative keyword list belongs. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. The ID of the parent negative keyword list to which the negative keywords belong. */
                negativeKeywordListId:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    ReplaceNegativeKeywordsRequest;
            }): Request<ReplaceNegativeKeywordsResponse>;
            replace(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Required. The ID of the DV360 advertiser to which the parent negative keyword list belongs. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. The ID of the parent negative keyword list to which the negative keywords belong. */
                negativeKeywordListId:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: ReplaceNegativeKeywordsRequest): Request<ReplaceNegativeKeywordsResponse>;
        }
        interface NegativeKeywordListsResource {
            /** Creates a new negative keyword list. Returns the newly created negative keyword list if successful. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Required. The ID of the DV360 advertiser to which the negative keyword list will belong. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    NegativeKeywordList;
            }): Request<NegativeKeywordList>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Required. The ID of the DV360 advertiser to which the negative keyword list will belong. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: NegativeKeywordList): Request<NegativeKeywordList>;
            /** Deletes a negative keyword list given an advertiser ID and a negative keyword list ID. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Required. The ID of the DV360 advertiser to which the negative keyword list belongs. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. The ID of the negative keyword list to delete. */
                negativeKeywordListId:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<{}>;
            /** Gets a negative keyword list given an advertiser ID and a negative keyword list ID. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Required. The ID of the DV360 advertiser to which the fetched negative keyword list belongs. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. The ID of the negative keyword list to fetch. */
                negativeKeywordListId:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<NegativeKeywordList>;
            /** Lists negative keyword lists based on a given advertiser id. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Required. The ID of the DV360 advertiser to which the fetched negative keyword lists belong. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Requested page size. Must be between `1` and `200`. Defaults to `100` if not set. Returns error code `INVALID_ARGUMENT` if an invalid value is specified. */
                pageSize?:
                    number;
                /**
                 * A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `ListNegativeKeywordLists`
                 * method. If not specified, the first page of results will be returned.
                 */
                pageToken?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<ListNegativeKeywordListsResponse>;
            /** Updates a negative keyword list. Returns the updated negative keyword list if successful. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Required. The ID of the DV360 advertiser to which the negative keyword list belongs. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Output only. The unique ID of the negative keyword list. Assigned by the system. */
                negativeKeywordListId:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Required. The mask to control which fields to update. */
                updateMask?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    NegativeKeywordList;
            }): Request<NegativeKeywordList>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Required. The ID of the DV360 advertiser to which the negative keyword list belongs. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Output only. The unique ID of the negative keyword list. Assigned by the system. */
                negativeKeywordListId:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Required. The mask to control which fields to update. */
                updateMask?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: NegativeKeywordList): Request<NegativeKeywordList>;
            negativeKeywords:
                NegativeKeywordsResource;
        }
        interface AssignedTargetingOptionsResource {
            /** Assigns a targeting option to an advertiser. Returns the assigned targeting option if successful. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Required. The ID of the advertiser. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /**
                 * Required. Identifies the type of this assigned targeting option. Supported targeting types: * `TARGETING_TYPE_CHANNEL` * `TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION` *
                 * `TARGETING_TYPE_OMID` * `TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION`
                 */
                targetingType:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    AssignedTargetingOption;
            }): Request<AssignedTargetingOption>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Required. The ID of the advertiser. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /**
                 * Required. Identifies the type of this assigned targeting option. Supported targeting types: * `TARGETING_TYPE_CHANNEL` * `TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION` *
                 * `TARGETING_TYPE_OMID` * `TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION`
                 */
                targetingType:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: AssignedTargetingOption): Request<AssignedTargetingOption>;
            /** Deletes an assigned targeting option from an advertiser. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Required. The ID of the advertiser. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** Required. The ID of the assigned targeting option to delete. */
                assignedTargetingOptionId:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /**
                 * Required. Identifies the type of this assigned targeting option. Supported targeting types: * `TARGETING_TYPE_CHANNEL` * `TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION` *
                 * `TARGETING_TYPE_OMID` * `TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION`
                 */
                targetingType:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<{}>;
            /** Gets a single targeting option assigned to an advertiser. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Required. The ID of the advertiser. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** Required. An identifier unique to the targeting type in this advertiser that identifies the assigned targeting option being requested. */
                assignedTargetingOptionId:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /**
                 * Required. Identifies the type of this assigned targeting option. Supported targeting types: * `TARGETING_TYPE_CHANNEL` * `TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION` *
                 * `TARGETING_TYPE_OMID` * `TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION` * `TARGETING_TYPE_YOUTUBE_VIDEO` * `TARGETING_TYPE_YOUTUBE_CHANNEL`
                 */
                targetingType:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<AssignedTargetingOption>;
            /** Lists the targeting options assigned to an advertiser. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Required. The ID of the advertiser. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /**
                 * Allows filtering by assigned targeting option fields. Supported syntax: * Filter expressions are made up of one or more restrictions. * Restrictions can be combined by the `OR`
                 * logical operator. * A restriction has the form of `{field} {operator} {value}`. * All fields must use the `EQUALS (=)` operator. Supported fields: * `assignedTargetingOptionId`
                 * Examples: * `AssignedTargetingOption` with ID 123456: `assignedTargetingOptionId="123456"` The length of this field should be no more than 500 characters. Reference our [filter
                 * `LIST` requests](/display-video/api/guides/how-tos/filters) guide for more information.
                 */
                filter?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /**
                 * Field by which to sort the list. Acceptable values are: * `assignedTargetingOptionId` (default) The default sorting order is ascending. To specify descending order for a field,
                 * a suffix "desc" should be added to the field name. Example: `assignedTargetingOptionId desc`.
                 */
                orderBy?:
                    string;
                /** Requested page size. Must be between `1` and `5000`. If unspecified will default to `100`. Returns error code `INVALID_ARGUMENT` if an invalid value is specified. */
                pageSize?:
                    number;
                /**
                 * A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to
                 * `ListAdvertiserAssignedTargetingOptions` method. If not specified, the first page of results will be returned.
                 */
                pageToken?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /**
                 * Required. Identifies the type of assigned targeting options to list. Supported targeting types: * `TARGETING_TYPE_CHANNEL` * `TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION` *
                 * `TARGETING_TYPE_OMID` * `TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION` * `TARGETING_TYPE_YOUTUBE_VIDEO` * `TARGETING_TYPE_YOUTUBE_CHANNEL`
                 */
                targetingType:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<ListAdvertiserAssignedTargetingOptionsResponse>;
        }
        interface TargetingTypesResource {
            assignedTargetingOptions:
                AssignedTargetingOptionsResource;
        }
        interface AdvertisersResource {
            /**
             * Audits an advertiser. Returns the counts of used entities per resource type under the advertiser provided. Used entities count towards their respective resource limit. See
             * https://support.google.com/displayvideo/answer/6071450.
             */
            audit(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Required. The ID of the advertiser to audit. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /**
                 * Optional. The specific fields to return. If no mask is specified, all fields in the response proto will be filled. Valid values are: * usedLineItemsCount *
                 * usedInsertionOrdersCount * usedCampaignsCount * channelsCount * negativelyTargetedChannelsCount * negativeKeywordListsCount * adGroupCriteriaCount * campaignCriteriaCount
                 */
                readMask?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<AuditAdvertiserResponse>;
            /**
             * Bulk edits targeting options under a single advertiser. The operation will delete the assigned targeting options provided in
             * BulkEditAdvertiserAssignedTargetingOptionsRequest.delete_requests and then create the assigned targeting options provided in
             * BulkEditAdvertiserAssignedTargetingOptionsRequest.create_requests .
             */
            bulkEditAdvertiserAssignedTargetingOptions(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Required. The ID of the advertiser. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    BulkEditAdvertiserAssignedTargetingOptionsRequest;
            }): Request<BulkEditAdvertiserAssignedTargetingOptionsResponse>;
            bulkEditAdvertiserAssignedTargetingOptions(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Required. The ID of the advertiser. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: BulkEditAdvertiserAssignedTargetingOptionsRequest): Request<BulkEditAdvertiserAssignedTargetingOptionsResponse>;
            /** Lists assigned targeting options of an advertiser across targeting types. */
            bulkListAdvertiserAssignedTargetingOptions(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Required. The ID of the advertiser the line item belongs to. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /**
                 * Allows filtering by assigned targeting option fields. Supported syntax: * Filter expressions are made up of one or more restrictions. * Restrictions can be combined by the `OR`
                 * logical operator. * A restriction has the form of `{field} {operator} {value}`. * All fields must use the `EQUALS (=) operator`. Supported fields: * `targetingType` Examples: *
                 * targetingType with value TARGETING_TYPE_CHANNEL `targetingType="TARGETING_TYPE_CHANNEL"` The length of this field should be no more than 500 characters. Reference our [filter
                 * `LIST` requests](/display-video/api/guides/how-tos/filters) guide for more information.
                 */
                filter?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /**
                 * Field by which to sort the list. Acceptable values are: * `targetingType` (default) The default sorting order is ascending. To specify descending order for a field, a suffix
                 * "desc" should be added to the field name. Example: `targetingType desc`.
                 */
                orderBy?:
                    string;
                /**
                 * Requested page size. The size must be an integer between `1` and `5000`. If unspecified, the default is '5000'. Returns error code `INVALID_ARGUMENT` if an invalid value is
                 * specified.
                 */
                pageSize?:
                    number;
                /**
                 * A token that lets the client fetch the next page of results. Typically, this is the value of next_page_token returned from the previous call to
                 * `BulkListAdvertiserAssignedTargetingOptions` method. If not specified, the first page of results will be returned.
                 */
                pageToken?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<BulkListAdvertiserAssignedTargetingOptionsResponse>;
            /** Creates a new advertiser. Returns the newly created advertiser if successful. This method can take up to 180 seconds to complete. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    Advertiser;
            }): Request<Advertiser>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: Advertiser): Request<Advertiser>;
            /**
             * Deletes an advertiser. Deleting an advertiser will delete all of its child resources, for example, campaigns, insertion orders and line items. A deleted advertiser cannot be
             * recovered.
             */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** The ID of the advertiser we need to delete. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<{}>;
            /** Gets an advertiser. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Required. The ID of the advertiser to fetch. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<Advertiser>;
            /** Lists advertisers that are accessible to the current user. The order is defined by the order_by parameter. A single partner_id is required. Cross-partner listing is not supported. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /**
                 * Allows filtering by advertiser fields. Supported syntax: * Filter expressions are made up of one or more restrictions. * Restrictions can be combined by `AND` or `OR` logical
                 * operators. * A restriction has the form of `{field} {operator} {value}`. * The `updateTime` field must use the `GREATER THAN OR EQUAL TO (>=)` or `LESS THAN OR EQUAL TO (<=)`
                 * operators. * All other fields must use the `EQUALS (=)` operator. Supported fields: * `advertiserId` * `displayName` * `entityStatus` * `updateTime` (input in ISO 8601 format,
                 * or `YYYY-MM-DDTHH:MM:SSZ`) Examples: * All active advertisers under a partner: `entityStatus="ENTITY_STATUS_ACTIVE"` * All advertisers with an update time less than or equal to
                 * 2020-11-04T18:54:47Z (format of ISO 8601): `updateTime<="2020-11-04T18:54:47Z"` * All advertisers with an update time greater than or equal to 2020-11-04T18:54:47Z (format of
                 * ISO 8601): `updateTime>="2020-11-04T18:54:47Z"` The length of this field should be no more than 500 characters. Reference our [filter `LIST`
                 * requests](/display-video/api/guides/how-tos/filters) guide for more information.
                 */
                filter?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /**
                 * Field by which to sort the list. Acceptable values are: * `displayName` (default) * `entityStatus` * `updateTime` The default sorting order is ascending. To specify descending
                 * order for a field, a suffix "desc" should be added to the field name. For example, `displayName desc`.
                 */
                orderBy?:
                    string;
                /** Requested page size. Must be between `1` and `200`. If unspecified will default to `100`. */
                pageSize?:
                    number;
                /**
                 * A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `ListAdvertisers` method. If
                 * not specified, the first page of results will be returned.
                 */
                pageToken?:
                    string;
                /** Required. The ID of the partner that the fetched advertisers should all belong to. The system only supports listing advertisers for one partner at a time. */
                partnerId?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<ListAdvertisersResponse>;
            /** Updates an existing advertiser. Returns the updated advertiser if successful. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Output only. The unique ID of the advertiser. Assigned by the system. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Required. The mask to control which fields to update. */
                updateMask?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    Advertiser;
            }): Request<Advertiser>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Output only. The unique ID of the advertiser. Assigned by the system. */
                advertiserId:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Required. The mask to control which fields to update. */
                updateMask?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: Advertiser): Request<Advertiser>;
            assets:
                AssetsResource;
            campaigns:
                CampaignsResource;
            channels:
                ChannelsResource;
            creatives:
                CreativesResource;
            insertionOrders:
                InsertionOrdersResource;
            invoices:
                InvoicesResource;
            lineItems:
                LineItemsResource;
            locationLists:
                LocationListsResource;
            manualTriggers:
                ManualTriggersResource;
            negativeKeywordLists:
                NegativeKeywordListsResource;
            targetingTypes:
                TargetingTypesResource;
        }
        interface CombinedAudiencesResource {
            /** Gets a combined audience. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** The ID of the advertiser that has access to the fetched combined audience. */
                advertiserId?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Required. The ID of the combined audience to fetch. */
                combinedAudienceId:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** The ID of the partner that has access to the fetched combined audience. */
                partnerId?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<CombinedAudience>;
            /** Lists combined audiences. The order is defined by the order_by parameter. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** The ID of the advertiser that has access to the fetched combined audiences. */
                advertiserId?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /**
                 * Allows filtering by combined audience fields. Supported syntax: * Filter expressions for combined audiences can only contain at most one restriction. * A restriction has the
                 * form of `{field} {operator} {value}`. * All fields must use the `HAS (:)` operator. Supported fields: * `displayName` Examples: * All combined audiences for which the display
                 * name contains "Google": `displayName : "Google"`. The length of this field should be no more than 500 characters. Reference our [filter `LIST`
                 * requests](/display-video/api/guides/how-tos/filters) guide for more information.
                 */
                filter?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /**
                 * Field by which to sort the list. Acceptable values are: * `combinedAudienceId` (default) * `displayName` The default sorting order is ascending. To specify descending order for
                 * a field, a suffix "desc" should be added to the field name. Example: `displayName desc`.
                 */
                orderBy?:
                    string;
                /** Requested page size. Must be between `1` and `200`. If unspecified will default to `100`. Returns error code `INVALID_ARGUMENT` if an invalid value is specified. */
                pageSize?:
                    number;
                /**
                 * A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `ListCombinedAudiences`
                 * method. If not specified, the first page of results will be returned.
                 */
                pageToken?:
                    string;
                /** The ID of the partner that has access to the fetched combined audiences. */
                partnerId?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<ListCombinedAudiencesResponse>;
        }
        interface ScriptsResource {
            /** Creates a new custom bidding script. Returns the newly created script if successful. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** The ID of the advertiser that owns the parent custom bidding algorithm. */
                advertiserId?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Required. The ID of the custom bidding algorithm that owns the script. */
                customBiddingAlgorithmId:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** The ID of the partner that owns the parent custom bidding algorithm. Only this partner will have write access to this custom bidding script. */
                partnerId?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    CustomBiddingScript;
            }): Request<CustomBiddingScript>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** The ID of the advertiser that owns the parent custom bidding algorithm. */
                advertiserId?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Required. The ID of the custom bidding algorithm that owns the script. */
                customBiddingAlgorithmId:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** The ID of the partner that owns the parent custom bidding algorithm. Only this partner will have write access to this custom bidding script. */
                partnerId?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: CustomBiddingScript): Request<CustomBiddingScript>;
            /** Gets a custom bidding script. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** The ID of the advertiser that owns the parent custom bidding algorithm. */
                advertiserId?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Required. The ID of the custom bidding algorithm owns the script. */
                customBiddingAlgorithmId:
                    string;
                /** Required. The ID of the custom bidding script to fetch. */
                customBiddingScriptId:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** The ID of the partner that owns the parent custom bidding algorithm. Only this partner will have write access to this custom bidding script. */
                partnerId?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<CustomBiddingScript>;
            /** Lists custom bidding scripts that belong to the given algorithm. The order is defined by the order_by parameter. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** The ID of the advertiser that owns the parent custom bidding algorithm. */
                advertiserId?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Required. The ID of the custom bidding algorithm owns the script. */
                customBiddingAlgorithmId:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /**
                 * Field by which to sort the list. Acceptable values are: * `createTime desc` (default) The default sorting order is descending. To specify ascending order for a field, the suffix
                 * "desc" should be removed. Example: `createTime`.
                 */
                orderBy?:
                    string;
                /** Requested page size. Must be between `1` and `200`. If unspecified will default to `100`. Returns error code `INVALID_ARGUMENT` if an invalid value is specified. */
                pageSize?:
                    number;
                /**
                 * A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `ListCustomBiddingScripts`
                 * method. If not specified, the first page of results will be returned.
                 */
                pageToken?:
                    string;
                /** The ID of the partner that owns the parent custom bidding algorithm. Only this partner will have write access to this custom bidding script. */
                partnerId?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<ListCustomBiddingScriptsResponse>;
        }
        interface CustomBiddingAlgorithmsResource {
            /** Creates a new custom bidding algorithm. Returns the newly created custom bidding algorithm if successful. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    CustomBiddingAlgorithm;
            }): Request<CustomBiddingAlgorithm>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: CustomBiddingAlgorithm): Request<CustomBiddingAlgorithm>;
            /** Gets a custom bidding algorithm. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** The ID of the DV360 partner that has access to the custom bidding algorithm. */
                advertiserId?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Required. The ID of the custom bidding algorithm to fetch. */
                customBiddingAlgorithmId:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** The ID of the DV360 partner that has access to the custom bidding algorithm. */
                partnerId?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<CustomBiddingAlgorithm>;
            /** Lists custom bidding algorithms that are accessible to the current user and can be used in bidding stratgies. The order is defined by the order_by parameter. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** The ID of the DV360 advertiser that has access to the custom bidding algorithm. */
                advertiserId?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /**
                 * Allows filtering by custom bidding algorithm fields. Supported syntax: * Filter expressions are made up of one or more restrictions. * Restrictions can be combined by `AND`. A
                 * sequence of restrictions implicitly uses `AND`. * A restriction has the form of `{field} {operator} {value}`. * The `customBiddingAlgorithmType` field must use the `EQUALS (=)`
                 * operator. * The `displayName` field must use the `HAS (:)` operator. Supported fields: * `customBiddingAlgorithmType` * `displayName` Examples: * All custom bidding algorithms
                 * for which the display name contains "politics": `displayName:"politics"`. * All custom bidding algorithms for which the type is "SCRIPT_BASED":
                 * `customBiddingAlgorithmType=SCRIPT_BASED` The length of this field should be no more than 500 characters. Reference our [filter `LIST`
                 * requests](/display-video/api/guides/how-tos/filters) guide for more information.
                 */
                filter?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /**
                 * Field by which to sort the list. Acceptable values are: * `displayName` (default) The default sorting order is ascending. To specify descending order for a field, a suffix
                 * "desc" should be added to the field name. Example: `displayName desc`.
                 */
                orderBy?:
                    string;
                /** Requested page size. Must be between `1` and `200`. If unspecified will default to `100`. Returns error code `INVALID_ARGUMENT` if an invalid value is specified. */
                pageSize?:
                    number;
                /**
                 * A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `ListCustomBiddingAlgorithms`
                 * method. If not specified, the first page of results will be returned.
                 */
                pageToken?:
                    string;
                /** The ID of the DV360 partner that has access to the custom bidding algorithm. */
                partnerId?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<ListCustomBiddingAlgorithmsResponse>;
            /** Updates an existing custom bidding algorithm. Returns the updated custom bidding algorithm if successful. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Output only. The unique ID of the custom bidding algorithm. Assigned by the system. */
                customBiddingAlgorithmId:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Required. The mask to control which fields to update. */
                updateMask?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    CustomBiddingAlgorithm;
            }): Request<CustomBiddingAlgorithm>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Output only. The unique ID of the custom bidding algorithm. Assigned by the system. */
                customBiddingAlgorithmId:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Required. The mask to control which fields to update. */
                updateMask?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: CustomBiddingAlgorithm): Request<CustomBiddingAlgorithm>;
            /**
             * Creates a custom bidding script reference object for a script file. The resulting reference object provides a resource path to which the script file should be uploaded. This
             * reference object should be included in when creating a new custom bidding script object.
             */
            uploadScript(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** The ID of the advertiser that owns the parent custom bidding algorithm. */
                advertiserId?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Required. The ID of the custom bidding algorithm owns the script. */
                customBiddingAlgorithmId:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** The ID of the partner that owns the parent custom bidding algorithm. Only this partner will have write access to this custom bidding script. */
                partnerId?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<CustomBiddingScriptRef>;
            scripts:
                ScriptsResource;
        }
        interface CustomListsResource {
            /** Gets a custom list. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** The ID of the DV360 advertiser that has access to the fetched custom lists. */
                advertiserId?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Required. The ID of the custom list to fetch. */
                customListId:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<CustomList>;
            /** Lists custom lists. The order is defined by the order_by parameter. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** The ID of the DV360 advertiser that has access to the fetched custom lists. */
                advertiserId?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /**
                 * Allows filtering by custom list fields. Supported syntax: * Filter expressions for custom lists can only contain at most one restriction. * A restriction has the form of
                 * `{field} {operator} {value}`. * All fields must use the `HAS (:)` operator. Supported fields: * `displayName` Examples: * All custom lists for which the display name contains
                 * "Google": `displayName:"Google"`. The length of this field should be no more than 500 characters. Reference our [filter `LIST`
                 * requests](/display-video/api/guides/how-tos/filters) guide for more information.
                 */
                filter?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /**
                 * Field by which to sort the list. Acceptable values are: * `customListId` (default) * `displayName` The default sorting order is ascending. To specify descending order for a
                 * field, a suffix "desc" should be added to the field name. Example: `displayName desc`.
                 */
                orderBy?:
                    string;
                /** Requested page size. Must be between `1` and `200`. If unspecified will default to `100`. Returns error code `INVALID_ARGUMENT` if an invalid value is specified. */
                pageSize?:
                    number;
                /**
                 * A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `ListCustomLists` method. If
                 * not specified, the first page of results will be returned.
                 */
                pageToken?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<ListCustomListsResponse>;
        }
        interface FirstAndThirdPartyAudiencesResource {
            /** Creates a FirstAndThirdPartyAudience. Only supported for the following audience_type: * `CUSTOMER_MATCH_CONTACT_INFO` * `CUSTOMER_MATCH_DEVICE_ID` */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Required. The ID of the advertiser under whom the FirstAndThirdPartyAudience will be created. */
                advertiserId?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    FirstAndThirdPartyAudience;
            }): Request<FirstAndThirdPartyAudience>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Required. The ID of the advertiser under whom the FirstAndThirdPartyAudience will be created. */
                advertiserId?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: FirstAndThirdPartyAudience): Request<FirstAndThirdPartyAudience>;
            /** Updates the member list of a Customer Match audience. Only supported for the following audience_type: * `CUSTOMER_MATCH_CONTACT_INFO` * `CUSTOMER_MATCH_DEVICE_ID` */
            editCustomerMatchMembers(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** Required. The ID of the Customer Match FirstAndThirdPartyAudience whose members will be edited. */
                firstAndThirdPartyAudienceId:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    EditCustomerMatchMembersRequest;
            }): Request<EditCustomerMatchMembersResponse>;
            editCustomerMatchMembers(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** Required. The ID of the Customer Match FirstAndThirdPartyAudience whose members will be edited. */
                firstAndThirdPartyAudienceId:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: EditCustomerMatchMembersRequest): Request<EditCustomerMatchMembersResponse>;
            /** Gets a first and third party audience. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** The ID of the advertiser that has access to the fetched first and third party audience. */
                advertiserId?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** Required. The ID of the first and third party audience to fetch. */
                firstAndThirdPartyAudienceId:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** The ID of the partner that has access to the fetched first and third party audience. */
                partnerId?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<FirstAndThirdPartyAudience>;
            /** Lists first and third party audiences. The order is defined by the order_by parameter. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** The ID of the advertiser that has access to the fetched first and third party audiences. */
                advertiserId?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /**
                 * Allows filtering by first and third party audience fields. Supported syntax: * Filter expressions for first and third party audiences can only contain at most one restriction. *
                 * A restriction has the form of `{field} {operator} {value}`. * All fields must use the `HAS (:)` operator. Supported fields: * `displayName` Examples: * All first and third party
                 * audiences for which the display name contains "Google": `displayName:"Google"`. The length of this field should be no more than 500 characters. Reference our [filter `LIST`
                 * requests](/display-video/api/guides/how-tos/filters) guide for more information.
                 */
                filter?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /**
                 * Field by which to sort the list. Acceptable values are: * `firstAndThirdPartyAudienceId` (default) * `displayName` The default sorting order is ascending. To specify descending
                 * order for a field, a suffix "desc" should be added to the field name. Example: `displayName desc`.
                 */
                orderBy?:
                    string;
                /** Requested page size. Must be between `1` and `200`. If unspecified will default to `100`. Returns error code `INVALID_ARGUMENT` if an invalid value is specified. */
                pageSize?:
                    number;
                /**
                 * A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to
                 * `ListFirstAndThirdPartyAudiences` method. If not specified, the first page of results will be returned.
                 */
                pageToken?:
                    string;
                /** The ID of the partner that has access to the fetched first and third party audiences. */
                partnerId?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<ListFirstAndThirdPartyAudiencesResponse>;
            /** Updates an existing FirstAndThirdPartyAudience. Only supported for the following audience_type: * `CUSTOMER_MATCH_CONTACT_INFO` * `CUSTOMER_MATCH_DEVICE_ID` */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Required. The ID of the owner advertiser of the updated FirstAndThirdPartyAudience. */
                advertiserId?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** Output only. The unique ID of the first and third party audience. Assigned by the system. */
                firstAndThirdPartyAudienceId:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Required. The mask to control which fields to update. Updates are only supported for the following fields: * `displayName` * `description` * `membershipDurationDays` */
                updateMask?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    FirstAndThirdPartyAudience;
            }): Request<FirstAndThirdPartyAudience>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Required. The ID of the owner advertiser of the updated FirstAndThirdPartyAudience. */
                advertiserId?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** Output only. The unique ID of the first and third party audience. Assigned by the system. */
                firstAndThirdPartyAudienceId:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Required. The mask to control which fields to update. Updates are only supported for the following fields: * `displayName` * `description` * `membershipDurationDays` */
                updateMask?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: FirstAndThirdPartyAudience): Request<FirstAndThirdPartyAudience>;
        }
        interface FloodlightGroupsResource {
            /** Gets a Floodlight group. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** Required. The ID of the Floodlight group to fetch. */
                floodlightGroupId:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Required. The partner context by which the Floodlight group is being accessed. */
                partnerId?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<FloodlightGroup>;
            /** Updates an existing Floodlight group. Returns the updated Floodlight group if successful. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** Output only. The unique ID of the Floodlight group. Assigned by the system. */
                floodlightGroupId:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Required. The partner context by which the Floodlight group is being accessed. */
                partnerId?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Required. The mask to control which fields to update. */
                updateMask?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    FloodlightGroup;
            }): Request<FloodlightGroup>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** Output only. The unique ID of the Floodlight group. Assigned by the system. */
                floodlightGroupId:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Required. The partner context by which the Floodlight group is being accessed. */
                partnerId?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Required. The mask to control which fields to update. */
                updateMask?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: FloodlightGroup): Request<FloodlightGroup>;
        }
        interface GoogleAudiencesResource {
            /** Gets a Google audience. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** The ID of the advertiser that has access to the fetched Google audience. */
                advertiserId?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** Required. The ID of the Google audience to fetch. */
                googleAudienceId:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** The ID of the partner that has access to the fetched Google audience. */
                partnerId?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<GoogleAudience>;
            /** Lists Google audiences. The order is defined by the order_by parameter. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** The ID of the advertiser that has access to the fetched Google audiences. */
                advertiserId?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /**
                 * Allows filtering by Google audience fields. Supported syntax: * Filter expressions for Google audiences can only contain at most one restriction. * A restriction has the form of
                 * `{field} {operator} {value}`. * All fields must use the `HAS (:)` operator. Supported fields: * `displayName` Examples: * All Google audiences for which the display name
                 * contains "Google": `displayName:"Google"`. The length of this field should be no more than 500 characters. Reference our [filter `LIST`
                 * requests](/display-video/api/guides/how-tos/filters) guide for more information.
                 */
                filter?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /**
                 * Field by which to sort the list. Acceptable values are: * `googleAudienceId` (default) * `displayName` The default sorting order is ascending. To specify descending order for a
                 * field, a suffix "desc" should be added to the field name. Example: `displayName desc`.
                 */
                orderBy?:
                    string;
                /** Requested page size. Must be between `1` and `200`. If unspecified will default to `100`. Returns error code `INVALID_ARGUMENT` if an invalid value is specified. */
                pageSize?:
                    number;
                /**
                 * A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `ListGoogleAudiences` method.
                 * If not specified, the first page of results will be returned.
                 */
                pageToken?:
                    string;
                /** The ID of the partner that has access to the fetched Google audiences. */
                partnerId?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<ListGoogleAudiencesResponse>;
        }
        interface GuaranteedOrdersResource {
            /** Creates a new guaranteed order. Returns the newly created guaranteed order if successful. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** The ID of the advertiser that the request is being made within. */
                advertiserId?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** The ID of the partner that the request is being made within. */
                partnerId?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    GuaranteedOrder;
            }): Request<GuaranteedOrder>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** The ID of the advertiser that the request is being made within. */
                advertiserId?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** The ID of the partner that the request is being made within. */
                partnerId?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: GuaranteedOrder): Request<GuaranteedOrder>;
            /** Edits read advertisers of a guaranteed order. */
            editGuaranteedOrderReadAccessors(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** Required. The ID of the guaranteed order to edit. The ID is of the format `{exchange}-{legacy_guaranteed_order_id}` */
                guaranteedOrderId:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    EditGuaranteedOrderReadAccessorsRequest;
            }): Request<EditGuaranteedOrderReadAccessorsResponse>;
            editGuaranteedOrderReadAccessors(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** Required. The ID of the guaranteed order to edit. The ID is of the format `{exchange}-{legacy_guaranteed_order_id}` */
                guaranteedOrderId:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: EditGuaranteedOrderReadAccessorsRequest): Request<EditGuaranteedOrderReadAccessorsResponse>;
            /** Gets a guaranteed order. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** The ID of the advertiser that has access to the guaranteed order. */
                advertiserId?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** Required. The ID of the guaranteed order to fetch. The ID is of the format `{exchange}-{legacy_guaranteed_order_id}` */
                guaranteedOrderId:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** The ID of the partner that has access to the guaranteed order. */
                partnerId?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<GuaranteedOrder>;
            /**
             * Lists guaranteed orders that are accessible to the current user. The order is defined by the order_by parameter. If a filter by entity_status is not specified, guaranteed orders
             * with entity status `ENTITY_STATUS_ARCHIVED` will not be included in the results.
             */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** The ID of the advertiser that has access to the guaranteed order. */
                advertiserId?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /**
                 * Allows filtering by guaranteed order fields. * Filter expressions are made up of one or more restrictions. * Restrictions can be combined by `AND` or `OR` logical operators. A
                 * sequence of restrictions implicitly uses `AND`. * A restriction has the form of `{field} {operator} {value}`. * All fields must use the `EQUALS (=)` operator. Supported fields:
                 * * `guaranteed_order_id` * `exchange` * `display_name` * `status.entityStatus` Examples: * All active guaranteed orders: `status.entityStatus="ENTITY_STATUS_ACTIVE"` * Guaranteed
                 * orders belonging to Google Ad Manager or Rubicon exchanges: `exchange="EXCHANGE_GOOGLE_AD_MANAGER" OR exchange="EXCHANGE_RUBICON"` The length of this field should be no more
                 * than 500 characters. Reference our [filter `LIST` requests](/display-video/api/guides/how-tos/filters) guide for more information.
                 */
                filter?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /**
                 * Field by which to sort the list. Acceptable values are: * `displayName` (default) The default sorting order is ascending. To specify descending order for a field, a suffix
                 * "desc" should be added to the field name. For example, `displayName desc`.
                 */
                orderBy?:
                    string;
                /** Requested page size. Must be between `1` and `200`. If unspecified will default to `100`. */
                pageSize?:
                    number;
                /**
                 * A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `ListGuaranteedOrders` method.
                 * If not specified, the first page of results will be returned.
                 */
                pageToken?:
                    string;
                /** The ID of the partner that has access to the guaranteed order. */
                partnerId?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<ListGuaranteedOrdersResponse>;
            /** Updates an existing guaranteed order. Returns the updated guaranteed order if successful. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** The ID of the advertiser that the request is being made within. */
                advertiserId?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** Output only. The unique identifier of the guaranteed order. The guaranteed order IDs have the format `{exchange}-{legacy_guaranteed_order_id}`. */
                guaranteedOrderId:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** The ID of the partner that the request is being made within. */
                partnerId?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Required. The mask to control which fields to update. */
                updateMask?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    GuaranteedOrder;
            }): Request<GuaranteedOrder>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** The ID of the advertiser that the request is being made within. */
                advertiserId?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** Output only. The unique identifier of the guaranteed order. The guaranteed order IDs have the format `{exchange}-{legacy_guaranteed_order_id}`. */
                guaranteedOrderId:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** The ID of the partner that the request is being made within. */
                partnerId?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Required. The mask to control which fields to update. */
                updateMask?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: GuaranteedOrder): Request<GuaranteedOrder>;
        }
        interface AssignedInventorySourcesResource {
            /**
             * Bulk edits multiple assignments between inventory sources and a single inventory source group. The operation will delete the assigned inventory sources provided in
             * BulkEditAssignedInventorySourcesRequest.deleted_assigned_inventory_sources and then create the assigned inventory sources provided in
             * BulkEditAssignedInventorySourcesRequest.created_assigned_inventory_sources.
             */
            bulkEdit(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** Required. The ID of the inventory source group to which the assignments are assigned. */
                inventorySourceGroupId:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    BulkEditAssignedInventorySourcesRequest;
            }): Request<BulkEditAssignedInventorySourcesResponse>;
            bulkEdit(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** Required. The ID of the inventory source group to which the assignments are assigned. */
                inventorySourceGroupId:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: BulkEditAssignedInventorySourcesRequest): Request<BulkEditAssignedInventorySourcesResponse>;
            /** Creates an assignment between an inventory source and an inventory source group. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** The ID of the advertiser that owns the parent inventory source group. The parent partner will not have access to this assigned inventory source. */
                advertiserId?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** Required. The ID of the inventory source group to which the assignment will be assigned. */
                inventorySourceGroupId:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** The ID of the partner that owns the parent inventory source group. Only this partner will have write access to this assigned inventory source. */
                partnerId?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    AssignedInventorySource;
            }): Request<AssignedInventorySource>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** The ID of the advertiser that owns the parent inventory source group. The parent partner will not have access to this assigned inventory source. */
                advertiserId?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** Required. The ID of the inventory source group to which the assignment will be assigned. */
                inventorySourceGroupId:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** The ID of the partner that owns the parent inventory source group. Only this partner will have write access to this assigned inventory source. */
                partnerId?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: AssignedInventorySource): Request<AssignedInventorySource>;
            /** Deletes the assignment between an inventory source and an inventory source group. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** The ID of the advertiser that owns the parent inventory source group. The parent partner does not have access to this assigned inventory source. */
                advertiserId?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** Required. The ID of the assigned inventory source to delete. */
                assignedInventorySourceId:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** Required. The ID of the inventory source group to which this assignment is assigned. */
                inventorySourceGroupId:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** The ID of the partner that owns the parent inventory source group. Only this partner has write access to this assigned inventory source. */
                partnerId?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<{}>;
            /** Lists inventory sources assigned to an inventory source group. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /**
                 * The ID of the advertiser that has access to the assignment. If the parent inventory source group is partner-owned, only advertisers to which the parent group is explicitly
                 * shared can access the assigned inventory source.
                 */
                advertiserId?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /**
                 * Allows filtering by assigned inventory source fields. Supported syntax: * Filter expressions are made up of one or more restrictions. * Restrictions can be combined by the `OR`
                 * logical operator. * A restriction has the form of `{field} {operator} {value}`. * All fields must use the `EQUALS (=)` operator. Supported fields: * `assignedInventorySourceId`
                 * The length of this field should be no more than 500 characters. Reference our [filter `LIST` requests](/display-video/api/guides/how-tos/filters) guide for more information.
                 */
                filter?:
                    string;
                /** Required. The ID of the inventory source group to which these assignments are assigned. */
                inventorySourceGroupId:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /**
                 * Field by which to sort the list. Acceptable values are: * `assignedInventorySourceId` (default) The default sorting order is ascending. To specify descending order for a field,
                 * a suffix " desc" should be added to the field name. Example: `assignedInventorySourceId desc`.
                 */
                orderBy?:
                    string;
                /** Requested page size. Must be between `1` and `100`. If unspecified will default to `100`. Returns error code `INVALID_ARGUMENT` if an invalid value is specified. */
                pageSize?:
                    number;
                /**
                 * A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `ListAssignedInventorySources`
                 * method. If not specified, the first page of results will be returned.
                 */
                pageToken?:
                    string;
                /** The ID of the partner that has access to the assignment. If the parent inventory source group is advertiser-owned, the assignment cannot be accessed via a partner. */
                partnerId?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<ListAssignedInventorySourcesResponse>;
        }
        interface InventorySourceGroupsResource {
            /** Creates a new inventory source group. Returns the newly created inventory source group if successful. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** The ID of the advertiser that owns the inventory source group. The parent partner will not have access to this group. */
                advertiserId?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /**
                 * The ID of the partner that owns the inventory source group. Only this partner will have write access to this group. Only advertisers to which this group is explicitly shared
                 * will have read access to this group.
                 */
                partnerId?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    InventorySourceGroup;
            }): Request<InventorySourceGroup>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** The ID of the advertiser that owns the inventory source group. The parent partner will not have access to this group. */
                advertiserId?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /**
                 * The ID of the partner that owns the inventory source group. Only this partner will have write access to this group. Only advertisers to which this group is explicitly shared
                 * will have read access to this group.
                 */
                partnerId?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: InventorySourceGroup): Request<InventorySourceGroup>;
            /** Deletes an inventory source group. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** The ID of the advertiser that owns the inventory source group. The parent partner does not have access to this group. */
                advertiserId?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** Required. The ID of the inventory source group to delete. */
                inventorySourceGroupId:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** The ID of the partner that owns the inventory source group. Only this partner has write access to this group. */
                partnerId?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<{}>;
            /** Gets an inventory source group. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /**
                 * The ID of the advertiser that has access to the inventory source group. If an inventory source group is partner-owned, only advertisers to which the group is explicitly shared
                 * can access the group.
                 */
                advertiserId?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** Required. The ID of the inventory source group to fetch. */
                inventorySourceGroupId:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** The ID of the partner that has access to the inventory source group. A partner cannot access an advertiser-owned inventory source group. */
                partnerId?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<InventorySourceGroup>;
            /** Lists inventory source groups that are accessible to the current user. The order is defined by the order_by parameter. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /**
                 * The ID of the advertiser that has access to the inventory source group. If an inventory source group is partner-owned, only advertisers to which the group is explicitly shared
                 * can access the group.
                 */
                advertiserId?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /**
                 * Allows filtering by inventory source group fields. Supported syntax: * Filter expressions are made up of one or more restrictions. * Restrictions can be combined by the logical
                 * operator `OR`. * A restriction has the form of `{field} {operator} {value}`. * All fields must use the `EQUALS (=)` operator. Supported fields: * `inventorySourceGroupId` The
                 * length of this field should be no more than 500 characters. Reference our [filter `LIST` requests](/display-video/api/guides/how-tos/filters) guide for more information.
                 */
                filter?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /**
                 * Field by which to sort the list. Acceptable values are: * `displayName` (default) * `inventorySourceGroupId` The default sorting order is ascending. To specify descending order
                 * for a field, a suffix "desc" should be added to the field name. For example, `displayName desc`.
                 */
                orderBy?:
                    string;
                /** Requested page size. Must be between `1` and `200`. If unspecified will default to `100`. */
                pageSize?:
                    number;
                /**
                 * A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `ListInventorySources` method.
                 * If not specified, the first page of results will be returned.
                 */
                pageToken?:
                    string;
                /** The ID of the partner that has access to the inventory source group. A partner cannot access advertiser-owned inventory source groups. */
                partnerId?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<ListInventorySourceGroupsResponse>;
            /** Updates an inventory source group. Returns the updated inventory source group if successful. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** The ID of the advertiser that owns the inventory source group. The parent partner does not have access to this group. */
                advertiserId?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** Output only. The unique ID of the inventory source group. Assigned by the system. */
                inventorySourceGroupId:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** The ID of the partner that owns the inventory source group. Only this partner has write access to this group. */
                partnerId?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Required. The mask to control which fields to update. */
                updateMask?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    InventorySourceGroup;
            }): Request<InventorySourceGroup>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** The ID of the advertiser that owns the inventory source group. The parent partner does not have access to this group. */
                advertiserId?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** Output only. The unique ID of the inventory source group. Assigned by the system. */
                inventorySourceGroupId:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** The ID of the partner that owns the inventory source group. Only this partner has write access to this group. */
                partnerId?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Required. The mask to control which fields to update. */
                updateMask?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: InventorySourceGroup): Request<InventorySourceGroup>;
            assignedInventorySources:
                AssignedInventorySourcesResource;
        }
        interface InventorySourcesResource {
            /** Creates a new inventory source. Returns the newly created inventory source if successful. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** The ID of the advertiser that the request is being made within. */
                advertiserId?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** The ID of the partner that the request is being made within. */
                partnerId?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    InventorySource;
            }): Request<InventorySource>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** The ID of the advertiser that the request is being made within. */
                advertiserId?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** The ID of the partner that the request is being made within. */
                partnerId?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: InventorySource): Request<InventorySource>;
            /** Edits read/write accessors of an inventory source. Returns the updated read_write_accessors for the inventory source. */
            editInventorySourceReadWriteAccessors(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** Required. The ID of inventory source to update. */
                inventorySourceId:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    EditInventorySourceReadWriteAccessorsRequest;
            }): Request<InventorySourceAccessors>;
            editInventorySourceReadWriteAccessors(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** Required. The ID of inventory source to update. */
                inventorySourceId:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: EditInventorySourceReadWriteAccessorsRequest): Request<InventorySourceAccessors>;
            /** Gets an inventory source. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** Required. The ID of the inventory source to fetch. */
                inventorySourceId:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Required. The ID of the DV360 partner to which the fetched inventory source is permissioned. */
                partnerId?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<InventorySource>;
            /**
             * Lists inventory sources that are accessible to the current user. The order is defined by the order_by parameter. If a filter by entity_status is not specified, inventory sources
             * with entity status `ENTITY_STATUS_ARCHIVED` will not be included in the results.
             */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** The ID of the advertiser that has access to the inventory source. */
                advertiserId?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /**
                 * Allows filtering by inventory source fields. Supported syntax: * Filter expressions are made up of one or more restrictions. * Restrictions can be combined by `AND` or `OR`
                 * logical operators. A sequence of restrictions implicitly uses `AND`. * A restriction has the form of `{field} {operator} {value}`. * All fields must use the `EQUALS (=)`
                 * operator. Supported fields: * `status.entityStatus` * `commitment` * `deliveryMethod` * `rateDetails.rateType` * `exchange` Examples: * All active inventory sources:
                 * `status.entityStatus="ENTITY_STATUS_ACTIVE"` * Inventory sources belonging to Google Ad Manager or Rubicon exchanges: `exchange="EXCHANGE_GOOGLE_AD_MANAGER" OR
                 * exchange="EXCHANGE_RUBICON"` The length of this field should be no more than 500 characters. Reference our [filter `LIST` requests](/display-video/api/guides/how-tos/filters)
                 * guide for more information.
                 */
                filter?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /**
                 * Field by which to sort the list. Acceptable values are: * `displayName` (default) The default sorting order is ascending. To specify descending order for a field, a suffix
                 * "desc" should be added to the field name. For example, `displayName desc`.
                 */
                orderBy?:
                    string;
                /** Requested page size. Must be between `1` and `200`. If unspecified will default to `100`. */
                pageSize?:
                    number;
                /**
                 * A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `ListInventorySources` method.
                 * If not specified, the first page of results will be returned.
                 */
                pageToken?:
                    string;
                /** The ID of the partner that has access to the inventory source. */
                partnerId?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<ListInventorySourcesResponse>;
            /** Updates an existing inventory source. Returns the updated inventory source if successful. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** The ID of the advertiser that the request is being made within. */
                advertiserId?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** Output only. The unique ID of the inventory source. Assigned by the system. */
                inventorySourceId:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** The ID of the partner that the request is being made within. */
                partnerId?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Required. The mask to control which fields to update. */
                updateMask?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    InventorySource;
            }): Request<InventorySource>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** The ID of the advertiser that the request is being made within. */
                advertiserId?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** Output only. The unique ID of the inventory source. Assigned by the system. */
                inventorySourceId:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** The ID of the partner that the request is being made within. */
                partnerId?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Required. The mask to control which fields to update. */
                updateMask?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: InventorySource): Request<InventorySource>;
        }
        interface MediaResource {
            /**
             * Downloads media. Download is supported on the URI `/download/{resource_name=**}?alt=media.` **Note**: Download requests will not be successful without including `alt=media` query
             * string.
             */
            download(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Name of the media that is being downloaded. See ReadRequest.resource_name. */
                resourceName:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<GoogleBytestreamMedia>;
            /**
             * Uploads media. Upload is supported on the URI `/upload/media/{resource_name=**}?upload_type=media.` **Note**: Upload requests will not be successful without including
             * `upload_type=media` query string.
             */
            upload(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Name of the media that is being downloaded. See ReadRequest.resource_name. */
                resourceName:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    GoogleBytestreamMedia;
            }): Request<GoogleBytestreamMedia>;
            upload(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Name of the media that is being downloaded. See ReadRequest.resource_name. */
                resourceName:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: GoogleBytestreamMedia): Request<GoogleBytestreamMedia>;
        }
        interface SitesResource {
            /**
             * Bulk edits sites under a single channel. The operation will delete the sites provided in BulkEditSitesRequest.deleted_sites and then create the sites provided in
             * BulkEditSitesRequest.created_sites.
             */
            bulkEdit(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Required. The ID of the parent channel to which the sites belong. */
                channelId:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** The ID of the partner that owns the parent channel. */
                partnerId:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    BulkEditSitesRequest;
            }): Request<BulkEditSitesResponse>;
            bulkEdit(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Required. The ID of the parent channel to which the sites belong. */
                channelId:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** The ID of the partner that owns the parent channel. */
                partnerId:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: BulkEditSitesRequest): Request<BulkEditSitesResponse>;
            /** Creates a site in a channel. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** The ID of the advertiser that owns the parent channel. */
                advertiserId?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Required. The ID of the parent channel in which the site will be created. */
                channelId:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** The ID of the partner that owns the parent channel. */
                partnerId:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    Site;
            }): Request<Site>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** The ID of the advertiser that owns the parent channel. */
                advertiserId?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Required. The ID of the parent channel in which the site will be created. */
                channelId:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** The ID of the partner that owns the parent channel. */
                partnerId:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: Site): Request<Site>;
            /** Deletes a site from a channel. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** The ID of the advertiser that owns the parent channel. */
                advertiserId?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Required. The ID of the parent channel to which the site belongs. */
                channelId:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** The ID of the partner that owns the parent channel. */
                partnerId:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Required. The URL or app ID of the site to delete. */
                urlOrAppId:
                    string;
            }): Request<{}>;
            /** Lists sites in a channel. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** The ID of the advertiser that owns the parent channel. */
                advertiserId?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Required. The ID of the parent channel to which the requested sites belong. */
                channelId:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /**
                 * Allows filtering by site fields. Supported syntax: * Filter expressions for site retrieval can only contain at most one restriction. * A restriction has the form of `{field}
                 * {operator} {value}`. * All fields must use the `HAS (:)` operator. Supported fields: * `urlOrAppId` Examples: * All sites for which the URL or app ID contains "google":
                 * `urlOrAppId : "google"` The length of this field should be no more than 500 characters. Reference our [filter `LIST` requests](/display-video/api/guides/how-tos/filters) guide
                 * for more information.
                 */
                filter?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /**
                 * Field by which to sort the list. Acceptable values are: * `urlOrAppId` (default) The default sorting order is ascending. To specify descending order for a field, a suffix "
                 * desc" should be added to the field name. Example: `urlOrAppId desc`.
                 */
                orderBy?:
                    string;
                /** Requested page size. Must be between `1` and `10000`. If unspecified will default to `100`. Returns error code `INVALID_ARGUMENT` if an invalid value is specified. */
                pageSize?:
                    number;
                /**
                 * A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `ListSites` method. If not
                 * specified, the first page of results will be returned.
                 */
                pageToken?:
                    string;
                /** The ID of the partner that owns the parent channel. */
                partnerId:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<ListSitesResponse>;
            /** Replaces all of the sites under a single channel. The operation will replace the sites under a channel with the sites provided in ReplaceSitesRequest.new_sites. */
            replace(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Required. The ID of the parent channel whose sites will be replaced. */
                channelId:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** The ID of the partner that owns the parent channel. */
                partnerId:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    ReplaceSitesRequest;
            }): Request<ReplaceSitesResponse>;
            replace(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Required. The ID of the parent channel whose sites will be replaced. */
                channelId:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** The ID of the partner that owns the parent channel. */
                partnerId:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: ReplaceSitesRequest): Request<ReplaceSitesResponse>;
        }
        interface ChannelsResource {
            /** Creates a new channel. Returns the newly created channel if successful. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** The ID of the advertiser that owns the created channel. */
                advertiserId?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** The ID of the partner that owns the created channel. */
                partnerId:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    Channel;
            }): Request<Channel>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** The ID of the advertiser that owns the created channel. */
                advertiserId?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** The ID of the partner that owns the created channel. */
                partnerId:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: Channel): Request<Channel>;
            /** Gets a channel for a partner or advertiser. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** The ID of the advertiser that owns the fetched channel. */
                advertiserId?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Required. The ID of the channel to fetch. */
                channelId:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** The ID of the partner that owns the fetched channel. */
                partnerId:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<Channel>;
            /** Lists channels for a partner or advertiser. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** The ID of the advertiser that owns the channels. */
                advertiserId?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /**
                 * Allows filtering by channel fields. Supported syntax: * Filter expressions for channel can only contain at most one restriction. * A restriction has the form of `{field}
                 * {operator} {value}`. * All fields must use the `HAS (:)` operator. Supported fields: * `displayName` Examples: * All channels for which the display name contains "google":
                 * `displayName : "google"`. The length of this field should be no more than 500 characters. Reference our [filter `LIST` requests](/display-video/api/guides/how-tos/filters) guide
                 * for more information.
                 */
                filter?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /**
                 * Field by which to sort the list. Acceptable values are: * `displayName` (default) * `channelId` The default sorting order is ascending. To specify descending order for a field,
                 * a suffix " desc" should be added to the field name. Example: `displayName desc`.
                 */
                orderBy?:
                    string;
                /** Requested page size. Must be between `1` and `200`. If unspecified will default to `100`. Returns error code `INVALID_ARGUMENT` if an invalid value is specified. */
                pageSize?:
                    number;
                /**
                 * A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `ListChannels` method. If not
                 * specified, the first page of results will be returned.
                 */
                pageToken?:
                    string;
                /** The ID of the partner that owns the channels. */
                partnerId:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<ListChannelsResponse>;
            /** Updates a channel. Returns the updated channel if successful. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** The ID of the advertiser that owns the created channel. */
                advertiserId?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Output only. The unique ID of the channel. Assigned by the system. */
                channelId:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** The ID of the partner that owns the created channel. */
                partnerId:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Required. The mask to control which fields to update. */
                updateMask?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    Channel;
            }): Request<Channel>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** The ID of the advertiser that owns the created channel. */
                advertiserId?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Output only. The unique ID of the channel. Assigned by the system. */
                channelId:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** The ID of the partner that owns the created channel. */
                partnerId:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Required. The mask to control which fields to update. */
                updateMask?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: Channel): Request<Channel>;
            sites:
                SitesResource;
        }
        interface AssignedTargetingOptionsResource {
            /** Assigns a targeting option to a partner. Returns the assigned targeting option if successful. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Required. The ID of the partner. */
                partnerId:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Required. Identifies the type of this assigned targeting option. Supported targeting types: * `TARGETING_TYPE_CHANNEL` */
                targetingType:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    AssignedTargetingOption;
            }): Request<AssignedTargetingOption>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Required. The ID of the partner. */
                partnerId:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Required. Identifies the type of this assigned targeting option. Supported targeting types: * `TARGETING_TYPE_CHANNEL` */
                targetingType:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: AssignedTargetingOption): Request<AssignedTargetingOption>;
            /** Deletes an assigned targeting option from a partner. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** Required. The ID of the assigned targeting option to delete. */
                assignedTargetingOptionId:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Required. The ID of the partner. */
                partnerId:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Required. Identifies the type of this assigned targeting option. Supported targeting types: * `TARGETING_TYPE_CHANNEL` */
                targetingType:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<{}>;
            /** Gets a single targeting option assigned to a partner. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** Required. An identifier unique to the targeting type in this partner that identifies the assigned targeting option being requested. */
                assignedTargetingOptionId:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Required. The ID of the partner. */
                partnerId:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Required. Identifies the type of this assigned targeting option. Supported targeting types: * `TARGETING_TYPE_CHANNEL` */
                targetingType:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<AssignedTargetingOption>;
            /** Lists the targeting options assigned to a partner. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /**
                 * Allows filtering by assigned targeting option fields. Supported syntax: * Filter expressions are made up of one or more restrictions. * Restrictions can be combined by the
                 * logical operator `OR`. * A restriction has the form of `{field} {operator} {value}`. * All fields must use the `EQUALS (=)` operator. Supported fields: *
                 * `assignedTargetingOptionId` Examples: * `AssignedTargetingOption` resource with ID 123456: `assignedTargetingOptionId="123456"` The length of this field should be no more than
                 * 500 characters. Reference our [filter `LIST` requests](/display-video/api/guides/how-tos/filters) guide for more information.
                 */
                filter?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /**
                 * Field by which to sort the list. Acceptable values are: * `assignedTargetingOptionId` (default) The default sorting order is ascending. To specify descending order for a field,
                 * a suffix "desc" should be added to the field name. Example: `assignedTargetingOptionId desc`.
                 */
                orderBy?:
                    string;
                /** Requested page size. Must be between `1` and `200`. If unspecified will default to `100`. Returns error code `INVALID_ARGUMENT` if an invalid value is specified. */
                pageSize?:
                    number;
                /**
                 * A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to
                 * `ListPartnerAssignedTargetingOptions` method. If not specified, the first page of results will be returned.
                 */
                pageToken?:
                    string;
                /** Required. The ID of the partner. */
                partnerId:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Required. Identifies the type of assigned targeting options to list. Supported targeting types: * `TARGETING_TYPE_CHANNEL` */
                targetingType:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<ListPartnerAssignedTargetingOptionsResponse>;
        }
        interface TargetingTypesResource {
            assignedTargetingOptions:
                AssignedTargetingOptionsResource;
        }
        interface PartnersResource {
            /**
             * Bulk edits targeting options under a single partner. The operation will delete the assigned targeting options provided in
             * BulkEditPartnerAssignedTargetingOptionsRequest.deleteRequests and then create the assigned targeting options provided in
             * BulkEditPartnerAssignedTargetingOptionsRequest.createRequests .
             */
            bulkEditPartnerAssignedTargetingOptions(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Required. The ID of the partner. */
                partnerId:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    BulkEditPartnerAssignedTargetingOptionsRequest;
            }): Request<BulkEditPartnerAssignedTargetingOptionsResponse>;
            bulkEditPartnerAssignedTargetingOptions(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Required. The ID of the partner. */
                partnerId:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: BulkEditPartnerAssignedTargetingOptionsRequest): Request<BulkEditPartnerAssignedTargetingOptionsResponse>;
            /** Gets a partner. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Required. The ID of the partner to fetch. */
                partnerId:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<Partner>;
            /** Lists partners that are accessible to the current user. The order is defined by the order_by parameter. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /**
                 * Allows filtering by partner fields. Supported syntax: * Filter expressions are made up of one or more restrictions. * Restrictions can be combined by `AND` or `OR` logical
                 * operators. A sequence of restrictions implicitly uses `AND`. * A restriction has the form of `{field} {operator} {value}`. * All fields must use the `EQUALS (=)` operator.
                 * Supported fields: * `entityStatus` Examples: * All active partners: `entityStatus="ENTITY_STATUS_ACTIVE"` The length of this field should be no more than 500 characters.
                 * Reference our [filter `LIST` requests](/display-video/api/guides/how-tos/filters) guide for more information.
                 */
                filter?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /**
                 * Field by which to sort the list. Acceptable values are: * `displayName` The default sorting order is ascending. To specify descending order for a field, a suffix "desc" should
                 * be added to the field name. For example, `displayName desc`.
                 */
                orderBy?:
                    string;
                /** Requested page size. Must be between `1` and `200`. If unspecified will default to `100`. */
                pageSize?:
                    number;
                /**
                 * A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `ListPartners` method. If not
                 * specified, the first page of results will be returned.
                 */
                pageToken?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<ListPartnersResponse>;
            channels:
                ChannelsResource;
            targetingTypes:
                TargetingTypesResource;
        }
        interface OperationsResource {
            /** Gets the latest state of an asynchronous SDF download task operation. Clients should poll this method at intervals of 30 seconds. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** The name of the operation resource. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<Operation>;
        }
        interface SdfdownloadtasksResource {
            /**
             * Creates an SDF Download Task. Returns an Operation. An SDF Download Task is a long-running, asynchronous operation. The metadata type of this operation is SdfDownloadTaskMetadata.
             * If the request is successful, the response type of the operation is SdfDownloadTask. The response will not include the download files, which must be retrieved with media.download.
             * The state of operation can be retrieved with sdfdownloadtask.operations.get. Any errors can be found in the error.message. Note that error.details is expected to be empty.
             */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    CreateSdfDownloadTaskRequest;
            }): Request<Operation>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: CreateSdfDownloadTaskRequest): Request<Operation>;
            operations:
                OperationsResource;
        }
        interface TargetingOptionsResource {
            /** Gets a single targeting option. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Required. The Advertiser this request is being made in the context of. */
                advertiserId?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Required. The ID of the of targeting option to retrieve. */
                targetingOptionId:
                    string;
                /**
                 * Required. The type of targeting option to retrieve. Accepted values are: * `TARGETING_TYPE_APP_CATEGORY` * `TARGETING_TYPE_AGE_RANGE` * `TARGETING_TYPE_GENDER` *
                 * `TARGETING_TYPE_VIDEO_PLAYER_SIZE` * `TARGETING_TYPE_USER_REWARDED_CONTENT` * `TARGETING_TYPE_PARENTAL_STATUS` * `TARGETING_TYPE_CONTENT_INSTREAM_POSITION` *
                 * `TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION` * `TARGETING_TYPE_DEVICE_TYPE` * `TARGETING_TYPE_BROWSER` * `TARGETING_TYPE_HOUSEHOLD_INCOME` * `TARGETING_TYPE_ON_SCREEN_POSITION` *
                 * `TARGETING_TYPE_CARRIER_AND_ISP` * `TARGETING_TYPE_OPERATING_SYSTEM` * `TARGETING_TYPE_DEVICE_MAKE_MODEL` * `TARGETING_TYPE_ENVIRONMENT` * `TARGETING_TYPE_CATEGORY` *
                 * `TARGETING_TYPE_VIEWABILITY` * `TARGETING_TYPE_AUTHORIZED_SELLER_STATUS` * `TARGETING_TYPE_LANGUAGE` * `TARGETING_TYPE_GEO_REGION` *
                 * `TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION` * `TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION` * `TARGETING_TYPE_EXCHANGE` * `TARGETING_TYPE_SUB_EXCHANGE` *
                 * `TARGETING_TYPE_NATIVE_CONTENT_POSITION` * `TARGETING_TYPE_OMID`
                 */
                targetingType:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<TargetingOption>;
            /** Lists targeting options of a given type. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Required. The Advertiser this request is being made in the context of. */
                advertiserId?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /**
                 * Allows filtering by targeting option fields. Supported syntax: * Filter expressions are made up of one or more restrictions. * Restrictions can be combined by `OR` logical
                 * operators. * A restriction has the form of `{field} {operator} {value}`. * All fields must use the `EQUALS (=)` operator. Supported fields: * `carrierAndIspDetails.type` *
                 * `geoRegionDetails.geoRegionType` * `targetingOptionId` Examples: * All `GEO REGION` targeting options that belong to sub type `GEO_REGION_TYPE_COUNTRY` or
                 * `GEO_REGION_TYPE_STATE`: `geoRegionDetails.geoRegionType="GEO_REGION_TYPE_COUNTRY" OR geoRegionDetails.geoRegionType="GEO_REGION_TYPE_STATE"` * All `CARRIER AND ISP` targeting
                 * options that belong to sub type `CARRIER_AND_ISP_TYPE_CARRIER`: `carrierAndIspDetails.type="CARRIER_AND_ISP_TYPE_CARRIER"` The length of this field should be no more than 500
                 * characters. Reference our [filter `LIST` requests](/display-video/api/guides/how-tos/filters) guide for more information.
                 */
                filter?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /**
                 * Field by which to sort the list. Acceptable values are: * `targetingOptionId` (default) The default sorting order is ascending. To specify descending order for a field, a suffix
                 * "desc" should be added to the field name. Example: `targetingOptionId desc`.
                 */
                orderBy?:
                    string;
                /** Requested page size. Must be between `1` and `200`. If unspecified will default to `100`. Returns error code `INVALID_ARGUMENT` if an invalid value is specified. */
                pageSize?:
                    number;
                /**
                 * A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `ListTargetingOptions` method.
                 * If not specified, the first page of results will be returned.
                 */
                pageToken?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /**
                 * Required. The type of targeting option to be listed. Accepted values are: * `TARGETING_TYPE_APP_CATEGORY` * `TARGETING_TYPE_AGE_RANGE` * `TARGETING_TYPE_GENDER` *
                 * `TARGETING_TYPE_VIDEO_PLAYER_SIZE` * `TARGETING_TYPE_USER_REWARDED_CONTENT` * `TARGETING_TYPE_PARENTAL_STATUS` * `TARGETING_TYPE_CONTENT_INSTREAM_POSITION` *
                 * `TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION` * `TARGETING_TYPE_DEVICE_TYPE` * `TARGETING_TYPE_BROWSER` * `TARGETING_TYPE_HOUSEHOLD_INCOME` * `TARGETING_TYPE_ON_SCREEN_POSITION` *
                 * `TARGETING_TYPE_CARRIER_AND_ISP` * `TARGETING_TYPE_OPERATING_SYSTEM` * `TARGETING_TYPE_DEVICE_MAKE_MODEL` * `TARGETING_TYPE_ENVIRONMENT` * `TARGETING_TYPE_CATEGORY` *
                 * `TARGETING_TYPE_VIEWABILITY` * `TARGETING_TYPE_AUTHORIZED_SELLER_STATUS` * `TARGETING_TYPE_LANGUAGE` * `TARGETING_TYPE_GEO_REGION` *
                 * `TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION` * `TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION` * `TARGETING_TYPE_EXCHANGE` * `TARGETING_TYPE_SUB_EXCHANGE` *
                 * `TARGETING_TYPE_NATIVE_CONTENT_POSITION` * `TARGETING_TYPE_OMID`
                 */
                targetingType:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<ListTargetingOptionsResponse>;
            /** Searches for targeting options of a given type based on the given search terms. */
            search(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Required. The type of targeting options to retrieve. Accepted values are: * `TARGETING_TYPE_GEO_REGION` * `TARGETING_TYPE_POI` * `TARGETING_TYPE_BUSINESS_CHAIN` */
                targetingType:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    SearchTargetingOptionsRequest;
            }): Request<SearchTargetingOptionsResponse>;
            search(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Required. The type of targeting options to retrieve. Accepted values are: * `TARGETING_TYPE_GEO_REGION` * `TARGETING_TYPE_POI` * `TARGETING_TYPE_BUSINESS_CHAIN` */
                targetingType:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: SearchTargetingOptionsRequest): Request<SearchTargetingOptionsResponse>;
        }
        interface TargetingTypesResource {
            targetingOptions:
                TargetingOptionsResource;
        }
        interface UsersResource {
            /**
             * Bulk edits user roles for a user. The operation will delete the assigned user roles provided in BulkEditAssignedUserRolesRequest.deletedAssignedUserRoles and then assign the user
             * roles provided in BulkEditAssignedUserRolesRequest.createdAssignedUserRoles. This method has unique authentication requirements. Read the prerequisites in our [Managing Users
             * guide](/display-video/api/guides/users/overview#prerequisites) before using this method. The "Try this method" feature does not work for this method.
             */
            bulkEditAssignedUserRoles(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Required. The ID of the user to which the assigned user roles belong. */
                userId:
                    string;
                /** Request body */
                resource:
                    BulkEditAssignedUserRolesRequest;
            }): Request<BulkEditAssignedUserRolesResponse>;
            bulkEditAssignedUserRoles(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Required. The ID of the user to which the assigned user roles belong. */
                userId:
                    string;
            },
            body: BulkEditAssignedUserRolesRequest): Request<BulkEditAssignedUserRolesResponse>;
            /**
             * Creates a new user. Returns the newly created user if successful. This method has unique authentication requirements. Read the prerequisites in our [Managing Users
             * guide](/display-video/api/guides/users/overview#prerequisites) before using this method. The "Try this method" feature does not work for this method.
             */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    User;
            }): Request<User>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: User): Request<User>;
            /**
             * Deletes a user. This method has unique authentication requirements. Read the prerequisites in our [Managing Users guide](/display-video/api/guides/users/overview#prerequisites)
             * before using this method. The "Try this method" feature does not work for this method.
             */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Required. The ID of the user to delete. */
                userId:
                    string;
            }): Request<{}>;
            /**
             * Gets a user. This method has unique authentication requirements. Read the prerequisites in our [Managing Users guide](/display-video/api/guides/users/overview#prerequisites) before
             * using this method. The "Try this method" feature does not work for this method.
             */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Required. The ID of the user to fetch. */
                userId:
                    string;
            }): Request<User>;
            /**
             * Lists users that are accessible to the current user. If two users have user roles on the same partner or advertiser, they can access each other. This method has unique
             * authentication requirements. Read the prerequisites in our [Managing Users guide](/display-video/api/guides/users/overview#prerequisites) before using this method. The "Try this
             * method" feature does not work for this method.
             */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /**
                 * Allows filtering by user fields. Supported syntax: * Filter expressions are made up of one or more restrictions. * Restrictions can be combined by the logical operator `AND`. *
                 * A restriction has the form of `{field} {operator} {value}`. * The `budget.budget_segments.date_range.end_date` field must use the `LESS THAN (<)` operator. * The `displayName
                 * and `email` field must use the `HAS (:)` operator. * All other fields must use the `EQUALS (=)` operator. Supported fields: * `assignedUserRole.advertiserId` *
                 * `assignedUserRole.entityType` * This is synthetic field of `AssignedUserRole` used for filtering. Identifies the type of entity to which the user role is assigned. Valid values
                 * are `Partner` and `Advertiser`. * `assignedUserRole.parentPartnerId` * This is a synthetic field of `AssignedUserRole` used for filtering. Identifies the parent partner of the
                 * entity to which the user role is assigned. * `assignedUserRole.partnerId` * `assignedUserRole.userRole` * `displayName` * `email` Examples: * The user with `displayName`
                 * containing "foo": `displayName:"foo"` * The user with `email` containing "bar": `email:"bar"` * All users with standard user roles: `assignedUserRole.userRole="STANDARD"` * All
                 * users with user roles for partner 123: `assignedUserRole.partnerId="123"` * All users with user roles for advertiser 123: `assignedUserRole.advertiserId="123"` * All users with
                 * partner level user roles: `entityType="PARTNER"` * All users with user roles for partner 123 and advertisers under partner 123: `parentPartnerId="123"` The length of this field
                 * should be no more than 500 characters. Reference our [filter `LIST` requests](/display-video/api/guides/how-tos/filters) guide for more information.
                 */
                filter?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /**
                 * Field by which to sort the list. Acceptable values are: * `displayName` (default) The default sorting order is ascending. To specify descending order for a field, a suffix
                 * "desc" should be added to the field name. For example, `displayName desc`.
                 */
                orderBy?:
                    string;
                /** Requested page size. Must be between `1` and `200`. If unspecified will default to `100`. */
                pageSize?:
                    number;
                /**
                 * A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `ListUsers` method. If not
                 * specified, the first page of results will be returned.
                 */
                pageToken?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<ListUsersResponse>;
            /**
             * Updates an existing user. Returns the updated user if successful. This method has unique authentication requirements. Read the prerequisites in our [Managing Users
             * guide](/display-video/api/guides/users/overview#prerequisites) before using this method. The "Try this method" feature does not work for this method.
             */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Required. The mask to control which fields to update. */
                updateMask?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Output only. The unique ID of the user. Assigned by the system. */
                userId:
                    string;
                /** Request body */
                resource:
                    User;
            }): Request<User>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Required. The mask to control which fields to update. */
                updateMask?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Output only. The unique ID of the user. Assigned by the system. */
                userId:
                    string;
            },
            body: User): Request<User>;
        }

        const advertisers: AdvertisersResource;

        const combinedAudiences: CombinedAudiencesResource;

        const customBiddingAlgorithms: CustomBiddingAlgorithmsResource;

        const customLists: CustomListsResource;

        const firstAndThirdPartyAudiences: FirstAndThirdPartyAudiencesResource;

        const floodlightGroups: FloodlightGroupsResource;

        const googleAudiences: GoogleAudiencesResource;

        const guaranteedOrders: GuaranteedOrdersResource;

        const inventorySourceGroups: InventorySourceGroupsResource;

        const inventorySources: InventorySourcesResource;

        const media: MediaResource;

        const partners: PartnersResource;

        const sdfdownloadtasks: SdfdownloadtasksResource;

        const targetingTypes: TargetingTypesResource;

        const users: UsersResource;
    }
}
