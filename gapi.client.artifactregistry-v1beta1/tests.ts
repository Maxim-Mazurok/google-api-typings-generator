/* This is stub file for gapi.client.artifactregistry-v1beta1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20221130

gapi.load('client', async () => {
    /** now we can use gapi.client */

    await gapi.client.load('https://artifactregistry.googleapis.com/$discovery/rest?version=v1beta1');
    /** now we can use gapi.client.artifactregistry */

    /** don't forget to authenticate your client before sending any request to resources: */
    /** declare client_id registered in Google Developers Console */
    const client_id = '<<PUT YOUR CLIENT ID HERE>>';
    const scope = [
        /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
        'https://www.googleapis.com/auth/cloud-platform',
        /** View your data across Google Cloud services and see the email address of your Google Account */
        'https://www.googleapis.com/auth/cloud-platform.read-only',
    ];
    const immediate = false;
    gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
        if (authResult && !authResult.error) {
            /** handle successful authorization */
            run();
        } else {
            /** handle authorization error */
        }
    });

    async function run() {
        /** Gets information about a location. */
        await gapi.client.artifactregistry.projects.locations.get({
            name: "Test string",
        });
        /** Lists information about the supported locations for this service. */
        await gapi.client.artifactregistry.projects.locations.list({
            filter: "Test string",
            name: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
        await gapi.client.artifactregistry.projects.locations.operations.get({
            name: "Test string",
        });
        /** Creates a repository. The returned Operation will finish once the repository has been created. Its response will be the created Repository. */
        await gapi.client.artifactregistry.projects.locations.repositories.create({
            parent: "Test string",
            repositoryId: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            format: "Test string",
            kmsKeyName: "Test string",
            labels: {
                A: "Test string"
            },
            name: "Test string",
            satisfiesPzs: true,
            sizeBytes: "Test string",
            updateTime: "Test string",
        });
        /**
         * Deletes a repository and all of its contents. The returned Operation will finish once the repository has been deleted. It will not have any Operation metadata and will return a
         * google.protobuf.Empty response.
         */
        await gapi.client.artifactregistry.projects.locations.repositories.delete({
            name: "Test string",
        });
        /** Gets a repository. */
        await gapi.client.artifactregistry.projects.locations.repositories.get({
            name: "Test string",
        });
        /** Gets the IAM policy for a given resource. */
        await gapi.client.artifactregistry.projects.locations.repositories.getIamPolicy({
            "options.requestedPolicyVersion": 42,
            resource: "Test string",
        });
        /** Lists repositories. */
        await gapi.client.artifactregistry.projects.locations.repositories.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a repository. */
        await gapi.client.artifactregistry.projects.locations.repositories.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            format: "Test string",
            kmsKeyName: "Test string",
            labels: {
                A: "Test string"
            },
            name: "Test string",
            satisfiesPzs: true,
            sizeBytes: "Test string",
            updateTime: "Test string",
        });
        /** Updates the IAM policy for a given resource. */
        await gapi.client.artifactregistry.projects.locations.repositories.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"
                        ],
                        role: "Test string",
                    }
                ],
                etag: "Test string",
                version: 42,
            },
        });
        /** Tests if the caller has a list of permissions on a resource. */
        await gapi.client.artifactregistry.projects.locations.repositories.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"
            ],
        });
        /** Gets a file. */
        await gapi.client.artifactregistry.projects.locations.repositories.files.get({
            name: "Test string",
        });
        /** Lists files. */
        await gapi.client.artifactregistry.projects.locations.repositories.files.list({
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Deletes a package and all of its versions and tags. The returned operation will complete once the package has been deleted. */
        await gapi.client.artifactregistry.projects.locations.repositories.packages.delete({
            name: "Test string",
        });
        /** Gets a package. */
        await gapi.client.artifactregistry.projects.locations.repositories.packages.get({
            name: "Test string",
        });
        /** Lists packages. */
        await gapi.client.artifactregistry.projects.locations.repositories.packages.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Creates a tag. */
        await gapi.client.artifactregistry.projects.locations.repositories.packages.tags.create({
            parent: "Test string",
            tagId: "Test string",
        }, {
            name: "Test string",
            version: "Test string",
        });
        /** Deletes a tag. */
        await gapi.client.artifactregistry.projects.locations.repositories.packages.tags.delete({
            name: "Test string",
        });
        /** Gets a tag. */
        await gapi.client.artifactregistry.projects.locations.repositories.packages.tags.get({
            name: "Test string",
        });
        /** Lists tags. */
        await gapi.client.artifactregistry.projects.locations.repositories.packages.tags.list({
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a tag. */
        await gapi.client.artifactregistry.projects.locations.repositories.packages.tags.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            name: "Test string",
            version: "Test string",
        });
        /** Deletes a version and all of its content. The returned operation will complete once the version has been deleted. */
        await gapi.client.artifactregistry.projects.locations.repositories.packages.versions.delete({
            force: true,
            name: "Test string",
        });
        /** Gets a version */
        await gapi.client.artifactregistry.projects.locations.repositories.packages.versions.get({
            name: "Test string",
            view: "Test string",
        });
        /** Lists versions. */
        await gapi.client.artifactregistry.projects.locations.repositories.packages.versions.list({
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
            view: "Test string",
        });
    }
});
