/* This is stub file for gapi.client.content definition tests */
/* IMPORTANT.
* This file was automatically generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
* In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
**/
gapi.load('client', () => {
    /** now we can use gapi.client */
    gapi.client.load('content', 'v2.1', () => {
        /** now we can use gapi.client.content */

        /** don't forget to authenticate your client before sending any request to resources: */
        /** declare client_id registered in Google Developers Console */
        const client_id = '<<PUT YOUR CLIENT ID HERE>>';
        const scope = [
            /** Manage your product listings and accounts for Google Shopping */
            'https://www.googleapis.com/auth/content',
        ];
        const immediate = false;
        gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
            if (authResult && !authResult.error) {
                /** handle successful authorization */
                run();
            } else {
                /** handle authorization error */
            }
        });
    });

    async function run() {
        /** Returns information about the authenticated user. */
        await gapi.client.content.accounts.authinfo();
        /** Claims the website of a Merchant Center sub-account. */
        await gapi.client.content.accounts.claimwebsite({
            accountId: "Test string",
            merchantId: "Test string",
            overwrite: true,
        });
        /** Retrieves, inserts, updates, and deletes multiple Merchant Center (sub-)accounts in a single request. */
        await gapi.client.content.accounts.custombatch({} , {
            entries: [
                {
                    account: {
                        adsLinks: [
                            {
                                adsId: "Test string",
                                status: "Test string",
                            }                        ],
                        adultContent: true,
                        businessInformation: {
                            address: {
                                country: "Test string",
                                locality: "Test string",
                                postalCode: "Test string",
                                region: "Test string",
                                streetAddress: "Test string",
                            },
                            customerService: {
                                email: "Test string",
                                phoneNumber: "Test string",
                                url: "Test string",
                            },
                            phoneNumber: "Test string",
                        },
                        cssId: "Test string",
                        googleMyBusinessLink: {
                            gmbAccountId: "Test string",
                            gmbEmail: "Test string",
                            status: "Test string",
                        },
                        id: "Test string",
                        kind: "Test string",
                        labelIds: [
                            "Test string"                        ],
                        name: "Test string",
                        sellerId: "Test string",
                        users: [
                            {
                                admin: true,
                                emailAddress: "Test string",
                                orderManager: true,
                                paymentsAnalyst: true,
                                paymentsManager: true,
                            }                        ],
                        websiteUrl: "Test string",
                        youtubeChannelLinks: [
                            {
                                channelId: "Test string",
                                status: "Test string",
                            }                        ],
                    },
                    accountId: "Test string",
                    batchId: 42,
                    force: true,
                    labelIds: [
                        "Test string"                    ],
                    linkRequest: {
                        action: "Test string",
                        linkedAccountId: "Test string",
                        linkType: "Test string",
                        services: [
                            "Test string"                        ],
                    },
                    merchantId: "Test string",
                    method: "Test string",
                    overwrite: true,
                    view: "Test string",
                }            ],
        });
        /** Deletes a Merchant Center sub-account. */
        await gapi.client.content.accounts.delete({
            accountId: "Test string",
            force: true,
            merchantId: "Test string",
        });
        /** Retrieves a Merchant Center account. */
        await gapi.client.content.accounts.get({
            accountId: "Test string",
            merchantId: "Test string",
            view: "Test string",
        });
        /** Creates a Merchant Center sub-account. */
        await gapi.client.content.accounts.insert({
            merchantId: "Test string",
        }, {
            adsLinks: [
                {
                    adsId: "Test string",
                    status: "Test string",
                }            ],
            adultContent: true,
            businessInformation: {
                address: {
                    country: "Test string",
                    locality: "Test string",
                    postalCode: "Test string",
                    region: "Test string",
                    streetAddress: "Test string",
                },
                customerService: {
                    email: "Test string",
                    phoneNumber: "Test string",
                    url: "Test string",
                },
                phoneNumber: "Test string",
            },
            cssId: "Test string",
            googleMyBusinessLink: {
                gmbAccountId: "Test string",
                gmbEmail: "Test string",
                status: "Test string",
            },
            id: "Test string",
            kind: "Test string",
            labelIds: [
                "Test string"            ],
            name: "Test string",
            sellerId: "Test string",
            users: [
                {
                    admin: true,
                    emailAddress: "Test string",
                    orderManager: true,
                    paymentsAnalyst: true,
                    paymentsManager: true,
                }            ],
            websiteUrl: "Test string",
            youtubeChannelLinks: [
                {
                    channelId: "Test string",
                    status: "Test string",
                }            ],
        });
        /** Performs an action on a link between two Merchant Center accounts, namely accountId and linkedAccountId. */
        await gapi.client.content.accounts.link({
            accountId: "Test string",
            merchantId: "Test string",
        }, {
            action: "Test string",
            linkedAccountId: "Test string",
            linkType: "Test string",
            services: [
                "Test string"            ],
        });
        /** Lists the sub-accounts in your Merchant Center account. */
        await gapi.client.content.accounts.list({
            label: "Test string",
            maxResults: 42,
            merchantId: "Test string",
            pageToken: "Test string",
            view: "Test string",
        });
        /** Returns the list of accounts linked to your Merchant Center account. */
        await gapi.client.content.accounts.listlinks({
            accountId: "Test string",
            maxResults: 42,
            merchantId: "Test string",
            pageToken: "Test string",
        });
        /** Updates a Merchant Center account. Any fields that are not provided are deleted from the resource. */
        await gapi.client.content.accounts.update({
            accountId: "Test string",
            merchantId: "Test string",
        }, {
            adsLinks: [
                {
                    adsId: "Test string",
                    status: "Test string",
                }            ],
            adultContent: true,
            businessInformation: {
                address: {
                    country: "Test string",
                    locality: "Test string",
                    postalCode: "Test string",
                    region: "Test string",
                    streetAddress: "Test string",
                },
                customerService: {
                    email: "Test string",
                    phoneNumber: "Test string",
                    url: "Test string",
                },
                phoneNumber: "Test string",
            },
            cssId: "Test string",
            googleMyBusinessLink: {
                gmbAccountId: "Test string",
                gmbEmail: "Test string",
                status: "Test string",
            },
            id: "Test string",
            kind: "Test string",
            labelIds: [
                "Test string"            ],
            name: "Test string",
            sellerId: "Test string",
            users: [
                {
                    admin: true,
                    emailAddress: "Test string",
                    orderManager: true,
                    paymentsAnalyst: true,
                    paymentsManager: true,
                }            ],
            websiteUrl: "Test string",
            youtubeChannelLinks: [
                {
                    channelId: "Test string",
                    status: "Test string",
                }            ],
        });
        /** Updates labels that are assigned to the Merchant Center account by CSS user. */
        await gapi.client.content.accounts.updatelabels({
            accountId: "Test string",
            merchantId: "Test string",
        }, {
            labelIds: [
                "Test string"            ],
        });
        /** Retrieves multiple Merchant Center account statuses in a single request. */
        await gapi.client.content.accountstatuses.custombatch({} , {
            entries: [
                {
                    accountId: "Test string",
                    batchId: 42,
                    destinations: [
                        "Test string"                    ],
                    merchantId: "Test string",
                    method: "Test string",
                }            ],
        });
        /** Retrieves the status of a Merchant Center account. No itemLevelIssues are returned for multi-client accounts. */
        await gapi.client.content.accountstatuses.get({
            accountId: "Test string",
            destinations: "Test string",
            merchantId: "Test string",
        });
        /** Lists the statuses of the sub-accounts in your Merchant Center account. */
        await gapi.client.content.accountstatuses.list({
            destinations: "Test string",
            maxResults: 42,
            merchantId: "Test string",
            pageToken: "Test string",
        });
        /** Retrieves and updates tax settings of multiple accounts in a single request. */
        await gapi.client.content.accounttax.custombatch({} , {
            entries: [
                {
                    accountId: "Test string",
                    accountTax: {
                        accountId: "Test string",
                        kind: "Test string",
                        rules: [
                            {
                                country: "Test string",
                                locationId: "Test string",
                                ratePercent: "Test string",
                                shippingTaxed: true,
                                useGlobalRate: true,
                            }                        ],
                    },
                    batchId: 42,
                    merchantId: "Test string",
                    method: "Test string",
                }            ],
        });
        /** Retrieves the tax settings of the account. */
        await gapi.client.content.accounttax.get({
            accountId: "Test string",
            merchantId: "Test string",
        });
        /** Lists the tax settings of the sub-accounts in your Merchant Center account. */
        await gapi.client.content.accounttax.list({
            maxResults: 42,
            merchantId: "Test string",
            pageToken: "Test string",
        });
        /** Updates the tax settings of the account. Any fields that are not provided are deleted from the resource. */
        await gapi.client.content.accounttax.update({
            accountId: "Test string",
            merchantId: "Test string",
        }, {
            accountId: "Test string",
            kind: "Test string",
            rules: [
                {
                    country: "Test string",
                    locationId: "Test string",
                    ratePercent: "Test string",
                    shippingTaxed: true,
                    useGlobalRate: true,
                }            ],
        });
        /** Deletes, fetches, gets, inserts and updates multiple datafeeds in a single request. */
        await gapi.client.content.datafeeds.custombatch({} , {
            entries: [
                {
                    batchId: 42,
                    datafeed: {
                        attributeLanguage: "Test string",
                        contentType: "Test string",
                        fetchSchedule: {
                            dayOfMonth: 42,
                            fetchUrl: "Test string",
                            hour: 42,
                            minuteOfHour: 42,
                            password: "Test string",
                            paused: true,
                            timeZone: "Test string",
                            username: "Test string",
                            weekday: "Test string",
                        },
                        fileName: "Test string",
                        format: {
                            columnDelimiter: "Test string",
                            fileEncoding: "Test string",
                            quotingMode: "Test string",
                        },
                        id: "Test string",
                        kind: "Test string",
                        name: "Test string",
                        targets: [
                            {
                                country: "Test string",
                                excludedDestinations: [
                                    "Test string"                                ],
                                includedDestinations: [
                                    "Test string"                                ],
                                language: "Test string",
                            }                        ],
                    },
                    datafeedId: "Test string",
                    merchantId: "Test string",
                    method: "Test string",
                }            ],
        });
        /** Deletes a datafeed configuration from your Merchant Center account. */
        await gapi.client.content.datafeeds.delete({
            datafeedId: "Test string",
            merchantId: "Test string",
        });
        /** Invokes a fetch for the datafeed in your Merchant Center account. */
        await gapi.client.content.datafeeds.fetchnow({
            datafeedId: "Test string",
            merchantId: "Test string",
        });
        /** Retrieves a datafeed configuration from your Merchant Center account. */
        await gapi.client.content.datafeeds.get({
            datafeedId: "Test string",
            merchantId: "Test string",
        });
        /** Registers a datafeed configuration with your Merchant Center account. */
        await gapi.client.content.datafeeds.insert({
            merchantId: "Test string",
        }, {
            attributeLanguage: "Test string",
            contentType: "Test string",
            fetchSchedule: {
                dayOfMonth: 42,
                fetchUrl: "Test string",
                hour: 42,
                minuteOfHour: 42,
                password: "Test string",
                paused: true,
                timeZone: "Test string",
                username: "Test string",
                weekday: "Test string",
            },
            fileName: "Test string",
            format: {
                columnDelimiter: "Test string",
                fileEncoding: "Test string",
                quotingMode: "Test string",
            },
            id: "Test string",
            kind: "Test string",
            name: "Test string",
            targets: [
                {
                    country: "Test string",
                    excludedDestinations: [
                        "Test string"                    ],
                    includedDestinations: [
                        "Test string"                    ],
                    language: "Test string",
                }            ],
        });
        /** Lists the configurations for datafeeds in your Merchant Center account. */
        await gapi.client.content.datafeeds.list({
            maxResults: 42,
            merchantId: "Test string",
            pageToken: "Test string",
        });
        /** Updates a datafeed configuration of your Merchant Center account. Any fields that are not provided are deleted from the resource. */
        await gapi.client.content.datafeeds.update({
            datafeedId: "Test string",
            merchantId: "Test string",
        }, {
            attributeLanguage: "Test string",
            contentType: "Test string",
            fetchSchedule: {
                dayOfMonth: 42,
                fetchUrl: "Test string",
                hour: 42,
                minuteOfHour: 42,
                password: "Test string",
                paused: true,
                timeZone: "Test string",
                username: "Test string",
                weekday: "Test string",
            },
            fileName: "Test string",
            format: {
                columnDelimiter: "Test string",
                fileEncoding: "Test string",
                quotingMode: "Test string",
            },
            id: "Test string",
            kind: "Test string",
            name: "Test string",
            targets: [
                {
                    country: "Test string",
                    excludedDestinations: [
                        "Test string"                    ],
                    includedDestinations: [
                        "Test string"                    ],
                    language: "Test string",
                }            ],
        });
        /** Gets multiple Merchant Center datafeed statuses in a single request. */
        await gapi.client.content.datafeedstatuses.custombatch({} , {
            entries: [
                {
                    batchId: 42,
                    country: "Test string",
                    datafeedId: "Test string",
                    language: "Test string",
                    merchantId: "Test string",
                    method: "Test string",
                }            ],
        });
        /** Retrieves the status of a datafeed from your Merchant Center account. */
        await gapi.client.content.datafeedstatuses.get({
            country: "Test string",
            datafeedId: "Test string",
            language: "Test string",
            merchantId: "Test string",
        });
        /** Lists the statuses of the datafeeds in your Merchant Center account. */
        await gapi.client.content.datafeedstatuses.list({
            maxResults: 42,
            merchantId: "Test string",
            pageToken: "Test string",
        });
        /** Retrieves and/or updates the LIA settings of multiple accounts in a single request. */
        await gapi.client.content.liasettings.custombatch({} , {
            entries: [
                {
                    accountId: "Test string",
                    batchId: 42,
                    contactEmail: "Test string",
                    contactName: "Test string",
                    country: "Test string",
                    gmbEmail: "Test string",
                    liaSettings: {
                        accountId: "Test string",
                        countrySettings: [
                            {
                                about: {
                                    status: "Test string",
                                    url: "Test string",
                                },
                                country: "Test string",
                                hostedLocalStorefrontActive: true,
                                inventory: {
                                    inventoryVerificationContactEmail: "Test string",
                                    inventoryVerificationContactName: "Test string",
                                    inventoryVerificationContactStatus: "Test string",
                                    status: "Test string",
                                },
                                onDisplayToOrder: {
                                    shippingCostPolicyUrl: "Test string",
                                    status: "Test string",
                                },
                                posDataProvider: {
                                    posDataProviderId: "Test string",
                                    posExternalAccountId: "Test string",
                                },
                                storePickupActive: true,
                            }                        ],
                        kind: "Test string",
                    },
                    merchantId: "Test string",
                    method: "Test string",
                    posDataProviderId: "Test string",
                    posExternalAccountId: "Test string",
                }            ],
        });
        /** Retrieves the LIA settings of the account. */
        await gapi.client.content.liasettings.get({
            accountId: "Test string",
            merchantId: "Test string",
        });
        /** Retrieves the list of accessible Google My Business accounts. */
        await gapi.client.content.liasettings.getaccessiblegmbaccounts({
            accountId: "Test string",
            merchantId: "Test string",
        });
        /** Lists the LIA settings of the sub-accounts in your Merchant Center account. */
        await gapi.client.content.liasettings.list({
            maxResults: 42,
            merchantId: "Test string",
            pageToken: "Test string",
        });
        /** Retrieves the list of POS data providers that have active settings for the all eiligible countries. */
        await gapi.client.content.liasettings.listposdataproviders();
        /** Requests access to a specified Google My Business account. */
        await gapi.client.content.liasettings.requestgmbaccess({
            accountId: "Test string",
            gmbEmail: "Test string",
            merchantId: "Test string",
        });
        /** Requests inventory validation for the specified country. */
        await gapi.client.content.liasettings.requestinventoryverification({
            accountId: "Test string",
            country: "Test string",
            merchantId: "Test string",
        });
        /** Sets the inventory verification contract for the specified country. */
        await gapi.client.content.liasettings.setinventoryverificationcontact({
            accountId: "Test string",
            contactEmail: "Test string",
            contactName: "Test string",
            country: "Test string",
            language: "Test string",
            merchantId: "Test string",
        });
        /** Sets the POS data provider for the specified country. */
        await gapi.client.content.liasettings.setposdataprovider({
            accountId: "Test string",
            country: "Test string",
            merchantId: "Test string",
            posDataProviderId: "Test string",
            posExternalAccountId: "Test string",
        });
        /** Updates the LIA settings of the account. Any fields that are not provided are deleted from the resource. */
        await gapi.client.content.liasettings.update({
            accountId: "Test string",
            merchantId: "Test string",
        }, {
            accountId: "Test string",
            countrySettings: [
                {
                    about: {
                        status: "Test string",
                        url: "Test string",
                    },
                    country: "Test string",
                    hostedLocalStorefrontActive: true,
                    inventory: {
                        inventoryVerificationContactEmail: "Test string",
                        inventoryVerificationContactName: "Test string",
                        inventoryVerificationContactStatus: "Test string",
                        status: "Test string",
                    },
                    onDisplayToOrder: {
                        shippingCostPolicyUrl: "Test string",
                        status: "Test string",
                    },
                    posDataProvider: {
                        posDataProviderId: "Test string",
                        posExternalAccountId: "Test string",
                    },
                    storePickupActive: true,
                }            ],
            kind: "Test string",
        });
        /** Updates local inventory for multiple products or stores in a single request. */
        await gapi.client.content.localinventory.custombatch({} , {
            entries: [
                {
                    batchId: 42,
                    localInventory: {
                        availability: "Test string",
                        instoreProductLocation: "Test string",
                        kind: "Test string",
                        pickupMethod: "Test string",
                        pickupSla: "Test string",
                        price: {
                            currency: "Test string",
                            value: "Test string",
                        },
                        quantity: 42,
                        salePrice: {
                            currency: "Test string",
                            value: "Test string",
                        },
                        salePriceEffectiveDate: "Test string",
                        storeCode: "Test string",
                    },
                    merchantId: "Test string",
                    method: "Test string",
                    productId: "Test string",
                }            ],
        });
        /** Update the local inventory of a product in your Merchant Center account. */
        await gapi.client.content.localinventory.insert({
            merchantId: "Test string",
            productId: "Test string",
        }, {
            availability: "Test string",
            instoreProductLocation: "Test string",
            kind: "Test string",
            pickupMethod: "Test string",
            pickupSla: "Test string",
            price: {
                currency: "Test string",
                value: "Test string",
            },
            quantity: 42,
            salePrice: {
                currency: "Test string",
                value: "Test string",
            },
            salePriceEffectiveDate: "Test string",
            storeCode: "Test string",
        });
        /** Creates a charge invoice for a shipment group, and triggers a charge capture for orderinvoice enabled orders. */
        await gapi.client.content.orderinvoices.createchargeinvoice({
            merchantId: "Test string",
            orderId: "Test string",
        }, {
            invoiceId: "Test string",
            invoiceSummary: {
                additionalChargeSummaries: [
                    {
                        totalAmount: {
                            priceAmount: {
                                currency: "Test string",
                                value: "Test string",
                            },
                            taxAmount: {
                                currency: "Test string",
                                value: "Test string",
                            },
                        },
                        type: "Test string",
                    }                ],
                productTotal: {
                    priceAmount: {
                        currency: "Test string",
                        value: "Test string",
                    },
                    taxAmount: {
                        currency: "Test string",
                        value: "Test string",
                    },
                },
            },
            lineItemInvoices: [
                {
                    lineItemId: "Test string",
                    productId: "Test string",
                    shipmentUnitIds: [
                        "Test string"                    ],
                    unitInvoice: {
                        additionalCharges: [
                            {
                                additionalChargeAmount: {
                                    priceAmount: {
                                        currency: "Test string",
                                        value: "Test string",
                                    },
                                    taxAmount: {
                                        currency: "Test string",
                                        value: "Test string",
                                    },
                                },
                                type: "Test string",
                            }                        ],
                        unitPrice: {
                            currency: "Test string",
                            value: "Test string",
                        },
                        unitPriceTaxes: [
                            {
                                taxAmount: {
                                    currency: "Test string",
                                    value: "Test string",
                                },
                                taxName: "Test string",
                                taxType: "Test string",
                            }                        ],
                    },
                }            ],
            operationId: "Test string",
            shipmentGroupId: "Test string",
        });
        /**
         * Creates a refund invoice for one or more shipment groups, and triggers a refund for orderinvoice enabled orders. This can only be used for line items that have previously been charged
         * using `createChargeInvoice`. All amounts (except for the summary) are incremental with respect to the previous invoice.
         */
        await gapi.client.content.orderinvoices.createrefundinvoice({
            merchantId: "Test string",
            orderId: "Test string",
        }, {
            invoiceId: "Test string",
            operationId: "Test string",
            refundOnlyOption: {
                description: "Test string",
                reason: "Test string",
            },
            returnOption: {
                description: "Test string",
                reason: "Test string",
            },
            shipmentInvoices: [
                {
                    invoiceSummary: {
                        additionalChargeSummaries: [
                            {
                                totalAmount: {
                                    priceAmount: {
                                        currency: "Test string",
                                        value: "Test string",
                                    },
                                    taxAmount: {
                                        currency: "Test string",
                                        value: "Test string",
                                    },
                                },
                                type: "Test string",
                            }                        ],
                        productTotal: {
                            priceAmount: {
                                currency: "Test string",
                                value: "Test string",
                            },
                            taxAmount: {
                                currency: "Test string",
                                value: "Test string",
                            },
                        },
                    },
                    lineItemInvoices: [
                        {
                            lineItemId: "Test string",
                            productId: "Test string",
                            shipmentUnitIds: [
                                "Test string"                            ],
                            unitInvoice: {
                                additionalCharges: [
                                    {
                                        additionalChargeAmount: {
                                            priceAmount: {
                                                currency: "Test string",
                                                value: "Test string",
                                            },
                                            taxAmount: {
                                                currency: "Test string",
                                                value: "Test string",
                                            },
                                        },
                                        type: "Test string",
                                    }                                ],
                                unitPrice: {
                                    currency: "Test string",
                                    value: "Test string",
                                },
                                unitPriceTaxes: [
                                    {
                                        taxAmount: {
                                            currency: "Test string",
                                            value: "Test string",
                                        },
                                        taxName: "Test string",
                                        taxType: "Test string",
                                    }                                ],
                            },
                        }                    ],
                    shipmentGroupId: "Test string",
                }            ],
        });
        /** Retrieves a report for disbursements from your Merchant Center account. */
        await gapi.client.content.orderreports.listdisbursements({
            disbursementEndDate: "Test string",
            disbursementStartDate: "Test string",
            maxResults: 42,
            merchantId: "Test string",
            pageToken: "Test string",
        });
        /** Retrieves a list of transactions for a disbursement from your Merchant Center account. */
        await gapi.client.content.orderreports.listtransactions({
            disbursementId: "Test string",
            maxResults: 42,
            merchantId: "Test string",
            pageToken: "Test string",
            transactionEndDate: "Test string",
            transactionStartDate: "Test string",
        });
        /** Acks an order return in your Merchant Center account. */
        await gapi.client.content.orderreturns.acknowledge({
            merchantId: "Test string",
            returnId: "Test string",
        }, {
            operationId: "Test string",
        });
        /** Retrieves an order return from your Merchant Center account. */
        await gapi.client.content.orderreturns.get({
            merchantId: "Test string",
            returnId: "Test string",
        });
        /** Lists order returns in your Merchant Center account. */
        await gapi.client.content.orderreturns.list({
            acknowledged: true,
            createdEndDate: "Test string",
            createdStartDate: "Test string",
            googleOrderIds: "Test string",
            maxResults: 42,
            merchantId: "Test string",
            orderBy: "Test string",
            pageToken: "Test string",
            shipmentStates: "Test string",
            shipmentStatus: "Test string",
            shipmentTrackingNumbers: "Test string",
            shipmentTypes: "Test string",
        });
        /** Processes return in your Merchant Center account. */
        await gapi.client.content.orderreturns.process({
            merchantId: "Test string",
            returnId: "Test string",
        }, {
            fullChargeReturnShippingCost: true,
            operationId: "Test string",
            refundShippingFee: {
                fullRefund: true,
                partialRefund: {
                    priceAmount: {
                        currency: "Test string",
                        value: "Test string",
                    },
                    taxAmount: {
                        currency: "Test string",
                        value: "Test string",
                    },
                },
                reasonText: "Test string",
                returnRefundReason: "Test string",
            },
            returnItems: [
                {
                    refund: {
                        fullRefund: true,
                        partialRefund: {
                            priceAmount: {
                                currency: "Test string",
                                value: "Test string",
                            },
                            taxAmount: {
                                currency: "Test string",
                                value: "Test string",
                            },
                        },
                        reasonText: "Test string",
                        returnRefundReason: "Test string",
                    },
                    reject: {
                        reason: "Test string",
                        reasonText: "Test string",
                    },
                    returnItemId: "Test string",
                }            ],
        });
        /** Marks an order as acknowledged. */
        await gapi.client.content.orders.acknowledge({
            merchantId: "Test string",
            orderId: "Test string",
        }, {
            operationId: "Test string",
        });
        /** Sandbox only. Moves a test order from state "`inProgress`" to state "`pendingShipment`". */
        await gapi.client.content.orders.advancetestorder({
            merchantId: "Test string",
            orderId: "Test string",
        });
        /** Cancels all line items in an order, making a full refund. */
        await gapi.client.content.orders.cancel({
            merchantId: "Test string",
            orderId: "Test string",
        }, {
            operationId: "Test string",
            reason: "Test string",
            reasonText: "Test string",
        });
        /** Cancels a line item, making a full refund. */
        await gapi.client.content.orders.cancellineitem({
            merchantId: "Test string",
            orderId: "Test string",
        }, {
            lineItemId: "Test string",
            operationId: "Test string",
            productId: "Test string",
            quantity: 42,
            reason: "Test string",
            reasonText: "Test string",
        });
        /** Sandbox only. Cancels a test order for customer-initiated cancellation. */
        await gapi.client.content.orders.canceltestorderbycustomer({
            merchantId: "Test string",
            orderId: "Test string",
        }, {
            reason: "Test string",
        });
        /** Sandbox only. Creates a test order. */
        await gapi.client.content.orders.createtestorder({
            merchantId: "Test string",
        }, {
            country: "Test string",
            templateName: "Test string",
            testOrder: {
                deliveryDetails: {
                    address: {
                        country: "Test string",
                        fullAddress: [
                            "Test string"                        ],
                        isPostOfficeBox: true,
                        locality: "Test string",
                        postalCode: "Test string",
                        recipientName: "Test string",
                        region: "Test string",
                        streetAddress: [
                            "Test string"                        ],
                    },
                    phoneNumber: "Test string",
                },
                enableOrderinvoices: true,
                kind: "Test string",
                lineItems: [
                    {
                        product: {
                            brand: "Test string",
                            condition: "Test string",
                            contentLanguage: "Test string",
                            fees: [
                                {
                                    amount: {
                                        currency: "Test string",
                                        value: "Test string",
                                    },
                                    name: "Test string",
                                }                            ],
                            gtin: "Test string",
                            imageLink: "Test string",
                            itemGroupId: "Test string",
                            mpn: "Test string",
                            offerId: "Test string",
                            price: {
                                currency: "Test string",
                                value: "Test string",
                            },
                            targetCountry: "Test string",
                            title: "Test string",
                            variantAttributes: [
                                {
                                    dimension: "Test string",
                                    value: "Test string",
                                }                            ],
                        },
                        quantityOrdered: 42,
                        returnInfo: {
                            daysToReturn: 42,
                            isReturnable: true,
                            policyUrl: "Test string",
                        },
                        shippingDetails: {
                            deliverByDate: "Test string",
                            method: {
                                carrier: "Test string",
                                maxDaysInTransit: 42,
                                methodName: "Test string",
                                minDaysInTransit: 42,
                            },
                            pickupPromiseInMinutes: 42,
                            shipByDate: "Test string",
                            type: "Test string",
                        },
                    }                ],
                notificationMode: "Test string",
                pickupDetails: {
                    locationCode: "Test string",
                    pickupLocationAddress: {
                        country: "Test string",
                        fullAddress: [
                            "Test string"                        ],
                        isPostOfficeBox: true,
                        locality: "Test string",
                        postalCode: "Test string",
                        recipientName: "Test string",
                        region: "Test string",
                        streetAddress: [
                            "Test string"                        ],
                    },
                    pickupLocationType: "Test string",
                    pickupPersons: [
                        {
                            name: "Test string",
                            phoneNumber: "Test string",
                        }                    ],
                },
                predefinedBillingAddress: "Test string",
                predefinedDeliveryAddress: "Test string",
                predefinedEmail: "Test string",
                predefinedPickupDetails: "Test string",
                promotions: [
                    {
                        applicableItems: [
                            {
                                lineItemId: "Test string",
                                offerId: "Test string",
                                productId: "Test string",
                                quantity: 42,
                            }                        ],
                        appliedItems: [
                            {
                                lineItemId: "Test string",
                                offerId: "Test string",
                                productId: "Test string",
                                quantity: 42,
                            }                        ],
                        endTime: "Test string",
                        funder: "Test string",
                        merchantPromotionId: "Test string",
                        priceValue: {
                            currency: "Test string",
                            value: "Test string",
                        },
                        shortTitle: "Test string",
                        startTime: "Test string",
                        subtype: "Test string",
                        taxValue: {
                            currency: "Test string",
                            value: "Test string",
                        },
                        title: "Test string",
                        type: "Test string",
                    }                ],
                shippingCost: {
                    currency: "Test string",
                    value: "Test string",
                },
                shippingOption: "Test string",
            },
        });
        /** Sandbox only. Creates a test return. */
        await gapi.client.content.orders.createtestreturn({
            merchantId: "Test string",
            orderId: "Test string",
        }, {
            items: [
                {
                    lineItemId: "Test string",
                    quantity: 42,
                }            ],
        });
        /** Retrieves an order from your Merchant Center account. */
        await gapi.client.content.orders.get({
            merchantId: "Test string",
            orderId: "Test string",
        });
        /** Retrieves an order using merchant order ID. */
        await gapi.client.content.orders.getbymerchantorderid({
            merchantId: "Test string",
            merchantOrderId: "Test string",
        });
        /** Sandbox only. Retrieves an order template that can be used to quickly create a new order in sandbox. */
        await gapi.client.content.orders.gettestordertemplate({
            country: "Test string",
            merchantId: "Test string",
            templateName: "Test string",
        });
        /**
         * Deprecated. Notifies that item return and refund was handled directly by merchant outside of Google payments processing (e.g. cash refund done in store).
         * Note: We recommend calling the returnrefundlineitem method to refund in-store returns. We will issue the refund directly to the customer. This helps to prevent possible differences
         * arising between merchant and Google transaction records. We also recommend having the point of sale system communicate with Google to ensure that customers do not receive a double
         * refund by first refunding via Google then via an in-store return.
         */
        await gapi.client.content.orders.instorerefundlineitem({
            merchantId: "Test string",
            orderId: "Test string",
        }, {
            lineItemId: "Test string",
            operationId: "Test string",
            priceAmount: {
                currency: "Test string",
                value: "Test string",
            },
            productId: "Test string",
            quantity: 42,
            reason: "Test string",
            reasonText: "Test string",
            taxAmount: {
                currency: "Test string",
                value: "Test string",
            },
        });
        /** Lists the orders in your Merchant Center account. */
        await gapi.client.content.orders.list({
            acknowledged: true,
            maxResults: 42,
            merchantId: "Test string",
            orderBy: "Test string",
            pageToken: "Test string",
            placedDateEnd: "Test string",
            placedDateStart: "Test string",
            statuses: "Test string",
        });
        /** Issues a partial or total refund for items and shipment. */
        await gapi.client.content.orders.refunditem({
            merchantId: "Test string",
            orderId: "Test string",
        }, {
            items: [
                {
                    amount: {
                        priceAmount: {
                            currency: "Test string",
                            value: "Test string",
                        },
                        taxAmount: {
                            currency: "Test string",
                            value: "Test string",
                        },
                    },
                    fullRefund: true,
                    lineItemId: "Test string",
                    productId: "Test string",
                    quantity: 42,
                }            ],
            operationId: "Test string",
            reason: "Test string",
            reasonText: "Test string",
            shipping: {
                amount: {
                    currency: "Test string",
                    value: "Test string",
                },
                fullRefund: true,
            },
        });
        /** Issues a partial or total refund for an order. */
        await gapi.client.content.orders.refundorder({
            merchantId: "Test string",
            orderId: "Test string",
        }, {
            amount: {
                priceAmount: {
                    currency: "Test string",
                    value: "Test string",
                },
                taxAmount: {
                    currency: "Test string",
                    value: "Test string",
                },
            },
            fullRefund: true,
            operationId: "Test string",
            reason: "Test string",
            reasonText: "Test string",
        });
        /** Rejects return on an line item. */
        await gapi.client.content.orders.rejectreturnlineitem({
            merchantId: "Test string",
            orderId: "Test string",
        }, {
            lineItemId: "Test string",
            operationId: "Test string",
            productId: "Test string",
            quantity: 42,
            reason: "Test string",
            reasonText: "Test string",
        });
        /**
         * Returns and refunds a line item. Note that this method can only be called on fully shipped orders. Please also note that the Orderreturns API is the preferred way to handle returns
         * after you receive a return from a customer. You can use Orderreturns.list or Orderreturns.get to search for the return, and then use Orderreturns.processreturn to issue the refund. If
         * the return cannot be found, then we recommend using this API to issue a refund.
         */
        await gapi.client.content.orders.returnrefundlineitem({
            merchantId: "Test string",
            orderId: "Test string",
        }, {
            lineItemId: "Test string",
            operationId: "Test string",
            priceAmount: {
                currency: "Test string",
                value: "Test string",
            },
            productId: "Test string",
            quantity: 42,
            reason: "Test string",
            reasonText: "Test string",
            taxAmount: {
                currency: "Test string",
                value: "Test string",
            },
        });
        /**
         * Sets (or overrides if it already exists) merchant provided annotations in the form of key-value pairs. A common use case would be to supply us with additional structured information
         * about a line item that cannot be provided via other methods. Submitted key-value pairs can be retrieved as part of the orders resource.
         */
        await gapi.client.content.orders.setlineitemmetadata({
            merchantId: "Test string",
            orderId: "Test string",
        }, {
            annotations: [
                {
                    key: "Test string",
                    value: "Test string",
                }            ],
            lineItemId: "Test string",
            operationId: "Test string",
            productId: "Test string",
        });
        /** Marks line item(s) as shipped. */
        await gapi.client.content.orders.shiplineitems({
            merchantId: "Test string",
            orderId: "Test string",
        }, {
            lineItems: [
                {
                    lineItemId: "Test string",
                    productId: "Test string",
                    quantity: 42,
                }            ],
            operationId: "Test string",
            shipmentGroupId: "Test string",
            shipmentInfos: [
                {
                    carrier: "Test string",
                    shipmentId: "Test string",
                    trackingId: "Test string",
                }            ],
        });
        /** Updates ship by and delivery by dates for a line item. */
        await gapi.client.content.orders.updatelineitemshippingdetails({
            merchantId: "Test string",
            orderId: "Test string",
        }, {
            deliverByDate: "Test string",
            lineItemId: "Test string",
            operationId: "Test string",
            productId: "Test string",
            shipByDate: "Test string",
        });
        /** Updates the merchant order ID for a given order. */
        await gapi.client.content.orders.updatemerchantorderid({
            merchantId: "Test string",
            orderId: "Test string",
        }, {
            merchantOrderId: "Test string",
            operationId: "Test string",
        });
        /** Updates a shipment's status, carrier, and/or tracking ID. */
        await gapi.client.content.orders.updateshipment({
            merchantId: "Test string",
            orderId: "Test string",
        }, {
            carrier: "Test string",
            deliveryDate: "Test string",
            lastPickupDate: "Test string",
            operationId: "Test string",
            readyPickupDate: "Test string",
            shipmentId: "Test string",
            status: "Test string",
            trackingId: "Test string",
            undeliveredDate: "Test string",
        });
        /** Batches multiple POS-related calls in a single request. */
        await gapi.client.content.pos.custombatch({} , {
            entries: [
                {
                    batchId: 42,
                    inventory: {
                        contentLanguage: "Test string",
                        gtin: "Test string",
                        itemId: "Test string",
                        kind: "Test string",
                        price: {
                            currency: "Test string",
                            value: "Test string",
                        },
                        quantity: "Test string",
                        storeCode: "Test string",
                        targetCountry: "Test string",
                        timestamp: "Test string",
                    },
                    merchantId: "Test string",
                    method: "Test string",
                    sale: {
                        contentLanguage: "Test string",
                        gtin: "Test string",
                        itemId: "Test string",
                        kind: "Test string",
                        price: {
                            currency: "Test string",
                            value: "Test string",
                        },
                        quantity: "Test string",
                        saleId: "Test string",
                        storeCode: "Test string",
                        targetCountry: "Test string",
                        timestamp: "Test string",
                    },
                    store: {
                        kind: "Test string",
                        storeAddress: "Test string",
                        storeCode: "Test string",
                    },
                    storeCode: "Test string",
                    targetMerchantId: "Test string",
                }            ],
        });
        /** Deletes a store for the given merchant. */
        await gapi.client.content.pos.delete({
            merchantId: "Test string",
            storeCode: "Test string",
            targetMerchantId: "Test string",
        });
        /** Retrieves information about the given store. */
        await gapi.client.content.pos.get({
            merchantId: "Test string",
            storeCode: "Test string",
            targetMerchantId: "Test string",
        });
        /** Creates a store for the given merchant. */
        await gapi.client.content.pos.insert({
            merchantId: "Test string",
            targetMerchantId: "Test string",
        }, {
            kind: "Test string",
            storeAddress: "Test string",
            storeCode: "Test string",
        });
        /** Submit inventory for the given merchant. */
        await gapi.client.content.pos.inventory({
            merchantId: "Test string",
            targetMerchantId: "Test string",
        }, {
            contentLanguage: "Test string",
            gtin: "Test string",
            itemId: "Test string",
            price: {
                currency: "Test string",
                value: "Test string",
            },
            quantity: "Test string",
            storeCode: "Test string",
            targetCountry: "Test string",
            timestamp: "Test string",
        });
        /** Lists the stores of the target merchant. */
        await gapi.client.content.pos.list({
            merchantId: "Test string",
            targetMerchantId: "Test string",
        });
        /** Submit a sale event for the given merchant. */
        await gapi.client.content.pos.sale({
            merchantId: "Test string",
            targetMerchantId: "Test string",
        }, {
            contentLanguage: "Test string",
            gtin: "Test string",
            itemId: "Test string",
            price: {
                currency: "Test string",
                value: "Test string",
            },
            quantity: "Test string",
            saleId: "Test string",
            storeCode: "Test string",
            targetCountry: "Test string",
            timestamp: "Test string",
        });
        /** Retrieves, inserts, and deletes multiple products in a single request. */
        await gapi.client.content.products.custombatch({} , {
            entries: [
                {
                    batchId: 42,
                    feedId: "Test string",
                    merchantId: "Test string",
                    method: "Test string",
                    product: {
                        additionalImageLinks: [
                            "Test string"                        ],
                        adsGrouping: "Test string",
                        adsLabels: [
                            "Test string"                        ],
                        adsRedirect: "Test string",
                        adult: true,
                        ageGroup: "Test string",
                        availability: "Test string",
                        availabilityDate: "Test string",
                        brand: "Test string",
                        canonicalLink: "Test string",
                        channel: "Test string",
                        color: "Test string",
                        condition: "Test string",
                        contentLanguage: "Test string",
                        costOfGoodsSold: {
                            currency: "Test string",
                            value: "Test string",
                        },
                        customAttributes: [
                            {
                                groupValues: undefined,
                                name: "Test string",
                                value: "Test string",
                            }                        ],
                        customLabel0: "Test string",
                        customLabel1: "Test string",
                        customLabel2: "Test string",
                        customLabel3: "Test string",
                        customLabel4: "Test string",
                        description: "Test string",
                        displayAdsId: "Test string",
                        displayAdsLink: "Test string",
                        displayAdsSimilarIds: [
                            "Test string"                        ],
                        displayAdsTitle: "Test string",
                        displayAdsValue: 42,
                        energyEfficiencyClass: "Test string",
                        excludedDestinations: [
                            "Test string"                        ],
                        expirationDate: "Test string",
                        gender: "Test string",
                        googleProductCategory: "Test string",
                        gtin: "Test string",
                        id: "Test string",
                        identifierExists: true,
                        imageLink: "Test string",
                        includedDestinations: [
                            "Test string"                        ],
                        installment: {
                            amount: {
                                currency: "Test string",
                                value: "Test string",
                            },
                            months: "Test string",
                        },
                        isBundle: true,
                        itemGroupId: "Test string",
                        kind: "Test string",
                        link: "Test string",
                        loyaltyPoints: {
                            name: "Test string",
                            pointsValue: "Test string",
                            ratio: 42,
                        },
                        material: "Test string",
                        maxEnergyEfficiencyClass: "Test string",
                        maxHandlingTime: "Test string",
                        minEnergyEfficiencyClass: "Test string",
                        minHandlingTime: "Test string",
                        mobileLink: "Test string",
                        mpn: "Test string",
                        multipack: "Test string",
                        offerId: "Test string",
                        pattern: "Test string",
                        price: {
                            currency: "Test string",
                            value: "Test string",
                        },
                        productDetails: [
                            {
                                attributeName: "Test string",
                                attributeValue: "Test string",
                                sectionName: "Test string",
                            }                        ],
                        productHighlights: [
                            "Test string"                        ],
                        productTypes: [
                            "Test string"                        ],
                        promotionIds: [
                            "Test string"                        ],
                        salePrice: {
                            currency: "Test string",
                            value: "Test string",
                        },
                        salePriceEffectiveDate: "Test string",
                        sellOnGoogleQuantity: "Test string",
                        shipping: [
                            {
                                country: "Test string",
                                locationGroupName: "Test string",
                                locationId: "Test string",
                                postalCode: "Test string",
                                price: {
                                    currency: "Test string",
                                    value: "Test string",
                                },
                                region: "Test string",
                                service: "Test string",
                            }                        ],
                        shippingHeight: {
                            unit: "Test string",
                            value: 42,
                        },
                        shippingLabel: "Test string",
                        shippingLength: {
                            unit: "Test string",
                            value: 42,
                        },
                        shippingWeight: {
                            unit: "Test string",
                            value: 42,
                        },
                        shippingWidth: {
                            unit: "Test string",
                            value: 42,
                        },
                        shoppingAdsExcludedCountries: [
                            "Test string"                        ],
                        sizes: [
                            "Test string"                        ],
                        sizeSystem: "Test string",
                        sizeType: "Test string",
                        source: "Test string",
                        subscriptionCost: {
                            amount: {
                                currency: "Test string",
                                value: "Test string",
                            },
                            period: "Test string",
                            periodLength: "Test string",
                        },
                        targetCountry: "Test string",
                        taxCategory: "Test string",
                        taxes: [
                            {
                                country: "Test string",
                                locationId: "Test string",
                                postalCode: "Test string",
                                rate: 42,
                                region: "Test string",
                                taxShip: true,
                            }                        ],
                        title: "Test string",
                        transitTimeLabel: "Test string",
                        unitPricingBaseMeasure: {
                            unit: "Test string",
                            value: "Test string",
                        },
                        unitPricingMeasure: {
                            unit: "Test string",
                            value: 42,
                        },
                    },
                    productId: "Test string",
                }            ],
        });
        /** Deletes a product from your Merchant Center account. */
        await gapi.client.content.products.delete({
            feedId: "Test string",
            merchantId: "Test string",
            productId: "Test string",
        });
        /** Retrieves a product from your Merchant Center account. */
        await gapi.client.content.products.get({
            merchantId: "Test string",
            productId: "Test string",
        });
        /** Uploads a product to your Merchant Center account. If an item with the same channel, contentLanguage, offerId, and targetCountry already exists, this method updates that entry. */
        await gapi.client.content.products.insert({
            feedId: "Test string",
            merchantId: "Test string",
        }, {
            additionalImageLinks: [
                "Test string"            ],
            adsGrouping: "Test string",
            adsLabels: [
                "Test string"            ],
            adsRedirect: "Test string",
            adult: true,
            ageGroup: "Test string",
            availability: "Test string",
            availabilityDate: "Test string",
            brand: "Test string",
            canonicalLink: "Test string",
            channel: "Test string",
            color: "Test string",
            condition: "Test string",
            contentLanguage: "Test string",
            costOfGoodsSold: {
                currency: "Test string",
                value: "Test string",
            },
            customAttributes: [
                {
                    groupValues: undefined,
                    name: "Test string",
                    value: "Test string",
                }            ],
            customLabel0: "Test string",
            customLabel1: "Test string",
            customLabel2: "Test string",
            customLabel3: "Test string",
            customLabel4: "Test string",
            description: "Test string",
            displayAdsId: "Test string",
            displayAdsLink: "Test string",
            displayAdsSimilarIds: [
                "Test string"            ],
            displayAdsTitle: "Test string",
            displayAdsValue: 42,
            energyEfficiencyClass: "Test string",
            excludedDestinations: [
                "Test string"            ],
            expirationDate: "Test string",
            gender: "Test string",
            googleProductCategory: "Test string",
            gtin: "Test string",
            id: "Test string",
            identifierExists: true,
            imageLink: "Test string",
            includedDestinations: [
                "Test string"            ],
            installment: {
                amount: {
                    currency: "Test string",
                    value: "Test string",
                },
                months: "Test string",
            },
            isBundle: true,
            itemGroupId: "Test string",
            kind: "Test string",
            link: "Test string",
            loyaltyPoints: {
                name: "Test string",
                pointsValue: "Test string",
                ratio: 42,
            },
            material: "Test string",
            maxEnergyEfficiencyClass: "Test string",
            maxHandlingTime: "Test string",
            minEnergyEfficiencyClass: "Test string",
            minHandlingTime: "Test string",
            mobileLink: "Test string",
            mpn: "Test string",
            multipack: "Test string",
            offerId: "Test string",
            pattern: "Test string",
            price: {
                currency: "Test string",
                value: "Test string",
            },
            productDetails: [
                {
                    attributeName: "Test string",
                    attributeValue: "Test string",
                    sectionName: "Test string",
                }            ],
            productHighlights: [
                "Test string"            ],
            productTypes: [
                "Test string"            ],
            promotionIds: [
                "Test string"            ],
            salePrice: {
                currency: "Test string",
                value: "Test string",
            },
            salePriceEffectiveDate: "Test string",
            sellOnGoogleQuantity: "Test string",
            shipping: [
                {
                    country: "Test string",
                    locationGroupName: "Test string",
                    locationId: "Test string",
                    postalCode: "Test string",
                    price: {
                        currency: "Test string",
                        value: "Test string",
                    },
                    region: "Test string",
                    service: "Test string",
                }            ],
            shippingHeight: {
                unit: "Test string",
                value: 42,
            },
            shippingLabel: "Test string",
            shippingLength: {
                unit: "Test string",
                value: 42,
            },
            shippingWeight: {
                unit: "Test string",
                value: 42,
            },
            shippingWidth: {
                unit: "Test string",
                value: 42,
            },
            shoppingAdsExcludedCountries: [
                "Test string"            ],
            sizes: [
                "Test string"            ],
            sizeSystem: "Test string",
            sizeType: "Test string",
            source: "Test string",
            subscriptionCost: {
                amount: {
                    currency: "Test string",
                    value: "Test string",
                },
                period: "Test string",
                periodLength: "Test string",
            },
            targetCountry: "Test string",
            taxCategory: "Test string",
            taxes: [
                {
                    country: "Test string",
                    locationId: "Test string",
                    postalCode: "Test string",
                    rate: 42,
                    region: "Test string",
                    taxShip: true,
                }            ],
            title: "Test string",
            transitTimeLabel: "Test string",
            unitPricingBaseMeasure: {
                unit: "Test string",
                value: "Test string",
            },
            unitPricingMeasure: {
                unit: "Test string",
                value: 42,
            },
        });
        /**
         * Lists the products in your Merchant Center account. The response might contain fewer items than specified by maxResults. Rely on nextPageToken to determine if there are more items to be
         * requested.
         */
        await gapi.client.content.products.list({
            maxResults: 42,
            merchantId: "Test string",
            pageToken: "Test string",
        });
        /** Gets the statuses of multiple products in a single request. */
        await gapi.client.content.productstatuses.custombatch({} , {
            entries: [
                {
                    batchId: 42,
                    destinations: [
                        "Test string"                    ],
                    includeAttributes: true,
                    merchantId: "Test string",
                    method: "Test string",
                    productId: "Test string",
                }            ],
        });
        /** Gets the status of a product from your Merchant Center account. */
        await gapi.client.content.productstatuses.get({
            destinations: "Test string",
            merchantId: "Test string",
            productId: "Test string",
        });
        /** Lists the statuses of the products in your Merchant Center account. */
        await gapi.client.content.productstatuses.list({
            destinations: "Test string",
            maxResults: 42,
            merchantId: "Test string",
            pageToken: "Test string",
        });
        /** Retrieves a Merchant Center account's pubsub notification settings. */
        await gapi.client.content.pubsubnotificationsettings.get({
            merchantId: "Test string",
        });
        /** Register a Merchant Center account for pubsub notifications. Note that cloud topic name should not be provided as part of the request. */
        await gapi.client.content.pubsubnotificationsettings.update({
            merchantId: "Test string",
        }, {
            cloudTopicName: "Test string",
            kind: "Test string",
            registeredEvents: [
                "Test string"            ],
        });
        /** Updates regional inventory for multiple products or regions in a single request. */
        await gapi.client.content.regionalinventory.custombatch({} , {
            entries: [
                {
                    batchId: 42,
                    merchantId: "Test string",
                    method: "Test string",
                    productId: "Test string",
                    regionalInventory: {
                        availability: "Test string",
                        customAttributes: [
                            {
                                groupValues: undefined,
                                name: "Test string",
                                value: "Test string",
                            }                        ],
                        kind: "Test string",
                        price: {
                            currency: "Test string",
                            value: "Test string",
                        },
                        regionId: "Test string",
                        salePrice: {
                            currency: "Test string",
                            value: "Test string",
                        },
                        salePriceEffectiveDate: "Test string",
                    },
                }            ],
        });
        /** Update the regional inventory of a product in your Merchant Center account. If a regional inventory with the same region ID already exists, this method updates that entry. */
        await gapi.client.content.regionalinventory.insert({
            merchantId: "Test string",
            productId: "Test string",
        }, {
            availability: "Test string",
            customAttributes: [
                {
                    groupValues: undefined,
                    name: "Test string",
                    value: "Test string",
                }            ],
            kind: "Test string",
            price: {
                currency: "Test string",
                value: "Test string",
            },
            regionId: "Test string",
            salePrice: {
                currency: "Test string",
                value: "Test string",
            },
            salePriceEffectiveDate: "Test string",
        });
        /** Batches multiple return address related calls in a single request. */
        await gapi.client.content.returnaddress.custombatch({} , {
            entries: [
                {
                    batchId: 42,
                    merchantId: "Test string",
                    method: "Test string",
                    returnAddress: {
                        address: {
                            country: "Test string",
                            locality: "Test string",
                            postalCode: "Test string",
                            recipientName: "Test string",
                            region: "Test string",
                            streetAddress: [
                                "Test string"                            ],
                        },
                        country: "Test string",
                        kind: "Test string",
                        label: "Test string",
                        phoneNumber: "Test string",
                        returnAddressId: "Test string",
                    },
                    returnAddressId: "Test string",
                }            ],
        });
        /** Deletes a return address for the given Merchant Center account. */
        await gapi.client.content.returnaddress.delete({
            merchantId: "Test string",
            returnAddressId: "Test string",
        });
        /** Gets a return address of the Merchant Center account. */
        await gapi.client.content.returnaddress.get({
            merchantId: "Test string",
            returnAddressId: "Test string",
        });
        /** Inserts a return address for the Merchant Center account. */
        await gapi.client.content.returnaddress.insert({
            merchantId: "Test string",
        }, {
            address: {
                country: "Test string",
                locality: "Test string",
                postalCode: "Test string",
                recipientName: "Test string",
                region: "Test string",
                streetAddress: [
                    "Test string"                ],
            },
            country: "Test string",
            kind: "Test string",
            label: "Test string",
            phoneNumber: "Test string",
            returnAddressId: "Test string",
        });
        /** Lists the return addresses of the Merchant Center account. */
        await gapi.client.content.returnaddress.list({
            country: "Test string",
            maxResults: 42,
            merchantId: "Test string",
            pageToken: "Test string",
        });
        /** Batches multiple return policy related calls in a single request. */
        await gapi.client.content.returnpolicy.custombatch({} , {
            entries: [
                {
                    batchId: 42,
                    merchantId: "Test string",
                    method: "Test string",
                    returnPolicy: {
                        country: "Test string",
                        kind: "Test string",
                        label: "Test string",
                        name: "Test string",
                        nonFreeReturnReasons: [
                            "Test string"                        ],
                        policy: {
                            lastReturnDate: "Test string",
                            numberOfDays: "Test string",
                            type: "Test string",
                        },
                        returnPolicyId: "Test string",
                        seasonalOverrides: [
                            {
                                endDate: "Test string",
                                name: "Test string",
                                policy: {
                                    lastReturnDate: "Test string",
                                    numberOfDays: "Test string",
                                    type: "Test string",
                                },
                                startDate: "Test string",
                            }                        ],
                    },
                    returnPolicyId: "Test string",
                }            ],
        });
        /** Deletes a return policy for the given Merchant Center account. */
        await gapi.client.content.returnpolicy.delete({
            merchantId: "Test string",
            returnPolicyId: "Test string",
        });
        /** Gets a return policy of the Merchant Center account. */
        await gapi.client.content.returnpolicy.get({
            merchantId: "Test string",
            returnPolicyId: "Test string",
        });
        /** Inserts a return policy for the Merchant Center account. */
        await gapi.client.content.returnpolicy.insert({
            merchantId: "Test string",
        }, {
            country: "Test string",
            kind: "Test string",
            label: "Test string",
            name: "Test string",
            nonFreeReturnReasons: [
                "Test string"            ],
            policy: {
                lastReturnDate: "Test string",
                numberOfDays: "Test string",
                type: "Test string",
            },
            returnPolicyId: "Test string",
            seasonalOverrides: [
                {
                    endDate: "Test string",
                    name: "Test string",
                    policy: {
                        lastReturnDate: "Test string",
                        numberOfDays: "Test string",
                        type: "Test string",
                    },
                    startDate: "Test string",
                }            ],
        });
        /** Lists the return policies of the Merchant Center account. */
        await gapi.client.content.returnpolicy.list({
            merchantId: "Test string",
        });
        /** Retrieves a settlement report from your Merchant Center account. */
        await gapi.client.content.settlementreports.get({
            merchantId: "Test string",
            settlementId: "Test string",
        });
        /** Retrieves a list of settlement reports from your Merchant Center account. */
        await gapi.client.content.settlementreports.list({
            maxResults: 42,
            merchantId: "Test string",
            pageToken: "Test string",
            transferEndDate: "Test string",
            transferStartDate: "Test string",
        });
        /** Retrieves a list of transactions for the settlement. */
        await gapi.client.content.settlementtransactions.list({
            maxResults: 42,
            merchantId: "Test string",
            pageToken: "Test string",
            settlementId: "Test string",
            transactionIds: "Test string",
        });
        /** Retrieves and updates the shipping settings of multiple accounts in a single request. */
        await gapi.client.content.shippingsettings.custombatch({} , {
            entries: [
                {
                    accountId: "Test string",
                    batchId: 42,
                    merchantId: "Test string",
                    method: "Test string",
                    shippingSettings: {
                        accountId: "Test string",
                        postalCodeGroups: [
                            {
                                country: "Test string",
                                name: "Test string",
                                postalCodeRanges: [
                                    {
                                        postalCodeRangeBegin: "Test string",
                                        postalCodeRangeEnd: "Test string",
                                    }                                ],
                            }                        ],
                        services: [
                            {
                                active: true,
                                currency: "Test string",
                                deliveryCountry: "Test string",
                                deliveryTime: {
                                    cutoffTime: {
                                        hour: 42,
                                        minute: 42,
                                        timezone: "Test string",
                                    },
                                    handlingBusinessDayConfig: {
                                        businessDays: [
                                            "Test string"                                        ],
                                    },
                                    holidayCutoffs: [
                                        {
                                            deadlineDate: "Test string",
                                            deadlineHour: 42,
                                            deadlineTimezone: "Test string",
                                            holidayId: "Test string",
                                            visibleFromDate: "Test string",
                                        }                                    ],
                                    maxHandlingTimeInDays: 42,
                                    maxTransitTimeInDays: 42,
                                    minHandlingTimeInDays: 42,
                                    minTransitTimeInDays: 42,
                                    transitBusinessDayConfig: {
                                        businessDays: [
                                            "Test string"                                        ],
                                    },
                                    transitTimeTable: {
                                        postalCodeGroupNames: [
                                            "Test string"                                        ],
                                        rows: [
                                            {
                                                values: [
                                                    {
                                                        maxTransitTimeInDays: 42,
                                                        minTransitTimeInDays: 42,
                                                    }                                                ],
                                            }                                        ],
                                        transitTimeLabels: [
                                            "Test string"                                        ],
                                    },
                                },
                                eligibility: "Test string",
                                minimumOrderValue: {
                                    currency: "Test string",
                                    value: "Test string",
                                },
                                minimumOrderValueTable: {
                                    storeCodeSetWithMovs: [
                                        {
                                            storeCodes: [
                                                "Test string"                                            ],
                                            value: {
                                                currency: "Test string",
                                                value: "Test string",
                                            },
                                        }                                    ],
                                },
                                name: "Test string",
                                pickupService: {
                                    carrierName: "Test string",
                                    serviceName: "Test string",
                                },
                                rateGroups: [
                                    {
                                        applicableShippingLabels: [
                                            "Test string"                                        ],
                                        carrierRates: [
                                            {
                                                carrierName: "Test string",
                                                carrierService: "Test string",
                                                flatAdjustment: {
                                                    currency: "Test string",
                                                    value: "Test string",
                                                },
                                                name: "Test string",
                                                originPostalCode: "Test string",
                                                percentageAdjustment: "Test string",
                                            }                                        ],
                                        mainTable: {
                                            columnHeaders: {
                                                locations: [
                                                    {
                                                        locationIds: [
                                                            "Test string"                                                        ],
                                                    }                                                ],
                                                numberOfItems: [
                                                    "Test string"                                                ],
                                                postalCodeGroupNames: [
                                                    "Test string"                                                ],
                                                prices: [
                                                    {
                                                        currency: "Test string",
                                                        value: "Test string",
                                                    }                                                ],
                                                weights: [
                                                    {
                                                        unit: "Test string",
                                                        value: "Test string",
                                                    }                                                ],
                                            },
                                            name: "Test string",
                                            rowHeaders: {
                                                locations: [
                                                    {
                                                        locationIds: [
                                                            "Test string"                                                        ],
                                                    }                                                ],
                                                numberOfItems: [
                                                    "Test string"                                                ],
                                                postalCodeGroupNames: [
                                                    "Test string"                                                ],
                                                prices: [
                                                    {
                                                        currency: "Test string",
                                                        value: "Test string",
                                                    }                                                ],
                                                weights: [
                                                    {
                                                        unit: "Test string",
                                                        value: "Test string",
                                                    }                                                ],
                                            },
                                            rows: [
                                                {
                                                    cells: [
                                                        {
                                                            carrierRateName: "Test string",
                                                            flatRate: {
                                                                currency: "Test string",
                                                                value: "Test string",
                                                            },
                                                            noShipping: true,
                                                            pricePercentage: "Test string",
                                                            subtableName: "Test string",
                                                        }                                                    ],
                                                }                                            ],
                                        },
                                        name: "Test string",
                                        singleValue: {
                                            carrierRateName: "Test string",
                                            flatRate: {
                                                currency: "Test string",
                                                value: "Test string",
                                            },
                                            noShipping: true,
                                            pricePercentage: "Test string",
                                            subtableName: "Test string",
                                        },
                                        subtables: [
                                            {
                                                columnHeaders: {
                                                    locations: [
                                                        {
                                                            locationIds: [
                                                                "Test string"                                                            ],
                                                        }                                                    ],
                                                    numberOfItems: [
                                                        "Test string"                                                    ],
                                                    postalCodeGroupNames: [
                                                        "Test string"                                                    ],
                                                    prices: [
                                                        {
                                                            currency: "Test string",
                                                            value: "Test string",
                                                        }                                                    ],
                                                    weights: [
                                                        {
                                                            unit: "Test string",
                                                            value: "Test string",
                                                        }                                                    ],
                                                },
                                                name: "Test string",
                                                rowHeaders: {
                                                    locations: [
                                                        {
                                                            locationIds: [
                                                                "Test string"                                                            ],
                                                        }                                                    ],
                                                    numberOfItems: [
                                                        "Test string"                                                    ],
                                                    postalCodeGroupNames: [
                                                        "Test string"                                                    ],
                                                    prices: [
                                                        {
                                                            currency: "Test string",
                                                            value: "Test string",
                                                        }                                                    ],
                                                    weights: [
                                                        {
                                                            unit: "Test string",
                                                            value: "Test string",
                                                        }                                                    ],
                                                },
                                                rows: [
                                                    {
                                                        cells: [
                                                            {
                                                                carrierRateName: "Test string",
                                                                flatRate: {
                                                                    currency: "Test string",
                                                                    value: "Test string",
                                                                },
                                                                noShipping: true,
                                                                pricePercentage: "Test string",
                                                                subtableName: "Test string",
                                                            }                                                        ],
                                                    }                                                ],
                                            }                                        ],
                                    }                                ],
                                shipmentType: "Test string",
                            }                        ],
                    },
                }            ],
        });
        /** Retrieves the shipping settings of the account. */
        await gapi.client.content.shippingsettings.get({
            accountId: "Test string",
            merchantId: "Test string",
        });
        /** Retrieves supported carriers and carrier services for an account. */
        await gapi.client.content.shippingsettings.getsupportedcarriers({
            merchantId: "Test string",
        });
        /** Retrieves supported holidays for an account. */
        await gapi.client.content.shippingsettings.getsupportedholidays({
            merchantId: "Test string",
        });
        /** Retrieves supported pickup services for an account. */
        await gapi.client.content.shippingsettings.getsupportedpickupservices({
            merchantId: "Test string",
        });
        /** Lists the shipping settings of the sub-accounts in your Merchant Center account. */
        await gapi.client.content.shippingsettings.list({
            maxResults: 42,
            merchantId: "Test string",
            pageToken: "Test string",
        });
        /** Updates the shipping settings of the account. Any fields that are not provided are deleted from the resource. */
        await gapi.client.content.shippingsettings.update({
            accountId: "Test string",
            merchantId: "Test string",
        }, {
            accountId: "Test string",
            postalCodeGroups: [
                {
                    country: "Test string",
                    name: "Test string",
                    postalCodeRanges: [
                        {
                            postalCodeRangeBegin: "Test string",
                            postalCodeRangeEnd: "Test string",
                        }                    ],
                }            ],
            services: [
                {
                    active: true,
                    currency: "Test string",
                    deliveryCountry: "Test string",
                    deliveryTime: {
                        cutoffTime: {
                            hour: 42,
                            minute: 42,
                            timezone: "Test string",
                        },
                        handlingBusinessDayConfig: {
                            businessDays: [
                                "Test string"                            ],
                        },
                        holidayCutoffs: [
                            {
                                deadlineDate: "Test string",
                                deadlineHour: 42,
                                deadlineTimezone: "Test string",
                                holidayId: "Test string",
                                visibleFromDate: "Test string",
                            }                        ],
                        maxHandlingTimeInDays: 42,
                        maxTransitTimeInDays: 42,
                        minHandlingTimeInDays: 42,
                        minTransitTimeInDays: 42,
                        transitBusinessDayConfig: {
                            businessDays: [
                                "Test string"                            ],
                        },
                        transitTimeTable: {
                            postalCodeGroupNames: [
                                "Test string"                            ],
                            rows: [
                                {
                                    values: [
                                        {
                                            maxTransitTimeInDays: 42,
                                            minTransitTimeInDays: 42,
                                        }                                    ],
                                }                            ],
                            transitTimeLabels: [
                                "Test string"                            ],
                        },
                    },
                    eligibility: "Test string",
                    minimumOrderValue: {
                        currency: "Test string",
                        value: "Test string",
                    },
                    minimumOrderValueTable: {
                        storeCodeSetWithMovs: [
                            {
                                storeCodes: [
                                    "Test string"                                ],
                                value: {
                                    currency: "Test string",
                                    value: "Test string",
                                },
                            }                        ],
                    },
                    name: "Test string",
                    pickupService: {
                        carrierName: "Test string",
                        serviceName: "Test string",
                    },
                    rateGroups: [
                        {
                            applicableShippingLabels: [
                                "Test string"                            ],
                            carrierRates: [
                                {
                                    carrierName: "Test string",
                                    carrierService: "Test string",
                                    flatAdjustment: {
                                        currency: "Test string",
                                        value: "Test string",
                                    },
                                    name: "Test string",
                                    originPostalCode: "Test string",
                                    percentageAdjustment: "Test string",
                                }                            ],
                            mainTable: {
                                columnHeaders: {
                                    locations: [
                                        {
                                            locationIds: [
                                                "Test string"                                            ],
                                        }                                    ],
                                    numberOfItems: [
                                        "Test string"                                    ],
                                    postalCodeGroupNames: [
                                        "Test string"                                    ],
                                    prices: [
                                        {
                                            currency: "Test string",
                                            value: "Test string",
                                        }                                    ],
                                    weights: [
                                        {
                                            unit: "Test string",
                                            value: "Test string",
                                        }                                    ],
                                },
                                name: "Test string",
                                rowHeaders: {
                                    locations: [
                                        {
                                            locationIds: [
                                                "Test string"                                            ],
                                        }                                    ],
                                    numberOfItems: [
                                        "Test string"                                    ],
                                    postalCodeGroupNames: [
                                        "Test string"                                    ],
                                    prices: [
                                        {
                                            currency: "Test string",
                                            value: "Test string",
                                        }                                    ],
                                    weights: [
                                        {
                                            unit: "Test string",
                                            value: "Test string",
                                        }                                    ],
                                },
                                rows: [
                                    {
                                        cells: [
                                            {
                                                carrierRateName: "Test string",
                                                flatRate: {
                                                    currency: "Test string",
                                                    value: "Test string",
                                                },
                                                noShipping: true,
                                                pricePercentage: "Test string",
                                                subtableName: "Test string",
                                            }                                        ],
                                    }                                ],
                            },
                            name: "Test string",
                            singleValue: {
                                carrierRateName: "Test string",
                                flatRate: {
                                    currency: "Test string",
                                    value: "Test string",
                                },
                                noShipping: true,
                                pricePercentage: "Test string",
                                subtableName: "Test string",
                            },
                            subtables: [
                                {
                                    columnHeaders: {
                                        locations: [
                                            {
                                                locationIds: [
                                                    "Test string"                                                ],
                                            }                                        ],
                                        numberOfItems: [
                                            "Test string"                                        ],
                                        postalCodeGroupNames: [
                                            "Test string"                                        ],
                                        prices: [
                                            {
                                                currency: "Test string",
                                                value: "Test string",
                                            }                                        ],
                                        weights: [
                                            {
                                                unit: "Test string",
                                                value: "Test string",
                                            }                                        ],
                                    },
                                    name: "Test string",
                                    rowHeaders: {
                                        locations: [
                                            {
                                                locationIds: [
                                                    "Test string"                                                ],
                                            }                                        ],
                                        numberOfItems: [
                                            "Test string"                                        ],
                                        postalCodeGroupNames: [
                                            "Test string"                                        ],
                                        prices: [
                                            {
                                                currency: "Test string",
                                                value: "Test string",
                                            }                                        ],
                                        weights: [
                                            {
                                                unit: "Test string",
                                                value: "Test string",
                                            }                                        ],
                                    },
                                    rows: [
                                        {
                                            cells: [
                                                {
                                                    carrierRateName: "Test string",
                                                    flatRate: {
                                                        currency: "Test string",
                                                        value: "Test string",
                                                    },
                                                    noShipping: true,
                                                    pricePercentage: "Test string",
                                                    subtableName: "Test string",
                                                }                                            ],
                                        }                                    ],
                                }                            ],
                        }                    ],
                    shipmentType: "Test string",
                }            ],
        });
    }
});
