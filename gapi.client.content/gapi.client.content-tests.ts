/* This is stub file for gapi.client.content definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20210812

gapi.load('client', () => {
    /** now we can use gapi.client */
    gapi.client.load('content', 'v2.1', () => {
        /** now we can use gapi.client.content */

        /** don't forget to authenticate your client before sending any request to resources: */
        /** declare client_id registered in Google Developers Console */
        const client_id = '<<PUT YOUR CLIENT ID HERE>>';
        const scope = [
            /** Manage your product listings and accounts for Google Shopping */
            'https://www.googleapis.com/auth/content',
        ];
        const immediate = false;
        gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
            if (authResult && !authResult.error) {
                /** handle successful authorization */
                run();
            } else {
                /** handle authorization error */
            }
        });
    });

    async function run() {
        /** Returns information about the authenticated user. */
        await gapi.client.content.accounts.authinfo({
        });
        /** Uploads credentials for the Merchant Center account. If credentials already exist for this Merchant Center account and purpose, this method updates them. */
        await gapi.client.content.accounts.credentials.create({
            accountId: "Test string",
        }, {
            accessToken: "Test string",
            expiresIn: "Test string",
            purpose: "Test string",
        });
        /** Creates a new label, not assigned to any account. */
        await gapi.client.content.accounts.labels.create({
            accountId: "Test string",
        }, {
            accountId: "Test string",
            description: "Test string",
            labelId: "Test string",
            labelType: "Test string",
            name: "Test string",
        });
        /** Deletes a label and removes it from all accounts to which it was assigned. */
        await gapi.client.content.accounts.labels.delete({
            accountId: "Test string",
            labelId: "Test string",
        });
        /** Lists the labels assigned to an account. */
        await gapi.client.content.accounts.labels.list({
            accountId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Updates a label. */
        await gapi.client.content.accounts.labels.patch({
            accountId: "Test string",
            labelId: "Test string",
        }, {
            accountId: "Test string",
            description: "Test string",
            labelId: "Test string",
            labelType: "Test string",
            name: "Test string",
        });
        /** Links return carrier to a merchant account. */
        await gapi.client.content.accounts.returncarrier.create({
            accountId: "Test string",
        }, {
            carrierAccountId: "Test string",
            carrierAccountName: "Test string",
            carrierAccountNumber: "Test string",
            carrierCode: "Test string",
        });
        /** Delete a return carrier in the merchant account. */
        await gapi.client.content.accounts.returncarrier.delete({
            accountId: "Test string",
            carrierAccountId: "Test string",
        });
        /** Lists available return carriers in the merchant account. */
        await gapi.client.content.accounts.returncarrier.list({
            accountId: "Test string",
        });
        /** Updates a return carrier in the merchant account. */
        await gapi.client.content.accounts.returncarrier.patch({
            accountId: "Test string",
            carrierAccountId: "Test string",
        }, {
            carrierAccountId: "Test string",
            carrierAccountName: "Test string",
            carrierAccountNumber: "Test string",
            carrierCode: "Test string",
        });
        /** Claims the website of a Merchant Center sub-account. */
        await gapi.client.content.accounts.claimwebsite({
            accountId: "Test string",
            merchantId: "Test string",
            overwrite: true,
        });
        /** Uploads credentials for the Merchant Center account. If credentials already exist for this Merchant Center account and purpose, this method updates them. */
        await gapi.client.content.accounts.credentials.create({
            accountId: "Test string",
        }, {
            accessToken: "Test string",
            expiresIn: "Test string",
            purpose: "Test string",
        });
        /** Creates a new label, not assigned to any account. */
        await gapi.client.content.accounts.labels.create({
            accountId: "Test string",
        }, {
            accountId: "Test string",
            description: "Test string",
            labelId: "Test string",
            labelType: "Test string",
            name: "Test string",
        });
        /** Deletes a label and removes it from all accounts to which it was assigned. */
        await gapi.client.content.accounts.labels.delete({
            accountId: "Test string",
            labelId: "Test string",
        });
        /** Lists the labels assigned to an account. */
        await gapi.client.content.accounts.labels.list({
            accountId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Updates a label. */
        await gapi.client.content.accounts.labels.patch({
            accountId: "Test string",
            labelId: "Test string",
        }, {
            accountId: "Test string",
            description: "Test string",
            labelId: "Test string",
            labelType: "Test string",
            name: "Test string",
        });
        /** Links return carrier to a merchant account. */
        await gapi.client.content.accounts.returncarrier.create({
            accountId: "Test string",
        }, {
            carrierAccountId: "Test string",
            carrierAccountName: "Test string",
            carrierAccountNumber: "Test string",
            carrierCode: "Test string",
        });
        /** Delete a return carrier in the merchant account. */
        await gapi.client.content.accounts.returncarrier.delete({
            accountId: "Test string",
            carrierAccountId: "Test string",
        });
        /** Lists available return carriers in the merchant account. */
        await gapi.client.content.accounts.returncarrier.list({
            accountId: "Test string",
        });
        /** Updates a return carrier in the merchant account. */
        await gapi.client.content.accounts.returncarrier.patch({
            accountId: "Test string",
            carrierAccountId: "Test string",
        }, {
            carrierAccountId: "Test string",
            carrierAccountName: "Test string",
            carrierAccountNumber: "Test string",
            carrierCode: "Test string",
        });
        /** Retrieves, inserts, updates, and deletes multiple Merchant Center (sub-)accounts in a single request. */
        await gapi.client.content.accounts.custombatch({
        }, {
            entries: [
                {
                    account: {
                        accountManagement: "Test string",
                        adsLinks: [
                            {
                                adsId: "Test string",
                                status: "Test string",
                            }                        ],
                        adultContent: true,
                        automaticLabelIds: [
                            "Test string"                        ],
                        businessInformation: {
                            address: {
                                country: "Test string",
                                locality: "Test string",
                                postalCode: "Test string",
                                region: "Test string",
                                streetAddress: "Test string",
                            },
                            customerService: {
                                email: "Test string",
                                phoneNumber: "Test string",
                                url: "Test string",
                            },
                            phoneNumber: "Test string",
                        },
                        cssId: "Test string",
                        googleMyBusinessLink: {
                            gmbAccountId: "Test string",
                            gmbEmail: "Test string",
                            status: "Test string",
                        },
                        id: "Test string",
                        kind: "Test string",
                        labelIds: [
                            "Test string"                        ],
                        name: "Test string",
                        sellerId: "Test string",
                        users: [
                            {
                                admin: true,
                                emailAddress: "Test string",
                                orderManager: true,
                                paymentsAnalyst: true,
                                paymentsManager: true,
                            }                        ],
                        websiteUrl: "Test string",
                        youtubeChannelLinks: [
                            {
                                channelId: "Test string",
                                status: "Test string",
                            }                        ],
                    },
                    accountId: "Test string",
                    batchId: 42,
                    force: true,
                    labelIds: [
                        "Test string"                    ],
                    linkRequest: {
                        action: "Test string",
                        linkedAccountId: "Test string",
                        linkType: "Test string",
                        services: [
                            "Test string"                        ],
                    },
                    merchantId: "Test string",
                    method: "Test string",
                    overwrite: true,
                    view: "Test string",
                }            ],
        });
        /** Uploads credentials for the Merchant Center account. If credentials already exist for this Merchant Center account and purpose, this method updates them. */
        await gapi.client.content.accounts.credentials.create({
            accountId: "Test string",
        }, {
            accessToken: "Test string",
            expiresIn: "Test string",
            purpose: "Test string",
        });
        /** Creates a new label, not assigned to any account. */
        await gapi.client.content.accounts.labels.create({
            accountId: "Test string",
        }, {
            accountId: "Test string",
            description: "Test string",
            labelId: "Test string",
            labelType: "Test string",
            name: "Test string",
        });
        /** Deletes a label and removes it from all accounts to which it was assigned. */
        await gapi.client.content.accounts.labels.delete({
            accountId: "Test string",
            labelId: "Test string",
        });
        /** Lists the labels assigned to an account. */
        await gapi.client.content.accounts.labels.list({
            accountId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Updates a label. */
        await gapi.client.content.accounts.labels.patch({
            accountId: "Test string",
            labelId: "Test string",
        }, {
            accountId: "Test string",
            description: "Test string",
            labelId: "Test string",
            labelType: "Test string",
            name: "Test string",
        });
        /** Links return carrier to a merchant account. */
        await gapi.client.content.accounts.returncarrier.create({
            accountId: "Test string",
        }, {
            carrierAccountId: "Test string",
            carrierAccountName: "Test string",
            carrierAccountNumber: "Test string",
            carrierCode: "Test string",
        });
        /** Delete a return carrier in the merchant account. */
        await gapi.client.content.accounts.returncarrier.delete({
            accountId: "Test string",
            carrierAccountId: "Test string",
        });
        /** Lists available return carriers in the merchant account. */
        await gapi.client.content.accounts.returncarrier.list({
            accountId: "Test string",
        });
        /** Updates a return carrier in the merchant account. */
        await gapi.client.content.accounts.returncarrier.patch({
            accountId: "Test string",
            carrierAccountId: "Test string",
        }, {
            carrierAccountId: "Test string",
            carrierAccountName: "Test string",
            carrierAccountNumber: "Test string",
            carrierCode: "Test string",
        });
        /** Deletes a Merchant Center sub-account. */
        await gapi.client.content.accounts.delete({
            accountId: "Test string",
            force: true,
            merchantId: "Test string",
        });
        /** Uploads credentials for the Merchant Center account. If credentials already exist for this Merchant Center account and purpose, this method updates them. */
        await gapi.client.content.accounts.credentials.create({
            accountId: "Test string",
        }, {
            accessToken: "Test string",
            expiresIn: "Test string",
            purpose: "Test string",
        });
        /** Creates a new label, not assigned to any account. */
        await gapi.client.content.accounts.labels.create({
            accountId: "Test string",
        }, {
            accountId: "Test string",
            description: "Test string",
            labelId: "Test string",
            labelType: "Test string",
            name: "Test string",
        });
        /** Deletes a label and removes it from all accounts to which it was assigned. */
        await gapi.client.content.accounts.labels.delete({
            accountId: "Test string",
            labelId: "Test string",
        });
        /** Lists the labels assigned to an account. */
        await gapi.client.content.accounts.labels.list({
            accountId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Updates a label. */
        await gapi.client.content.accounts.labels.patch({
            accountId: "Test string",
            labelId: "Test string",
        }, {
            accountId: "Test string",
            description: "Test string",
            labelId: "Test string",
            labelType: "Test string",
            name: "Test string",
        });
        /** Links return carrier to a merchant account. */
        await gapi.client.content.accounts.returncarrier.create({
            accountId: "Test string",
        }, {
            carrierAccountId: "Test string",
            carrierAccountName: "Test string",
            carrierAccountNumber: "Test string",
            carrierCode: "Test string",
        });
        /** Delete a return carrier in the merchant account. */
        await gapi.client.content.accounts.returncarrier.delete({
            accountId: "Test string",
            carrierAccountId: "Test string",
        });
        /** Lists available return carriers in the merchant account. */
        await gapi.client.content.accounts.returncarrier.list({
            accountId: "Test string",
        });
        /** Updates a return carrier in the merchant account. */
        await gapi.client.content.accounts.returncarrier.patch({
            accountId: "Test string",
            carrierAccountId: "Test string",
        }, {
            carrierAccountId: "Test string",
            carrierAccountName: "Test string",
            carrierAccountNumber: "Test string",
            carrierCode: "Test string",
        });
        /** Retrieves a Merchant Center account. */
        await gapi.client.content.accounts.get({
            accountId: "Test string",
            merchantId: "Test string",
            view: "Test string",
        });
        /** Uploads credentials for the Merchant Center account. If credentials already exist for this Merchant Center account and purpose, this method updates them. */
        await gapi.client.content.accounts.credentials.create({
            accountId: "Test string",
        }, {
            accessToken: "Test string",
            expiresIn: "Test string",
            purpose: "Test string",
        });
        /** Creates a new label, not assigned to any account. */
        await gapi.client.content.accounts.labels.create({
            accountId: "Test string",
        }, {
            accountId: "Test string",
            description: "Test string",
            labelId: "Test string",
            labelType: "Test string",
            name: "Test string",
        });
        /** Deletes a label and removes it from all accounts to which it was assigned. */
        await gapi.client.content.accounts.labels.delete({
            accountId: "Test string",
            labelId: "Test string",
        });
        /** Lists the labels assigned to an account. */
        await gapi.client.content.accounts.labels.list({
            accountId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Updates a label. */
        await gapi.client.content.accounts.labels.patch({
            accountId: "Test string",
            labelId: "Test string",
        }, {
            accountId: "Test string",
            description: "Test string",
            labelId: "Test string",
            labelType: "Test string",
            name: "Test string",
        });
        /** Links return carrier to a merchant account. */
        await gapi.client.content.accounts.returncarrier.create({
            accountId: "Test string",
        }, {
            carrierAccountId: "Test string",
            carrierAccountName: "Test string",
            carrierAccountNumber: "Test string",
            carrierCode: "Test string",
        });
        /** Delete a return carrier in the merchant account. */
        await gapi.client.content.accounts.returncarrier.delete({
            accountId: "Test string",
            carrierAccountId: "Test string",
        });
        /** Lists available return carriers in the merchant account. */
        await gapi.client.content.accounts.returncarrier.list({
            accountId: "Test string",
        });
        /** Updates a return carrier in the merchant account. */
        await gapi.client.content.accounts.returncarrier.patch({
            accountId: "Test string",
            carrierAccountId: "Test string",
        }, {
            carrierAccountId: "Test string",
            carrierAccountName: "Test string",
            carrierAccountNumber: "Test string",
            carrierCode: "Test string",
        });
        /** Creates a Merchant Center sub-account. */
        await gapi.client.content.accounts.insert({
            merchantId: "Test string",
        }, {
            accountManagement: "Test string",
            adsLinks: [
                {
                    adsId: "Test string",
                    status: "Test string",
                }            ],
            adultContent: true,
            automaticLabelIds: [
                "Test string"            ],
            businessInformation: {
                address: {
                    country: "Test string",
                    locality: "Test string",
                    postalCode: "Test string",
                    region: "Test string",
                    streetAddress: "Test string",
                },
                customerService: {
                    email: "Test string",
                    phoneNumber: "Test string",
                    url: "Test string",
                },
                phoneNumber: "Test string",
            },
            cssId: "Test string",
            googleMyBusinessLink: {
                gmbAccountId: "Test string",
                gmbEmail: "Test string",
                status: "Test string",
            },
            id: "Test string",
            kind: "Test string",
            labelIds: [
                "Test string"            ],
            name: "Test string",
            sellerId: "Test string",
            users: [
                {
                    admin: true,
                    emailAddress: "Test string",
                    orderManager: true,
                    paymentsAnalyst: true,
                    paymentsManager: true,
                }            ],
            websiteUrl: "Test string",
            youtubeChannelLinks: [
                {
                    channelId: "Test string",
                    status: "Test string",
                }            ],
        });
        /** Uploads credentials for the Merchant Center account. If credentials already exist for this Merchant Center account and purpose, this method updates them. */
        await gapi.client.content.accounts.credentials.create({
            accountId: "Test string",
        }, {
            accessToken: "Test string",
            expiresIn: "Test string",
            purpose: "Test string",
        });
        /** Creates a new label, not assigned to any account. */
        await gapi.client.content.accounts.labels.create({
            accountId: "Test string",
        }, {
            accountId: "Test string",
            description: "Test string",
            labelId: "Test string",
            labelType: "Test string",
            name: "Test string",
        });
        /** Deletes a label and removes it from all accounts to which it was assigned. */
        await gapi.client.content.accounts.labels.delete({
            accountId: "Test string",
            labelId: "Test string",
        });
        /** Lists the labels assigned to an account. */
        await gapi.client.content.accounts.labels.list({
            accountId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Updates a label. */
        await gapi.client.content.accounts.labels.patch({
            accountId: "Test string",
            labelId: "Test string",
        }, {
            accountId: "Test string",
            description: "Test string",
            labelId: "Test string",
            labelType: "Test string",
            name: "Test string",
        });
        /** Links return carrier to a merchant account. */
        await gapi.client.content.accounts.returncarrier.create({
            accountId: "Test string",
        }, {
            carrierAccountId: "Test string",
            carrierAccountName: "Test string",
            carrierAccountNumber: "Test string",
            carrierCode: "Test string",
        });
        /** Delete a return carrier in the merchant account. */
        await gapi.client.content.accounts.returncarrier.delete({
            accountId: "Test string",
            carrierAccountId: "Test string",
        });
        /** Lists available return carriers in the merchant account. */
        await gapi.client.content.accounts.returncarrier.list({
            accountId: "Test string",
        });
        /** Updates a return carrier in the merchant account. */
        await gapi.client.content.accounts.returncarrier.patch({
            accountId: "Test string",
            carrierAccountId: "Test string",
        }, {
            carrierAccountId: "Test string",
            carrierAccountName: "Test string",
            carrierAccountNumber: "Test string",
            carrierCode: "Test string",
        });
        /** Performs an action on a link between two Merchant Center accounts, namely accountId and linkedAccountId. */
        await gapi.client.content.accounts.link({
            accountId: "Test string",
            merchantId: "Test string",
        }, {
            action: "Test string",
            linkedAccountId: "Test string",
            linkType: "Test string",
            paymentServiceProviderLinkInfo: {
                externalAccountBusinessCountry: "Test string",
                externalAccountId: "Test string",
            },
            services: [
                "Test string"            ],
        });
        /** Uploads credentials for the Merchant Center account. If credentials already exist for this Merchant Center account and purpose, this method updates them. */
        await gapi.client.content.accounts.credentials.create({
            accountId: "Test string",
        }, {
            accessToken: "Test string",
            expiresIn: "Test string",
            purpose: "Test string",
        });
        /** Creates a new label, not assigned to any account. */
        await gapi.client.content.accounts.labels.create({
            accountId: "Test string",
        }, {
            accountId: "Test string",
            description: "Test string",
            labelId: "Test string",
            labelType: "Test string",
            name: "Test string",
        });
        /** Deletes a label and removes it from all accounts to which it was assigned. */
        await gapi.client.content.accounts.labels.delete({
            accountId: "Test string",
            labelId: "Test string",
        });
        /** Lists the labels assigned to an account. */
        await gapi.client.content.accounts.labels.list({
            accountId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Updates a label. */
        await gapi.client.content.accounts.labels.patch({
            accountId: "Test string",
            labelId: "Test string",
        }, {
            accountId: "Test string",
            description: "Test string",
            labelId: "Test string",
            labelType: "Test string",
            name: "Test string",
        });
        /** Links return carrier to a merchant account. */
        await gapi.client.content.accounts.returncarrier.create({
            accountId: "Test string",
        }, {
            carrierAccountId: "Test string",
            carrierAccountName: "Test string",
            carrierAccountNumber: "Test string",
            carrierCode: "Test string",
        });
        /** Delete a return carrier in the merchant account. */
        await gapi.client.content.accounts.returncarrier.delete({
            accountId: "Test string",
            carrierAccountId: "Test string",
        });
        /** Lists available return carriers in the merchant account. */
        await gapi.client.content.accounts.returncarrier.list({
            accountId: "Test string",
        });
        /** Updates a return carrier in the merchant account. */
        await gapi.client.content.accounts.returncarrier.patch({
            accountId: "Test string",
            carrierAccountId: "Test string",
        }, {
            carrierAccountId: "Test string",
            carrierAccountName: "Test string",
            carrierAccountNumber: "Test string",
            carrierCode: "Test string",
        });
        /** Lists the sub-accounts in your Merchant Center account. */
        await gapi.client.content.accounts.list({
            label: "Test string",
            maxResults: 42,
            merchantId: "Test string",
            name: "Test string",
            pageToken: "Test string",
            view: "Test string",
        });
        /** Uploads credentials for the Merchant Center account. If credentials already exist for this Merchant Center account and purpose, this method updates them. */
        await gapi.client.content.accounts.credentials.create({
            accountId: "Test string",
        }, {
            accessToken: "Test string",
            expiresIn: "Test string",
            purpose: "Test string",
        });
        /** Creates a new label, not assigned to any account. */
        await gapi.client.content.accounts.labels.create({
            accountId: "Test string",
        }, {
            accountId: "Test string",
            description: "Test string",
            labelId: "Test string",
            labelType: "Test string",
            name: "Test string",
        });
        /** Deletes a label and removes it from all accounts to which it was assigned. */
        await gapi.client.content.accounts.labels.delete({
            accountId: "Test string",
            labelId: "Test string",
        });
        /** Lists the labels assigned to an account. */
        await gapi.client.content.accounts.labels.list({
            accountId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Updates a label. */
        await gapi.client.content.accounts.labels.patch({
            accountId: "Test string",
            labelId: "Test string",
        }, {
            accountId: "Test string",
            description: "Test string",
            labelId: "Test string",
            labelType: "Test string",
            name: "Test string",
        });
        /** Links return carrier to a merchant account. */
        await gapi.client.content.accounts.returncarrier.create({
            accountId: "Test string",
        }, {
            carrierAccountId: "Test string",
            carrierAccountName: "Test string",
            carrierAccountNumber: "Test string",
            carrierCode: "Test string",
        });
        /** Delete a return carrier in the merchant account. */
        await gapi.client.content.accounts.returncarrier.delete({
            accountId: "Test string",
            carrierAccountId: "Test string",
        });
        /** Lists available return carriers in the merchant account. */
        await gapi.client.content.accounts.returncarrier.list({
            accountId: "Test string",
        });
        /** Updates a return carrier in the merchant account. */
        await gapi.client.content.accounts.returncarrier.patch({
            accountId: "Test string",
            carrierAccountId: "Test string",
        }, {
            carrierAccountId: "Test string",
            carrierAccountName: "Test string",
            carrierAccountNumber: "Test string",
            carrierCode: "Test string",
        });
        /** Returns the list of accounts linked to your Merchant Center account. */
        await gapi.client.content.accounts.listlinks({
            accountId: "Test string",
            maxResults: 42,
            merchantId: "Test string",
            pageToken: "Test string",
        });
        /** Uploads credentials for the Merchant Center account. If credentials already exist for this Merchant Center account and purpose, this method updates them. */
        await gapi.client.content.accounts.credentials.create({
            accountId: "Test string",
        }, {
            accessToken: "Test string",
            expiresIn: "Test string",
            purpose: "Test string",
        });
        /** Creates a new label, not assigned to any account. */
        await gapi.client.content.accounts.labels.create({
            accountId: "Test string",
        }, {
            accountId: "Test string",
            description: "Test string",
            labelId: "Test string",
            labelType: "Test string",
            name: "Test string",
        });
        /** Deletes a label and removes it from all accounts to which it was assigned. */
        await gapi.client.content.accounts.labels.delete({
            accountId: "Test string",
            labelId: "Test string",
        });
        /** Lists the labels assigned to an account. */
        await gapi.client.content.accounts.labels.list({
            accountId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Updates a label. */
        await gapi.client.content.accounts.labels.patch({
            accountId: "Test string",
            labelId: "Test string",
        }, {
            accountId: "Test string",
            description: "Test string",
            labelId: "Test string",
            labelType: "Test string",
            name: "Test string",
        });
        /** Links return carrier to a merchant account. */
        await gapi.client.content.accounts.returncarrier.create({
            accountId: "Test string",
        }, {
            carrierAccountId: "Test string",
            carrierAccountName: "Test string",
            carrierAccountNumber: "Test string",
            carrierCode: "Test string",
        });
        /** Delete a return carrier in the merchant account. */
        await gapi.client.content.accounts.returncarrier.delete({
            accountId: "Test string",
            carrierAccountId: "Test string",
        });
        /** Lists available return carriers in the merchant account. */
        await gapi.client.content.accounts.returncarrier.list({
            accountId: "Test string",
        });
        /** Updates a return carrier in the merchant account. */
        await gapi.client.content.accounts.returncarrier.patch({
            accountId: "Test string",
            carrierAccountId: "Test string",
        }, {
            carrierAccountId: "Test string",
            carrierAccountName: "Test string",
            carrierAccountNumber: "Test string",
            carrierCode: "Test string",
        });
        /** Request verification code to start phone verification. */
        await gapi.client.content.accounts.requestphoneverification({
            accountId: "Test string",
            merchantId: "Test string",
        }, {
            languageCode: "Test string",
            phoneNumber: "Test string",
            phoneRegionCode: "Test string",
            phoneVerificationMethod: "Test string",
        });
        /** Uploads credentials for the Merchant Center account. If credentials already exist for this Merchant Center account and purpose, this method updates them. */
        await gapi.client.content.accounts.credentials.create({
            accountId: "Test string",
        }, {
            accessToken: "Test string",
            expiresIn: "Test string",
            purpose: "Test string",
        });
        /** Creates a new label, not assigned to any account. */
        await gapi.client.content.accounts.labels.create({
            accountId: "Test string",
        }, {
            accountId: "Test string",
            description: "Test string",
            labelId: "Test string",
            labelType: "Test string",
            name: "Test string",
        });
        /** Deletes a label and removes it from all accounts to which it was assigned. */
        await gapi.client.content.accounts.labels.delete({
            accountId: "Test string",
            labelId: "Test string",
        });
        /** Lists the labels assigned to an account. */
        await gapi.client.content.accounts.labels.list({
            accountId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Updates a label. */
        await gapi.client.content.accounts.labels.patch({
            accountId: "Test string",
            labelId: "Test string",
        }, {
            accountId: "Test string",
            description: "Test string",
            labelId: "Test string",
            labelType: "Test string",
            name: "Test string",
        });
        /** Links return carrier to a merchant account. */
        await gapi.client.content.accounts.returncarrier.create({
            accountId: "Test string",
        }, {
            carrierAccountId: "Test string",
            carrierAccountName: "Test string",
            carrierAccountNumber: "Test string",
            carrierCode: "Test string",
        });
        /** Delete a return carrier in the merchant account. */
        await gapi.client.content.accounts.returncarrier.delete({
            accountId: "Test string",
            carrierAccountId: "Test string",
        });
        /** Lists available return carriers in the merchant account. */
        await gapi.client.content.accounts.returncarrier.list({
            accountId: "Test string",
        });
        /** Updates a return carrier in the merchant account. */
        await gapi.client.content.accounts.returncarrier.patch({
            accountId: "Test string",
            carrierAccountId: "Test string",
        }, {
            carrierAccountId: "Test string",
            carrierAccountName: "Test string",
            carrierAccountNumber: "Test string",
            carrierCode: "Test string",
        });
        /** Updates a Merchant Center account. Any fields that are not provided are deleted from the resource. */
        await gapi.client.content.accounts.update({
            accountId: "Test string",
            merchantId: "Test string",
        }, {
            accountManagement: "Test string",
            adsLinks: [
                {
                    adsId: "Test string",
                    status: "Test string",
                }            ],
            adultContent: true,
            automaticLabelIds: [
                "Test string"            ],
            businessInformation: {
                address: {
                    country: "Test string",
                    locality: "Test string",
                    postalCode: "Test string",
                    region: "Test string",
                    streetAddress: "Test string",
                },
                customerService: {
                    email: "Test string",
                    phoneNumber: "Test string",
                    url: "Test string",
                },
                phoneNumber: "Test string",
            },
            cssId: "Test string",
            googleMyBusinessLink: {
                gmbAccountId: "Test string",
                gmbEmail: "Test string",
                status: "Test string",
            },
            id: "Test string",
            kind: "Test string",
            labelIds: [
                "Test string"            ],
            name: "Test string",
            sellerId: "Test string",
            users: [
                {
                    admin: true,
                    emailAddress: "Test string",
                    orderManager: true,
                    paymentsAnalyst: true,
                    paymentsManager: true,
                }            ],
            websiteUrl: "Test string",
            youtubeChannelLinks: [
                {
                    channelId: "Test string",
                    status: "Test string",
                }            ],
        });
        /** Uploads credentials for the Merchant Center account. If credentials already exist for this Merchant Center account and purpose, this method updates them. */
        await gapi.client.content.accounts.credentials.create({
            accountId: "Test string",
        }, {
            accessToken: "Test string",
            expiresIn: "Test string",
            purpose: "Test string",
        });
        /** Creates a new label, not assigned to any account. */
        await gapi.client.content.accounts.labels.create({
            accountId: "Test string",
        }, {
            accountId: "Test string",
            description: "Test string",
            labelId: "Test string",
            labelType: "Test string",
            name: "Test string",
        });
        /** Deletes a label and removes it from all accounts to which it was assigned. */
        await gapi.client.content.accounts.labels.delete({
            accountId: "Test string",
            labelId: "Test string",
        });
        /** Lists the labels assigned to an account. */
        await gapi.client.content.accounts.labels.list({
            accountId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Updates a label. */
        await gapi.client.content.accounts.labels.patch({
            accountId: "Test string",
            labelId: "Test string",
        }, {
            accountId: "Test string",
            description: "Test string",
            labelId: "Test string",
            labelType: "Test string",
            name: "Test string",
        });
        /** Links return carrier to a merchant account. */
        await gapi.client.content.accounts.returncarrier.create({
            accountId: "Test string",
        }, {
            carrierAccountId: "Test string",
            carrierAccountName: "Test string",
            carrierAccountNumber: "Test string",
            carrierCode: "Test string",
        });
        /** Delete a return carrier in the merchant account. */
        await gapi.client.content.accounts.returncarrier.delete({
            accountId: "Test string",
            carrierAccountId: "Test string",
        });
        /** Lists available return carriers in the merchant account. */
        await gapi.client.content.accounts.returncarrier.list({
            accountId: "Test string",
        });
        /** Updates a return carrier in the merchant account. */
        await gapi.client.content.accounts.returncarrier.patch({
            accountId: "Test string",
            carrierAccountId: "Test string",
        }, {
            carrierAccountId: "Test string",
            carrierAccountName: "Test string",
            carrierAccountNumber: "Test string",
            carrierCode: "Test string",
        });
        /** Updates labels that are assigned to the Merchant Center account by CSS user. */
        await gapi.client.content.accounts.updatelabels({
            accountId: "Test string",
            merchantId: "Test string",
        }, {
            labelIds: [
                "Test string"            ],
        });
        /** Uploads credentials for the Merchant Center account. If credentials already exist for this Merchant Center account and purpose, this method updates them. */
        await gapi.client.content.accounts.credentials.create({
            accountId: "Test string",
        }, {
            accessToken: "Test string",
            expiresIn: "Test string",
            purpose: "Test string",
        });
        /** Creates a new label, not assigned to any account. */
        await gapi.client.content.accounts.labels.create({
            accountId: "Test string",
        }, {
            accountId: "Test string",
            description: "Test string",
            labelId: "Test string",
            labelType: "Test string",
            name: "Test string",
        });
        /** Deletes a label and removes it from all accounts to which it was assigned. */
        await gapi.client.content.accounts.labels.delete({
            accountId: "Test string",
            labelId: "Test string",
        });
        /** Lists the labels assigned to an account. */
        await gapi.client.content.accounts.labels.list({
            accountId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Updates a label. */
        await gapi.client.content.accounts.labels.patch({
            accountId: "Test string",
            labelId: "Test string",
        }, {
            accountId: "Test string",
            description: "Test string",
            labelId: "Test string",
            labelType: "Test string",
            name: "Test string",
        });
        /** Links return carrier to a merchant account. */
        await gapi.client.content.accounts.returncarrier.create({
            accountId: "Test string",
        }, {
            carrierAccountId: "Test string",
            carrierAccountName: "Test string",
            carrierAccountNumber: "Test string",
            carrierCode: "Test string",
        });
        /** Delete a return carrier in the merchant account. */
        await gapi.client.content.accounts.returncarrier.delete({
            accountId: "Test string",
            carrierAccountId: "Test string",
        });
        /** Lists available return carriers in the merchant account. */
        await gapi.client.content.accounts.returncarrier.list({
            accountId: "Test string",
        });
        /** Updates a return carrier in the merchant account. */
        await gapi.client.content.accounts.returncarrier.patch({
            accountId: "Test string",
            carrierAccountId: "Test string",
        }, {
            carrierAccountId: "Test string",
            carrierAccountName: "Test string",
            carrierAccountNumber: "Test string",
            carrierCode: "Test string",
        });
        /** Validates verification code to verify phone number for the account. */
        await gapi.client.content.accounts.verifyphonenumber({
            accountId: "Test string",
            merchantId: "Test string",
        }, {
            phoneVerificationMethod: "Test string",
            verificationCode: "Test string",
            verificationId: "Test string",
        });
        /** Uploads credentials for the Merchant Center account. If credentials already exist for this Merchant Center account and purpose, this method updates them. */
        await gapi.client.content.accounts.credentials.create({
            accountId: "Test string",
        }, {
            accessToken: "Test string",
            expiresIn: "Test string",
            purpose: "Test string",
        });
        /** Creates a new label, not assigned to any account. */
        await gapi.client.content.accounts.labels.create({
            accountId: "Test string",
        }, {
            accountId: "Test string",
            description: "Test string",
            labelId: "Test string",
            labelType: "Test string",
            name: "Test string",
        });
        /** Deletes a label and removes it from all accounts to which it was assigned. */
        await gapi.client.content.accounts.labels.delete({
            accountId: "Test string",
            labelId: "Test string",
        });
        /** Lists the labels assigned to an account. */
        await gapi.client.content.accounts.labels.list({
            accountId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Updates a label. */
        await gapi.client.content.accounts.labels.patch({
            accountId: "Test string",
            labelId: "Test string",
        }, {
            accountId: "Test string",
            description: "Test string",
            labelId: "Test string",
            labelType: "Test string",
            name: "Test string",
        });
        /** Links return carrier to a merchant account. */
        await gapi.client.content.accounts.returncarrier.create({
            accountId: "Test string",
        }, {
            carrierAccountId: "Test string",
            carrierAccountName: "Test string",
            carrierAccountNumber: "Test string",
            carrierCode: "Test string",
        });
        /** Delete a return carrier in the merchant account. */
        await gapi.client.content.accounts.returncarrier.delete({
            accountId: "Test string",
            carrierAccountId: "Test string",
        });
        /** Lists available return carriers in the merchant account. */
        await gapi.client.content.accounts.returncarrier.list({
            accountId: "Test string",
        });
        /** Updates a return carrier in the merchant account. */
        await gapi.client.content.accounts.returncarrier.patch({
            accountId: "Test string",
            carrierAccountId: "Test string",
        }, {
            carrierAccountId: "Test string",
            carrierAccountName: "Test string",
            carrierAccountNumber: "Test string",
            carrierCode: "Test string",
        });
        /** Retrieves multiple Merchant Center account statuses in a single request. */
        await gapi.client.content.accountstatuses.custombatch({
        }, {
            entries: [
                {
                    accountId: "Test string",
                    batchId: 42,
                    destinations: [
                        "Test string"                    ],
                    merchantId: "Test string",
                    method: "Test string",
                }            ],
        });
        /** Retrieves the status of a Merchant Center account. No itemLevelIssues are returned for multi-client accounts. */
        await gapi.client.content.accountstatuses.get({
            accountId: "Test string",
            destinations: "Test string",
            merchantId: "Test string",
        });
        /** Lists the statuses of the sub-accounts in your Merchant Center account. */
        await gapi.client.content.accountstatuses.list({
            destinations: "Test string",
            maxResults: 42,
            merchantId: "Test string",
            name: "Test string",
            pageToken: "Test string",
        });
        /** Retrieves and updates tax settings of multiple accounts in a single request. */
        await gapi.client.content.accounttax.custombatch({
        }, {
            entries: [
                {
                    accountId: "Test string",
                    accountTax: {
                        accountId: "Test string",
                        kind: "Test string",
                        rules: [
                            {
                                country: "Test string",
                                locationId: "Test string",
                                ratePercent: "Test string",
                                shippingTaxed: true,
                                useGlobalRate: true,
                            }                        ],
                    },
                    batchId: 42,
                    merchantId: "Test string",
                    method: "Test string",
                }            ],
        });
        /** Retrieves the tax settings of the account. */
        await gapi.client.content.accounttax.get({
            accountId: "Test string",
            merchantId: "Test string",
        });
        /** Lists the tax settings of the sub-accounts in your Merchant Center account. */
        await gapi.client.content.accounttax.list({
            maxResults: 42,
            merchantId: "Test string",
            pageToken: "Test string",
        });
        /** Updates the tax settings of the account. Any fields that are not provided are deleted from the resource. */
        await gapi.client.content.accounttax.update({
            accountId: "Test string",
            merchantId: "Test string",
        }, {
            accountId: "Test string",
            kind: "Test string",
            rules: [
                {
                    country: "Test string",
                    locationId: "Test string",
                    ratePercent: "Test string",
                    shippingTaxed: true,
                    useGlobalRate: true,
                }            ],
        });
        /**
         * Reactivates the BoG program in your Merchant Center account. Moves the program to the active state when allowed, e.g. when paused. Important: This method is only whitelisted for
         * selected merchants.
         */
        await gapi.client.content.buyongoogleprograms.activate({
            merchantId: "Test string",
            regionCode: "Test string",
        }, {
        });
        /** Retrieves a status of the BoG program for your Merchant Center account. */
        await gapi.client.content.buyongoogleprograms.get({
            merchantId: "Test string",
            regionCode: "Test string",
        });
        /**
         * Onboards the BoG program in your Merchant Center account. By using this method, you agree to the [Terms of
         * Service](https://merchants.google.com/mc/termsofservice/transactions/US/latest). Calling this method is only possible if the authenticated account is the same as the merchant id in the
         * request. Calling this method multiple times will only accept Terms of Service if the latest version is not currently signed.
         */
        await gapi.client.content.buyongoogleprograms.onboard({
            merchantId: "Test string",
            regionCode: "Test string",
        }, {
            customerServiceEmail: "Test string",
        });
        /** Pauses the BoG program in your Merchant Center account. Important: This method is only whitelisted for selected merchants. */
        await gapi.client.content.buyongoogleprograms.pause({
            merchantId: "Test string",
            regionCode: "Test string",
        }, {
        });
        /**
         * Requests review and then activates the BoG program in your Merchant Center account for the first time. Moves the program to the REVIEW_PENDING state. Important: This method is only
         * whitelisted for selected merchants.
         */
        await gapi.client.content.buyongoogleprograms.requestreview({
            merchantId: "Test string",
            regionCode: "Test string",
        }, {
        });
        /**
         * Uploads a collection to your Merchant Center account. If a collection with the same collectionId already exists, this method updates that entry. In each update, the collection is
         * completely replaced by the fields in the body of the update request.
         */
        await gapi.client.content.collections.create({
            merchantId: "Test string",
        }, {
            customLabel0: "Test string",
            customLabel1: "Test string",
            customLabel2: "Test string",
            customLabel3: "Test string",
            customLabel4: "Test string",
            featuredProduct: [
                {
                    offerId: "Test string",
                    x: 42,
                    y: 42,
                }            ],
            headline: [
                "Test string"            ],
            id: "Test string",
            imageLink: [
                "Test string"            ],
            language: "Test string",
            link: "Test string",
            mobileLink: "Test string",
            productCountry: "Test string",
        });
        /** Deletes a collection from your Merchant Center account. */
        await gapi.client.content.collections.delete({
            collectionId: "Test string",
            merchantId: "Test string",
        });
        /** Retrieves a collection from your Merchant Center account. */
        await gapi.client.content.collections.get({
            collectionId: "Test string",
            merchantId: "Test string",
        });
        /**
         * Lists the collections in your Merchant Center account. The response might contain fewer items than specified by page_size. Rely on next_page_token to determine if there are more items
         * to be requested.
         */
        await gapi.client.content.collections.list({
            merchantId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Gets the status of a collection from your Merchant Center account. */
        await gapi.client.content.collectionstatuses.get({
            collectionId: "Test string",
            merchantId: "Test string",
        });
        /** Lists the statuses of the collections in your Merchant Center account. */
        await gapi.client.content.collectionstatuses.list({
            merchantId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Retrieves a single CSS domain by ID. */
        await gapi.client.content.csses.get({
            cssDomainId: "Test string",
            cssGroupId: "Test string",
        });
        /** Lists CSS domains affiliated with a CSS group. */
        await gapi.client.content.csses.list({
            cssGroupId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Updates labels that are assigned to a CSS domain by its CSS group. */
        await gapi.client.content.csses.updatelabels({
            cssDomainId: "Test string",
            cssGroupId: "Test string",
        }, {
            labelIds: [
                "Test string"            ],
        });
        /** Deletes, fetches, gets, inserts and updates multiple datafeeds in a single request. */
        await gapi.client.content.datafeeds.custombatch({
        }, {
            entries: [
                {
                    batchId: 42,
                    datafeed: {
                        attributeLanguage: "Test string",
                        contentType: "Test string",
                        fetchSchedule: {
                            dayOfMonth: 42,
                            fetchUrl: "Test string",
                            hour: 42,
                            minuteOfHour: 42,
                            password: "Test string",
                            paused: true,
                            timeZone: "Test string",
                            username: "Test string",
                            weekday: "Test string",
                        },
                        fileName: "Test string",
                        format: {
                            columnDelimiter: "Test string",
                            fileEncoding: "Test string",
                            quotingMode: "Test string",
                        },
                        id: "Test string",
                        kind: "Test string",
                        name: "Test string",
                        targets: [
                            {
                                country: "Test string",
                                excludedDestinations: [
                                    "Test string"                                ],
                                includedDestinations: [
                                    "Test string"                                ],
                                language: "Test string",
                            }                        ],
                    },
                    datafeedId: "Test string",
                    merchantId: "Test string",
                    method: "Test string",
                }            ],
        });
        /** Deletes a datafeed configuration from your Merchant Center account. */
        await gapi.client.content.datafeeds.delete({
            datafeedId: "Test string",
            merchantId: "Test string",
        });
        /**
         * Invokes a fetch for the datafeed in your Merchant Center account. If you need to call this method more than once per day, we recommend you use the Products service to update your
         * product data.
         */
        await gapi.client.content.datafeeds.fetchnow({
            datafeedId: "Test string",
            merchantId: "Test string",
        });
        /** Retrieves a datafeed configuration from your Merchant Center account. */
        await gapi.client.content.datafeeds.get({
            datafeedId: "Test string",
            merchantId: "Test string",
        });
        /** Registers a datafeed configuration with your Merchant Center account. */
        await gapi.client.content.datafeeds.insert({
            merchantId: "Test string",
        }, {
            attributeLanguage: "Test string",
            contentType: "Test string",
            fetchSchedule: {
                dayOfMonth: 42,
                fetchUrl: "Test string",
                hour: 42,
                minuteOfHour: 42,
                password: "Test string",
                paused: true,
                timeZone: "Test string",
                username: "Test string",
                weekday: "Test string",
            },
            fileName: "Test string",
            format: {
                columnDelimiter: "Test string",
                fileEncoding: "Test string",
                quotingMode: "Test string",
            },
            id: "Test string",
            kind: "Test string",
            name: "Test string",
            targets: [
                {
                    country: "Test string",
                    excludedDestinations: [
                        "Test string"                    ],
                    includedDestinations: [
                        "Test string"                    ],
                    language: "Test string",
                }            ],
        });
        /** Lists the configurations for datafeeds in your Merchant Center account. */
        await gapi.client.content.datafeeds.list({
            maxResults: 42,
            merchantId: "Test string",
            pageToken: "Test string",
        });
        /** Updates a datafeed configuration of your Merchant Center account. Any fields that are not provided are deleted from the resource. */
        await gapi.client.content.datafeeds.update({
            datafeedId: "Test string",
            merchantId: "Test string",
        }, {
            attributeLanguage: "Test string",
            contentType: "Test string",
            fetchSchedule: {
                dayOfMonth: 42,
                fetchUrl: "Test string",
                hour: 42,
                minuteOfHour: 42,
                password: "Test string",
                paused: true,
                timeZone: "Test string",
                username: "Test string",
                weekday: "Test string",
            },
            fileName: "Test string",
            format: {
                columnDelimiter: "Test string",
                fileEncoding: "Test string",
                quotingMode: "Test string",
            },
            id: "Test string",
            kind: "Test string",
            name: "Test string",
            targets: [
                {
                    country: "Test string",
                    excludedDestinations: [
                        "Test string"                    ],
                    includedDestinations: [
                        "Test string"                    ],
                    language: "Test string",
                }            ],
        });
        /** Gets multiple Merchant Center datafeed statuses in a single request. */
        await gapi.client.content.datafeedstatuses.custombatch({
        }, {
            entries: [
                {
                    batchId: 42,
                    country: "Test string",
                    datafeedId: "Test string",
                    language: "Test string",
                    merchantId: "Test string",
                    method: "Test string",
                }            ],
        });
        /** Retrieves the status of a datafeed from your Merchant Center account. */
        await gapi.client.content.datafeedstatuses.get({
            country: "Test string",
            datafeedId: "Test string",
            language: "Test string",
            merchantId: "Test string",
        });
        /** Lists the statuses of the datafeeds in your Merchant Center account. */
        await gapi.client.content.datafeedstatuses.list({
            maxResults: 42,
            merchantId: "Test string",
            pageToken: "Test string",
        });
        /** Retrieves the status and review eligibility for the free listing program. */
        await gapi.client.content.freelistingsprogram.get({
            merchantId: "Test string",
        });
        /** Requests a review for Free Listings program in the provided region. Important: This method is only whitelisted for selected merchants. */
        await gapi.client.content.freelistingsprogram.requestreview({
            merchantId: "Test string",
        }, {
            regionCode: "Test string",
        });
        /** Retrieves and/or updates the LIA settings of multiple accounts in a single request. */
        await gapi.client.content.liasettings.custombatch({
        }, {
            entries: [
                {
                    accountId: "Test string",
                    batchId: 42,
                    contactEmail: "Test string",
                    contactName: "Test string",
                    country: "Test string",
                    gmbEmail: "Test string",
                    liaSettings: {
                        accountId: "Test string",
                        countrySettings: [
                            {
                                about: {
                                    status: "Test string",
                                    url: "Test string",
                                },
                                country: "Test string",
                                hostedLocalStorefrontActive: true,
                                inventory: {
                                    inventoryVerificationContactEmail: "Test string",
                                    inventoryVerificationContactName: "Test string",
                                    inventoryVerificationContactStatus: "Test string",
                                    status: "Test string",
                                },
                                onDisplayToOrder: {
                                    shippingCostPolicyUrl: "Test string",
                                    status: "Test string",
                                },
                                posDataProvider: {
                                    posDataProviderId: "Test string",
                                    posExternalAccountId: "Test string",
                                },
                                storePickupActive: true,
                            }                        ],
                        kind: "Test string",
                    },
                    merchantId: "Test string",
                    method: "Test string",
                    posDataProviderId: "Test string",
                    posExternalAccountId: "Test string",
                }            ],
        });
        /** Retrieves the LIA settings of the account. */
        await gapi.client.content.liasettings.get({
            accountId: "Test string",
            merchantId: "Test string",
        });
        /** Retrieves the list of accessible Google My Business accounts. */
        await gapi.client.content.liasettings.getaccessiblegmbaccounts({
            accountId: "Test string",
            merchantId: "Test string",
        });
        /** Lists the LIA settings of the sub-accounts in your Merchant Center account. */
        await gapi.client.content.liasettings.list({
            maxResults: 42,
            merchantId: "Test string",
            pageToken: "Test string",
        });
        /** Retrieves the list of POS data providers that have active settings for the all eiligible countries. */
        await gapi.client.content.liasettings.listposdataproviders({
        });
        /** Requests access to a specified Google My Business account. */
        await gapi.client.content.liasettings.requestgmbaccess({
            accountId: "Test string",
            gmbEmail: "Test string",
            merchantId: "Test string",
        });
        /** Requests inventory validation for the specified country. */
        await gapi.client.content.liasettings.requestinventoryverification({
            accountId: "Test string",
            country: "Test string",
            merchantId: "Test string",
        });
        /** Sets the inventory verification contract for the specified country. */
        await gapi.client.content.liasettings.setinventoryverificationcontact({
            accountId: "Test string",
            contactEmail: "Test string",
            contactName: "Test string",
            country: "Test string",
            language: "Test string",
            merchantId: "Test string",
        });
        /** Sets the POS data provider for the specified country. */
        await gapi.client.content.liasettings.setposdataprovider({
            accountId: "Test string",
            country: "Test string",
            merchantId: "Test string",
            posDataProviderId: "Test string",
            posExternalAccountId: "Test string",
        });
        /** Updates the LIA settings of the account. Any fields that are not provided are deleted from the resource. */
        await gapi.client.content.liasettings.update({
            accountId: "Test string",
            merchantId: "Test string",
        }, {
            accountId: "Test string",
            countrySettings: [
                {
                    about: {
                        status: "Test string",
                        url: "Test string",
                    },
                    country: "Test string",
                    hostedLocalStorefrontActive: true,
                    inventory: {
                        inventoryVerificationContactEmail: "Test string",
                        inventoryVerificationContactName: "Test string",
                        inventoryVerificationContactStatus: "Test string",
                        status: "Test string",
                    },
                    onDisplayToOrder: {
                        shippingCostPolicyUrl: "Test string",
                        status: "Test string",
                    },
                    posDataProvider: {
                        posDataProviderId: "Test string",
                        posExternalAccountId: "Test string",
                    },
                    storePickupActive: true,
                }            ],
            kind: "Test string",
        });
        /** Updates local inventory for multiple products or stores in a single request. */
        await gapi.client.content.localinventory.custombatch({
        }, {
            entries: [
                {
                    batchId: 42,
                    localInventory: {
                        availability: "Test string",
                        instoreProductLocation: "Test string",
                        kind: "Test string",
                        pickupMethod: "Test string",
                        pickupSla: "Test string",
                        price: {
                            currency: "Test string",
                            value: "Test string",
                        },
                        quantity: 42,
                        salePrice: {
                            currency: "Test string",
                            value: "Test string",
                        },
                        salePriceEffectiveDate: "Test string",
                        storeCode: "Test string",
                    },
                    merchantId: "Test string",
                    method: "Test string",
                    productId: "Test string",
                }            ],
        });
        /** Updates the local inventory of a product in your Merchant Center account. */
        await gapi.client.content.localinventory.insert({
            merchantId: "Test string",
            productId: "Test string",
        }, {
            availability: "Test string",
            instoreProductLocation: "Test string",
            kind: "Test string",
            pickupMethod: "Test string",
            pickupSla: "Test string",
            price: {
                currency: "Test string",
                value: "Test string",
            },
            quantity: 42,
            salePrice: {
                currency: "Test string",
                value: "Test string",
            },
            salePriceEffectiveDate: "Test string",
            storeCode: "Test string",
        });
        /** Creates a charge invoice for a shipment group, and triggers a charge capture for orderinvoice enabled orders. */
        await gapi.client.content.orderinvoices.createchargeinvoice({
            merchantId: "Test string",
            orderId: "Test string",
        }, {
            invoiceId: "Test string",
            invoiceSummary: {
                additionalChargeSummaries: [
                    {
                        totalAmount: {
                            priceAmount: {
                                currency: "Test string",
                                value: "Test string",
                            },
                            taxAmount: {
                                currency: "Test string",
                                value: "Test string",
                            },
                        },
                        type: "Test string",
                    }                ],
                productTotal: {
                    priceAmount: {
                        currency: "Test string",
                        value: "Test string",
                    },
                    taxAmount: {
                        currency: "Test string",
                        value: "Test string",
                    },
                },
            },
            lineItemInvoices: [
                {
                    lineItemId: "Test string",
                    productId: "Test string",
                    shipmentUnitIds: [
                        "Test string"                    ],
                    unitInvoice: {
                        additionalCharges: [
                            {
                                additionalChargeAmount: {
                                    priceAmount: {
                                        currency: "Test string",
                                        value: "Test string",
                                    },
                                    taxAmount: {
                                        currency: "Test string",
                                        value: "Test string",
                                    },
                                },
                                type: "Test string",
                            }                        ],
                        unitPrice: {
                            currency: "Test string",
                            value: "Test string",
                        },
                        unitPriceTaxes: [
                            {
                                taxAmount: {
                                    currency: "Test string",
                                    value: "Test string",
                                },
                                taxName: "Test string",
                                taxType: "Test string",
                            }                        ],
                    },
                }            ],
            operationId: "Test string",
            shipmentGroupId: "Test string",
        });
        /**
         * Creates a refund invoice for one or more shipment groups, and triggers a refund for orderinvoice enabled orders. This can only be used for line items that have previously been charged
         * using `createChargeInvoice`. All amounts (except for the summary) are incremental with respect to the previous invoice.
         */
        await gapi.client.content.orderinvoices.createrefundinvoice({
            merchantId: "Test string",
            orderId: "Test string",
        }, {
            invoiceId: "Test string",
            operationId: "Test string",
            refundOnlyOption: {
                description: "Test string",
                reason: "Test string",
            },
            returnOption: {
                description: "Test string",
                reason: "Test string",
            },
            shipmentInvoices: [
                {
                    invoiceSummary: {
                        additionalChargeSummaries: [
                            {
                                totalAmount: {
                                    priceAmount: {
                                        currency: "Test string",
                                        value: "Test string",
                                    },
                                    taxAmount: {
                                        currency: "Test string",
                                        value: "Test string",
                                    },
                                },
                                type: "Test string",
                            }                        ],
                        productTotal: {
                            priceAmount: {
                                currency: "Test string",
                                value: "Test string",
                            },
                            taxAmount: {
                                currency: "Test string",
                                value: "Test string",
                            },
                        },
                    },
                    lineItemInvoices: [
                        {
                            lineItemId: "Test string",
                            productId: "Test string",
                            shipmentUnitIds: [
                                "Test string"                            ],
                            unitInvoice: {
                                additionalCharges: [
                                    {
                                        additionalChargeAmount: {
                                            priceAmount: {
                                                currency: "Test string",
                                                value: "Test string",
                                            },
                                            taxAmount: {
                                                currency: "Test string",
                                                value: "Test string",
                                            },
                                        },
                                        type: "Test string",
                                    }                                ],
                                unitPrice: {
                                    currency: "Test string",
                                    value: "Test string",
                                },
                                unitPriceTaxes: [
                                    {
                                        taxAmount: {
                                            currency: "Test string",
                                            value: "Test string",
                                        },
                                        taxName: "Test string",
                                        taxType: "Test string",
                                    }                                ],
                            },
                        }                    ],
                    shipmentGroupId: "Test string",
                }            ],
        });
        /** Retrieves a report for disbursements from your Merchant Center account. */
        await gapi.client.content.orderreports.listdisbursements({
            disbursementEndDate: "Test string",
            disbursementStartDate: "Test string",
            maxResults: 42,
            merchantId: "Test string",
            pageToken: "Test string",
        });
        /** Retrieves a list of transactions for a disbursement from your Merchant Center account. */
        await gapi.client.content.orderreports.listtransactions({
            disbursementId: "Test string",
            maxResults: 42,
            merchantId: "Test string",
            pageToken: "Test string",
            transactionEndDate: "Test string",
            transactionStartDate: "Test string",
        });
        /** Acks an order return in your Merchant Center account. */
        await gapi.client.content.orderreturns.acknowledge({
            merchantId: "Test string",
            returnId: "Test string",
        }, {
            operationId: "Test string",
        });
        /**
         * Links a return shipping label to a return id. You can only create one return label per return id. Since the label is sent to the buyer, the linked return label cannot be updated or
         * deleted. If you try to create multiple return shipping labels for a single return id, every create request except the first will fail.
         */
        await gapi.client.content.orderreturns.labels.create({
            merchantId: "Test string",
            returnId: "Test string",
        }, {
            carrier: "Test string",
            labelUri: "Test string",
            trackingId: "Test string",
        });
        /** Create return in your Merchant Center account. */
        await gapi.client.content.orderreturns.createorderreturn({
            merchantId: "Test string",
        }, {
            lineItems: [
                {
                    lineItemId: "Test string",
                    productId: "Test string",
                    quantity: 42,
                }            ],
            operationId: "Test string",
            orderId: "Test string",
            returnMethodType: "Test string",
        });
        /**
         * Links a return shipping label to a return id. You can only create one return label per return id. Since the label is sent to the buyer, the linked return label cannot be updated or
         * deleted. If you try to create multiple return shipping labels for a single return id, every create request except the first will fail.
         */
        await gapi.client.content.orderreturns.labels.create({
            merchantId: "Test string",
            returnId: "Test string",
        }, {
            carrier: "Test string",
            labelUri: "Test string",
            trackingId: "Test string",
        });
        /** Retrieves an order return from your Merchant Center account. */
        await gapi.client.content.orderreturns.get({
            merchantId: "Test string",
            returnId: "Test string",
        });
        /**
         * Links a return shipping label to a return id. You can only create one return label per return id. Since the label is sent to the buyer, the linked return label cannot be updated or
         * deleted. If you try to create multiple return shipping labels for a single return id, every create request except the first will fail.
         */
        await gapi.client.content.orderreturns.labels.create({
            merchantId: "Test string",
            returnId: "Test string",
        }, {
            carrier: "Test string",
            labelUri: "Test string",
            trackingId: "Test string",
        });
        /** Lists order returns in your Merchant Center account. */
        await gapi.client.content.orderreturns.list({
            acknowledged: true,
            createdEndDate: "Test string",
            createdStartDate: "Test string",
            googleOrderIds: "Test string",
            maxResults: 42,
            merchantId: "Test string",
            orderBy: "Test string",
            pageToken: "Test string",
            shipmentStates: "Test string",
            shipmentStatus: "Test string",
            shipmentTrackingNumbers: "Test string",
            shipmentTypes: "Test string",
        });
        /**
         * Links a return shipping label to a return id. You can only create one return label per return id. Since the label is sent to the buyer, the linked return label cannot be updated or
         * deleted. If you try to create multiple return shipping labels for a single return id, every create request except the first will fail.
         */
        await gapi.client.content.orderreturns.labels.create({
            merchantId: "Test string",
            returnId: "Test string",
        }, {
            carrier: "Test string",
            labelUri: "Test string",
            trackingId: "Test string",
        });
        /** Processes return in your Merchant Center account. */
        await gapi.client.content.orderreturns.process({
            merchantId: "Test string",
            returnId: "Test string",
        }, {
            fullChargeReturnShippingCost: true,
            operationId: "Test string",
            refundShippingFee: {
                fullRefund: true,
                partialRefund: {
                    priceAmount: {
                        currency: "Test string",
                        value: "Test string",
                    },
                    taxAmount: {
                        currency: "Test string",
                        value: "Test string",
                    },
                },
                paymentType: "Test string",
                reasonText: "Test string",
                returnRefundReason: "Test string",
            },
            returnItems: [
                {
                    refund: {
                        fullRefund: true,
                        partialRefund: {
                            priceAmount: {
                                currency: "Test string",
                                value: "Test string",
                            },
                            taxAmount: {
                                currency: "Test string",
                                value: "Test string",
                            },
                        },
                        paymentType: "Test string",
                        reasonText: "Test string",
                        returnRefundReason: "Test string",
                    },
                    reject: {
                        reason: "Test string",
                        reasonText: "Test string",
                    },
                    returnItemId: "Test string",
                }            ],
        });
        /**
         * Links a return shipping label to a return id. You can only create one return label per return id. Since the label is sent to the buyer, the linked return label cannot be updated or
         * deleted. If you try to create multiple return shipping labels for a single return id, every create request except the first will fail.
         */
        await gapi.client.content.orderreturns.labels.create({
            merchantId: "Test string",
            returnId: "Test string",
        }, {
            carrier: "Test string",
            labelUri: "Test string",
            trackingId: "Test string",
        });
        /** Marks an order as acknowledged. */
        await gapi.client.content.orders.acknowledge({
            merchantId: "Test string",
            orderId: "Test string",
        }, {
            operationId: "Test string",
        });
        /** Sandbox only. Moves a test order from state "`inProgress`" to state "`pendingShipment`". */
        await gapi.client.content.orders.advancetestorder({
            merchantId: "Test string",
            orderId: "Test string",
        });
        /** Cancels all line items in an order, making a full refund. */
        await gapi.client.content.orders.cancel({
            merchantId: "Test string",
            orderId: "Test string",
        }, {
            operationId: "Test string",
            reason: "Test string",
            reasonText: "Test string",
        });
        /** Cancels a line item, making a full refund. */
        await gapi.client.content.orders.cancellineitem({
            merchantId: "Test string",
            orderId: "Test string",
        }, {
            lineItemId: "Test string",
            operationId: "Test string",
            productId: "Test string",
            quantity: 42,
            reason: "Test string",
            reasonText: "Test string",
        });
        /** Sandbox only. Cancels a test order for customer-initiated cancellation. */
        await gapi.client.content.orders.canceltestorderbycustomer({
            merchantId: "Test string",
            orderId: "Test string",
        }, {
            reason: "Test string",
        });
        /** Sandbox only. Creates a test order. */
        await gapi.client.content.orders.createtestorder({
            merchantId: "Test string",
        }, {
            country: "Test string",
            templateName: "Test string",
            testOrder: {
                deliveryDetails: {
                    address: {
                        country: "Test string",
                        fullAddress: [
                            "Test string"                        ],
                        isPostOfficeBox: true,
                        locality: "Test string",
                        postalCode: "Test string",
                        recipientName: "Test string",
                        region: "Test string",
                        streetAddress: [
                            "Test string"                        ],
                    },
                    isScheduledDelivery: true,
                    phoneNumber: "Test string",
                },
                enableOrderinvoices: true,
                kind: "Test string",
                lineItems: [
                    {
                        product: {
                            brand: "Test string",
                            condition: "Test string",
                            contentLanguage: "Test string",
                            fees: [
                                {
                                    amount: {
                                        currency: "Test string",
                                        value: "Test string",
                                    },
                                    name: "Test string",
                                }                            ],
                            gtin: "Test string",
                            imageLink: "Test string",
                            itemGroupId: "Test string",
                            mpn: "Test string",
                            offerId: "Test string",
                            price: {
                                currency: "Test string",
                                value: "Test string",
                            },
                            targetCountry: "Test string",
                            title: "Test string",
                            variantAttributes: [
                                {
                                    dimension: "Test string",
                                    value: "Test string",
                                }                            ],
                        },
                        quantityOrdered: 42,
                        returnInfo: {
                            daysToReturn: 42,
                            isReturnable: true,
                            policyUrl: "Test string",
                        },
                        shippingDetails: {
                            deliverByDate: "Test string",
                            method: {
                                carrier: "Test string",
                                maxDaysInTransit: 42,
                                methodName: "Test string",
                                minDaysInTransit: 42,
                            },
                            pickupPromiseInMinutes: 42,
                            shipByDate: "Test string",
                            type: "Test string",
                        },
                    }                ],
                notificationMode: "Test string",
                pickupDetails: {
                    locationCode: "Test string",
                    pickupLocationAddress: {
                        country: "Test string",
                        fullAddress: [
                            "Test string"                        ],
                        isPostOfficeBox: true,
                        locality: "Test string",
                        postalCode: "Test string",
                        recipientName: "Test string",
                        region: "Test string",
                        streetAddress: [
                            "Test string"                        ],
                    },
                    pickupLocationType: "Test string",
                    pickupPersons: [
                        {
                            name: "Test string",
                            phoneNumber: "Test string",
                        }                    ],
                },
                predefinedBillingAddress: "Test string",
                predefinedDeliveryAddress: "Test string",
                predefinedEmail: "Test string",
                predefinedPickupDetails: "Test string",
                promotions: [
                    {
                        applicableItems: [
                            {
                                lineItemId: "Test string",
                                offerId: "Test string",
                                productId: "Test string",
                                quantity: 42,
                            }                        ],
                        appliedItems: [
                            {
                                lineItemId: "Test string",
                                offerId: "Test string",
                                productId: "Test string",
                                quantity: 42,
                            }                        ],
                        endTime: "Test string",
                        funder: "Test string",
                        merchantPromotionId: "Test string",
                        priceValue: {
                            currency: "Test string",
                            value: "Test string",
                        },
                        shortTitle: "Test string",
                        startTime: "Test string",
                        subtype: "Test string",
                        taxValue: {
                            currency: "Test string",
                            value: "Test string",
                        },
                        title: "Test string",
                        type: "Test string",
                    }                ],
                shippingCost: {
                    currency: "Test string",
                    value: "Test string",
                },
                shippingOption: "Test string",
            },
        });
        /** Sandbox only. Creates a test return. */
        await gapi.client.content.orders.createtestreturn({
            merchantId: "Test string",
            orderId: "Test string",
        }, {
            items: [
                {
                    lineItemId: "Test string",
                    quantity: 42,
                }            ],
        });
        /** Retrieves an order from your Merchant Center account. */
        await gapi.client.content.orders.get({
            merchantId: "Test string",
            orderId: "Test string",
        });
        /** Retrieves an order using merchant order ID. */
        await gapi.client.content.orders.getbymerchantorderid({
            merchantId: "Test string",
            merchantOrderId: "Test string",
        });
        /** Sandbox only. Retrieves an order template that can be used to quickly create a new order in sandbox. */
        await gapi.client.content.orders.gettestordertemplate({
            country: "Test string",
            merchantId: "Test string",
            templateName: "Test string",
        });
        /**
         * Deprecated. Notifies that item return and refund was handled directly by merchant outside of Google payments processing (e.g. cash refund done in store). Note: We recommend calling the
         * returnrefundlineitem method to refund in-store returns. We will issue the refund directly to the customer. This helps to prevent possible differences arising between merchant and Google
         * transaction records. We also recommend having the point of sale system communicate with Google to ensure that customers do not receive a double refund by first refunding via Google then
         * via an in-store return.
         */
        await gapi.client.content.orders.instorerefundlineitem({
            merchantId: "Test string",
            orderId: "Test string",
        }, {
            lineItemId: "Test string",
            operationId: "Test string",
            priceAmount: {
                currency: "Test string",
                value: "Test string",
            },
            productId: "Test string",
            quantity: 42,
            reason: "Test string",
            reasonText: "Test string",
            taxAmount: {
                currency: "Test string",
                value: "Test string",
            },
        });
        /** Lists the orders in your Merchant Center account. */
        await gapi.client.content.orders.list({
            acknowledged: true,
            maxResults: 42,
            merchantId: "Test string",
            orderBy: "Test string",
            pageToken: "Test string",
            placedDateEnd: "Test string",
            placedDateStart: "Test string",
            statuses: "Test string",
        });
        /** Issues a partial or total refund for items and shipment. */
        await gapi.client.content.orders.refunditem({
            merchantId: "Test string",
            orderId: "Test string",
        }, {
            items: [
                {
                    amount: {
                        priceAmount: {
                            currency: "Test string",
                            value: "Test string",
                        },
                        taxAmount: {
                            currency: "Test string",
                            value: "Test string",
                        },
                    },
                    fullRefund: true,
                    lineItemId: "Test string",
                    productId: "Test string",
                    quantity: 42,
                }            ],
            operationId: "Test string",
            reason: "Test string",
            reasonText: "Test string",
            shipping: {
                amount: {
                    currency: "Test string",
                    value: "Test string",
                },
                fullRefund: true,
            },
        });
        /** Issues a partial or total refund for an order. */
        await gapi.client.content.orders.refundorder({
            merchantId: "Test string",
            orderId: "Test string",
        }, {
            amount: {
                priceAmount: {
                    currency: "Test string",
                    value: "Test string",
                },
                taxAmount: {
                    currency: "Test string",
                    value: "Test string",
                },
            },
            fullRefund: true,
            operationId: "Test string",
            reason: "Test string",
            reasonText: "Test string",
        });
        /** Rejects return on an line item. */
        await gapi.client.content.orders.rejectreturnlineitem({
            merchantId: "Test string",
            orderId: "Test string",
        }, {
            lineItemId: "Test string",
            operationId: "Test string",
            productId: "Test string",
            quantity: 42,
            reason: "Test string",
            reasonText: "Test string",
        });
        /**
         * Returns and refunds a line item. Note that this method can only be called on fully shipped orders. Please also note that the Orderreturns API is the preferred way to handle returns
         * after you receive a return from a customer. You can use Orderreturns.list or Orderreturns.get to search for the return, and then use Orderreturns.processreturn to issue the refund. If
         * the return cannot be found, then we recommend using this API to issue a refund.
         */
        await gapi.client.content.orders.returnrefundlineitem({
            merchantId: "Test string",
            orderId: "Test string",
        }, {
            lineItemId: "Test string",
            operationId: "Test string",
            priceAmount: {
                currency: "Test string",
                value: "Test string",
            },
            productId: "Test string",
            quantity: 42,
            reason: "Test string",
            reasonText: "Test string",
            taxAmount: {
                currency: "Test string",
                value: "Test string",
            },
        });
        /**
         * Sets (or overrides if it already exists) merchant provided annotations in the form of key-value pairs. A common use case would be to supply us with additional structured information
         * about a line item that cannot be provided via other methods. Submitted key-value pairs can be retrieved as part of the orders resource.
         */
        await gapi.client.content.orders.setlineitemmetadata({
            merchantId: "Test string",
            orderId: "Test string",
        }, {
            annotations: [
                {
                    key: "Test string",
                    value: "Test string",
                }            ],
            lineItemId: "Test string",
            operationId: "Test string",
            productId: "Test string",
        });
        /** Marks line item(s) as shipped. */
        await gapi.client.content.orders.shiplineitems({
            merchantId: "Test string",
            orderId: "Test string",
        }, {
            lineItems: [
                {
                    lineItemId: "Test string",
                    productId: "Test string",
                    quantity: 42,
                }            ],
            operationId: "Test string",
            shipmentGroupId: "Test string",
            shipmentInfos: [
                {
                    carrier: "Test string",
                    shipmentId: "Test string",
                    trackingId: "Test string",
                }            ],
        });
        /** Updates ship by and delivery by dates for a line item. */
        await gapi.client.content.orders.updatelineitemshippingdetails({
            merchantId: "Test string",
            orderId: "Test string",
        }, {
            deliverByDate: "Test string",
            lineItemId: "Test string",
            operationId: "Test string",
            productId: "Test string",
            shipByDate: "Test string",
        });
        /** Updates the merchant order ID for a given order. */
        await gapi.client.content.orders.updatemerchantorderid({
            merchantId: "Test string",
            orderId: "Test string",
        }, {
            merchantOrderId: "Test string",
            operationId: "Test string",
        });
        /** Updates a shipment's status, carrier, and/or tracking ID. */
        await gapi.client.content.orders.updateshipment({
            merchantId: "Test string",
            orderId: "Test string",
        }, {
            carrier: "Test string",
            deliveryDate: "Test string",
            lastPickupDate: "Test string",
            operationId: "Test string",
            readyPickupDate: "Test string",
            scheduledDeliveryDetails: {
                carrierPhoneNumber: "Test string",
                scheduledDate: "Test string",
            },
            shipmentId: "Test string",
            status: "Test string",
            trackingId: "Test string",
            undeliveredDate: "Test string",
        });
        /** Creates new order tracking signal. */
        await gapi.client.content.ordertrackingsignals.create({
            merchantId: "Test string",
        }, {
            customerShippingFee: {
                currency: "Test string",
                value: "Test string",
            },
            deliveryPostalCode: "Test string",
            deliveryRegionCode: "Test string",
            lineItems: [
                {
                    gtin: "Test string",
                    lineItemId: "Test string",
                    mpn: "Test string",
                    productId: "Test string",
                    quantity: "Test string",
                }            ],
            merchantId: "Test string",
            orderCreatedTime: {
                day: 42,
                hours: 42,
                minutes: 42,
                month: 42,
                nanos: 42,
                seconds: 42,
                timeZone: {
                    id: "Test string",
                    version: "Test string",
                },
                utcOffset: "Test string",
                year: 42,
            },
            orderId: "Test string",
            orderTrackingSignalId: "Test string",
            shipmentLineItemMapping: [
                {
                    lineItemId: "Test string",
                    quantity: "Test string",
                    shipmentId: "Test string",
                }            ],
            shippingInfo: [
                {
                    actualDeliveryTime: {
                        day: 42,
                        hours: 42,
                        minutes: 42,
                        month: 42,
                        nanos: 42,
                        seconds: 42,
                        timeZone: {
                            id: "Test string",
                            version: "Test string",
                        },
                        utcOffset: "Test string",
                        year: 42,
                    },
                    carrierName: "Test string",
                    carrierServiceName: "Test string",
                    earliestDeliveryPromiseTime: {
                        day: 42,
                        hours: 42,
                        minutes: 42,
                        month: 42,
                        nanos: 42,
                        seconds: 42,
                        timeZone: {
                            id: "Test string",
                            version: "Test string",
                        },
                        utcOffset: "Test string",
                        year: 42,
                    },
                    latestDeliveryPromiseTime: {
                        day: 42,
                        hours: 42,
                        minutes: 42,
                        month: 42,
                        nanos: 42,
                        seconds: 42,
                        timeZone: {
                            id: "Test string",
                            version: "Test string",
                        },
                        utcOffset: "Test string",
                        year: 42,
                    },
                    originPostalCode: "Test string",
                    originRegionCode: "Test string",
                    shipmentId: "Test string",
                    shippedTime: {
                        day: 42,
                        hours: 42,
                        minutes: 42,
                        month: 42,
                        nanos: 42,
                        seconds: 42,
                        timeZone: {
                            id: "Test string",
                            version: "Test string",
                        },
                        utcOffset: "Test string",
                        year: 42,
                    },
                    shippingStatus: "Test string",
                    trackingId: "Test string",
                }            ],
        });
        /** Batches multiple POS-related calls in a single request. */
        await gapi.client.content.pos.custombatch({
        }, {
            entries: [
                {
                    batchId: 42,
                    inventory: {
                        contentLanguage: "Test string",
                        gtin: "Test string",
                        itemId: "Test string",
                        kind: "Test string",
                        price: {
                            currency: "Test string",
                            value: "Test string",
                        },
                        quantity: "Test string",
                        storeCode: "Test string",
                        targetCountry: "Test string",
                        timestamp: "Test string",
                    },
                    merchantId: "Test string",
                    method: "Test string",
                    sale: {
                        contentLanguage: "Test string",
                        gtin: "Test string",
                        itemId: "Test string",
                        kind: "Test string",
                        price: {
                            currency: "Test string",
                            value: "Test string",
                        },
                        quantity: "Test string",
                        saleId: "Test string",
                        storeCode: "Test string",
                        targetCountry: "Test string",
                        timestamp: "Test string",
                    },
                    store: {
                        kind: "Test string",
                        storeAddress: "Test string",
                        storeCode: "Test string",
                    },
                    storeCode: "Test string",
                    targetMerchantId: "Test string",
                }            ],
        });
        /** Deletes a store for the given merchant. */
        await gapi.client.content.pos.delete({
            merchantId: "Test string",
            storeCode: "Test string",
            targetMerchantId: "Test string",
        });
        /** Retrieves information about the given store. */
        await gapi.client.content.pos.get({
            merchantId: "Test string",
            storeCode: "Test string",
            targetMerchantId: "Test string",
        });
        /** Creates a store for the given merchant. */
        await gapi.client.content.pos.insert({
            merchantId: "Test string",
            targetMerchantId: "Test string",
        }, {
            kind: "Test string",
            storeAddress: "Test string",
            storeCode: "Test string",
        });
        /** Submit inventory for the given merchant. */
        await gapi.client.content.pos.inventory({
            merchantId: "Test string",
            targetMerchantId: "Test string",
        }, {
            contentLanguage: "Test string",
            gtin: "Test string",
            itemId: "Test string",
            price: {
                currency: "Test string",
                value: "Test string",
            },
            quantity: "Test string",
            storeCode: "Test string",
            targetCountry: "Test string",
            timestamp: "Test string",
        });
        /** Lists the stores of the target merchant. */
        await gapi.client.content.pos.list({
            merchantId: "Test string",
            targetMerchantId: "Test string",
        });
        /** Submit a sale event for the given merchant. */
        await gapi.client.content.pos.sale({
            merchantId: "Test string",
            targetMerchantId: "Test string",
        }, {
            contentLanguage: "Test string",
            gtin: "Test string",
            itemId: "Test string",
            price: {
                currency: "Test string",
                value: "Test string",
            },
            quantity: "Test string",
            saleId: "Test string",
            storeCode: "Test string",
            targetCountry: "Test string",
            timestamp: "Test string",
        });
        /** Retrieves, inserts, and deletes multiple products in a single request. */
        await gapi.client.content.products.custombatch({
        }, {
            entries: [
                {
                    batchId: 42,
                    feedId: "Test string",
                    merchantId: "Test string",
                    method: "Test string",
                    product: {
                        additionalImageLinks: [
                            "Test string"                        ],
                        additionalSizeType: "Test string",
                        adsGrouping: "Test string",
                        adsLabels: [
                            "Test string"                        ],
                        adsRedirect: "Test string",
                        adult: true,
                        ageGroup: "Test string",
                        availability: "Test string",
                        availabilityDate: "Test string",
                        brand: "Test string",
                        canonicalLink: "Test string",
                        channel: "Test string",
                        color: "Test string",
                        condition: "Test string",
                        contentLanguage: "Test string",
                        costOfGoodsSold: {
                            currency: "Test string",
                            value: "Test string",
                        },
                        customAttributes: [
                            {
                                groupValues: undefined,
                                name: "Test string",
                                value: "Test string",
                            }                        ],
                        customLabel0: "Test string",
                        customLabel1: "Test string",
                        customLabel2: "Test string",
                        customLabel3: "Test string",
                        customLabel4: "Test string",
                        description: "Test string",
                        displayAdsId: "Test string",
                        displayAdsLink: "Test string",
                        displayAdsSimilarIds: [
                            "Test string"                        ],
                        displayAdsTitle: "Test string",
                        displayAdsValue: 42,
                        energyEfficiencyClass: "Test string",
                        excludedDestinations: [
                            "Test string"                        ],
                        expirationDate: "Test string",
                        gender: "Test string",
                        googleProductCategory: "Test string",
                        gtin: "Test string",
                        id: "Test string",
                        identifierExists: true,
                        imageLink: "Test string",
                        includedDestinations: [
                            "Test string"                        ],
                        installment: {
                            amount: {
                                currency: "Test string",
                                value: "Test string",
                            },
                            months: "Test string",
                        },
                        isBundle: true,
                        itemGroupId: "Test string",
                        kind: "Test string",
                        link: "Test string",
                        linkTemplate: "Test string",
                        loyaltyPoints: {
                            name: "Test string",
                            pointsValue: "Test string",
                            ratio: 42,
                        },
                        material: "Test string",
                        maxEnergyEfficiencyClass: "Test string",
                        maxHandlingTime: "Test string",
                        minEnergyEfficiencyClass: "Test string",
                        minHandlingTime: "Test string",
                        mobileLink: "Test string",
                        mobileLinkTemplate: "Test string",
                        mpn: "Test string",
                        multipack: "Test string",
                        offerId: "Test string",
                        pattern: "Test string",
                        pickupMethod: "Test string",
                        pickupSla: "Test string",
                        price: {
                            currency: "Test string",
                            value: "Test string",
                        },
                        productDetails: [
                            {
                                attributeName: "Test string",
                                attributeValue: "Test string",
                                sectionName: "Test string",
                            }                        ],
                        productHighlights: [
                            "Test string"                        ],
                        productTypes: [
                            "Test string"                        ],
                        promotionIds: [
                            "Test string"                        ],
                        salePrice: {
                            currency: "Test string",
                            value: "Test string",
                        },
                        salePriceEffectiveDate: "Test string",
                        sellOnGoogleQuantity: "Test string",
                        shipping: [
                            {
                                country: "Test string",
                                locationGroupName: "Test string",
                                locationId: "Test string",
                                maxHandlingTime: "Test string",
                                maxTransitTime: "Test string",
                                minHandlingTime: "Test string",
                                minTransitTime: "Test string",
                                postalCode: "Test string",
                                price: {
                                    currency: "Test string",
                                    value: "Test string",
                                },
                                region: "Test string",
                                service: "Test string",
                            }                        ],
                        shippingHeight: {
                            unit: "Test string",
                            value: 42,
                        },
                        shippingLabel: "Test string",
                        shippingLength: {
                            unit: "Test string",
                            value: 42,
                        },
                        shippingWeight: {
                            unit: "Test string",
                            value: 42,
                        },
                        shippingWidth: {
                            unit: "Test string",
                            value: 42,
                        },
                        shoppingAdsExcludedCountries: [
                            "Test string"                        ],
                        sizes: [
                            "Test string"                        ],
                        sizeSystem: "Test string",
                        sizeType: "Test string",
                        source: "Test string",
                        subscriptionCost: {
                            amount: {
                                currency: "Test string",
                                value: "Test string",
                            },
                            period: "Test string",
                            periodLength: "Test string",
                        },
                        targetCountry: "Test string",
                        taxCategory: "Test string",
                        taxes: [
                            {
                                country: "Test string",
                                locationId: "Test string",
                                postalCode: "Test string",
                                rate: 42,
                                region: "Test string",
                                taxShip: true,
                            }                        ],
                        title: "Test string",
                        transitTimeLabel: "Test string",
                        unitPricingBaseMeasure: {
                            unit: "Test string",
                            value: "Test string",
                        },
                        unitPricingMeasure: {
                            unit: "Test string",
                            value: 42,
                        },
                    },
                    productId: "Test string",
                    updateMask: "Test string",
                }            ],
        });
        /** Deletes a product from your Merchant Center account. */
        await gapi.client.content.products.delete({
            feedId: "Test string",
            merchantId: "Test string",
            productId: "Test string",
        });
        /** Retrieves a product from your Merchant Center account. */
        await gapi.client.content.products.get({
            merchantId: "Test string",
            productId: "Test string",
        });
        /** Uploads a product to your Merchant Center account. If an item with the same channel, contentLanguage, offerId, and targetCountry already exists, this method updates that entry. */
        await gapi.client.content.products.insert({
            feedId: "Test string",
            merchantId: "Test string",
        }, {
            additionalImageLinks: [
                "Test string"            ],
            additionalSizeType: "Test string",
            adsGrouping: "Test string",
            adsLabels: [
                "Test string"            ],
            adsRedirect: "Test string",
            adult: true,
            ageGroup: "Test string",
            availability: "Test string",
            availabilityDate: "Test string",
            brand: "Test string",
            canonicalLink: "Test string",
            channel: "Test string",
            color: "Test string",
            condition: "Test string",
            contentLanguage: "Test string",
            costOfGoodsSold: {
                currency: "Test string",
                value: "Test string",
            },
            customAttributes: [
                {
                    groupValues: undefined,
                    name: "Test string",
                    value: "Test string",
                }            ],
            customLabel0: "Test string",
            customLabel1: "Test string",
            customLabel2: "Test string",
            customLabel3: "Test string",
            customLabel4: "Test string",
            description: "Test string",
            displayAdsId: "Test string",
            displayAdsLink: "Test string",
            displayAdsSimilarIds: [
                "Test string"            ],
            displayAdsTitle: "Test string",
            displayAdsValue: 42,
            energyEfficiencyClass: "Test string",
            excludedDestinations: [
                "Test string"            ],
            expirationDate: "Test string",
            gender: "Test string",
            googleProductCategory: "Test string",
            gtin: "Test string",
            id: "Test string",
            identifierExists: true,
            imageLink: "Test string",
            includedDestinations: [
                "Test string"            ],
            installment: {
                amount: {
                    currency: "Test string",
                    value: "Test string",
                },
                months: "Test string",
            },
            isBundle: true,
            itemGroupId: "Test string",
            kind: "Test string",
            link: "Test string",
            linkTemplate: "Test string",
            loyaltyPoints: {
                name: "Test string",
                pointsValue: "Test string",
                ratio: 42,
            },
            material: "Test string",
            maxEnergyEfficiencyClass: "Test string",
            maxHandlingTime: "Test string",
            minEnergyEfficiencyClass: "Test string",
            minHandlingTime: "Test string",
            mobileLink: "Test string",
            mobileLinkTemplate: "Test string",
            mpn: "Test string",
            multipack: "Test string",
            offerId: "Test string",
            pattern: "Test string",
            pickupMethod: "Test string",
            pickupSla: "Test string",
            price: {
                currency: "Test string",
                value: "Test string",
            },
            productDetails: [
                {
                    attributeName: "Test string",
                    attributeValue: "Test string",
                    sectionName: "Test string",
                }            ],
            productHighlights: [
                "Test string"            ],
            productTypes: [
                "Test string"            ],
            promotionIds: [
                "Test string"            ],
            salePrice: {
                currency: "Test string",
                value: "Test string",
            },
            salePriceEffectiveDate: "Test string",
            sellOnGoogleQuantity: "Test string",
            shipping: [
                {
                    country: "Test string",
                    locationGroupName: "Test string",
                    locationId: "Test string",
                    maxHandlingTime: "Test string",
                    maxTransitTime: "Test string",
                    minHandlingTime: "Test string",
                    minTransitTime: "Test string",
                    postalCode: "Test string",
                    price: {
                        currency: "Test string",
                        value: "Test string",
                    },
                    region: "Test string",
                    service: "Test string",
                }            ],
            shippingHeight: {
                unit: "Test string",
                value: 42,
            },
            shippingLabel: "Test string",
            shippingLength: {
                unit: "Test string",
                value: 42,
            },
            shippingWeight: {
                unit: "Test string",
                value: 42,
            },
            shippingWidth: {
                unit: "Test string",
                value: 42,
            },
            shoppingAdsExcludedCountries: [
                "Test string"            ],
            sizes: [
                "Test string"            ],
            sizeSystem: "Test string",
            sizeType: "Test string",
            source: "Test string",
            subscriptionCost: {
                amount: {
                    currency: "Test string",
                    value: "Test string",
                },
                period: "Test string",
                periodLength: "Test string",
            },
            targetCountry: "Test string",
            taxCategory: "Test string",
            taxes: [
                {
                    country: "Test string",
                    locationId: "Test string",
                    postalCode: "Test string",
                    rate: 42,
                    region: "Test string",
                    taxShip: true,
                }            ],
            title: "Test string",
            transitTimeLabel: "Test string",
            unitPricingBaseMeasure: {
                unit: "Test string",
                value: "Test string",
            },
            unitPricingMeasure: {
                unit: "Test string",
                value: 42,
            },
        });
        /**
         * Lists the products in your Merchant Center account. The response might contain fewer items than specified by maxResults. Rely on nextPageToken to determine if there are more items to be
         * requested.
         */
        await gapi.client.content.products.list({
            maxResults: 42,
            merchantId: "Test string",
            pageToken: "Test string",
        });
        /** Updates an existing product in your Merchant Center account. Only updates attributes provided in the request. */
        await gapi.client.content.products.update({
            merchantId: "Test string",
            productId: "Test string",
            updateMask: "Test string",
        }, {
            additionalImageLinks: [
                "Test string"            ],
            additionalSizeType: "Test string",
            adsGrouping: "Test string",
            adsLabels: [
                "Test string"            ],
            adsRedirect: "Test string",
            adult: true,
            ageGroup: "Test string",
            availability: "Test string",
            availabilityDate: "Test string",
            brand: "Test string",
            canonicalLink: "Test string",
            channel: "Test string",
            color: "Test string",
            condition: "Test string",
            contentLanguage: "Test string",
            costOfGoodsSold: {
                currency: "Test string",
                value: "Test string",
            },
            customAttributes: [
                {
                    groupValues: undefined,
                    name: "Test string",
                    value: "Test string",
                }            ],
            customLabel0: "Test string",
            customLabel1: "Test string",
            customLabel2: "Test string",
            customLabel3: "Test string",
            customLabel4: "Test string",
            description: "Test string",
            displayAdsId: "Test string",
            displayAdsLink: "Test string",
            displayAdsSimilarIds: [
                "Test string"            ],
            displayAdsTitle: "Test string",
            displayAdsValue: 42,
            energyEfficiencyClass: "Test string",
            excludedDestinations: [
                "Test string"            ],
            expirationDate: "Test string",
            gender: "Test string",
            googleProductCategory: "Test string",
            gtin: "Test string",
            id: "Test string",
            identifierExists: true,
            imageLink: "Test string",
            includedDestinations: [
                "Test string"            ],
            installment: {
                amount: {
                    currency: "Test string",
                    value: "Test string",
                },
                months: "Test string",
            },
            isBundle: true,
            itemGroupId: "Test string",
            kind: "Test string",
            link: "Test string",
            linkTemplate: "Test string",
            loyaltyPoints: {
                name: "Test string",
                pointsValue: "Test string",
                ratio: 42,
            },
            material: "Test string",
            maxEnergyEfficiencyClass: "Test string",
            maxHandlingTime: "Test string",
            minEnergyEfficiencyClass: "Test string",
            minHandlingTime: "Test string",
            mobileLink: "Test string",
            mobileLinkTemplate: "Test string",
            mpn: "Test string",
            multipack: "Test string",
            offerId: "Test string",
            pattern: "Test string",
            pickupMethod: "Test string",
            pickupSla: "Test string",
            price: {
                currency: "Test string",
                value: "Test string",
            },
            productDetails: [
                {
                    attributeName: "Test string",
                    attributeValue: "Test string",
                    sectionName: "Test string",
                }            ],
            productHighlights: [
                "Test string"            ],
            productTypes: [
                "Test string"            ],
            promotionIds: [
                "Test string"            ],
            salePrice: {
                currency: "Test string",
                value: "Test string",
            },
            salePriceEffectiveDate: "Test string",
            sellOnGoogleQuantity: "Test string",
            shipping: [
                {
                    country: "Test string",
                    locationGroupName: "Test string",
                    locationId: "Test string",
                    maxHandlingTime: "Test string",
                    maxTransitTime: "Test string",
                    minHandlingTime: "Test string",
                    minTransitTime: "Test string",
                    postalCode: "Test string",
                    price: {
                        currency: "Test string",
                        value: "Test string",
                    },
                    region: "Test string",
                    service: "Test string",
                }            ],
            shippingHeight: {
                unit: "Test string",
                value: 42,
            },
            shippingLabel: "Test string",
            shippingLength: {
                unit: "Test string",
                value: 42,
            },
            shippingWeight: {
                unit: "Test string",
                value: 42,
            },
            shippingWidth: {
                unit: "Test string",
                value: 42,
            },
            shoppingAdsExcludedCountries: [
                "Test string"            ],
            sizes: [
                "Test string"            ],
            sizeSystem: "Test string",
            sizeType: "Test string",
            source: "Test string",
            subscriptionCost: {
                amount: {
                    currency: "Test string",
                    value: "Test string",
                },
                period: "Test string",
                periodLength: "Test string",
            },
            targetCountry: "Test string",
            taxCategory: "Test string",
            taxes: [
                {
                    country: "Test string",
                    locationId: "Test string",
                    postalCode: "Test string",
                    rate: 42,
                    region: "Test string",
                    taxShip: true,
                }            ],
            title: "Test string",
            transitTimeLabel: "Test string",
            unitPricingBaseMeasure: {
                unit: "Test string",
                value: "Test string",
            },
            unitPricingMeasure: {
                unit: "Test string",
                value: 42,
            },
        });
        /** Gets the statuses of multiple products in a single request. */
        await gapi.client.content.productstatuses.custombatch({
        }, {
            entries: [
                {
                    batchId: 42,
                    destinations: [
                        "Test string"                    ],
                    includeAttributes: true,
                    merchantId: "Test string",
                    method: "Test string",
                    productId: "Test string",
                }            ],
        });
        /** Lists the metrics report for a given Repricing product. */
        await gapi.client.content.productstatuses.repricingreports.list({
            endDate: "Test string",
            merchantId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            productId: "Test string",
            ruleId: "Test string",
            startDate: "Test string",
        });
        /** Gets the status of a product from your Merchant Center account. */
        await gapi.client.content.productstatuses.get({
            destinations: "Test string",
            merchantId: "Test string",
            productId: "Test string",
        });
        /** Lists the metrics report for a given Repricing product. */
        await gapi.client.content.productstatuses.repricingreports.list({
            endDate: "Test string",
            merchantId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            productId: "Test string",
            ruleId: "Test string",
            startDate: "Test string",
        });
        /** Lists the statuses of the products in your Merchant Center account. */
        await gapi.client.content.productstatuses.list({
            destinations: "Test string",
            maxResults: 42,
            merchantId: "Test string",
            pageToken: "Test string",
        });
        /** Lists the metrics report for a given Repricing product. */
        await gapi.client.content.productstatuses.repricingreports.list({
            endDate: "Test string",
            merchantId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            productId: "Test string",
            ruleId: "Test string",
            startDate: "Test string",
        });
        /** Retrieves a Merchant Center account's pubsub notification settings. */
        await gapi.client.content.pubsubnotificationsettings.get({
            merchantId: "Test string",
        });
        /** Register a Merchant Center account for pubsub notifications. Note that cloud topic name should not be provided as part of the request. */
        await gapi.client.content.pubsubnotificationsettings.update({
            merchantId: "Test string",
        }, {
            cloudTopicName: "Test string",
            kind: "Test string",
            registeredEvents: [
                "Test string"            ],
        });
        /** Updates regional inventory for multiple products or regions in a single request. */
        await gapi.client.content.regionalinventory.custombatch({
        }, {
            entries: [
                {
                    batchId: 42,
                    merchantId: "Test string",
                    method: "Test string",
                    productId: "Test string",
                    regionalInventory: {
                        availability: "Test string",
                        customAttributes: [
                            {
                                groupValues: undefined,
                                name: "Test string",
                                value: "Test string",
                            }                        ],
                        kind: "Test string",
                        price: {
                            currency: "Test string",
                            value: "Test string",
                        },
                        regionId: "Test string",
                        salePrice: {
                            currency: "Test string",
                            value: "Test string",
                        },
                        salePriceEffectiveDate: "Test string",
                    },
                }            ],
        });
        /** Update the regional inventory of a product in your Merchant Center account. If a regional inventory with the same region ID already exists, this method updates that entry. */
        await gapi.client.content.regionalinventory.insert({
            merchantId: "Test string",
            productId: "Test string",
        }, {
            availability: "Test string",
            customAttributes: [
                {
                    groupValues: undefined,
                    name: "Test string",
                    value: "Test string",
                }            ],
            kind: "Test string",
            price: {
                currency: "Test string",
                value: "Test string",
            },
            regionId: "Test string",
            salePrice: {
                currency: "Test string",
                value: "Test string",
            },
            salePriceEffectiveDate: "Test string",
        });
        /** Creates a region definition in your Merchant Center account. */
        await gapi.client.content.regions.create({
            merchantId: "Test string",
            regionId: "Test string",
        }, {
            displayName: "Test string",
            geotargetArea: {
                geotargetCriteriaIds: [
                    "Test string"                ],
            },
            merchantId: "Test string",
            postalCodeArea: {
                postalCodes: [
                    {
                        begin: "Test string",
                        end: "Test string",
                    }                ],
                regionCode: "Test string",
            },
            regionalInventoryEligible: true,
            regionId: "Test string",
            shippingEligible: true,
        });
        /** Deletes a region definition from your Merchant Center account. */
        await gapi.client.content.regions.delete({
            merchantId: "Test string",
            regionId: "Test string",
        });
        /** Retrieves a region defined in your Merchant Center account. */
        await gapi.client.content.regions.get({
            merchantId: "Test string",
            regionId: "Test string",
        });
        /** Lists the regions in your Merchant Center account. */
        await gapi.client.content.regions.list({
            merchantId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Updates a region definition in your Merchant Center account. */
        await gapi.client.content.regions.patch({
            merchantId: "Test string",
            regionId: "Test string",
            updateMask: "Test string",
        }, {
            displayName: "Test string",
            geotargetArea: {
                geotargetCriteriaIds: [
                    "Test string"                ],
            },
            merchantId: "Test string",
            postalCodeArea: {
                postalCodes: [
                    {
                        begin: "Test string",
                        end: "Test string",
                    }                ],
                regionCode: "Test string",
            },
            regionalInventoryEligible: true,
            regionId: "Test string",
            shippingEligible: true,
        });
        /** Retrieves merchant performance mertrics matching the search query and optionally segmented by selected dimensions. */
        await gapi.client.content.reports.search({
            merchantId: "Test string",
        }, {
            pageSize: 42,
            pageToken: "Test string",
            query: "Test string",
        });
        /** Creates a repricing rule for your Merchant Center account. */
        await gapi.client.content.repricingrules.create({
            merchantId: "Test string",
            ruleId: "Test string",
        }, {
            cogsBasedRule: {
                percentageDelta: 42,
                priceDelta: "Test string",
            },
            countryCode: "Test string",
            effectiveTimePeriod: {
                fixedTimePeriods: [
                    {
                        endTime: "Test string",
                        startTime: "Test string",
                    }                ],
            },
            eligibleOfferMatcher: {
                brandMatcher: {
                    strAttributes: [
                        "Test string"                    ],
                },
                itemGroupIdMatcher: {
                    strAttributes: [
                        "Test string"                    ],
                },
                matcherOption: "Test string",
                offerIdMatcher: {
                    strAttributes: [
                        "Test string"                    ],
                },
                skipWhenOnPromotion: true,
            },
            languageCode: "Test string",
            merchantId: "Test string",
            paused: true,
            restriction: {
                floor: {
                    percentageDelta: 42,
                    priceDelta: "Test string",
                },
                useAutoPricingMinPrice: true,
            },
            ruleId: "Test string",
            statsBasedRule: {
                percentageDelta: 42,
                priceDelta: "Test string",
            },
            title: "Test string",
            type: "Test string",
        });
        /** Lists the metrics report for a given Repricing rule. */
        await gapi.client.content.repricingrules.repricingreports.list({
            endDate: "Test string",
            merchantId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            ruleId: "Test string",
            startDate: "Test string",
        });
        /** Deletes a repricing rule in your Merchant Center account. */
        await gapi.client.content.repricingrules.delete({
            merchantId: "Test string",
            ruleId: "Test string",
        });
        /** Lists the metrics report for a given Repricing rule. */
        await gapi.client.content.repricingrules.repricingreports.list({
            endDate: "Test string",
            merchantId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            ruleId: "Test string",
            startDate: "Test string",
        });
        /** Retrieves a repricing rule from your Merchant Center account. */
        await gapi.client.content.repricingrules.get({
            merchantId: "Test string",
            ruleId: "Test string",
        });
        /** Lists the metrics report for a given Repricing rule. */
        await gapi.client.content.repricingrules.repricingreports.list({
            endDate: "Test string",
            merchantId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            ruleId: "Test string",
            startDate: "Test string",
        });
        /** Lists the repricing rules in your Merchant Center account. */
        await gapi.client.content.repricingrules.list({
            countryCode: "Test string",
            languageCode: "Test string",
            merchantId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Lists the metrics report for a given Repricing rule. */
        await gapi.client.content.repricingrules.repricingreports.list({
            endDate: "Test string",
            merchantId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            ruleId: "Test string",
            startDate: "Test string",
        });
        /**
         * Updates a repricing rule in your Merchant Center account. All mutable fields will be overwritten in each update request. In each update, you must provide all required mutable fields, or
         * an error will be thrown. If you do not provide an optional field in the update request, if that field currently exists, it will be deleted from the rule.
         */
        await gapi.client.content.repricingrules.patch({
            merchantId: "Test string",
            ruleId: "Test string",
        }, {
            cogsBasedRule: {
                percentageDelta: 42,
                priceDelta: "Test string",
            },
            countryCode: "Test string",
            effectiveTimePeriod: {
                fixedTimePeriods: [
                    {
                        endTime: "Test string",
                        startTime: "Test string",
                    }                ],
            },
            eligibleOfferMatcher: {
                brandMatcher: {
                    strAttributes: [
                        "Test string"                    ],
                },
                itemGroupIdMatcher: {
                    strAttributes: [
                        "Test string"                    ],
                },
                matcherOption: "Test string",
                offerIdMatcher: {
                    strAttributes: [
                        "Test string"                    ],
                },
                skipWhenOnPromotion: true,
            },
            languageCode: "Test string",
            merchantId: "Test string",
            paused: true,
            restriction: {
                floor: {
                    percentageDelta: 42,
                    priceDelta: "Test string",
                },
                useAutoPricingMinPrice: true,
            },
            ruleId: "Test string",
            statsBasedRule: {
                percentageDelta: 42,
                priceDelta: "Test string",
            },
            title: "Test string",
            type: "Test string",
        });
        /** Lists the metrics report for a given Repricing rule. */
        await gapi.client.content.repricingrules.repricingreports.list({
            endDate: "Test string",
            merchantId: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            ruleId: "Test string",
            startDate: "Test string",
        });
        /** Batches multiple return address related calls in a single request. */
        await gapi.client.content.returnaddress.custombatch({
        }, {
            entries: [
                {
                    batchId: 42,
                    merchantId: "Test string",
                    method: "Test string",
                    returnAddress: {
                        address: {
                            country: "Test string",
                            locality: "Test string",
                            postalCode: "Test string",
                            recipientName: "Test string",
                            region: "Test string",
                            streetAddress: [
                                "Test string"                            ],
                        },
                        country: "Test string",
                        kind: "Test string",
                        label: "Test string",
                        phoneNumber: "Test string",
                        returnAddressId: "Test string",
                    },
                    returnAddressId: "Test string",
                }            ],
        });
        /** Deletes a return address for the given Merchant Center account. */
        await gapi.client.content.returnaddress.delete({
            merchantId: "Test string",
            returnAddressId: "Test string",
        });
        /** Gets a return address of the Merchant Center account. */
        await gapi.client.content.returnaddress.get({
            merchantId: "Test string",
            returnAddressId: "Test string",
        });
        /** Inserts a return address for the Merchant Center account. */
        await gapi.client.content.returnaddress.insert({
            merchantId: "Test string",
        }, {
            address: {
                country: "Test string",
                locality: "Test string",
                postalCode: "Test string",
                recipientName: "Test string",
                region: "Test string",
                streetAddress: [
                    "Test string"                ],
            },
            country: "Test string",
            kind: "Test string",
            label: "Test string",
            phoneNumber: "Test string",
            returnAddressId: "Test string",
        });
        /** Lists the return addresses of the Merchant Center account. */
        await gapi.client.content.returnaddress.list({
            country: "Test string",
            maxResults: 42,
            merchantId: "Test string",
            pageToken: "Test string",
        });
        /** Batches multiple return policy related calls in a single request. */
        await gapi.client.content.returnpolicy.custombatch({
        }, {
            entries: [
                {
                    batchId: 42,
                    merchantId: "Test string",
                    method: "Test string",
                    returnPolicy: {
                        country: "Test string",
                        kind: "Test string",
                        label: "Test string",
                        name: "Test string",
                        nonFreeReturnReasons: [
                            "Test string"                        ],
                        policy: {
                            lastReturnDate: "Test string",
                            numberOfDays: "Test string",
                            type: "Test string",
                        },
                        returnPolicyId: "Test string",
                        returnShippingFee: {
                            currency: "Test string",
                            value: "Test string",
                        },
                        seasonalOverrides: [
                            {
                                endDate: "Test string",
                                name: "Test string",
                                policy: {
                                    lastReturnDate: "Test string",
                                    numberOfDays: "Test string",
                                    type: "Test string",
                                },
                                startDate: "Test string",
                            }                        ],
                    },
                    returnPolicyId: "Test string",
                }            ],
        });
        /** Deletes a return policy for the given Merchant Center account. */
        await gapi.client.content.returnpolicy.delete({
            merchantId: "Test string",
            returnPolicyId: "Test string",
        });
        /** Gets a return policy of the Merchant Center account. */
        await gapi.client.content.returnpolicy.get({
            merchantId: "Test string",
            returnPolicyId: "Test string",
        });
        /** Inserts a return policy for the Merchant Center account. */
        await gapi.client.content.returnpolicy.insert({
            merchantId: "Test string",
        }, {
            country: "Test string",
            kind: "Test string",
            label: "Test string",
            name: "Test string",
            nonFreeReturnReasons: [
                "Test string"            ],
            policy: {
                lastReturnDate: "Test string",
                numberOfDays: "Test string",
                type: "Test string",
            },
            returnPolicyId: "Test string",
            returnShippingFee: {
                currency: "Test string",
                value: "Test string",
            },
            seasonalOverrides: [
                {
                    endDate: "Test string",
                    name: "Test string",
                    policy: {
                        lastReturnDate: "Test string",
                        numberOfDays: "Test string",
                        type: "Test string",
                    },
                    startDate: "Test string",
                }            ],
        });
        /** Lists the return policies of the Merchant Center account. */
        await gapi.client.content.returnpolicy.list({
            merchantId: "Test string",
        });
        /** Creates a new return policy. */
        await gapi.client.content.returnpolicyonline.create({
            merchantId: "Test string",
        }, {
            countries: [
                "Test string"            ],
            itemConditions: [
                "Test string"            ],
            label: "Test string",
            name: "Test string",
            policy: {
                days: "Test string",
                type: "Test string",
            },
            restockingFee: {
                fixedFee: {
                    currency: "Test string",
                    value: "Test string",
                },
                microPercent: 42,
            },
            returnMethods: [
                "Test string"            ],
            returnPolicyId: "Test string",
            returnPolicyUri: "Test string",
            returnReasonCategoryInfo: [
                {
                    returnLabelSource: "Test string",
                    returnReasonCategory: "Test string",
                    returnShippingFee: {
                        fixedFee: {
                            currency: "Test string",
                            value: "Test string",
                        },
                        type: "Test string",
                    },
                }            ],
        });
        /** Deletes an existing return policy. */
        await gapi.client.content.returnpolicyonline.delete({
            merchantId: "Test string",
            returnPolicyId: "Test string",
        });
        /** Gets an existing return policy. */
        await gapi.client.content.returnpolicyonline.get({
            merchantId: "Test string",
            returnPolicyId: "Test string",
        });
        /** Lists all existing return policies. */
        await gapi.client.content.returnpolicyonline.list({
            merchantId: "Test string",
        });
        /** Updates an existing return policy. */
        await gapi.client.content.returnpolicyonline.patch({
            merchantId: "Test string",
            returnPolicyId: "Test string",
        }, {
            countries: [
                "Test string"            ],
            itemConditions: [
                "Test string"            ],
            label: "Test string",
            name: "Test string",
            policy: {
                days: "Test string",
                type: "Test string",
            },
            restockingFee: {
                fixedFee: {
                    currency: "Test string",
                    value: "Test string",
                },
                microPercent: 42,
            },
            returnMethods: [
                "Test string"            ],
            returnPolicyId: "Test string",
            returnPolicyUri: "Test string",
            returnReasonCategoryInfo: [
                {
                    returnLabelSource: "Test string",
                    returnReasonCategory: "Test string",
                    returnShippingFee: {
                        fixedFee: {
                            currency: "Test string",
                            value: "Test string",
                        },
                        type: "Test string",
                    },
                }            ],
        });
        /** Retrieves a settlement report from your Merchant Center account. */
        await gapi.client.content.settlementreports.get({
            merchantId: "Test string",
            settlementId: "Test string",
        });
        /** Retrieves a list of settlement reports from your Merchant Center account. */
        await gapi.client.content.settlementreports.list({
            maxResults: 42,
            merchantId: "Test string",
            pageToken: "Test string",
            transferEndDate: "Test string",
            transferStartDate: "Test string",
        });
        /** Retrieves a list of transactions for the settlement. */
        await gapi.client.content.settlementtransactions.list({
            maxResults: 42,
            merchantId: "Test string",
            pageToken: "Test string",
            settlementId: "Test string",
            transactionIds: "Test string",
        });
        /** Retrieves and updates the shipping settings of multiple accounts in a single request. */
        await gapi.client.content.shippingsettings.custombatch({
        }, {
            entries: [
                {
                    accountId: "Test string",
                    batchId: 42,
                    merchantId: "Test string",
                    method: "Test string",
                    shippingSettings: {
                        accountId: "Test string",
                        postalCodeGroups: [
                            {
                                country: "Test string",
                                name: "Test string",
                                postalCodeRanges: [
                                    {
                                        postalCodeRangeBegin: "Test string",
                                        postalCodeRangeEnd: "Test string",
                                    }                                ],
                            }                        ],
                        services: [
                            {
                                active: true,
                                currency: "Test string",
                                deliveryCountry: "Test string",
                                deliveryTime: {
                                    cutoffTime: {
                                        hour: 42,
                                        minute: 42,
                                        timezone: "Test string",
                                    },
                                    handlingBusinessDayConfig: {
                                        businessDays: [
                                            "Test string"                                        ],
                                    },
                                    holidayCutoffs: [
                                        {
                                            deadlineDate: "Test string",
                                            deadlineHour: 42,
                                            deadlineTimezone: "Test string",
                                            holidayId: "Test string",
                                            visibleFromDate: "Test string",
                                        }                                    ],
                                    maxHandlingTimeInDays: 42,
                                    maxTransitTimeInDays: 42,
                                    minHandlingTimeInDays: 42,
                                    minTransitTimeInDays: 42,
                                    transitBusinessDayConfig: {
                                        businessDays: [
                                            "Test string"                                        ],
                                    },
                                    transitTimeTable: {
                                        postalCodeGroupNames: [
                                            "Test string"                                        ],
                                        rows: [
                                            {
                                                values: [
                                                    {
                                                        maxTransitTimeInDays: 42,
                                                        minTransitTimeInDays: 42,
                                                    }                                                ],
                                            }                                        ],
                                        transitTimeLabels: [
                                            "Test string"                                        ],
                                    },
                                    warehouseBasedDeliveryTimes: [
                                        {
                                            carrier: "Test string",
                                            carrierService: "Test string",
                                            originAdministrativeArea: "Test string",
                                            originCity: "Test string",
                                            originCountry: "Test string",
                                            originPostalCode: "Test string",
                                            originStreetAddress: "Test string",
                                        }                                    ],
                                },
                                eligibility: "Test string",
                                minimumOrderValue: {
                                    currency: "Test string",
                                    value: "Test string",
                                },
                                minimumOrderValueTable: {
                                    storeCodeSetWithMovs: [
                                        {
                                            storeCodes: [
                                                "Test string"                                            ],
                                            value: {
                                                currency: "Test string",
                                                value: "Test string",
                                            },
                                        }                                    ],
                                },
                                name: "Test string",
                                pickupService: {
                                    carrierName: "Test string",
                                    serviceName: "Test string",
                                },
                                rateGroups: [
                                    {
                                        applicableShippingLabels: [
                                            "Test string"                                        ],
                                        carrierRates: [
                                            {
                                                carrierName: "Test string",
                                                carrierService: "Test string",
                                                flatAdjustment: {
                                                    currency: "Test string",
                                                    value: "Test string",
                                                },
                                                name: "Test string",
                                                originPostalCode: "Test string",
                                                percentageAdjustment: "Test string",
                                            }                                        ],
                                        mainTable: {
                                            columnHeaders: {
                                                locations: [
                                                    {
                                                        locationIds: [
                                                            "Test string"                                                        ],
                                                    }                                                ],
                                                numberOfItems: [
                                                    "Test string"                                                ],
                                                postalCodeGroupNames: [
                                                    "Test string"                                                ],
                                                prices: [
                                                    {
                                                        currency: "Test string",
                                                        value: "Test string",
                                                    }                                                ],
                                                weights: [
                                                    {
                                                        unit: "Test string",
                                                        value: "Test string",
                                                    }                                                ],
                                            },
                                            name: "Test string",
                                            rowHeaders: {
                                                locations: [
                                                    {
                                                        locationIds: [
                                                            "Test string"                                                        ],
                                                    }                                                ],
                                                numberOfItems: [
                                                    "Test string"                                                ],
                                                postalCodeGroupNames: [
                                                    "Test string"                                                ],
                                                prices: [
                                                    {
                                                        currency: "Test string",
                                                        value: "Test string",
                                                    }                                                ],
                                                weights: [
                                                    {
                                                        unit: "Test string",
                                                        value: "Test string",
                                                    }                                                ],
                                            },
                                            rows: [
                                                {
                                                    cells: [
                                                        {
                                                            carrierRateName: "Test string",
                                                            flatRate: {
                                                                currency: "Test string",
                                                                value: "Test string",
                                                            },
                                                            noShipping: true,
                                                            pricePercentage: "Test string",
                                                            subtableName: "Test string",
                                                        }                                                    ],
                                                }                                            ],
                                        },
                                        name: "Test string",
                                        singleValue: {
                                            carrierRateName: "Test string",
                                            flatRate: {
                                                currency: "Test string",
                                                value: "Test string",
                                            },
                                            noShipping: true,
                                            pricePercentage: "Test string",
                                            subtableName: "Test string",
                                        },
                                        subtables: [
                                            {
                                                columnHeaders: {
                                                    locations: [
                                                        {
                                                            locationIds: [
                                                                "Test string"                                                            ],
                                                        }                                                    ],
                                                    numberOfItems: [
                                                        "Test string"                                                    ],
                                                    postalCodeGroupNames: [
                                                        "Test string"                                                    ],
                                                    prices: [
                                                        {
                                                            currency: "Test string",
                                                            value: "Test string",
                                                        }                                                    ],
                                                    weights: [
                                                        {
                                                            unit: "Test string",
                                                            value: "Test string",
                                                        }                                                    ],
                                                },
                                                name: "Test string",
                                                rowHeaders: {
                                                    locations: [
                                                        {
                                                            locationIds: [
                                                                "Test string"                                                            ],
                                                        }                                                    ],
                                                    numberOfItems: [
                                                        "Test string"                                                    ],
                                                    postalCodeGroupNames: [
                                                        "Test string"                                                    ],
                                                    prices: [
                                                        {
                                                            currency: "Test string",
                                                            value: "Test string",
                                                        }                                                    ],
                                                    weights: [
                                                        {
                                                            unit: "Test string",
                                                            value: "Test string",
                                                        }                                                    ],
                                                },
                                                rows: [
                                                    {
                                                        cells: [
                                                            {
                                                                carrierRateName: "Test string",
                                                                flatRate: {
                                                                    currency: "Test string",
                                                                    value: "Test string",
                                                                },
                                                                noShipping: true,
                                                                pricePercentage: "Test string",
                                                                subtableName: "Test string",
                                                            }                                                        ],
                                                    }                                                ],
                                            }                                        ],
                                    }                                ],
                                shipmentType: "Test string",
                            }                        ],
                    },
                }            ],
        });
        /** Retrieves the shipping settings of the account. */
        await gapi.client.content.shippingsettings.get({
            accountId: "Test string",
            merchantId: "Test string",
        });
        /** Retrieves supported carriers and carrier services for an account. */
        await gapi.client.content.shippingsettings.getsupportedcarriers({
            merchantId: "Test string",
        });
        /** Retrieves supported holidays for an account. */
        await gapi.client.content.shippingsettings.getsupportedholidays({
            merchantId: "Test string",
        });
        /** Retrieves supported pickup services for an account. */
        await gapi.client.content.shippingsettings.getsupportedpickupservices({
            merchantId: "Test string",
        });
        /** Lists the shipping settings of the sub-accounts in your Merchant Center account. */
        await gapi.client.content.shippingsettings.list({
            maxResults: 42,
            merchantId: "Test string",
            pageToken: "Test string",
        });
        /** Updates the shipping settings of the account. Any fields that are not provided are deleted from the resource. */
        await gapi.client.content.shippingsettings.update({
            accountId: "Test string",
            merchantId: "Test string",
        }, {
            accountId: "Test string",
            postalCodeGroups: [
                {
                    country: "Test string",
                    name: "Test string",
                    postalCodeRanges: [
                        {
                            postalCodeRangeBegin: "Test string",
                            postalCodeRangeEnd: "Test string",
                        }                    ],
                }            ],
            services: [
                {
                    active: true,
                    currency: "Test string",
                    deliveryCountry: "Test string",
                    deliveryTime: {
                        cutoffTime: {
                            hour: 42,
                            minute: 42,
                            timezone: "Test string",
                        },
                        handlingBusinessDayConfig: {
                            businessDays: [
                                "Test string"                            ],
                        },
                        holidayCutoffs: [
                            {
                                deadlineDate: "Test string",
                                deadlineHour: 42,
                                deadlineTimezone: "Test string",
                                holidayId: "Test string",
                                visibleFromDate: "Test string",
                            }                        ],
                        maxHandlingTimeInDays: 42,
                        maxTransitTimeInDays: 42,
                        minHandlingTimeInDays: 42,
                        minTransitTimeInDays: 42,
                        transitBusinessDayConfig: {
                            businessDays: [
                                "Test string"                            ],
                        },
                        transitTimeTable: {
                            postalCodeGroupNames: [
                                "Test string"                            ],
                            rows: [
                                {
                                    values: [
                                        {
                                            maxTransitTimeInDays: 42,
                                            minTransitTimeInDays: 42,
                                        }                                    ],
                                }                            ],
                            transitTimeLabels: [
                                "Test string"                            ],
                        },
                        warehouseBasedDeliveryTimes: [
                            {
                                carrier: "Test string",
                                carrierService: "Test string",
                                originAdministrativeArea: "Test string",
                                originCity: "Test string",
                                originCountry: "Test string",
                                originPostalCode: "Test string",
                                originStreetAddress: "Test string",
                            }                        ],
                    },
                    eligibility: "Test string",
                    minimumOrderValue: {
                        currency: "Test string",
                        value: "Test string",
                    },
                    minimumOrderValueTable: {
                        storeCodeSetWithMovs: [
                            {
                                storeCodes: [
                                    "Test string"                                ],
                                value: {
                                    currency: "Test string",
                                    value: "Test string",
                                },
                            }                        ],
                    },
                    name: "Test string",
                    pickupService: {
                        carrierName: "Test string",
                        serviceName: "Test string",
                    },
                    rateGroups: [
                        {
                            applicableShippingLabels: [
                                "Test string"                            ],
                            carrierRates: [
                                {
                                    carrierName: "Test string",
                                    carrierService: "Test string",
                                    flatAdjustment: {
                                        currency: "Test string",
                                        value: "Test string",
                                    },
                                    name: "Test string",
                                    originPostalCode: "Test string",
                                    percentageAdjustment: "Test string",
                                }                            ],
                            mainTable: {
                                columnHeaders: {
                                    locations: [
                                        {
                                            locationIds: [
                                                "Test string"                                            ],
                                        }                                    ],
                                    numberOfItems: [
                                        "Test string"                                    ],
                                    postalCodeGroupNames: [
                                        "Test string"                                    ],
                                    prices: [
                                        {
                                            currency: "Test string",
                                            value: "Test string",
                                        }                                    ],
                                    weights: [
                                        {
                                            unit: "Test string",
                                            value: "Test string",
                                        }                                    ],
                                },
                                name: "Test string",
                                rowHeaders: {
                                    locations: [
                                        {
                                            locationIds: [
                                                "Test string"                                            ],
                                        }                                    ],
                                    numberOfItems: [
                                        "Test string"                                    ],
                                    postalCodeGroupNames: [
                                        "Test string"                                    ],
                                    prices: [
                                        {
                                            currency: "Test string",
                                            value: "Test string",
                                        }                                    ],
                                    weights: [
                                        {
                                            unit: "Test string",
                                            value: "Test string",
                                        }                                    ],
                                },
                                rows: [
                                    {
                                        cells: [
                                            {
                                                carrierRateName: "Test string",
                                                flatRate: {
                                                    currency: "Test string",
                                                    value: "Test string",
                                                },
                                                noShipping: true,
                                                pricePercentage: "Test string",
                                                subtableName: "Test string",
                                            }                                        ],
                                    }                                ],
                            },
                            name: "Test string",
                            singleValue: {
                                carrierRateName: "Test string",
                                flatRate: {
                                    currency: "Test string",
                                    value: "Test string",
                                },
                                noShipping: true,
                                pricePercentage: "Test string",
                                subtableName: "Test string",
                            },
                            subtables: [
                                {
                                    columnHeaders: {
                                        locations: [
                                            {
                                                locationIds: [
                                                    "Test string"                                                ],
                                            }                                        ],
                                        numberOfItems: [
                                            "Test string"                                        ],
                                        postalCodeGroupNames: [
                                            "Test string"                                        ],
                                        prices: [
                                            {
                                                currency: "Test string",
                                                value: "Test string",
                                            }                                        ],
                                        weights: [
                                            {
                                                unit: "Test string",
                                                value: "Test string",
                                            }                                        ],
                                    },
                                    name: "Test string",
                                    rowHeaders: {
                                        locations: [
                                            {
                                                locationIds: [
                                                    "Test string"                                                ],
                                            }                                        ],
                                        numberOfItems: [
                                            "Test string"                                        ],
                                        postalCodeGroupNames: [
                                            "Test string"                                        ],
                                        prices: [
                                            {
                                                currency: "Test string",
                                                value: "Test string",
                                            }                                        ],
                                        weights: [
                                            {
                                                unit: "Test string",
                                                value: "Test string",
                                            }                                        ],
                                    },
                                    rows: [
                                        {
                                            cells: [
                                                {
                                                    carrierRateName: "Test string",
                                                    flatRate: {
                                                        currency: "Test string",
                                                        value: "Test string",
                                                    },
                                                    noShipping: true,
                                                    pricePercentage: "Test string",
                                                    subtableName: "Test string",
                                                }                                            ],
                                        }                                    ],
                                }                            ],
                        }                    ],
                    shipmentType: "Test string",
                }            ],
        });
        /** Retrieves the status and review eligibility for the Shopping Ads program. */
        await gapi.client.content.shoppingadsprogram.get({
            merchantId: "Test string",
        });
        /** Requests a review for Shopping Ads program in the provided country. */
        await gapi.client.content.shoppingadsprogram.requestreview({
            merchantId: "Test string",
        }, {
            regionCode: "Test string",
        });
    }
});
