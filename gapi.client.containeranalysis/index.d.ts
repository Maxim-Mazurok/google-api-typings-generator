// Type definitions for non-npm package Container Analysis API v1alpha1 1.0
// Project: https://cloud.google.com/container-analysis/api/reference/rest/
// Definitions by: Maxim Mazurok <https://github.com/Maxim-Mazurok>
//                 Google API Typings Generator <https://github.com/google-api-typings-generator>
//                 Nick Amoscato <https://github.com/namoscato>
//                 Declan Vong <https://github.com/declanvong>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 2.8

// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
// Generated from: https://containeranalysis.googleapis.com/$discovery/rest?version=v1alpha1
// Revision: 20200925

/// <reference types="gapi.client" />

declare namespace gapi.client {
    /** Load Container Analysis API v1alpha1 */
    function load(name: "containeranalysis", version: "v1alpha1"): PromiseLike<void>;
    function load(name: "containeranalysis", version: "v1alpha1", callback: () => any): void;

    namespace containeranalysis {
        interface Artifact {
            /** Hash or checksum value of a binary, or Docker Registry 2.0 digest of a container. */
            checksum?: string;
            /** Artifact ID, if any; for container images, this will be a URL by digest like gcr.io/projectID/imagename@sha256:123456 */
            id?: string;
            /**
             * Name of the artifact. This may be the path to a binary or jar file, or in the case of a container build, the name used to push the container image to Google Container Registry, as
             * presented to `docker push`. This field is deprecated in favor of the plural `names` field; it continues to exist here to allow existing BuildProvenance serialized to json in
             * google.devtools.containeranalysis.v1alpha1.BuildDetails.provenance_bytes to deserialize back into proto.
             */
            name?: string;
            /**
             * Related artifact names. This may be the path to a binary or jar file, or in the case of a container build, the name used to push the container image to Google Container Registry, as
             * presented to `docker push`. Note that a single Artifact ID can have multiple names, for example if two tags are applied to one image.
             */
            names?: string[];
        }
        interface Attestation {
            pgpSignedAttestation?: PgpSignedAttestation;
        }
        interface AttestationAuthority {
            hint?: AttestationAuthorityHint;
        }
        interface AttestationAuthorityHint {
            /** The human readable name of this Attestation Authority, for example "qa". */
            humanReadableName?: string;
        }
        interface Basis {
            /** The fingerprint of the base image. */
            fingerprint?: Fingerprint;
            /** The resource_url for the resource representing the basis of associated occurrence images. */
            resourceUrl?: string;
        }
        interface Binding {
            /** A client-specified ID for this binding. Expected to be globally unique to support the internal bindings-by-ID API. */
            bindingId?: string;
            /**
             * The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`,
             * then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which
             * resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
             */
            condition?: Expr;
            /**
             * Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is
             * on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service
             * account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that
             * represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example,
             * `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example,
             * `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. *
             * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example,
             * `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service
             * account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently
             * deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in
             * the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
             */
            members?: string[];
            /** Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`. */
            role?: string;
        }
        interface BuildDetails {
            /** The actual provenance */
            provenance?: BuildProvenance;
            /**
             * Serialized JSON representation of the provenance, used in generating the `BuildSignature` in the corresponding Result. After verifying the signature, `provenance_bytes` can be
             * unmarshalled and compared to the provenance to confirm that it is unchanged. A base64-encoded string representation of the provenance bytes is used for the signature in order to
             * interoperate with openssl which expects this format for signature verification. The serialized form is captured both to avoid ambiguity in how the provenance is marshalled to json
             * as well to prevent incompatibilities with future changes.
             */
            provenanceBytes?: string;
        }
        interface BuildProvenance {
            /** Version string of the builder at the time this build was executed. */
            builderVersion?: string;
            /** Special options applied to this build. This is a catch-all field where build providers can enter any desired additional details. */
            buildOptions?: { [P in string]: string };
            /** Output of the build. */
            builtArtifacts?: Artifact[];
            /** Commands requested by the build. */
            commands?: Command[];
            /** Time at which the build was created. */
            createTime?: string;
            /**
             * E-mail address of the user who initiated this build. Note that this was the user's e-mail address at the time the build was initiated; this address may not represent the same
             * end-user for all time.
             */
            creator?: string;
            /** Time at which execution of the build was finished. */
            finishTime?: string;
            /** Unique identifier of the build. */
            id?: string;
            /** Google Cloud Storage bucket where logs were written. */
            logsBucket?: string;
            /** ID of the project. */
            projectId?: string;
            /** Details of the Source input to the build. */
            sourceProvenance?: Source;
            /** Time at which execution of the build was started. */
            startTime?: string;
            /** Trigger identifier if the build was triggered automatically; empty if not. */
            triggerId?: string;
        }
        interface BuildSignature {
            /**
             * An Id for the key used to sign. This could be either an Id for the key stored in `public_key` (such as the Id or fingerprint for a PGP key, or the CN for a cert), or a reference to
             * an external key (such as a reference to a key in Cloud Key Management Service).
             */
            keyId?: string;
            /** The type of the key, either stored in `public_key` or referenced in `key_id` */
            keyType?: string;
            /**
             * Public key of the builder which can be used to verify that the related findings are valid and unchanged. If `key_type` is empty, this defaults to PEM encoded public keys. This field
             * may be empty if `key_id` references an external key. For Cloud Build based signatures, this is a PEM encoded public key. To verify the Cloud Build signature, place the contents of
             * this field into a file (public.pem). The signature field is base64-decoded into its binary representation in signature.bin, and the provenance bytes from `BuildDetails` are
             * base64-decoded into a binary representation in signed.bin. OpenSSL can then verify the signature: `openssl sha256 -verify public.pem -signature signature.bin signed.bin`
             */
            publicKey?: string;
            /** Signature of the related `BuildProvenance`, encoded in a base64 string. */
            signature?: string;
        }
        interface BuildType {
            /** Version of the builder which produced this Note. */
            builderVersion?: string;
            /** Signature of the build in Occurrences pointing to the Note containing this `BuilderDetails`. */
            signature?: BuildSignature;
        }
        interface Command {
            /** Command-line arguments used when executing this Command. */
            args?: string[];
            /** Working directory (relative to project source root) used when running this Command. */
            dir?: string;
            /** Environment variables set before running this Command. */
            env?: string[];
            /** Optional unique identifier for this Command, used in wait_for to reference this Command as a dependency. */
            id?: string;
            /** Name of the command, as presented on the command line, or if the command is packaged as a Docker container, as presented to `docker pull`. */
            name?: string;
            /** The ID(s) of the Command(s) that this Command depends on. */
            waitFor?: string[];
        }
        interface CreateOperationRequest {
            /** The operation to create. */
            operation?: Operation;
            /** The ID to use for this operation. */
            operationId?: string;
        }
        interface Deployable {
            /** Resource URI for the artifact being deployed. */
            resourceUri?: string[];
        }
        interface Deployment {
            /** Address of the runtime element hosting this deployment. */
            address?: string;
            /** Configuration used to create this deployment. */
            config?: string;
            /** Beginning of the lifetime of this deployment. */
            deployTime?: string;
            /** Platform hosting this deployment. */
            platform?: string;
            /** Output only. Resource URI for the artifact being deployed taken from the deployable field with the same name. */
            resourceUri?: string[];
            /** End of the lifetime of this deployment. */
            undeployTime?: string;
            /** Identity of the user that triggered this deployment. */
            userEmail?: string;
        }
        interface Derived {
            /** Output only. This contains the base image URL for the derived image occurrence. */
            baseResourceUrl?: string;
            /** Output only. The number of layers by which this image differs from the associated image basis. */
            distance?: number;
            /** The fingerprint of the derived image. */
            fingerprint?: Fingerprint;
            /**
             * This contains layer-specific metadata, if populated it has length "distance" and is ordered with [distance] being the layer immediately following the base image and [1] being the
             * final layer.
             */
            layerInfo?: Layer[];
        }
        interface Detail {
            /**
             * The cpe_uri in [cpe format] (https://cpe.mitre.org/specification/) in which the vulnerability manifests. Examples include distro or storage location for vulnerable jar. This field
             * can be used as a filter in list requests.
             */
            cpeUri?: string;
            /** A vendor-specific description of this note. */
            description?: string;
            /** The fix for this specific package version. */
            fixedLocation?: VulnerabilityLocation;
            /** Whether this Detail is obsolete. Occurrences are expected not to point to obsolete details. */
            isObsolete?: boolean;
            /** The max version of the package in which the vulnerability exists. */
            maxAffectedVersion?: Version;
            /** The min version of the package in which the vulnerability exists. */
            minAffectedVersion?: Version;
            /** The name of the package where the vulnerability was found. This field can be used as a filter in list requests. */
            package?: string;
            /** The type of package; whether native or non native(ruby gems, node.js packages etc) */
            packageType?: string;
            /** The severity (eg: distro assigned severity) for this vulnerability. */
            severityName?: string;
        }
        interface Discovered {
            /** The status of discovery for the resource. */
            analysisStatus?: string;
            /** When an error is encountered this will contain a LocalizedMessage under details to show to the user. The LocalizedMessage output only and populated by the API. */
            analysisStatusError?: Status;
            /** Whether the resource is continuously analyzed. */
            continuousAnalysis?: string;
            /** The CPE of the resource being scanned. */
            cpe?: string;
            /** Output only. An operation that indicates the status of the current scan. This field is deprecated, do not use. */
            operation?: Operation;
        }
        interface Discovery {
            /** The kind of analysis that is handled by this discovery. */
            analysisKind?: string;
        }
        interface Distribution {
            /** The CPU architecture for which packages in this distribution channel were built */
            architecture?: string;
            /** The cpe_uri in [cpe format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package. */
            cpeUri?: string;
            /** The distribution channel-specific description of this package. */
            description?: string;
            /** The latest available version of this package in this distribution channel. */
            latestVersion?: Version;
            /** A freeform string denoting the maintainer of this package. */
            maintainer?: string;
            /** The distribution channel-specific homepage for this package. */
            url?: string;
        }
        // tslint:disable-next-line:no-empty-interface
        interface Empty {
        }
        interface Expr {
            /** Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI. */
            description?: string;
            /** Textual representation of an expression in Common Expression Language syntax. */
            expression?: string;
            /** Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file. */
            location?: string;
            /** Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression. */
            title?: string;
        }
        interface FileHashes {
            /** Collection of file hashes. */
            fileHash?: Hash[];
        }
        interface Fingerprint {
            /** The layer-id of the final layer in the Docker image's v1 representation. This field can be used as a filter in list requests. */
            v1Name?: string;
            /** The ordered list of v2 blobs that represent a given image. */
            v2Blob?: string[];
            /**
             * Output only. The name of the image's v2 blobs computed via: [bottom] := v2_blobbottom := sha256(v2_blob[N] + " " + v2_name[N+1]) Only the name of the final blob is kept. This field
             * can be used as a filter in list requests.
             */
            v2Name?: string;
        }
        interface GetIamPolicyRequest {
            /** OPTIONAL: A `GetPolicyOptions` object for specifying options to `GetIamPolicy`. */
            options?: GetPolicyOptions;
        }
        interface GetPolicyOptions {
            /**
             * Optional. The policy format version to be returned. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for policies with any conditional
             * bindings must specify version 3. Policies without any conditional bindings may specify any valid value or leave the field unset. To learn which resources support conditions in their
             * IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
             */
            requestedPolicyVersion?: number;
        }
        interface GetVulnzOccurrencesSummaryResponse {
            /** A map of how many occurrences were found for each severity. */
            counts?: SeverityCount[];
        }
        interface GoogleDevtoolsContaineranalysisV1alpha1AliasContext {
            /** The alias kind. */
            kind?: string;
            /** The alias name. */
            name?: string;
        }
        interface GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContext {
            /** An alias, which may be a branch or tag. */
            aliasContext?: GoogleDevtoolsContaineranalysisV1alpha1AliasContext;
            /** The ID of the repo. */
            repoId?: GoogleDevtoolsContaineranalysisV1alpha1RepoId;
            /** A revision ID. */
            revisionId?: string;
        }
        interface GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContext {
            /** An alias, which may be a branch or tag. */
            aliasContext?: GoogleDevtoolsContaineranalysisV1alpha1AliasContext;
            /** The full project name within the host. Projects may be nested, so "project/subproject" is a valid project name. The "repo name" is the hostURI/project. */
            gerritProject?: string;
            /** The URI of a running Gerrit instance. */
            hostUri?: string;
            /** A revision (commit) ID. */
            revisionId?: string;
        }
        interface GoogleDevtoolsContaineranalysisV1alpha1GitSourceContext {
            /** Required. Git commit hash. */
            revisionId?: string;
            /** Git repository URL. */
            url?: string;
        }
        interface GoogleDevtoolsContaineranalysisV1alpha1OperationMetadata {
            /** Output only. The time this operation was created. */
            createTime?: string;
            /** Output only. The time that this operation was marked completed or failed. */
            endTime?: string;
        }
        interface GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoId {
            /** The ID of the project. */
            projectId?: string;
            /** The name of the repo. Leave empty for the default repo. */
            repoName?: string;
        }
        interface GoogleDevtoolsContaineranalysisV1alpha1RepoId {
            /** A combination of a project ID and a repo name. */
            projectRepoId?: GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoId;
            /** A server-assigned, globally unique identifier. */
            uid?: string;
        }
        interface GoogleDevtoolsContaineranalysisV1alpha1SourceContext {
            /** A SourceContext referring to a revision in a Google Cloud Source Repo. */
            cloudRepo?: GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContext;
            /** A SourceContext referring to a Gerrit project. */
            gerrit?: GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContext;
            /** A SourceContext referring to any third party Git repo (e.g., GitHub). */
            git?: GoogleDevtoolsContaineranalysisV1alpha1GitSourceContext;
            /** Labels with user defined metadata. */
            labels?: { [P in string]: string };
        }
        interface Hash {
            /** The type of hash that was performed. */
            type?: string;
            /** The hash value. */
            value?: string;
        }
        // tslint:disable-next-line:interface-name
        interface Installation {
            /** All of the places within the filesystem versions of this package have been found. */
            location?: Location[];
            /** Output only. The name of the installed package. */
            name?: string;
        }
        interface Layer {
            /** The recovered arguments to the Dockerfile directive. */
            arguments?: string;
            /** The recovered Dockerfile directive used to construct this layer. */
            directive?: string;
        }
        interface ListNoteOccurrencesResponse {
            /** Token to receive the next page of notes. */
            nextPageToken?: string;
            /** The occurrences attached to the specified note. */
            occurrences?: Occurrence[];
        }
        interface ListNotesResponse {
            /** The next pagination token in the list response. It should be used as page_token for the following request. An empty value means no more result. */
            nextPageToken?: string;
            /** The occurrences requested */
            notes?: Note[];
        }
        interface ListOccurrencesResponse {
            /** The next pagination token in the list response. It should be used as `page_token` for the following request. An empty value means no more results. */
            nextPageToken?: string;
            /** The occurrences requested. */
            occurrences?: Occurrence[];
        }
        interface ListScanConfigsResponse {
            /** A page token to pass in order to get more scan configs. */
            nextPageToken?: string;
            /** The set of scan configs. */
            scanConfigs?: ScanConfig[];
        }
        interface Location {
            /** The cpe_uri in [cpe format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package. */
            cpeUri?: string;
            /** The path from which we gathered that this package/version is installed. */
            path?: string;
            /** The version installed at this location. */
            version?: Version;
        }
        interface Note {
            /** A note describing an attestation role. */
            attestationAuthority?: AttestationAuthority;
            /** A note describing a base image. */
            baseImage?: Basis;
            /** Build provenance type for a verifiable build. */
            buildType?: BuildType;
            /** Output only. The time this note was created. This field can be used as a filter in list requests. */
            createTime?: string;
            /** A note describing something that can be deployed. */
            deployable?: Deployable;
            /** A note describing a provider/analysis type. */
            discovery?: Discovery;
            /** Time of expiration for this note, null if note does not expire. */
            expirationTime?: string;
            /** Output only. This explicitly denotes which kind of note is specified. This field can be used as a filter in list requests. */
            kind?: string;
            /** A detailed description of this `Note`. */
            longDescription?: string;
            /** The name of the note in the form "projects/{provider_project_id}/notes/{NOTE_ID}" */
            name?: string;
            /** A note describing a package hosted by various package managers. */
            package?: Package;
            /** URLs associated with this note */
            relatedUrl?: RelatedUrl[];
            /** A one sentence description of this `Note`. */
            shortDescription?: string;
            /** Output only. The time this note was last updated. This field can be used as a filter in list requests. */
            updateTime?: string;
            /** A note describing an upgrade. */
            upgrade?: UpgradeNote;
            /** A package vulnerability type of note. */
            vulnerabilityType?: VulnerabilityType;
        }
        interface Occurrence {
            /** Describes an attestation of an artifact. */
            attestation?: Attestation;
            /** Build details for a verifiable build. */
            buildDetails?: BuildDetails;
            /** Output only. The time this `Occurrence` was created. */
            createTime?: string;
            /** Describes the deployment of an artifact on a runtime. */
            deployment?: Deployment;
            /** Describes how this resource derives from the basis in the associated note. */
            derivedImage?: Derived;
            /** Describes the initial scan status for this resource. */
            discovered?: Discovered;
            /** Describes the installation of a package on the linked resource. */
            installation?: Installation;
            /** Output only. This explicitly denotes which of the `Occurrence` details are specified. This field can be used as a filter in list requests. */
            kind?: string;
            /** Output only. The name of the `Occurrence` in the form "projects/{project_id}/occurrences/{OCCURRENCE_ID}" */
            name?: string;
            /** An analysis note associated with this image, in the form "providers/{provider_id}/notes/{NOTE_ID}" This field can be used as a filter in list requests. */
            noteName?: string;
            /** A description of actions that can be taken to remedy the `Note` */
            remediation?: string;
            /** The resource for which the `Occurrence` applies. */
            resource?: Resource;
            /**
             * The unique URL of the image or the container for which the `Occurrence` applies. For example, https://gcr.io/project/image@sha256:foo This field can be used as a filter in list
             * requests.
             */
            resourceUrl?: string;
            /** Output only. The time this `Occurrence` was last updated. */
            updateTime?: string;
            /** Describes an upgrade. */
            upgrade?: UpgradeOccurrence;
            /** Details of a security vulnerability note. */
            vulnerabilityDetails?: VulnerabilityDetails;
        }
        interface Operation {
            /** If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available. */
            done?: boolean;
            /** The error result of the operation in case of failure or cancellation. */
            error?: Status;
            /**
             * Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such
             * metadata. Any method that returns a long-running operation should document the metadata type, if any.
             */
            metadata?: { [P in string]: any };
            /**
             * The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending
             * with `operations/{unique_id}`.
             */
            name?: string;
            /**
             * The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the
             * original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the
             * original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
             */
            response?: { [P in string]: any };
        }
        interface Package {
            /** The various channels by which a package is distributed. */
            distribution?: Distribution[];
            /** The name of the package. */
            name?: string;
        }
        interface PackageIssue {
            /** The location of the vulnerability. */
            affectedLocation?: VulnerabilityLocation;
            /** The location of the available fix for vulnerability. */
            fixedLocation?: VulnerabilityLocation;
            severityName?: string;
        }
        interface PgpSignedAttestation {
            /**
             * Type (for example schema) of the attestation payload that was signed. The verifier must ensure that the provided type is one that the verifier supports, and that the attestation
             * payload is a valid instantiation of that type (for example by validating a JSON schema).
             */
            contentType?: string;
            /**
             * The cryptographic fingerprint of the key used to generate the signature, as output by, e.g. `gpg --list-keys`. This should be the version 4, full 160-bit fingerprint, expressed as a
             * 40 character hexadecimal string. See https://tools.ietf.org/html/rfc4880#section-12.2 for details. Implementations may choose to acknowledge "LONG", "SHORT", or other abbreviated
             * key IDs, but only the full fingerprint is guaranteed to work. In gpg, the full fingerprint can be retrieved from the `fpr` field returned when calling --list-keys with
             * --with-colons. For example: ``` gpg --with-colons --with-fingerprint --force-v4-certs \ --list-keys attester@example.com tru::1:1513631572:0:3:1:5 pub:......
             * fpr:::::::::24FF6481B76AC91E66A00AC657A93A81EF3AE6FB: ``` Above, the fingerprint is `24FF6481B76AC91E66A00AC657A93A81EF3AE6FB`.
             */
            pgpKeyId?: string;
            /**
             * The raw content of the signature, as output by GNU Privacy Guard (GPG) or equivalent. Since this message only supports attached signatures, the payload that was signed must be
             * attached. While the signature format supported is dependent on the verification implementation, currently only ASCII-armored (`--armor` to gpg), non-clearsigned (`--sign` rather
             * than `--clearsign` to gpg) are supported. Concretely, `gpg --sign --armor --output=signature.gpg payload.json` will create the signature content expected in this field in
             * `signature.gpg` for the `payload.json` attestation payload.
             */
            signature?: string;
        }
        interface Policy {
            /**
             * Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at
             * least one member.
             */
            bindings?: Binding[];
            /**
             * `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make
             * use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems
             * are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM
             * Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1`
             * policy, and all of the conditions in the version `3` policy are lost.
             */
            etag?: string;
            /**
             * Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings
             * must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a
             * policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use
             * IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1`
             * policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave
             * the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
             */
            version?: number;
        }
        interface RelatedUrl {
            /** Label to describe usage of the URL */
            label?: string;
            /** Specific URL to associate with the note */
            url?: string;
        }
        interface RepoSource {
            /** Name of the branch to build. */
            branchName?: string;
            /** Explicit commit SHA to build. */
            commitSha?: string;
            /** ID of the project that owns the repo. */
            projectId?: string;
            /** Name of the repo. */
            repoName?: string;
            /** Name of the tag to build. */
            tagName?: string;
        }
        interface Resource {
            /** The hash of the resource content. E.g., the Docker digest. */
            contentHash?: Hash;
            /** The name of the resource. E.g., the name of a Docker image - "Debian". */
            name?: string;
            /** The unique URI of the resource. E.g., "https://gcr.io/project/image@sha256:foo" for a Docker image. */
            uri?: string;
        }
        interface ScanConfig {
            /** Output only. The time this scan config was created. */
            createTime?: string;
            /** Output only. A human-readable description of what the `ScanConfig` does. */
            description?: string;
            /** Indicates whether the Scan is enabled. */
            enabled?: boolean;
            /** Output only. The name of the ScanConfig in the form “projects/{project_id}/scanConfigs/{scan_config_id}". */
            name?: string;
            /** Output only. The time this scan config was last updated. */
            updateTime?: string;
        }
        interface SetIamPolicyRequest {
            /**
             * REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Cloud Platform
             * services (such as Projects) might reject them.
             */
            policy?: Policy;
        }
        interface SeverityCount {
            /** The number of occurrences with the severity. */
            count?: string;
            /** The severity of the occurrences. */
            severity?: string;
        }
        interface Source {
            /**
             * If provided, some of the source code used for the build may be found in these locations, in the case where the source repository had multiple remotes or submodules. This list will
             * not include the context specified in the context field.
             */
            additionalContexts?: GoogleDevtoolsContaineranalysisV1alpha1SourceContext[];
            /** If provided, the input binary artifacts for the build came from this location. */
            artifactStorageSource?: StorageSource;
            /** If provided, the source code used for the build came from this location. */
            context?: GoogleDevtoolsContaineranalysisV1alpha1SourceContext;
            /**
             * Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. The keys to this map are file paths used as build source
             * and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (.tar.gz), the FileHash will be for the single path to
             * that file.
             */
            fileHashes?: { [P in string]: FileHashes };
            /** If provided, get source from this location in a Cloud Repo. */
            repoSource?: RepoSource;
            /** If provided, get the source from this location in in Google Cloud Storage. */
            storageSource?: StorageSource;
        }
        interface Status {
            /** The status code, which should be an enum value of google.rpc.Code. */
            code?: number;
            /** A list of messages that carry the error details. There is a common set of message types for APIs to use. */
            details?: Array<{ [P in string]: any }>;
            /**
             * A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the
             * client.
             */
            message?: string;
        }
        interface StorageSource {
            /** Google Cloud Storage bucket containing source (see [Bucket Name Requirements] (https://cloud.google.com/storage/docs/bucket-naming#requirements)). */
            bucket?: string;
            /** Google Cloud Storage generation for the object. */
            generation?: string;
            /** Google Cloud Storage object containing source. */
            object?: string;
        }
        interface TestIamPermissionsRequest {
            /**
             * The set of permissions to check for the `resource`. Permissions with wildcards (such as '*' or 'storage.*') are not allowed. For more information see [IAM
             * Overview](https://cloud.google.com/iam/docs/overview#permissions).
             */
            permissions?: string[];
        }
        interface TestIamPermissionsResponse {
            /** A subset of `TestPermissionsRequest.permissions` that the caller is allowed. */
            permissions?: string[];
        }
        interface UpdateOperationRequest {
            /** The operation to create. */
            operation?: Operation;
            /** The fields to update. */
            updateMask?: string;
        }
        interface UpgradeDistribution {
            /** The operating system classification of this Upgrade, as specified by the upstream operating system upgrade feed. */
            classification?: string;
            /** Required - The specific operating system this metadata applies to. See https://cpe.mitre.org/specification/. */
            cpeUri?: string;
            /** The cve that would be resolved by this upgrade. */
            cve?: string[];
            /** The severity as specified by the upstream operating system. */
            severity?: string;
        }
        interface UpgradeNote {
            /** Metadata about the upgrade for each specific operating system. */
            distributions?: UpgradeDistribution[];
            /** Required - The package this Upgrade is for. */
            package?: string;
            /** Required - The version of the package in machine + human readable form. */
            version?: Version;
        }
        interface UpgradeOccurrence {
            /** Metadata about the upgrade for available for the specific operating system for the resource_url. This allows efficient filtering, as well as making it easier to use the occurrence. */
            distribution?: UpgradeDistribution;
            /** Required - The package this Upgrade is for. */
            package?: string;
            /** Required - The version of the package in a machine + human readable form. */
            parsedVersion?: Version;
        }
        interface Version {
            /** Used to correct mistakes in the version numbering scheme. */
            epoch?: number;
            /** Distinguish between sentinel MIN/MAX versions and normal versions. If kind is not NORMAL, then the other fields are ignored. */
            kind?: string;
            /** The main part of the version name. */
            name?: string;
            /** The iteration of the package build from the above version. */
            revision?: string;
        }
        interface VulnerabilityDetails {
            /** Output only. The CVSS score of this vulnerability. CVSS score is on a scale of 0-10 where 0 indicates low severity and 10 indicates high severity. */
            cvssScore?: number;
            /** The distro assigned severity for this vulnerability when that is available and note provider assigned severity when distro has not yet assigned a severity for this vulnerability. */
            effectiveSeverity?: string;
            /** The set of affected locations and their fixes (if available) within the associated resource. */
            packageIssue?: PackageIssue[];
            /** Output only. The note provider assigned Severity of the vulnerability. */
            severity?: string;
            /** The type of package; whether native or non native(ruby gems, node.js packages etc) */
            type?: string;
        }
        interface VulnerabilityLocation {
            /**
             * The cpe_uri in [cpe format] (https://cpe.mitre.org/specification/) format. Examples include distro or storage location for vulnerable jar. This field can be used as a filter in list
             * requests.
             */
            cpeUri?: string;
            /** The package being described. */
            package?: string;
            /** The version of the package being described. This field can be used as a filter in list requests. */
            version?: Version;
        }
        interface VulnerabilityType {
            /** The CVSS score for this Vulnerability. */
            cvssScore?: number;
            /** All information about the package to specifically identify this vulnerability. One entry per (version range and cpe_uri) the package vulnerability has manifested in. */
            details?: Detail[];
            /** Note provider assigned impact of the vulnerability */
            severity?: string;
        }
        interface OccurrencesResource {
            /** Lists `Occurrences` referencing the specified `Note`. Use this method to get all occurrences referencing your `Note` across all your customer projects. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The filter expression. */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name field will contain the note name for example: "provider/{provider_id}/notes/{note_id}" */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Number of notes to return in the list. */
                pageSize?: number;
                /** Token to provide to skip to a particular spot in the list. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListNoteOccurrencesResponse>;
        }
        interface NotesResource {
            /** Creates a new `Note`. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the project. Should be of the form "providers/{provider_id}". @Deprecated */
                name?: string;
                /** The ID to use for this note. */
                noteId?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** This field contains the project Id for example: "projects/{project_id} */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Note;
            }): Request<Note>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the project. Should be of the form "providers/{provider_id}". @Deprecated */
                name?: string;
                /** The ID to use for this note. */
                noteId?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** This field contains the project Id for example: "projects/{project_id} */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Note): Request<Note>;
            /** Deletes the given `Note` from the system. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the note in the form of "providers/{provider_id}/notes/{NOTE_ID}" */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<{}>;
            /** Returns the requested `Note`. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the note in the form of "providers/{provider_id}/notes/{NOTE_ID}" */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Note>;
            /**
             * Gets the access control policy for a note or an `Occurrence` resource. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if
             * the resource is a note or occurrence, respectively. Attempting to call this method on a resource without the required permission will result in a `PERMISSION_DENIED` error.
             * Attempting to call this method on a non-existent resource will result in a `NOT_FOUND` error if the user has list permission on the project, or a `PERMISSION_DENIED` error
             * otherwise. The resource takes the following formats: `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for occurrences and projects/{PROJECT_ID}/notes/{NOTE_ID} for notes
             */
            getIamPolicy(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** REQUIRED: The resource for which the policy is being requested. See the operation documentation for the appropriate value for this field. */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: GetIamPolicyRequest): Request<Policy>;
            /** Lists all `Notes` for a given project. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The filter expression. */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name field will contain the project Id for example: "providers/{provider_id} @Deprecated */
                name?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Number of notes to return in the list. */
                pageSize?: number;
                /** Token to provide to skip to a particular spot in the list. */
                pageToken?: string;
                /** This field contains the project Id for example: "projects/{PROJECT_ID}". */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListNotesResponse>;
            /** Updates an existing `Note`. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the note. Should be of the form "projects/{provider_id}/notes/{note_id}". */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The fields to update. */
                updateMask?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Note;
            }): Request<Note>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the note. Should be of the form "projects/{provider_id}/notes/{note_id}". */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The fields to update. */
                updateMask?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Note): Request<Note>;
            /**
             * Sets the access control policy on the specified `Note` or `Occurrence`. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if
             * the resource is a `Note` or an `Occurrence`, respectively. Attempting to call this method without these permissions will result in a ` `PERMISSION_DENIED` error. Attempting to call
             * this method on a non-existent resource will result in a `NOT_FOUND` error if the user has `containeranalysis.notes.list` permission on a `Note` or
             * `containeranalysis.occurrences.list` on an `Occurrence`, or a `PERMISSION_DENIED` error otherwise. The resource takes the following formats:
             * `projects/{projectid}/occurrences/{occurrenceid}` for occurrences and projects/{projectid}/notes/{noteid} for notes
             */
            setIamPolicy(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** REQUIRED: The resource for which the policy is being specified. See the operation documentation for the appropriate value for this field. */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: SetIamPolicyRequest): Request<Policy>;
            /**
             * Returns the permissions that a caller has on the specified note or occurrence resource. Requires list permission on the project (for example, "storage.objects.list" on the
             * containing bucket for testing permission of an object). Attempting to call this method on a non-existent resource will result in a `NOT_FOUND` error if the user has list permission
             * on the project, or a `PERMISSION_DENIED` error otherwise. The resource takes the following formats: `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for `Occurrences` and
             * `projects/{PROJECT_ID}/notes/{NOTE_ID}` for `Notes`
             */
            testIamPermissions(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** REQUIRED: The resource for which the policy detail is being requested. See the operation documentation for the appropriate value for this field. */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: TestIamPermissionsRequest): Request<TestIamPermissionsResponse>;
            occurrences: OccurrencesResource;
        }
        interface OccurrencesResource {
            /** Creates a new `Occurrence`. Use this method to create `Occurrences` for a resource. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the project. Should be of the form "projects/{project_id}". @Deprecated */
                name?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** This field contains the project Id for example: "projects/{project_id}" */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Occurrence;
            }): Request<Occurrence>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the project. Should be of the form "projects/{project_id}". @Deprecated */
                name?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** This field contains the project Id for example: "projects/{project_id}" */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Occurrence): Request<Occurrence>;
            /** Deletes the given `Occurrence` from the system. Use this when an `Occurrence` is no longer applicable for the given resource. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the occurrence in the form of "projects/{project_id}/occurrences/{OCCURRENCE_ID}" */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<{}>;
            /** Returns the requested `Occurrence`. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the occurrence of the form "projects/{project_id}/occurrences/{OCCURRENCE_ID}" */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Occurrence>;
            /**
             * Gets the access control policy for a note or an `Occurrence` resource. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if
             * the resource is a note or occurrence, respectively. Attempting to call this method on a resource without the required permission will result in a `PERMISSION_DENIED` error.
             * Attempting to call this method on a non-existent resource will result in a `NOT_FOUND` error if the user has list permission on the project, or a `PERMISSION_DENIED` error
             * otherwise. The resource takes the following formats: `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for occurrences and projects/{PROJECT_ID}/notes/{NOTE_ID} for notes
             */
            getIamPolicy(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** REQUIRED: The resource for which the policy is being requested. See the operation documentation for the appropriate value for this field. */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: GetIamPolicyRequest): Request<Policy>;
            /** Gets the `Note` attached to the given `Occurrence`. */
            getNotes(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the occurrence in the form "projects/{project_id}/occurrences/{OCCURRENCE_ID}" */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Note>;
            /** Gets a summary of the number and severity of occurrences. */
            getVulnerabilitySummary(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The filter expression. */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** This contains the project Id for example: projects/{project_id} */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<GetVulnzOccurrencesSummaryResponse>;
            /** Lists active `Occurrences` for a given project matching the filters. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The filter expression. */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The kind of occurrences to filter on. */
                kind?: string;
                /** The name field contains the project Id. For example: "projects/{project_id} @Deprecated */
                name?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Number of occurrences to return in the list. */
                pageSize?: number;
                /** Token to provide to skip to a particular spot in the list. */
                pageToken?: string;
                /** This contains the project Id for example: projects/{project_id}. */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListOccurrencesResponse>;
            /** Updates an existing occurrence. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the occurrence. Should be of the form "projects/{project_id}/occurrences/{OCCURRENCE_ID}". */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The fields to update. */
                updateMask?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Occurrence;
            }): Request<Occurrence>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the occurrence. Should be of the form "projects/{project_id}/occurrences/{OCCURRENCE_ID}". */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The fields to update. */
                updateMask?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Occurrence): Request<Occurrence>;
            /**
             * Sets the access control policy on the specified `Note` or `Occurrence`. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if
             * the resource is a `Note` or an `Occurrence`, respectively. Attempting to call this method without these permissions will result in a ` `PERMISSION_DENIED` error. Attempting to call
             * this method on a non-existent resource will result in a `NOT_FOUND` error if the user has `containeranalysis.notes.list` permission on a `Note` or
             * `containeranalysis.occurrences.list` on an `Occurrence`, or a `PERMISSION_DENIED` error otherwise. The resource takes the following formats:
             * `projects/{projectid}/occurrences/{occurrenceid}` for occurrences and projects/{projectid}/notes/{noteid} for notes
             */
            setIamPolicy(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** REQUIRED: The resource for which the policy is being specified. See the operation documentation for the appropriate value for this field. */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: SetIamPolicyRequest): Request<Policy>;
            /**
             * Returns the permissions that a caller has on the specified note or occurrence resource. Requires list permission on the project (for example, "storage.objects.list" on the
             * containing bucket for testing permission of an object). Attempting to call this method on a non-existent resource will result in a `NOT_FOUND` error if the user has list permission
             * on the project, or a `PERMISSION_DENIED` error otherwise. The resource takes the following formats: `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for `Occurrences` and
             * `projects/{PROJECT_ID}/notes/{NOTE_ID}` for `Notes`
             */
            testIamPermissions(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** REQUIRED: The resource for which the policy detail is being requested. See the operation documentation for the appropriate value for this field. */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: TestIamPermissionsRequest): Request<TestIamPermissionsResponse>;
        }
        interface OperationsResource {
            /** Creates a new `Operation`. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The project Id that this operation should be created under. */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: CreateOperationRequest;
            }): Request<Operation>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The project Id that this operation should be created under. */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: CreateOperationRequest): Request<Operation>;
            /** Updates an existing operation returns an error if operation does not exist. The only valid operations are to update mark the done bit change the result. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the Operation. Should be of the form "projects/{provider_id}/operations/{operation_id}". */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: UpdateOperationRequest;
            }): Request<Operation>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the Operation. Should be of the form "projects/{provider_id}/operations/{operation_id}". */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: UpdateOperationRequest): Request<Operation>;
        }
        interface ScanConfigsResource {
            /** Gets a specific scan configuration for a project. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the ScanConfig in the form projects/{project_id}/scanConfigs/{scan_config_id} */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ScanConfig>;
            /** Lists scan configurations for a project. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The filter expression. */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The number of items to return. */
                pageSize?: number;
                /** The page token to use for the next request. */
                pageToken?: string;
                /** This containers the project Id i.e.: projects/{project_id} */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListScanConfigsResponse>;
            /** Updates the scan configuration to a new value. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The scan config to update of the form projects/{project_id}/scanConfigs/{scan_config_id}. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The fields to update. */
                updateMask?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: ScanConfig;
            }): Request<ScanConfig>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The scan config to update of the form projects/{project_id}/scanConfigs/{scan_config_id}. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The fields to update. */
                updateMask?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: ScanConfig): Request<ScanConfig>;
        }
        interface ProjectsResource {
            notes: NotesResource;
            occurrences: OccurrencesResource;
            operations: OperationsResource;
            scanConfigs: ScanConfigsResource;
        }
        interface OccurrencesResource {
            /** Lists `Occurrences` referencing the specified `Note`. Use this method to get all occurrences referencing your `Note` across all your customer projects. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The filter expression. */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name field will contain the note name for example: "provider/{provider_id}/notes/{note_id}" */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Number of notes to return in the list. */
                pageSize?: number;
                /** Token to provide to skip to a particular spot in the list. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListNoteOccurrencesResponse>;
        }
        interface NotesResource {
            /** Creates a new `Note`. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the project. Should be of the form "providers/{provider_id}". @Deprecated */
                name: string;
                /** The ID to use for this note. */
                noteId?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** This field contains the project Id for example: "projects/{project_id} */
                parent?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Note;
            }): Request<Note>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the project. Should be of the form "providers/{provider_id}". @Deprecated */
                name: string;
                /** The ID to use for this note. */
                noteId?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** This field contains the project Id for example: "projects/{project_id} */
                parent?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Note): Request<Note>;
            /** Deletes the given `Note` from the system. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the note in the form of "providers/{provider_id}/notes/{NOTE_ID}" */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<{}>;
            /** Returns the requested `Note`. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the note in the form of "providers/{provider_id}/notes/{NOTE_ID}" */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Note>;
            /**
             * Gets the access control policy for a note or an `Occurrence` resource. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if
             * the resource is a note or occurrence, respectively. Attempting to call this method on a resource without the required permission will result in a `PERMISSION_DENIED` error.
             * Attempting to call this method on a non-existent resource will result in a `NOT_FOUND` error if the user has list permission on the project, or a `PERMISSION_DENIED` error
             * otherwise. The resource takes the following formats: `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for occurrences and projects/{PROJECT_ID}/notes/{NOTE_ID} for notes
             */
            getIamPolicy(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** REQUIRED: The resource for which the policy is being requested. See the operation documentation for the appropriate value for this field. */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: GetIamPolicyRequest): Request<Policy>;
            /** Lists all `Notes` for a given project. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The filter expression. */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name field will contain the project Id for example: "providers/{provider_id} @Deprecated */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Number of notes to return in the list. */
                pageSize?: number;
                /** Token to provide to skip to a particular spot in the list. */
                pageToken?: string;
                /** This field contains the project Id for example: "projects/{PROJECT_ID}". */
                parent?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListNotesResponse>;
            /** Updates an existing `Note`. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the note. Should be of the form "projects/{provider_id}/notes/{note_id}". */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The fields to update. */
                updateMask?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Note;
            }): Request<Note>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the note. Should be of the form "projects/{provider_id}/notes/{note_id}". */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The fields to update. */
                updateMask?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Note): Request<Note>;
            /**
             * Sets the access control policy on the specified `Note` or `Occurrence`. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if
             * the resource is a `Note` or an `Occurrence`, respectively. Attempting to call this method without these permissions will result in a ` `PERMISSION_DENIED` error. Attempting to call
             * this method on a non-existent resource will result in a `NOT_FOUND` error if the user has `containeranalysis.notes.list` permission on a `Note` or
             * `containeranalysis.occurrences.list` on an `Occurrence`, or a `PERMISSION_DENIED` error otherwise. The resource takes the following formats:
             * `projects/{projectid}/occurrences/{occurrenceid}` for occurrences and projects/{projectid}/notes/{noteid} for notes
             */
            setIamPolicy(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** REQUIRED: The resource for which the policy is being specified. See the operation documentation for the appropriate value for this field. */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: SetIamPolicyRequest): Request<Policy>;
            /**
             * Returns the permissions that a caller has on the specified note or occurrence resource. Requires list permission on the project (for example, "storage.objects.list" on the
             * containing bucket for testing permission of an object). Attempting to call this method on a non-existent resource will result in a `NOT_FOUND` error if the user has list permission
             * on the project, or a `PERMISSION_DENIED` error otherwise. The resource takes the following formats: `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for `Occurrences` and
             * `projects/{PROJECT_ID}/notes/{NOTE_ID}` for `Notes`
             */
            testIamPermissions(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** REQUIRED: The resource for which the policy detail is being requested. See the operation documentation for the appropriate value for this field. */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: TestIamPermissionsRequest): Request<TestIamPermissionsResponse>;
            occurrences: OccurrencesResource;
        }
        interface ProvidersResource {
            notes: NotesResource;
        }

        const projects: ProjectsResource;

        const providers: ProvidersResource;
    }
}
