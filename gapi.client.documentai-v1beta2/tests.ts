/* This is stub file for gapi.client.documentai-v1beta2 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20240417

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://documentai.googleapis.com/$discovery/rest?version=v1beta2'
  );
  /** now we can use gapi.client.documentai */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
    'https://www.googleapis.com/auth/cloud-platform',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** LRO endpoint to batch process many documents. The output is written to Cloud Storage as JSON in the [Document] format. */
    await gapi.client.documentai.projects.documents.batchProcess(
      {
        parent: 'Test string',
      },
      {
        requests: [
          {
            automlParams: {
              model: 'Test string',
            },
            documentType: 'Test string',
            entityExtractionParams: {
              enabled: true,
              modelVersion: 'Test string',
            },
            formExtractionParams: {
              enabled: true,
              keyValuePairHints: [
                {
                  key: 'Test string',
                  valueTypes: ['Test string'],
                },
              ],
              modelVersion: 'Test string',
            },
            inputConfig: {
              contents: 'Test string',
              gcsSource: {
                uri: 'Test string',
              },
              mimeType: 'Test string',
            },
            ocrParams: {
              languageHints: ['Test string'],
            },
            outputConfig: {
              gcsDestination: {
                uri: 'Test string',
              },
              pagesPerShard: 42,
            },
            parent: 'Test string',
            tableExtractionParams: {
              enabled: true,
              headerHints: ['Test string'],
              modelVersion: 'Test string',
              tableBoundHints: [
                {
                  boundingBox: {
                    normalizedVertices: [
                      {
                        x: 42,
                        y: 42,
                      },
                    ],
                    vertices: [
                      {
                        x: 42,
                        y: 42,
                      },
                    ],
                  },
                  pageNumber: 42,
                },
              ],
            },
          },
        ],
      }
    );
    /** Processes a single document. */
    await gapi.client.documentai.projects.documents.process(
      {
        parent: 'Test string',
      },
      {
        automlParams: {
          model: 'Test string',
        },
        documentType: 'Test string',
        entityExtractionParams: {
          enabled: true,
          modelVersion: 'Test string',
        },
        formExtractionParams: {
          enabled: true,
          keyValuePairHints: [
            {
              key: 'Test string',
              valueTypes: ['Test string'],
            },
          ],
          modelVersion: 'Test string',
        },
        inputConfig: {
          contents: 'Test string',
          gcsSource: {
            uri: 'Test string',
          },
          mimeType: 'Test string',
        },
        ocrParams: {
          languageHints: ['Test string'],
        },
        outputConfig: {
          gcsDestination: {
            uri: 'Test string',
          },
          pagesPerShard: 42,
        },
        parent: 'Test string',
        tableExtractionParams: {
          enabled: true,
          headerHints: ['Test string'],
          modelVersion: 'Test string',
          tableBoundHints: [
            {
              boundingBox: {
                normalizedVertices: [
                  {
                    x: 42,
                    y: 42,
                  },
                ],
                vertices: [
                  {
                    x: 42,
                    y: 42,
                  },
                ],
              },
              pageNumber: 42,
            },
          ],
        },
      }
    );
    /** LRO endpoint to batch process many documents. The output is written to Cloud Storage as JSON in the [Document] format. */
    await gapi.client.documentai.projects.locations.documents.batchProcess(
      {
        parent: 'Test string',
      },
      {
        requests: [
          {
            automlParams: {
              model: 'Test string',
            },
            documentType: 'Test string',
            entityExtractionParams: {
              enabled: true,
              modelVersion: 'Test string',
            },
            formExtractionParams: {
              enabled: true,
              keyValuePairHints: [
                {
                  key: 'Test string',
                  valueTypes: ['Test string'],
                },
              ],
              modelVersion: 'Test string',
            },
            inputConfig: {
              contents: 'Test string',
              gcsSource: {
                uri: 'Test string',
              },
              mimeType: 'Test string',
            },
            ocrParams: {
              languageHints: ['Test string'],
            },
            outputConfig: {
              gcsDestination: {
                uri: 'Test string',
              },
              pagesPerShard: 42,
            },
            parent: 'Test string',
            tableExtractionParams: {
              enabled: true,
              headerHints: ['Test string'],
              modelVersion: 'Test string',
              tableBoundHints: [
                {
                  boundingBox: {
                    normalizedVertices: [
                      {
                        x: 42,
                        y: 42,
                      },
                    ],
                    vertices: [
                      {
                        x: 42,
                        y: 42,
                      },
                    ],
                  },
                  pageNumber: 42,
                },
              ],
            },
          },
        ],
      }
    );
    /** Processes a single document. */
    await gapi.client.documentai.projects.locations.documents.process(
      {
        parent: 'Test string',
      },
      {
        automlParams: {
          model: 'Test string',
        },
        documentType: 'Test string',
        entityExtractionParams: {
          enabled: true,
          modelVersion: 'Test string',
        },
        formExtractionParams: {
          enabled: true,
          keyValuePairHints: [
            {
              key: 'Test string',
              valueTypes: ['Test string'],
            },
          ],
          modelVersion: 'Test string',
        },
        inputConfig: {
          contents: 'Test string',
          gcsSource: {
            uri: 'Test string',
          },
          mimeType: 'Test string',
        },
        ocrParams: {
          languageHints: ['Test string'],
        },
        outputConfig: {
          gcsDestination: {
            uri: 'Test string',
          },
          pagesPerShard: 42,
        },
        parent: 'Test string',
        tableExtractionParams: {
          enabled: true,
          headerHints: ['Test string'],
          modelVersion: 'Test string',
          tableBoundHints: [
            {
              boundingBox: {
                normalizedVertices: [
                  {
                    x: 42,
                    y: 42,
                  },
                ],
                vertices: [
                  {
                    x: 42,
                    y: 42,
                  },
                ],
              },
              pageNumber: 42,
            },
          ],
        },
      }
    );
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.documentai.projects.locations.operations.get({
      name: 'Test string',
    });
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.documentai.projects.operations.get({
      name: 'Test string',
    });
  }
});
