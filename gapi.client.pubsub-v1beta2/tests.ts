/* This is stub file for gapi.client.pubsub-v1beta2 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20231024

gapi.load('client', async () => {
    /** now we can use gapi.client */

    await gapi.client.load('https://pubsub.googleapis.com/$discovery/rest?version=v1beta2');
    /** now we can use gapi.client.pubsub */

    /** don't forget to authenticate your client before sending any request to resources: */
    /** declare client_id registered in Google Developers Console */
    const client_id = '<<PUT YOUR CLIENT ID HERE>>';
    const scope = [
        /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
        'https://www.googleapis.com/auth/cloud-platform',
        /** View and manage Pub/Sub topics and subscriptions */
        'https://www.googleapis.com/auth/pubsub',
    ];
    const immediate = false;
    gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
        if (authResult && !authResult.error) {
            /** handle successful authorization */
            run();
        } else {
            /** handle authorization error */
        }
    });

    async function run() {
        /**
         * Acknowledges the messages associated with the `ack_ids` in the `AcknowledgeRequest`. The Pub/Sub system can remove the relevant messages from the subscription. Acknowledging a message
         * whose ack deadline has expired may succeed, but such a message may be redelivered later. Acknowledging a message more than once will not result in an error.
         */
        await gapi.client.pubsub.projects.subscriptions.acknowledge({
            subscription: "Test string",
        }, {
            ackIds: [
                "Test string"
            ],
        });
        /**
         * Creates a subscription to a given topic. If the subscription already exists, returns `ALREADY_EXISTS`. If the corresponding topic doesn't exist, returns `NOT_FOUND`. If the name is not
         * provided in the request, the server will assign a random name for this subscription on the same project as the topic. Note that for REST API requests, you must specify a name.
         */
        await gapi.client.pubsub.projects.subscriptions.create({
            name: "Test string",
        }, {
            ackDeadlineSeconds: 42,
            name: "Test string",
            pushConfig: {
                attributes: {
                    A: "Test string"
                },
                oidcToken: {
                    audience: "Test string",
                    serviceAccountEmail: "Test string",
                },
                pushEndpoint: "Test string",
            },
            topic: "Test string",
        });
        /**
         * Deletes an existing subscription. All pending messages in the subscription are immediately dropped. Calls to `Pull` after deletion will return `NOT_FOUND`. After a subscription is
         * deleted, a new one may be created with the same name, but the new one has no association with the old subscription, or its topic unless the same topic is specified.
         */
        await gapi.client.pubsub.projects.subscriptions.delete({
            subscription: "Test string",
        });
        /** Gets the configuration details of a subscription. */
        await gapi.client.pubsub.projects.subscriptions.get({
            subscription: "Test string",
        });
        /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
        await gapi.client.pubsub.projects.subscriptions.getIamPolicy({
            "options.requestedPolicyVersion": 42,
            resource: "Test string",
        });
        /** Lists matching subscriptions. */
        await gapi.client.pubsub.projects.subscriptions.list({
            pageSize: 42,
            pageToken: "Test string",
            project: "Test string",
        });
        /**
         * Modifies the ack deadline for a specific message. This method is useful to indicate that more time is needed to process a message by the subscriber, or to make the message available for
         * redelivery if the processing was interrupted. Note that this does not modify the subscription-level `ackDeadlineSeconds` used for subsequent messages.
         */
        await gapi.client.pubsub.projects.subscriptions.modifyAckDeadline({
            subscription: "Test string",
        }, {
            ackDeadlineSeconds: 42,
            ackId: "Test string",
            ackIds: [
                "Test string"
            ],
        });
        /**
         * Modifies the `PushConfig` for a specified subscription. This may be used to change a push subscription to a pull one (signified by an empty `PushConfig`) or vice versa, or change the
         * endpoint URL and other attributes of a push subscription. Messages will accumulate for delivery continuously through the call regardless of changes to the `PushConfig`.
         */
        await gapi.client.pubsub.projects.subscriptions.modifyPushConfig({
            subscription: "Test string",
        }, {
            pushConfig: {
                attributes: {
                    A: "Test string"
                },
                oidcToken: {
                    audience: "Test string",
                    serviceAccountEmail: "Test string",
                },
                pushEndpoint: "Test string",
            },
        });
        /**
         * Pulls messages from the server. Returns an empty list if there are no messages available in the backlog. The server may return `UNAVAILABLE` if there are too many concurrent pull
         * requests pending for the given subscription.
         */
        await gapi.client.pubsub.projects.subscriptions.pull({
            subscription: "Test string",
        }, {
            maxMessages: 42,
            returnImmediately: true,
        });
        /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
        await gapi.client.pubsub.projects.subscriptions.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"
                        ],
                        role: "Test string",
                    }
                ],
                etag: "Test string",
                version: 42,
            },
        });
        /**
         * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This
         * operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
         */
        await gapi.client.pubsub.projects.subscriptions.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"
            ],
        });
        /** Creates the given topic with the given name. */
        await gapi.client.pubsub.projects.topics.create({
            name: "Test string",
        }, {
            name: "Test string",
        });
        /**
         * Deletes the topic with the given name. Returns `NOT_FOUND` if the topic does not exist. After a topic is deleted, a new topic may be created with the same name; this is an entirely new
         * topic with none of the old configuration or subscriptions. Existing subscriptions to this topic are not deleted, but their `topic` field is set to `_deleted-topic_`.
         */
        await gapi.client.pubsub.projects.topics.delete({
            topic: "Test string",
        });
        /** Gets the configuration of a topic. */
        await gapi.client.pubsub.projects.topics.get({
            topic: "Test string",
        });
        /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
        await gapi.client.pubsub.projects.topics.getIamPolicy({
            "options.requestedPolicyVersion": 42,
            resource: "Test string",
        });
        /** Lists matching topics. */
        await gapi.client.pubsub.projects.topics.list({
            pageSize: 42,
            pageToken: "Test string",
            project: "Test string",
        });
        /**
         * Adds one or more messages to the topic. Returns `NOT_FOUND` if the topic does not exist. The message payload must not be empty; it must contain either a non-empty data field, or at
         * least one attribute.
         */
        await gapi.client.pubsub.projects.topics.publish({
            topic: "Test string",
        }, {
            messages: [
                {
                    attributes: {
                        A: "Test string"
                    },
                    data: "Test string",
                    messageId: "Test string",
                    publishTime: "Test string",
                }
            ],
        });
        /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
        await gapi.client.pubsub.projects.topics.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"
                        ],
                        role: "Test string",
                    }
                ],
                etag: "Test string",
                version: 42,
            },
        });
        /**
         * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This
         * operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
         */
        await gapi.client.pubsub.projects.topics.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"
            ],
        });
        /** Lists the name of the subscriptions for this topic. */
        await gapi.client.pubsub.projects.topics.subscriptions.list({
            pageSize: 42,
            pageToken: "Test string",
            topic: "Test string",
        });
    }
});
