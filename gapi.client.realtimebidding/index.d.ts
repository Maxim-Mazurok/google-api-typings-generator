// Type definitions for non-npm package Real-time Bidding API v1 1.0
// Project: https://developers.google.com/authorized-buyers/apis/realtimebidding/reference/rest/
// Definitions by: Maxim Mazurok <https://github.com/Maxim-Mazurok>
//                 Google API Typings Generator <https://github.com/google-api-typings-generator>
//                 Nick Amoscato <https://github.com/namoscato>
//                 Declan Vong <https://github.com/declanvong>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 2.8

// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
// Generated from: https://realtimebidding.googleapis.com/$discovery/rest?version=v1
// Revision: 20200817

/// <reference types="gapi.client" />

declare namespace gapi.client {
    /** Load Real-time Bidding API v1 */
    function load(name: "realtimebidding", version: "v1"): PromiseLike<void>;
    function load(name: "realtimebidding", version: "v1", callback: () => any): void;

    namespace realtimebidding {
        interface AdTechnologyProviders {
            /**
             * The detected ad technology provider IDs for this creative. See https://storage.googleapis.com/adx-rtb-dictionaries/providers.csv for mapping of provider ID to provided name, a
             * privacy policy URL, and a list of domains which can be attributed to the provider. If the creative contains provider IDs that are outside of those listed in the
             * `BidRequest.adslot.consented_providers_settings.consented_providers` field on the [Google bid
             * protocol](https://developers.google.com/authorized-buyers/rtb/downloads/realtime-bidding-proto) and the `BidRequest.user.ext.consented_providers_settings.consented_providers` field
             * on the [OpenRTB protocol](https://developers.google.com/authorized-buyers/rtb/downloads/openrtb-adx-proto), and a bid is submitted with that creative for an impression that will
             * serve to an EEA user, the bid will be filtered before the auction.
             */
            detectedProviderIds?: string[];
            /**
             * Whether the creative contains an unidentified ad technology provider. If true for a given creative, any bid submitted with that creative for an impression that will serve to an EEA
             * user will be filtered before the auction.
             */
            hasUnidentifiedProvider?: boolean;
        }
        interface AdvertiserAndBrand {
            /** See https://storage.googleapis.com/adx-rtb-dictionaries/advertisers.txt for the list of possible values. Can be used to filter the response of the creatives.list method. */
            advertiserId?: string;
            /** Advertiser name. Can be used to filter the response of the creatives.list method. */
            advertiserName?: string;
            /**
             * Detected brand ID or zero if no brand has been detected. See https://storage.googleapis.com/adx-rtb-dictionaries/brands.txt for the list of possible values. Can be used to filter
             * the response of the creatives.list method.
             */
            brandId?: string;
            /** Brand name. Can be used to filter the response of the creatives.list method. */
            brandName?: string;
        }
        // tslint:disable-next-line:no-empty-interface
        interface CloseUserListRequest {
        }
        interface Creative {
            /** Output only. ID of the buyer account that this creative is owned by. Can be used to filter the response of the creatives.list method with equality and inequality check. */
            accountId?: string;
            /** The link to AdChoices destination page. This is only supported for native ads. */
            adChoicesDestinationUrl?: string;
            /** The name of the company being advertised in the creative. Can be used to filter the response of the creatives.list method. */
            advertiserName?: string;
            /** The agency ID for this creative. */
            agencyId?: string;
            /** Output only. The last update timestamp of the creative via API. */
            apiUpdateTime?: string;
            /** Output only. The format of this creative. Can be used to filter the response of the creatives.list method. */
            creativeFormat?: string;
            /**
             * Buyer-specific creative ID that references this creative in bid responses. This field is Ignored in update operations. Can be used to filter the response of the creatives.list
             * method. The maximum length of the creative ID is 128 bytes.
             */
            creativeId?: string;
            /**
             * Output only. Top level status and detected attributes of a creative (for example domain, language, advertiser, product category, etc.) that affect whether (status) and where
             * (context) a creative will be allowed to serve.
             */
            creativeServingDecision?: CreativeServingDecision;
            /** Output only. IDs of all of the deals with which this creative has been used in bidding. Can be used to filter the response of the creatives.list method. */
            dealIds?: string[];
            /**
             * All declared attributes for the ads that may be shown from this creative. Can be used to filter the response of the creatives.list method. If the `excluded_attribute` field of a
             * [bid request](https://developers.google.com/authorized-buyers/rtb/downloads/realtime-bidding-proto") contains one of the attributes that were declared or detected for a given
             * creative, and a bid is submitted with that creative, the bid will be filtered before the auction.
             */
            declaredAttributes?: string[];
            /** The set of declared destination URLs for the creative. Can be used to filter the response of the creatives.list method. */
            declaredClickThroughUrls?: string[];
            /** All declared restricted categories for the ads that may be shown from this creative. Can be used to filter the response of the creatives.list method. */
            declaredRestrictedCategories?: string[];
            /**
             * IDs for the declared ad technology vendors that may be used by this creative. See https://storage.googleapis.com/adx-rtb-dictionaries/vendors.txt for possible values. Can be used to
             * filter the response of the creatives.list method.
             */
            declaredVendorIds?: number[];
            /** An HTML creative. */
            html?: HtmlContent;
            /** The set of URLs to be called to record an impression. */
            impressionTrackingUrls?: string[];
            /**
             * Output only. Name of the creative. Follows the pattern `buyers/{buyer}/creatives/{creative}`, where `{buyer}` represents the account ID of the buyer who owns the creative, and
             * `{creative}` is the buyer-specific creative ID that references this creative in the bid response.
             */
            name?: string;
            /** A native creative. */
            native?: NativeContent;
            /** All restricted categories for the ads that may be shown from this creative. */
            restrictedCategories?: string[];
            /** Output only. The version of this creative. Version for a new creative is 1 and it increments during subsequent creative updates. */
            version?: number;
            /** A video creative. */
            video?: VideoContent;
        }
        interface CreativeServingDecision {
            /** The detected ad technology providers. */
            adTechnologyProviders?: AdTechnologyProviders;
            /**
             * The serving status of this creative in China. When approved or disapproved, this status applies to both deals and open auction in China. When pending review, this creative is
             * allowed to serve for deals but not for open auction.
             */
            chinaServingStatus?: ServingStatus;
            /** Status of this creative when bidding on PG and PD deals (outside of Russia and China). */
            dealsServingStatus?: ServingStatus;
            /** Detected advertisers and brands. */
            detectedAdvertisers?: AdvertiserAndBrand[];
            /**
             * Publisher-excludable attributes that were detected for this creative. Can be used to filter the response of the creatives.list method. If the `excluded_attribute` field of a [bid
             * request](https://developers.google.com/authorized-buyers/rtb/downloads/realtime-bidding-proto) contains one of the attributes that were declared or detected for a given creative,
             * and a bid is submitted with that creative, the bid will be filtered before the auction.
             */
            detectedAttributes?: string[];
            /** The set of detected destination URLs for the creative. Can be used to filter the response of the creatives.list method. */
            detectedClickThroughUrls?: string[];
            /** The detected domains for this creative. */
            detectedDomains?: string[];
            /**
             * The detected languages for this creative. The order is arbitrary. The codes are 2 or 5 characters and are documented at
             * https://developers.google.com/adwords/api/docs/appendix/languagecodes. Can be used to filter the response of the creatives.list method.
             */
            detectedLanguages?: string[];
            /**
             * Detected product categories, if any. See the ad-product-categories.txt file in the technical documentation for a list of IDs. Can be used to filter the response of the
             * creatives.list method.
             */
            detectedProductCategories?: number[];
            /**
             * Detected sensitive categories, if any. Can be used to filter the response of the creatives.list method. See the ad-sensitive-categories.txt file in the technical documentation for a
             * list of IDs. You should use these IDs along with the excluded-sensitive-category field in the bid request to filter your bids.
             */
            detectedSensitiveCategories?: number[];
            /**
             * IDs of the ad technology vendors that were detected to be used by this creative. See https://storage.googleapis.com/adx-rtb-dictionaries/vendors.txt for possible values. Can be used
             * to filter the response of the creatives.list method. If the `allowed_vendor_type` field of a [bid
             * request](https://developers.google.com/authorized-buyers/rtb/downloads/realtime-bidding-proto) does not contain one of the vendor type IDs that were declared or detected for a given
             * creative, and a bid is submitted with that creative, the bid will be filtered before the auction.
             */
            detectedVendorIds?: number[];
            /** The last time the creative status was updated. Can be used to filter the response of the creatives.list method. */
            lastStatusUpdate?: string;
            /** Status of this creative when bidding in open auction, private auction, or auction packages (outside of Russia and China). */
            openAuctionServingStatus?: ServingStatus;
            /**
             * The serving status of this creative in Russia. When approved or disapproved, this status applies to both deals and open auction in Russia. When pending review, this creative is
             * allowed to serve for deals but not for open auction.
             */
            russiaServingStatus?: ServingStatus;
        }
        interface Date {
            /** Day of month. Must be from 1 to 31 and valid for the year and month, or 0 if specifying a year by itself or a year and month where the day is not significant. */
            day?: number;
            /** Month of year. Must be from 1 to 12, or 0 if specifying a year without a month and day. */
            month?: number;
            /** Year of date. Must be from 1 to 9999, or 0 if specifying a date without a year. */
            year?: number;
        }
        interface DestinationNotCrawlableEvidence {
            /** Destination URL that was attempted to be crawled. */
            crawledUrl?: string;
            /** Approximate time of the crawl. */
            crawlTime?: string;
            /** Reason of destination not crawlable. */
            reason?: string;
        }
        interface DestinationNotWorkingEvidence {
            /** DNS lookup errors. */
            dnsError?: string;
            /** The full non-working URL. */
            expandedUrl?: string;
            /** HTTP error code (e.g. 404 or 5xx) */
            httpError?: number;
            /** Page was crawled successfully, but was detected as either a page with no content or an error page. */
            invalidPage?: string;
            /** Approximate time when the ad destination was last checked. */
            lastCheckTime?: string;
            /** Platform of the non-working URL. */
            platform?: string;
            /** HTTP redirect chain error. */
            redirectionError?: string;
            /** Rejected because of malformed URLs or invalid requests. */
            urlRejected?: string;
        }
        interface DestinationUrlEvidence {
            /** The full landing page URL of the destination. */
            destinationUrl?: string;
        }
        interface DomainCallEvidence {
            /** Breakdown of the most frequent domains called via HTTP by the creative. */
            topHttpCallDomains?: DomainCalls[];
            /** The total number of HTTP calls made by the creative, including but not limited to the number of calls in the top_http_call_domains. */
            totalHttpCallCount?: number;
        }
        interface DomainCalls {
            /** The domain name. */
            domain?: string;
            /** Number of HTTP calls made to the domain. */
            httpCallCount?: number;
        }
        interface DownloadSizeEvidence {
            /** Download size broken down by URLs with the top download size. */
            topUrlDownloadSizeBreakdowns?: UrlDownloadSize[];
            /** Total download size (in kilobytes) for all the resources in the creative. */
            totalDownloadSizeKb?: number;
        }
        interface GetRemarketingTagResponse {
            /**
             * A HTML tag that can be placed on the advertiser's page to add users to a user list. For more information and code samples on using snippet on your website refer to [Tag your site
             * for remarketing]( https://support.google.com/google-ads/answer/2476688).
             */
            snippet?: string;
        }
        interface HtmlContent {
            /** The height of the HTML snippet in pixels. Can be used to filter the response of the creatives.list method. */
            height?: number;
            /** The HTML snippet that displays the ad when inserted in the web page. */
            snippet?: string;
            /** The width of the HTML snippet in pixels. Can be used to filter the response of the creatives.list method. */
            width?: number;
        }
        interface HttpCallEvidence {
            /** URLs of HTTP calls made by the creative. */
            urls?: string[];
        }
        interface HttpCookieEvidence {
            /**
             * Names of cookies that violate Google policies. For TOO_MANY_COOKIES policy, this will be the cookie names of top domains with the largest number of cookies. For other policies, this
             * will be all the cookie names that violate the policy.
             */
            cookieNames?: string[];
            /**
             * The largest number of cookies set by a creative. If this field is set, cookie_names above will be set to the cookie names of top domains with the largest number of cookies. This
             * field will only be set for TOO_MANY_COOKIES policy.
             */
            maxCookieCount?: number;
        }
        // tslint:disable-next-line:interface-name
        interface Image {
            /** Image height in pixels. */
            height?: number;
            /** The URL of the image. */
            url?: string;
            /** Image width in pixels. */
            width?: number;
        }
        interface ListCreativesResponse {
            /** The list of creatives. */
            creatives?: Creative[];
            /**
             * A token to retrieve the next page of results. Pass this value in the ListCreativesRequest.pageToken field in the subsequent call to the `ListCreatives` method to retrieve the next
             * page of results.
             */
            nextPageToken?: string;
        }
        interface ListUserListsResponse {
            /**
             * The continuation page token to send back to the server in a subsequent request. Due to a currently known issue, it is recommended that the caller keep invoking the list method till
             * the time a next page token is not returned (even if the result set is empty).
             */
            nextPageToken?: string;
            /** List of user lists from the search. */
            userLists?: UserList[];
        }
        interface MediaFile {
            /** Bitrate of the video file, in Kbps. Can be used to filter the response of the creatives.list method. */
            bitrate?: string;
            /** The MIME type of this media file. Can be used to filter the response of the creatives.list method. */
            mimeType?: string;
        }
        interface NativeContent {
            /** The name of the advertiser or sponsor, to be displayed in the ad creative. */
            advertiserName?: string;
            /** The app icon, for app download ads. */
            appIcon?: Image;
            /** A long description of the ad. */
            body?: string;
            /** A label for the button that the user is supposed to click. */
            callToAction?: string;
            /** The URL that the browser/SDK will load when the user clicks the ad. */
            clickLinkUrl?: string;
            /** The URL to use for click tracking. */
            clickTrackingUrl?: string;
            /** A short title for the ad. */
            headline?: string;
            /** A large image. */
            image?: Image;
            /** A smaller image, for the advertiser's logo. */
            logo?: Image;
            /** The price of the promoted app including currency info. */
            priceDisplayText?: string;
            /** The app rating in the app store. Must be in the range [0-5]. */
            starRating?: number;
            /** The URL to fetch a native video ad. */
            videoUrl?: string;
        }
        // tslint:disable-next-line:no-empty-interface
        interface OpenUserListRequest {
        }
        interface PolicyTopicEntry {
            /** Pieces of evidence associated with this policy topic entry. */
            evidences?: PolicyTopicEvidence[];
            /** URL of the help center article describing this policy topic. */
            helpCenterUrl?: string;
            /**
             * Policy topic this entry refers to. For example, "ALCOHOL", "TRADEMARKS_IN_AD_TEXT", or "DESTINATION_NOT_WORKING". The set of possible policy topics is not fixed for a particular API
             * version and may change at any time. Can be used to filter the response of the creatives.list method
             */
            policyTopic?: string;
        }
        interface PolicyTopicEvidence {
            /** The creative's destination URL was not crawlable by Google. */
            destinationNotCrawlable?: DestinationNotCrawlableEvidence;
            /** The creative's destination URL did not function properly or was incorrectly set up. */
            destinationNotWorking?: DestinationNotWorkingEvidence;
            /** URL of the actual landing page. */
            destinationUrl?: DestinationUrlEvidence;
            /** Number of HTTP calls made by the creative, broken down by domain. */
            domainCall?: DomainCallEvidence;
            /** Total download size and URL-level download size breakdown for resources in a creative. */
            downloadSize?: DownloadSizeEvidence;
            /** HTTP calls made by the creative that resulted in policy violations. */
            httpCall?: HttpCallEvidence;
            /** Evidence for HTTP cookie-related policy violations. */
            httpCookie?: HttpCookieEvidence;
        }
        interface ServingStatus {
            /** Serving status for the given transaction type (e.g., open auction, deals) or region (e.g., China, Russia). Can be used to filter the response of the creatives.list method. */
            status?: string;
            /**
             * Policy topics related to the serving decision for this transaction type (e.g., open auction, deals) or region (e.g., China, Russia). Topics may be present only if status is
             * DISAPPROVED.
             */
            topics?: PolicyTopicEntry[];
        }
        interface UrlDownloadSize {
            /** Download size of the URL in kilobytes. */
            downloadSizeKb?: number;
            /** The normalized URL with query parameters and fragment removed. */
            normalizedUrl?: string;
        }
        interface UrlRestriction {
            /** End date (if specified) of the URL restriction. End date should be later than the start date for the date range to be valid. */
            endDate?: Date;
            /** The restriction type for the specified URL. */
            restrictionType?: string;
            /** Start date (if specified) of the URL restriction. */
            startDate?: Date;
            /** Required. The URL to use for applying the restriction on the user list. */
            url?: string;
        }
        interface UserList {
            /** The description for the user list. */
            description?: string;
            /** Required. Display name of the user list. This must be unique across all user lists for a given account. */
            displayName?: string;
            /** Required. The number of days a user's cookie stays on the user list. The field must be between 0 and 540 inclusive. */
            membershipDurationDays?: string;
            /**
             * Output only. Name of the user list that must follow the pattern `buyers/{buyer}/userLists/{user_list}`, where `{buyer}` represents the account ID of the buyer who owns the user
             * list. For a bidder accessing user lists on behalf of a child seat buyer, `{buyer}` represents the account ID of the child seat buyer. `{user_list}` is an int64 identifier assigned
             * by Google to uniquely identify a user list.
             */
            name?: string;
            /** Output only. The status of the user list. A new user list starts out as open. */
            status?: string;
            /** Required. The URL restriction for the user list. */
            urlRestriction?: UrlRestriction;
        }
        interface VideoContent {
            /** Output only. Video metadata. */
            videoMetadata?: VideoMetadata;
            /** The URL to fetch a video ad. */
            videoUrl?: string;
            /** The contents of a VAST document for a video ad. This document should conform to the VAST 2.0 or 3.0 standard. */
            videoVastXml?: string;
        }
        interface VideoMetadata {
            /** The duration of the ad. Can be used to filter the response of the creatives.list method. */
            duration?: string;
            /** Is this a valid VAST ad? Can be used to filter the response of the creatives.list method. */
            isValidVast?: boolean;
            /** Is this a VPAID ad? Can be used to filter the response of the creatives.list method. */
            isVpaid?: boolean;
            /** The list of all media files declared in the VAST. If there are multiple VASTs in a wrapper chain, this includes the media files from the deepest one in the chain. */
            mediaFiles?: MediaFile[];
            /**
             * The minimum duration that the user has to watch before being able to skip this ad. If the field is not set, the ad is not skippable. If the field is set, the ad is skippable. Can be
             * used to filter the response of the creatives.list method.
             */
            skipOffset?: string;
            /** The maximum VAST version across all wrapped VAST documents. Can be used to filter the response of the creatives.list method. */
            vastVersion?: string;
        }
        // tslint:disable-next-line:no-empty-interface
        interface WatchCreativesRequest {
        }
        interface WatchCreativesResponse {
            /**
             * The Pub/Sub subscription that can be used to pull creative status notifications. This would be of the format `projects/{project_id}/subscriptions/{subscription_id}`. Subscription is
             * created with pull delivery. All service accounts belonging to the bidder will have read access to this subscription. Subscriptions that are inactive for more than 90 days will be
             * disabled. Please use watchCreatives to re-enable the subscription.
             */
            subscription?: string;
            /** The Pub/Sub topic that will be used to publish creative serving status notifications. This would be of the format `projects/{project_id}/topics/{topic_id}`. */
            topic?: string;
        }
        interface CreativesResource {
            /** Lists creatives. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * Query string to filter creatives. If no filter is specified, all active creatives will be returned. Example: 'accountId=12345 AND (dealsStatus:DISAPPROVED AND
                 * disapprovalReason:UNACCEPTABLE_CONTENT) OR declaredAttributes:IS_COOKIE_TARGETED'
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Requested page size. The server may return fewer creatives than requested (due to timeout constraint) even if more are available via another call. If unspecified, server will
                 * pick an appropriate default. Acceptable values are 1 to 1000, inclusive.
                 */
                pageSize?: number;
                /**
                 * A token identifying a page of results the server should return. Typically, this is the value of ListCreativesResponse.nextPageToken returned from the previous call to the
                 * 'ListCreatives' method.
                 */
                pageToken?: string;
                /**
                 * Required. Name of the parent buyer that owns the creatives. The pattern for this resource is either `buyers/{buyerAccountId}` or `bidders/{bidderAccountId}`. For
                 * `buyers/{buyerAccountId}`, the `buyerAccountId` can be one of the following: 1. The ID of the buyer that is accessing their own creatives. 2. The ID of the child seat buyer
                 * under a bidder account. So for listing creatives pertaining to the child seat buyer (`456`) under bidder account (`123`), you would use the pattern: `buyers/456`. 3. The ID of
                 * the bidder itself. So for listing creatives pertaining to bidder (`123`), you would use `buyers/123`. If you want to access all creatives pertaining to both the bidder and all
                 * of its child seat accounts, you would use `bidders/{bidderAccountId}`, e.g., for all creatives pertaining to bidder (`123`), use `bidders/123`.
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /**
                 * Controls the amount of information included in the response. By default only creativeServingDecision is included. To retrieve the entire creative resource (including the
                 * declared fields and the creative content) specify the view as "FULL".
                 */
                view?: string;
            }): Request<ListCreativesResponse>;
            /**
             * Watches all creatives pertaining to a bidder. It is sufficient to invoke this endpoint once per bidder. A Pub/Sub topic will be created and notifications will be pushed to the topic
             * when any of the bidder's creatives change status. All of the bidder's service accounts will have access to read from the topic. Subsequent invocations of this method will return the
             * existing Pub/Sub configuration.
             */
            watch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. To watch all creatives pertaining to the bidder and all its child seat accounts, the bidder must follow the pattern `bidders/{bidderAccountId}`. */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: WatchCreativesRequest;
            }): Request<WatchCreativesResponse>;
            watch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. To watch all creatives pertaining to the bidder and all its child seat accounts, the bidder must follow the pattern `bidders/{bidderAccountId}`. */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: WatchCreativesRequest): Request<WatchCreativesResponse>;
        }
        interface BiddersResource {
            creatives: CreativesResource;
        }
        interface CreativesResource {
            /** Creates a creative. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Required. The name of the parent buyer that the new creative belongs to that must follow the pattern `buyers/{buyerAccountId}`, where `{buyerAccountId}` represents the account
                 * ID of the buyer who owns a creative. For a bidder accessing creatives on behalf of a child seat buyer, `{buyerAccountId}` should represent the account ID of the child seat
                 * buyer.
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Creative;
            }): Request<Creative>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Required. The name of the parent buyer that the new creative belongs to that must follow the pattern `buyers/{buyerAccountId}`, where `{buyerAccountId}` represents the account
                 * ID of the buyer who owns a creative. For a bidder accessing creatives on behalf of a child seat buyer, `{buyerAccountId}` should represent the account ID of the child seat
                 * buyer.
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Creative): Request<Creative>;
            /** Gets a creative. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Required. Name of the creative to retrieve. See creative.name. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /**
                 * Controls the amount of information included in the response. By default only creativeServingDecision is included. To retrieve the entire creative resource (including the
                 * declared fields and the creative content) specify the view as "FULL".
                 */
                view?: string;
            }): Request<Creative>;
            /** Lists creatives. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * Query string to filter creatives. If no filter is specified, all active creatives will be returned. Example: 'accountId=12345 AND (dealsStatus:DISAPPROVED AND
                 * disapprovalReason:UNACCEPTABLE_CONTENT) OR declaredAttributes:IS_COOKIE_TARGETED'
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Requested page size. The server may return fewer creatives than requested (due to timeout constraint) even if more are available via another call. If unspecified, server will
                 * pick an appropriate default. Acceptable values are 1 to 1000, inclusive.
                 */
                pageSize?: number;
                /**
                 * A token identifying a page of results the server should return. Typically, this is the value of ListCreativesResponse.nextPageToken returned from the previous call to the
                 * 'ListCreatives' method.
                 */
                pageToken?: string;
                /**
                 * Required. Name of the parent buyer that owns the creatives. The pattern for this resource is either `buyers/{buyerAccountId}` or `bidders/{bidderAccountId}`. For
                 * `buyers/{buyerAccountId}`, the `buyerAccountId` can be one of the following: 1. The ID of the buyer that is accessing their own creatives. 2. The ID of the child seat buyer
                 * under a bidder account. So for listing creatives pertaining to the child seat buyer (`456`) under bidder account (`123`), you would use the pattern: `buyers/456`. 3. The ID of
                 * the bidder itself. So for listing creatives pertaining to bidder (`123`), you would use `buyers/123`. If you want to access all creatives pertaining to both the bidder and all
                 * of its child seat accounts, you would use `bidders/{bidderAccountId}`, e.g., for all creatives pertaining to bidder (`123`), use `bidders/123`.
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /**
                 * Controls the amount of information included in the response. By default only creativeServingDecision is included. To retrieve the entire creative resource (including the
                 * declared fields and the creative content) specify the view as "FULL".
                 */
                view?: string;
            }): Request<ListCreativesResponse>;
            /** Updates a creative. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Name of the creative to update. See creative.name. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Field mask to use for partial in-place updates. */
                updateMask?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Creative;
            }): Request<Creative>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Name of the creative to update. See creative.name. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Field mask to use for partial in-place updates. */
                updateMask?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Creative): Request<Creative>;
        }
        interface UserListsResource {
            /** Change the status of a user list to CLOSED. This prevents new users from being added to the user list. */
            close(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Required. The name of the user list to close. See UserList.name */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: CloseUserListRequest;
            }): Request<UserList>;
            close(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Required. The name of the user list to close. See UserList.name */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: CloseUserListRequest): Request<UserList>;
            /** Create a new user list. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Required. The name of the parent buyer of the user list to be retrieved that must follow the pattern `buyers/{buyerAccountId}`, where `{buyerAccountId}` represents the account
                 * ID of the buyer who owns user lists. For a bidder accessing user lists on behalf of a child seat buyer , `{buyerAccountId}` should represent the account ID of the child seat
                 * buyer.
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: UserList;
            }): Request<UserList>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Required. The name of the parent buyer of the user list to be retrieved that must follow the pattern `buyers/{buyerAccountId}`, where `{buyerAccountId}` represents the account
                 * ID of the buyer who owns user lists. For a bidder accessing user lists on behalf of a child seat buyer , `{buyerAccountId}` should represent the account ID of the child seat
                 * buyer.
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: UserList): Request<UserList>;
            /** Gets a user list by its name. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Required. The name of the user list to be retrieved. See UserList.name. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<UserList>;
            /**
             * Gets remarketing tag for a buyer. A remarketing tag is a piece of JavaScript code that can be placed on a web page. When a user visits a page containing a remarketing tag, Google
             * adds the user to a user list.
             */
            getRemarketingTag(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * Required. To fetch remarketing tag for an account, name must follow the pattern `buyers/{accountId}` where `{accountId}` represents ID of a buyer that owns the remarketing tag.
                 * For a bidder accessing remarketing tag on behalf of a child seat buyer, `{accountId}` should represent the ID of the child seat buyer. To fetch remarketing tag for a specific
                 * user list, name must follow the pattern `buyers/{accountId}/userLists/{userListId}`. See UserList.name.
                 */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<GetRemarketingTagResponse>;
            /** Lists the user lists visible to the current user. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The number of results to return per page. */
                pageSize?: number;
                /** Continuation page token (as received from a previous response). */
                pageToken?: string;
                /**
                 * Required. The name of the parent buyer for the user lists to be returned that must follow the pattern `buyers/{buyerAccountId}`, where `{buyerAccountId}` represents the account
                 * ID of the buyer who owns user lists. For a bidder accessing user lists on behalf of a child seat buyer , `{buyerAccountId}` should represent the account ID of the child seat
                 * buyer.
                 */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListUserListsResponse>;
            /** Change the status of a user list to OPEN. This allows new users to be added to the user list. */
            open(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Required. The name of the user list to open. See UserList.name */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: OpenUserListRequest;
            }): Request<UserList>;
            open(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Required. The name of the user list to open. See UserList.name */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: OpenUserListRequest): Request<UserList>;
            /** Update the given user list. Only user lists with URLRestrictions can be updated. */
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * Output only. Name of the user list that must follow the pattern `buyers/{buyer}/userLists/{user_list}`, where `{buyer}` represents the account ID of the buyer who owns the user
                 * list. For a bidder accessing user lists on behalf of a child seat buyer, `{buyer}` represents the account ID of the child seat buyer. `{user_list}` is an int64 identifier
                 * assigned by Google to uniquely identify a user list.
                 */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: UserList;
            }): Request<UserList>;
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * Output only. Name of the user list that must follow the pattern `buyers/{buyer}/userLists/{user_list}`, where `{buyer}` represents the account ID of the buyer who owns the user
                 * list. For a bidder accessing user lists on behalf of a child seat buyer, `{buyer}` represents the account ID of the child seat buyer. `{user_list}` is an int64 identifier
                 * assigned by Google to uniquely identify a user list.
                 */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: UserList): Request<UserList>;
        }
        interface BuyersResource {
            /**
             * Gets remarketing tag for a buyer. A remarketing tag is a piece of JavaScript code that can be placed on a web page. When a user visits a page containing a remarketing tag, Google
             * adds the user to a user list.
             */
            getRemarketingTag(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * Required. To fetch remarketing tag for an account, name must follow the pattern `buyers/{accountId}` where `{accountId}` represents ID of a buyer that owns the remarketing tag.
                 * For a bidder accessing remarketing tag on behalf of a child seat buyer, `{accountId}` should represent the ID of the child seat buyer. To fetch remarketing tag for a specific
                 * user list, name must follow the pattern `buyers/{accountId}/userLists/{userListId}`. See UserList.name.
                 */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<GetRemarketingTagResponse>;
            creatives: CreativesResource;
            userLists: UserListsResource;
        }

        const bidders: BiddersResource;

        const buyers: BuyersResource;
    }
}
