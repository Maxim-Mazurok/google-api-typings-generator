/* This is stub file for gapi.client.analyticshub-v1beta1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20250315

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://analyticshub.googleapis.com/$discovery/rest?version=v1beta1',
  );
  /** now we can use gapi.client.analyticshub */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** View and manage your data in Google BigQuery and see the email address for your Google Account */
    'https://www.googleapis.com/auth/bigquery',
    /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
    'https://www.googleapis.com/auth/cloud-platform',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Lists all data exchanges from projects in a given organization and location. */
    await gapi.client.analyticshub.organizations.locations.dataExchanges.list({
      organization: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Creates a new data exchange. */
    await gapi.client.analyticshub.projects.locations.dataExchanges.create(
      {
        dataExchangeId: 'Test string',
        parent: 'Test string',
      },
      {
        description: 'Test string',
        displayName: 'Test string',
        documentation: 'Test string',
        icon: 'Test string',
        listingCount: 42,
        name: 'Test string',
        primaryContact: 'Test string',
      },
    );
    /** Deletes an existing data exchange. */
    await gapi.client.analyticshub.projects.locations.dataExchanges.delete({
      name: 'Test string',
    });
    /** Gets the details of a data exchange. */
    await gapi.client.analyticshub.projects.locations.dataExchanges.get({
      name: 'Test string',
    });
    /** Gets the IAM policy. */
    await gapi.client.analyticshub.projects.locations.dataExchanges.getIamPolicy(
      {
        resource: 'Test string',
      },
      {
        options: {
          requestedPolicyVersion: 42,
        },
      },
    );
    /** Lists all data exchanges in a given project and location. */
    await gapi.client.analyticshub.projects.locations.dataExchanges.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates an existing data exchange. */
    await gapi.client.analyticshub.projects.locations.dataExchanges.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        description: 'Test string',
        displayName: 'Test string',
        documentation: 'Test string',
        icon: 'Test string',
        listingCount: 42,
        name: 'Test string',
        primaryContact: 'Test string',
      },
    );
    /** Sets the IAM policy. */
    await gapi.client.analyticshub.projects.locations.dataExchanges.setIamPolicy(
      {
        resource: 'Test string',
      },
      {
        policy: {
          auditConfigs: [
            {
              auditLogConfigs: [
                {
                  exemptedMembers: ['Test string'],
                  logType: 'Test string',
                },
              ],
              service: 'Test string',
            },
          ],
          bindings: [
            {
              condition: {
                description: 'Test string',
                expression: 'Test string',
                location: 'Test string',
                title: 'Test string',
              },
              members: ['Test string'],
              role: 'Test string',
            },
          ],
          etag: 'Test string',
          version: 42,
        },
        updateMask: 'Test string',
      },
    );
    /** Returns the permissions that a caller has. */
    await gapi.client.analyticshub.projects.locations.dataExchanges.testIamPermissions(
      {
        resource: 'Test string',
      },
      {
        permissions: ['Test string'],
      },
    );
    /** Creates a new listing. */
    await gapi.client.analyticshub.projects.locations.dataExchanges.listings.create(
      {
        listingId: 'Test string',
        parent: 'Test string',
      },
      {
        bigqueryDataset: {
          dataset: 'Test string',
        },
        categories: ['Test string'],
        dataProvider: {
          name: 'Test string',
          primaryContact: 'Test string',
        },
        description: 'Test string',
        displayName: 'Test string',
        documentation: 'Test string',
        icon: 'Test string',
        name: 'Test string',
        primaryContact: 'Test string',
        publisher: {
          name: 'Test string',
          primaryContact: 'Test string',
        },
        requestAccess: 'Test string',
        restrictedExportConfig: {
          enabled: true,
          restrictDirectTableAccess: true,
          restrictQueryResult: true,
        },
        state: 'Test string',
      },
    );
    /** Deletes a listing. */
    await gapi.client.analyticshub.projects.locations.dataExchanges.listings.delete(
      {
        name: 'Test string',
      },
    );
    /** Gets the details of a listing. */
    await gapi.client.analyticshub.projects.locations.dataExchanges.listings.get(
      {
        name: 'Test string',
      },
    );
    /** Gets the IAM policy. */
    await gapi.client.analyticshub.projects.locations.dataExchanges.listings.getIamPolicy(
      {
        resource: 'Test string',
      },
      {
        options: {
          requestedPolicyVersion: 42,
        },
      },
    );
    /** Lists all listings in a given project and location. */
    await gapi.client.analyticshub.projects.locations.dataExchanges.listings.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
    /** Updates an existing listing. */
    await gapi.client.analyticshub.projects.locations.dataExchanges.listings.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        bigqueryDataset: {
          dataset: 'Test string',
        },
        categories: ['Test string'],
        dataProvider: {
          name: 'Test string',
          primaryContact: 'Test string',
        },
        description: 'Test string',
        displayName: 'Test string',
        documentation: 'Test string',
        icon: 'Test string',
        name: 'Test string',
        primaryContact: 'Test string',
        publisher: {
          name: 'Test string',
          primaryContact: 'Test string',
        },
        requestAccess: 'Test string',
        restrictedExportConfig: {
          enabled: true,
          restrictDirectTableAccess: true,
          restrictQueryResult: true,
        },
        state: 'Test string',
      },
    );
    /** Sets the IAM policy. */
    await gapi.client.analyticshub.projects.locations.dataExchanges.listings.setIamPolicy(
      {
        resource: 'Test string',
      },
      {
        policy: {
          auditConfigs: [
            {
              auditLogConfigs: [
                {
                  exemptedMembers: ['Test string'],
                  logType: 'Test string',
                },
              ],
              service: 'Test string',
            },
          ],
          bindings: [
            {
              condition: {
                description: 'Test string',
                expression: 'Test string',
                location: 'Test string',
                title: 'Test string',
              },
              members: ['Test string'],
              role: 'Test string',
            },
          ],
          etag: 'Test string',
          version: 42,
        },
        updateMask: 'Test string',
      },
    );
    /** Subscribes to a listing. Currently, with Analytics Hub, you can create listings that reference only BigQuery datasets. Upon subscription to a listing for a BigQuery dataset, Analytics Hub creates a linked dataset in the subscriber's project. */
    await gapi.client.analyticshub.projects.locations.dataExchanges.listings.subscribe(
      {
        name: 'Test string',
      },
      {
        destinationDataset: {
          datasetReference: {
            datasetId: 'Test string',
            projectId: 'Test string',
          },
          description: 'Test string',
          friendlyName: 'Test string',
          labels: {
            A: 'Test string',
          },
          location: 'Test string',
        },
      },
    );
    /** Returns the permissions that a caller has. */
    await gapi.client.analyticshub.projects.locations.dataExchanges.listings.testIamPermissions(
      {
        resource: 'Test string',
      },
      {
        permissions: ['Test string'],
      },
    );
  }
});
