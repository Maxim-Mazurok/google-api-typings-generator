// Type definitions for non-npm package Cloud Testing API v1 1.0
// Project: https://developers.google.com/cloud-test-lab/
// Definitions by: Maxim Mazurok <https://github.com/Maxim-Mazurok>
//                 Google API Typings Generator <https://github.com/google-api-typings-generator>
//                 Nick Amoscato <https://github.com/namoscato>
//                 Declan Vong <https://github.com/declanvong>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 2.8

// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
// Generated from: https://testing.googleapis.com/$discovery/rest?version=v1
// Revision: 20200820

/// <reference types="gapi.client" />

declare namespace gapi.client {
    /** Load Cloud Testing API v1 */
    function load(name: "testing", version: "v1"): PromiseLike<void>;
    function load(name: "testing", version: "v1", callback: () => any): void;

    namespace testing {
        interface Account {
            /** An automatic google login account. */
            googleAuto?: any;
        }
        interface AndroidDevice {
            /** Required. The id of the Android device to be used. Use the TestEnvironmentDiscoveryService to get supported options. */
            androidModelId?: string;
            /** Required. The id of the Android OS version to be used. Use the TestEnvironmentDiscoveryService to get supported options. */
            androidVersionId?: string;
            /** Required. The locale the test device used for testing. Use the TestEnvironmentDiscoveryService to get supported options. */
            locale?: string;
            /** Required. How the device is oriented during the test. Use the TestEnvironmentDiscoveryService to get supported options. */
            orientation?: string;
        }
        interface AndroidDeviceCatalog {
            /** The set of supported Android device models. */
            models?: AndroidModel[];
            /** The set of supported runtime configurations. */
            runtimeConfiguration?: AndroidRuntimeConfiguration;
            /** The set of supported Android OS versions. */
            versions?: AndroidVersion[];
        }
        interface AndroidDeviceList {
            /** Required. A list of Android devices. */
            androidDevices?: AndroidDevice[];
        }
        interface AndroidInstrumentationTest {
            /** The APK for the application under test. */
            appApk?: FileReference;
            /** A multi-apk app bundle for the application under test. */
            appBundle?: AppBundle;
            /** The java package for the application under test. The default value is determined by examining the application's manifest. */
            appPackageId?: string;
            /**
             * The option of whether running each test within its own invocation of instrumentation with Android Test Orchestrator or not. ** Orchestrator is only compatible with
             * AndroidJUnitRunner version 1.0 or higher! ** Orchestrator offers the following benefits: - No shared state - Crashes are isolated - Logs are scoped per test See for more information
             * about Android Test Orchestrator. If not set, the test will be run without the orchestrator.
             */
            orchestratorOption?: string;
            /** The option to run tests in multiple shards in parallel. */
            shardingOption?: ShardingOption;
            /** Required. The APK containing the test code to be executed. */
            testApk?: FileReference;
            /** The java package for the test to be executed. The default value is determined by examining the application's manifest. */
            testPackageId?: string;
            /** The InstrumentationTestRunner class. The default value is determined by examining the application's manifest. */
            testRunnerClass?: string;
            /**
             * Each target must be fully qualified with the package name or class name, in one of these formats: - "package package_name" - "class package_name.class_name" - "class
             * package_name.class_name#method_name" If empty, all targets in the module will be run.
             */
            testTargets?: string[];
        }
        interface AndroidMatrix {
            /** Required. The ids of the set of Android device to be used. Use the TestEnvironmentDiscoveryService to get supported options. */
            androidModelIds?: string[];
            /** Required. The ids of the set of Android OS version to be used. Use the TestEnvironmentDiscoveryService to get supported options. */
            androidVersionIds?: string[];
            /** Required. The set of locales the test device will enable for testing. Use the TestEnvironmentDiscoveryService to get supported options. */
            locales?: string[];
            /** Required. The set of orientations to test with. Use the TestEnvironmentDiscoveryService to get supported options. */
            orientations?: string[];
        }
        interface AndroidModel {
            /** The company that this device is branded with. Example: "Google", "Samsung". */
            brand?: string;
            /** The name of the industrial design. This corresponds to android.os.Build.DEVICE. */
            codename?: string;
            /** Whether this device is virtual or physical. */
            form?: string;
            /** Whether this device is a phone, tablet, wearable, etc. */
            formFactor?: string;
            /** The unique opaque id for this model. Use this for invoking the TestExecutionService. */
            id?: string;
            /** True if and only if tests with this model are recorded by stitching together screenshots. See use_low_spec_video_recording in device config. */
            lowFpsVideoRecording?: boolean;
            /** The manufacturer of this device. */
            manufacturer?: string;
            /** The human-readable marketing name for this device model. Examples: "Nexus 5", "Galaxy S5". */
            name?: string;
            /** Screen density in DPI. This corresponds to ro.sf.lcd_density */
            screenDensity?: number;
            /** Screen size in the horizontal (X) dimension measured in pixels. */
            screenX?: number;
            /** Screen size in the vertical (Y) dimension measured in pixels. */
            screenY?: number;
            /**
             * The list of supported ABIs for this device. This corresponds to either android.os.Build.SUPPORTED_ABIS (for API level 21 and above) or android.os.Build.CPU_ABI/CPU_ABI2. The most
             * preferred ABI is the first element in the list. Elements are optionally prefixed by "version_id:" (where version_id is the id of an AndroidVersion), denoting an ABI that is
             * supported only on a particular version.
             */
            supportedAbis?: string[];
            /** The set of Android versions this device supports. */
            supportedVersionIds?: string[];
            /** Tags for this dimension. Examples: "default", "preview", "deprecated". */
            tags?: string[];
            /** URL of a thumbnail image (photo) of the device. e.g. https://lh3.googleusercontent.com/90WcauuJiCYABEl8U0lcZeuS5STUbf2yW... */
            thumbnailUrl?: string;
        }
        interface AndroidRoboTest {
            /** The APK for the application under test. */
            appApk?: FileReference;
            /** A multi-apk app bundle for the application under test. */
            appBundle?: AppBundle;
            /** The initial activity that should be used to start the app. */
            appInitialActivity?: string;
            /** The java package for the application under test. The default value is determined by examining the application's manifest. */
            appPackageId?: string;
            /** The max depth of the traversal stack Robo can explore. Needs to be at least 2 to make Robo explore the app beyond the first activity. Default is 50. */
            maxDepth?: number;
            /** The max number of steps Robo can execute. Default is no limit. */
            maxSteps?: number;
            /** A set of directives Robo should apply during the crawl. This allows users to customize the crawl. For example, the username and password for a test account can be provided. */
            roboDirectives?: RoboDirective[];
            /** A JSON file with a sequence of actions Robo should perform as a prologue for the crawl. */
            roboScript?: FileReference;
            /**
             * The intents used to launch the app for the crawl. If none are provided, then the main launcher activity is launched. If some are provided, then only those provided are launched (the
             * main launcher activity must be provided explicitly).
             */
            startingIntents?: RoboStartingIntent[];
        }
        interface AndroidRuntimeConfiguration {
            /** The set of available locales. */
            locales?: Locale[];
            /** The set of available orientations. */
            orientations?: Orientation[];
        }
        interface AndroidTestLoop {
            /** The APK for the application under test. */
            appApk?: FileReference;
            /** A multi-apk app bundle for the application under test. */
            appBundle?: AppBundle;
            /** The java package for the application under test. The default is determined by examining the application's manifest. */
            appPackageId?: string;
            /**
             * The list of scenario labels that should be run during the test. The scenario labels should map to labels defined in the application's manifest. For example, player_experience and
             * com.google.test.loops.player_experience add all of the loops labeled in the manifest with the com.google.test.loops.player_experience name to the execution. Scenarios can also be
             * specified in the scenarios field.
             */
            scenarioLabels?: string[];
            /** The list of scenarios that should be run during the test. The default is all test loops, derived from the application's manifest. */
            scenarios?: number[];
        }
        interface AndroidVersion {
            /** The API level for this Android version. Examples: 18, 19. */
            apiLevel?: number;
            /** The code name for this Android version. Examples: "JellyBean", "KitKat". */
            codeName?: string;
            /** Market share for this version. */
            distribution?: Distribution;
            /** An opaque id for this Android version. Use this id to invoke the TestExecutionService. */
            id?: string;
            /** The date this Android version became available in the market. */
            releaseDate?: Date;
            /** Tags for this dimension. Examples: "default", "preview", "deprecated". */
            tags?: string[];
            /** A string representing this version of the Android OS. Examples: "4.3", "4.4". */
            versionString?: string;
        }
        interface Apk {
            /** The path to an APK to be installed on the device before the test begins. */
            location?: FileReference;
            /** The java package for the APK to be installed. Value is determined by examining the application's manifest. */
            packageName?: string;
        }
        interface ApkDetail {
            apkManifest?: ApkManifest;
        }
        interface ApkManifest {
            /** User-readable name for the application. */
            applicationLabel?: string;
            intentFilters?: IntentFilter[];
            /** Maximum API level on which the application is designed to run. */
            maxSdkVersion?: number;
            /** Minimum API level required for the application to run. */
            minSdkVersion?: number;
            /** Full Java-style package name for this application, e.g. "com.example.foo". */
            packageName?: string;
            /** Specifies the API Level on which the application is designed to run. */
            targetSdkVersion?: number;
        }
        interface AppBundle {
            /** .aab file representing the app bundle under test. */
            bundleLocation?: FileReference;
        }
        interface CancelTestMatrixResponse {
            /** The current rolled-up state of the test matrix. If this state is already final, then the cancelation request will have no effect. */
            testState?: string;
        }
        interface ClientInfo {
            /** The list of detailed information about client. */
            clientInfoDetails?: ClientInfoDetail[];
            /** Required. Client name, such as gcloud. */
            name?: string;
        }
        interface ClientInfoDetail {
            /** Required. The key of detailed client information. */
            key?: string;
            /** Required. The value of detailed client information. */
            value?: string;
        }
        interface Date {
            /** Day of month. Must be from 1 to 31 and valid for the year and month, or 0 if specifying a year by itself or a year and month where the day is not significant. */
            day?: number;
            /** Month of year. Must be from 1 to 12, or 0 if specifying a year without a month and day. */
            month?: number;
            /** Year of date. Must be from 1 to 9999, or 0 if specifying a date without a year. */
            year?: number;
        }
        interface DeviceFile {
            /** A reference to an opaque binary blob file. */
            obbFile?: ObbFile;
            /** A reference to a regular file. */
            regularFile?: RegularFile;
        }
        interface DeviceIpBlock {
            /** The date this block was added to Firebase Test Lab */
            addedDate?: Date;
            /** An IP address block in CIDR notation eg: 34.68.194.64/29 */
            block?: string;
            /** Whether this block is used by physical or virtual devices */
            form?: string;
        }
        interface DeviceIpBlockCatalog {
            /** The device IP blocks used by Firebase Test Lab */
            ipBlocks?: DeviceIpBlock[];
        }
        interface Distribution {
            /** Output only. The estimated fraction (0-1) of the total market with this configuration. */
            marketShare?: number;
            /** Output only. The time this distribution was measured. */
            measurementTime?: string;
        }
        interface Environment {
            /** An Android device which must be used with an Android test. */
            androidDevice?: AndroidDevice;
            /** An iOS device which must be used with an iOS test. */
            iosDevice?: IosDevice;
        }
        interface EnvironmentMatrix {
            /** A list of Android devices; the test will be run only on the specified devices. */
            androidDeviceList?: AndroidDeviceList;
            /** A matrix of Android devices. */
            androidMatrix?: AndroidMatrix;
            /** A list of iOS devices. */
            iosDeviceList?: IosDeviceList;
        }
        interface EnvironmentVariable {
            /** Key for the environment variable. */
            key?: string;
            /** Value for the environment variable. */
            value?: string;
        }
        interface FileReference {
            /** A path to a file in Google Cloud Storage. Example: gs://build-app-1414623860166/app%40debug-unaligned.apk These paths are expected to be url encoded (percent encoding) */
            gcsPath?: string;
        }
        interface GetApkDetailsResponse {
            /** Details of the Android APK. */
            apkDetail?: ApkDetail;
        }
        // tslint:disable-next-line:no-empty-interface
        interface GoogleAuto {
        }
        interface GoogleCloudStorage {
            /** Required. The path to a directory in GCS that will eventually contain the results for this test. The requesting user must have write access on the bucket in the supplied path. */
            gcsPath?: string;
        }
        // tslint:disable-next-line:interface-name
        interface IntentFilter {
            /** The android:name value of the tag. */
            actionNames?: string[];
            /** The android:name value of the tag. */
            categoryNames?: string[];
            /** The android:mimeType value of the tag. */
            mimeType?: string;
        }
        // tslint:disable-next-line:interface-name
        interface IosDevice {
            /** Required. The id of the iOS device to be used. Use the TestEnvironmentDiscoveryService to get supported options. */
            iosModelId?: string;
            /** Required. The id of the iOS major software version to be used. Use the TestEnvironmentDiscoveryService to get supported options. */
            iosVersionId?: string;
            /** Required. The locale the test device used for testing. Use the TestEnvironmentDiscoveryService to get supported options. */
            locale?: string;
            /** Required. How the device is oriented during the test. Use the TestEnvironmentDiscoveryService to get supported options. */
            orientation?: string;
        }
        // tslint:disable-next-line:interface-name
        interface IosDeviceCatalog {
            /** The set of supported iOS device models. */
            models?: IosModel[];
            /** The set of supported runtime configurations. */
            runtimeConfiguration?: IosRuntimeConfiguration;
            /** The set of supported iOS software versions. */
            versions?: IosVersion[];
            /** The set of supported Xcode versions. */
            xcodeVersions?: XcodeVersion[];
        }
        // tslint:disable-next-line:interface-name
        interface IosDeviceList {
            /** Required. A list of iOS devices. */
            iosDevices?: IosDevice[];
        }
        // tslint:disable-next-line:interface-name
        interface IosModel {
            /**
             * Device capabilities. Copied from
             * https://developer.apple.com/library/archive/documentation/DeviceInformation/Reference/iOSDeviceCompatibility/DeviceCompatibilityMatrix/DeviceCompatibilityMatrix.html
             */
            deviceCapabilities?: string[];
            /** Whether this device is a phone, tablet, wearable, etc. */
            formFactor?: string;
            /** The unique opaque id for this model. Use this for invoking the TestExecutionService. */
            id?: string;
            /** The human-readable name for this device model. Examples: "iPhone 4s", "iPad Mini 2". */
            name?: string;
            /** Screen density in DPI. */
            screenDensity?: number;
            /** Screen size in the horizontal (X) dimension measured in pixels. */
            screenX?: number;
            /** Screen size in the vertical (Y) dimension measured in pixels. */
            screenY?: number;
            /** The set of iOS major software versions this device supports. */
            supportedVersionIds?: string[];
            /** Tags for this dimension. Examples: "default", "preview", "deprecated". */
            tags?: string[];
        }
        // tslint:disable-next-line:interface-name
        interface IosRuntimeConfiguration {
            /** The set of available locales. */
            locales?: Locale[];
            /** The set of available orientations. */
            orientations?: Orientation[];
        }
        // tslint:disable-next-line:interface-name
        interface IosTestLoop {
            /** Output only. The bundle id for the application under test. */
            appBundleId?: string;
            /** Required. The .ipa of the application to test. */
            appIpa?: FileReference;
            /** The list of scenarios that should be run during the test. Defaults to the single scenario 0 if unspecified. */
            scenarios?: number[];
        }
        // tslint:disable-next-line:interface-name
        interface IosTestSetup {
            /** iOS apps to install in addition to those being directly tested. */
            additionalIpas?: FileReference[];
            /**
             * The network traffic profile used for running the test. Available network profiles can be queried by using the NETWORK_CONFIGURATION environment type when calling
             * TestEnvironmentDiscoveryService.GetTestEnvironmentCatalog.
             */
            networkProfile?: string;
        }
        // tslint:disable-next-line:interface-name
        interface IosVersion {
            /** An opaque id for this iOS version. Use this id to invoke the TestExecutionService. */
            id?: string;
            /** An integer representing the major iOS version. Examples: "8", "9". */
            majorVersion?: number;
            /** An integer representing the minor iOS version. Examples: "1", "2". */
            minorVersion?: number;
            /** The available Xcode versions for this version. */
            supportedXcodeVersionIds?: string[];
            /** Tags for this dimension. Examples: "default", "preview", "deprecated". */
            tags?: string[];
        }
        // tslint:disable-next-line:interface-name
        interface IosXcTest {
            /** Output only. The bundle id for the application under test. */
            appBundleId?: string;
            /**
             * The option to test special app entitlements. Setting this would re-sign the app having special entitlements with an explicit application-identifier. Currently supports testing
             * aps-environment entitlement.
             */
            testSpecialEntitlements?: boolean;
            /**
             * Required. The .zip containing the .xctestrun file and the contents of the DerivedData/Build/Products directory. The .xctestrun file in this zip is ignored if the xctestrun field is
             * specified.
             */
            testsZip?: FileReference;
            /**
             * The Xcode version that should be used for the test. Use the TestEnvironmentDiscoveryService to get supported options. Defaults to the latest Xcode version Firebase Test Lab
             * supports.
             */
            xcodeVersion?: string;
            /**
             * An .xctestrun file that will override the .xctestrun file in the tests zip. Because the .xctestrun file contains environment variables along with test methods to run and/or ignore,
             * this can be useful for sharding tests. Default is taken from the tests zip.
             */
            xctestrun?: FileReference;
        }
        // tslint:disable-next-line:no-empty-interface
        interface LauncherActivityIntent {
        }
        interface Locale {
            /** The id for this locale. Example: "en_US". */
            id?: string;
            /** A human-friendly name for this language/locale. Example: "English". */
            name?: string;
            /** A human-friendly string representing the region for this locale. Example: "United States". Not present for every locale. */
            region?: string;
            /** Tags for this dimension. Example: "default". */
            tags?: string[];
        }
        interface ManualSharding {
            /**
             * Required. Group of packages, classes, and/or test methods to be run for each shard. When any physical devices are selected, the number of test_targets_for_shard must be >= 1 and <=
             * 50. When no physical devices are selected, the number must be >= 1 and <= 250.
             */
            testTargetsForShard?: TestTargetsForShard[];
        }
        interface NetworkConfiguration {
            /** The emulation rule applying to the download traffic. */
            downRule?: TrafficRule;
            /** The unique opaque id for this network traffic configuration. */
            id?: string;
            /** The emulation rule applying to the upload traffic. */
            upRule?: TrafficRule;
        }
        interface NetworkConfigurationCatalog {
            configurations?: NetworkConfiguration[];
        }
        interface ObbFile {
            /** Required. Opaque Binary Blob (OBB) file(s) to install on the device. */
            obb?: FileReference;
            /**
             * Required. OBB file name which must conform to the format as specified by Android e.g. [main|patch].0300110.com.example.android.obb which will be installed into \/Android/obb/\/ on
             * the device.
             */
            obbFileName?: string;
        }
        interface Orientation {
            /** The id for this orientation. Example: "portrait". */
            id?: string;
            /** A human-friendly name for this orientation. Example: "portrait". */
            name?: string;
            /** Tags for this dimension. Example: "default". */
            tags?: string[];
        }
        interface ProvidedSoftwareCatalog {
            /** A string representing the current version of Android Test Orchestrator that is provided by TestExecutionService. Example: "1.0.2 beta". */
            orchestratorVersion?: string;
        }
        interface RegularFile {
            /** Required. The source file. */
            content?: FileReference;
            /**
             * Required. Where to put the content on the device. Must be an absolute, allowlisted path. If the file exists, it will be replaced. The following device-side directories and any of
             * their subdirectories are allowlisted: ${EXTERNAL_STORAGE}, /sdcard, or /storage ${ANDROID_DATA}/local/tmp, or /data/local/tmp Specifying a path outside of these directory trees is
             * invalid. The paths /sdcard and /data will be made available and treated as implicit path substitutions. E.g. if /sdcard on a particular device does not map to external storage, the
             * system will replace it with the external storage path prefix for that device and copy the file there. It is strongly advised to use the Environment API in app and test code to
             * access files on the device in a portable way.
             */
            devicePath?: string;
        }
        interface ResultStorage {
            /** Required. */
            googleCloudStorage?: GoogleCloudStorage;
            /** Output only. URL to the results in the Firebase Web Console. */
            resultsUrl?: string;
            /** Output only. The tool results execution that results are written to. */
            toolResultsExecution?: ToolResultsExecution;
            /** The tool results history that contains the tool results execution that results are written to. If not provided, the service will choose an appropriate value. */
            toolResultsHistory?: ToolResultsHistory;
        }
        interface RoboDirective {
            /** Required. The type of action that Robo should perform on the specified element. */
            actionType?: string;
            /** The text that Robo is directed to set. If left empty, the directive will be treated as a CLICK on the element matching the resource_name. */
            inputText?: string;
            /**
             * Required. The android resource name of the target UI element. For example, in Java: R.string.foo in xml: @string/foo Only the "foo" part is needed. Reference doc:
             * https://developer.android.com/guide/topics/resources/accessing-resources.html
             */
            resourceName?: string;
        }
        interface RoboStartingIntent {
            /** An intent that starts the main launcher activity. */
            launcherActivity?: any;
            /** An intent that starts an activity with specific details. */
            startActivity?: StartActivityIntent;
            /** Timeout in seconds for each intent. */
            timeout?: string;
        }
        interface Shard {
            /** Output only. The total number of shards. */
            numShards?: number;
            /** Output only. The index of the shard among all the shards. */
            shardIndex?: number;
            /** Output only. Test targets for each shard. */
            testTargetsForShard?: TestTargetsForShard;
        }
        interface ShardingOption {
            /** Shards test cases into the specified groups of packages, classes, and/or methods. */
            manualSharding?: ManualSharding;
            /** Uniformly shards test cases given a total number of shards. */
            uniformSharding?: UniformSharding;
        }
        interface StartActivityIntent {
            /** Action name. Required for START_ACTIVITY. */
            action?: string;
            /** Intent categories to set on the intent. */
            categories?: string[];
            /** URI for the action. */
            uri?: string;
        }
        interface SystraceSetup {
            /** Systrace duration in seconds. Should be between 1 and 30 seconds. 0 disables systrace. */
            durationSeconds?: number;
        }
        interface TestDetails {
            /** Output only. If the TestState is ERROR, then this string will contain human-readable details about the error. */
            errorMessage?: string;
            /**
             * Output only. Human-readable, detailed descriptions of the test's progress. For example: "Provisioning a device", "Starting Test". During the course of execution new data may be
             * appended to the end of progress_messages.
             */
            progressMessages?: string[];
        }
        interface TestEnvironmentCatalog {
            /** Supported Android devices. */
            androidDeviceCatalog?: AndroidDeviceCatalog;
            /** The IP blocks used by devices in the test environment. */
            deviceIpBlockCatalog?: DeviceIpBlockCatalog;
            /** Supported iOS devices. */
            iosDeviceCatalog?: IosDeviceCatalog;
            /** Supported network configurations. */
            networkConfigurationCatalog?: NetworkConfigurationCatalog;
            /** The software test environment provided by TestExecutionService. */
            softwareCatalog?: ProvidedSoftwareCatalog;
        }
        interface TestExecution {
            /** Output only. How the host machine(s) are configured. */
            environment?: Environment;
            /** Output only. Unique id set by the service. */
            id?: string;
            /** Output only. Id of the containing TestMatrix. */
            matrixId?: string;
            /** Output only. The cloud project that owns the test execution. */
            projectId?: string;
            /** Output only. Details about the shard. */
            shard?: Shard;
            /** Output only. Indicates the current progress of the test execution (e.g., FINISHED). */
            state?: string;
            /** Output only. Additional details about the running test. */
            testDetails?: TestDetails;
            /** Output only. How to run the test. */
            testSpecification?: TestSpecification;
            /** Output only. The time this test execution was initially created. */
            timestamp?: string;
            /** Output only. Where the results for this execution are written. */
            toolResultsStep?: ToolResultsStep;
        }
        interface TestMatrix {
            /** Information about the client which invoked the test. */
            clientInfo?: ClientInfo;
            /** Required. The devices the tests are being executed on. */
            environmentMatrix?: EnvironmentMatrix;
            /**
             * The number of times a TestExecution should be re-attempted if one or more of its test cases fail for any reason. The maximum number of reruns allowed is 10. Default is 0, which
             * implies no reruns.
             */
            flakyTestAttempts?: number;
            /** Output only. Describes why the matrix is considered invalid. Only useful for matrices in the INVALID state. */
            invalidMatrixDetails?: string;
            /** Output Only. The overall outcome of the test. Only set when the test matrix state is FINISHED. */
            outcomeSummary?: string;
            /** The cloud project that owns the test matrix. */
            projectId?: string;
            /** Required. Where the results for the matrix are written. */
            resultStorage?: ResultStorage;
            /** Output only. Indicates the current progress of the test matrix. */
            state?: string;
            /** Output only. The list of test executions that the service creates for this matrix. */
            testExecutions?: TestExecution[];
            /** Output only. Unique id set by the service. */
            testMatrixId?: string;
            /** Required. How to run the test. */
            testSpecification?: TestSpecification;
            /** Output only. The time this test matrix was initially created. */
            timestamp?: string;
        }
        interface TestSetup {
            /** The device will be logged in on this account for the duration of the test. */
            account?: Account;
            /** APKs to install in addition to those being directly tested. Currently capped at 100. */
            additionalApks?: Apk[];
            /**
             * List of directories on the device to upload to GCS at the end of the test; they must be absolute paths under /sdcard, /storage or /data/local/tmp. Path names are restricted to
             * characters a-z A-Z 0-9 _ - . + and / Note: The paths /sdcard and /data will be made available and treated as implicit path substitutions. E.g. if /sdcard on a particular device does
             * not map to external storage, the system will replace it with the external storage path prefix for that device.
             */
            directoriesToPull?: string[];
            /** Whether to prevent all runtime permissions to be granted at app install */
            dontAutograntPermissions?: boolean;
            /** Environment variables to set for the test (only applicable for instrumentation tests). */
            environmentVariables?: EnvironmentVariable[];
            /** List of files to push to the device before starting the test. */
            filesToPush?: DeviceFile[];
            /**
             * The network traffic profile used for running the test. Available network profiles can be queried by using the NETWORK_CONFIGURATION environment type when calling
             * TestEnvironmentDiscoveryService.GetTestEnvironmentCatalog.
             */
            networkProfile?: string;
            /**
             * Systrace configuration for the run. If set a systrace will be taken, starting on test start and lasting for the configured duration. The systrace file thus obtained is put in the
             * results bucket together with the other artifacts from the run.
             */
            systrace?: SystraceSetup;
        }
        interface TestSpecification {
            /** An Android instrumentation test. */
            androidInstrumentationTest?: AndroidInstrumentationTest;
            /** An Android robo test. */
            androidRoboTest?: AndroidRoboTest;
            /** An Android Application with a Test Loop. */
            androidTestLoop?: AndroidTestLoop;
            /** Disables performance metrics recording. May reduce test latency. */
            disablePerformanceMetrics?: boolean;
            /** Disables video recording. May reduce test latency. */
            disableVideoRecording?: boolean;
            /** An iOS application with a test loop. */
            iosTestLoop?: IosTestLoop;
            /** Test setup requirements for iOS. */
            iosTestSetup?: IosTestSetup;
            /** An iOS XCTest, via an .xctestrun file. */
            iosXcTest?: IosXcTest;
            /** Test setup requirements for Android e.g. files to install, bootstrap scripts. */
            testSetup?: TestSetup;
            /** Max time a test execution is allowed to run before it is automatically cancelled. The default value is 5 min. */
            testTimeout?: string;
        }
        interface TestTargetsForShard {
            /**
             * Group of packages, classes, and/or test methods to be run for each shard. The targets need to be specified in AndroidJUnitRunner argument format. For example, "package
             * com.my.packages" "class com.my.package.MyClass". The number of shard_test_targets must be greater than 0.
             */
            testTargets?: string[];
        }
        interface ToolResultsExecution {
            /** Output only. A tool results execution ID. */
            executionId?: string;
            /** Output only. A tool results history ID. */
            historyId?: string;
            /** Output only. The cloud project that owns the tool results execution. */
            projectId?: string;
        }
        interface ToolResultsHistory {
            /** Required. A tool results history ID. */
            historyId?: string;
            /** Required. The cloud project that owns the tool results history. */
            projectId?: string;
        }
        interface ToolResultsStep {
            /** Output only. A tool results execution ID. */
            executionId?: string;
            /** Output only. A tool results history ID. */
            historyId?: string;
            /** Output only. The cloud project that owns the tool results step. */
            projectId?: string;
            /** Output only. A tool results step ID. */
            stepId?: string;
        }
        interface TrafficRule {
            /** Bandwidth in kbits/second. */
            bandwidth?: number;
            /** Burst size in kbits. */
            burst?: number;
            /** Packet delay, must be >= 0. */
            delay?: string;
            /** Packet duplication ratio (0.0 - 1.0). */
            packetDuplicationRatio?: number;
            /** Packet loss ratio (0.0 - 1.0). */
            packetLossRatio?: number;
        }
        interface UniformSharding {
            /**
             * Required. Total number of shards. When any physical devices are selected, the number must be >= 1 and <= 50. When no physical devices are selected, the number must be >= 1 and <=
             * 250.
             */
            numShards?: number;
        }
        interface XcodeVersion {
            /** Tags for this Xcode version. Example: "default". */
            tags?: string[];
            /** The id for this version. Example: "9.2". */
            version?: string;
        }
        interface ApplicationDetailServiceResource {
            /** Gets the details of an Android application APK. */
            getApkDetails(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: FileReference;
            }): Request<GetApkDetailsResponse>;
            getApkDetails(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: FileReference): Request<GetApkDetailsResponse>;
        }
        interface TestMatricesResource {
            /**
             * Cancels unfinished test executions in a test matrix. This call returns immediately and cancellation proceeds asynchronously. If the matrix is already final, this operation will have
             * no effect. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to read project - INVALID_ARGUMENT - if the request is
             * malformed - NOT_FOUND - if the Test Matrix does not exist
             */
            cancel(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Cloud project that owns the test. */
                projectId: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Test matrix that will be canceled. */
                testMatrixId: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<CancelTestMatrixResponse>;
            /**
             * Creates and runs a matrix of tests according to the given specifications. Unsupported environments will be returned in the state UNSUPPORTED. Matrices are limited to at most 200
             * supported executions. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to write to project - INVALID_ARGUMENT - if the
             * request is malformed or if the matrix expands to more than 200 supported executions
             */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** The GCE project under which this job will run. */
                projectId: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * A string id used to detect duplicated requests. Ids are automatically scoped to a project, so users should ensure the ID is unique per-project. A UUID is recommended. Optional,
                 * but strongly recommended.
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: TestMatrix;
            }): Request<TestMatrix>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** The GCE project under which this job will run. */
                projectId: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * A string id used to detect duplicated requests. Ids are automatically scoped to a project, so users should ensure the ID is unique per-project. A UUID is recommended. Optional,
                 * but strongly recommended.
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: TestMatrix): Request<TestMatrix>;
            /**
             * Checks the status of a test matrix. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to read project - INVALID_ARGUMENT -
             * if the request is malformed - NOT_FOUND - if the Test Matrix does not exist
             */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Cloud project that owns the test matrix. */
                projectId: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Unique test matrix id which was assigned by the service. */
                testMatrixId: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<TestMatrix>;
        }
        interface ProjectsResource {
            testMatrices: TestMatricesResource;
        }
        interface TestEnvironmentCatalogResource {
            /**
             * Gets the catalog of supported test environments. May return any of the following canonical error codes: - INVALID_ARGUMENT - if the request is malformed - NOT_FOUND - if the
             * environment type does not exist - INTERNAL - if an internal error occurred
             */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Required. The type of environment that should be listed. */
                environmentType: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** For authorization, the cloud project requesting the TestEnvironmentCatalog. */
                projectId?: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<TestEnvironmentCatalog>;
        }

        const applicationDetailService: ApplicationDetailServiceResource;

        const projects: ProjectsResource;

        const testEnvironmentCatalog: TestEnvironmentCatalogResource;
    }
}
