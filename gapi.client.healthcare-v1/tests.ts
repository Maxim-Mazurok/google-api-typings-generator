/* This is stub file for gapi.client.healthcare-v1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20230310

gapi.load('client', async () => {
    /** now we can use gapi.client */

    await gapi.client.load('https://healthcare.googleapis.com/$discovery/rest?version=v1');
    /** now we can use gapi.client.healthcare */

    /** don't forget to authenticate your client before sending any request to resources: */
    /** declare client_id registered in Google Developers Console */
    const client_id = '<<PUT YOUR CLIENT ID HERE>>';
    const scope = [
        /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
        'https://www.googleapis.com/auth/cloud-platform',
    ];
    const immediate = false;
    gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
        if (authResult && !authResult.error) {
            /** handle successful authorization */
            run();
        } else {
            /** handle authorization error */
        }
    });

    async function run() {
        /** Gets information about a location. */
        await gapi.client.healthcare.projects.locations.get({
            name: "Test string",
        });
        /** Lists information about the supported locations for this service. */
        await gapi.client.healthcare.projects.locations.list({
            filter: "Test string",
            name: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /**
         * Creates a new health dataset. Results are returned through the Operation interface which returns either an `Operation.response` which contains a Dataset or `Operation.error`. The
         * metadata field type is OperationMetadata.
         */
        await gapi.client.healthcare.projects.locations.datasets.create({
            datasetId: "Test string",
            parent: "Test string",
        }, {
            name: "Test string",
            timeZone: "Test string",
        });
        /**
         * Creates a new dataset containing de-identified data from the source dataset. The metadata field type is OperationMetadata. If the request is successful, the response field type is
         * DeidentifySummary. If errors occur, error is set. The LRO result may still be successful if de-identification fails for some DICOM instances. The new de-identified dataset will not
         * contain these failed resources. Failed resource totals are tracked in Operation.metadata. Error details are also logged to Cloud Logging. For more information, see [Viewing error logs
         * in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging).
         */
        await gapi.client.healthcare.projects.locations.datasets.deidentify({
            sourceDataset: "Test string",
        }, {
            config: {
                dicom: {
                    filterProfile: "Test string",
                    keepList: {
                        tags: [
                            "Test string"
                        ],
                    },
                    removeList: {
                        tags: [
                            "Test string"
                        ],
                    },
                    skipIdRedaction: true,
                },
                fhir: {
                    defaultKeepExtensions: true,
                    fieldMetadataList: [
                        {
                            action: "Test string",
                            paths: [
                                "Test string"
                            ],
                        }
                    ],
                },
                image: {
                    textRedactionMode: "Test string",
                },
                text: {
                    transformations: [
                        {
                            characterMaskConfig: {
                                maskingCharacter: "Test string",
                            },
                            cryptoHashConfig: {
                                cryptoKey: "Test string",
                                kmsWrapped: {
                                    cryptoKey: "Test string",
                                    wrappedKey: "Test string",
                                },
                            },
                            dateShiftConfig: {
                                cryptoKey: "Test string",
                                kmsWrapped: {
                                    cryptoKey: "Test string",
                                    wrappedKey: "Test string",
                                },
                            },
                            infoTypes: [
                                "Test string"
                            ],
                            redactConfig: {
                            },
                            replaceWithInfoTypeConfig: {
                            },
                        }
                    ],
                },
            },
            destinationDataset: "Test string",
            gcsConfigUri: "Test string",
        });
        /** Deletes the specified health dataset and all data contained in the dataset. Deleting a dataset does not affect the sources from which the dataset was imported (if any). */
        await gapi.client.healthcare.projects.locations.datasets.delete({
            name: "Test string",
        });
        /** Gets any metadata associated with a dataset. */
        await gapi.client.healthcare.projects.locations.datasets.get({
            name: "Test string",
        });
        /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
        await gapi.client.healthcare.projects.locations.datasets.getIamPolicy({
            "options.requestedPolicyVersion": 42,
            resource: "Test string",
        });
        /** Lists the health datasets in the current project. */
        await gapi.client.healthcare.projects.locations.datasets.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates dataset metadata. */
        await gapi.client.healthcare.projects.locations.datasets.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            name: "Test string",
            timeZone: "Test string",
        });
        /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
        await gapi.client.healthcare.projects.locations.datasets.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                auditConfigs: [
                    {
                        auditLogConfigs: [
                            {
                                exemptedMembers: [
                                    "Test string"
                                ],
                                logType: "Test string",
                            }
                        ],
                        service: "Test string",
                    }
                ],
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"
                        ],
                        role: "Test string",
                    }
                ],
                etag: "Test string",
                version: 42,
            },
            updateMask: "Test string",
        });
        /**
         * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This
         * operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
         */
        await gapi.client.healthcare.projects.locations.datasets.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"
            ],
        });
        /** Checks if a particular data_id of a User data mapping in the specified consent store is consented for the specified use. */
        await gapi.client.healthcare.projects.locations.datasets.consentStores.checkDataAccess({
            consentStore: "Test string",
        }, {
            consentList: {
                consents: [
                    "Test string"
                ],
            },
            dataId: "Test string",
            requestAttributes: {
                A: "Test string"
            },
            responseView: "Test string",
        });
        /** Creates a new consent store in the parent dataset. Attempting to create a consent store with the same ID as an existing store fails with an ALREADY_EXISTS error. */
        await gapi.client.healthcare.projects.locations.datasets.consentStores.create({
            consentStoreId: "Test string",
            parent: "Test string",
        }, {
            defaultConsentTtl: "Test string",
            enableConsentCreateOnUpdate: true,
            labels: {
                A: "Test string"
            },
            name: "Test string",
        });
        /** Deletes the specified consent store and removes all the consent store's data. */
        await gapi.client.healthcare.projects.locations.datasets.consentStores.delete({
            name: "Test string",
        });
        /**
         * Evaluates the user's Consents for all matching User data mappings. Note: User data mappings are indexed asynchronously, which can cause a slight delay between the time mappings are
         * created or updated and when they are included in EvaluateUserConsents results.
         */
        await gapi.client.healthcare.projects.locations.datasets.consentStores.evaluateUserConsents({
            consentStore: "Test string",
        }, {
            consentList: {
                consents: [
                    "Test string"
                ],
            },
            pageSize: 42,
            pageToken: "Test string",
            requestAttributes: {
                A: "Test string"
            },
            resourceAttributes: {
                A: "Test string"
            },
            responseView: "Test string",
            userId: "Test string",
        });
        /** Gets the specified consent store. */
        await gapi.client.healthcare.projects.locations.datasets.consentStores.get({
            name: "Test string",
        });
        /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
        await gapi.client.healthcare.projects.locations.datasets.consentStores.getIamPolicy({
            "options.requestedPolicyVersion": 42,
            resource: "Test string",
        });
        /** Lists the consent stores in the specified dataset. */
        await gapi.client.healthcare.projects.locations.datasets.consentStores.list({
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified consent store. */
        await gapi.client.healthcare.projects.locations.datasets.consentStores.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            defaultConsentTtl: "Test string",
            enableConsentCreateOnUpdate: true,
            labels: {
                A: "Test string"
            },
            name: "Test string",
        });
        /**
         * Queries all data_ids that are consented for a specified use in the given consent store and writes them to a specified destination. The returned Operation includes a progress counter for
         * the number of User data mappings processed. If the request is successful, a detailed response is returned of type QueryAccessibleDataResponse, contained in the response field when the
         * operation finishes. The metadata field type is OperationMetadata. Errors are logged to Cloud Logging (see [Viewing error logs in Cloud
         * Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)). For example, the following sample log entry shows a `failed to evaluate consent policy` error that occurred during a
         * QueryAccessibleData call to consent store `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}`. ```json jsonPayload: { @‍type:
         * "type.googleapis.com/google.cloud.healthcare.logging.QueryAccessibleDataLogEntry" error: { code: 9 message: "failed to evaluate consent policy" } resourceName:
         * "projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consents/{consent_id}" } logName:
         * "projects/{project_id}/logs/healthcare.googleapis.com%2Fquery_accessible_data" operation: { id:
         * "projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/operations/{operation_id}" producer: "healthcare.googleapis.com/QueryAccessibleData" } receiveTimestamp: "TIMESTAMP"
         * resource: { labels: { consent_store_id: "{consent_store_id}" dataset_id: "{dataset_id}" location: "{location_id}" project_id: "{project_id}" } type: "healthcare_consent_store" }
         * severity: "ERROR" timestamp: "TIMESTAMP" ```
         */
        await gapi.client.healthcare.projects.locations.datasets.consentStores.queryAccessibleData({
            consentStore: "Test string",
        }, {
            gcsDestination: {
                uriPrefix: "Test string",
            },
            requestAttributes: {
                A: "Test string"
            },
            resourceAttributes: {
                A: "Test string"
            },
        });
        /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
        await gapi.client.healthcare.projects.locations.datasets.consentStores.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                auditConfigs: [
                    {
                        auditLogConfigs: [
                            {
                                exemptedMembers: [
                                    "Test string"
                                ],
                                logType: "Test string",
                            }
                        ],
                        service: "Test string",
                    }
                ],
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"
                        ],
                        role: "Test string",
                    }
                ],
                etag: "Test string",
                version: 42,
            },
            updateMask: "Test string",
        });
        /**
         * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This
         * operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
         */
        await gapi.client.healthcare.projects.locations.datasets.consentStores.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"
            ],
        });
        /** Creates a new Attribute definition in the parent consent store. */
        await gapi.client.healthcare.projects.locations.datasets.consentStores.attributeDefinitions.create({
            attributeDefinitionId: "Test string",
            parent: "Test string",
        }, {
            allowedValues: [
                "Test string"
            ],
            category: "Test string",
            consentDefaultValues: [
                "Test string"
            ],
            dataMappingDefaultValue: "Test string",
            description: "Test string",
            name: "Test string",
        });
        /** Deletes the specified Attribute definition. Fails if the Attribute definition is referenced by any User data mapping, or the latest revision of any Consent. */
        await gapi.client.healthcare.projects.locations.datasets.consentStores.attributeDefinitions.delete({
            name: "Test string",
        });
        /** Gets the specified Attribute definition. */
        await gapi.client.healthcare.projects.locations.datasets.consentStores.attributeDefinitions.get({
            name: "Test string",
        });
        /** Lists the Attribute definitions in the specified consent store. */
        await gapi.client.healthcare.projects.locations.datasets.consentStores.attributeDefinitions.list({
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified Attribute definition. */
        await gapi.client.healthcare.projects.locations.datasets.consentStores.attributeDefinitions.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            allowedValues: [
                "Test string"
            ],
            category: "Test string",
            consentDefaultValues: [
                "Test string"
            ],
            dataMappingDefaultValue: "Test string",
            description: "Test string",
            name: "Test string",
        });
        /** Creates a new Consent artifact in the parent consent store. */
        await gapi.client.healthcare.projects.locations.datasets.consentStores.consentArtifacts.create({
            parent: "Test string",
        }, {
            consentContentScreenshots: [
                {
                    gcsUri: "Test string",
                    rawBytes: "Test string",
                }
            ],
            consentContentVersion: "Test string",
            guardianSignature: {
                image: {
                    gcsUri: "Test string",
                    rawBytes: "Test string",
                },
                metadata: {
                    A: "Test string"
                },
                signatureTime: "Test string",
                userId: "Test string",
            },
            metadata: {
                A: "Test string"
            },
            name: "Test string",
            userId: "Test string",
            userSignature: {
                image: {
                    gcsUri: "Test string",
                    rawBytes: "Test string",
                },
                metadata: {
                    A: "Test string"
                },
                signatureTime: "Test string",
                userId: "Test string",
            },
            witnessSignature: {
                image: {
                    gcsUri: "Test string",
                    rawBytes: "Test string",
                },
                metadata: {
                    A: "Test string"
                },
                signatureTime: "Test string",
                userId: "Test string",
            },
        });
        /** Deletes the specified Consent artifact. Fails if the artifact is referenced by the latest revision of any Consent. */
        await gapi.client.healthcare.projects.locations.datasets.consentStores.consentArtifacts.delete({
            name: "Test string",
        });
        /** Gets the specified Consent artifact. */
        await gapi.client.healthcare.projects.locations.datasets.consentStores.consentArtifacts.get({
            name: "Test string",
        });
        /** Lists the Consent artifacts in the specified consent store. */
        await gapi.client.healthcare.projects.locations.datasets.consentStores.consentArtifacts.list({
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Activates the latest revision of the specified Consent by committing a new revision with `state` updated to `ACTIVE`. If the latest revision of the specified Consent is in the `ACTIVE`
         * state, no new revision is committed. A FAILED_PRECONDITION error occurs if the latest revision of the specified Consent is in the `REJECTED` or `REVOKED` state.
         */
        await gapi.client.healthcare.projects.locations.datasets.consentStores.consents.activate({
            name: "Test string",
        }, {
            consentArtifact: "Test string",
            expireTime: "Test string",
            ttl: "Test string",
        });
        /** Creates a new Consent in the parent consent store. */
        await gapi.client.healthcare.projects.locations.datasets.consentStores.consents.create({
            parent: "Test string",
        }, {
            consentArtifact: "Test string",
            expireTime: "Test string",
            metadata: {
                A: "Test string"
            },
            name: "Test string",
            policies: [
                {
                    authorizationRule: {
                        description: "Test string",
                        expression: "Test string",
                        location: "Test string",
                        title: "Test string",
                    },
                    resourceAttributes: [
                        {
                            attributeDefinitionId: "Test string",
                            values: [
                                "Test string"
                            ],
                        }
                    ],
                }
            ],
            revisionCreateTime: "Test string",
            revisionId: "Test string",
            state: "Test string",
            ttl: "Test string",
            userId: "Test string",
        });
        /**
         * Deletes the Consent and its revisions. To keep a record of the Consent but mark it inactive, see [RevokeConsent]. To delete a revision of a Consent, see [DeleteConsentRevision]. This
         * operation does not delete the related Consent artifact.
         */
        await gapi.client.healthcare.projects.locations.datasets.consentStores.consents.delete({
            name: "Test string",
        });
        /** Deletes the specified revision of a Consent. An INVALID_ARGUMENT error occurs if the specified revision is the latest revision. */
        await gapi.client.healthcare.projects.locations.datasets.consentStores.consents.deleteRevision({
            name: "Test string",
        });
        /** Gets the specified revision of a Consent, or the latest revision if `revision_id` is not specified in the resource name. */
        await gapi.client.healthcare.projects.locations.datasets.consentStores.consents.get({
            name: "Test string",
        });
        /** Lists the Consent in the given consent store, returning each Consent's latest revision. */
        await gapi.client.healthcare.projects.locations.datasets.consentStores.consents.list({
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Lists the revisions of the specified Consent in reverse chronological order. */
        await gapi.client.healthcare.projects.locations.datasets.consentStores.consents.listRevisions({
            filter: "Test string",
            name: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /**
         * Updates the latest revision of the specified Consent by committing a new revision with the changes. A FAILED_PRECONDITION error occurs if the latest revision of the specified Consent is
         * in the `REJECTED` or `REVOKED` state.
         */
        await gapi.client.healthcare.projects.locations.datasets.consentStores.consents.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            consentArtifact: "Test string",
            expireTime: "Test string",
            metadata: {
                A: "Test string"
            },
            name: "Test string",
            policies: [
                {
                    authorizationRule: {
                        description: "Test string",
                        expression: "Test string",
                        location: "Test string",
                        title: "Test string",
                    },
                    resourceAttributes: [
                        {
                            attributeDefinitionId: "Test string",
                            values: [
                                "Test string"
                            ],
                        }
                    ],
                }
            ],
            revisionCreateTime: "Test string",
            revisionId: "Test string",
            state: "Test string",
            ttl: "Test string",
            userId: "Test string",
        });
        /**
         * Rejects the latest revision of the specified Consent by committing a new revision with `state` updated to `REJECTED`. If the latest revision of the specified Consent is in the
         * `REJECTED` state, no new revision is committed. A FAILED_PRECONDITION error occurs if the latest revision of the specified Consent is in the `ACTIVE` or `REVOKED` state.
         */
        await gapi.client.healthcare.projects.locations.datasets.consentStores.consents.reject({
            name: "Test string",
        }, {
            consentArtifact: "Test string",
        });
        /**
         * Revokes the latest revision of the specified Consent by committing a new revision with `state` updated to `REVOKED`. If the latest revision of the specified Consent is in the `REVOKED`
         * state, no new revision is committed. A FAILED_PRECONDITION error occurs if the latest revision of the given consent is in `DRAFT` or `REJECTED` state.
         */
        await gapi.client.healthcare.projects.locations.datasets.consentStores.consents.revoke({
            name: "Test string",
        }, {
            consentArtifact: "Test string",
        });
        /** Archives the specified User data mapping. */
        await gapi.client.healthcare.projects.locations.datasets.consentStores.userDataMappings.archive({
            name: "Test string",
        }, {
        });
        /** Creates a new User data mapping in the parent consent store. */
        await gapi.client.healthcare.projects.locations.datasets.consentStores.userDataMappings.create({
            parent: "Test string",
        }, {
            archived: true,
            archiveTime: "Test string",
            dataId: "Test string",
            name: "Test string",
            resourceAttributes: [
                {
                    attributeDefinitionId: "Test string",
                    values: [
                        "Test string"
                    ],
                }
            ],
            userId: "Test string",
        });
        /** Deletes the specified User data mapping. */
        await gapi.client.healthcare.projects.locations.datasets.consentStores.userDataMappings.delete({
            name: "Test string",
        });
        /** Gets the specified User data mapping. */
        await gapi.client.healthcare.projects.locations.datasets.consentStores.userDataMappings.get({
            name: "Test string",
        });
        /** Lists the User data mappings in the specified consent store. */
        await gapi.client.healthcare.projects.locations.datasets.consentStores.userDataMappings.list({
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified User data mapping. */
        await gapi.client.healthcare.projects.locations.datasets.consentStores.userDataMappings.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            archived: true,
            archiveTime: "Test string",
            dataId: "Test string",
            name: "Test string",
            resourceAttributes: [
                {
                    attributeDefinitionId: "Test string",
                    values: [
                        "Test string"
                    ],
                }
            ],
            userId: "Test string",
        });
        /** Creates a new DICOM store within the parent dataset. */
        await gapi.client.healthcare.projects.locations.datasets.dicomStores.create({
            dicomStoreId: "Test string",
            parent: "Test string",
        }, {
            labels: {
                A: "Test string"
            },
            name: "Test string",
            notificationConfig: {
                pubsubTopic: "Test string",
            },
        });
        /**
         * De-identifies data from the source store and writes it to the destination store. The metadata field type is OperationMetadata. If the request is successful, the response field type is
         * DeidentifyDicomStoreSummary. If errors occur, error is set. The LRO result may still be successful if de-identification fails for some DICOM instances. The output DICOM store will not
         * contain these failed resources. Failed resource totals are tracked in Operation.metadata. Error details are also logged to Cloud Logging (see [Viewing error logs in Cloud
         * Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)).
         */
        await gapi.client.healthcare.projects.locations.datasets.dicomStores.deidentify({
            sourceStore: "Test string",
        }, {
            config: {
                dicom: {
                    filterProfile: "Test string",
                    keepList: {
                        tags: [
                            "Test string"
                        ],
                    },
                    removeList: {
                        tags: [
                            "Test string"
                        ],
                    },
                    skipIdRedaction: true,
                },
                fhir: {
                    defaultKeepExtensions: true,
                    fieldMetadataList: [
                        {
                            action: "Test string",
                            paths: [
                                "Test string"
                            ],
                        }
                    ],
                },
                image: {
                    textRedactionMode: "Test string",
                },
                text: {
                    transformations: [
                        {
                            characterMaskConfig: {
                                maskingCharacter: "Test string",
                            },
                            cryptoHashConfig: {
                                cryptoKey: "Test string",
                                kmsWrapped: {
                                    cryptoKey: "Test string",
                                    wrappedKey: "Test string",
                                },
                            },
                            dateShiftConfig: {
                                cryptoKey: "Test string",
                                kmsWrapped: {
                                    cryptoKey: "Test string",
                                    wrappedKey: "Test string",
                                },
                            },
                            infoTypes: [
                                "Test string"
                            ],
                            redactConfig: {
                            },
                            replaceWithInfoTypeConfig: {
                            },
                        }
                    ],
                },
            },
            destinationStore: "Test string",
            filterConfig: {
                resourcePathsGcsUri: "Test string",
            },
            gcsConfigUri: "Test string",
        });
        /** Deletes the specified DICOM store and removes all images that are contained within it. */
        await gapi.client.healthcare.projects.locations.datasets.dicomStores.delete({
            name: "Test string",
        });
        /**
         * Exports data to the specified destination by copying it from the DICOM store. Errors are also logged to Cloud Logging. For more information, see [Viewing error logs in Cloud
         * Logging](https://cloud.google.com/healthcare/docs/how-tos/logging). The metadata field type is OperationMetadata.
         */
        await gapi.client.healthcare.projects.locations.datasets.dicomStores.export({
            name: "Test string",
        }, {
            bigqueryDestination: {
                force: true,
                tableUri: "Test string",
                writeDisposition: "Test string",
            },
            gcsDestination: {
                mimeType: "Test string",
                uriPrefix: "Test string",
            },
        });
        /** Gets the specified DICOM store. */
        await gapi.client.healthcare.projects.locations.datasets.dicomStores.get({
            name: "Test string",
        });
        /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
        await gapi.client.healthcare.projects.locations.datasets.dicomStores.getIamPolicy({
            "options.requestedPolicyVersion": 42,
            resource: "Test string",
        });
        /**
         * Imports data into the DICOM store by copying it from the specified source. Errors are logged to Cloud Logging. For more information, see [Viewing error logs in Cloud
         * Logging](https://cloud.google.com/healthcare/docs/how-tos/logging). The metadata field type is OperationMetadata.
         */
        await gapi.client.healthcare.projects.locations.datasets.dicomStores.import({
            name: "Test string",
        }, {
            gcsSource: {
                uri: "Test string",
            },
        });
        /** Lists the DICOM stores in the given dataset. */
        await gapi.client.healthcare.projects.locations.datasets.dicomStores.list({
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the specified DICOM store. */
        await gapi.client.healthcare.projects.locations.datasets.dicomStores.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            labels: {
                A: "Test string"
            },
            name: "Test string",
            notificationConfig: {
                pubsubTopic: "Test string",
            },
        });
        /**
         * SearchForInstances returns a list of matching instances. See [Search Transaction] (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.6). For details on the
         * implementation of SearchForInstances, see [Search transaction](https://cloud.google.com/healthcare/docs/dicom#search_transaction) in the Cloud Healthcare API conformance statement. For
         * samples that show how to call SearchForInstances, see [Searching for studies, series, instances, and
         * frames](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#searching_for_studies_series_instances_and_frames).
         */
        await gapi.client.healthcare.projects.locations.datasets.dicomStores.searchForInstances({
            dicomWebPath: "Test string",
            parent: "Test string",
        });
        /**
         * SearchForSeries returns a list of matching series. See [Search Transaction] (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.6). For details on the
         * implementation of SearchForSeries, see [Search transaction](https://cloud.google.com/healthcare/docs/dicom#search_transaction) in the Cloud Healthcare API conformance statement. For
         * samples that show how to call SearchForSeries, see [Searching for studies, series, instances, and
         * frames](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#searching_for_studies_series_instances_and_frames).
         */
        await gapi.client.healthcare.projects.locations.datasets.dicomStores.searchForSeries({
            dicomWebPath: "Test string",
            parent: "Test string",
        });
        /**
         * SearchForStudies returns a list of matching studies. See [Search Transaction] (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.6). For details on the
         * implementation of SearchForStudies, see [Search transaction](https://cloud.google.com/healthcare/docs/dicom#search_transaction) in the Cloud Healthcare API conformance statement. For
         * samples that show how to call SearchForStudies, see [Searching for studies, series, instances, and
         * frames](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#searching_for_studies_series_instances_and_frames).
         */
        await gapi.client.healthcare.projects.locations.datasets.dicomStores.searchForStudies({
            dicomWebPath: "Test string",
            parent: "Test string",
        });
        /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
        await gapi.client.healthcare.projects.locations.datasets.dicomStores.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                auditConfigs: [
                    {
                        auditLogConfigs: [
                            {
                                exemptedMembers: [
                                    "Test string"
                                ],
                                logType: "Test string",
                            }
                        ],
                        service: "Test string",
                    }
                ],
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"
                        ],
                        role: "Test string",
                    }
                ],
                etag: "Test string",
                version: 42,
            },
            updateMask: "Test string",
        });
        /**
         * StoreInstances stores DICOM instances associated with study instance unique identifiers (SUID). See [Store Transaction]
         * (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.5). For details on the implementation of StoreInstances, see [Store
         * transaction](https://cloud.google.com/healthcare/docs/dicom#store_transaction) in the Cloud Healthcare API conformance statement. For samples that show how to call StoreInstances, see
         * [Storing DICOM data](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#storing_dicom_data).
         */
        await gapi.client.healthcare.projects.locations.datasets.dicomStores.storeInstances({
            dicomWebPath: "Test string",
            parent: "Test string",
        }, {
            contentType: "Test string",
            data: "Test string",
            extensions: [
                {
                    A: 42
                }
            ],
        });
        /**
         * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This
         * operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
         */
        await gapi.client.healthcare.projects.locations.datasets.dicomStores.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"
            ],
        });
        /**
         * DeleteStudy deletes all instances within the given study. Delete requests are equivalent to the GET requests specified in the Retrieve transaction. The method returns an Operation which
         * will be marked successful when the deletion is complete. Warning: Instances cannot be inserted into a study that is being deleted by an operation until the operation completes. For
         * samples that show how to call DeleteStudy, see [Deleting a study, series, or instance](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#deleting_a_study_series_or_instance).
         */
        await gapi.client.healthcare.projects.locations.datasets.dicomStores.studies.delete({
            dicomWebPath: "Test string",
            parent: "Test string",
        });
        /**
         * RetrieveStudyMetadata returns instance associated with the given study presented as metadata with the bulk data removed. See [RetrieveTransaction]
         * (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4). For details on the implementation of RetrieveStudyMetadata, see [Metadata
         * resources](https://cloud.google.com/healthcare/docs/dicom#metadata_resources) in the Cloud Healthcare API conformance statement. For samples that show how to call RetrieveStudyMetadata,
         * see [Retrieving metadata](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_metadata).
         */
        await gapi.client.healthcare.projects.locations.datasets.dicomStores.studies.retrieveMetadata({
            dicomWebPath: "Test string",
            parent: "Test string",
        });
        /**
         * RetrieveStudy returns all instances within the given study. See [RetrieveTransaction] (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4). For details on the
         * implementation of RetrieveStudy, see [DICOM study/series/instances](https://cloud.google.com/healthcare/docs/dicom#dicom_studyseriesinstances) in the Cloud Healthcare API conformance
         * statement. For samples that show how to call RetrieveStudy, see [Retrieving DICOM data](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_dicom_data).
         */
        await gapi.client.healthcare.projects.locations.datasets.dicomStores.studies.retrieveStudy({
            dicomWebPath: "Test string",
            parent: "Test string",
        });
        /**
         * SearchForInstances returns a list of matching instances. See [Search Transaction] (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.6). For details on the
         * implementation of SearchForInstances, see [Search transaction](https://cloud.google.com/healthcare/docs/dicom#search_transaction) in the Cloud Healthcare API conformance statement. For
         * samples that show how to call SearchForInstances, see [Searching for studies, series, instances, and
         * frames](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#searching_for_studies_series_instances_and_frames).
         */
        await gapi.client.healthcare.projects.locations.datasets.dicomStores.studies.searchForInstances({
            dicomWebPath: "Test string",
            parent: "Test string",
        });
        /**
         * SearchForSeries returns a list of matching series. See [Search Transaction] (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.6). For details on the
         * implementation of SearchForSeries, see [Search transaction](https://cloud.google.com/healthcare/docs/dicom#search_transaction) in the Cloud Healthcare API conformance statement. For
         * samples that show how to call SearchForSeries, see [Searching for studies, series, instances, and
         * frames](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#searching_for_studies_series_instances_and_frames).
         */
        await gapi.client.healthcare.projects.locations.datasets.dicomStores.studies.searchForSeries({
            dicomWebPath: "Test string",
            parent: "Test string",
        });
        /**
         * StoreInstances stores DICOM instances associated with study instance unique identifiers (SUID). See [Store Transaction]
         * (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.5). For details on the implementation of StoreInstances, see [Store
         * transaction](https://cloud.google.com/healthcare/docs/dicom#store_transaction) in the Cloud Healthcare API conformance statement. For samples that show how to call StoreInstances, see
         * [Storing DICOM data](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#storing_dicom_data).
         */
        await gapi.client.healthcare.projects.locations.datasets.dicomStores.studies.storeInstances({
            dicomWebPath: "Test string",
            parent: "Test string",
        }, {
            contentType: "Test string",
            data: "Test string",
            extensions: [
                {
                    A: 42
                }
            ],
        });
        /**
         * DeleteSeries deletes all instances within the given study and series. Delete requests are equivalent to the GET requests specified in the Retrieve transaction. The method returns an
         * Operation which will be marked successful when the deletion is complete. Warning: Instances cannot be inserted into a series that is being deleted by an operation until the operation
         * completes. For samples that show how to call DeleteSeries, see [Deleting a study, series, or
         * instance](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#deleting_a_study_series_or_instance).
         */
        await gapi.client.healthcare.projects.locations.datasets.dicomStores.studies.series.delete({
            dicomWebPath: "Test string",
            parent: "Test string",
        });
        /**
         * RetrieveSeriesMetadata returns instance associated with the given study and series, presented as metadata with the bulk data removed. See [RetrieveTransaction]
         * (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4). For details on the implementation of RetrieveSeriesMetadata, see [Metadata
         * resources](https://cloud.google.com/healthcare/docs/dicom#metadata_resources) in the Cloud Healthcare API conformance statement. For samples that show how to call
         * RetrieveSeriesMetadata, see [Retrieving metadata](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_metadata).
         */
        await gapi.client.healthcare.projects.locations.datasets.dicomStores.studies.series.retrieveMetadata({
            dicomWebPath: "Test string",
            parent: "Test string",
        });
        /**
         * RetrieveSeries returns all instances within the given study and series. See [RetrieveTransaction] (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4). For
         * details on the implementation of RetrieveSeries, see [DICOM study/series/instances](https://cloud.google.com/healthcare/docs/dicom#dicom_studyseriesinstances) in the Cloud Healthcare
         * API conformance statement. For samples that show how to call RetrieveSeries, see [Retrieving DICOM
         * data](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_dicom_data).
         */
        await gapi.client.healthcare.projects.locations.datasets.dicomStores.studies.series.retrieveSeries({
            dicomWebPath: "Test string",
            parent: "Test string",
        });
        /**
         * SearchForInstances returns a list of matching instances. See [Search Transaction] (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.6). For details on the
         * implementation of SearchForInstances, see [Search transaction](https://cloud.google.com/healthcare/docs/dicom#search_transaction) in the Cloud Healthcare API conformance statement. For
         * samples that show how to call SearchForInstances, see [Searching for studies, series, instances, and
         * frames](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#searching_for_studies_series_instances_and_frames).
         */
        await gapi.client.healthcare.projects.locations.datasets.dicomStores.studies.series.searchForInstances({
            dicomWebPath: "Test string",
            parent: "Test string",
        });
        /**
         * DeleteInstance deletes an instance associated with the given study, series, and SOP Instance UID. Delete requests are equivalent to the GET requests specified in the Retrieve
         * transaction. Study and series search results can take a few seconds to be updated after an instance is deleted using DeleteInstance. For samples that show how to call DeleteInstance,
         * see [Deleting a study, series, or instance](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#deleting_a_study_series_or_instance).
         */
        await gapi.client.healthcare.projects.locations.datasets.dicomStores.studies.series.instances.delete({
            dicomWebPath: "Test string",
            parent: "Test string",
        });
        /**
         * RetrieveInstance returns instance associated with the given study, series, and SOP Instance UID. See [RetrieveTransaction]
         * (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4). For details on the implementation of RetrieveInstance, see [DICOM
         * study/series/instances](https://cloud.google.com/healthcare/docs/dicom#dicom_studyseriesinstances) and [DICOM instances](https://cloud.google.com/healthcare/docs/dicom#dicom_instances)
         * in the Cloud Healthcare API conformance statement. For samples that show how to call RetrieveInstance, see [Retrieving an
         * instance](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_an_instance).
         */
        await gapi.client.healthcare.projects.locations.datasets.dicomStores.studies.series.instances.retrieveInstance({
            dicomWebPath: "Test string",
            parent: "Test string",
        });
        /**
         * RetrieveInstanceMetadata returns instance associated with the given study, series, and SOP Instance UID presented as metadata with the bulk data removed. See [RetrieveTransaction]
         * (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4). For details on the implementation of RetrieveInstanceMetadata, see [Metadata
         * resources](https://cloud.google.com/healthcare/docs/dicom#metadata_resources) in the Cloud Healthcare API conformance statement. For samples that show how to call
         * RetrieveInstanceMetadata, see [Retrieving metadata](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_metadata).
         */
        await gapi.client.healthcare.projects.locations.datasets.dicomStores.studies.series.instances.retrieveMetadata({
            dicomWebPath: "Test string",
            parent: "Test string",
        });
        /**
         * RetrieveRenderedInstance returns instance associated with the given study, series, and SOP Instance UID in an acceptable Rendered Media Type. See [RetrieveTransaction]
         * (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4). For details on the implementation of RetrieveRenderedInstance, see [Rendered
         * resources](https://cloud.google.com/healthcare/docs/dicom#rendered_resources) in the Cloud Healthcare API conformance statement. For samples that show how to call
         * RetrieveRenderedInstance, see [Retrieving consumer image formats](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_consumer_image_formats).
         */
        await gapi.client.healthcare.projects.locations.datasets.dicomStores.studies.series.instances.retrieveRendered({
            dicomWebPath: "Test string",
            parent: "Test string",
        });
        /**
         * RetrieveFrames returns instances associated with the given study, series, SOP Instance UID and frame numbers. See [RetrieveTransaction]
         * (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4}. For details on the implementation of RetrieveFrames, see [DICOM
         * frames](https://cloud.google.com/healthcare/docs/dicom#dicom_frames) in the Cloud Healthcare API conformance statement. For samples that show how to call RetrieveFrames, see [Retrieving
         * DICOM data](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_dicom_data).
         */
        await gapi.client.healthcare.projects.locations.datasets.dicomStores.studies.series.instances.frames.retrieveFrames({
            dicomWebPath: "Test string",
            parent: "Test string",
        });
        /**
         * RetrieveRenderedFrames returns instances associated with the given study, series, SOP Instance UID and frame numbers in an acceptable Rendered Media Type. See [RetrieveTransaction]
         * (http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4). For details on the implementation of RetrieveRenderedFrames, see [Rendered
         * resources](https://cloud.google.com/healthcare/docs/dicom#rendered_resources) in the Cloud Healthcare API conformance statement. For samples that show how to call
         * RetrieveRenderedFrames, see [Retrieving consumer image formats](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_consumer_image_formats).
         */
        await gapi.client.healthcare.projects.locations.datasets.dicomStores.studies.series.instances.frames.retrieveRendered({
            dicomWebPath: "Test string",
            parent: "Test string",
        });
        /** Creates a new FHIR store within the parent dataset. */
        await gapi.client.healthcare.projects.locations.datasets.fhirStores.create({
            fhirStoreId: "Test string",
            parent: "Test string",
        }, {
            complexDataTypeReferenceParsing: "Test string",
            defaultSearchHandlingStrict: true,
            disableReferentialIntegrity: true,
            disableResourceVersioning: true,
            enableUpdateCreate: true,
            labels: {
                A: "Test string"
            },
            name: "Test string",
            notificationConfig: {
                pubsubTopic: "Test string",
            },
            streamConfigs: [
                {
                    bigqueryDestination: {
                        datasetUri: "Test string",
                        force: true,
                        schemaConfig: {
                            lastUpdatedPartitionConfig: {
                                expirationMs: "Test string",
                                type: "Test string",
                            },
                            recursiveStructureDepth: "Test string",
                            schemaType: "Test string",
                        },
                        writeDisposition: "Test string",
                    },
                    deidentifiedStoreDestination: {
                        config: {
                            dicom: {
                                filterProfile: "Test string",
                                keepList: {
                                    tags: [
                                        "Test string"
                                    ],
                                },
                                removeList: {
                                    tags: [
                                        "Test string"
                                    ],
                                },
                                skipIdRedaction: true,
                            },
                            fhir: {
                                defaultKeepExtensions: true,
                                fieldMetadataList: [
                                    {
                                        action: "Test string",
                                        paths: [
                                            "Test string"
                                        ],
                                    }
                                ],
                            },
                            image: {
                                textRedactionMode: "Test string",
                            },
                            text: {
                                transformations: [
                                    {
                                        characterMaskConfig: {
                                            maskingCharacter: "Test string",
                                        },
                                        cryptoHashConfig: {
                                            cryptoKey: "Test string",
                                            kmsWrapped: {
                                                cryptoKey: "Test string",
                                                wrappedKey: "Test string",
                                            },
                                        },
                                        dateShiftConfig: {
                                            cryptoKey: "Test string",
                                            kmsWrapped: {
                                                cryptoKey: "Test string",
                                                wrappedKey: "Test string",
                                            },
                                        },
                                        infoTypes: [
                                            "Test string"
                                        ],
                                        redactConfig: {
                                        },
                                        replaceWithInfoTypeConfig: {
                                        },
                                    }
                                ],
                            },
                        },
                        store: "Test string",
                    },
                    resourceTypes: [
                        "Test string"
                    ],
                }
            ],
            validationConfig: {
                disableFhirpathValidation: true,
                disableProfileValidation: true,
                disableReferenceTypeValidation: true,
                disableRequiredFieldValidation: true,
                enabledImplementationGuides: [
                    "Test string"
                ],
            },
            version: "Test string",
        });
        /**
         * De-identifies data from the source store and writes it to the destination store. The metadata field type is OperationMetadata. If the request is successful, the response field type is
         * DeidentifyFhirStoreSummary. If errors occur, error is set. Error details are also logged to Cloud Logging (see [Viewing error logs in Cloud
         * Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)).
         */
        await gapi.client.healthcare.projects.locations.datasets.fhirStores.deidentify({
            sourceStore: "Test string",
        }, {
            config: {
                dicom: {
                    filterProfile: "Test string",
                    keepList: {
                        tags: [
                            "Test string"
                        ],
                    },
                    removeList: {
                        tags: [
                            "Test string"
                        ],
                    },
                    skipIdRedaction: true,
                },
                fhir: {
                    defaultKeepExtensions: true,
                    fieldMetadataList: [
                        {
                            action: "Test string",
                            paths: [
                                "Test string"
                            ],
                        }
                    ],
                },
                image: {
                    textRedactionMode: "Test string",
                },
                text: {
                    transformations: [
                        {
                            characterMaskConfig: {
                                maskingCharacter: "Test string",
                            },
                            cryptoHashConfig: {
                                cryptoKey: "Test string",
                                kmsWrapped: {
                                    cryptoKey: "Test string",
                                    wrappedKey: "Test string",
                                },
                            },
                            dateShiftConfig: {
                                cryptoKey: "Test string",
                                kmsWrapped: {
                                    cryptoKey: "Test string",
                                    wrappedKey: "Test string",
                                },
                            },
                            infoTypes: [
                                "Test string"
                            ],
                            redactConfig: {
                            },
                            replaceWithInfoTypeConfig: {
                            },
                        }
                    ],
                },
            },
            destinationStore: "Test string",
            gcsConfigUri: "Test string",
            resourceFilter: {
                resources: {
                    resources: [
                        "Test string"
                    ],
                },
            },
            skipModifiedResources: true,
        });
        /** Deletes the specified FHIR store and removes all resources within it. */
        await gapi.client.healthcare.projects.locations.datasets.fhirStores.delete({
            name: "Test string",
        });
        /**
         * Export resources from the FHIR store to the specified destination. This method returns an Operation that can be used to track the status of the export by calling GetOperation. Immediate
         * fatal errors appear in the error field, errors are also logged to Cloud Logging (see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)).
         * Otherwise, when the operation finishes, a detailed response of type ExportResourcesResponse is returned in the response field. The metadata field type for this operation is
         * OperationMetadata.
         */
        await gapi.client.healthcare.projects.locations.datasets.fhirStores.export({
            name: "Test string",
        }, {
            _since: "Test string",
            _type: "Test string",
            bigqueryDestination: {
                datasetUri: "Test string",
                force: true,
                schemaConfig: {
                    lastUpdatedPartitionConfig: {
                        expirationMs: "Test string",
                        type: "Test string",
                    },
                    recursiveStructureDepth: "Test string",
                    schemaType: "Test string",
                },
                writeDisposition: "Test string",
            },
            gcsDestination: {
                uriPrefix: "Test string",
            },
        });
        /** Gets the configuration of the specified FHIR store. */
        await gapi.client.healthcare.projects.locations.datasets.fhirStores.get({
            name: "Test string",
        });
        /** Gets metrics associated with the FHIR store. */
        await gapi.client.healthcare.projects.locations.datasets.fhirStores.getFHIRStoreMetrics({
            name: "Test string",
        });
        /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
        await gapi.client.healthcare.projects.locations.datasets.fhirStores.getIamPolicy({
            "options.requestedPolicyVersion": 42,
            resource: "Test string",
        });
        /**
         * Imports resources to the FHIR store by loading data from the specified sources. This method is optimized to load large quantities of data using import semantics that ignore some FHIR
         * store configuration options and are not suitable for all use cases. It is primarily intended to load data into an empty FHIR store that is not being used by other clients. In cases
         * where this method is not appropriate, consider using ExecuteBundle to load data. Every resource in the input must contain a client-supplied ID. Each resource is stored using the
         * supplied ID regardless of the enable_update_create setting on the FHIR store. It is strongly advised not to include or encode any sensitive data such as patient identifiers in
         * client-specified resource IDs. Those IDs are part of the FHIR resource path recorded in Cloud Audit Logs and Cloud Pub/Sub notifications. Those IDs can also be contained in reference
         * fields within other resources. The import process does not enforce referential integrity, regardless of the disable_referential_integrity setting on the FHIR store. This allows the
         * import of resources with arbitrary interdependencies without considering grouping or ordering, but if the input data contains invalid references or if some resources fail to be
         * imported, the FHIR store might be left in a state that violates referential integrity. The import process does not trigger Pub/Sub notification or BigQuery streaming update, regardless
         * of how those are configured on the FHIR store. If a resource with the specified ID already exists, the most recent version of the resource is overwritten without creating a new
         * historical version, regardless of the disable_resource_versioning setting on the FHIR store. If transient failures occur during the import, it's possible that successfully imported
         * resources will be overwritten more than once. The import operation is idempotent unless the input data contains multiple valid resources with the same ID but different contents. In that
         * case, after the import completes, the store contains exactly one resource with that ID but there is no ordering guarantee on which version of the contents it will have. The operation
         * result counters do not count duplicate IDs as an error and count one success for each resource in the input, which might result in a success count larger than the number of resources in
         * the FHIR store. This often occurs when importing data organized in bundles produced by Patient-everything where each bundle contains its own copy of a resource such as Practitioner that
         * might be referred to by many patients. If some resources fail to import, for example due to parsing errors, successfully imported resources are not rolled back. The location and format
         * of the input data is specified by the parameters in ImportResourcesRequest. Note that if no format is specified, this method assumes the `BUNDLE` format. When using the `BUNDLE` format
         * this method ignores the `Bundle.type` field, except that `history` bundles are rejected, and does not apply any of the bundle processing semantics for batch or transaction bundles.
         * Unlike in ExecuteBundle, transaction bundles are not executed as a single transaction and bundle-internal references are not rewritten. The bundle is treated as a collection of
         * resources to be written as provided in `Bundle.entry.resource`, ignoring `Bundle.entry.request`. As an example, this allows the import of `searchset` bundles produced by a FHIR search
         * or Patient-everything operation. This method returns an Operation that can be used to track the status of the import by calling GetOperation. Immediate fatal errors appear in the error
         * field, errors are also logged to Cloud Logging (see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)). Otherwise, when the operation
         * finishes, a detailed response of type ImportResourcesResponse is returned in the response field. The metadata field type for this operation is OperationMetadata.
         */
        await gapi.client.healthcare.projects.locations.datasets.fhirStores.import({
            name: "Test string",
        }, {
            contentStructure: "Test string",
            gcsSource: {
                uri: "Test string",
            },
        });
        /** Lists the FHIR stores in the given dataset. */
        await gapi.client.healthcare.projects.locations.datasets.fhirStores.list({
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the configuration of the specified FHIR store. */
        await gapi.client.healthcare.projects.locations.datasets.fhirStores.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            complexDataTypeReferenceParsing: "Test string",
            defaultSearchHandlingStrict: true,
            disableReferentialIntegrity: true,
            disableResourceVersioning: true,
            enableUpdateCreate: true,
            labels: {
                A: "Test string"
            },
            name: "Test string",
            notificationConfig: {
                pubsubTopic: "Test string",
            },
            streamConfigs: [
                {
                    bigqueryDestination: {
                        datasetUri: "Test string",
                        force: true,
                        schemaConfig: {
                            lastUpdatedPartitionConfig: {
                                expirationMs: "Test string",
                                type: "Test string",
                            },
                            recursiveStructureDepth: "Test string",
                            schemaType: "Test string",
                        },
                        writeDisposition: "Test string",
                    },
                    deidentifiedStoreDestination: {
                        config: {
                            dicom: {
                                filterProfile: "Test string",
                                keepList: {
                                    tags: [
                                        "Test string"
                                    ],
                                },
                                removeList: {
                                    tags: [
                                        "Test string"
                                    ],
                                },
                                skipIdRedaction: true,
                            },
                            fhir: {
                                defaultKeepExtensions: true,
                                fieldMetadataList: [
                                    {
                                        action: "Test string",
                                        paths: [
                                            "Test string"
                                        ],
                                    }
                                ],
                            },
                            image: {
                                textRedactionMode: "Test string",
                            },
                            text: {
                                transformations: [
                                    {
                                        characterMaskConfig: {
                                            maskingCharacter: "Test string",
                                        },
                                        cryptoHashConfig: {
                                            cryptoKey: "Test string",
                                            kmsWrapped: {
                                                cryptoKey: "Test string",
                                                wrappedKey: "Test string",
                                            },
                                        },
                                        dateShiftConfig: {
                                            cryptoKey: "Test string",
                                            kmsWrapped: {
                                                cryptoKey: "Test string",
                                                wrappedKey: "Test string",
                                            },
                                        },
                                        infoTypes: [
                                            "Test string"
                                        ],
                                        redactConfig: {
                                        },
                                        replaceWithInfoTypeConfig: {
                                        },
                                    }
                                ],
                            },
                        },
                        store: "Test string",
                    },
                    resourceTypes: [
                        "Test string"
                    ],
                }
            ],
            validationConfig: {
                disableFhirpathValidation: true,
                disableProfileValidation: true,
                disableReferenceTypeValidation: true,
                disableRequiredFieldValidation: true,
                enabledImplementationGuides: [
                    "Test string"
                ],
            },
            version: "Test string",
        });
        /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
        await gapi.client.healthcare.projects.locations.datasets.fhirStores.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                auditConfigs: [
                    {
                        auditLogConfigs: [
                            {
                                exemptedMembers: [
                                    "Test string"
                                ],
                                logType: "Test string",
                            }
                        ],
                        service: "Test string",
                    }
                ],
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"
                        ],
                        role: "Test string",
                    }
                ],
                etag: "Test string",
                version: 42,
            },
            updateMask: "Test string",
        });
        /**
         * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This
         * operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
         */
        await gapi.client.healthcare.projects.locations.datasets.fhirStores.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"
            ],
        });
        /**
         * Gets the FHIR capability statement ([STU3](http://hl7.org/implement/standards/fhir/STU3/capabilitystatement.html),
         * [R4](http://hl7.org/implement/standards/fhir/R4/capabilitystatement.html)), or the [conformance statement](http://hl7.org/implement/standards/fhir/DSTU2/conformance.html) in the DSTU2
         * case for the store, which contains a description of functionality supported by the server. Implements the FHIR standard capabilities interaction
         * ([STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#capabilities), [R4](http://hl7.org/implement/standards/fhir/R4/http.html#capabilities)), or the [conformance
         * interaction](http://hl7.org/implement/standards/fhir/DSTU2/http.html#conformance) in the DSTU2 case. On success, the response body contains a JSON-encoded representation of a
         * `CapabilityStatement` resource.
         */
        await gapi.client.healthcare.projects.locations.datasets.fhirStores.fhir.capabilities({
            name: "Test string",
        });
        /**
         * Creates a FHIR resource. Implements the FHIR standard create interaction ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#create),
         * [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#create), [R4](http://hl7.org/implement/standards/fhir/R4/http.html#create)), which creates a new resource with a
         * server-assigned resource ID. The request body must contain a JSON-encoded FHIR resource, and the request headers must contain `Content-Type: application/fhir+json`. On success, the
         * response body contains a JSON-encoded representation of the resource as it was created on the server, including the server-assigned resource ID and version ID. Errors generated by the
         * FHIR store contain a JSON-encoded `OperationOutcome` resource describing the reason for the error. If the request cannot be mapped to a valid API method on a FHIR store, a generic GCP
         * error might be returned instead. For samples that show how to call `create`, see [Creating a FHIR
         * resource](https://cloud.google.com/healthcare/docs/how-tos/fhir-resources#creating_a_fhir_resource).
         */
        await gapi.client.healthcare.projects.locations.datasets.fhirStores.fhir.create({
            parent: "Test string",
            type: "Test string",
        }, {
            contentType: "Test string",
            data: "Test string",
            extensions: [
                {
                    A: 42
                }
            ],
        });
        /**
         * Deletes a FHIR resource. Implements the FHIR standard delete interaction ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#delete),
         * [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#delete), [R4](http://hl7.org/implement/standards/fhir/R4/http.html#delete)). Note: Unless resource versioning is disabled
         * by setting the disable_resource_versioning flag on the FHIR store, the deleted resources will be moved to a history repository that can still be retrieved through vread and related
         * methods, unless they are removed by the purge method. For samples that show how to call `delete`, see [Deleting a FHIR
         * resource](https://cloud.google.com/healthcare/docs/how-tos/fhir-resources#deleting_a_fhir_resource).
         */
        await gapi.client.healthcare.projects.locations.datasets.fhirStores.fhir.delete({
            name: "Test string",
        });
        /**
         * Executes all the requests in the given Bundle. Implements the FHIR standard batch/transaction interaction ([DSTU2](https://hl7.org/implement/standards/fhir/DSTU2/http.html#transaction),
         * [STU3](https://hl7.org/implement/standards/fhir/STU3/http.html#transaction), [R4](https://hl7.org/implement/standards/fhir/R4/http.html#transaction)). Supports all interactions within a
         * bundle, except search. This method accepts Bundles of type `batch` and `transaction`, processing them according to the batch processing rules
         * ([DSTU2](https://hl7.org/implement/standards/fhir/DSTU2/http.html#2.1.0.16.1), [STU3](https://hl7.org/implement/standards/fhir/STU3/http.html#2.21.0.17.1),
         * [R4](https://hl7.org/implement/standards/fhir/R4/http.html#brules)) and transaction processing rules ([DSTU2](https://hl7.org/implement/standards/fhir/DSTU2/http.html#2.1.0.16.2),
         * [STU3](https://hl7.org/implement/standards/fhir/STU3/http.html#2.21.0.17.2), [R4](https://hl7.org/implement/standards/fhir/R4/http.html#trules)). The request body must contain a
         * JSON-encoded FHIR `Bundle` resource, and the request headers must contain `Content-Type: application/fhir+json`. For a batch bundle or a successful transaction, the response body
         * contains a JSON-encoded representation of a `Bundle` resource of type `batch-response` or `transaction-response` containing one entry for each entry in the request, with the outcome of
         * processing the entry. In the case of an error for a transaction bundle, the response body contains a JSON-encoded `OperationOutcome` resource describing the reason for the error. If the
         * request cannot be mapped to a valid API method on a FHIR store, a generic GCP error might be returned instead. This method checks permissions for each request in the bundle. The
         * `executeBundle` permission is required to call this method, but you must also grant sufficient permissions to execute the individual requests in the bundle. For example, if the bundle
         * contains a request to create a FHIR resource, the caller must also have been granted the `healthcare.fhirResources.create` permission. You can use audit logs to view the permissions for
         * `executeBundle` and each request in the bundle. For more information, see [Viewing Cloud Audit logs](https://cloud.google.com/healthcare-api/docs/how-tos/audit-logging). For samples
         * that show how to call `executeBundle`, see [Managing FHIR resources using FHIR bundles](https://cloud.google.com/healthcare/docs/how-tos/fhir-bundles).
         */
        await gapi.client.healthcare.projects.locations.datasets.fhirStores.fhir.executeBundle({
            parent: "Test string",
        }, {
            contentType: "Test string",
            data: "Test string",
            extensions: [
                {
                    A: 42
                }
            ],
        });
        /**
         * Lists all the versions of a resource (including the current version and deleted versions) from the FHIR store. Implements the per-resource form of the FHIR standard history interaction
         * ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#history), [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#history),
         * [R4](http://hl7.org/implement/standards/fhir/R4/http.html#history)). On success, the response body contains a JSON-encoded representation of a `Bundle` resource of type `history`,
         * containing the version history sorted from most recent to oldest versions. Errors generated by the FHIR store contain a JSON-encoded `OperationOutcome` resource describing the reason
         * for the error. If the request cannot be mapped to a valid API method on a FHIR store, a generic GCP error might be returned instead. For samples that show how to call `history`, see
         * [Listing FHIR resource versions](https://cloud.google.com/healthcare/docs/how-tos/fhir-resources#listing_fhir_resource_versions).
         */
        await gapi.client.healthcare.projects.locations.datasets.fhirStores.fhir.history({
            _at: "Test string",
            _count: 42,
            _page_token: "Test string",
            _since: "Test string",
            name: "Test string",
        });
        /**
         * Updates part of an existing resource by applying the operations specified in a [JSON Patch](http://jsonpatch.com/) document. Implements the FHIR standard patch interaction
         * ([STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#patch), [R4](http://hl7.org/implement/standards/fhir/R4/http.html#patch)). DSTU2 doesn't define a patch method, but the
         * server supports it in the same way it supports STU3. The request body must contain a JSON Patch document, and the request headers must contain `Content-Type:
         * application/json-patch+json`. On success, the response body contains a JSON-encoded representation of the updated resource, including the server-assigned version ID. Errors generated by
         * the FHIR store contain a JSON-encoded `OperationOutcome` resource describing the reason for the error. If the request cannot be mapped to a valid API method on a FHIR store, a generic
         * GCP error might be returned instead. For samples that show how to call `patch`, see [Patching a FHIR
         * resource](https://cloud.google.com/healthcare/docs/how-tos/fhir-resources#patching_a_fhir_resource).
         */
        await gapi.client.healthcare.projects.locations.datasets.fhirStores.fhir.patch({
            name: "Test string",
        }, {
            contentType: "Test string",
            data: "Test string",
            extensions: [
                {
                    A: 42
                }
            ],
        });
        /**
         * Retrieves a Patient resource and resources related to that patient. Implements the FHIR extended operation Patient-everything
         * ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/patient-operations.html#everything), [STU3](http://hl7.org/implement/standards/fhir/STU3/patient-operations.html#everything),
         * [R4](http://hl7.org/implement/standards/fhir/R4/patient-operations.html#everything)). On success, the response body contains a JSON-encoded representation of a `Bundle` resource of type
         * `searchset`, containing the results of the operation. Errors generated by the FHIR store contain a JSON-encoded `OperationOutcome` resource describing the reason for the error. If the
         * request cannot be mapped to a valid API method on a FHIR store, a generic GCP error might be returned instead. The resources in scope for the response are: * The patient resource
         * itself. * All the resources directly referenced by the patient resource. * Resources directly referencing the patient resource that meet the inclusion criteria. The inclusion criteria
         * are based on the membership rules in the patient compartment definition ([DSTU2](http://hl7.org/fhir/DSTU2/compartment-patient.html),
         * [STU3](http://www.hl7.org/fhir/stu3/compartmentdefinition-patient.html), [R4](http://hl7.org/fhir/R4/compartmentdefinition-patient.html)), which details the eligible resource types and
         * referencing search parameters. For samples that show how to call `Patient-everything`, see [Getting all patient compartment
         * resources](https://cloud.google.com/healthcare/docs/how-tos/fhir-resources#getting_all_patient_compartment_resources).
         */
        await gapi.client.healthcare.projects.locations.datasets.fhirStores.fhir["Patient-everything"]({
            _count: 42,
            _page_token: "Test string",
            _since: "Test string",
            _type: "Test string",
            end: "Test string",
            name: "Test string",
            start: "Test string",
        });
        /**
         * Gets the contents of a FHIR resource. Implements the FHIR standard read interaction ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#read),
         * [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#read), [R4](http://hl7.org/implement/standards/fhir/R4/http.html#read)). Also supports the FHIR standard conditional read
         * interaction ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#cread), [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#cread),
         * [R4](http://hl7.org/implement/standards/fhir/R4/http.html#cread)) specified by supplying an `If-Modified-Since` header with a date/time value or an `If-None-Match` header with an ETag
         * value. On success, the response body contains a JSON-encoded representation of the resource. Errors generated by the FHIR store contain a JSON-encoded `OperationOutcome` resource
         * describing the reason for the error. If the request cannot be mapped to a valid API method on a FHIR store, a generic GCP error might be returned instead. For samples that show how to
         * call `read`, see [Getting a FHIR resource](https://cloud.google.com/healthcare/docs/how-tos/fhir-resources#getting_a_fhir_resource).
         */
        await gapi.client.healthcare.projects.locations.datasets.fhirStores.fhir.read({
            name: "Test string",
        });
        /**
         * Deletes all the historical versions of a resource (excluding the current version) from the FHIR store. To remove all versions of a resource, first delete the current version and then
         * call this method. This is not a FHIR standard operation. For samples that show how to call `Resource-purge`, see [Deleting historical versions of a FHIR
         * resource](https://cloud.google.com/healthcare/docs/how-tos/fhir-resources#deleting_historical_versions_of_a_fhir_resource).
         */
        await gapi.client.healthcare.projects.locations.datasets.fhirStores.fhir["Resource-purge"]({
            name: "Test string",
        });
        /**
         * Validates an input FHIR resource's conformance to its profiles and the profiles configured on the FHIR store. Implements the FHIR extended operation $validate
         * ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/resource-operations.html#validate), [STU3](http://hl7.org/implement/standards/fhir/STU3/resource-operations.html#validate), or
         * [R4](http://hl7.org/implement/standards/fhir/R4/resource-operation-validate.html)). The request body must contain a JSON-encoded FHIR resource, and the request headers must contain
         * `Content-Type: application/fhir+json`. The `Parameters` input syntax is not supported. The `profile` query parameter can be used to request that the resource only be validated against a
         * specific profile. If a profile with the given URL cannot be found in the FHIR store then an error is returned. Errors generated by validation contain a JSON-encoded `OperationOutcome`
         * resource describing the reason for the error. If the request cannot be mapped to a valid API method on a FHIR store, a generic GCP error might be returned instead.
         */
        await gapi.client.healthcare.projects.locations.datasets.fhirStores.fhir["Resource-validate"]({
            parent: "Test string",
            profile: "Test string",
            type: "Test string",
        }, {
            contentType: "Test string",
            data: "Test string",
            extensions: [
                {
                    A: 42
                }
            ],
        });
        /**
         * Searches for resources in the given FHIR store according to criteria specified as query parameters. Implements the FHIR standard search interaction
         * ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#search), [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#search),
         * [R4](http://hl7.org/implement/standards/fhir/R4/http.html#search)) using the search semantics described in the FHIR Search specification
         * ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/search.html), [STU3](http://hl7.org/implement/standards/fhir/STU3/search.html),
         * [R4](http://hl7.org/implement/standards/fhir/R4/search.html)). Supports four methods of search defined by the specification: * `GET [base]?[parameters]` to search across all resources.
         * * `GET [base]/[type]?[parameters]` to search resources of a specified type. * `POST [base]/_search?[parameters]` as an alternate form having the same semantics as the `GET` method
         * across all resources. * `POST [base]/[type]/_search?[parameters]` as an alternate form having the same semantics as the `GET` method for the specified type. The `GET` and `POST` methods
         * do not support compartment searches. The `POST` method does not support `application/x-www-form-urlencoded` search parameters. On success, the response body contains a JSON-encoded
         * representation of a `Bundle` resource of type `searchset`, containing the results of the search. Errors generated by the FHIR store contain a JSON-encoded `OperationOutcome` resource
         * describing the reason for the error. If the request cannot be mapped to a valid API method on a FHIR store, a generic GCP error might be returned instead. The server's capability
         * statement, retrieved through capabilities, indicates what search parameters are supported on each FHIR resource. A list of all search parameters defined by the specification can be
         * found in the FHIR Search Parameter Registry ([STU3](http://hl7.org/implement/standards/fhir/STU3/searchparameter-registry.html),
         * [R4](http://hl7.org/implement/standards/fhir/R4/searchparameter-registry.html)). FHIR search parameters for DSTU2 can be found on each resource's definition page. Supported search
         * modifiers: `:missing`, `:exact`, `:contains`, `:text`, `:in`, `:not-in`, `:above`, `:below`, `:[type]`, `:not`, and `recurse` (DSTU2 and STU3) or `:iterate` (R4). Supported search
         * result parameters: `_sort`, `_count`, `_include`, `_revinclude`, `_summary=text`, `_summary=data`, and `_elements`. The maximum number of search results returned defaults to 100, which
         * can be overridden by the `_count` parameter up to a maximum limit of 1000. If there are additional results, the returned `Bundle` contains a link of `relation` "next", which has a
         * `_page_token` parameter for an opaque pagination token that can be used to retrieve the next page. Resources with a total size larger than 5MB or a field count larger than 50,000 might
         * not be fully searchable as the server might trim its generated search index in those cases. Note: FHIR resources are indexed asynchronously, so there might be a slight delay between the
         * time a resource is created or changes and when the change is reflected in search results. For samples and detailed information, see [Searching for FHIR
         * resources](https://cloud.google.com/healthcare/docs/how-tos/fhir-search) and [Advanced FHIR search features](https://cloud.google.com/healthcare/docs/how-tos/fhir-advanced-search).
         */
        await gapi.client.healthcare.projects.locations.datasets.fhirStores.fhir.search({
            parent: "Test string",
        }, {
            resourceType: "Test string",
        });
        /**
         * Searches for resources in the given FHIR store according to criteria specified as query parameters. Implements the FHIR standard search interaction
         * ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#search), [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#search),
         * [R4](http://hl7.org/implement/standards/fhir/R4/http.html#search)) using the search semantics described in the FHIR Search specification
         * ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/search.html), [STU3](http://hl7.org/implement/standards/fhir/STU3/search.html),
         * [R4](http://hl7.org/implement/standards/fhir/R4/search.html)). Supports four methods of search defined by the specification: * `GET [base]?[parameters]` to search across all resources.
         * * `GET [base]/[type]?[parameters]` to search resources of a specified type. * `POST [base]/_search?[parameters]` as an alternate form having the same semantics as the `GET` method
         * across all resources. * `POST [base]/[type]/_search?[parameters]` as an alternate form having the same semantics as the `GET` method for the specified type. The `GET` and `POST` methods
         * do not support compartment searches. The `POST` method does not support `application/x-www-form-urlencoded` search parameters. On success, the response body contains a JSON-encoded
         * representation of a `Bundle` resource of type `searchset`, containing the results of the search. Errors generated by the FHIR store contain a JSON-encoded `OperationOutcome` resource
         * describing the reason for the error. If the request cannot be mapped to a valid API method on a FHIR store, a generic GCP error might be returned instead. The server's capability
         * statement, retrieved through capabilities, indicates what search parameters are supported on each FHIR resource. A list of all search parameters defined by the specification can be
         * found in the FHIR Search Parameter Registry ([STU3](http://hl7.org/implement/standards/fhir/STU3/searchparameter-registry.html),
         * [R4](http://hl7.org/implement/standards/fhir/R4/searchparameter-registry.html)). FHIR search parameters for DSTU2 can be found on each resource's definition page. Supported search
         * modifiers: `:missing`, `:exact`, `:contains`, `:text`, `:in`, `:not-in`, `:above`, `:below`, `:[type]`, `:not`, and `recurse` (DSTU2 and STU3) or `:iterate` (R4). Supported search
         * result parameters: `_sort`, `_count`, `_include`, `_revinclude`, `_summary=text`, `_summary=data`, and `_elements`. The maximum number of search results returned defaults to 100, which
         * can be overridden by the `_count` parameter up to a maximum limit of 1000. If there are additional results, the returned `Bundle` contains a link of `relation` "next", which has a
         * `_page_token` parameter for an opaque pagination token that can be used to retrieve the next page. Resources with a total size larger than 5MB or a field count larger than 50,000 might
         * not be fully searchable as the server might trim its generated search index in those cases. Note: FHIR resources are indexed asynchronously, so there might be a slight delay between the
         * time a resource is created or changes and when the change is reflected in search results. For samples and detailed information, see [Searching for FHIR
         * resources](https://cloud.google.com/healthcare/docs/how-tos/fhir-search) and [Advanced FHIR search features](https://cloud.google.com/healthcare/docs/how-tos/fhir-advanced-search).
         */
        await gapi.client.healthcare.projects.locations.datasets.fhirStores.fhir["search-type"]({
            parent: "Test string",
            resourceType: "Test string",
        }, {
            resourceType: "Test string",
        });
        /**
         * Updates the entire contents of a resource. Implements the FHIR standard update interaction ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#update),
         * [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#update), [R4](http://hl7.org/implement/standards/fhir/R4/http.html#update)). If the specified resource does not exist and
         * the FHIR store has enable_update_create set, creates the resource with the client-specified ID. It is strongly advised not to include or encode any sensitive data such as patient
         * identifiers in client-specified resource IDs. Those IDs are part of the FHIR resource path recorded in Cloud Audit Logs and Pub/Sub notifications. Those IDs can also be contained in
         * reference fields within other resources. The request body must contain a JSON-encoded FHIR resource, and the request headers must contain `Content-Type: application/fhir+json`. The
         * resource must contain an `id` element having an identical value to the ID in the REST path of the request. On success, the response body contains a JSON-encoded representation of the
         * updated resource, including the server-assigned version ID. Errors generated by the FHIR store contain a JSON-encoded `OperationOutcome` resource describing the reason for the error. If
         * the request cannot be mapped to a valid API method on a FHIR store, a generic GCP error might be returned instead. For samples that show how to call `update`, see [Updating a FHIR
         * resource](https://cloud.google.com/healthcare/docs/how-tos/fhir-resources#updating_a_fhir_resource).
         */
        await gapi.client.healthcare.projects.locations.datasets.fhirStores.fhir.update({
            name: "Test string",
        }, {
            contentType: "Test string",
            data: "Test string",
            extensions: [
                {
                    A: 42
                }
            ],
        });
        /**
         * Gets the contents of a version (current or historical) of a FHIR resource by version ID. Implements the FHIR standard vread interaction
         * ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/http.html#vread), [STU3](http://hl7.org/implement/standards/fhir/STU3/http.html#vread),
         * [R4](http://hl7.org/implement/standards/fhir/R4/http.html#vread)). On success, the response body contains a JSON-encoded representation of the resource. Errors generated by the FHIR
         * store contain a JSON-encoded `OperationOutcome` resource describing the reason for the error. If the request cannot be mapped to a valid API method on a FHIR store, a generic GCP error
         * might be returned instead. For samples that show how to call `vread`, see [Retrieving a FHIR resource
         * version](https://cloud.google.com/healthcare/docs/how-tos/fhir-resources#retrieving_a_fhir_resource_version).
         */
        await gapi.client.healthcare.projects.locations.datasets.fhirStores.fhir.vread({
            name: "Test string",
        });
        /** Creates a new HL7v2 store within the parent dataset. */
        await gapi.client.healthcare.projects.locations.datasets.hl7V2Stores.create({
            hl7V2StoreId: "Test string",
            parent: "Test string",
        }, {
            labels: {
                A: "Test string"
            },
            name: "Test string",
            notificationConfigs: [
                {
                    filter: "Test string",
                    pubsubTopic: "Test string",
                }
            ],
            parserConfig: {
                allowNullHeader: true,
                schema: {
                    ignoreMinOccurs: true,
                    schemas: [
                        {
                            messageSchemaConfigs: {
                                A: {
                                    choice: true,
                                    maxOccurs: 42,
                                    members: [
                                        {
                                            group: undefined,
                                            segment: {
                                                maxOccurs: 42,
                                                minOccurs: 42,
                                                type: "Test string",
                                            },
                                        }
                                    ],
                                    minOccurs: 42,
                                    name: "Test string",
                                }
                            },
                            version: [
                                {
                                    mshField: "Test string",
                                    value: "Test string",
                                }
                            ],
                        }
                    ],
                    schematizedParsingType: "Test string",
                    types: [
                        {
                            type: [
                                {
                                    fields: [
                                        {
                                            maxOccurs: 42,
                                            minOccurs: 42,
                                            name: "Test string",
                                            table: "Test string",
                                            type: "Test string",
                                        }
                                    ],
                                    name: "Test string",
                                    primitive: "Test string",
                                }
                            ],
                            version: [
                                {
                                    mshField: "Test string",
                                    value: "Test string",
                                }
                            ],
                        }
                    ],
                    unexpectedSegmentHandling: "Test string",
                },
                segmentTerminator: "Test string",
                version: "Test string",
            },
            rejectDuplicateMessage: true,
        });
        /** Deletes the specified HL7v2 store and removes all messages that it contains. */
        await gapi.client.healthcare.projects.locations.datasets.hl7V2Stores.delete({
            name: "Test string",
        });
        /**
         * Exports the messages to a destination. To filter messages to be exported, define a filter using the start and end time, relative to the message generation time (MSH.7). This API returns
         * an Operation that can be used to track the status of the job by calling GetOperation. Immediate fatal errors appear in the error field. Otherwise, when the operation finishes, a
         * detailed response of type ExportMessagesResponse is returned in the response field. The metadata field type for this operation is OperationMetadata.
         */
        await gapi.client.healthcare.projects.locations.datasets.hl7V2Stores.export({
            name: "Test string",
        }, {
            endTime: "Test string",
            gcsDestination: {
                contentStructure: "Test string",
                messageView: "Test string",
                uriPrefix: "Test string",
            },
            startTime: "Test string",
        });
        /** Gets the specified HL7v2 store. */
        await gapi.client.healthcare.projects.locations.datasets.hl7V2Stores.get({
            name: "Test string",
        });
        /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
        await gapi.client.healthcare.projects.locations.datasets.hl7V2Stores.getIamPolicy({
            "options.requestedPolicyVersion": 42,
            resource: "Test string",
        });
        /**
         * Import messages to the HL7v2 store by loading data from the specified sources. This method is optimized to load large quantities of data using import semantics that ignore some HL7v2
         * store configuration options and are not suitable for all use cases. It is primarily intended to load data into an empty HL7v2 store that is not being used by other clients. An existing
         * message will be overwritten if a duplicate message is imported. A duplicate message is a message with the same raw bytes as a message that already exists in this HL7v2 store. When a
         * message is overwritten, its labels will also be overwritten. The import operation is idempotent unless the input data contains multiple valid messages with the same raw bytes but
         * different labels. In that case, after the import completes, the store contains exactly one message with those raw bytes but there is no ordering guarantee on which version of the labels
         * it has. The operation result counters do not count duplicated raw bytes as an error and count one success for each message in the input, which might result in a success count larger
         * than the number of messages in the HL7v2 store. If some messages fail to import, for example due to parsing errors, successfully imported messages are not rolled back. This method
         * returns an Operation that can be used to track the status of the import by calling GetOperation. Immediate fatal errors appear in the error field, errors are also logged to Cloud
         * Logging (see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)). Otherwise, when the operation finishes, a response of type
         * ImportMessagesResponse is returned in the response field. The metadata field type for this operation is OperationMetadata.
         */
        await gapi.client.healthcare.projects.locations.datasets.hl7V2Stores.import({
            name: "Test string",
        }, {
            gcsSource: {
                uri: "Test string",
            },
        });
        /** Lists the HL7v2 stores in the given dataset. */
        await gapi.client.healthcare.projects.locations.datasets.hl7V2Stores.list({
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the HL7v2 store. */
        await gapi.client.healthcare.projects.locations.datasets.hl7V2Stores.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            labels: {
                A: "Test string"
            },
            name: "Test string",
            notificationConfigs: [
                {
                    filter: "Test string",
                    pubsubTopic: "Test string",
                }
            ],
            parserConfig: {
                allowNullHeader: true,
                schema: {
                    ignoreMinOccurs: true,
                    schemas: [
                        {
                            messageSchemaConfigs: {
                                A: {
                                    choice: true,
                                    maxOccurs: 42,
                                    members: [
                                        {
                                            group: undefined,
                                            segment: {
                                                maxOccurs: 42,
                                                minOccurs: 42,
                                                type: "Test string",
                                            },
                                        }
                                    ],
                                    minOccurs: 42,
                                    name: "Test string",
                                }
                            },
                            version: [
                                {
                                    mshField: "Test string",
                                    value: "Test string",
                                }
                            ],
                        }
                    ],
                    schematizedParsingType: "Test string",
                    types: [
                        {
                            type: [
                                {
                                    fields: [
                                        {
                                            maxOccurs: 42,
                                            minOccurs: 42,
                                            name: "Test string",
                                            table: "Test string",
                                            type: "Test string",
                                        }
                                    ],
                                    name: "Test string",
                                    primitive: "Test string",
                                }
                            ],
                            version: [
                                {
                                    mshField: "Test string",
                                    value: "Test string",
                                }
                            ],
                        }
                    ],
                    unexpectedSegmentHandling: "Test string",
                },
                segmentTerminator: "Test string",
                version: "Test string",
            },
            rejectDuplicateMessage: true,
        });
        /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
        await gapi.client.healthcare.projects.locations.datasets.hl7V2Stores.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                auditConfigs: [
                    {
                        auditLogConfigs: [
                            {
                                exemptedMembers: [
                                    "Test string"
                                ],
                                logType: "Test string",
                            }
                        ],
                        service: "Test string",
                    }
                ],
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"
                        ],
                        role: "Test string",
                    }
                ],
                etag: "Test string",
                version: 42,
            },
            updateMask: "Test string",
        });
        /**
         * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This
         * operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
         */
        await gapi.client.healthcare.projects.locations.datasets.hl7V2Stores.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"
            ],
        });
        /**
         * Parses and stores an HL7v2 message. This method triggers an asynchronous notification to any Pub/Sub topic configured in Hl7V2Store.Hl7V2NotificationConfig, if the filtering matches the
         * message. If an MLLP adapter is configured to listen to a Pub/Sub topic, the adapter transmits the message when a notification is received.
         */
        await gapi.client.healthcare.projects.locations.datasets.hl7V2Stores.messages.create({
            parent: "Test string",
        }, {
            message: {
                createTime: "Test string",
                data: "Test string",
                labels: {
                    A: "Test string"
                },
                messageType: "Test string",
                name: "Test string",
                parsedData: {
                    segments: [
                        {
                            fields: {
                                A: "Test string"
                            },
                            segmentId: "Test string",
                            setId: "Test string",
                        }
                    ],
                },
                patientIds: [
                    {
                        type: "Test string",
                        value: "Test string",
                    }
                ],
                schematizedData: {
                    data: "Test string",
                    error: "Test string",
                },
                sendFacility: "Test string",
                sendTime: "Test string",
            },
        });
        /** Deletes an HL7v2 message. */
        await gapi.client.healthcare.projects.locations.datasets.hl7V2Stores.messages.delete({
            name: "Test string",
        });
        /** Gets an HL7v2 message. */
        await gapi.client.healthcare.projects.locations.datasets.hl7V2Stores.messages.get({
            name: "Test string",
            view: "Test string",
        });
        /**
         * Parses and stores an HL7v2 message. This method triggers an asynchronous notification to any Pub/Sub topic configured in Hl7V2Store.Hl7V2NotificationConfig, if the filtering matches the
         * message. If an MLLP adapter is configured to listen to a Pub/Sub topic, the adapter transmits the message when a notification is received. If the method is successful, it generates a
         * response containing an HL7v2 acknowledgment (`ACK`) message. If the method encounters an error, it returns a negative acknowledgment (`NACK`) message. This behavior is suitable for
         * replying to HL7v2 interface systems that expect these acknowledgments.
         */
        await gapi.client.healthcare.projects.locations.datasets.hl7V2Stores.messages.ingest({
            parent: "Test string",
        }, {
            message: {
                createTime: "Test string",
                data: "Test string",
                labels: {
                    A: "Test string"
                },
                messageType: "Test string",
                name: "Test string",
                parsedData: {
                    segments: [
                        {
                            fields: {
                                A: "Test string"
                            },
                            segmentId: "Test string",
                            setId: "Test string",
                        }
                    ],
                },
                patientIds: [
                    {
                        type: "Test string",
                        value: "Test string",
                    }
                ],
                schematizedData: {
                    data: "Test string",
                    error: "Test string",
                },
                sendFacility: "Test string",
                sendTime: "Test string",
            },
        });
        /**
         * Lists all the messages in the given HL7v2 store with support for filtering. Note: HL7v2 messages are indexed asynchronously, so there might be a slight delay between the time a message
         * is created and when it can be found through a filter.
         */
        await gapi.client.healthcare.projects.locations.datasets.hl7V2Stores.messages.list({
            filter: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
            view: "Test string",
        });
        /**
         * Update the message. The contents of the message in Message.data and data extracted from the contents such as Message.create_time cannot be altered. Only the Message.labels field is
         * allowed to be updated. The labels in the request are merged with the existing set of labels. Existing labels with the same keys are updated.
         */
        await gapi.client.healthcare.projects.locations.datasets.hl7V2Stores.messages.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            data: "Test string",
            labels: {
                A: "Test string"
            },
            messageType: "Test string",
            name: "Test string",
            parsedData: {
                segments: [
                    {
                        fields: {
                            A: "Test string"
                        },
                        segmentId: "Test string",
                        setId: "Test string",
                    }
                ],
            },
            patientIds: [
                {
                    type: "Test string",
                    value: "Test string",
                }
            ],
            schematizedData: {
                data: "Test string",
                error: "Test string",
            },
            sendFacility: "Test string",
            sendTime: "Test string",
        });
        /**
         * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this
         * method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation
         * completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of
         * 1, corresponding to `Code.CANCELLED`.
         */
        await gapi.client.healthcare.projects.locations.datasets.operations.cancel({
            name: "Test string",
        }, {
        });
        /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
        await gapi.client.healthcare.projects.locations.datasets.operations.get({
            name: "Test string",
        });
        /**
         * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to
         * override the binding to use different resource name schemes, such as `users/*‍/operations`. To override the binding, API services can add a binding such as
         * `"/v1/{name=users/*}/operations"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must
         * ensure the name binding is the parent resource, without the operations collection id.
         */
        await gapi.client.healthcare.projects.locations.datasets.operations.list({
            filter: "Test string",
            name: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /**
         * Analyze heathcare entity in a document. Its response includes the recognized entity mentions and the relationships between them. AnalyzeEntities uses context aware models to detect
         * entities.
         */
        await gapi.client.healthcare.projects.locations.services.nlp.analyzeEntities({
            nlpService: "Test string",
        }, {
            documentContent: "Test string",
            licensedVocabularies: [
                "Test string"
            ],
        });
    }
});
