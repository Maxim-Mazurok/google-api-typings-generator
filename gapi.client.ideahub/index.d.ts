/* Type definitions for non-npm package Idea Hub API v1beta 1.0 */
// Project: https://console.cloud.google.com/apis/library/ideahub.googleapis.com
// Definitions by: Maxim Mazurok <https://github.com/Maxim-Mazurok>
//                 Nick Amoscato <https://github.com/namoscato>
//                 Declan Vong <https://github.com/declanvong>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 2.8

// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
// Generated from: https://ideahub.googleapis.com/$discovery/rest?version=v1beta
// Revision: 20211203

/// <reference types="gapi.client" />

declare namespace gapi.client {
    /** Load Idea Hub API v1beta */
    function load(name: "ideahub", version: "v1beta"): PromiseLike<void>;
    function load(name: "ideahub", version: "v1beta", callback: () => any): void;

    namespace ideahub {
        interface GoogleSearchIdeahubV1betaAvailableLocale {
            /** A string in BCP 47 format, without a resource prefix. */
            locale?: string;
            /** A string in BCP 47 format, prefixed with the platform and property name, and "locales/". Format: platforms/{platform}/properties/{property}/locales/{locale} */
            name?: string;
        }
        interface GoogleSearchIdeahubV1betaIdea {
            /** Unique identifier for the idea. Format: ideas/{ideaId} */
            name?: string;
            /** The ideaâ€™s text. */
            text?: string;
            /** The Topics that match the idea. */
            topics?: GoogleSearchIdeahubV1betaTopic[];
        }
        interface GoogleSearchIdeahubV1betaIdeaActivity {
            /** The Idea IDs for this entry. If empty, topics should be set. */
            ideas?: string[];
            /** Unique identifier for the idea activity. The name is ignored when creating an idea activity. Format: platforms/{platform}/properties/{property}/ideaActivities/{idea_activity} */
            name?: string;
            /** The Topic IDs for this entry. If empty, ideas should be set. */
            topics?: string[];
            /** The type of activity performed. */
            type?: string;
            /** The uri the activity relates to. */
            uri?: string;
        }
        interface GoogleSearchIdeahubV1betaIdeaState {
            /** Whether the idea is dismissed. */
            dismissed?: boolean;
            /** Unique identifier for the idea state. Format: platforms/{platform}/properties/{property}/ideaStates/{idea_state} */
            name?: string;
            /** Whether the idea is saved. */
            saved?: boolean;
        }
        interface GoogleSearchIdeahubV1betaListAvailableLocalesResponse {
            /** Locales for which ideas are available for the given Creator. */
            availableLocales?: GoogleSearchIdeahubV1betaAvailableLocale[];
            /** A token that can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages. */
            nextPageToken?: string;
        }
        interface GoogleSearchIdeahubV1betaListIdeasResponse {
            /** Results for the ListIdeasRequest. */
            ideas?: GoogleSearchIdeahubV1betaIdea[];
            /** Used to fetch the next page in a subsequent request. */
            nextPageToken?: string;
        }
        interface GoogleSearchIdeahubV1betaTopic {
            /** String displayed to the creator indicating the name of the Topic. */
            displayName?: string;
            /** The mID of the topic. */
            mid?: string;
            /** Unique identifier for the topic. Format: topics/{topic} */
            name?: string;
        }
        interface GoogleSearchIdeahubV1betaTopicState {
            /** Whether the topic is dismissed. */
            dismissed?: boolean;
            /** Unique identifier for the topic state. Format: platforms/{platform}/properties/{property}/topicStates/{topic_state} */
            name?: string;
            /** Whether the topic is saved. */
            saved?: boolean;
        }
        interface IdeaActivitiesResource {
            /** Creates an idea activity entry. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. The parent resource where this idea activity will be created. Format: platforms/{platform}/property/{property} */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: GoogleSearchIdeahubV1betaIdeaActivity;
            }): Request<GoogleSearchIdeahubV1betaIdeaActivity>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. The parent resource where this idea activity will be created. Format: platforms/{platform}/property/{property} */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: GoogleSearchIdeahubV1betaIdeaActivity): Request<GoogleSearchIdeahubV1betaIdeaActivity>;
        }
        interface IdeasResource {
            /** List ideas for a given Creator and filter and sort options. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * Allows filtering. Supported syntax: * Filter expressions are made up of one or more restrictions. * Restrictions are implicitly combined, as if the `AND` operator was always
                 * used. The `OR` operator is currently unsupported. * Supported functions: - `saved(bool)`: If set to true, fetches only saved ideas. If set to false, fetches all except saved
                 * ideas. Can't be simultaneously used with `dismissed(bool)`. - `dismissed(bool)`: If set to true, fetches only dismissed ideas. Can't be simultaneously used with `saved(bool)`.
                 * The `false` value is currently unsupported. Examples: * `saved(true)` * `saved(false)` * `dismissed(true)` The length of this field should be no more than 500 characters.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Order semantics described below. */
                orderBy?: string;
                /** The maximum number of ideas per page. If unspecified, at most 10 ideas will be returned. The maximum value is 2000; values above 2000 will be coerced to 2000. */
                pageSize?: number;
                /** Used to fetch next page. */
                pageToken?: string;
                /** Required. If defined, specifies the creator for which to filter by. Format: publishers/{publisher}/properties/{property} */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<GoogleSearchIdeahubV1betaListIdeasResponse>;
        }
        interface IdeaStatesResource {
            /** Update an idea state resource. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Unique identifier for the idea state. Format: platforms/{platform}/properties/{property}/ideaStates/{idea_state} */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The list of fields to be updated. */
                updateMask?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: GoogleSearchIdeahubV1betaIdeaState;
            }): Request<GoogleSearchIdeahubV1betaIdeaState>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Unique identifier for the idea state. Format: platforms/{platform}/properties/{property}/ideaStates/{idea_state} */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The list of fields to be updated. */
                updateMask?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: GoogleSearchIdeahubV1betaIdeaState): Request<GoogleSearchIdeahubV1betaIdeaState>;
        }
        interface LocalesResource {
            /** Returns which locales ideas are available in for a given Creator. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * The maximum number of locales to return. The service may return fewer than this value. If unspecified, at most 100 locales will be returned. The maximum value is 100; values
                 * above 100 will be coerced to 100.
                 */
                pageSize?: number;
                /**
                 * A page token, received from a previous `ListAvailableLocales` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to
                 * `ListAvailableLocales` must match the call that provided the page token.
                 */
                pageToken?: string;
                /** Required. The web property to check idea availability for Format: platforms/{platform}/property/{property} */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<GoogleSearchIdeahubV1betaListAvailableLocalesResponse>;
        }
        interface TopicStatesResource {
            /** Update a topic state resource. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Unique identifier for the topic state. Format: platforms/{platform}/properties/{property}/topicStates/{topic_state} */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The list of fields to be updated. */
                updateMask?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: GoogleSearchIdeahubV1betaTopicState;
            }): Request<GoogleSearchIdeahubV1betaTopicState>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Unique identifier for the topic state. Format: platforms/{platform}/properties/{property}/topicStates/{topic_state} */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The list of fields to be updated. */
                updateMask?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: GoogleSearchIdeahubV1betaTopicState): Request<GoogleSearchIdeahubV1betaTopicState>;
        }
        interface PropertiesResource {
            ideaActivities: IdeaActivitiesResource;
            ideas: IdeasResource;
            ideaStates: IdeaStatesResource;
            locales: LocalesResource;
            topicStates: TopicStatesResource;
        }
        interface PlatformsResource {
            properties: PropertiesResource;
        }

        const platforms: PlatformsResource;
    }
}
