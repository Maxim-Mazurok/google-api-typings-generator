/* This is stub file for gapi.client.networkservices-v1beta1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20230323

gapi.load('client', async () => {
    /** now we can use gapi.client */

    await gapi.client.load('https://networkservices.googleapis.com/$discovery/rest?version=v1beta1');
    /** now we can use gapi.client.networkservices */

    /** don't forget to authenticate your client before sending any request to resources: */
    /** declare client_id registered in Google Developers Console */
    const client_id = '<<PUT YOUR CLIENT ID HERE>>';
    const scope = [
        /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
        'https://www.googleapis.com/auth/cloud-platform',
    ];
    const immediate = false;
    gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
        if (authResult && !authResult.error) {
            /** handle successful authorization */
            run();
        } else {
            /** handle authorization error */
        }
    });

    async function run() {
        /** Gets information about a location. */
        await gapi.client.networkservices.projects.locations.get({
            name: "Test string",
        });
        /** Lists information about the supported locations for this service. */
        await gapi.client.networkservices.projects.locations.list({
            filter: "Test string",
            name: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Creates a new EndpointPolicy in a given project and location. */
        await gapi.client.networkservices.projects.locations.endpointPolicies.create({
            endpointPolicyId: "Test string",
            parent: "Test string",
        }, {
            authorizationPolicy: "Test string",
            clientTlsPolicy: "Test string",
            createTime: "Test string",
            description: "Test string",
            endpointMatcher: {
                metadataLabelMatcher: {
                    metadataLabelMatchCriteria: "Test string",
                    metadataLabels: [
                        {
                            labelName: "Test string",
                            labelValue: "Test string",
                        }
                    ],
                },
            },
            labels: {
                A: "Test string"
            },
            name: "Test string",
            serverTlsPolicy: "Test string",
            trafficPortSelector: {
                ports: [
                    "Test string"
                ],
            },
            type: "Test string",
            updateTime: "Test string",
        });
        /** Deletes a single EndpointPolicy. */
        await gapi.client.networkservices.projects.locations.endpointPolicies.delete({
            name: "Test string",
        });
        /** Gets details of a single EndpointPolicy. */
        await gapi.client.networkservices.projects.locations.endpointPolicies.get({
            name: "Test string",
        });
        /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
        await gapi.client.networkservices.projects.locations.endpointPolicies.getIamPolicy({
            "options.requestedPolicyVersion": 42,
            resource: "Test string",
        });
        /** Lists EndpointPolicies in a given project and location. */
        await gapi.client.networkservices.projects.locations.endpointPolicies.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the parameters of a single EndpointPolicy. */
        await gapi.client.networkservices.projects.locations.endpointPolicies.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            authorizationPolicy: "Test string",
            clientTlsPolicy: "Test string",
            createTime: "Test string",
            description: "Test string",
            endpointMatcher: {
                metadataLabelMatcher: {
                    metadataLabelMatchCriteria: "Test string",
                    metadataLabels: [
                        {
                            labelName: "Test string",
                            labelValue: "Test string",
                        }
                    ],
                },
            },
            labels: {
                A: "Test string"
            },
            name: "Test string",
            serverTlsPolicy: "Test string",
            trafficPortSelector: {
                ports: [
                    "Test string"
                ],
            },
            type: "Test string",
            updateTime: "Test string",
        });
        /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
        await gapi.client.networkservices.projects.locations.endpointPolicies.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                auditConfigs: [
                    {
                        auditLogConfigs: [
                            {
                                exemptedMembers: [
                                    "Test string"
                                ],
                                logType: "Test string",
                            }
                        ],
                        service: "Test string",
                    }
                ],
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"
                        ],
                        role: "Test string",
                    }
                ],
                etag: "Test string",
                version: 42,
            },
            updateMask: "Test string",
        });
        /**
         * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This
         * operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
         */
        await gapi.client.networkservices.projects.locations.endpointPolicies.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"
            ],
        });
        /** Creates a new Gateway in a given project and location. */
        await gapi.client.networkservices.projects.locations.gateways.create({
            gatewayId: "Test string",
            parent: "Test string",
        }, {
            addresses: [
                "Test string"
            ],
            certificateUrls: [
                "Test string"
            ],
            createTime: "Test string",
            description: "Test string",
            gatewaySecurityPolicy: "Test string",
            labels: {
                A: "Test string"
            },
            name: "Test string",
            network: "Test string",
            ports: [
                42
            ],
            scope: "Test string",
            selfLink: "Test string",
            serverTlsPolicy: "Test string",
            subnetwork: "Test string",
            type: "Test string",
            updateTime: "Test string",
        });
        /** Deletes a single Gateway. */
        await gapi.client.networkservices.projects.locations.gateways.delete({
            name: "Test string",
        });
        /** Gets details of a single Gateway. */
        await gapi.client.networkservices.projects.locations.gateways.get({
            name: "Test string",
        });
        /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
        await gapi.client.networkservices.projects.locations.gateways.getIamPolicy({
            "options.requestedPolicyVersion": 42,
            resource: "Test string",
        });
        /** Lists Gateways in a given project and location. */
        await gapi.client.networkservices.projects.locations.gateways.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the parameters of a single Gateway. */
        await gapi.client.networkservices.projects.locations.gateways.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            addresses: [
                "Test string"
            ],
            certificateUrls: [
                "Test string"
            ],
            createTime: "Test string",
            description: "Test string",
            gatewaySecurityPolicy: "Test string",
            labels: {
                A: "Test string"
            },
            name: "Test string",
            network: "Test string",
            ports: [
                42
            ],
            scope: "Test string",
            selfLink: "Test string",
            serverTlsPolicy: "Test string",
            subnetwork: "Test string",
            type: "Test string",
            updateTime: "Test string",
        });
        /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
        await gapi.client.networkservices.projects.locations.gateways.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                auditConfigs: [
                    {
                        auditLogConfigs: [
                            {
                                exemptedMembers: [
                                    "Test string"
                                ],
                                logType: "Test string",
                            }
                        ],
                        service: "Test string",
                    }
                ],
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"
                        ],
                        role: "Test string",
                    }
                ],
                etag: "Test string",
                version: 42,
            },
            updateMask: "Test string",
        });
        /**
         * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This
         * operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
         */
        await gapi.client.networkservices.projects.locations.gateways.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"
            ],
        });
        /** Creates a new GrpcRoute in a given project and location. */
        await gapi.client.networkservices.projects.locations.grpcRoutes.create({
            grpcRouteId: "Test string",
            parent: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            gateways: [
                "Test string"
            ],
            hostnames: [
                "Test string"
            ],
            labels: {
                A: "Test string"
            },
            meshes: [
                "Test string"
            ],
            name: "Test string",
            rules: [
                {
                    action: {
                        destinations: [
                            {
                                serviceName: "Test string",
                                weight: 42,
                            }
                        ],
                        faultInjectionPolicy: {
                            abort: {
                                httpStatus: 42,
                                percentage: 42,
                            },
                            delay: {
                                fixedDelay: "Test string",
                                percentage: 42,
                            },
                        },
                        retryPolicy: {
                            numRetries: 42,
                            retryConditions: [
                                "Test string"
                            ],
                        },
                        timeout: "Test string",
                    },
                    matches: [
                        {
                            headers: [
                                {
                                    key: "Test string",
                                    type: "Test string",
                                    value: "Test string",
                                }
                            ],
                            method: {
                                caseSensitive: true,
                                grpcMethod: "Test string",
                                grpcService: "Test string",
                                type: "Test string",
                            },
                        }
                    ],
                }
            ],
            selfLink: "Test string",
            updateTime: "Test string",
        });
        /** Deletes a single GrpcRoute. */
        await gapi.client.networkservices.projects.locations.grpcRoutes.delete({
            name: "Test string",
        });
        /** Gets details of a single GrpcRoute. */
        await gapi.client.networkservices.projects.locations.grpcRoutes.get({
            name: "Test string",
        });
        /** Lists GrpcRoutes in a given project and location. */
        await gapi.client.networkservices.projects.locations.grpcRoutes.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the parameters of a single GrpcRoute. */
        await gapi.client.networkservices.projects.locations.grpcRoutes.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            gateways: [
                "Test string"
            ],
            hostnames: [
                "Test string"
            ],
            labels: {
                A: "Test string"
            },
            meshes: [
                "Test string"
            ],
            name: "Test string",
            rules: [
                {
                    action: {
                        destinations: [
                            {
                                serviceName: "Test string",
                                weight: 42,
                            }
                        ],
                        faultInjectionPolicy: {
                            abort: {
                                httpStatus: 42,
                                percentage: 42,
                            },
                            delay: {
                                fixedDelay: "Test string",
                                percentage: 42,
                            },
                        },
                        retryPolicy: {
                            numRetries: 42,
                            retryConditions: [
                                "Test string"
                            ],
                        },
                        timeout: "Test string",
                    },
                    matches: [
                        {
                            headers: [
                                {
                                    key: "Test string",
                                    type: "Test string",
                                    value: "Test string",
                                }
                            ],
                            method: {
                                caseSensitive: true,
                                grpcMethod: "Test string",
                                grpcService: "Test string",
                                type: "Test string",
                            },
                        }
                    ],
                }
            ],
            selfLink: "Test string",
            updateTime: "Test string",
        });
        /** Creates a new HttpRoute in a given project and location. */
        await gapi.client.networkservices.projects.locations.httpRoutes.create({
            httpRouteId: "Test string",
            parent: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            gateways: [
                "Test string"
            ],
            hostnames: [
                "Test string"
            ],
            labels: {
                A: "Test string"
            },
            meshes: [
                "Test string"
            ],
            name: "Test string",
            rules: [
                {
                    action: {
                        corsPolicy: {
                            allowCredentials: true,
                            allowHeaders: [
                                "Test string"
                            ],
                            allowMethods: [
                                "Test string"
                            ],
                            allowOriginRegexes: [
                                "Test string"
                            ],
                            allowOrigins: [
                                "Test string"
                            ],
                            disabled: true,
                            exposeHeaders: [
                                "Test string"
                            ],
                            maxAge: "Test string",
                        },
                        destinations: [
                            {
                                serviceName: "Test string",
                                weight: 42,
                            }
                        ],
                        faultInjectionPolicy: {
                            abort: {
                                httpStatus: 42,
                                percentage: 42,
                            },
                            delay: {
                                fixedDelay: "Test string",
                                percentage: 42,
                            },
                        },
                        redirect: {
                            hostRedirect: "Test string",
                            httpsRedirect: true,
                            pathRedirect: "Test string",
                            portRedirect: 42,
                            prefixRewrite: "Test string",
                            responseCode: "Test string",
                            stripQuery: true,
                        },
                        requestHeaderModifier: {
                            add: {
                                A: "Test string"
                            },
                            remove: [
                                "Test string"
                            ],
                            set: {
                                A: "Test string"
                            },
                        },
                        requestMirrorPolicy: {
                            destination: {
                                serviceName: "Test string",
                                weight: 42,
                            },
                        },
                        responseHeaderModifier: {
                            add: {
                                A: "Test string"
                            },
                            remove: [
                                "Test string"
                            ],
                            set: {
                                A: "Test string"
                            },
                        },
                        retryPolicy: {
                            numRetries: 42,
                            perTryTimeout: "Test string",
                            retryConditions: [
                                "Test string"
                            ],
                        },
                        timeout: "Test string",
                        urlRewrite: {
                            hostRewrite: "Test string",
                            pathPrefixRewrite: "Test string",
                        },
                    },
                    matches: [
                        {
                            fullPathMatch: "Test string",
                            headers: [
                                {
                                    exactMatch: "Test string",
                                    header: "Test string",
                                    invertMatch: true,
                                    prefixMatch: "Test string",
                                    presentMatch: true,
                                    rangeMatch: {
                                        end: 42,
                                        start: 42,
                                    },
                                    regexMatch: "Test string",
                                    suffixMatch: "Test string",
                                }
                            ],
                            ignoreCase: true,
                            prefixMatch: "Test string",
                            queryParameters: [
                                {
                                    exactMatch: "Test string",
                                    presentMatch: true,
                                    queryParameter: "Test string",
                                    regexMatch: "Test string",
                                }
                            ],
                            regexMatch: "Test string",
                        }
                    ],
                }
            ],
            selfLink: "Test string",
            updateTime: "Test string",
        });
        /** Deletes a single HttpRoute. */
        await gapi.client.networkservices.projects.locations.httpRoutes.delete({
            name: "Test string",
        });
        /** Gets details of a single HttpRoute. */
        await gapi.client.networkservices.projects.locations.httpRoutes.get({
            name: "Test string",
        });
        /** Lists HttpRoute in a given project and location. */
        await gapi.client.networkservices.projects.locations.httpRoutes.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the parameters of a single HttpRoute. */
        await gapi.client.networkservices.projects.locations.httpRoutes.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            gateways: [
                "Test string"
            ],
            hostnames: [
                "Test string"
            ],
            labels: {
                A: "Test string"
            },
            meshes: [
                "Test string"
            ],
            name: "Test string",
            rules: [
                {
                    action: {
                        corsPolicy: {
                            allowCredentials: true,
                            allowHeaders: [
                                "Test string"
                            ],
                            allowMethods: [
                                "Test string"
                            ],
                            allowOriginRegexes: [
                                "Test string"
                            ],
                            allowOrigins: [
                                "Test string"
                            ],
                            disabled: true,
                            exposeHeaders: [
                                "Test string"
                            ],
                            maxAge: "Test string",
                        },
                        destinations: [
                            {
                                serviceName: "Test string",
                                weight: 42,
                            }
                        ],
                        faultInjectionPolicy: {
                            abort: {
                                httpStatus: 42,
                                percentage: 42,
                            },
                            delay: {
                                fixedDelay: "Test string",
                                percentage: 42,
                            },
                        },
                        redirect: {
                            hostRedirect: "Test string",
                            httpsRedirect: true,
                            pathRedirect: "Test string",
                            portRedirect: 42,
                            prefixRewrite: "Test string",
                            responseCode: "Test string",
                            stripQuery: true,
                        },
                        requestHeaderModifier: {
                            add: {
                                A: "Test string"
                            },
                            remove: [
                                "Test string"
                            ],
                            set: {
                                A: "Test string"
                            },
                        },
                        requestMirrorPolicy: {
                            destination: {
                                serviceName: "Test string",
                                weight: 42,
                            },
                        },
                        responseHeaderModifier: {
                            add: {
                                A: "Test string"
                            },
                            remove: [
                                "Test string"
                            ],
                            set: {
                                A: "Test string"
                            },
                        },
                        retryPolicy: {
                            numRetries: 42,
                            perTryTimeout: "Test string",
                            retryConditions: [
                                "Test string"
                            ],
                        },
                        timeout: "Test string",
                        urlRewrite: {
                            hostRewrite: "Test string",
                            pathPrefixRewrite: "Test string",
                        },
                    },
                    matches: [
                        {
                            fullPathMatch: "Test string",
                            headers: [
                                {
                                    exactMatch: "Test string",
                                    header: "Test string",
                                    invertMatch: true,
                                    prefixMatch: "Test string",
                                    presentMatch: true,
                                    rangeMatch: {
                                        end: 42,
                                        start: 42,
                                    },
                                    regexMatch: "Test string",
                                    suffixMatch: "Test string",
                                }
                            ],
                            ignoreCase: true,
                            prefixMatch: "Test string",
                            queryParameters: [
                                {
                                    exactMatch: "Test string",
                                    presentMatch: true,
                                    queryParameter: "Test string",
                                    regexMatch: "Test string",
                                }
                            ],
                            regexMatch: "Test string",
                        }
                    ],
                }
            ],
            selfLink: "Test string",
            updateTime: "Test string",
        });
        /** Creates a new Mesh in a given project and location. */
        await gapi.client.networkservices.projects.locations.meshes.create({
            meshId: "Test string",
            parent: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            interceptionPort: 42,
            labels: {
                A: "Test string"
            },
            name: "Test string",
            selfLink: "Test string",
            updateTime: "Test string",
        });
        /** Deletes a single Mesh. */
        await gapi.client.networkservices.projects.locations.meshes.delete({
            name: "Test string",
        });
        /** Gets details of a single Mesh. */
        await gapi.client.networkservices.projects.locations.meshes.get({
            name: "Test string",
        });
        /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
        await gapi.client.networkservices.projects.locations.meshes.getIamPolicy({
            "options.requestedPolicyVersion": 42,
            resource: "Test string",
        });
        /** Lists Meshes in a given project and location. */
        await gapi.client.networkservices.projects.locations.meshes.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the parameters of a single Mesh. */
        await gapi.client.networkservices.projects.locations.meshes.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            interceptionPort: 42,
            labels: {
                A: "Test string"
            },
            name: "Test string",
            selfLink: "Test string",
            updateTime: "Test string",
        });
        /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
        await gapi.client.networkservices.projects.locations.meshes.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                auditConfigs: [
                    {
                        auditLogConfigs: [
                            {
                                exemptedMembers: [
                                    "Test string"
                                ],
                                logType: "Test string",
                            }
                        ],
                        service: "Test string",
                    }
                ],
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"
                        ],
                        role: "Test string",
                    }
                ],
                etag: "Test string",
                version: 42,
            },
            updateMask: "Test string",
        });
        /**
         * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This
         * operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
         */
        await gapi.client.networkservices.projects.locations.meshes.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"
            ],
        });
        /**
         * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this
         * method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation
         * completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of
         * 1, corresponding to `Code.CANCELLED`.
         */
        await gapi.client.networkservices.projects.locations.operations.cancel({
            name: "Test string",
        }, {
        });
        /**
         * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support
         * this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
         */
        await gapi.client.networkservices.projects.locations.operations.delete({
            name: "Test string",
        });
        /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
        await gapi.client.networkservices.projects.locations.operations.get({
            name: "Test string",
        });
        /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
        await gapi.client.networkservices.projects.locations.operations.list({
            filter: "Test string",
            name: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Creates a new ServiceBinding in a given project and location. */
        await gapi.client.networkservices.projects.locations.serviceBindings.create({
            parent: "Test string",
            serviceBindingId: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            labels: {
                A: "Test string"
            },
            name: "Test string",
            service: "Test string",
            updateTime: "Test string",
        });
        /** Deletes a single ServiceBinding. */
        await gapi.client.networkservices.projects.locations.serviceBindings.delete({
            name: "Test string",
        });
        /** Gets details of a single ServiceBinding. */
        await gapi.client.networkservices.projects.locations.serviceBindings.get({
            name: "Test string",
        });
        /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
        await gapi.client.networkservices.projects.locations.serviceBindings.getIamPolicy({
            "options.requestedPolicyVersion": 42,
            resource: "Test string",
        });
        /** Lists ServiceBinding in a given project and location. */
        await gapi.client.networkservices.projects.locations.serviceBindings.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
        await gapi.client.networkservices.projects.locations.serviceBindings.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                auditConfigs: [
                    {
                        auditLogConfigs: [
                            {
                                exemptedMembers: [
                                    "Test string"
                                ],
                                logType: "Test string",
                            }
                        ],
                        service: "Test string",
                    }
                ],
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"
                        ],
                        role: "Test string",
                    }
                ],
                etag: "Test string",
                version: 42,
            },
            updateMask: "Test string",
        });
        /**
         * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This
         * operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
         */
        await gapi.client.networkservices.projects.locations.serviceBindings.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"
            ],
        });
        /** Creates a new TcpRoute in a given project and location. */
        await gapi.client.networkservices.projects.locations.tcpRoutes.create({
            parent: "Test string",
            tcpRouteId: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            gateways: [
                "Test string"
            ],
            labels: {
                A: "Test string"
            },
            meshes: [
                "Test string"
            ],
            name: "Test string",
            rules: [
                {
                    action: {
                        destinations: [
                            {
                                serviceName: "Test string",
                                weight: 42,
                            }
                        ],
                        originalDestination: true,
                    },
                    matches: [
                        {
                            address: "Test string",
                            port: "Test string",
                        }
                    ],
                }
            ],
            selfLink: "Test string",
            updateTime: "Test string",
        });
        /** Deletes a single TcpRoute. */
        await gapi.client.networkservices.projects.locations.tcpRoutes.delete({
            name: "Test string",
        });
        /** Gets details of a single TcpRoute. */
        await gapi.client.networkservices.projects.locations.tcpRoutes.get({
            name: "Test string",
        });
        /** Lists TcpRoute in a given project and location. */
        await gapi.client.networkservices.projects.locations.tcpRoutes.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the parameters of a single TcpRoute. */
        await gapi.client.networkservices.projects.locations.tcpRoutes.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            gateways: [
                "Test string"
            ],
            labels: {
                A: "Test string"
            },
            meshes: [
                "Test string"
            ],
            name: "Test string",
            rules: [
                {
                    action: {
                        destinations: [
                            {
                                serviceName: "Test string",
                                weight: 42,
                            }
                        ],
                        originalDestination: true,
                    },
                    matches: [
                        {
                            address: "Test string",
                            port: "Test string",
                        }
                    ],
                }
            ],
            selfLink: "Test string",
            updateTime: "Test string",
        });
        /** Creates a new TlsRoute in a given project and location. */
        await gapi.client.networkservices.projects.locations.tlsRoutes.create({
            parent: "Test string",
            tlsRouteId: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            gateways: [
                "Test string"
            ],
            meshes: [
                "Test string"
            ],
            name: "Test string",
            rules: [
                {
                    action: {
                        destinations: [
                            {
                                serviceName: "Test string",
                                weight: 42,
                            }
                        ],
                    },
                    matches: [
                        {
                            alpn: [
                                "Test string"
                            ],
                            sniHost: [
                                "Test string"
                            ],
                        }
                    ],
                }
            ],
            selfLink: "Test string",
            updateTime: "Test string",
        });
        /** Deletes a single TlsRoute. */
        await gapi.client.networkservices.projects.locations.tlsRoutes.delete({
            name: "Test string",
        });
        /** Gets details of a single TlsRoute. */
        await gapi.client.networkservices.projects.locations.tlsRoutes.get({
            name: "Test string",
        });
        /** Lists TlsRoute in a given project and location. */
        await gapi.client.networkservices.projects.locations.tlsRoutes.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the parameters of a single TlsRoute. */
        await gapi.client.networkservices.projects.locations.tlsRoutes.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            gateways: [
                "Test string"
            ],
            meshes: [
                "Test string"
            ],
            name: "Test string",
            rules: [
                {
                    action: {
                        destinations: [
                            {
                                serviceName: "Test string",
                                weight: 42,
                            }
                        ],
                    },
                    matches: [
                        {
                            alpn: [
                                "Test string"
                            ],
                            sniHost: [
                                "Test string"
                            ],
                        }
                    ],
                }
            ],
            selfLink: "Test string",
            updateTime: "Test string",
        });
    }
});
