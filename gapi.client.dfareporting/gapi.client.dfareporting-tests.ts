/* This is stub file for gapi.client.dfareporting definition tests */
/* IMPORTANT.
* This file was automatically generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
* In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
**/
gapi.load('client', () => {
    /** now we can use gapi.client */
    gapi.client.load('dfareporting', 'v3.4', () => {
        /** now we can use gapi.client.dfareporting */

        /** don't forget to authenticate your client before sending any request to resources: */
        /** declare client_id registered in Google Developers Console */
        const client_id = '<<PUT YOUR CLIENT ID HERE>>';
        const scope = [
            /** Manage DoubleClick Digital Marketing conversions */
            'https://www.googleapis.com/auth/ddmconversions',
            /** View and manage DoubleClick for Advertisers reports */
            'https://www.googleapis.com/auth/dfareporting',
            /** View and manage your DoubleClick Campaign Manager's (DCM) display ad campaigns */
            'https://www.googleapis.com/auth/dfatrafficking',
        ];
        const immediate = false;
        gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
            if (authResult && !authResult.error) {
                /** handle successful authorization */
                run();
            } else {
                /** handle authorization error */
            }
        });
    });

    async function run() {
        /** Gets the account's active ad summary by account ID. */
        await gapi.client.dfareporting.accountActiveAdSummaries.get({
            profileId: "Test string",
            summaryAccountId: "Test string",
        });
        /** Gets one account permission group by ID. */
        await gapi.client.dfareporting.accountPermissionGroups.get({
            id: "Test string",
            profileId: "Test string",
        });
        /** Retrieves the list of account permission groups. */
        await gapi.client.dfareporting.accountPermissionGroups.list({
            profileId: "Test string",
        });
        /** Gets one account permission by ID. */
        await gapi.client.dfareporting.accountPermissions.get({
            id: "Test string",
            profileId: "Test string",
        });
        /** Retrieves the list of account permissions. */
        await gapi.client.dfareporting.accountPermissions.list({
            profileId: "Test string",
        });
        /** Gets one account by ID. */
        await gapi.client.dfareporting.accounts.get({
            id: "Test string",
            profileId: "Test string",
        });
        /** Retrieves the list of accounts, possibly filtered. This method supports paging. */
        await gapi.client.dfareporting.accounts.list({
            active: true,
            ids: "Test string",
            maxResults: 42,
            pageToken: "Test string",
            profileId: "Test string",
            searchString: "Test string",
            sortField: "Test string",
            sortOrder: "Test string",
        });
        /** Updates an existing account. This method supports patch semantics. */
        await gapi.client.dfareporting.accounts.patch({
            id: "Test string",
            profileId: "Test string",
        }, {
            accountPermissionIds: [
                "Test string"            ],
            accountProfile: "Test string",
            active: true,
            activeAdsLimitTier: "Test string",
            activeViewOptOut: true,
            availablePermissionIds: [
                "Test string"            ],
            countryId: "Test string",
            currencyId: "Test string",
            defaultCreativeSizeId: "Test string",
            description: "Test string",
            id: "Test string",
            kind: "Test string",
            locale: "Test string",
            maximumImageSize: "Test string",
            name: "Test string",
            nielsenOcrEnabled: true,
            reportsConfiguration: {
                exposureToConversionEnabled: true,
                lookbackConfiguration: {
                    clickDuration: 42,
                    postImpressionActivitiesDuration: 42,
                },
                reportGenerationTimeZoneId: "Test string",
            },
            shareReportsWithTwitter: true,
            teaserSizeLimit: "Test string",
        });
        /** Updates an existing account. */
        await gapi.client.dfareporting.accounts.update({
            profileId: "Test string",
        }, {
            accountPermissionIds: [
                "Test string"            ],
            accountProfile: "Test string",
            active: true,
            activeAdsLimitTier: "Test string",
            activeViewOptOut: true,
            availablePermissionIds: [
                "Test string"            ],
            countryId: "Test string",
            currencyId: "Test string",
            defaultCreativeSizeId: "Test string",
            description: "Test string",
            id: "Test string",
            kind: "Test string",
            locale: "Test string",
            maximumImageSize: "Test string",
            name: "Test string",
            nielsenOcrEnabled: true,
            reportsConfiguration: {
                exposureToConversionEnabled: true,
                lookbackConfiguration: {
                    clickDuration: 42,
                    postImpressionActivitiesDuration: 42,
                },
                reportGenerationTimeZoneId: "Test string",
            },
            shareReportsWithTwitter: true,
            teaserSizeLimit: "Test string",
        });
        /** Gets one account user profile by ID. */
        await gapi.client.dfareporting.accountUserProfiles.get({
            id: "Test string",
            profileId: "Test string",
        });
        /** Inserts a new account user profile. */
        await gapi.client.dfareporting.accountUserProfiles.insert({
            profileId: "Test string",
        }, {
            accountId: "Test string",
            active: true,
            advertiserFilter: {
                kind: "Test string",
                objectIds: [
                    "Test string"                ],
                status: "Test string",
            },
            campaignFilter: {
                kind: "Test string",
                objectIds: [
                    "Test string"                ],
                status: "Test string",
            },
            comments: "Test string",
            email: "Test string",
            id: "Test string",
            kind: "Test string",
            locale: "Test string",
            name: "Test string",
            siteFilter: {
                kind: "Test string",
                objectIds: [
                    "Test string"                ],
                status: "Test string",
            },
            subaccountId: "Test string",
            traffickerType: "Test string",
            userAccessType: "Test string",
            userRoleFilter: {
                kind: "Test string",
                objectIds: [
                    "Test string"                ],
                status: "Test string",
            },
            userRoleId: "Test string",
        });
        /** Retrieves a list of account user profiles, possibly filtered. This method supports paging. */
        await gapi.client.dfareporting.accountUserProfiles.list({
            active: true,
            ids: "Test string",
            maxResults: 42,
            pageToken: "Test string",
            profileId: "Test string",
            searchString: "Test string",
            sortField: "Test string",
            sortOrder: "Test string",
            subaccountId: "Test string",
            userRoleId: "Test string",
        });
        /** Updates an existing account user profile. This method supports patch semantics. */
        await gapi.client.dfareporting.accountUserProfiles.patch({
            id: "Test string",
            profileId: "Test string",
        }, {
            accountId: "Test string",
            active: true,
            advertiserFilter: {
                kind: "Test string",
                objectIds: [
                    "Test string"                ],
                status: "Test string",
            },
            campaignFilter: {
                kind: "Test string",
                objectIds: [
                    "Test string"                ],
                status: "Test string",
            },
            comments: "Test string",
            email: "Test string",
            id: "Test string",
            kind: "Test string",
            locale: "Test string",
            name: "Test string",
            siteFilter: {
                kind: "Test string",
                objectIds: [
                    "Test string"                ],
                status: "Test string",
            },
            subaccountId: "Test string",
            traffickerType: "Test string",
            userAccessType: "Test string",
            userRoleFilter: {
                kind: "Test string",
                objectIds: [
                    "Test string"                ],
                status: "Test string",
            },
            userRoleId: "Test string",
        });
        /** Updates an existing account user profile. */
        await gapi.client.dfareporting.accountUserProfiles.update({
            profileId: "Test string",
        }, {
            accountId: "Test string",
            active: true,
            advertiserFilter: {
                kind: "Test string",
                objectIds: [
                    "Test string"                ],
                status: "Test string",
            },
            campaignFilter: {
                kind: "Test string",
                objectIds: [
                    "Test string"                ],
                status: "Test string",
            },
            comments: "Test string",
            email: "Test string",
            id: "Test string",
            kind: "Test string",
            locale: "Test string",
            name: "Test string",
            siteFilter: {
                kind: "Test string",
                objectIds: [
                    "Test string"                ],
                status: "Test string",
            },
            subaccountId: "Test string",
            traffickerType: "Test string",
            userAccessType: "Test string",
            userRoleFilter: {
                kind: "Test string",
                objectIds: [
                    "Test string"                ],
                status: "Test string",
            },
            userRoleId: "Test string",
        });
        /** Gets one ad by ID. */
        await gapi.client.dfareporting.ads.get({
            id: "Test string",
            profileId: "Test string",
        });
        /** Inserts a new ad. */
        await gapi.client.dfareporting.ads.insert({
            profileId: "Test string",
        }, {
            accountId: "Test string",
            active: true,
            advertiserId: "Test string",
            advertiserIdDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            archived: true,
            audienceSegmentId: "Test string",
            campaignId: "Test string",
            campaignIdDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            clickThroughUrl: {
                computedClickThroughUrl: "Test string",
                customClickThroughUrl: "Test string",
                defaultLandingPage: true,
                landingPageId: "Test string",
            },
            clickThroughUrlSuffixProperties: {
                clickThroughUrlSuffix: "Test string",
                overrideInheritedSuffix: true,
            },
            comments: "Test string",
            compatibility: "Test string",
            createInfo: {
                time: "Test string",
            },
            creativeGroupAssignments: [
                {
                    creativeGroupId: "Test string",
                    creativeGroupNumber: "Test string",
                }            ],
            creativeRotation: {
                creativeAssignments: [
                    {
                        active: true,
                        applyEventTags: true,
                        clickThroughUrl: {
                            computedClickThroughUrl: "Test string",
                            customClickThroughUrl: "Test string",
                            defaultLandingPage: true,
                            landingPageId: "Test string",
                        },
                        companionCreativeOverrides: [
                            {
                                clickThroughUrl: {
                                    computedClickThroughUrl: "Test string",
                                    customClickThroughUrl: "Test string",
                                    defaultLandingPage: true,
                                    landingPageId: "Test string",
                                },
                                creativeId: "Test string",
                            }                        ],
                        creativeGroupAssignments: [
                            {
                                creativeGroupId: "Test string",
                                creativeGroupNumber: "Test string",
                            }                        ],
                        creativeId: "Test string",
                        creativeIdDimensionValue: {
                            dimensionName: "Test string",
                            etag: "Test string",
                            id: "Test string",
                            kind: "Test string",
                            matchType: "Test string",
                            value: "Test string",
                        },
                        endTime: "Test string",
                        richMediaExitOverrides: [
                            {
                                clickThroughUrl: {
                                    computedClickThroughUrl: "Test string",
                                    customClickThroughUrl: "Test string",
                                    defaultLandingPage: true,
                                    landingPageId: "Test string",
                                },
                                enabled: true,
                                exitId: "Test string",
                            }                        ],
                        sequence: 42,
                        sslCompliant: true,
                        startTime: "Test string",
                        weight: 42,
                    }                ],
                creativeOptimizationConfigurationId: "Test string",
                type: "Test string",
                weightCalculationStrategy: "Test string",
            },
            dayPartTargeting: {
                daysOfWeek: [
                    "Test string"                ],
                hoursOfDay: [
                    42                ],
                userLocalTime: true,
            },
            defaultClickThroughEventTagProperties: {
                defaultClickThroughEventTagId: "Test string",
                overrideInheritedEventTag: true,
            },
            deliverySchedule: {
                frequencyCap: {
                    duration: "Test string",
                    impressions: "Test string",
                },
                hardCutoff: true,
                impressionRatio: "Test string",
                priority: "Test string",
            },
            dynamicClickTracker: true,
            endTime: "Test string",
            eventTagOverrides: [
                {
                    enabled: true,
                    id: "Test string",
                }            ],
            geoTargeting: {
                cities: [
                    {
                        countryCode: "Test string",
                        countryDartId: "Test string",
                        dartId: "Test string",
                        kind: "Test string",
                        metroCode: "Test string",
                        metroDmaId: "Test string",
                        name: "Test string",
                        regionCode: "Test string",
                        regionDartId: "Test string",
                    }                ],
                countries: [
                    {
                        countryCode: "Test string",
                        dartId: "Test string",
                        kind: "Test string",
                        name: "Test string",
                        sslEnabled: true,
                    }                ],
                excludeCountries: true,
                metros: [
                    {
                        countryCode: "Test string",
                        countryDartId: "Test string",
                        dartId: "Test string",
                        dmaId: "Test string",
                        kind: "Test string",
                        metroCode: "Test string",
                        name: "Test string",
                    }                ],
                postalCodes: [
                    {
                        code: "Test string",
                        countryCode: "Test string",
                        countryDartId: "Test string",
                        id: "Test string",
                        kind: "Test string",
                    }                ],
                regions: [
                    {
                        countryCode: "Test string",
                        countryDartId: "Test string",
                        dartId: "Test string",
                        kind: "Test string",
                        name: "Test string",
                        regionCode: "Test string",
                    }                ],
            },
            id: "Test string",
            idDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            keyValueTargetingExpression: {
                expression: "Test string",
            },
            kind: "Test string",
            languageTargeting: {
                languages: [
                    {
                        id: "Test string",
                        kind: "Test string",
                        languageCode: "Test string",
                        name: "Test string",
                    }                ],
            },
            lastModifiedInfo: {
                time: "Test string",
            },
            name: "Test string",
            placementAssignments: [
                {
                    active: true,
                    placementId: "Test string",
                    placementIdDimensionValue: {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    },
                    sslRequired: true,
                }            ],
            remarketingListExpression: {
                expression: "Test string",
            },
            size: {
                height: 42,
                iab: true,
                id: "Test string",
                kind: "Test string",
                width: 42,
            },
            sslCompliant: true,
            sslRequired: true,
            startTime: "Test string",
            subaccountId: "Test string",
            targetingTemplateId: "Test string",
            technologyTargeting: {
                browsers: [
                    {
                        browserVersionId: "Test string",
                        dartId: "Test string",
                        kind: "Test string",
                        majorVersion: "Test string",
                        minorVersion: "Test string",
                        name: "Test string",
                    }                ],
                connectionTypes: [
                    {
                        id: "Test string",
                        kind: "Test string",
                        name: "Test string",
                    }                ],
                mobileCarriers: [
                    {
                        countryCode: "Test string",
                        countryDartId: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        name: "Test string",
                    }                ],
                operatingSystems: [
                    {
                        dartId: "Test string",
                        desktop: true,
                        kind: "Test string",
                        mobile: true,
                        name: "Test string",
                    }                ],
                operatingSystemVersions: [
                    {
                        id: "Test string",
                        kind: "Test string",
                        majorVersion: "Test string",
                        minorVersion: "Test string",
                        name: "Test string",
                        operatingSystem: {
                            dartId: "Test string",
                            desktop: true,
                            kind: "Test string",
                            mobile: true,
                            name: "Test string",
                        },
                    }                ],
                platformTypes: [
                    {
                        id: "Test string",
                        kind: "Test string",
                        name: "Test string",
                    }                ],
            },
            type: "Test string",
        });
        /** Retrieves a list of ads, possibly filtered. This method supports paging. */
        await gapi.client.dfareporting.ads.list({
            active: true,
            advertiserId: "Test string",
            archived: true,
            audienceSegmentIds: "Test string",
            campaignIds: "Test string",
            compatibility: "Test string",
            creativeIds: "Test string",
            creativeOptimizationConfigurationIds: "Test string",
            dynamicClickTracker: true,
            ids: "Test string",
            landingPageIds: "Test string",
            maxResults: 42,
            overriddenEventTagId: "Test string",
            pageToken: "Test string",
            placementIds: "Test string",
            profileId: "Test string",
            remarketingListIds: "Test string",
            searchString: "Test string",
            sizeIds: "Test string",
            sortField: "Test string",
            sortOrder: "Test string",
            sslCompliant: true,
            sslRequired: true,
            type: "Test string",
        });
        /** Updates an existing ad. This method supports patch semantics. */
        await gapi.client.dfareporting.ads.patch({
            id: "Test string",
            profileId: "Test string",
        }, {
            accountId: "Test string",
            active: true,
            advertiserId: "Test string",
            advertiserIdDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            archived: true,
            audienceSegmentId: "Test string",
            campaignId: "Test string",
            campaignIdDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            clickThroughUrl: {
                computedClickThroughUrl: "Test string",
                customClickThroughUrl: "Test string",
                defaultLandingPage: true,
                landingPageId: "Test string",
            },
            clickThroughUrlSuffixProperties: {
                clickThroughUrlSuffix: "Test string",
                overrideInheritedSuffix: true,
            },
            comments: "Test string",
            compatibility: "Test string",
            createInfo: {
                time: "Test string",
            },
            creativeGroupAssignments: [
                {
                    creativeGroupId: "Test string",
                    creativeGroupNumber: "Test string",
                }            ],
            creativeRotation: {
                creativeAssignments: [
                    {
                        active: true,
                        applyEventTags: true,
                        clickThroughUrl: {
                            computedClickThroughUrl: "Test string",
                            customClickThroughUrl: "Test string",
                            defaultLandingPage: true,
                            landingPageId: "Test string",
                        },
                        companionCreativeOverrides: [
                            {
                                clickThroughUrl: {
                                    computedClickThroughUrl: "Test string",
                                    customClickThroughUrl: "Test string",
                                    defaultLandingPage: true,
                                    landingPageId: "Test string",
                                },
                                creativeId: "Test string",
                            }                        ],
                        creativeGroupAssignments: [
                            {
                                creativeGroupId: "Test string",
                                creativeGroupNumber: "Test string",
                            }                        ],
                        creativeId: "Test string",
                        creativeIdDimensionValue: {
                            dimensionName: "Test string",
                            etag: "Test string",
                            id: "Test string",
                            kind: "Test string",
                            matchType: "Test string",
                            value: "Test string",
                        },
                        endTime: "Test string",
                        richMediaExitOverrides: [
                            {
                                clickThroughUrl: {
                                    computedClickThroughUrl: "Test string",
                                    customClickThroughUrl: "Test string",
                                    defaultLandingPage: true,
                                    landingPageId: "Test string",
                                },
                                enabled: true,
                                exitId: "Test string",
                            }                        ],
                        sequence: 42,
                        sslCompliant: true,
                        startTime: "Test string",
                        weight: 42,
                    }                ],
                creativeOptimizationConfigurationId: "Test string",
                type: "Test string",
                weightCalculationStrategy: "Test string",
            },
            dayPartTargeting: {
                daysOfWeek: [
                    "Test string"                ],
                hoursOfDay: [
                    42                ],
                userLocalTime: true,
            },
            defaultClickThroughEventTagProperties: {
                defaultClickThroughEventTagId: "Test string",
                overrideInheritedEventTag: true,
            },
            deliverySchedule: {
                frequencyCap: {
                    duration: "Test string",
                    impressions: "Test string",
                },
                hardCutoff: true,
                impressionRatio: "Test string",
                priority: "Test string",
            },
            dynamicClickTracker: true,
            endTime: "Test string",
            eventTagOverrides: [
                {
                    enabled: true,
                    id: "Test string",
                }            ],
            geoTargeting: {
                cities: [
                    {
                        countryCode: "Test string",
                        countryDartId: "Test string",
                        dartId: "Test string",
                        kind: "Test string",
                        metroCode: "Test string",
                        metroDmaId: "Test string",
                        name: "Test string",
                        regionCode: "Test string",
                        regionDartId: "Test string",
                    }                ],
                countries: [
                    {
                        countryCode: "Test string",
                        dartId: "Test string",
                        kind: "Test string",
                        name: "Test string",
                        sslEnabled: true,
                    }                ],
                excludeCountries: true,
                metros: [
                    {
                        countryCode: "Test string",
                        countryDartId: "Test string",
                        dartId: "Test string",
                        dmaId: "Test string",
                        kind: "Test string",
                        metroCode: "Test string",
                        name: "Test string",
                    }                ],
                postalCodes: [
                    {
                        code: "Test string",
                        countryCode: "Test string",
                        countryDartId: "Test string",
                        id: "Test string",
                        kind: "Test string",
                    }                ],
                regions: [
                    {
                        countryCode: "Test string",
                        countryDartId: "Test string",
                        dartId: "Test string",
                        kind: "Test string",
                        name: "Test string",
                        regionCode: "Test string",
                    }                ],
            },
            id: "Test string",
            idDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            keyValueTargetingExpression: {
                expression: "Test string",
            },
            kind: "Test string",
            languageTargeting: {
                languages: [
                    {
                        id: "Test string",
                        kind: "Test string",
                        languageCode: "Test string",
                        name: "Test string",
                    }                ],
            },
            lastModifiedInfo: {
                time: "Test string",
            },
            name: "Test string",
            placementAssignments: [
                {
                    active: true,
                    placementId: "Test string",
                    placementIdDimensionValue: {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    },
                    sslRequired: true,
                }            ],
            remarketingListExpression: {
                expression: "Test string",
            },
            size: {
                height: 42,
                iab: true,
                id: "Test string",
                kind: "Test string",
                width: 42,
            },
            sslCompliant: true,
            sslRequired: true,
            startTime: "Test string",
            subaccountId: "Test string",
            targetingTemplateId: "Test string",
            technologyTargeting: {
                browsers: [
                    {
                        browserVersionId: "Test string",
                        dartId: "Test string",
                        kind: "Test string",
                        majorVersion: "Test string",
                        minorVersion: "Test string",
                        name: "Test string",
                    }                ],
                connectionTypes: [
                    {
                        id: "Test string",
                        kind: "Test string",
                        name: "Test string",
                    }                ],
                mobileCarriers: [
                    {
                        countryCode: "Test string",
                        countryDartId: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        name: "Test string",
                    }                ],
                operatingSystems: [
                    {
                        dartId: "Test string",
                        desktop: true,
                        kind: "Test string",
                        mobile: true,
                        name: "Test string",
                    }                ],
                operatingSystemVersions: [
                    {
                        id: "Test string",
                        kind: "Test string",
                        majorVersion: "Test string",
                        minorVersion: "Test string",
                        name: "Test string",
                        operatingSystem: {
                            dartId: "Test string",
                            desktop: true,
                            kind: "Test string",
                            mobile: true,
                            name: "Test string",
                        },
                    }                ],
                platformTypes: [
                    {
                        id: "Test string",
                        kind: "Test string",
                        name: "Test string",
                    }                ],
            },
            type: "Test string",
        });
        /** Updates an existing ad. */
        await gapi.client.dfareporting.ads.update({
            profileId: "Test string",
        }, {
            accountId: "Test string",
            active: true,
            advertiserId: "Test string",
            advertiserIdDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            archived: true,
            audienceSegmentId: "Test string",
            campaignId: "Test string",
            campaignIdDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            clickThroughUrl: {
                computedClickThroughUrl: "Test string",
                customClickThroughUrl: "Test string",
                defaultLandingPage: true,
                landingPageId: "Test string",
            },
            clickThroughUrlSuffixProperties: {
                clickThroughUrlSuffix: "Test string",
                overrideInheritedSuffix: true,
            },
            comments: "Test string",
            compatibility: "Test string",
            createInfo: {
                time: "Test string",
            },
            creativeGroupAssignments: [
                {
                    creativeGroupId: "Test string",
                    creativeGroupNumber: "Test string",
                }            ],
            creativeRotation: {
                creativeAssignments: [
                    {
                        active: true,
                        applyEventTags: true,
                        clickThroughUrl: {
                            computedClickThroughUrl: "Test string",
                            customClickThroughUrl: "Test string",
                            defaultLandingPage: true,
                            landingPageId: "Test string",
                        },
                        companionCreativeOverrides: [
                            {
                                clickThroughUrl: {
                                    computedClickThroughUrl: "Test string",
                                    customClickThroughUrl: "Test string",
                                    defaultLandingPage: true,
                                    landingPageId: "Test string",
                                },
                                creativeId: "Test string",
                            }                        ],
                        creativeGroupAssignments: [
                            {
                                creativeGroupId: "Test string",
                                creativeGroupNumber: "Test string",
                            }                        ],
                        creativeId: "Test string",
                        creativeIdDimensionValue: {
                            dimensionName: "Test string",
                            etag: "Test string",
                            id: "Test string",
                            kind: "Test string",
                            matchType: "Test string",
                            value: "Test string",
                        },
                        endTime: "Test string",
                        richMediaExitOverrides: [
                            {
                                clickThroughUrl: {
                                    computedClickThroughUrl: "Test string",
                                    customClickThroughUrl: "Test string",
                                    defaultLandingPage: true,
                                    landingPageId: "Test string",
                                },
                                enabled: true,
                                exitId: "Test string",
                            }                        ],
                        sequence: 42,
                        sslCompliant: true,
                        startTime: "Test string",
                        weight: 42,
                    }                ],
                creativeOptimizationConfigurationId: "Test string",
                type: "Test string",
                weightCalculationStrategy: "Test string",
            },
            dayPartTargeting: {
                daysOfWeek: [
                    "Test string"                ],
                hoursOfDay: [
                    42                ],
                userLocalTime: true,
            },
            defaultClickThroughEventTagProperties: {
                defaultClickThroughEventTagId: "Test string",
                overrideInheritedEventTag: true,
            },
            deliverySchedule: {
                frequencyCap: {
                    duration: "Test string",
                    impressions: "Test string",
                },
                hardCutoff: true,
                impressionRatio: "Test string",
                priority: "Test string",
            },
            dynamicClickTracker: true,
            endTime: "Test string",
            eventTagOverrides: [
                {
                    enabled: true,
                    id: "Test string",
                }            ],
            geoTargeting: {
                cities: [
                    {
                        countryCode: "Test string",
                        countryDartId: "Test string",
                        dartId: "Test string",
                        kind: "Test string",
                        metroCode: "Test string",
                        metroDmaId: "Test string",
                        name: "Test string",
                        regionCode: "Test string",
                        regionDartId: "Test string",
                    }                ],
                countries: [
                    {
                        countryCode: "Test string",
                        dartId: "Test string",
                        kind: "Test string",
                        name: "Test string",
                        sslEnabled: true,
                    }                ],
                excludeCountries: true,
                metros: [
                    {
                        countryCode: "Test string",
                        countryDartId: "Test string",
                        dartId: "Test string",
                        dmaId: "Test string",
                        kind: "Test string",
                        metroCode: "Test string",
                        name: "Test string",
                    }                ],
                postalCodes: [
                    {
                        code: "Test string",
                        countryCode: "Test string",
                        countryDartId: "Test string",
                        id: "Test string",
                        kind: "Test string",
                    }                ],
                regions: [
                    {
                        countryCode: "Test string",
                        countryDartId: "Test string",
                        dartId: "Test string",
                        kind: "Test string",
                        name: "Test string",
                        regionCode: "Test string",
                    }                ],
            },
            id: "Test string",
            idDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            keyValueTargetingExpression: {
                expression: "Test string",
            },
            kind: "Test string",
            languageTargeting: {
                languages: [
                    {
                        id: "Test string",
                        kind: "Test string",
                        languageCode: "Test string",
                        name: "Test string",
                    }                ],
            },
            lastModifiedInfo: {
                time: "Test string",
            },
            name: "Test string",
            placementAssignments: [
                {
                    active: true,
                    placementId: "Test string",
                    placementIdDimensionValue: {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    },
                    sslRequired: true,
                }            ],
            remarketingListExpression: {
                expression: "Test string",
            },
            size: {
                height: 42,
                iab: true,
                id: "Test string",
                kind: "Test string",
                width: 42,
            },
            sslCompliant: true,
            sslRequired: true,
            startTime: "Test string",
            subaccountId: "Test string",
            targetingTemplateId: "Test string",
            technologyTargeting: {
                browsers: [
                    {
                        browserVersionId: "Test string",
                        dartId: "Test string",
                        kind: "Test string",
                        majorVersion: "Test string",
                        minorVersion: "Test string",
                        name: "Test string",
                    }                ],
                connectionTypes: [
                    {
                        id: "Test string",
                        kind: "Test string",
                        name: "Test string",
                    }                ],
                mobileCarriers: [
                    {
                        countryCode: "Test string",
                        countryDartId: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        name: "Test string",
                    }                ],
                operatingSystems: [
                    {
                        dartId: "Test string",
                        desktop: true,
                        kind: "Test string",
                        mobile: true,
                        name: "Test string",
                    }                ],
                operatingSystemVersions: [
                    {
                        id: "Test string",
                        kind: "Test string",
                        majorVersion: "Test string",
                        minorVersion: "Test string",
                        name: "Test string",
                        operatingSystem: {
                            dartId: "Test string",
                            desktop: true,
                            kind: "Test string",
                            mobile: true,
                            name: "Test string",
                        },
                    }                ],
                platformTypes: [
                    {
                        id: "Test string",
                        kind: "Test string",
                        name: "Test string",
                    }                ],
            },
            type: "Test string",
        });
        /** Deletes an existing advertiser group. */
        await gapi.client.dfareporting.advertiserGroups.delete({
            id: "Test string",
            profileId: "Test string",
        });
        /** Gets one advertiser group by ID. */
        await gapi.client.dfareporting.advertiserGroups.get({
            id: "Test string",
            profileId: "Test string",
        });
        /** Inserts a new advertiser group. */
        await gapi.client.dfareporting.advertiserGroups.insert({
            profileId: "Test string",
        }, {
            accountId: "Test string",
            id: "Test string",
            kind: "Test string",
            name: "Test string",
        });
        /** Retrieves a list of advertiser groups, possibly filtered. This method supports paging. */
        await gapi.client.dfareporting.advertiserGroups.list({
            ids: "Test string",
            maxResults: 42,
            pageToken: "Test string",
            profileId: "Test string",
            searchString: "Test string",
            sortField: "Test string",
            sortOrder: "Test string",
        });
        /** Updates an existing advertiser group. This method supports patch semantics. */
        await gapi.client.dfareporting.advertiserGroups.patch({
            id: "Test string",
            profileId: "Test string",
        }, {
            accountId: "Test string",
            id: "Test string",
            kind: "Test string",
            name: "Test string",
        });
        /** Updates an existing advertiser group. */
        await gapi.client.dfareporting.advertiserGroups.update({
            profileId: "Test string",
        }, {
            accountId: "Test string",
            id: "Test string",
            kind: "Test string",
            name: "Test string",
        });
        /** Gets one landing page by ID. */
        await gapi.client.dfareporting.advertiserLandingPages.get({
            id: "Test string",
            profileId: "Test string",
        });
        /** Inserts a new landing page. */
        await gapi.client.dfareporting.advertiserLandingPages.insert({
            profileId: "Test string",
        }, {
            advertiserId: "Test string",
            archived: true,
            deepLinks: [
                {
                    appUrl: "Test string",
                    fallbackUrl: "Test string",
                    kind: "Test string",
                    mobileApp: {
                        directory: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        publisherName: "Test string",
                        title: "Test string",
                    },
                    remarketingListIds: [
                        "Test string"                    ],
                }            ],
            id: "Test string",
            kind: "Test string",
            name: "Test string",
            url: "Test string",
        });
        /** Retrieves a list of landing pages. */
        await gapi.client.dfareporting.advertiserLandingPages.list({
            advertiserIds: "Test string",
            archived: true,
            campaignIds: "Test string",
            ids: "Test string",
            maxResults: 42,
            pageToken: "Test string",
            profileId: "Test string",
            searchString: "Test string",
            sortField: "Test string",
            sortOrder: "Test string",
            subaccountId: "Test string",
        });
        /** Updates an existing landing page. This method supports patch semantics. */
        await gapi.client.dfareporting.advertiserLandingPages.patch({
            id: "Test string",
            profileId: "Test string",
        }, {
            advertiserId: "Test string",
            archived: true,
            deepLinks: [
                {
                    appUrl: "Test string",
                    fallbackUrl: "Test string",
                    kind: "Test string",
                    mobileApp: {
                        directory: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        publisherName: "Test string",
                        title: "Test string",
                    },
                    remarketingListIds: [
                        "Test string"                    ],
                }            ],
            id: "Test string",
            kind: "Test string",
            name: "Test string",
            url: "Test string",
        });
        /** Updates an existing landing page. */
        await gapi.client.dfareporting.advertiserLandingPages.update({
            profileId: "Test string",
        }, {
            advertiserId: "Test string",
            archived: true,
            deepLinks: [
                {
                    appUrl: "Test string",
                    fallbackUrl: "Test string",
                    kind: "Test string",
                    mobileApp: {
                        directory: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        publisherName: "Test string",
                        title: "Test string",
                    },
                    remarketingListIds: [
                        "Test string"                    ],
                }            ],
            id: "Test string",
            kind: "Test string",
            name: "Test string",
            url: "Test string",
        });
        /** Gets one advertiser by ID. */
        await gapi.client.dfareporting.advertisers.get({
            id: "Test string",
            profileId: "Test string",
        });
        /** Inserts a new advertiser. */
        await gapi.client.dfareporting.advertisers.insert({
            profileId: "Test string",
        }, {
            accountId: "Test string",
            advertiserGroupId: "Test string",
            clickThroughUrlSuffix: "Test string",
            defaultClickThroughEventTagId: "Test string",
            defaultEmail: "Test string",
            floodlightConfigurationId: "Test string",
            floodlightConfigurationIdDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            id: "Test string",
            idDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            kind: "Test string",
            name: "Test string",
            originalFloodlightConfigurationId: "Test string",
            status: "Test string",
            subaccountId: "Test string",
            suspended: true,
        });
        /** Retrieves a list of advertisers, possibly filtered. This method supports paging. */
        await gapi.client.dfareporting.advertisers.list({
            advertiserGroupIds: "Test string",
            floodlightConfigurationIds: "Test string",
            ids: "Test string",
            includeAdvertisersWithoutGroupsOnly: true,
            maxResults: 42,
            onlyParent: true,
            pageToken: "Test string",
            profileId: "Test string",
            searchString: "Test string",
            sortField: "Test string",
            sortOrder: "Test string",
            status: "Test string",
            subaccountId: "Test string",
        });
        /** Updates an existing advertiser. This method supports patch semantics. */
        await gapi.client.dfareporting.advertisers.patch({
            id: "Test string",
            profileId: "Test string",
        }, {
            accountId: "Test string",
            advertiserGroupId: "Test string",
            clickThroughUrlSuffix: "Test string",
            defaultClickThroughEventTagId: "Test string",
            defaultEmail: "Test string",
            floodlightConfigurationId: "Test string",
            floodlightConfigurationIdDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            id: "Test string",
            idDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            kind: "Test string",
            name: "Test string",
            originalFloodlightConfigurationId: "Test string",
            status: "Test string",
            subaccountId: "Test string",
            suspended: true,
        });
        /** Updates an existing advertiser. */
        await gapi.client.dfareporting.advertisers.update({
            profileId: "Test string",
        }, {
            accountId: "Test string",
            advertiserGroupId: "Test string",
            clickThroughUrlSuffix: "Test string",
            defaultClickThroughEventTagId: "Test string",
            defaultEmail: "Test string",
            floodlightConfigurationId: "Test string",
            floodlightConfigurationIdDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            id: "Test string",
            idDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            kind: "Test string",
            name: "Test string",
            originalFloodlightConfigurationId: "Test string",
            status: "Test string",
            subaccountId: "Test string",
            suspended: true,
        });
        /** Retrieves a list of browsers. */
        await gapi.client.dfareporting.browsers.list({
            profileId: "Test string",
        });
        /**
         * Associates a creative with the specified campaign. This method creates a default ad with dimensions matching the creative in the campaign if such a
         * default ad does not exist already.
         */
        await gapi.client.dfareporting.campaignCreativeAssociations.insert({
            campaignId: "Test string",
            profileId: "Test string",
        }, {
            creativeId: "Test string",
            kind: "Test string",
        });
        /** Retrieves the list of creative IDs associated with the specified campaign. This method supports paging. */
        await gapi.client.dfareporting.campaignCreativeAssociations.list({
            campaignId: "Test string",
            maxResults: 42,
            pageToken: "Test string",
            profileId: "Test string",
            sortOrder: "Test string",
        });
        /** Gets one campaign by ID. */
        await gapi.client.dfareporting.campaigns.get({
            id: "Test string",
            profileId: "Test string",
        });
        /** Inserts a new campaign. */
        await gapi.client.dfareporting.campaigns.insert({
            profileId: "Test string",
        }, {
            accountId: "Test string",
            adBlockingConfiguration: {
                clickThroughUrl: "Test string",
                creativeBundleId: "Test string",
                enabled: true,
                overrideClickThroughUrl: true,
            },
            additionalCreativeOptimizationConfigurations: [
                {
                    id: "Test string",
                    name: "Test string",
                    optimizationActivitys: [
                        {
                            floodlightActivityId: "Test string",
                            floodlightActivityIdDimensionValue: {
                                dimensionName: "Test string",
                                etag: "Test string",
                                id: "Test string",
                                kind: "Test string",
                                matchType: "Test string",
                                value: "Test string",
                            },
                            weight: 42,
                        }                    ],
                    optimizationModel: "Test string",
                }            ],
            advertiserGroupId: "Test string",
            advertiserId: "Test string",
            advertiserIdDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            archived: true,
            audienceSegmentGroups: [
                {
                    audienceSegments: [
                        {
                            allocation: 42,
                            id: "Test string",
                            name: "Test string",
                        }                    ],
                    id: "Test string",
                    name: "Test string",
                }            ],
            billingInvoiceCode: "Test string",
            clickThroughUrlSuffixProperties: {
                clickThroughUrlSuffix: "Test string",
                overrideInheritedSuffix: true,
            },
            comment: "Test string",
            createInfo: {
                time: "Test string",
            },
            creativeGroupIds: [
                "Test string"            ],
            creativeOptimizationConfiguration: {
                id: "Test string",
                name: "Test string",
                optimizationActivitys: [
                    {
                        floodlightActivityId: "Test string",
                        floodlightActivityIdDimensionValue: {
                            dimensionName: "Test string",
                            etag: "Test string",
                            id: "Test string",
                            kind: "Test string",
                            matchType: "Test string",
                            value: "Test string",
                        },
                        weight: 42,
                    }                ],
                optimizationModel: "Test string",
            },
            defaultClickThroughEventTagProperties: {
                defaultClickThroughEventTagId: "Test string",
                overrideInheritedEventTag: true,
            },
            defaultLandingPageId: "Test string",
            endDate: "Test string",
            eventTagOverrides: [
                {
                    enabled: true,
                    id: "Test string",
                }            ],
            externalId: "Test string",
            id: "Test string",
            idDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            kind: "Test string",
            lastModifiedInfo: {
                time: "Test string",
            },
            name: "Test string",
            nielsenOcrEnabled: true,
            startDate: "Test string",
            subaccountId: "Test string",
            traffickerEmails: [
                "Test string"            ],
        });
        /** Retrieves a list of campaigns, possibly filtered. This method supports paging. */
        await gapi.client.dfareporting.campaigns.list({
            advertiserGroupIds: "Test string",
            advertiserIds: "Test string",
            archived: true,
            atLeastOneOptimizationActivity: true,
            excludedIds: "Test string",
            ids: "Test string",
            maxResults: 42,
            overriddenEventTagId: "Test string",
            pageToken: "Test string",
            profileId: "Test string",
            searchString: "Test string",
            sortField: "Test string",
            sortOrder: "Test string",
            subaccountId: "Test string",
        });
        /** Updates an existing campaign. This method supports patch semantics. */
        await gapi.client.dfareporting.campaigns.patch({
            id: "Test string",
            profileId: "Test string",
        }, {
            accountId: "Test string",
            adBlockingConfiguration: {
                clickThroughUrl: "Test string",
                creativeBundleId: "Test string",
                enabled: true,
                overrideClickThroughUrl: true,
            },
            additionalCreativeOptimizationConfigurations: [
                {
                    id: "Test string",
                    name: "Test string",
                    optimizationActivitys: [
                        {
                            floodlightActivityId: "Test string",
                            floodlightActivityIdDimensionValue: {
                                dimensionName: "Test string",
                                etag: "Test string",
                                id: "Test string",
                                kind: "Test string",
                                matchType: "Test string",
                                value: "Test string",
                            },
                            weight: 42,
                        }                    ],
                    optimizationModel: "Test string",
                }            ],
            advertiserGroupId: "Test string",
            advertiserId: "Test string",
            advertiserIdDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            archived: true,
            audienceSegmentGroups: [
                {
                    audienceSegments: [
                        {
                            allocation: 42,
                            id: "Test string",
                            name: "Test string",
                        }                    ],
                    id: "Test string",
                    name: "Test string",
                }            ],
            billingInvoiceCode: "Test string",
            clickThroughUrlSuffixProperties: {
                clickThroughUrlSuffix: "Test string",
                overrideInheritedSuffix: true,
            },
            comment: "Test string",
            createInfo: {
                time: "Test string",
            },
            creativeGroupIds: [
                "Test string"            ],
            creativeOptimizationConfiguration: {
                id: "Test string",
                name: "Test string",
                optimizationActivitys: [
                    {
                        floodlightActivityId: "Test string",
                        floodlightActivityIdDimensionValue: {
                            dimensionName: "Test string",
                            etag: "Test string",
                            id: "Test string",
                            kind: "Test string",
                            matchType: "Test string",
                            value: "Test string",
                        },
                        weight: 42,
                    }                ],
                optimizationModel: "Test string",
            },
            defaultClickThroughEventTagProperties: {
                defaultClickThroughEventTagId: "Test string",
                overrideInheritedEventTag: true,
            },
            defaultLandingPageId: "Test string",
            endDate: "Test string",
            eventTagOverrides: [
                {
                    enabled: true,
                    id: "Test string",
                }            ],
            externalId: "Test string",
            id: "Test string",
            idDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            kind: "Test string",
            lastModifiedInfo: {
                time: "Test string",
            },
            name: "Test string",
            nielsenOcrEnabled: true,
            startDate: "Test string",
            subaccountId: "Test string",
            traffickerEmails: [
                "Test string"            ],
        });
        /** Updates an existing campaign. */
        await gapi.client.dfareporting.campaigns.update({
            profileId: "Test string",
        }, {
            accountId: "Test string",
            adBlockingConfiguration: {
                clickThroughUrl: "Test string",
                creativeBundleId: "Test string",
                enabled: true,
                overrideClickThroughUrl: true,
            },
            additionalCreativeOptimizationConfigurations: [
                {
                    id: "Test string",
                    name: "Test string",
                    optimizationActivitys: [
                        {
                            floodlightActivityId: "Test string",
                            floodlightActivityIdDimensionValue: {
                                dimensionName: "Test string",
                                etag: "Test string",
                                id: "Test string",
                                kind: "Test string",
                                matchType: "Test string",
                                value: "Test string",
                            },
                            weight: 42,
                        }                    ],
                    optimizationModel: "Test string",
                }            ],
            advertiserGroupId: "Test string",
            advertiserId: "Test string",
            advertiserIdDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            archived: true,
            audienceSegmentGroups: [
                {
                    audienceSegments: [
                        {
                            allocation: 42,
                            id: "Test string",
                            name: "Test string",
                        }                    ],
                    id: "Test string",
                    name: "Test string",
                }            ],
            billingInvoiceCode: "Test string",
            clickThroughUrlSuffixProperties: {
                clickThroughUrlSuffix: "Test string",
                overrideInheritedSuffix: true,
            },
            comment: "Test string",
            createInfo: {
                time: "Test string",
            },
            creativeGroupIds: [
                "Test string"            ],
            creativeOptimizationConfiguration: {
                id: "Test string",
                name: "Test string",
                optimizationActivitys: [
                    {
                        floodlightActivityId: "Test string",
                        floodlightActivityIdDimensionValue: {
                            dimensionName: "Test string",
                            etag: "Test string",
                            id: "Test string",
                            kind: "Test string",
                            matchType: "Test string",
                            value: "Test string",
                        },
                        weight: 42,
                    }                ],
                optimizationModel: "Test string",
            },
            defaultClickThroughEventTagProperties: {
                defaultClickThroughEventTagId: "Test string",
                overrideInheritedEventTag: true,
            },
            defaultLandingPageId: "Test string",
            endDate: "Test string",
            eventTagOverrides: [
                {
                    enabled: true,
                    id: "Test string",
                }            ],
            externalId: "Test string",
            id: "Test string",
            idDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            kind: "Test string",
            lastModifiedInfo: {
                time: "Test string",
            },
            name: "Test string",
            nielsenOcrEnabled: true,
            startDate: "Test string",
            subaccountId: "Test string",
            traffickerEmails: [
                "Test string"            ],
        });
        /** Gets one change log by ID. */
        await gapi.client.dfareporting.changeLogs.get({
            id: "Test string",
            profileId: "Test string",
        });
        /** Retrieves a list of change logs. This method supports paging. */
        await gapi.client.dfareporting.changeLogs.list({
            action: "Test string",
            ids: "Test string",
            maxChangeTime: "Test string",
            maxResults: 42,
            minChangeTime: "Test string",
            objectIds: "Test string",
            objectType: "Test string",
            pageToken: "Test string",
            profileId: "Test string",
            searchString: "Test string",
            userProfileIds: "Test string",
        });
        /** Retrieves a list of cities, possibly filtered. */
        await gapi.client.dfareporting.cities.list({
            countryDartIds: "Test string",
            dartIds: "Test string",
            namePrefix: "Test string",
            profileId: "Test string",
            regionDartIds: "Test string",
        });
        /** Gets one connection type by ID. */
        await gapi.client.dfareporting.connectionTypes.get({
            id: "Test string",
            profileId: "Test string",
        });
        /** Retrieves a list of connection types. */
        await gapi.client.dfareporting.connectionTypes.list({
            profileId: "Test string",
        });
        /** Deletes an existing content category. */
        await gapi.client.dfareporting.contentCategories.delete({
            id: "Test string",
            profileId: "Test string",
        });
        /** Gets one content category by ID. */
        await gapi.client.dfareporting.contentCategories.get({
            id: "Test string",
            profileId: "Test string",
        });
        /** Inserts a new content category. */
        await gapi.client.dfareporting.contentCategories.insert({
            profileId: "Test string",
        }, {
            accountId: "Test string",
            id: "Test string",
            kind: "Test string",
            name: "Test string",
        });
        /** Retrieves a list of content categories, possibly filtered. This method supports paging. */
        await gapi.client.dfareporting.contentCategories.list({
            ids: "Test string",
            maxResults: 42,
            pageToken: "Test string",
            profileId: "Test string",
            searchString: "Test string",
            sortField: "Test string",
            sortOrder: "Test string",
        });
        /** Updates an existing content category. This method supports patch semantics. */
        await gapi.client.dfareporting.contentCategories.patch({
            id: "Test string",
            profileId: "Test string",
        }, {
            accountId: "Test string",
            id: "Test string",
            kind: "Test string",
            name: "Test string",
        });
        /** Updates an existing content category. */
        await gapi.client.dfareporting.contentCategories.update({
            profileId: "Test string",
        }, {
            accountId: "Test string",
            id: "Test string",
            kind: "Test string",
            name: "Test string",
        });
        /** Inserts conversions. */
        await gapi.client.dfareporting.conversions.batchinsert({
            profileId: "Test string",
        }, {
            conversions: [
                {
                    childDirectedTreatment: true,
                    customVariables: [
                        {
                            kind: "Test string",
                            type: "Test string",
                            value: "Test string",
                        }                    ],
                    encryptedUserId: "Test string",
                    encryptedUserIdCandidates: [
                        "Test string"                    ],
                    floodlightActivityId: "Test string",
                    floodlightConfigurationId: "Test string",
                    gclid: "Test string",
                    kind: "Test string",
                    limitAdTracking: true,
                    matchId: "Test string",
                    mobileDeviceId: "Test string",
                    nonPersonalizedAd: true,
                    ordinal: "Test string",
                    quantity: "Test string",
                    timestampMicros: "Test string",
                    treatmentForUnderage: true,
                    value: 42,
                }            ],
            encryptionInfo: {
                encryptionEntityId: "Test string",
                encryptionEntityType: "Test string",
                encryptionSource: "Test string",
                kind: "Test string",
            },
            kind: "Test string",
        });
        /** Updates existing conversions. */
        await gapi.client.dfareporting.conversions.batchupdate({
            profileId: "Test string",
        }, {
            conversions: [
                {
                    childDirectedTreatment: true,
                    customVariables: [
                        {
                            kind: "Test string",
                            type: "Test string",
                            value: "Test string",
                        }                    ],
                    encryptedUserId: "Test string",
                    encryptedUserIdCandidates: [
                        "Test string"                    ],
                    floodlightActivityId: "Test string",
                    floodlightConfigurationId: "Test string",
                    gclid: "Test string",
                    kind: "Test string",
                    limitAdTracking: true,
                    matchId: "Test string",
                    mobileDeviceId: "Test string",
                    nonPersonalizedAd: true,
                    ordinal: "Test string",
                    quantity: "Test string",
                    timestampMicros: "Test string",
                    treatmentForUnderage: true,
                    value: 42,
                }            ],
            encryptionInfo: {
                encryptionEntityId: "Test string",
                encryptionEntityType: "Test string",
                encryptionSource: "Test string",
                kind: "Test string",
            },
            kind: "Test string",
        });
        /** Gets one country by ID. */
        await gapi.client.dfareporting.countries.get({
            dartId: "Test string",
            profileId: "Test string",
        });
        /** Retrieves a list of countries. */
        await gapi.client.dfareporting.countries.list({
            profileId: "Test string",
        });
        /** Inserts a new creative asset. */
        await gapi.client.dfareporting.creativeAssets.insert({
            advertiserId: "Test string",
            profileId: "Test string",
        }, {
            assetIdentifier: {
                name: "Test string",
                type: "Test string",
            },
            clickTags: [
                {
                    clickThroughUrl: {
                        computedClickThroughUrl: "Test string",
                        customClickThroughUrl: "Test string",
                        landingPageId: "Test string",
                    },
                    eventName: "Test string",
                    name: "Test string",
                }            ],
            counterCustomEvents: [
                {
                    advertiserCustomEventId: "Test string",
                    advertiserCustomEventName: "Test string",
                    advertiserCustomEventType: "Test string",
                    artworkLabel: "Test string",
                    artworkType: "Test string",
                    exitClickThroughUrl: {
                        computedClickThroughUrl: "Test string",
                        customClickThroughUrl: "Test string",
                        landingPageId: "Test string",
                    },
                    id: "Test string",
                    popupWindowProperties: {
                        dimension: {
                            height: 42,
                            iab: true,
                            id: "Test string",
                            kind: "Test string",
                            width: 42,
                        },
                        offset: {
                            left: 42,
                            top: 42,
                        },
                        positionType: "Test string",
                        showAddressBar: true,
                        showMenuBar: true,
                        showScrollBar: true,
                        showStatusBar: true,
                        showToolBar: true,
                        title: "Test string",
                    },
                    targetType: "Test string",
                    videoReportingId: "Test string",
                }            ],
            detectedFeatures: [
                "Test string"            ],
            exitCustomEvents: [
                {
                    advertiserCustomEventId: "Test string",
                    advertiserCustomEventName: "Test string",
                    advertiserCustomEventType: "Test string",
                    artworkLabel: "Test string",
                    artworkType: "Test string",
                    exitClickThroughUrl: {
                        computedClickThroughUrl: "Test string",
                        customClickThroughUrl: "Test string",
                        landingPageId: "Test string",
                    },
                    id: "Test string",
                    popupWindowProperties: {
                        dimension: {
                            height: 42,
                            iab: true,
                            id: "Test string",
                            kind: "Test string",
                            width: 42,
                        },
                        offset: {
                            left: 42,
                            top: 42,
                        },
                        positionType: "Test string",
                        showAddressBar: true,
                        showMenuBar: true,
                        showScrollBar: true,
                        showStatusBar: true,
                        showToolBar: true,
                        title: "Test string",
                    },
                    targetType: "Test string",
                    videoReportingId: "Test string",
                }            ],
            id: "Test string",
            idDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            kind: "Test string",
            richMedia: true,
            timerCustomEvents: [
                {
                    advertiserCustomEventId: "Test string",
                    advertiserCustomEventName: "Test string",
                    advertiserCustomEventType: "Test string",
                    artworkLabel: "Test string",
                    artworkType: "Test string",
                    exitClickThroughUrl: {
                        computedClickThroughUrl: "Test string",
                        customClickThroughUrl: "Test string",
                        landingPageId: "Test string",
                    },
                    id: "Test string",
                    popupWindowProperties: {
                        dimension: {
                            height: 42,
                            iab: true,
                            id: "Test string",
                            kind: "Test string",
                            width: 42,
                        },
                        offset: {
                            left: 42,
                            top: 42,
                        },
                        positionType: "Test string",
                        showAddressBar: true,
                        showMenuBar: true,
                        showScrollBar: true,
                        showStatusBar: true,
                        showToolBar: true,
                        title: "Test string",
                    },
                    targetType: "Test string",
                    videoReportingId: "Test string",
                }            ],
            warnedValidationRules: [
                "Test string"            ],
        });
        /** Deletes an existing creative field. */
        await gapi.client.dfareporting.creativeFields.delete({
            id: "Test string",
            profileId: "Test string",
        });
        /** Gets one creative field by ID. */
        await gapi.client.dfareporting.creativeFields.get({
            id: "Test string",
            profileId: "Test string",
        });
        /** Inserts a new creative field. */
        await gapi.client.dfareporting.creativeFields.insert({
            profileId: "Test string",
        }, {
            accountId: "Test string",
            advertiserId: "Test string",
            advertiserIdDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            id: "Test string",
            kind: "Test string",
            name: "Test string",
            subaccountId: "Test string",
        });
        /** Retrieves a list of creative fields, possibly filtered. This method supports paging. */
        await gapi.client.dfareporting.creativeFields.list({
            advertiserIds: "Test string",
            ids: "Test string",
            maxResults: 42,
            pageToken: "Test string",
            profileId: "Test string",
            searchString: "Test string",
            sortField: "Test string",
            sortOrder: "Test string",
        });
        /** Updates an existing creative field. This method supports patch semantics. */
        await gapi.client.dfareporting.creativeFields.patch({
            id: "Test string",
            profileId: "Test string",
        }, {
            accountId: "Test string",
            advertiserId: "Test string",
            advertiserIdDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            id: "Test string",
            kind: "Test string",
            name: "Test string",
            subaccountId: "Test string",
        });
        /** Updates an existing creative field. */
        await gapi.client.dfareporting.creativeFields.update({
            profileId: "Test string",
        }, {
            accountId: "Test string",
            advertiserId: "Test string",
            advertiserIdDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            id: "Test string",
            kind: "Test string",
            name: "Test string",
            subaccountId: "Test string",
        });
        /** Deletes an existing creative field value. */
        await gapi.client.dfareporting.creativeFieldValues.delete({
            creativeFieldId: "Test string",
            id: "Test string",
            profileId: "Test string",
        });
        /** Gets one creative field value by ID. */
        await gapi.client.dfareporting.creativeFieldValues.get({
            creativeFieldId: "Test string",
            id: "Test string",
            profileId: "Test string",
        });
        /** Inserts a new creative field value. */
        await gapi.client.dfareporting.creativeFieldValues.insert({
            creativeFieldId: "Test string",
            profileId: "Test string",
        }, {
            id: "Test string",
            kind: "Test string",
            value: "Test string",
        });
        /** Retrieves a list of creative field values, possibly filtered. This method supports paging. */
        await gapi.client.dfareporting.creativeFieldValues.list({
            creativeFieldId: "Test string",
            ids: "Test string",
            maxResults: 42,
            pageToken: "Test string",
            profileId: "Test string",
            searchString: "Test string",
            sortField: "Test string",
            sortOrder: "Test string",
        });
        /** Updates an existing creative field value. This method supports patch semantics. */
        await gapi.client.dfareporting.creativeFieldValues.patch({
            creativeFieldId: "Test string",
            id: "Test string",
            profileId: "Test string",
        }, {
            id: "Test string",
            kind: "Test string",
            value: "Test string",
        });
        /** Updates an existing creative field value. */
        await gapi.client.dfareporting.creativeFieldValues.update({
            creativeFieldId: "Test string",
            profileId: "Test string",
        }, {
            id: "Test string",
            kind: "Test string",
            value: "Test string",
        });
        /** Gets one creative group by ID. */
        await gapi.client.dfareporting.creativeGroups.get({
            id: "Test string",
            profileId: "Test string",
        });
        /** Inserts a new creative group. */
        await gapi.client.dfareporting.creativeGroups.insert({
            profileId: "Test string",
        }, {
            accountId: "Test string",
            advertiserId: "Test string",
            advertiserIdDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            groupNumber: 42,
            id: "Test string",
            kind: "Test string",
            name: "Test string",
            subaccountId: "Test string",
        });
        /** Retrieves a list of creative groups, possibly filtered. This method supports paging. */
        await gapi.client.dfareporting.creativeGroups.list({
            advertiserIds: "Test string",
            groupNumber: 42,
            ids: "Test string",
            maxResults: 42,
            pageToken: "Test string",
            profileId: "Test string",
            searchString: "Test string",
            sortField: "Test string",
            sortOrder: "Test string",
        });
        /** Updates an existing creative group. This method supports patch semantics. */
        await gapi.client.dfareporting.creativeGroups.patch({
            id: "Test string",
            profileId: "Test string",
        }, {
            accountId: "Test string",
            advertiserId: "Test string",
            advertiserIdDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            groupNumber: 42,
            id: "Test string",
            kind: "Test string",
            name: "Test string",
            subaccountId: "Test string",
        });
        /** Updates an existing creative group. */
        await gapi.client.dfareporting.creativeGroups.update({
            profileId: "Test string",
        }, {
            accountId: "Test string",
            advertiserId: "Test string",
            advertiserIdDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            groupNumber: 42,
            id: "Test string",
            kind: "Test string",
            name: "Test string",
            subaccountId: "Test string",
        });
        /** Gets one creative by ID. */
        await gapi.client.dfareporting.creatives.get({
            id: "Test string",
            profileId: "Test string",
        });
        /** Inserts a new creative. */
        await gapi.client.dfareporting.creatives.insert({
            profileId: "Test string",
        }, {
            accountId: "Test string",
            active: true,
            additionalSizes: [
                {
                    height: 42,
                    iab: true,
                    id: "Test string",
                    kind: "Test string",
                    width: 42,
                }            ],
            adParameters: "Test string",
            adTagKeys: [
                "Test string"            ],
            advertiserId: "Test string",
            allowScriptAccess: true,
            archived: true,
            artworkType: "Test string",
            authoringSource: "Test string",
            authoringTool: "Test string",
            autoAdvanceImages: true,
            backgroundColor: "Test string",
            backupImageClickThroughUrl: {
                computedClickThroughUrl: "Test string",
                customClickThroughUrl: "Test string",
                landingPageId: "Test string",
            },
            backupImageFeatures: [
                "Test string"            ],
            backupImageReportingLabel: "Test string",
            backupImageTargetWindow: {
                customHtml: "Test string",
                targetWindowOption: "Test string",
            },
            clickTags: [
                {
                    clickThroughUrl: {
                        computedClickThroughUrl: "Test string",
                        customClickThroughUrl: "Test string",
                        landingPageId: "Test string",
                    },
                    eventName: "Test string",
                    name: "Test string",
                }            ],
            commercialId: "Test string",
            companionCreatives: [
                "Test string"            ],
            compatibility: [
                "Test string"            ],
            convertFlashToHtml5: true,
            counterCustomEvents: [
                {
                    advertiserCustomEventId: "Test string",
                    advertiserCustomEventName: "Test string",
                    advertiserCustomEventType: "Test string",
                    artworkLabel: "Test string",
                    artworkType: "Test string",
                    exitClickThroughUrl: {
                        computedClickThroughUrl: "Test string",
                        customClickThroughUrl: "Test string",
                        landingPageId: "Test string",
                    },
                    id: "Test string",
                    popupWindowProperties: {
                        dimension: {
                            height: 42,
                            iab: true,
                            id: "Test string",
                            kind: "Test string",
                            width: 42,
                        },
                        offset: {
                            left: 42,
                            top: 42,
                        },
                        positionType: "Test string",
                        showAddressBar: true,
                        showMenuBar: true,
                        showScrollBar: true,
                        showStatusBar: true,
                        showToolBar: true,
                        title: "Test string",
                    },
                    targetType: "Test string",
                    videoReportingId: "Test string",
                }            ],
            creativeAssets: [
                {
                    actionScript3: true,
                    active: true,
                    additionalSizes: [
                        {
                            height: 42,
                            iab: true,
                            id: "Test string",
                            kind: "Test string",
                            width: 42,
                        }                    ],
                    alignment: "Test string",
                    artworkType: "Test string",
                    assetIdentifier: {
                        name: "Test string",
                        type: "Test string",
                    },
                    audioBitRate: 42,
                    audioSampleRate: 42,
                    backupImageExit: {
                        advertiserCustomEventId: "Test string",
                        advertiserCustomEventName: "Test string",
                        advertiserCustomEventType: "Test string",
                        artworkLabel: "Test string",
                        artworkType: "Test string",
                        exitClickThroughUrl: {
                            computedClickThroughUrl: "Test string",
                            customClickThroughUrl: "Test string",
                            landingPageId: "Test string",
                        },
                        id: "Test string",
                        popupWindowProperties: {
                            dimension: {
                                height: 42,
                                iab: true,
                                id: "Test string",
                                kind: "Test string",
                                width: 42,
                            },
                            offset: {
                                left: 42,
                                top: 42,
                            },
                            positionType: "Test string",
                            showAddressBar: true,
                            showMenuBar: true,
                            showScrollBar: true,
                            showStatusBar: true,
                            showToolBar: true,
                            title: "Test string",
                        },
                        targetType: "Test string",
                        videoReportingId: "Test string",
                    },
                    bitRate: 42,
                    childAssetType: "Test string",
                    collapsedSize: {
                        height: 42,
                        iab: true,
                        id: "Test string",
                        kind: "Test string",
                        width: 42,
                    },
                    companionCreativeIds: [
                        "Test string"                    ],
                    customStartTimeValue: 42,
                    detectedFeatures: [
                        "Test string"                    ],
                    displayType: "Test string",
                    duration: 42,
                    durationType: "Test string",
                    expandedDimension: {
                        height: 42,
                        iab: true,
                        id: "Test string",
                        kind: "Test string",
                        width: 42,
                    },
                    fileSize: "Test string",
                    flashVersion: 42,
                    frameRate: 42,
                    hideFlashObjects: true,
                    hideSelectionBoxes: true,
                    horizontallyLocked: true,
                    id: "Test string",
                    idDimensionValue: {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    },
                    mediaDuration: 42,
                    mimeType: "Test string",
                    offset: {
                        left: 42,
                        top: 42,
                    },
                    orientation: "Test string",
                    originalBackup: true,
                    politeLoad: true,
                    position: {
                        left: 42,
                        top: 42,
                    },
                    positionLeftUnit: "Test string",
                    positionTopUnit: "Test string",
                    progressiveServingUrl: "Test string",
                    pushdown: true,
                    pushdownDuration: 42,
                    role: "Test string",
                    size: {
                        height: 42,
                        iab: true,
                        id: "Test string",
                        kind: "Test string",
                        width: 42,
                    },
                    sslCompliant: true,
                    startTimeType: "Test string",
                    streamingServingUrl: "Test string",
                    transparency: true,
                    verticallyLocked: true,
                    windowMode: "Test string",
                    zIndex: 42,
                    zipFilename: "Test string",
                    zipFilesize: "Test string",
                }            ],
            creativeAssetSelection: {
                defaultAssetId: "Test string",
                rules: [
                    {
                        assetId: "Test string",
                        name: "Test string",
                        targetingTemplateId: "Test string",
                    }                ],
            },
            creativeFieldAssignments: [
                {
                    creativeFieldId: "Test string",
                    creativeFieldValueId: "Test string",
                }            ],
            customKeyValues: [
                "Test string"            ],
            dynamicAssetSelection: true,
            exitCustomEvents: [
                {
                    advertiserCustomEventId: "Test string",
                    advertiserCustomEventName: "Test string",
                    advertiserCustomEventType: "Test string",
                    artworkLabel: "Test string",
                    artworkType: "Test string",
                    exitClickThroughUrl: {
                        computedClickThroughUrl: "Test string",
                        customClickThroughUrl: "Test string",
                        landingPageId: "Test string",
                    },
                    id: "Test string",
                    popupWindowProperties: {
                        dimension: {
                            height: 42,
                            iab: true,
                            id: "Test string",
                            kind: "Test string",
                            width: 42,
                        },
                        offset: {
                            left: 42,
                            top: 42,
                        },
                        positionType: "Test string",
                        showAddressBar: true,
                        showMenuBar: true,
                        showScrollBar: true,
                        showStatusBar: true,
                        showToolBar: true,
                        title: "Test string",
                    },
                    targetType: "Test string",
                    videoReportingId: "Test string",
                }            ],
            fsCommand: {
                left: 42,
                positionOption: "Test string",
                top: 42,
                windowHeight: 42,
                windowWidth: 42,
            },
            htmlCode: "Test string",
            htmlCodeLocked: true,
            id: "Test string",
            idDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            kind: "Test string",
            lastModifiedInfo: {
                time: "Test string",
            },
            latestTraffickedCreativeId: "Test string",
            mediaDescription: "Test string",
            mediaDuration: 42,
            name: "Test string",
            obaIcon: {
                iconClickThroughUrl: "Test string",
                iconClickTrackingUrl: "Test string",
                iconViewTrackingUrl: "Test string",
                program: "Test string",
                resourceUrl: "Test string",
                size: {
                    height: 42,
                    iab: true,
                    id: "Test string",
                    kind: "Test string",
                    width: 42,
                },
                xPosition: "Test string",
                yPosition: "Test string",
            },
            overrideCss: "Test string",
            progressOffset: {
                offsetPercentage: 42,
                offsetSeconds: 42,
            },
            redirectUrl: "Test string",
            renderingId: "Test string",
            renderingIdDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            requiredFlashPluginVersion: "Test string",
            requiredFlashVersion: 42,
            size: {
                height: 42,
                iab: true,
                id: "Test string",
                kind: "Test string",
                width: 42,
            },
            skipOffset: {
                offsetPercentage: 42,
                offsetSeconds: 42,
            },
            skippable: true,
            sslCompliant: true,
            sslOverride: true,
            studioAdvertiserId: "Test string",
            studioCreativeId: "Test string",
            studioTraffickedCreativeId: "Test string",
            subaccountId: "Test string",
            thirdPartyBackupImageImpressionsUrl: "Test string",
            thirdPartyRichMediaImpressionsUrl: "Test string",
            thirdPartyUrls: [
                {
                    thirdPartyUrlType: "Test string",
                    url: "Test string",
                }            ],
            timerCustomEvents: [
                {
                    advertiserCustomEventId: "Test string",
                    advertiserCustomEventName: "Test string",
                    advertiserCustomEventType: "Test string",
                    artworkLabel: "Test string",
                    artworkType: "Test string",
                    exitClickThroughUrl: {
                        computedClickThroughUrl: "Test string",
                        customClickThroughUrl: "Test string",
                        landingPageId: "Test string",
                    },
                    id: "Test string",
                    popupWindowProperties: {
                        dimension: {
                            height: 42,
                            iab: true,
                            id: "Test string",
                            kind: "Test string",
                            width: 42,
                        },
                        offset: {
                            left: 42,
                            top: 42,
                        },
                        positionType: "Test string",
                        showAddressBar: true,
                        showMenuBar: true,
                        showScrollBar: true,
                        showStatusBar: true,
                        showToolBar: true,
                        title: "Test string",
                    },
                    targetType: "Test string",
                    videoReportingId: "Test string",
                }            ],
            totalFileSize: "Test string",
            type: "Test string",
            universalAdId: {
                registry: "Test string",
                value: "Test string",
            },
            version: 42,
        });
        /** Retrieves a list of creatives, possibly filtered. This method supports paging. */
        await gapi.client.dfareporting.creatives.list({
            active: true,
            advertiserId: "Test string",
            archived: true,
            campaignId: "Test string",
            companionCreativeIds: "Test string",
            creativeFieldIds: "Test string",
            ids: "Test string",
            maxResults: 42,
            pageToken: "Test string",
            profileId: "Test string",
            renderingIds: "Test string",
            searchString: "Test string",
            sizeIds: "Test string",
            sortField: "Test string",
            sortOrder: "Test string",
            studioCreativeId: "Test string",
            types: "Test string",
        });
        /** Updates an existing creative. This method supports patch semantics. */
        await gapi.client.dfareporting.creatives.patch({
            id: "Test string",
            profileId: "Test string",
        }, {
            accountId: "Test string",
            active: true,
            additionalSizes: [
                {
                    height: 42,
                    iab: true,
                    id: "Test string",
                    kind: "Test string",
                    width: 42,
                }            ],
            adParameters: "Test string",
            adTagKeys: [
                "Test string"            ],
            advertiserId: "Test string",
            allowScriptAccess: true,
            archived: true,
            artworkType: "Test string",
            authoringSource: "Test string",
            authoringTool: "Test string",
            autoAdvanceImages: true,
            backgroundColor: "Test string",
            backupImageClickThroughUrl: {
                computedClickThroughUrl: "Test string",
                customClickThroughUrl: "Test string",
                landingPageId: "Test string",
            },
            backupImageFeatures: [
                "Test string"            ],
            backupImageReportingLabel: "Test string",
            backupImageTargetWindow: {
                customHtml: "Test string",
                targetWindowOption: "Test string",
            },
            clickTags: [
                {
                    clickThroughUrl: {
                        computedClickThroughUrl: "Test string",
                        customClickThroughUrl: "Test string",
                        landingPageId: "Test string",
                    },
                    eventName: "Test string",
                    name: "Test string",
                }            ],
            commercialId: "Test string",
            companionCreatives: [
                "Test string"            ],
            compatibility: [
                "Test string"            ],
            convertFlashToHtml5: true,
            counterCustomEvents: [
                {
                    advertiserCustomEventId: "Test string",
                    advertiserCustomEventName: "Test string",
                    advertiserCustomEventType: "Test string",
                    artworkLabel: "Test string",
                    artworkType: "Test string",
                    exitClickThroughUrl: {
                        computedClickThroughUrl: "Test string",
                        customClickThroughUrl: "Test string",
                        landingPageId: "Test string",
                    },
                    id: "Test string",
                    popupWindowProperties: {
                        dimension: {
                            height: 42,
                            iab: true,
                            id: "Test string",
                            kind: "Test string",
                            width: 42,
                        },
                        offset: {
                            left: 42,
                            top: 42,
                        },
                        positionType: "Test string",
                        showAddressBar: true,
                        showMenuBar: true,
                        showScrollBar: true,
                        showStatusBar: true,
                        showToolBar: true,
                        title: "Test string",
                    },
                    targetType: "Test string",
                    videoReportingId: "Test string",
                }            ],
            creativeAssets: [
                {
                    actionScript3: true,
                    active: true,
                    additionalSizes: [
                        {
                            height: 42,
                            iab: true,
                            id: "Test string",
                            kind: "Test string",
                            width: 42,
                        }                    ],
                    alignment: "Test string",
                    artworkType: "Test string",
                    assetIdentifier: {
                        name: "Test string",
                        type: "Test string",
                    },
                    audioBitRate: 42,
                    audioSampleRate: 42,
                    backupImageExit: {
                        advertiserCustomEventId: "Test string",
                        advertiserCustomEventName: "Test string",
                        advertiserCustomEventType: "Test string",
                        artworkLabel: "Test string",
                        artworkType: "Test string",
                        exitClickThroughUrl: {
                            computedClickThroughUrl: "Test string",
                            customClickThroughUrl: "Test string",
                            landingPageId: "Test string",
                        },
                        id: "Test string",
                        popupWindowProperties: {
                            dimension: {
                                height: 42,
                                iab: true,
                                id: "Test string",
                                kind: "Test string",
                                width: 42,
                            },
                            offset: {
                                left: 42,
                                top: 42,
                            },
                            positionType: "Test string",
                            showAddressBar: true,
                            showMenuBar: true,
                            showScrollBar: true,
                            showStatusBar: true,
                            showToolBar: true,
                            title: "Test string",
                        },
                        targetType: "Test string",
                        videoReportingId: "Test string",
                    },
                    bitRate: 42,
                    childAssetType: "Test string",
                    collapsedSize: {
                        height: 42,
                        iab: true,
                        id: "Test string",
                        kind: "Test string",
                        width: 42,
                    },
                    companionCreativeIds: [
                        "Test string"                    ],
                    customStartTimeValue: 42,
                    detectedFeatures: [
                        "Test string"                    ],
                    displayType: "Test string",
                    duration: 42,
                    durationType: "Test string",
                    expandedDimension: {
                        height: 42,
                        iab: true,
                        id: "Test string",
                        kind: "Test string",
                        width: 42,
                    },
                    fileSize: "Test string",
                    flashVersion: 42,
                    frameRate: 42,
                    hideFlashObjects: true,
                    hideSelectionBoxes: true,
                    horizontallyLocked: true,
                    id: "Test string",
                    idDimensionValue: {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    },
                    mediaDuration: 42,
                    mimeType: "Test string",
                    offset: {
                        left: 42,
                        top: 42,
                    },
                    orientation: "Test string",
                    originalBackup: true,
                    politeLoad: true,
                    position: {
                        left: 42,
                        top: 42,
                    },
                    positionLeftUnit: "Test string",
                    positionTopUnit: "Test string",
                    progressiveServingUrl: "Test string",
                    pushdown: true,
                    pushdownDuration: 42,
                    role: "Test string",
                    size: {
                        height: 42,
                        iab: true,
                        id: "Test string",
                        kind: "Test string",
                        width: 42,
                    },
                    sslCompliant: true,
                    startTimeType: "Test string",
                    streamingServingUrl: "Test string",
                    transparency: true,
                    verticallyLocked: true,
                    windowMode: "Test string",
                    zIndex: 42,
                    zipFilename: "Test string",
                    zipFilesize: "Test string",
                }            ],
            creativeAssetSelection: {
                defaultAssetId: "Test string",
                rules: [
                    {
                        assetId: "Test string",
                        name: "Test string",
                        targetingTemplateId: "Test string",
                    }                ],
            },
            creativeFieldAssignments: [
                {
                    creativeFieldId: "Test string",
                    creativeFieldValueId: "Test string",
                }            ],
            customKeyValues: [
                "Test string"            ],
            dynamicAssetSelection: true,
            exitCustomEvents: [
                {
                    advertiserCustomEventId: "Test string",
                    advertiserCustomEventName: "Test string",
                    advertiserCustomEventType: "Test string",
                    artworkLabel: "Test string",
                    artworkType: "Test string",
                    exitClickThroughUrl: {
                        computedClickThroughUrl: "Test string",
                        customClickThroughUrl: "Test string",
                        landingPageId: "Test string",
                    },
                    id: "Test string",
                    popupWindowProperties: {
                        dimension: {
                            height: 42,
                            iab: true,
                            id: "Test string",
                            kind: "Test string",
                            width: 42,
                        },
                        offset: {
                            left: 42,
                            top: 42,
                        },
                        positionType: "Test string",
                        showAddressBar: true,
                        showMenuBar: true,
                        showScrollBar: true,
                        showStatusBar: true,
                        showToolBar: true,
                        title: "Test string",
                    },
                    targetType: "Test string",
                    videoReportingId: "Test string",
                }            ],
            fsCommand: {
                left: 42,
                positionOption: "Test string",
                top: 42,
                windowHeight: 42,
                windowWidth: 42,
            },
            htmlCode: "Test string",
            htmlCodeLocked: true,
            id: "Test string",
            idDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            kind: "Test string",
            lastModifiedInfo: {
                time: "Test string",
            },
            latestTraffickedCreativeId: "Test string",
            mediaDescription: "Test string",
            mediaDuration: 42,
            name: "Test string",
            obaIcon: {
                iconClickThroughUrl: "Test string",
                iconClickTrackingUrl: "Test string",
                iconViewTrackingUrl: "Test string",
                program: "Test string",
                resourceUrl: "Test string",
                size: {
                    height: 42,
                    iab: true,
                    id: "Test string",
                    kind: "Test string",
                    width: 42,
                },
                xPosition: "Test string",
                yPosition: "Test string",
            },
            overrideCss: "Test string",
            progressOffset: {
                offsetPercentage: 42,
                offsetSeconds: 42,
            },
            redirectUrl: "Test string",
            renderingId: "Test string",
            renderingIdDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            requiredFlashPluginVersion: "Test string",
            requiredFlashVersion: 42,
            size: {
                height: 42,
                iab: true,
                id: "Test string",
                kind: "Test string",
                width: 42,
            },
            skipOffset: {
                offsetPercentage: 42,
                offsetSeconds: 42,
            },
            skippable: true,
            sslCompliant: true,
            sslOverride: true,
            studioAdvertiserId: "Test string",
            studioCreativeId: "Test string",
            studioTraffickedCreativeId: "Test string",
            subaccountId: "Test string",
            thirdPartyBackupImageImpressionsUrl: "Test string",
            thirdPartyRichMediaImpressionsUrl: "Test string",
            thirdPartyUrls: [
                {
                    thirdPartyUrlType: "Test string",
                    url: "Test string",
                }            ],
            timerCustomEvents: [
                {
                    advertiserCustomEventId: "Test string",
                    advertiserCustomEventName: "Test string",
                    advertiserCustomEventType: "Test string",
                    artworkLabel: "Test string",
                    artworkType: "Test string",
                    exitClickThroughUrl: {
                        computedClickThroughUrl: "Test string",
                        customClickThroughUrl: "Test string",
                        landingPageId: "Test string",
                    },
                    id: "Test string",
                    popupWindowProperties: {
                        dimension: {
                            height: 42,
                            iab: true,
                            id: "Test string",
                            kind: "Test string",
                            width: 42,
                        },
                        offset: {
                            left: 42,
                            top: 42,
                        },
                        positionType: "Test string",
                        showAddressBar: true,
                        showMenuBar: true,
                        showScrollBar: true,
                        showStatusBar: true,
                        showToolBar: true,
                        title: "Test string",
                    },
                    targetType: "Test string",
                    videoReportingId: "Test string",
                }            ],
            totalFileSize: "Test string",
            type: "Test string",
            universalAdId: {
                registry: "Test string",
                value: "Test string",
            },
            version: 42,
        });
        /** Updates an existing creative. */
        await gapi.client.dfareporting.creatives.update({
            profileId: "Test string",
        }, {
            accountId: "Test string",
            active: true,
            additionalSizes: [
                {
                    height: 42,
                    iab: true,
                    id: "Test string",
                    kind: "Test string",
                    width: 42,
                }            ],
            adParameters: "Test string",
            adTagKeys: [
                "Test string"            ],
            advertiserId: "Test string",
            allowScriptAccess: true,
            archived: true,
            artworkType: "Test string",
            authoringSource: "Test string",
            authoringTool: "Test string",
            autoAdvanceImages: true,
            backgroundColor: "Test string",
            backupImageClickThroughUrl: {
                computedClickThroughUrl: "Test string",
                customClickThroughUrl: "Test string",
                landingPageId: "Test string",
            },
            backupImageFeatures: [
                "Test string"            ],
            backupImageReportingLabel: "Test string",
            backupImageTargetWindow: {
                customHtml: "Test string",
                targetWindowOption: "Test string",
            },
            clickTags: [
                {
                    clickThroughUrl: {
                        computedClickThroughUrl: "Test string",
                        customClickThroughUrl: "Test string",
                        landingPageId: "Test string",
                    },
                    eventName: "Test string",
                    name: "Test string",
                }            ],
            commercialId: "Test string",
            companionCreatives: [
                "Test string"            ],
            compatibility: [
                "Test string"            ],
            convertFlashToHtml5: true,
            counterCustomEvents: [
                {
                    advertiserCustomEventId: "Test string",
                    advertiserCustomEventName: "Test string",
                    advertiserCustomEventType: "Test string",
                    artworkLabel: "Test string",
                    artworkType: "Test string",
                    exitClickThroughUrl: {
                        computedClickThroughUrl: "Test string",
                        customClickThroughUrl: "Test string",
                        landingPageId: "Test string",
                    },
                    id: "Test string",
                    popupWindowProperties: {
                        dimension: {
                            height: 42,
                            iab: true,
                            id: "Test string",
                            kind: "Test string",
                            width: 42,
                        },
                        offset: {
                            left: 42,
                            top: 42,
                        },
                        positionType: "Test string",
                        showAddressBar: true,
                        showMenuBar: true,
                        showScrollBar: true,
                        showStatusBar: true,
                        showToolBar: true,
                        title: "Test string",
                    },
                    targetType: "Test string",
                    videoReportingId: "Test string",
                }            ],
            creativeAssets: [
                {
                    actionScript3: true,
                    active: true,
                    additionalSizes: [
                        {
                            height: 42,
                            iab: true,
                            id: "Test string",
                            kind: "Test string",
                            width: 42,
                        }                    ],
                    alignment: "Test string",
                    artworkType: "Test string",
                    assetIdentifier: {
                        name: "Test string",
                        type: "Test string",
                    },
                    audioBitRate: 42,
                    audioSampleRate: 42,
                    backupImageExit: {
                        advertiserCustomEventId: "Test string",
                        advertiserCustomEventName: "Test string",
                        advertiserCustomEventType: "Test string",
                        artworkLabel: "Test string",
                        artworkType: "Test string",
                        exitClickThroughUrl: {
                            computedClickThroughUrl: "Test string",
                            customClickThroughUrl: "Test string",
                            landingPageId: "Test string",
                        },
                        id: "Test string",
                        popupWindowProperties: {
                            dimension: {
                                height: 42,
                                iab: true,
                                id: "Test string",
                                kind: "Test string",
                                width: 42,
                            },
                            offset: {
                                left: 42,
                                top: 42,
                            },
                            positionType: "Test string",
                            showAddressBar: true,
                            showMenuBar: true,
                            showScrollBar: true,
                            showStatusBar: true,
                            showToolBar: true,
                            title: "Test string",
                        },
                        targetType: "Test string",
                        videoReportingId: "Test string",
                    },
                    bitRate: 42,
                    childAssetType: "Test string",
                    collapsedSize: {
                        height: 42,
                        iab: true,
                        id: "Test string",
                        kind: "Test string",
                        width: 42,
                    },
                    companionCreativeIds: [
                        "Test string"                    ],
                    customStartTimeValue: 42,
                    detectedFeatures: [
                        "Test string"                    ],
                    displayType: "Test string",
                    duration: 42,
                    durationType: "Test string",
                    expandedDimension: {
                        height: 42,
                        iab: true,
                        id: "Test string",
                        kind: "Test string",
                        width: 42,
                    },
                    fileSize: "Test string",
                    flashVersion: 42,
                    frameRate: 42,
                    hideFlashObjects: true,
                    hideSelectionBoxes: true,
                    horizontallyLocked: true,
                    id: "Test string",
                    idDimensionValue: {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    },
                    mediaDuration: 42,
                    mimeType: "Test string",
                    offset: {
                        left: 42,
                        top: 42,
                    },
                    orientation: "Test string",
                    originalBackup: true,
                    politeLoad: true,
                    position: {
                        left: 42,
                        top: 42,
                    },
                    positionLeftUnit: "Test string",
                    positionTopUnit: "Test string",
                    progressiveServingUrl: "Test string",
                    pushdown: true,
                    pushdownDuration: 42,
                    role: "Test string",
                    size: {
                        height: 42,
                        iab: true,
                        id: "Test string",
                        kind: "Test string",
                        width: 42,
                    },
                    sslCompliant: true,
                    startTimeType: "Test string",
                    streamingServingUrl: "Test string",
                    transparency: true,
                    verticallyLocked: true,
                    windowMode: "Test string",
                    zIndex: 42,
                    zipFilename: "Test string",
                    zipFilesize: "Test string",
                }            ],
            creativeAssetSelection: {
                defaultAssetId: "Test string",
                rules: [
                    {
                        assetId: "Test string",
                        name: "Test string",
                        targetingTemplateId: "Test string",
                    }                ],
            },
            creativeFieldAssignments: [
                {
                    creativeFieldId: "Test string",
                    creativeFieldValueId: "Test string",
                }            ],
            customKeyValues: [
                "Test string"            ],
            dynamicAssetSelection: true,
            exitCustomEvents: [
                {
                    advertiserCustomEventId: "Test string",
                    advertiserCustomEventName: "Test string",
                    advertiserCustomEventType: "Test string",
                    artworkLabel: "Test string",
                    artworkType: "Test string",
                    exitClickThroughUrl: {
                        computedClickThroughUrl: "Test string",
                        customClickThroughUrl: "Test string",
                        landingPageId: "Test string",
                    },
                    id: "Test string",
                    popupWindowProperties: {
                        dimension: {
                            height: 42,
                            iab: true,
                            id: "Test string",
                            kind: "Test string",
                            width: 42,
                        },
                        offset: {
                            left: 42,
                            top: 42,
                        },
                        positionType: "Test string",
                        showAddressBar: true,
                        showMenuBar: true,
                        showScrollBar: true,
                        showStatusBar: true,
                        showToolBar: true,
                        title: "Test string",
                    },
                    targetType: "Test string",
                    videoReportingId: "Test string",
                }            ],
            fsCommand: {
                left: 42,
                positionOption: "Test string",
                top: 42,
                windowHeight: 42,
                windowWidth: 42,
            },
            htmlCode: "Test string",
            htmlCodeLocked: true,
            id: "Test string",
            idDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            kind: "Test string",
            lastModifiedInfo: {
                time: "Test string",
            },
            latestTraffickedCreativeId: "Test string",
            mediaDescription: "Test string",
            mediaDuration: 42,
            name: "Test string",
            obaIcon: {
                iconClickThroughUrl: "Test string",
                iconClickTrackingUrl: "Test string",
                iconViewTrackingUrl: "Test string",
                program: "Test string",
                resourceUrl: "Test string",
                size: {
                    height: 42,
                    iab: true,
                    id: "Test string",
                    kind: "Test string",
                    width: 42,
                },
                xPosition: "Test string",
                yPosition: "Test string",
            },
            overrideCss: "Test string",
            progressOffset: {
                offsetPercentage: 42,
                offsetSeconds: 42,
            },
            redirectUrl: "Test string",
            renderingId: "Test string",
            renderingIdDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            requiredFlashPluginVersion: "Test string",
            requiredFlashVersion: 42,
            size: {
                height: 42,
                iab: true,
                id: "Test string",
                kind: "Test string",
                width: 42,
            },
            skipOffset: {
                offsetPercentage: 42,
                offsetSeconds: 42,
            },
            skippable: true,
            sslCompliant: true,
            sslOverride: true,
            studioAdvertiserId: "Test string",
            studioCreativeId: "Test string",
            studioTraffickedCreativeId: "Test string",
            subaccountId: "Test string",
            thirdPartyBackupImageImpressionsUrl: "Test string",
            thirdPartyRichMediaImpressionsUrl: "Test string",
            thirdPartyUrls: [
                {
                    thirdPartyUrlType: "Test string",
                    url: "Test string",
                }            ],
            timerCustomEvents: [
                {
                    advertiserCustomEventId: "Test string",
                    advertiserCustomEventName: "Test string",
                    advertiserCustomEventType: "Test string",
                    artworkLabel: "Test string",
                    artworkType: "Test string",
                    exitClickThroughUrl: {
                        computedClickThroughUrl: "Test string",
                        customClickThroughUrl: "Test string",
                        landingPageId: "Test string",
                    },
                    id: "Test string",
                    popupWindowProperties: {
                        dimension: {
                            height: 42,
                            iab: true,
                            id: "Test string",
                            kind: "Test string",
                            width: 42,
                        },
                        offset: {
                            left: 42,
                            top: 42,
                        },
                        positionType: "Test string",
                        showAddressBar: true,
                        showMenuBar: true,
                        showScrollBar: true,
                        showStatusBar: true,
                        showToolBar: true,
                        title: "Test string",
                    },
                    targetType: "Test string",
                    videoReportingId: "Test string",
                }            ],
            totalFileSize: "Test string",
            type: "Test string",
            universalAdId: {
                registry: "Test string",
                value: "Test string",
            },
            version: 42,
        });
        /** Inserts custom events. */
        await gapi.client.dfareporting.customEvents.batchinsert({
            profileId: "Test string",
        }, {
            customEvents: [
                {
                    annotateClickEvent: {
                        gclid: "Test string",
                        kind: "Test string",
                    },
                    annotateImpressionEvent: {
                        kind: "Test string",
                        pathImpressionId: "Test string",
                    },
                    customVariables: [
                        {
                            index: "Test string",
                            kind: "Test string",
                            value: "Test string",
                        }                    ],
                    eventType: "Test string",
                    floodlightConfigurationId: "Test string",
                    insertEvent: {
                        cmDimensions: {
                            adId: "Test string",
                            campaignId: "Test string",
                            creativeId: "Test string",
                            kind: "Test string",
                            placementId: "Test string",
                            siteId: "Test string",
                        },
                        dv3Dimensions: {
                            dvCampaignId: "Test string",
                            dvCreativeId: "Test string",
                            dvInsertionOrderId: "Test string",
                            dvLineItemId: "Test string",
                            dvSiteId: "Test string",
                            kind: "Test string",
                        },
                        insertEventType: "Test string",
                        kind: "Test string",
                        matchId: "Test string",
                        mobileDeviceId: "Test string",
                    },
                    kind: "Test string",
                    ordinal: "Test string",
                    timestampMicros: "Test string",
                }            ],
            kind: "Test string",
        });
        /** Retrieves list of report dimension values for a list of filters. */
        await gapi.client.dfareporting.dimensionValues.query({
            maxResults: 42,
            pageToken: "Test string",
            profileId: "Test string",
        }, {
            dimensionName: "Test string",
            endDate: "Test string",
            filters: [
                {
                    dimensionName: "Test string",
                    kind: "Test string",
                    value: "Test string",
                }            ],
            kind: "Test string",
            startDate: "Test string",
        });
        /** Gets one directory site by ID. */
        await gapi.client.dfareporting.directorySites.get({
            id: "Test string",
            profileId: "Test string",
        });
        /** Inserts a new directory site. */
        await gapi.client.dfareporting.directorySites.insert({
            profileId: "Test string",
        }, {
            id: "Test string",
            idDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            inpageTagFormats: [
                "Test string"            ],
            interstitialTagFormats: [
                "Test string"            ],
            kind: "Test string",
            name: "Test string",
            settings: {
                activeViewOptOut: true,
                dfpSettings: {
                    dfpNetworkCode: "Test string",
                    dfpNetworkName: "Test string",
                    programmaticPlacementAccepted: true,
                    publisherPortalOnly: true,
                    pubPaidPlacementAccepted: true,
                },
                instreamVideoPlacementAccepted: true,
                interstitialPlacementAccepted: true,
            },
            url: "Test string",
        });
        /** Retrieves a list of directory sites, possibly filtered. This method supports paging. */
        await gapi.client.dfareporting.directorySites.list({
            acceptsInStreamVideoPlacements: true,
            acceptsInterstitialPlacements: true,
            acceptsPublisherPaidPlacements: true,
            active: true,
            dfpNetworkCode: "Test string",
            ids: "Test string",
            maxResults: 42,
            pageToken: "Test string",
            profileId: "Test string",
            searchString: "Test string",
            sortField: "Test string",
            sortOrder: "Test string",
        });
        /** Deletes an existing dynamic targeting key. */
        await gapi.client.dfareporting.dynamicTargetingKeys.delete({
            name: "Test string",
            objectId: "Test string",
            objectType: "Test string",
            profileId: "Test string",
        });
        /**
         * Inserts a new dynamic targeting key. Keys must be created at the advertiser level before being assigned to the advertiser's ads, creatives, or
         * placements. There is a maximum of 1000 keys per advertiser, out of which a maximum of 20 keys can be assigned per ad, creative, or placement.
         */
        await gapi.client.dfareporting.dynamicTargetingKeys.insert({
            profileId: "Test string",
        }, {
            kind: "Test string",
            name: "Test string",
            objectId: "Test string",
            objectType: "Test string",
        });
        /** Retrieves a list of dynamic targeting keys. */
        await gapi.client.dfareporting.dynamicTargetingKeys.list({
            advertiserId: "Test string",
            names: "Test string",
            objectId: "Test string",
            objectType: "Test string",
            profileId: "Test string",
        });
        /** Deletes an existing event tag. */
        await gapi.client.dfareporting.eventTags.delete({
            id: "Test string",
            profileId: "Test string",
        });
        /** Gets one event tag by ID. */
        await gapi.client.dfareporting.eventTags.get({
            id: "Test string",
            profileId: "Test string",
        });
        /** Inserts a new event tag. */
        await gapi.client.dfareporting.eventTags.insert({
            profileId: "Test string",
        }, {
            accountId: "Test string",
            advertiserId: "Test string",
            advertiserIdDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            campaignId: "Test string",
            campaignIdDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            enabledByDefault: true,
            excludeFromAdxRequests: true,
            id: "Test string",
            kind: "Test string",
            name: "Test string",
            siteFilterType: "Test string",
            siteIds: [
                "Test string"            ],
            sslCompliant: true,
            status: "Test string",
            subaccountId: "Test string",
            type: "Test string",
            url: "Test string",
            urlEscapeLevels: 42,
        });
        /** Retrieves a list of event tags, possibly filtered. */
        await gapi.client.dfareporting.eventTags.list({
            adId: "Test string",
            advertiserId: "Test string",
            campaignId: "Test string",
            definitionsOnly: true,
            enabled: true,
            eventTagTypes: "Test string",
            ids: "Test string",
            profileId: "Test string",
            searchString: "Test string",
            sortField: "Test string",
            sortOrder: "Test string",
        });
        /** Updates an existing event tag. This method supports patch semantics. */
        await gapi.client.dfareporting.eventTags.patch({
            id: "Test string",
            profileId: "Test string",
        }, {
            accountId: "Test string",
            advertiserId: "Test string",
            advertiserIdDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            campaignId: "Test string",
            campaignIdDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            enabledByDefault: true,
            excludeFromAdxRequests: true,
            id: "Test string",
            kind: "Test string",
            name: "Test string",
            siteFilterType: "Test string",
            siteIds: [
                "Test string"            ],
            sslCompliant: true,
            status: "Test string",
            subaccountId: "Test string",
            type: "Test string",
            url: "Test string",
            urlEscapeLevels: 42,
        });
        /** Updates an existing event tag. */
        await gapi.client.dfareporting.eventTags.update({
            profileId: "Test string",
        }, {
            accountId: "Test string",
            advertiserId: "Test string",
            advertiserIdDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            campaignId: "Test string",
            campaignIdDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            enabledByDefault: true,
            excludeFromAdxRequests: true,
            id: "Test string",
            kind: "Test string",
            name: "Test string",
            siteFilterType: "Test string",
            siteIds: [
                "Test string"            ],
            sslCompliant: true,
            status: "Test string",
            subaccountId: "Test string",
            type: "Test string",
            url: "Test string",
            urlEscapeLevels: 42,
        });
        /** Retrieves a report file by its report ID and file ID. This method supports media download. */
        await gapi.client.dfareporting.files.get({
            fileId: "Test string",
            reportId: "Test string",
        });
        /** Lists files for a user profile. */
        await gapi.client.dfareporting.files.list({
            maxResults: 42,
            pageToken: "Test string",
            profileId: "Test string",
            scope: "Test string",
            sortField: "Test string",
            sortOrder: "Test string",
        });
        /** Deletes an existing floodlight activity. */
        await gapi.client.dfareporting.floodlightActivities.delete({
            id: "Test string",
            profileId: "Test string",
        });
        /** Generates a tag for a floodlight activity. */
        await gapi.client.dfareporting.floodlightActivities.generatetag({
            floodlightActivityId: "Test string",
            profileId: "Test string",
        });
        /** Gets one floodlight activity by ID. */
        await gapi.client.dfareporting.floodlightActivities.get({
            id: "Test string",
            profileId: "Test string",
        });
        /** Inserts a new floodlight activity. */
        await gapi.client.dfareporting.floodlightActivities.insert({
            profileId: "Test string",
        }, {
            accountId: "Test string",
            advertiserId: "Test string",
            advertiserIdDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            attributionEnabled: true,
            cacheBustingType: "Test string",
            countingMethod: "Test string",
            defaultTags: [
                {
                    id: "Test string",
                    name: "Test string",
                    tag: "Test string",
                }            ],
            expectedUrl: "Test string",
            floodlightActivityGroupId: "Test string",
            floodlightActivityGroupName: "Test string",
            floodlightActivityGroupTagString: "Test string",
            floodlightActivityGroupType: "Test string",
            floodlightConfigurationId: "Test string",
            floodlightConfigurationIdDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            floodlightTagType: "Test string",
            id: "Test string",
            idDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            kind: "Test string",
            name: "Test string",
            notes: "Test string",
            publisherTags: [
                {
                    clickThrough: true,
                    directorySiteId: "Test string",
                    dynamicTag: {
                        id: "Test string",
                        name: "Test string",
                        tag: "Test string",
                    },
                    siteId: "Test string",
                    siteIdDimensionValue: {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    },
                    viewThrough: true,
                }            ],
            secure: true,
            sslCompliant: true,
            sslRequired: true,
            status: "Test string",
            subaccountId: "Test string",
            tagFormat: "Test string",
            tagString: "Test string",
            userDefinedVariableTypes: [
                "Test string"            ],
        });
        /** Retrieves a list of floodlight activities, possibly filtered. This method supports paging. */
        await gapi.client.dfareporting.floodlightActivities.list({
            advertiserId: "Test string",
            floodlightActivityGroupIds: "Test string",
            floodlightActivityGroupName: "Test string",
            floodlightActivityGroupTagString: "Test string",
            floodlightActivityGroupType: "Test string",
            floodlightConfigurationId: "Test string",
            ids: "Test string",
            maxResults: 42,
            pageToken: "Test string",
            profileId: "Test string",
            searchString: "Test string",
            sortField: "Test string",
            sortOrder: "Test string",
            tagString: "Test string",
        });
        /** Updates an existing floodlight activity. This method supports patch semantics. */
        await gapi.client.dfareporting.floodlightActivities.patch({
            id: "Test string",
            profileId: "Test string",
        }, {
            accountId: "Test string",
            advertiserId: "Test string",
            advertiserIdDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            attributionEnabled: true,
            cacheBustingType: "Test string",
            countingMethod: "Test string",
            defaultTags: [
                {
                    id: "Test string",
                    name: "Test string",
                    tag: "Test string",
                }            ],
            expectedUrl: "Test string",
            floodlightActivityGroupId: "Test string",
            floodlightActivityGroupName: "Test string",
            floodlightActivityGroupTagString: "Test string",
            floodlightActivityGroupType: "Test string",
            floodlightConfigurationId: "Test string",
            floodlightConfigurationIdDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            floodlightTagType: "Test string",
            id: "Test string",
            idDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            kind: "Test string",
            name: "Test string",
            notes: "Test string",
            publisherTags: [
                {
                    clickThrough: true,
                    directorySiteId: "Test string",
                    dynamicTag: {
                        id: "Test string",
                        name: "Test string",
                        tag: "Test string",
                    },
                    siteId: "Test string",
                    siteIdDimensionValue: {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    },
                    viewThrough: true,
                }            ],
            secure: true,
            sslCompliant: true,
            sslRequired: true,
            status: "Test string",
            subaccountId: "Test string",
            tagFormat: "Test string",
            tagString: "Test string",
            userDefinedVariableTypes: [
                "Test string"            ],
        });
        /** Updates an existing floodlight activity. */
        await gapi.client.dfareporting.floodlightActivities.update({
            profileId: "Test string",
        }, {
            accountId: "Test string",
            advertiserId: "Test string",
            advertiserIdDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            attributionEnabled: true,
            cacheBustingType: "Test string",
            countingMethod: "Test string",
            defaultTags: [
                {
                    id: "Test string",
                    name: "Test string",
                    tag: "Test string",
                }            ],
            expectedUrl: "Test string",
            floodlightActivityGroupId: "Test string",
            floodlightActivityGroupName: "Test string",
            floodlightActivityGroupTagString: "Test string",
            floodlightActivityGroupType: "Test string",
            floodlightConfigurationId: "Test string",
            floodlightConfigurationIdDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            floodlightTagType: "Test string",
            id: "Test string",
            idDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            kind: "Test string",
            name: "Test string",
            notes: "Test string",
            publisherTags: [
                {
                    clickThrough: true,
                    directorySiteId: "Test string",
                    dynamicTag: {
                        id: "Test string",
                        name: "Test string",
                        tag: "Test string",
                    },
                    siteId: "Test string",
                    siteIdDimensionValue: {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    },
                    viewThrough: true,
                }            ],
            secure: true,
            sslCompliant: true,
            sslRequired: true,
            status: "Test string",
            subaccountId: "Test string",
            tagFormat: "Test string",
            tagString: "Test string",
            userDefinedVariableTypes: [
                "Test string"            ],
        });
        /** Gets one floodlight activity group by ID. */
        await gapi.client.dfareporting.floodlightActivityGroups.get({
            id: "Test string",
            profileId: "Test string",
        });
        /** Inserts a new floodlight activity group. */
        await gapi.client.dfareporting.floodlightActivityGroups.insert({
            profileId: "Test string",
        }, {
            accountId: "Test string",
            advertiserId: "Test string",
            advertiserIdDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            floodlightConfigurationId: "Test string",
            floodlightConfigurationIdDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            id: "Test string",
            idDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            kind: "Test string",
            name: "Test string",
            subaccountId: "Test string",
            tagString: "Test string",
            type: "Test string",
        });
        /** Retrieves a list of floodlight activity groups, possibly filtered. This method supports paging. */
        await gapi.client.dfareporting.floodlightActivityGroups.list({
            advertiserId: "Test string",
            floodlightConfigurationId: "Test string",
            ids: "Test string",
            maxResults: 42,
            pageToken: "Test string",
            profileId: "Test string",
            searchString: "Test string",
            sortField: "Test string",
            sortOrder: "Test string",
            type: "Test string",
        });
        /** Updates an existing floodlight activity group. This method supports patch semantics. */
        await gapi.client.dfareporting.floodlightActivityGroups.patch({
            id: "Test string",
            profileId: "Test string",
        }, {
            accountId: "Test string",
            advertiserId: "Test string",
            advertiserIdDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            floodlightConfigurationId: "Test string",
            floodlightConfigurationIdDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            id: "Test string",
            idDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            kind: "Test string",
            name: "Test string",
            subaccountId: "Test string",
            tagString: "Test string",
            type: "Test string",
        });
        /** Updates an existing floodlight activity group. */
        await gapi.client.dfareporting.floodlightActivityGroups.update({
            profileId: "Test string",
        }, {
            accountId: "Test string",
            advertiserId: "Test string",
            advertiserIdDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            floodlightConfigurationId: "Test string",
            floodlightConfigurationIdDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            id: "Test string",
            idDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            kind: "Test string",
            name: "Test string",
            subaccountId: "Test string",
            tagString: "Test string",
            type: "Test string",
        });
        /** Gets one floodlight configuration by ID. */
        await gapi.client.dfareporting.floodlightConfigurations.get({
            id: "Test string",
            profileId: "Test string",
        });
        /** Retrieves a list of floodlight configurations, possibly filtered. */
        await gapi.client.dfareporting.floodlightConfigurations.list({
            ids: "Test string",
            profileId: "Test string",
        });
        /** Updates an existing floodlight configuration. This method supports patch semantics. */
        await gapi.client.dfareporting.floodlightConfigurations.patch({
            id: "Test string",
            profileId: "Test string",
        }, {
            accountId: "Test string",
            advertiserId: "Test string",
            advertiserIdDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            analyticsDataSharingEnabled: true,
            customViewabilityMetric: {
                configuration: {
                    audible: true,
                    timeMillis: 42,
                    timePercent: 42,
                    viewabilityPercent: 42,
                },
                id: "Test string",
                name: "Test string",
            },
            exposureToConversionEnabled: true,
            firstDayOfWeek: "Test string",
            id: "Test string",
            idDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            inAppAttributionTrackingEnabled: true,
            kind: "Test string",
            lookbackConfiguration: {
                clickDuration: 42,
                postImpressionActivitiesDuration: 42,
            },
            naturalSearchConversionAttributionOption: "Test string",
            omnitureSettings: {
                omnitureCostDataEnabled: true,
                omnitureIntegrationEnabled: true,
            },
            subaccountId: "Test string",
            tagSettings: {
                dynamicTagEnabled: true,
                imageTagEnabled: true,
            },
            thirdPartyAuthenticationTokens: [
                {
                    name: "Test string",
                    value: "Test string",
                }            ],
            userDefinedVariableConfigurations: [
                {
                    dataType: "Test string",
                    reportName: "Test string",
                    variableType: "Test string",
                }            ],
        });
        /** Updates an existing floodlight configuration. */
        await gapi.client.dfareporting.floodlightConfigurations.update({
            profileId: "Test string",
        }, {
            accountId: "Test string",
            advertiserId: "Test string",
            advertiserIdDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            analyticsDataSharingEnabled: true,
            customViewabilityMetric: {
                configuration: {
                    audible: true,
                    timeMillis: 42,
                    timePercent: 42,
                    viewabilityPercent: 42,
                },
                id: "Test string",
                name: "Test string",
            },
            exposureToConversionEnabled: true,
            firstDayOfWeek: "Test string",
            id: "Test string",
            idDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            inAppAttributionTrackingEnabled: true,
            kind: "Test string",
            lookbackConfiguration: {
                clickDuration: 42,
                postImpressionActivitiesDuration: 42,
            },
            naturalSearchConversionAttributionOption: "Test string",
            omnitureSettings: {
                omnitureCostDataEnabled: true,
                omnitureIntegrationEnabled: true,
            },
            subaccountId: "Test string",
            tagSettings: {
                dynamicTagEnabled: true,
                imageTagEnabled: true,
            },
            thirdPartyAuthenticationTokens: [
                {
                    name: "Test string",
                    value: "Test string",
                }            ],
            userDefinedVariableConfigurations: [
                {
                    dataType: "Test string",
                    reportName: "Test string",
                    variableType: "Test string",
                }            ],
        });
        /** Gets one inventory item by ID. */
        await gapi.client.dfareporting.inventoryItems.get({
            id: "Test string",
            profileId: "Test string",
            projectId: "Test string",
        });
        /** Retrieves a list of inventory items, possibly filtered. This method supports paging. */
        await gapi.client.dfareporting.inventoryItems.list({
            ids: "Test string",
            inPlan: true,
            maxResults: 42,
            orderId: "Test string",
            pageToken: "Test string",
            profileId: "Test string",
            projectId: "Test string",
            siteId: "Test string",
            sortField: "Test string",
            sortOrder: "Test string",
            type: "Test string",
        });
        /** Retrieves a list of languages. */
        await gapi.client.dfareporting.languages.list({
            profileId: "Test string",
        });
        /** Retrieves a list of metros. */
        await gapi.client.dfareporting.metros.list({
            profileId: "Test string",
        });
        /** Gets one mobile app by ID. */
        await gapi.client.dfareporting.mobileApps.get({
            id: "Test string",
            profileId: "Test string",
        });
        /** Retrieves list of available mobile apps. */
        await gapi.client.dfareporting.mobileApps.list({
            directories: "Test string",
            ids: "Test string",
            maxResults: 42,
            pageToken: "Test string",
            profileId: "Test string",
            searchString: "Test string",
        });
        /** Gets one mobile carrier by ID. */
        await gapi.client.dfareporting.mobileCarriers.get({
            id: "Test string",
            profileId: "Test string",
        });
        /** Retrieves a list of mobile carriers. */
        await gapi.client.dfareporting.mobileCarriers.list({
            profileId: "Test string",
        });
        /** Gets one operating system by DART ID. */
        await gapi.client.dfareporting.operatingSystems.get({
            dartId: "Test string",
            profileId: "Test string",
        });
        /** Retrieves a list of operating systems. */
        await gapi.client.dfareporting.operatingSystems.list({
            profileId: "Test string",
        });
        /** Gets one operating system version by ID. */
        await gapi.client.dfareporting.operatingSystemVersions.get({
            id: "Test string",
            profileId: "Test string",
        });
        /** Retrieves a list of operating system versions. */
        await gapi.client.dfareporting.operatingSystemVersions.list({
            profileId: "Test string",
        });
        /** Gets one order document by ID. */
        await gapi.client.dfareporting.orderDocuments.get({
            id: "Test string",
            profileId: "Test string",
            projectId: "Test string",
        });
        /** Retrieves a list of order documents, possibly filtered. This method supports paging. */
        await gapi.client.dfareporting.orderDocuments.list({
            approved: true,
            ids: "Test string",
            maxResults: 42,
            orderId: "Test string",
            pageToken: "Test string",
            profileId: "Test string",
            projectId: "Test string",
            searchString: "Test string",
            siteId: "Test string",
            sortField: "Test string",
            sortOrder: "Test string",
        });
        /** Gets one order by ID. */
        await gapi.client.dfareporting.orders.get({
            id: "Test string",
            profileId: "Test string",
            projectId: "Test string",
        });
        /** Retrieves a list of orders, possibly filtered. This method supports paging. */
        await gapi.client.dfareporting.orders.list({
            ids: "Test string",
            maxResults: 42,
            pageToken: "Test string",
            profileId: "Test string",
            projectId: "Test string",
            searchString: "Test string",
            siteId: "Test string",
            sortField: "Test string",
            sortOrder: "Test string",
        });
        /** Gets one placement group by ID. */
        await gapi.client.dfareporting.placementGroups.get({
            id: "Test string",
            profileId: "Test string",
        });
        /** Inserts a new placement group. */
        await gapi.client.dfareporting.placementGroups.insert({
            profileId: "Test string",
        }, {
            accountId: "Test string",
            advertiserId: "Test string",
            advertiserIdDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            archived: true,
            campaignId: "Test string",
            campaignIdDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            childPlacementIds: [
                "Test string"            ],
            comment: "Test string",
            contentCategoryId: "Test string",
            createInfo: {
                time: "Test string",
            },
            directorySiteId: "Test string",
            directorySiteIdDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            externalId: "Test string",
            id: "Test string",
            idDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            kind: "Test string",
            lastModifiedInfo: {
                time: "Test string",
            },
            name: "Test string",
            placementGroupType: "Test string",
            placementStrategyId: "Test string",
            pricingSchedule: {
                capCostOption: "Test string",
                endDate: "Test string",
                flighted: true,
                floodlightActivityId: "Test string",
                pricingPeriods: [
                    {
                        endDate: "Test string",
                        pricingComment: "Test string",
                        rateOrCostNanos: "Test string",
                        startDate: "Test string",
                        units: "Test string",
                    }                ],
                pricingType: "Test string",
                startDate: "Test string",
                testingStartDate: "Test string",
            },
            primaryPlacementId: "Test string",
            primaryPlacementIdDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            siteId: "Test string",
            siteIdDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            subaccountId: "Test string",
        });
        /** Retrieves a list of placement groups, possibly filtered. This method supports paging. */
        await gapi.client.dfareporting.placementGroups.list({
            advertiserIds: "Test string",
            archived: true,
            campaignIds: "Test string",
            contentCategoryIds: "Test string",
            directorySiteIds: "Test string",
            ids: "Test string",
            maxEndDate: "Test string",
            maxResults: 42,
            maxStartDate: "Test string",
            minEndDate: "Test string",
            minStartDate: "Test string",
            pageToken: "Test string",
            placementGroupType: "Test string",
            placementStrategyIds: "Test string",
            pricingTypes: "Test string",
            profileId: "Test string",
            searchString: "Test string",
            siteIds: "Test string",
            sortField: "Test string",
            sortOrder: "Test string",
        });
        /** Updates an existing placement group. This method supports patch semantics. */
        await gapi.client.dfareporting.placementGroups.patch({
            id: "Test string",
            profileId: "Test string",
        }, {
            accountId: "Test string",
            advertiserId: "Test string",
            advertiserIdDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            archived: true,
            campaignId: "Test string",
            campaignIdDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            childPlacementIds: [
                "Test string"            ],
            comment: "Test string",
            contentCategoryId: "Test string",
            createInfo: {
                time: "Test string",
            },
            directorySiteId: "Test string",
            directorySiteIdDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            externalId: "Test string",
            id: "Test string",
            idDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            kind: "Test string",
            lastModifiedInfo: {
                time: "Test string",
            },
            name: "Test string",
            placementGroupType: "Test string",
            placementStrategyId: "Test string",
            pricingSchedule: {
                capCostOption: "Test string",
                endDate: "Test string",
                flighted: true,
                floodlightActivityId: "Test string",
                pricingPeriods: [
                    {
                        endDate: "Test string",
                        pricingComment: "Test string",
                        rateOrCostNanos: "Test string",
                        startDate: "Test string",
                        units: "Test string",
                    }                ],
                pricingType: "Test string",
                startDate: "Test string",
                testingStartDate: "Test string",
            },
            primaryPlacementId: "Test string",
            primaryPlacementIdDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            siteId: "Test string",
            siteIdDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            subaccountId: "Test string",
        });
        /** Updates an existing placement group. */
        await gapi.client.dfareporting.placementGroups.update({
            profileId: "Test string",
        }, {
            accountId: "Test string",
            advertiserId: "Test string",
            advertiserIdDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            archived: true,
            campaignId: "Test string",
            campaignIdDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            childPlacementIds: [
                "Test string"            ],
            comment: "Test string",
            contentCategoryId: "Test string",
            createInfo: {
                time: "Test string",
            },
            directorySiteId: "Test string",
            directorySiteIdDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            externalId: "Test string",
            id: "Test string",
            idDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            kind: "Test string",
            lastModifiedInfo: {
                time: "Test string",
            },
            name: "Test string",
            placementGroupType: "Test string",
            placementStrategyId: "Test string",
            pricingSchedule: {
                capCostOption: "Test string",
                endDate: "Test string",
                flighted: true,
                floodlightActivityId: "Test string",
                pricingPeriods: [
                    {
                        endDate: "Test string",
                        pricingComment: "Test string",
                        rateOrCostNanos: "Test string",
                        startDate: "Test string",
                        units: "Test string",
                    }                ],
                pricingType: "Test string",
                startDate: "Test string",
                testingStartDate: "Test string",
            },
            primaryPlacementId: "Test string",
            primaryPlacementIdDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            siteId: "Test string",
            siteIdDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            subaccountId: "Test string",
        });
        /** Generates tags for a placement. */
        await gapi.client.dfareporting.placements.generatetags({
            campaignId: "Test string",
            placementIds: "Test string",
            profileId: "Test string",
            tagFormats: "Test string",
        });
        /** Gets one placement by ID. */
        await gapi.client.dfareporting.placements.get({
            id: "Test string",
            profileId: "Test string",
        });
        /** Inserts a new placement. */
        await gapi.client.dfareporting.placements.insert({
            profileId: "Test string",
        }, {
            accountId: "Test string",
            adBlockingOptOut: true,
            additionalSizes: [
                {
                    height: 42,
                    iab: true,
                    id: "Test string",
                    kind: "Test string",
                    width: 42,
                }            ],
            advertiserId: "Test string",
            advertiserIdDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            archived: true,
            campaignId: "Test string",
            campaignIdDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            comment: "Test string",
            compatibility: "Test string",
            contentCategoryId: "Test string",
            createInfo: {
                time: "Test string",
            },
            directorySiteId: "Test string",
            directorySiteIdDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            externalId: "Test string",
            id: "Test string",
            idDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            keyName: "Test string",
            kind: "Test string",
            lastModifiedInfo: {
                time: "Test string",
            },
            lookbackConfiguration: {
                clickDuration: 42,
                postImpressionActivitiesDuration: 42,
            },
            name: "Test string",
            paymentApproved: true,
            paymentSource: "Test string",
            placementGroupId: "Test string",
            placementGroupIdDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            placementStrategyId: "Test string",
            pricingSchedule: {
                capCostOption: "Test string",
                endDate: "Test string",
                flighted: true,
                floodlightActivityId: "Test string",
                pricingPeriods: [
                    {
                        endDate: "Test string",
                        pricingComment: "Test string",
                        rateOrCostNanos: "Test string",
                        startDate: "Test string",
                        units: "Test string",
                    }                ],
                pricingType: "Test string",
                startDate: "Test string",
                testingStartDate: "Test string",
            },
            primary: true,
            publisherUpdateInfo: {
                time: "Test string",
            },
            siteId: "Test string",
            siteIdDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            size: {
                height: 42,
                iab: true,
                id: "Test string",
                kind: "Test string",
                width: 42,
            },
            sslRequired: true,
            status: "Test string",
            subaccountId: "Test string",
            tagFormats: [
                "Test string"            ],
            tagSetting: {
                additionalKeyValues: "Test string",
                includeClickThroughUrls: true,
                includeClickTracking: true,
                keywordOption: "Test string",
            },
            videoActiveViewOptOut: true,
            videoSettings: {
                companionSettings: {
                    companionsDisabled: true,
                    enabledSizes: [
                        {
                            height: 42,
                            iab: true,
                            id: "Test string",
                            kind: "Test string",
                            width: 42,
                        }                    ],
                    imageOnly: true,
                    kind: "Test string",
                },
                kind: "Test string",
                obaEnabled: true,
                obaSettings: {
                    iconClickThroughUrl: "Test string",
                    iconClickTrackingUrl: "Test string",
                    iconViewTrackingUrl: "Test string",
                    program: "Test string",
                    resourceUrl: "Test string",
                    size: {
                        height: 42,
                        iab: true,
                        id: "Test string",
                        kind: "Test string",
                        width: 42,
                    },
                    xPosition: "Test string",
                    yPosition: "Test string",
                },
                orientation: "Test string",
                skippableSettings: {
                    kind: "Test string",
                    progressOffset: {
                        offsetPercentage: 42,
                        offsetSeconds: 42,
                    },
                    skipOffset: {
                        offsetPercentage: 42,
                        offsetSeconds: 42,
                    },
                    skippable: true,
                },
                transcodeSettings: {
                    enabledVideoFormats: [
                        42                    ],
                    kind: "Test string",
                },
            },
            vpaidAdapterChoice: "Test string",
        });
        /** Retrieves a list of placements, possibly filtered. This method supports paging. */
        await gapi.client.dfareporting.placements.list({
            advertiserIds: "Test string",
            archived: true,
            campaignIds: "Test string",
            compatibilities: "Test string",
            contentCategoryIds: "Test string",
            directorySiteIds: "Test string",
            groupIds: "Test string",
            ids: "Test string",
            maxEndDate: "Test string",
            maxResults: 42,
            maxStartDate: "Test string",
            minEndDate: "Test string",
            minStartDate: "Test string",
            pageToken: "Test string",
            paymentSource: "Test string",
            placementStrategyIds: "Test string",
            pricingTypes: "Test string",
            profileId: "Test string",
            searchString: "Test string",
            siteIds: "Test string",
            sizeIds: "Test string",
            sortField: "Test string",
            sortOrder: "Test string",
        });
        /** Updates an existing placement. This method supports patch semantics. */
        await gapi.client.dfareporting.placements.patch({
            id: "Test string",
            profileId: "Test string",
        }, {
            accountId: "Test string",
            adBlockingOptOut: true,
            additionalSizes: [
                {
                    height: 42,
                    iab: true,
                    id: "Test string",
                    kind: "Test string",
                    width: 42,
                }            ],
            advertiserId: "Test string",
            advertiserIdDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            archived: true,
            campaignId: "Test string",
            campaignIdDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            comment: "Test string",
            compatibility: "Test string",
            contentCategoryId: "Test string",
            createInfo: {
                time: "Test string",
            },
            directorySiteId: "Test string",
            directorySiteIdDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            externalId: "Test string",
            id: "Test string",
            idDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            keyName: "Test string",
            kind: "Test string",
            lastModifiedInfo: {
                time: "Test string",
            },
            lookbackConfiguration: {
                clickDuration: 42,
                postImpressionActivitiesDuration: 42,
            },
            name: "Test string",
            paymentApproved: true,
            paymentSource: "Test string",
            placementGroupId: "Test string",
            placementGroupIdDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            placementStrategyId: "Test string",
            pricingSchedule: {
                capCostOption: "Test string",
                endDate: "Test string",
                flighted: true,
                floodlightActivityId: "Test string",
                pricingPeriods: [
                    {
                        endDate: "Test string",
                        pricingComment: "Test string",
                        rateOrCostNanos: "Test string",
                        startDate: "Test string",
                        units: "Test string",
                    }                ],
                pricingType: "Test string",
                startDate: "Test string",
                testingStartDate: "Test string",
            },
            primary: true,
            publisherUpdateInfo: {
                time: "Test string",
            },
            siteId: "Test string",
            siteIdDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            size: {
                height: 42,
                iab: true,
                id: "Test string",
                kind: "Test string",
                width: 42,
            },
            sslRequired: true,
            status: "Test string",
            subaccountId: "Test string",
            tagFormats: [
                "Test string"            ],
            tagSetting: {
                additionalKeyValues: "Test string",
                includeClickThroughUrls: true,
                includeClickTracking: true,
                keywordOption: "Test string",
            },
            videoActiveViewOptOut: true,
            videoSettings: {
                companionSettings: {
                    companionsDisabled: true,
                    enabledSizes: [
                        {
                            height: 42,
                            iab: true,
                            id: "Test string",
                            kind: "Test string",
                            width: 42,
                        }                    ],
                    imageOnly: true,
                    kind: "Test string",
                },
                kind: "Test string",
                obaEnabled: true,
                obaSettings: {
                    iconClickThroughUrl: "Test string",
                    iconClickTrackingUrl: "Test string",
                    iconViewTrackingUrl: "Test string",
                    program: "Test string",
                    resourceUrl: "Test string",
                    size: {
                        height: 42,
                        iab: true,
                        id: "Test string",
                        kind: "Test string",
                        width: 42,
                    },
                    xPosition: "Test string",
                    yPosition: "Test string",
                },
                orientation: "Test string",
                skippableSettings: {
                    kind: "Test string",
                    progressOffset: {
                        offsetPercentage: 42,
                        offsetSeconds: 42,
                    },
                    skipOffset: {
                        offsetPercentage: 42,
                        offsetSeconds: 42,
                    },
                    skippable: true,
                },
                transcodeSettings: {
                    enabledVideoFormats: [
                        42                    ],
                    kind: "Test string",
                },
            },
            vpaidAdapterChoice: "Test string",
        });
        /** Updates an existing placement. */
        await gapi.client.dfareporting.placements.update({
            profileId: "Test string",
        }, {
            accountId: "Test string",
            adBlockingOptOut: true,
            additionalSizes: [
                {
                    height: 42,
                    iab: true,
                    id: "Test string",
                    kind: "Test string",
                    width: 42,
                }            ],
            advertiserId: "Test string",
            advertiserIdDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            archived: true,
            campaignId: "Test string",
            campaignIdDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            comment: "Test string",
            compatibility: "Test string",
            contentCategoryId: "Test string",
            createInfo: {
                time: "Test string",
            },
            directorySiteId: "Test string",
            directorySiteIdDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            externalId: "Test string",
            id: "Test string",
            idDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            keyName: "Test string",
            kind: "Test string",
            lastModifiedInfo: {
                time: "Test string",
            },
            lookbackConfiguration: {
                clickDuration: 42,
                postImpressionActivitiesDuration: 42,
            },
            name: "Test string",
            paymentApproved: true,
            paymentSource: "Test string",
            placementGroupId: "Test string",
            placementGroupIdDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            placementStrategyId: "Test string",
            pricingSchedule: {
                capCostOption: "Test string",
                endDate: "Test string",
                flighted: true,
                floodlightActivityId: "Test string",
                pricingPeriods: [
                    {
                        endDate: "Test string",
                        pricingComment: "Test string",
                        rateOrCostNanos: "Test string",
                        startDate: "Test string",
                        units: "Test string",
                    }                ],
                pricingType: "Test string",
                startDate: "Test string",
                testingStartDate: "Test string",
            },
            primary: true,
            publisherUpdateInfo: {
                time: "Test string",
            },
            siteId: "Test string",
            siteIdDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            size: {
                height: 42,
                iab: true,
                id: "Test string",
                kind: "Test string",
                width: 42,
            },
            sslRequired: true,
            status: "Test string",
            subaccountId: "Test string",
            tagFormats: [
                "Test string"            ],
            tagSetting: {
                additionalKeyValues: "Test string",
                includeClickThroughUrls: true,
                includeClickTracking: true,
                keywordOption: "Test string",
            },
            videoActiveViewOptOut: true,
            videoSettings: {
                companionSettings: {
                    companionsDisabled: true,
                    enabledSizes: [
                        {
                            height: 42,
                            iab: true,
                            id: "Test string",
                            kind: "Test string",
                            width: 42,
                        }                    ],
                    imageOnly: true,
                    kind: "Test string",
                },
                kind: "Test string",
                obaEnabled: true,
                obaSettings: {
                    iconClickThroughUrl: "Test string",
                    iconClickTrackingUrl: "Test string",
                    iconViewTrackingUrl: "Test string",
                    program: "Test string",
                    resourceUrl: "Test string",
                    size: {
                        height: 42,
                        iab: true,
                        id: "Test string",
                        kind: "Test string",
                        width: 42,
                    },
                    xPosition: "Test string",
                    yPosition: "Test string",
                },
                orientation: "Test string",
                skippableSettings: {
                    kind: "Test string",
                    progressOffset: {
                        offsetPercentage: 42,
                        offsetSeconds: 42,
                    },
                    skipOffset: {
                        offsetPercentage: 42,
                        offsetSeconds: 42,
                    },
                    skippable: true,
                },
                transcodeSettings: {
                    enabledVideoFormats: [
                        42                    ],
                    kind: "Test string",
                },
            },
            vpaidAdapterChoice: "Test string",
        });
        /** Deletes an existing placement strategy. */
        await gapi.client.dfareporting.placementStrategies.delete({
            id: "Test string",
            profileId: "Test string",
        });
        /** Gets one placement strategy by ID. */
        await gapi.client.dfareporting.placementStrategies.get({
            id: "Test string",
            profileId: "Test string",
        });
        /** Inserts a new placement strategy. */
        await gapi.client.dfareporting.placementStrategies.insert({
            profileId: "Test string",
        }, {
            accountId: "Test string",
            id: "Test string",
            kind: "Test string",
            name: "Test string",
        });
        /** Retrieves a list of placement strategies, possibly filtered. This method supports paging. */
        await gapi.client.dfareporting.placementStrategies.list({
            ids: "Test string",
            maxResults: 42,
            pageToken: "Test string",
            profileId: "Test string",
            searchString: "Test string",
            sortField: "Test string",
            sortOrder: "Test string",
        });
        /** Updates an existing placement strategy. This method supports patch semantics. */
        await gapi.client.dfareporting.placementStrategies.patch({
            id: "Test string",
            profileId: "Test string",
        }, {
            accountId: "Test string",
            id: "Test string",
            kind: "Test string",
            name: "Test string",
        });
        /** Updates an existing placement strategy. */
        await gapi.client.dfareporting.placementStrategies.update({
            profileId: "Test string",
        }, {
            accountId: "Test string",
            id: "Test string",
            kind: "Test string",
            name: "Test string",
        });
        /** Gets one platform type by ID. */
        await gapi.client.dfareporting.platformTypes.get({
            id: "Test string",
            profileId: "Test string",
        });
        /** Retrieves a list of platform types. */
        await gapi.client.dfareporting.platformTypes.list({
            profileId: "Test string",
        });
        /** Gets one postal code by ID. */
        await gapi.client.dfareporting.postalCodes.get({
            code: "Test string",
            profileId: "Test string",
        });
        /** Retrieves a list of postal codes. */
        await gapi.client.dfareporting.postalCodes.list({
            profileId: "Test string",
        });
        /** Gets one project by ID. */
        await gapi.client.dfareporting.projects.get({
            id: "Test string",
            profileId: "Test string",
        });
        /** Retrieves a list of projects, possibly filtered. This method supports paging. */
        await gapi.client.dfareporting.projects.list({
            advertiserIds: "Test string",
            ids: "Test string",
            maxResults: 42,
            pageToken: "Test string",
            profileId: "Test string",
            searchString: "Test string",
            sortField: "Test string",
            sortOrder: "Test string",
        });
        /** Retrieves a list of regions. */
        await gapi.client.dfareporting.regions.list({
            profileId: "Test string",
        });
        /** Gets one remarketing list by ID. */
        await gapi.client.dfareporting.remarketingLists.get({
            id: "Test string",
            profileId: "Test string",
        });
        /** Inserts a new remarketing list. */
        await gapi.client.dfareporting.remarketingLists.insert({
            profileId: "Test string",
        }, {
            accountId: "Test string",
            active: true,
            advertiserId: "Test string",
            advertiserIdDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            description: "Test string",
            id: "Test string",
            kind: "Test string",
            lifeSpan: "Test string",
            listPopulationRule: {
                floodlightActivityId: "Test string",
                floodlightActivityName: "Test string",
                listPopulationClauses: [
                    {
                        terms: [
                            {
                                contains: true,
                                negation: true,
                                operator: "Test string",
                                remarketingListId: "Test string",
                                type: "Test string",
                                value: "Test string",
                                variableFriendlyName: "Test string",
                                variableName: "Test string",
                            }                        ],
                    }                ],
            },
            listSize: "Test string",
            listSource: "Test string",
            name: "Test string",
            subaccountId: "Test string",
        });
        /** Retrieves a list of remarketing lists, possibly filtered. This method supports paging. */
        await gapi.client.dfareporting.remarketingLists.list({
            active: true,
            advertiserId: "Test string",
            floodlightActivityId: "Test string",
            maxResults: 42,
            name: "Test string",
            pageToken: "Test string",
            profileId: "Test string",
            sortField: "Test string",
            sortOrder: "Test string",
        });
        /** Updates an existing remarketing list. This method supports patch semantics. */
        await gapi.client.dfareporting.remarketingLists.patch({
            id: "Test string",
            profileId: "Test string",
        }, {
            accountId: "Test string",
            active: true,
            advertiserId: "Test string",
            advertiserIdDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            description: "Test string",
            id: "Test string",
            kind: "Test string",
            lifeSpan: "Test string",
            listPopulationRule: {
                floodlightActivityId: "Test string",
                floodlightActivityName: "Test string",
                listPopulationClauses: [
                    {
                        terms: [
                            {
                                contains: true,
                                negation: true,
                                operator: "Test string",
                                remarketingListId: "Test string",
                                type: "Test string",
                                value: "Test string",
                                variableFriendlyName: "Test string",
                                variableName: "Test string",
                            }                        ],
                    }                ],
            },
            listSize: "Test string",
            listSource: "Test string",
            name: "Test string",
            subaccountId: "Test string",
        });
        /** Updates an existing remarketing list. */
        await gapi.client.dfareporting.remarketingLists.update({
            profileId: "Test string",
        }, {
            accountId: "Test string",
            active: true,
            advertiserId: "Test string",
            advertiserIdDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            description: "Test string",
            id: "Test string",
            kind: "Test string",
            lifeSpan: "Test string",
            listPopulationRule: {
                floodlightActivityId: "Test string",
                floodlightActivityName: "Test string",
                listPopulationClauses: [
                    {
                        terms: [
                            {
                                contains: true,
                                negation: true,
                                operator: "Test string",
                                remarketingListId: "Test string",
                                type: "Test string",
                                value: "Test string",
                                variableFriendlyName: "Test string",
                                variableName: "Test string",
                            }                        ],
                    }                ],
            },
            listSize: "Test string",
            listSource: "Test string",
            name: "Test string",
            subaccountId: "Test string",
        });
        /** Gets one remarketing list share by remarketing list ID. */
        await gapi.client.dfareporting.remarketingListShares.get({
            profileId: "Test string",
            remarketingListId: "Test string",
        });
        /** Updates an existing remarketing list share. This method supports patch semantics. */
        await gapi.client.dfareporting.remarketingListShares.patch({
            profileId: "Test string",
            remarketingListId: "Test string",
        }, {
            kind: "Test string",
            remarketingListId: "Test string",
            sharedAccountIds: [
                "Test string"            ],
            sharedAdvertiserIds: [
                "Test string"            ],
        });
        /** Updates an existing remarketing list share. */
        await gapi.client.dfareporting.remarketingListShares.update({
            profileId: "Test string",
        }, {
            kind: "Test string",
            remarketingListId: "Test string",
            sharedAccountIds: [
                "Test string"            ],
            sharedAdvertiserIds: [
                "Test string"            ],
        });
        /** Deletes a report by its ID. */
        await gapi.client.dfareporting.reports.delete({
            profileId: "Test string",
            reportId: "Test string",
        });
        /**
         * Returns the fields that are compatible to be selected in the respective sections of a report criteria, given the fields already selected in the input
         * report and user permissions.
         */
        await gapi.client.dfareporting.reports.compatibleFields.query({
            profileId: "Test string",
        }, {
            accountId: "Test string",
            criteria: {
                activities: {
                    filters: [
                        {
                            dimensionName: "Test string",
                            etag: "Test string",
                            id: "Test string",
                            kind: "Test string",
                            matchType: "Test string",
                            value: "Test string",
                        }                    ],
                    kind: "Test string",
                    metricNames: [
                        "Test string"                    ],
                },
                customRichMediaEvents: {
                    filteredEventIds: [
                        {
                            dimensionName: "Test string",
                            etag: "Test string",
                            id: "Test string",
                            kind: "Test string",
                            matchType: "Test string",
                            value: "Test string",
                        }                    ],
                    kind: "Test string",
                },
                dateRange: {
                    endDate: "Test string",
                    kind: "Test string",
                    relativeDateRange: "Test string",
                    startDate: "Test string",
                },
                dimensionFilters: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                dimensions: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                metricNames: [
                    "Test string"                ],
            },
            crossDimensionReachCriteria: {
                breakdown: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                dateRange: {
                    endDate: "Test string",
                    kind: "Test string",
                    relativeDateRange: "Test string",
                    startDate: "Test string",
                },
                dimension: "Test string",
                dimensionFilters: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                metricNames: [
                    "Test string"                ],
                overlapMetricNames: [
                    "Test string"                ],
                pivoted: true,
            },
            delivery: {
                emailOwner: true,
                emailOwnerDeliveryType: "Test string",
                message: "Test string",
                recipients: [
                    {
                        deliveryType: "Test string",
                        email: "Test string",
                        kind: "Test string",
                    }                ],
            },
            etag: "Test string",
            fileName: "Test string",
            floodlightCriteria: {
                customRichMediaEvents: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                dateRange: {
                    endDate: "Test string",
                    kind: "Test string",
                    relativeDateRange: "Test string",
                    startDate: "Test string",
                },
                dimensionFilters: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                dimensions: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                floodlightConfigId: {
                    dimensionName: "Test string",
                    etag: "Test string",
                    id: "Test string",
                    kind: "Test string",
                    matchType: "Test string",
                    value: "Test string",
                },
                metricNames: [
                    "Test string"                ],
                reportProperties: {
                    includeAttributedIPConversions: true,
                    includeUnattributedCookieConversions: true,
                    includeUnattributedIPConversions: true,
                },
            },
            format: "Test string",
            id: "Test string",
            kind: "Test string",
            lastModifiedTime: "Test string",
            name: "Test string",
            ownerProfileId: "Test string",
            pathAttributionCriteria: {
                activityFilters: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                customChannelGrouping: {
                    fallbackName: "Test string",
                    kind: "Test string",
                    name: "Test string",
                    rules: [
                        {
                            disjunctiveMatchStatements: [
                                {
                                    eventFilters: [
                                        {
                                            dimensionFilter: {
                                                dimensionName: "Test string",
                                                ids: [
                                                    "Test string"                                                ],
                                                kind: "Test string",
                                                matchType: "Test string",
                                                values: [
                                                    "Test string"                                                ],
                                            },
                                            kind: "Test string",
                                        }                                    ],
                                    kind: "Test string",
                                }                            ],
                            kind: "Test string",
                            name: "Test string",
                        }                    ],
                },
                dateRange: {
                    endDate: "Test string",
                    kind: "Test string",
                    relativeDateRange: "Test string",
                    startDate: "Test string",
                },
                dimensions: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                floodlightConfigId: {
                    dimensionName: "Test string",
                    etag: "Test string",
                    id: "Test string",
                    kind: "Test string",
                    matchType: "Test string",
                    value: "Test string",
                },
                metricNames: [
                    "Test string"                ],
                pathFilters: [
                    {
                        eventFilters: [
                            {
                                dimensionFilter: {
                                    dimensionName: "Test string",
                                    ids: [
                                        "Test string"                                    ],
                                    kind: "Test string",
                                    matchType: "Test string",
                                    values: [
                                        "Test string"                                    ],
                                },
                                kind: "Test string",
                            }                        ],
                        kind: "Test string",
                        pathMatchPosition: "Test string",
                    }                ],
            },
            pathCriteria: {
                activityFilters: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                customChannelGrouping: {
                    fallbackName: "Test string",
                    kind: "Test string",
                    name: "Test string",
                    rules: [
                        {
                            disjunctiveMatchStatements: [
                                {
                                    eventFilters: [
                                        {
                                            dimensionFilter: {
                                                dimensionName: "Test string",
                                                ids: [
                                                    "Test string"                                                ],
                                                kind: "Test string",
                                                matchType: "Test string",
                                                values: [
                                                    "Test string"                                                ],
                                            },
                                            kind: "Test string",
                                        }                                    ],
                                    kind: "Test string",
                                }                            ],
                            kind: "Test string",
                            name: "Test string",
                        }                    ],
                },
                dateRange: {
                    endDate: "Test string",
                    kind: "Test string",
                    relativeDateRange: "Test string",
                    startDate: "Test string",
                },
                dimensions: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                floodlightConfigId: {
                    dimensionName: "Test string",
                    etag: "Test string",
                    id: "Test string",
                    kind: "Test string",
                    matchType: "Test string",
                    value: "Test string",
                },
                metricNames: [
                    "Test string"                ],
                pathFilters: [
                    {
                        eventFilters: [
                            {
                                dimensionFilter: {
                                    dimensionName: "Test string",
                                    ids: [
                                        "Test string"                                    ],
                                    kind: "Test string",
                                    matchType: "Test string",
                                    values: [
                                        "Test string"                                    ],
                                },
                                kind: "Test string",
                            }                        ],
                        kind: "Test string",
                        pathMatchPosition: "Test string",
                    }                ],
            },
            pathToConversionCriteria: {
                activityFilters: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                conversionDimensions: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                customFloodlightVariables: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                customRichMediaEvents: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                dateRange: {
                    endDate: "Test string",
                    kind: "Test string",
                    relativeDateRange: "Test string",
                    startDate: "Test string",
                },
                floodlightConfigId: {
                    dimensionName: "Test string",
                    etag: "Test string",
                    id: "Test string",
                    kind: "Test string",
                    matchType: "Test string",
                    value: "Test string",
                },
                metricNames: [
                    "Test string"                ],
                perInteractionDimensions: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                reportProperties: {
                    clicksLookbackWindow: 42,
                    impressionsLookbackWindow: 42,
                    includeAttributedIPConversions: true,
                    includeUnattributedCookieConversions: true,
                    includeUnattributedIPConversions: true,
                    maximumClickInteractions: 42,
                    maximumImpressionInteractions: 42,
                    maximumInteractionGap: 42,
                    pivotOnInteractionPath: true,
                },
            },
            reachCriteria: {
                activities: {
                    filters: [
                        {
                            dimensionName: "Test string",
                            etag: "Test string",
                            id: "Test string",
                            kind: "Test string",
                            matchType: "Test string",
                            value: "Test string",
                        }                    ],
                    kind: "Test string",
                    metricNames: [
                        "Test string"                    ],
                },
                customRichMediaEvents: {
                    filteredEventIds: [
                        {
                            dimensionName: "Test string",
                            etag: "Test string",
                            id: "Test string",
                            kind: "Test string",
                            matchType: "Test string",
                            value: "Test string",
                        }                    ],
                    kind: "Test string",
                },
                dateRange: {
                    endDate: "Test string",
                    kind: "Test string",
                    relativeDateRange: "Test string",
                    startDate: "Test string",
                },
                dimensionFilters: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                dimensions: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                enableAllDimensionCombinations: true,
                metricNames: [
                    "Test string"                ],
                reachByFrequencyMetricNames: [
                    "Test string"                ],
            },
            schedule: {
                active: true,
                every: 42,
                expirationDate: "Test string",
                repeats: "Test string",
                repeatsOnWeekDays: [
                    "Test string"                ],
                runsOnDayOfMonth: "Test string",
                startDate: "Test string",
            },
            subAccountId: "Test string",
            type: "Test string",
        });
        /** Retrieves a report file by its report ID and file ID. This method supports media download. */
        await gapi.client.dfareporting.reports.files.get({
            fileId: "Test string",
            profileId: "Test string",
            reportId: "Test string",
        });
        /** Lists files for a report. */
        await gapi.client.dfareporting.reports.files.list({
            maxResults: 42,
            pageToken: "Test string",
            profileId: "Test string",
            reportId: "Test string",
            sortField: "Test string",
            sortOrder: "Test string",
        });
        /** Retrieves a report by its ID. */
        await gapi.client.dfareporting.reports.get({
            profileId: "Test string",
            reportId: "Test string",
        });
        /**
         * Returns the fields that are compatible to be selected in the respective sections of a report criteria, given the fields already selected in the input
         * report and user permissions.
         */
        await gapi.client.dfareporting.reports.compatibleFields.query({
            profileId: "Test string",
        }, {
            accountId: "Test string",
            criteria: {
                activities: {
                    filters: [
                        {
                            dimensionName: "Test string",
                            etag: "Test string",
                            id: "Test string",
                            kind: "Test string",
                            matchType: "Test string",
                            value: "Test string",
                        }                    ],
                    kind: "Test string",
                    metricNames: [
                        "Test string"                    ],
                },
                customRichMediaEvents: {
                    filteredEventIds: [
                        {
                            dimensionName: "Test string",
                            etag: "Test string",
                            id: "Test string",
                            kind: "Test string",
                            matchType: "Test string",
                            value: "Test string",
                        }                    ],
                    kind: "Test string",
                },
                dateRange: {
                    endDate: "Test string",
                    kind: "Test string",
                    relativeDateRange: "Test string",
                    startDate: "Test string",
                },
                dimensionFilters: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                dimensions: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                metricNames: [
                    "Test string"                ],
            },
            crossDimensionReachCriteria: {
                breakdown: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                dateRange: {
                    endDate: "Test string",
                    kind: "Test string",
                    relativeDateRange: "Test string",
                    startDate: "Test string",
                },
                dimension: "Test string",
                dimensionFilters: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                metricNames: [
                    "Test string"                ],
                overlapMetricNames: [
                    "Test string"                ],
                pivoted: true,
            },
            delivery: {
                emailOwner: true,
                emailOwnerDeliveryType: "Test string",
                message: "Test string",
                recipients: [
                    {
                        deliveryType: "Test string",
                        email: "Test string",
                        kind: "Test string",
                    }                ],
            },
            etag: "Test string",
            fileName: "Test string",
            floodlightCriteria: {
                customRichMediaEvents: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                dateRange: {
                    endDate: "Test string",
                    kind: "Test string",
                    relativeDateRange: "Test string",
                    startDate: "Test string",
                },
                dimensionFilters: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                dimensions: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                floodlightConfigId: {
                    dimensionName: "Test string",
                    etag: "Test string",
                    id: "Test string",
                    kind: "Test string",
                    matchType: "Test string",
                    value: "Test string",
                },
                metricNames: [
                    "Test string"                ],
                reportProperties: {
                    includeAttributedIPConversions: true,
                    includeUnattributedCookieConversions: true,
                    includeUnattributedIPConversions: true,
                },
            },
            format: "Test string",
            id: "Test string",
            kind: "Test string",
            lastModifiedTime: "Test string",
            name: "Test string",
            ownerProfileId: "Test string",
            pathAttributionCriteria: {
                activityFilters: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                customChannelGrouping: {
                    fallbackName: "Test string",
                    kind: "Test string",
                    name: "Test string",
                    rules: [
                        {
                            disjunctiveMatchStatements: [
                                {
                                    eventFilters: [
                                        {
                                            dimensionFilter: {
                                                dimensionName: "Test string",
                                                ids: [
                                                    "Test string"                                                ],
                                                kind: "Test string",
                                                matchType: "Test string",
                                                values: [
                                                    "Test string"                                                ],
                                            },
                                            kind: "Test string",
                                        }                                    ],
                                    kind: "Test string",
                                }                            ],
                            kind: "Test string",
                            name: "Test string",
                        }                    ],
                },
                dateRange: {
                    endDate: "Test string",
                    kind: "Test string",
                    relativeDateRange: "Test string",
                    startDate: "Test string",
                },
                dimensions: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                floodlightConfigId: {
                    dimensionName: "Test string",
                    etag: "Test string",
                    id: "Test string",
                    kind: "Test string",
                    matchType: "Test string",
                    value: "Test string",
                },
                metricNames: [
                    "Test string"                ],
                pathFilters: [
                    {
                        eventFilters: [
                            {
                                dimensionFilter: {
                                    dimensionName: "Test string",
                                    ids: [
                                        "Test string"                                    ],
                                    kind: "Test string",
                                    matchType: "Test string",
                                    values: [
                                        "Test string"                                    ],
                                },
                                kind: "Test string",
                            }                        ],
                        kind: "Test string",
                        pathMatchPosition: "Test string",
                    }                ],
            },
            pathCriteria: {
                activityFilters: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                customChannelGrouping: {
                    fallbackName: "Test string",
                    kind: "Test string",
                    name: "Test string",
                    rules: [
                        {
                            disjunctiveMatchStatements: [
                                {
                                    eventFilters: [
                                        {
                                            dimensionFilter: {
                                                dimensionName: "Test string",
                                                ids: [
                                                    "Test string"                                                ],
                                                kind: "Test string",
                                                matchType: "Test string",
                                                values: [
                                                    "Test string"                                                ],
                                            },
                                            kind: "Test string",
                                        }                                    ],
                                    kind: "Test string",
                                }                            ],
                            kind: "Test string",
                            name: "Test string",
                        }                    ],
                },
                dateRange: {
                    endDate: "Test string",
                    kind: "Test string",
                    relativeDateRange: "Test string",
                    startDate: "Test string",
                },
                dimensions: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                floodlightConfigId: {
                    dimensionName: "Test string",
                    etag: "Test string",
                    id: "Test string",
                    kind: "Test string",
                    matchType: "Test string",
                    value: "Test string",
                },
                metricNames: [
                    "Test string"                ],
                pathFilters: [
                    {
                        eventFilters: [
                            {
                                dimensionFilter: {
                                    dimensionName: "Test string",
                                    ids: [
                                        "Test string"                                    ],
                                    kind: "Test string",
                                    matchType: "Test string",
                                    values: [
                                        "Test string"                                    ],
                                },
                                kind: "Test string",
                            }                        ],
                        kind: "Test string",
                        pathMatchPosition: "Test string",
                    }                ],
            },
            pathToConversionCriteria: {
                activityFilters: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                conversionDimensions: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                customFloodlightVariables: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                customRichMediaEvents: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                dateRange: {
                    endDate: "Test string",
                    kind: "Test string",
                    relativeDateRange: "Test string",
                    startDate: "Test string",
                },
                floodlightConfigId: {
                    dimensionName: "Test string",
                    etag: "Test string",
                    id: "Test string",
                    kind: "Test string",
                    matchType: "Test string",
                    value: "Test string",
                },
                metricNames: [
                    "Test string"                ],
                perInteractionDimensions: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                reportProperties: {
                    clicksLookbackWindow: 42,
                    impressionsLookbackWindow: 42,
                    includeAttributedIPConversions: true,
                    includeUnattributedCookieConversions: true,
                    includeUnattributedIPConversions: true,
                    maximumClickInteractions: 42,
                    maximumImpressionInteractions: 42,
                    maximumInteractionGap: 42,
                    pivotOnInteractionPath: true,
                },
            },
            reachCriteria: {
                activities: {
                    filters: [
                        {
                            dimensionName: "Test string",
                            etag: "Test string",
                            id: "Test string",
                            kind: "Test string",
                            matchType: "Test string",
                            value: "Test string",
                        }                    ],
                    kind: "Test string",
                    metricNames: [
                        "Test string"                    ],
                },
                customRichMediaEvents: {
                    filteredEventIds: [
                        {
                            dimensionName: "Test string",
                            etag: "Test string",
                            id: "Test string",
                            kind: "Test string",
                            matchType: "Test string",
                            value: "Test string",
                        }                    ],
                    kind: "Test string",
                },
                dateRange: {
                    endDate: "Test string",
                    kind: "Test string",
                    relativeDateRange: "Test string",
                    startDate: "Test string",
                },
                dimensionFilters: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                dimensions: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                enableAllDimensionCombinations: true,
                metricNames: [
                    "Test string"                ],
                reachByFrequencyMetricNames: [
                    "Test string"                ],
            },
            schedule: {
                active: true,
                every: 42,
                expirationDate: "Test string",
                repeats: "Test string",
                repeatsOnWeekDays: [
                    "Test string"                ],
                runsOnDayOfMonth: "Test string",
                startDate: "Test string",
            },
            subAccountId: "Test string",
            type: "Test string",
        });
        /** Retrieves a report file by its report ID and file ID. This method supports media download. */
        await gapi.client.dfareporting.reports.files.get({
            fileId: "Test string",
            profileId: "Test string",
            reportId: "Test string",
        });
        /** Lists files for a report. */
        await gapi.client.dfareporting.reports.files.list({
            maxResults: 42,
            pageToken: "Test string",
            profileId: "Test string",
            reportId: "Test string",
            sortField: "Test string",
            sortOrder: "Test string",
        });
        /** Creates a report. */
        await gapi.client.dfareporting.reports.insert({
            profileId: "Test string",
        }, {
            accountId: "Test string",
            criteria: {
                activities: {
                    filters: [
                        {
                            dimensionName: "Test string",
                            etag: "Test string",
                            id: "Test string",
                            kind: "Test string",
                            matchType: "Test string",
                            value: "Test string",
                        }                    ],
                    kind: "Test string",
                    metricNames: [
                        "Test string"                    ],
                },
                customRichMediaEvents: {
                    filteredEventIds: [
                        {
                            dimensionName: "Test string",
                            etag: "Test string",
                            id: "Test string",
                            kind: "Test string",
                            matchType: "Test string",
                            value: "Test string",
                        }                    ],
                    kind: "Test string",
                },
                dateRange: {
                    endDate: "Test string",
                    kind: "Test string",
                    relativeDateRange: "Test string",
                    startDate: "Test string",
                },
                dimensionFilters: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                dimensions: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                metricNames: [
                    "Test string"                ],
            },
            crossDimensionReachCriteria: {
                breakdown: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                dateRange: {
                    endDate: "Test string",
                    kind: "Test string",
                    relativeDateRange: "Test string",
                    startDate: "Test string",
                },
                dimension: "Test string",
                dimensionFilters: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                metricNames: [
                    "Test string"                ],
                overlapMetricNames: [
                    "Test string"                ],
                pivoted: true,
            },
            delivery: {
                emailOwner: true,
                emailOwnerDeliveryType: "Test string",
                message: "Test string",
                recipients: [
                    {
                        deliveryType: "Test string",
                        email: "Test string",
                        kind: "Test string",
                    }                ],
            },
            etag: "Test string",
            fileName: "Test string",
            floodlightCriteria: {
                customRichMediaEvents: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                dateRange: {
                    endDate: "Test string",
                    kind: "Test string",
                    relativeDateRange: "Test string",
                    startDate: "Test string",
                },
                dimensionFilters: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                dimensions: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                floodlightConfigId: {
                    dimensionName: "Test string",
                    etag: "Test string",
                    id: "Test string",
                    kind: "Test string",
                    matchType: "Test string",
                    value: "Test string",
                },
                metricNames: [
                    "Test string"                ],
                reportProperties: {
                    includeAttributedIPConversions: true,
                    includeUnattributedCookieConversions: true,
                    includeUnattributedIPConversions: true,
                },
            },
            format: "Test string",
            id: "Test string",
            kind: "Test string",
            lastModifiedTime: "Test string",
            name: "Test string",
            ownerProfileId: "Test string",
            pathAttributionCriteria: {
                activityFilters: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                customChannelGrouping: {
                    fallbackName: "Test string",
                    kind: "Test string",
                    name: "Test string",
                    rules: [
                        {
                            disjunctiveMatchStatements: [
                                {
                                    eventFilters: [
                                        {
                                            dimensionFilter: {
                                                dimensionName: "Test string",
                                                ids: [
                                                    "Test string"                                                ],
                                                kind: "Test string",
                                                matchType: "Test string",
                                                values: [
                                                    "Test string"                                                ],
                                            },
                                            kind: "Test string",
                                        }                                    ],
                                    kind: "Test string",
                                }                            ],
                            kind: "Test string",
                            name: "Test string",
                        }                    ],
                },
                dateRange: {
                    endDate: "Test string",
                    kind: "Test string",
                    relativeDateRange: "Test string",
                    startDate: "Test string",
                },
                dimensions: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                floodlightConfigId: {
                    dimensionName: "Test string",
                    etag: "Test string",
                    id: "Test string",
                    kind: "Test string",
                    matchType: "Test string",
                    value: "Test string",
                },
                metricNames: [
                    "Test string"                ],
                pathFilters: [
                    {
                        eventFilters: [
                            {
                                dimensionFilter: {
                                    dimensionName: "Test string",
                                    ids: [
                                        "Test string"                                    ],
                                    kind: "Test string",
                                    matchType: "Test string",
                                    values: [
                                        "Test string"                                    ],
                                },
                                kind: "Test string",
                            }                        ],
                        kind: "Test string",
                        pathMatchPosition: "Test string",
                    }                ],
            },
            pathCriteria: {
                activityFilters: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                customChannelGrouping: {
                    fallbackName: "Test string",
                    kind: "Test string",
                    name: "Test string",
                    rules: [
                        {
                            disjunctiveMatchStatements: [
                                {
                                    eventFilters: [
                                        {
                                            dimensionFilter: {
                                                dimensionName: "Test string",
                                                ids: [
                                                    "Test string"                                                ],
                                                kind: "Test string",
                                                matchType: "Test string",
                                                values: [
                                                    "Test string"                                                ],
                                            },
                                            kind: "Test string",
                                        }                                    ],
                                    kind: "Test string",
                                }                            ],
                            kind: "Test string",
                            name: "Test string",
                        }                    ],
                },
                dateRange: {
                    endDate: "Test string",
                    kind: "Test string",
                    relativeDateRange: "Test string",
                    startDate: "Test string",
                },
                dimensions: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                floodlightConfigId: {
                    dimensionName: "Test string",
                    etag: "Test string",
                    id: "Test string",
                    kind: "Test string",
                    matchType: "Test string",
                    value: "Test string",
                },
                metricNames: [
                    "Test string"                ],
                pathFilters: [
                    {
                        eventFilters: [
                            {
                                dimensionFilter: {
                                    dimensionName: "Test string",
                                    ids: [
                                        "Test string"                                    ],
                                    kind: "Test string",
                                    matchType: "Test string",
                                    values: [
                                        "Test string"                                    ],
                                },
                                kind: "Test string",
                            }                        ],
                        kind: "Test string",
                        pathMatchPosition: "Test string",
                    }                ],
            },
            pathToConversionCriteria: {
                activityFilters: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                conversionDimensions: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                customFloodlightVariables: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                customRichMediaEvents: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                dateRange: {
                    endDate: "Test string",
                    kind: "Test string",
                    relativeDateRange: "Test string",
                    startDate: "Test string",
                },
                floodlightConfigId: {
                    dimensionName: "Test string",
                    etag: "Test string",
                    id: "Test string",
                    kind: "Test string",
                    matchType: "Test string",
                    value: "Test string",
                },
                metricNames: [
                    "Test string"                ],
                perInteractionDimensions: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                reportProperties: {
                    clicksLookbackWindow: 42,
                    impressionsLookbackWindow: 42,
                    includeAttributedIPConversions: true,
                    includeUnattributedCookieConversions: true,
                    includeUnattributedIPConversions: true,
                    maximumClickInteractions: 42,
                    maximumImpressionInteractions: 42,
                    maximumInteractionGap: 42,
                    pivotOnInteractionPath: true,
                },
            },
            reachCriteria: {
                activities: {
                    filters: [
                        {
                            dimensionName: "Test string",
                            etag: "Test string",
                            id: "Test string",
                            kind: "Test string",
                            matchType: "Test string",
                            value: "Test string",
                        }                    ],
                    kind: "Test string",
                    metricNames: [
                        "Test string"                    ],
                },
                customRichMediaEvents: {
                    filteredEventIds: [
                        {
                            dimensionName: "Test string",
                            etag: "Test string",
                            id: "Test string",
                            kind: "Test string",
                            matchType: "Test string",
                            value: "Test string",
                        }                    ],
                    kind: "Test string",
                },
                dateRange: {
                    endDate: "Test string",
                    kind: "Test string",
                    relativeDateRange: "Test string",
                    startDate: "Test string",
                },
                dimensionFilters: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                dimensions: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                enableAllDimensionCombinations: true,
                metricNames: [
                    "Test string"                ],
                reachByFrequencyMetricNames: [
                    "Test string"                ],
            },
            schedule: {
                active: true,
                every: 42,
                expirationDate: "Test string",
                repeats: "Test string",
                repeatsOnWeekDays: [
                    "Test string"                ],
                runsOnDayOfMonth: "Test string",
                startDate: "Test string",
            },
            subAccountId: "Test string",
            type: "Test string",
        });
        /**
         * Returns the fields that are compatible to be selected in the respective sections of a report criteria, given the fields already selected in the input
         * report and user permissions.
         */
        await gapi.client.dfareporting.reports.compatibleFields.query({
            profileId: "Test string",
        }, {
            accountId: "Test string",
            criteria: {
                activities: {
                    filters: [
                        {
                            dimensionName: "Test string",
                            etag: "Test string",
                            id: "Test string",
                            kind: "Test string",
                            matchType: "Test string",
                            value: "Test string",
                        }                    ],
                    kind: "Test string",
                    metricNames: [
                        "Test string"                    ],
                },
                customRichMediaEvents: {
                    filteredEventIds: [
                        {
                            dimensionName: "Test string",
                            etag: "Test string",
                            id: "Test string",
                            kind: "Test string",
                            matchType: "Test string",
                            value: "Test string",
                        }                    ],
                    kind: "Test string",
                },
                dateRange: {
                    endDate: "Test string",
                    kind: "Test string",
                    relativeDateRange: "Test string",
                    startDate: "Test string",
                },
                dimensionFilters: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                dimensions: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                metricNames: [
                    "Test string"                ],
            },
            crossDimensionReachCriteria: {
                breakdown: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                dateRange: {
                    endDate: "Test string",
                    kind: "Test string",
                    relativeDateRange: "Test string",
                    startDate: "Test string",
                },
                dimension: "Test string",
                dimensionFilters: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                metricNames: [
                    "Test string"                ],
                overlapMetricNames: [
                    "Test string"                ],
                pivoted: true,
            },
            delivery: {
                emailOwner: true,
                emailOwnerDeliveryType: "Test string",
                message: "Test string",
                recipients: [
                    {
                        deliveryType: "Test string",
                        email: "Test string",
                        kind: "Test string",
                    }                ],
            },
            etag: "Test string",
            fileName: "Test string",
            floodlightCriteria: {
                customRichMediaEvents: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                dateRange: {
                    endDate: "Test string",
                    kind: "Test string",
                    relativeDateRange: "Test string",
                    startDate: "Test string",
                },
                dimensionFilters: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                dimensions: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                floodlightConfigId: {
                    dimensionName: "Test string",
                    etag: "Test string",
                    id: "Test string",
                    kind: "Test string",
                    matchType: "Test string",
                    value: "Test string",
                },
                metricNames: [
                    "Test string"                ],
                reportProperties: {
                    includeAttributedIPConversions: true,
                    includeUnattributedCookieConversions: true,
                    includeUnattributedIPConversions: true,
                },
            },
            format: "Test string",
            id: "Test string",
            kind: "Test string",
            lastModifiedTime: "Test string",
            name: "Test string",
            ownerProfileId: "Test string",
            pathAttributionCriteria: {
                activityFilters: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                customChannelGrouping: {
                    fallbackName: "Test string",
                    kind: "Test string",
                    name: "Test string",
                    rules: [
                        {
                            disjunctiveMatchStatements: [
                                {
                                    eventFilters: [
                                        {
                                            dimensionFilter: {
                                                dimensionName: "Test string",
                                                ids: [
                                                    "Test string"                                                ],
                                                kind: "Test string",
                                                matchType: "Test string",
                                                values: [
                                                    "Test string"                                                ],
                                            },
                                            kind: "Test string",
                                        }                                    ],
                                    kind: "Test string",
                                }                            ],
                            kind: "Test string",
                            name: "Test string",
                        }                    ],
                },
                dateRange: {
                    endDate: "Test string",
                    kind: "Test string",
                    relativeDateRange: "Test string",
                    startDate: "Test string",
                },
                dimensions: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                floodlightConfigId: {
                    dimensionName: "Test string",
                    etag: "Test string",
                    id: "Test string",
                    kind: "Test string",
                    matchType: "Test string",
                    value: "Test string",
                },
                metricNames: [
                    "Test string"                ],
                pathFilters: [
                    {
                        eventFilters: [
                            {
                                dimensionFilter: {
                                    dimensionName: "Test string",
                                    ids: [
                                        "Test string"                                    ],
                                    kind: "Test string",
                                    matchType: "Test string",
                                    values: [
                                        "Test string"                                    ],
                                },
                                kind: "Test string",
                            }                        ],
                        kind: "Test string",
                        pathMatchPosition: "Test string",
                    }                ],
            },
            pathCriteria: {
                activityFilters: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                customChannelGrouping: {
                    fallbackName: "Test string",
                    kind: "Test string",
                    name: "Test string",
                    rules: [
                        {
                            disjunctiveMatchStatements: [
                                {
                                    eventFilters: [
                                        {
                                            dimensionFilter: {
                                                dimensionName: "Test string",
                                                ids: [
                                                    "Test string"                                                ],
                                                kind: "Test string",
                                                matchType: "Test string",
                                                values: [
                                                    "Test string"                                                ],
                                            },
                                            kind: "Test string",
                                        }                                    ],
                                    kind: "Test string",
                                }                            ],
                            kind: "Test string",
                            name: "Test string",
                        }                    ],
                },
                dateRange: {
                    endDate: "Test string",
                    kind: "Test string",
                    relativeDateRange: "Test string",
                    startDate: "Test string",
                },
                dimensions: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                floodlightConfigId: {
                    dimensionName: "Test string",
                    etag: "Test string",
                    id: "Test string",
                    kind: "Test string",
                    matchType: "Test string",
                    value: "Test string",
                },
                metricNames: [
                    "Test string"                ],
                pathFilters: [
                    {
                        eventFilters: [
                            {
                                dimensionFilter: {
                                    dimensionName: "Test string",
                                    ids: [
                                        "Test string"                                    ],
                                    kind: "Test string",
                                    matchType: "Test string",
                                    values: [
                                        "Test string"                                    ],
                                },
                                kind: "Test string",
                            }                        ],
                        kind: "Test string",
                        pathMatchPosition: "Test string",
                    }                ],
            },
            pathToConversionCriteria: {
                activityFilters: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                conversionDimensions: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                customFloodlightVariables: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                customRichMediaEvents: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                dateRange: {
                    endDate: "Test string",
                    kind: "Test string",
                    relativeDateRange: "Test string",
                    startDate: "Test string",
                },
                floodlightConfigId: {
                    dimensionName: "Test string",
                    etag: "Test string",
                    id: "Test string",
                    kind: "Test string",
                    matchType: "Test string",
                    value: "Test string",
                },
                metricNames: [
                    "Test string"                ],
                perInteractionDimensions: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                reportProperties: {
                    clicksLookbackWindow: 42,
                    impressionsLookbackWindow: 42,
                    includeAttributedIPConversions: true,
                    includeUnattributedCookieConversions: true,
                    includeUnattributedIPConversions: true,
                    maximumClickInteractions: 42,
                    maximumImpressionInteractions: 42,
                    maximumInteractionGap: 42,
                    pivotOnInteractionPath: true,
                },
            },
            reachCriteria: {
                activities: {
                    filters: [
                        {
                            dimensionName: "Test string",
                            etag: "Test string",
                            id: "Test string",
                            kind: "Test string",
                            matchType: "Test string",
                            value: "Test string",
                        }                    ],
                    kind: "Test string",
                    metricNames: [
                        "Test string"                    ],
                },
                customRichMediaEvents: {
                    filteredEventIds: [
                        {
                            dimensionName: "Test string",
                            etag: "Test string",
                            id: "Test string",
                            kind: "Test string",
                            matchType: "Test string",
                            value: "Test string",
                        }                    ],
                    kind: "Test string",
                },
                dateRange: {
                    endDate: "Test string",
                    kind: "Test string",
                    relativeDateRange: "Test string",
                    startDate: "Test string",
                },
                dimensionFilters: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                dimensions: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                enableAllDimensionCombinations: true,
                metricNames: [
                    "Test string"                ],
                reachByFrequencyMetricNames: [
                    "Test string"                ],
            },
            schedule: {
                active: true,
                every: 42,
                expirationDate: "Test string",
                repeats: "Test string",
                repeatsOnWeekDays: [
                    "Test string"                ],
                runsOnDayOfMonth: "Test string",
                startDate: "Test string",
            },
            subAccountId: "Test string",
            type: "Test string",
        });
        /** Retrieves a report file by its report ID and file ID. This method supports media download. */
        await gapi.client.dfareporting.reports.files.get({
            fileId: "Test string",
            profileId: "Test string",
            reportId: "Test string",
        });
        /** Lists files for a report. */
        await gapi.client.dfareporting.reports.files.list({
            maxResults: 42,
            pageToken: "Test string",
            profileId: "Test string",
            reportId: "Test string",
            sortField: "Test string",
            sortOrder: "Test string",
        });
        /** Retrieves list of reports. */
        await gapi.client.dfareporting.reports.list({
            maxResults: 42,
            pageToken: "Test string",
            profileId: "Test string",
            scope: "Test string",
            sortField: "Test string",
            sortOrder: "Test string",
        });
        /**
         * Returns the fields that are compatible to be selected in the respective sections of a report criteria, given the fields already selected in the input
         * report and user permissions.
         */
        await gapi.client.dfareporting.reports.compatibleFields.query({
            profileId: "Test string",
        }, {
            accountId: "Test string",
            criteria: {
                activities: {
                    filters: [
                        {
                            dimensionName: "Test string",
                            etag: "Test string",
                            id: "Test string",
                            kind: "Test string",
                            matchType: "Test string",
                            value: "Test string",
                        }                    ],
                    kind: "Test string",
                    metricNames: [
                        "Test string"                    ],
                },
                customRichMediaEvents: {
                    filteredEventIds: [
                        {
                            dimensionName: "Test string",
                            etag: "Test string",
                            id: "Test string",
                            kind: "Test string",
                            matchType: "Test string",
                            value: "Test string",
                        }                    ],
                    kind: "Test string",
                },
                dateRange: {
                    endDate: "Test string",
                    kind: "Test string",
                    relativeDateRange: "Test string",
                    startDate: "Test string",
                },
                dimensionFilters: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                dimensions: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                metricNames: [
                    "Test string"                ],
            },
            crossDimensionReachCriteria: {
                breakdown: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                dateRange: {
                    endDate: "Test string",
                    kind: "Test string",
                    relativeDateRange: "Test string",
                    startDate: "Test string",
                },
                dimension: "Test string",
                dimensionFilters: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                metricNames: [
                    "Test string"                ],
                overlapMetricNames: [
                    "Test string"                ],
                pivoted: true,
            },
            delivery: {
                emailOwner: true,
                emailOwnerDeliveryType: "Test string",
                message: "Test string",
                recipients: [
                    {
                        deliveryType: "Test string",
                        email: "Test string",
                        kind: "Test string",
                    }                ],
            },
            etag: "Test string",
            fileName: "Test string",
            floodlightCriteria: {
                customRichMediaEvents: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                dateRange: {
                    endDate: "Test string",
                    kind: "Test string",
                    relativeDateRange: "Test string",
                    startDate: "Test string",
                },
                dimensionFilters: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                dimensions: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                floodlightConfigId: {
                    dimensionName: "Test string",
                    etag: "Test string",
                    id: "Test string",
                    kind: "Test string",
                    matchType: "Test string",
                    value: "Test string",
                },
                metricNames: [
                    "Test string"                ],
                reportProperties: {
                    includeAttributedIPConversions: true,
                    includeUnattributedCookieConversions: true,
                    includeUnattributedIPConversions: true,
                },
            },
            format: "Test string",
            id: "Test string",
            kind: "Test string",
            lastModifiedTime: "Test string",
            name: "Test string",
            ownerProfileId: "Test string",
            pathAttributionCriteria: {
                activityFilters: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                customChannelGrouping: {
                    fallbackName: "Test string",
                    kind: "Test string",
                    name: "Test string",
                    rules: [
                        {
                            disjunctiveMatchStatements: [
                                {
                                    eventFilters: [
                                        {
                                            dimensionFilter: {
                                                dimensionName: "Test string",
                                                ids: [
                                                    "Test string"                                                ],
                                                kind: "Test string",
                                                matchType: "Test string",
                                                values: [
                                                    "Test string"                                                ],
                                            },
                                            kind: "Test string",
                                        }                                    ],
                                    kind: "Test string",
                                }                            ],
                            kind: "Test string",
                            name: "Test string",
                        }                    ],
                },
                dateRange: {
                    endDate: "Test string",
                    kind: "Test string",
                    relativeDateRange: "Test string",
                    startDate: "Test string",
                },
                dimensions: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                floodlightConfigId: {
                    dimensionName: "Test string",
                    etag: "Test string",
                    id: "Test string",
                    kind: "Test string",
                    matchType: "Test string",
                    value: "Test string",
                },
                metricNames: [
                    "Test string"                ],
                pathFilters: [
                    {
                        eventFilters: [
                            {
                                dimensionFilter: {
                                    dimensionName: "Test string",
                                    ids: [
                                        "Test string"                                    ],
                                    kind: "Test string",
                                    matchType: "Test string",
                                    values: [
                                        "Test string"                                    ],
                                },
                                kind: "Test string",
                            }                        ],
                        kind: "Test string",
                        pathMatchPosition: "Test string",
                    }                ],
            },
            pathCriteria: {
                activityFilters: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                customChannelGrouping: {
                    fallbackName: "Test string",
                    kind: "Test string",
                    name: "Test string",
                    rules: [
                        {
                            disjunctiveMatchStatements: [
                                {
                                    eventFilters: [
                                        {
                                            dimensionFilter: {
                                                dimensionName: "Test string",
                                                ids: [
                                                    "Test string"                                                ],
                                                kind: "Test string",
                                                matchType: "Test string",
                                                values: [
                                                    "Test string"                                                ],
                                            },
                                            kind: "Test string",
                                        }                                    ],
                                    kind: "Test string",
                                }                            ],
                            kind: "Test string",
                            name: "Test string",
                        }                    ],
                },
                dateRange: {
                    endDate: "Test string",
                    kind: "Test string",
                    relativeDateRange: "Test string",
                    startDate: "Test string",
                },
                dimensions: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                floodlightConfigId: {
                    dimensionName: "Test string",
                    etag: "Test string",
                    id: "Test string",
                    kind: "Test string",
                    matchType: "Test string",
                    value: "Test string",
                },
                metricNames: [
                    "Test string"                ],
                pathFilters: [
                    {
                        eventFilters: [
                            {
                                dimensionFilter: {
                                    dimensionName: "Test string",
                                    ids: [
                                        "Test string"                                    ],
                                    kind: "Test string",
                                    matchType: "Test string",
                                    values: [
                                        "Test string"                                    ],
                                },
                                kind: "Test string",
                            }                        ],
                        kind: "Test string",
                        pathMatchPosition: "Test string",
                    }                ],
            },
            pathToConversionCriteria: {
                activityFilters: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                conversionDimensions: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                customFloodlightVariables: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                customRichMediaEvents: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                dateRange: {
                    endDate: "Test string",
                    kind: "Test string",
                    relativeDateRange: "Test string",
                    startDate: "Test string",
                },
                floodlightConfigId: {
                    dimensionName: "Test string",
                    etag: "Test string",
                    id: "Test string",
                    kind: "Test string",
                    matchType: "Test string",
                    value: "Test string",
                },
                metricNames: [
                    "Test string"                ],
                perInteractionDimensions: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                reportProperties: {
                    clicksLookbackWindow: 42,
                    impressionsLookbackWindow: 42,
                    includeAttributedIPConversions: true,
                    includeUnattributedCookieConversions: true,
                    includeUnattributedIPConversions: true,
                    maximumClickInteractions: 42,
                    maximumImpressionInteractions: 42,
                    maximumInteractionGap: 42,
                    pivotOnInteractionPath: true,
                },
            },
            reachCriteria: {
                activities: {
                    filters: [
                        {
                            dimensionName: "Test string",
                            etag: "Test string",
                            id: "Test string",
                            kind: "Test string",
                            matchType: "Test string",
                            value: "Test string",
                        }                    ],
                    kind: "Test string",
                    metricNames: [
                        "Test string"                    ],
                },
                customRichMediaEvents: {
                    filteredEventIds: [
                        {
                            dimensionName: "Test string",
                            etag: "Test string",
                            id: "Test string",
                            kind: "Test string",
                            matchType: "Test string",
                            value: "Test string",
                        }                    ],
                    kind: "Test string",
                },
                dateRange: {
                    endDate: "Test string",
                    kind: "Test string",
                    relativeDateRange: "Test string",
                    startDate: "Test string",
                },
                dimensionFilters: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                dimensions: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                enableAllDimensionCombinations: true,
                metricNames: [
                    "Test string"                ],
                reachByFrequencyMetricNames: [
                    "Test string"                ],
            },
            schedule: {
                active: true,
                every: 42,
                expirationDate: "Test string",
                repeats: "Test string",
                repeatsOnWeekDays: [
                    "Test string"                ],
                runsOnDayOfMonth: "Test string",
                startDate: "Test string",
            },
            subAccountId: "Test string",
            type: "Test string",
        });
        /** Retrieves a report file by its report ID and file ID. This method supports media download. */
        await gapi.client.dfareporting.reports.files.get({
            fileId: "Test string",
            profileId: "Test string",
            reportId: "Test string",
        });
        /** Lists files for a report. */
        await gapi.client.dfareporting.reports.files.list({
            maxResults: 42,
            pageToken: "Test string",
            profileId: "Test string",
            reportId: "Test string",
            sortField: "Test string",
            sortOrder: "Test string",
        });
        /** Updates a report. This method supports patch semantics. */
        await gapi.client.dfareporting.reports.patch({
            profileId: "Test string",
            reportId: "Test string",
        }, {
            accountId: "Test string",
            criteria: {
                activities: {
                    filters: [
                        {
                            dimensionName: "Test string",
                            etag: "Test string",
                            id: "Test string",
                            kind: "Test string",
                            matchType: "Test string",
                            value: "Test string",
                        }                    ],
                    kind: "Test string",
                    metricNames: [
                        "Test string"                    ],
                },
                customRichMediaEvents: {
                    filteredEventIds: [
                        {
                            dimensionName: "Test string",
                            etag: "Test string",
                            id: "Test string",
                            kind: "Test string",
                            matchType: "Test string",
                            value: "Test string",
                        }                    ],
                    kind: "Test string",
                },
                dateRange: {
                    endDate: "Test string",
                    kind: "Test string",
                    relativeDateRange: "Test string",
                    startDate: "Test string",
                },
                dimensionFilters: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                dimensions: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                metricNames: [
                    "Test string"                ],
            },
            crossDimensionReachCriteria: {
                breakdown: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                dateRange: {
                    endDate: "Test string",
                    kind: "Test string",
                    relativeDateRange: "Test string",
                    startDate: "Test string",
                },
                dimension: "Test string",
                dimensionFilters: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                metricNames: [
                    "Test string"                ],
                overlapMetricNames: [
                    "Test string"                ],
                pivoted: true,
            },
            delivery: {
                emailOwner: true,
                emailOwnerDeliveryType: "Test string",
                message: "Test string",
                recipients: [
                    {
                        deliveryType: "Test string",
                        email: "Test string",
                        kind: "Test string",
                    }                ],
            },
            etag: "Test string",
            fileName: "Test string",
            floodlightCriteria: {
                customRichMediaEvents: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                dateRange: {
                    endDate: "Test string",
                    kind: "Test string",
                    relativeDateRange: "Test string",
                    startDate: "Test string",
                },
                dimensionFilters: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                dimensions: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                floodlightConfigId: {
                    dimensionName: "Test string",
                    etag: "Test string",
                    id: "Test string",
                    kind: "Test string",
                    matchType: "Test string",
                    value: "Test string",
                },
                metricNames: [
                    "Test string"                ],
                reportProperties: {
                    includeAttributedIPConversions: true,
                    includeUnattributedCookieConversions: true,
                    includeUnattributedIPConversions: true,
                },
            },
            format: "Test string",
            id: "Test string",
            kind: "Test string",
            lastModifiedTime: "Test string",
            name: "Test string",
            ownerProfileId: "Test string",
            pathAttributionCriteria: {
                activityFilters: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                customChannelGrouping: {
                    fallbackName: "Test string",
                    kind: "Test string",
                    name: "Test string",
                    rules: [
                        {
                            disjunctiveMatchStatements: [
                                {
                                    eventFilters: [
                                        {
                                            dimensionFilter: {
                                                dimensionName: "Test string",
                                                ids: [
                                                    "Test string"                                                ],
                                                kind: "Test string",
                                                matchType: "Test string",
                                                values: [
                                                    "Test string"                                                ],
                                            },
                                            kind: "Test string",
                                        }                                    ],
                                    kind: "Test string",
                                }                            ],
                            kind: "Test string",
                            name: "Test string",
                        }                    ],
                },
                dateRange: {
                    endDate: "Test string",
                    kind: "Test string",
                    relativeDateRange: "Test string",
                    startDate: "Test string",
                },
                dimensions: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                floodlightConfigId: {
                    dimensionName: "Test string",
                    etag: "Test string",
                    id: "Test string",
                    kind: "Test string",
                    matchType: "Test string",
                    value: "Test string",
                },
                metricNames: [
                    "Test string"                ],
                pathFilters: [
                    {
                        eventFilters: [
                            {
                                dimensionFilter: {
                                    dimensionName: "Test string",
                                    ids: [
                                        "Test string"                                    ],
                                    kind: "Test string",
                                    matchType: "Test string",
                                    values: [
                                        "Test string"                                    ],
                                },
                                kind: "Test string",
                            }                        ],
                        kind: "Test string",
                        pathMatchPosition: "Test string",
                    }                ],
            },
            pathCriteria: {
                activityFilters: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                customChannelGrouping: {
                    fallbackName: "Test string",
                    kind: "Test string",
                    name: "Test string",
                    rules: [
                        {
                            disjunctiveMatchStatements: [
                                {
                                    eventFilters: [
                                        {
                                            dimensionFilter: {
                                                dimensionName: "Test string",
                                                ids: [
                                                    "Test string"                                                ],
                                                kind: "Test string",
                                                matchType: "Test string",
                                                values: [
                                                    "Test string"                                                ],
                                            },
                                            kind: "Test string",
                                        }                                    ],
                                    kind: "Test string",
                                }                            ],
                            kind: "Test string",
                            name: "Test string",
                        }                    ],
                },
                dateRange: {
                    endDate: "Test string",
                    kind: "Test string",
                    relativeDateRange: "Test string",
                    startDate: "Test string",
                },
                dimensions: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                floodlightConfigId: {
                    dimensionName: "Test string",
                    etag: "Test string",
                    id: "Test string",
                    kind: "Test string",
                    matchType: "Test string",
                    value: "Test string",
                },
                metricNames: [
                    "Test string"                ],
                pathFilters: [
                    {
                        eventFilters: [
                            {
                                dimensionFilter: {
                                    dimensionName: "Test string",
                                    ids: [
                                        "Test string"                                    ],
                                    kind: "Test string",
                                    matchType: "Test string",
                                    values: [
                                        "Test string"                                    ],
                                },
                                kind: "Test string",
                            }                        ],
                        kind: "Test string",
                        pathMatchPosition: "Test string",
                    }                ],
            },
            pathToConversionCriteria: {
                activityFilters: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                conversionDimensions: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                customFloodlightVariables: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                customRichMediaEvents: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                dateRange: {
                    endDate: "Test string",
                    kind: "Test string",
                    relativeDateRange: "Test string",
                    startDate: "Test string",
                },
                floodlightConfigId: {
                    dimensionName: "Test string",
                    etag: "Test string",
                    id: "Test string",
                    kind: "Test string",
                    matchType: "Test string",
                    value: "Test string",
                },
                metricNames: [
                    "Test string"                ],
                perInteractionDimensions: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                reportProperties: {
                    clicksLookbackWindow: 42,
                    impressionsLookbackWindow: 42,
                    includeAttributedIPConversions: true,
                    includeUnattributedCookieConversions: true,
                    includeUnattributedIPConversions: true,
                    maximumClickInteractions: 42,
                    maximumImpressionInteractions: 42,
                    maximumInteractionGap: 42,
                    pivotOnInteractionPath: true,
                },
            },
            reachCriteria: {
                activities: {
                    filters: [
                        {
                            dimensionName: "Test string",
                            etag: "Test string",
                            id: "Test string",
                            kind: "Test string",
                            matchType: "Test string",
                            value: "Test string",
                        }                    ],
                    kind: "Test string",
                    metricNames: [
                        "Test string"                    ],
                },
                customRichMediaEvents: {
                    filteredEventIds: [
                        {
                            dimensionName: "Test string",
                            etag: "Test string",
                            id: "Test string",
                            kind: "Test string",
                            matchType: "Test string",
                            value: "Test string",
                        }                    ],
                    kind: "Test string",
                },
                dateRange: {
                    endDate: "Test string",
                    kind: "Test string",
                    relativeDateRange: "Test string",
                    startDate: "Test string",
                },
                dimensionFilters: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                dimensions: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                enableAllDimensionCombinations: true,
                metricNames: [
                    "Test string"                ],
                reachByFrequencyMetricNames: [
                    "Test string"                ],
            },
            schedule: {
                active: true,
                every: 42,
                expirationDate: "Test string",
                repeats: "Test string",
                repeatsOnWeekDays: [
                    "Test string"                ],
                runsOnDayOfMonth: "Test string",
                startDate: "Test string",
            },
            subAccountId: "Test string",
            type: "Test string",
        });
        /**
         * Returns the fields that are compatible to be selected in the respective sections of a report criteria, given the fields already selected in the input
         * report and user permissions.
         */
        await gapi.client.dfareporting.reports.compatibleFields.query({
            profileId: "Test string",
        }, {
            accountId: "Test string",
            criteria: {
                activities: {
                    filters: [
                        {
                            dimensionName: "Test string",
                            etag: "Test string",
                            id: "Test string",
                            kind: "Test string",
                            matchType: "Test string",
                            value: "Test string",
                        }                    ],
                    kind: "Test string",
                    metricNames: [
                        "Test string"                    ],
                },
                customRichMediaEvents: {
                    filteredEventIds: [
                        {
                            dimensionName: "Test string",
                            etag: "Test string",
                            id: "Test string",
                            kind: "Test string",
                            matchType: "Test string",
                            value: "Test string",
                        }                    ],
                    kind: "Test string",
                },
                dateRange: {
                    endDate: "Test string",
                    kind: "Test string",
                    relativeDateRange: "Test string",
                    startDate: "Test string",
                },
                dimensionFilters: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                dimensions: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                metricNames: [
                    "Test string"                ],
            },
            crossDimensionReachCriteria: {
                breakdown: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                dateRange: {
                    endDate: "Test string",
                    kind: "Test string",
                    relativeDateRange: "Test string",
                    startDate: "Test string",
                },
                dimension: "Test string",
                dimensionFilters: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                metricNames: [
                    "Test string"                ],
                overlapMetricNames: [
                    "Test string"                ],
                pivoted: true,
            },
            delivery: {
                emailOwner: true,
                emailOwnerDeliveryType: "Test string",
                message: "Test string",
                recipients: [
                    {
                        deliveryType: "Test string",
                        email: "Test string",
                        kind: "Test string",
                    }                ],
            },
            etag: "Test string",
            fileName: "Test string",
            floodlightCriteria: {
                customRichMediaEvents: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                dateRange: {
                    endDate: "Test string",
                    kind: "Test string",
                    relativeDateRange: "Test string",
                    startDate: "Test string",
                },
                dimensionFilters: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                dimensions: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                floodlightConfigId: {
                    dimensionName: "Test string",
                    etag: "Test string",
                    id: "Test string",
                    kind: "Test string",
                    matchType: "Test string",
                    value: "Test string",
                },
                metricNames: [
                    "Test string"                ],
                reportProperties: {
                    includeAttributedIPConversions: true,
                    includeUnattributedCookieConversions: true,
                    includeUnattributedIPConversions: true,
                },
            },
            format: "Test string",
            id: "Test string",
            kind: "Test string",
            lastModifiedTime: "Test string",
            name: "Test string",
            ownerProfileId: "Test string",
            pathAttributionCriteria: {
                activityFilters: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                customChannelGrouping: {
                    fallbackName: "Test string",
                    kind: "Test string",
                    name: "Test string",
                    rules: [
                        {
                            disjunctiveMatchStatements: [
                                {
                                    eventFilters: [
                                        {
                                            dimensionFilter: {
                                                dimensionName: "Test string",
                                                ids: [
                                                    "Test string"                                                ],
                                                kind: "Test string",
                                                matchType: "Test string",
                                                values: [
                                                    "Test string"                                                ],
                                            },
                                            kind: "Test string",
                                        }                                    ],
                                    kind: "Test string",
                                }                            ],
                            kind: "Test string",
                            name: "Test string",
                        }                    ],
                },
                dateRange: {
                    endDate: "Test string",
                    kind: "Test string",
                    relativeDateRange: "Test string",
                    startDate: "Test string",
                },
                dimensions: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                floodlightConfigId: {
                    dimensionName: "Test string",
                    etag: "Test string",
                    id: "Test string",
                    kind: "Test string",
                    matchType: "Test string",
                    value: "Test string",
                },
                metricNames: [
                    "Test string"                ],
                pathFilters: [
                    {
                        eventFilters: [
                            {
                                dimensionFilter: {
                                    dimensionName: "Test string",
                                    ids: [
                                        "Test string"                                    ],
                                    kind: "Test string",
                                    matchType: "Test string",
                                    values: [
                                        "Test string"                                    ],
                                },
                                kind: "Test string",
                            }                        ],
                        kind: "Test string",
                        pathMatchPosition: "Test string",
                    }                ],
            },
            pathCriteria: {
                activityFilters: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                customChannelGrouping: {
                    fallbackName: "Test string",
                    kind: "Test string",
                    name: "Test string",
                    rules: [
                        {
                            disjunctiveMatchStatements: [
                                {
                                    eventFilters: [
                                        {
                                            dimensionFilter: {
                                                dimensionName: "Test string",
                                                ids: [
                                                    "Test string"                                                ],
                                                kind: "Test string",
                                                matchType: "Test string",
                                                values: [
                                                    "Test string"                                                ],
                                            },
                                            kind: "Test string",
                                        }                                    ],
                                    kind: "Test string",
                                }                            ],
                            kind: "Test string",
                            name: "Test string",
                        }                    ],
                },
                dateRange: {
                    endDate: "Test string",
                    kind: "Test string",
                    relativeDateRange: "Test string",
                    startDate: "Test string",
                },
                dimensions: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                floodlightConfigId: {
                    dimensionName: "Test string",
                    etag: "Test string",
                    id: "Test string",
                    kind: "Test string",
                    matchType: "Test string",
                    value: "Test string",
                },
                metricNames: [
                    "Test string"                ],
                pathFilters: [
                    {
                        eventFilters: [
                            {
                                dimensionFilter: {
                                    dimensionName: "Test string",
                                    ids: [
                                        "Test string"                                    ],
                                    kind: "Test string",
                                    matchType: "Test string",
                                    values: [
                                        "Test string"                                    ],
                                },
                                kind: "Test string",
                            }                        ],
                        kind: "Test string",
                        pathMatchPosition: "Test string",
                    }                ],
            },
            pathToConversionCriteria: {
                activityFilters: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                conversionDimensions: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                customFloodlightVariables: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                customRichMediaEvents: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                dateRange: {
                    endDate: "Test string",
                    kind: "Test string",
                    relativeDateRange: "Test string",
                    startDate: "Test string",
                },
                floodlightConfigId: {
                    dimensionName: "Test string",
                    etag: "Test string",
                    id: "Test string",
                    kind: "Test string",
                    matchType: "Test string",
                    value: "Test string",
                },
                metricNames: [
                    "Test string"                ],
                perInteractionDimensions: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                reportProperties: {
                    clicksLookbackWindow: 42,
                    impressionsLookbackWindow: 42,
                    includeAttributedIPConversions: true,
                    includeUnattributedCookieConversions: true,
                    includeUnattributedIPConversions: true,
                    maximumClickInteractions: 42,
                    maximumImpressionInteractions: 42,
                    maximumInteractionGap: 42,
                    pivotOnInteractionPath: true,
                },
            },
            reachCriteria: {
                activities: {
                    filters: [
                        {
                            dimensionName: "Test string",
                            etag: "Test string",
                            id: "Test string",
                            kind: "Test string",
                            matchType: "Test string",
                            value: "Test string",
                        }                    ],
                    kind: "Test string",
                    metricNames: [
                        "Test string"                    ],
                },
                customRichMediaEvents: {
                    filteredEventIds: [
                        {
                            dimensionName: "Test string",
                            etag: "Test string",
                            id: "Test string",
                            kind: "Test string",
                            matchType: "Test string",
                            value: "Test string",
                        }                    ],
                    kind: "Test string",
                },
                dateRange: {
                    endDate: "Test string",
                    kind: "Test string",
                    relativeDateRange: "Test string",
                    startDate: "Test string",
                },
                dimensionFilters: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                dimensions: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                enableAllDimensionCombinations: true,
                metricNames: [
                    "Test string"                ],
                reachByFrequencyMetricNames: [
                    "Test string"                ],
            },
            schedule: {
                active: true,
                every: 42,
                expirationDate: "Test string",
                repeats: "Test string",
                repeatsOnWeekDays: [
                    "Test string"                ],
                runsOnDayOfMonth: "Test string",
                startDate: "Test string",
            },
            subAccountId: "Test string",
            type: "Test string",
        });
        /** Retrieves a report file by its report ID and file ID. This method supports media download. */
        await gapi.client.dfareporting.reports.files.get({
            fileId: "Test string",
            profileId: "Test string",
            reportId: "Test string",
        });
        /** Lists files for a report. */
        await gapi.client.dfareporting.reports.files.list({
            maxResults: 42,
            pageToken: "Test string",
            profileId: "Test string",
            reportId: "Test string",
            sortField: "Test string",
            sortOrder: "Test string",
        });
        /** Runs a report. */
        await gapi.client.dfareporting.reports.run({
            profileId: "Test string",
            reportId: "Test string",
            synchronous: true,
        });
        /**
         * Returns the fields that are compatible to be selected in the respective sections of a report criteria, given the fields already selected in the input
         * report and user permissions.
         */
        await gapi.client.dfareporting.reports.compatibleFields.query({
            profileId: "Test string",
        }, {
            accountId: "Test string",
            criteria: {
                activities: {
                    filters: [
                        {
                            dimensionName: "Test string",
                            etag: "Test string",
                            id: "Test string",
                            kind: "Test string",
                            matchType: "Test string",
                            value: "Test string",
                        }                    ],
                    kind: "Test string",
                    metricNames: [
                        "Test string"                    ],
                },
                customRichMediaEvents: {
                    filteredEventIds: [
                        {
                            dimensionName: "Test string",
                            etag: "Test string",
                            id: "Test string",
                            kind: "Test string",
                            matchType: "Test string",
                            value: "Test string",
                        }                    ],
                    kind: "Test string",
                },
                dateRange: {
                    endDate: "Test string",
                    kind: "Test string",
                    relativeDateRange: "Test string",
                    startDate: "Test string",
                },
                dimensionFilters: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                dimensions: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                metricNames: [
                    "Test string"                ],
            },
            crossDimensionReachCriteria: {
                breakdown: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                dateRange: {
                    endDate: "Test string",
                    kind: "Test string",
                    relativeDateRange: "Test string",
                    startDate: "Test string",
                },
                dimension: "Test string",
                dimensionFilters: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                metricNames: [
                    "Test string"                ],
                overlapMetricNames: [
                    "Test string"                ],
                pivoted: true,
            },
            delivery: {
                emailOwner: true,
                emailOwnerDeliveryType: "Test string",
                message: "Test string",
                recipients: [
                    {
                        deliveryType: "Test string",
                        email: "Test string",
                        kind: "Test string",
                    }                ],
            },
            etag: "Test string",
            fileName: "Test string",
            floodlightCriteria: {
                customRichMediaEvents: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                dateRange: {
                    endDate: "Test string",
                    kind: "Test string",
                    relativeDateRange: "Test string",
                    startDate: "Test string",
                },
                dimensionFilters: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                dimensions: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                floodlightConfigId: {
                    dimensionName: "Test string",
                    etag: "Test string",
                    id: "Test string",
                    kind: "Test string",
                    matchType: "Test string",
                    value: "Test string",
                },
                metricNames: [
                    "Test string"                ],
                reportProperties: {
                    includeAttributedIPConversions: true,
                    includeUnattributedCookieConversions: true,
                    includeUnattributedIPConversions: true,
                },
            },
            format: "Test string",
            id: "Test string",
            kind: "Test string",
            lastModifiedTime: "Test string",
            name: "Test string",
            ownerProfileId: "Test string",
            pathAttributionCriteria: {
                activityFilters: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                customChannelGrouping: {
                    fallbackName: "Test string",
                    kind: "Test string",
                    name: "Test string",
                    rules: [
                        {
                            disjunctiveMatchStatements: [
                                {
                                    eventFilters: [
                                        {
                                            dimensionFilter: {
                                                dimensionName: "Test string",
                                                ids: [
                                                    "Test string"                                                ],
                                                kind: "Test string",
                                                matchType: "Test string",
                                                values: [
                                                    "Test string"                                                ],
                                            },
                                            kind: "Test string",
                                        }                                    ],
                                    kind: "Test string",
                                }                            ],
                            kind: "Test string",
                            name: "Test string",
                        }                    ],
                },
                dateRange: {
                    endDate: "Test string",
                    kind: "Test string",
                    relativeDateRange: "Test string",
                    startDate: "Test string",
                },
                dimensions: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                floodlightConfigId: {
                    dimensionName: "Test string",
                    etag: "Test string",
                    id: "Test string",
                    kind: "Test string",
                    matchType: "Test string",
                    value: "Test string",
                },
                metricNames: [
                    "Test string"                ],
                pathFilters: [
                    {
                        eventFilters: [
                            {
                                dimensionFilter: {
                                    dimensionName: "Test string",
                                    ids: [
                                        "Test string"                                    ],
                                    kind: "Test string",
                                    matchType: "Test string",
                                    values: [
                                        "Test string"                                    ],
                                },
                                kind: "Test string",
                            }                        ],
                        kind: "Test string",
                        pathMatchPosition: "Test string",
                    }                ],
            },
            pathCriteria: {
                activityFilters: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                customChannelGrouping: {
                    fallbackName: "Test string",
                    kind: "Test string",
                    name: "Test string",
                    rules: [
                        {
                            disjunctiveMatchStatements: [
                                {
                                    eventFilters: [
                                        {
                                            dimensionFilter: {
                                                dimensionName: "Test string",
                                                ids: [
                                                    "Test string"                                                ],
                                                kind: "Test string",
                                                matchType: "Test string",
                                                values: [
                                                    "Test string"                                                ],
                                            },
                                            kind: "Test string",
                                        }                                    ],
                                    kind: "Test string",
                                }                            ],
                            kind: "Test string",
                            name: "Test string",
                        }                    ],
                },
                dateRange: {
                    endDate: "Test string",
                    kind: "Test string",
                    relativeDateRange: "Test string",
                    startDate: "Test string",
                },
                dimensions: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                floodlightConfigId: {
                    dimensionName: "Test string",
                    etag: "Test string",
                    id: "Test string",
                    kind: "Test string",
                    matchType: "Test string",
                    value: "Test string",
                },
                metricNames: [
                    "Test string"                ],
                pathFilters: [
                    {
                        eventFilters: [
                            {
                                dimensionFilter: {
                                    dimensionName: "Test string",
                                    ids: [
                                        "Test string"                                    ],
                                    kind: "Test string",
                                    matchType: "Test string",
                                    values: [
                                        "Test string"                                    ],
                                },
                                kind: "Test string",
                            }                        ],
                        kind: "Test string",
                        pathMatchPosition: "Test string",
                    }                ],
            },
            pathToConversionCriteria: {
                activityFilters: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                conversionDimensions: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                customFloodlightVariables: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                customRichMediaEvents: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                dateRange: {
                    endDate: "Test string",
                    kind: "Test string",
                    relativeDateRange: "Test string",
                    startDate: "Test string",
                },
                floodlightConfigId: {
                    dimensionName: "Test string",
                    etag: "Test string",
                    id: "Test string",
                    kind: "Test string",
                    matchType: "Test string",
                    value: "Test string",
                },
                metricNames: [
                    "Test string"                ],
                perInteractionDimensions: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                reportProperties: {
                    clicksLookbackWindow: 42,
                    impressionsLookbackWindow: 42,
                    includeAttributedIPConversions: true,
                    includeUnattributedCookieConversions: true,
                    includeUnattributedIPConversions: true,
                    maximumClickInteractions: 42,
                    maximumImpressionInteractions: 42,
                    maximumInteractionGap: 42,
                    pivotOnInteractionPath: true,
                },
            },
            reachCriteria: {
                activities: {
                    filters: [
                        {
                            dimensionName: "Test string",
                            etag: "Test string",
                            id: "Test string",
                            kind: "Test string",
                            matchType: "Test string",
                            value: "Test string",
                        }                    ],
                    kind: "Test string",
                    metricNames: [
                        "Test string"                    ],
                },
                customRichMediaEvents: {
                    filteredEventIds: [
                        {
                            dimensionName: "Test string",
                            etag: "Test string",
                            id: "Test string",
                            kind: "Test string",
                            matchType: "Test string",
                            value: "Test string",
                        }                    ],
                    kind: "Test string",
                },
                dateRange: {
                    endDate: "Test string",
                    kind: "Test string",
                    relativeDateRange: "Test string",
                    startDate: "Test string",
                },
                dimensionFilters: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                dimensions: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                enableAllDimensionCombinations: true,
                metricNames: [
                    "Test string"                ],
                reachByFrequencyMetricNames: [
                    "Test string"                ],
            },
            schedule: {
                active: true,
                every: 42,
                expirationDate: "Test string",
                repeats: "Test string",
                repeatsOnWeekDays: [
                    "Test string"                ],
                runsOnDayOfMonth: "Test string",
                startDate: "Test string",
            },
            subAccountId: "Test string",
            type: "Test string",
        });
        /** Retrieves a report file by its report ID and file ID. This method supports media download. */
        await gapi.client.dfareporting.reports.files.get({
            fileId: "Test string",
            profileId: "Test string",
            reportId: "Test string",
        });
        /** Lists files for a report. */
        await gapi.client.dfareporting.reports.files.list({
            maxResults: 42,
            pageToken: "Test string",
            profileId: "Test string",
            reportId: "Test string",
            sortField: "Test string",
            sortOrder: "Test string",
        });
        /** Updates a report. */
        await gapi.client.dfareporting.reports.update({
            profileId: "Test string",
            reportId: "Test string",
        }, {
            accountId: "Test string",
            criteria: {
                activities: {
                    filters: [
                        {
                            dimensionName: "Test string",
                            etag: "Test string",
                            id: "Test string",
                            kind: "Test string",
                            matchType: "Test string",
                            value: "Test string",
                        }                    ],
                    kind: "Test string",
                    metricNames: [
                        "Test string"                    ],
                },
                customRichMediaEvents: {
                    filteredEventIds: [
                        {
                            dimensionName: "Test string",
                            etag: "Test string",
                            id: "Test string",
                            kind: "Test string",
                            matchType: "Test string",
                            value: "Test string",
                        }                    ],
                    kind: "Test string",
                },
                dateRange: {
                    endDate: "Test string",
                    kind: "Test string",
                    relativeDateRange: "Test string",
                    startDate: "Test string",
                },
                dimensionFilters: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                dimensions: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                metricNames: [
                    "Test string"                ],
            },
            crossDimensionReachCriteria: {
                breakdown: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                dateRange: {
                    endDate: "Test string",
                    kind: "Test string",
                    relativeDateRange: "Test string",
                    startDate: "Test string",
                },
                dimension: "Test string",
                dimensionFilters: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                metricNames: [
                    "Test string"                ],
                overlapMetricNames: [
                    "Test string"                ],
                pivoted: true,
            },
            delivery: {
                emailOwner: true,
                emailOwnerDeliveryType: "Test string",
                message: "Test string",
                recipients: [
                    {
                        deliveryType: "Test string",
                        email: "Test string",
                        kind: "Test string",
                    }                ],
            },
            etag: "Test string",
            fileName: "Test string",
            floodlightCriteria: {
                customRichMediaEvents: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                dateRange: {
                    endDate: "Test string",
                    kind: "Test string",
                    relativeDateRange: "Test string",
                    startDate: "Test string",
                },
                dimensionFilters: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                dimensions: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                floodlightConfigId: {
                    dimensionName: "Test string",
                    etag: "Test string",
                    id: "Test string",
                    kind: "Test string",
                    matchType: "Test string",
                    value: "Test string",
                },
                metricNames: [
                    "Test string"                ],
                reportProperties: {
                    includeAttributedIPConversions: true,
                    includeUnattributedCookieConversions: true,
                    includeUnattributedIPConversions: true,
                },
            },
            format: "Test string",
            id: "Test string",
            kind: "Test string",
            lastModifiedTime: "Test string",
            name: "Test string",
            ownerProfileId: "Test string",
            pathAttributionCriteria: {
                activityFilters: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                customChannelGrouping: {
                    fallbackName: "Test string",
                    kind: "Test string",
                    name: "Test string",
                    rules: [
                        {
                            disjunctiveMatchStatements: [
                                {
                                    eventFilters: [
                                        {
                                            dimensionFilter: {
                                                dimensionName: "Test string",
                                                ids: [
                                                    "Test string"                                                ],
                                                kind: "Test string",
                                                matchType: "Test string",
                                                values: [
                                                    "Test string"                                                ],
                                            },
                                            kind: "Test string",
                                        }                                    ],
                                    kind: "Test string",
                                }                            ],
                            kind: "Test string",
                            name: "Test string",
                        }                    ],
                },
                dateRange: {
                    endDate: "Test string",
                    kind: "Test string",
                    relativeDateRange: "Test string",
                    startDate: "Test string",
                },
                dimensions: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                floodlightConfigId: {
                    dimensionName: "Test string",
                    etag: "Test string",
                    id: "Test string",
                    kind: "Test string",
                    matchType: "Test string",
                    value: "Test string",
                },
                metricNames: [
                    "Test string"                ],
                pathFilters: [
                    {
                        eventFilters: [
                            {
                                dimensionFilter: {
                                    dimensionName: "Test string",
                                    ids: [
                                        "Test string"                                    ],
                                    kind: "Test string",
                                    matchType: "Test string",
                                    values: [
                                        "Test string"                                    ],
                                },
                                kind: "Test string",
                            }                        ],
                        kind: "Test string",
                        pathMatchPosition: "Test string",
                    }                ],
            },
            pathCriteria: {
                activityFilters: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                customChannelGrouping: {
                    fallbackName: "Test string",
                    kind: "Test string",
                    name: "Test string",
                    rules: [
                        {
                            disjunctiveMatchStatements: [
                                {
                                    eventFilters: [
                                        {
                                            dimensionFilter: {
                                                dimensionName: "Test string",
                                                ids: [
                                                    "Test string"                                                ],
                                                kind: "Test string",
                                                matchType: "Test string",
                                                values: [
                                                    "Test string"                                                ],
                                            },
                                            kind: "Test string",
                                        }                                    ],
                                    kind: "Test string",
                                }                            ],
                            kind: "Test string",
                            name: "Test string",
                        }                    ],
                },
                dateRange: {
                    endDate: "Test string",
                    kind: "Test string",
                    relativeDateRange: "Test string",
                    startDate: "Test string",
                },
                dimensions: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                floodlightConfigId: {
                    dimensionName: "Test string",
                    etag: "Test string",
                    id: "Test string",
                    kind: "Test string",
                    matchType: "Test string",
                    value: "Test string",
                },
                metricNames: [
                    "Test string"                ],
                pathFilters: [
                    {
                        eventFilters: [
                            {
                                dimensionFilter: {
                                    dimensionName: "Test string",
                                    ids: [
                                        "Test string"                                    ],
                                    kind: "Test string",
                                    matchType: "Test string",
                                    values: [
                                        "Test string"                                    ],
                                },
                                kind: "Test string",
                            }                        ],
                        kind: "Test string",
                        pathMatchPosition: "Test string",
                    }                ],
            },
            pathToConversionCriteria: {
                activityFilters: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                conversionDimensions: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                customFloodlightVariables: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                customRichMediaEvents: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                dateRange: {
                    endDate: "Test string",
                    kind: "Test string",
                    relativeDateRange: "Test string",
                    startDate: "Test string",
                },
                floodlightConfigId: {
                    dimensionName: "Test string",
                    etag: "Test string",
                    id: "Test string",
                    kind: "Test string",
                    matchType: "Test string",
                    value: "Test string",
                },
                metricNames: [
                    "Test string"                ],
                perInteractionDimensions: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                reportProperties: {
                    clicksLookbackWindow: 42,
                    impressionsLookbackWindow: 42,
                    includeAttributedIPConversions: true,
                    includeUnattributedCookieConversions: true,
                    includeUnattributedIPConversions: true,
                    maximumClickInteractions: 42,
                    maximumImpressionInteractions: 42,
                    maximumInteractionGap: 42,
                    pivotOnInteractionPath: true,
                },
            },
            reachCriteria: {
                activities: {
                    filters: [
                        {
                            dimensionName: "Test string",
                            etag: "Test string",
                            id: "Test string",
                            kind: "Test string",
                            matchType: "Test string",
                            value: "Test string",
                        }                    ],
                    kind: "Test string",
                    metricNames: [
                        "Test string"                    ],
                },
                customRichMediaEvents: {
                    filteredEventIds: [
                        {
                            dimensionName: "Test string",
                            etag: "Test string",
                            id: "Test string",
                            kind: "Test string",
                            matchType: "Test string",
                            value: "Test string",
                        }                    ],
                    kind: "Test string",
                },
                dateRange: {
                    endDate: "Test string",
                    kind: "Test string",
                    relativeDateRange: "Test string",
                    startDate: "Test string",
                },
                dimensionFilters: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                dimensions: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                enableAllDimensionCombinations: true,
                metricNames: [
                    "Test string"                ],
                reachByFrequencyMetricNames: [
                    "Test string"                ],
            },
            schedule: {
                active: true,
                every: 42,
                expirationDate: "Test string",
                repeats: "Test string",
                repeatsOnWeekDays: [
                    "Test string"                ],
                runsOnDayOfMonth: "Test string",
                startDate: "Test string",
            },
            subAccountId: "Test string",
            type: "Test string",
        });
        /**
         * Returns the fields that are compatible to be selected in the respective sections of a report criteria, given the fields already selected in the input
         * report and user permissions.
         */
        await gapi.client.dfareporting.reports.compatibleFields.query({
            profileId: "Test string",
        }, {
            accountId: "Test string",
            criteria: {
                activities: {
                    filters: [
                        {
                            dimensionName: "Test string",
                            etag: "Test string",
                            id: "Test string",
                            kind: "Test string",
                            matchType: "Test string",
                            value: "Test string",
                        }                    ],
                    kind: "Test string",
                    metricNames: [
                        "Test string"                    ],
                },
                customRichMediaEvents: {
                    filteredEventIds: [
                        {
                            dimensionName: "Test string",
                            etag: "Test string",
                            id: "Test string",
                            kind: "Test string",
                            matchType: "Test string",
                            value: "Test string",
                        }                    ],
                    kind: "Test string",
                },
                dateRange: {
                    endDate: "Test string",
                    kind: "Test string",
                    relativeDateRange: "Test string",
                    startDate: "Test string",
                },
                dimensionFilters: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                dimensions: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                metricNames: [
                    "Test string"                ],
            },
            crossDimensionReachCriteria: {
                breakdown: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                dateRange: {
                    endDate: "Test string",
                    kind: "Test string",
                    relativeDateRange: "Test string",
                    startDate: "Test string",
                },
                dimension: "Test string",
                dimensionFilters: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                metricNames: [
                    "Test string"                ],
                overlapMetricNames: [
                    "Test string"                ],
                pivoted: true,
            },
            delivery: {
                emailOwner: true,
                emailOwnerDeliveryType: "Test string",
                message: "Test string",
                recipients: [
                    {
                        deliveryType: "Test string",
                        email: "Test string",
                        kind: "Test string",
                    }                ],
            },
            etag: "Test string",
            fileName: "Test string",
            floodlightCriteria: {
                customRichMediaEvents: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                dateRange: {
                    endDate: "Test string",
                    kind: "Test string",
                    relativeDateRange: "Test string",
                    startDate: "Test string",
                },
                dimensionFilters: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                dimensions: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                floodlightConfigId: {
                    dimensionName: "Test string",
                    etag: "Test string",
                    id: "Test string",
                    kind: "Test string",
                    matchType: "Test string",
                    value: "Test string",
                },
                metricNames: [
                    "Test string"                ],
                reportProperties: {
                    includeAttributedIPConversions: true,
                    includeUnattributedCookieConversions: true,
                    includeUnattributedIPConversions: true,
                },
            },
            format: "Test string",
            id: "Test string",
            kind: "Test string",
            lastModifiedTime: "Test string",
            name: "Test string",
            ownerProfileId: "Test string",
            pathAttributionCriteria: {
                activityFilters: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                customChannelGrouping: {
                    fallbackName: "Test string",
                    kind: "Test string",
                    name: "Test string",
                    rules: [
                        {
                            disjunctiveMatchStatements: [
                                {
                                    eventFilters: [
                                        {
                                            dimensionFilter: {
                                                dimensionName: "Test string",
                                                ids: [
                                                    "Test string"                                                ],
                                                kind: "Test string",
                                                matchType: "Test string",
                                                values: [
                                                    "Test string"                                                ],
                                            },
                                            kind: "Test string",
                                        }                                    ],
                                    kind: "Test string",
                                }                            ],
                            kind: "Test string",
                            name: "Test string",
                        }                    ],
                },
                dateRange: {
                    endDate: "Test string",
                    kind: "Test string",
                    relativeDateRange: "Test string",
                    startDate: "Test string",
                },
                dimensions: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                floodlightConfigId: {
                    dimensionName: "Test string",
                    etag: "Test string",
                    id: "Test string",
                    kind: "Test string",
                    matchType: "Test string",
                    value: "Test string",
                },
                metricNames: [
                    "Test string"                ],
                pathFilters: [
                    {
                        eventFilters: [
                            {
                                dimensionFilter: {
                                    dimensionName: "Test string",
                                    ids: [
                                        "Test string"                                    ],
                                    kind: "Test string",
                                    matchType: "Test string",
                                    values: [
                                        "Test string"                                    ],
                                },
                                kind: "Test string",
                            }                        ],
                        kind: "Test string",
                        pathMatchPosition: "Test string",
                    }                ],
            },
            pathCriteria: {
                activityFilters: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                customChannelGrouping: {
                    fallbackName: "Test string",
                    kind: "Test string",
                    name: "Test string",
                    rules: [
                        {
                            disjunctiveMatchStatements: [
                                {
                                    eventFilters: [
                                        {
                                            dimensionFilter: {
                                                dimensionName: "Test string",
                                                ids: [
                                                    "Test string"                                                ],
                                                kind: "Test string",
                                                matchType: "Test string",
                                                values: [
                                                    "Test string"                                                ],
                                            },
                                            kind: "Test string",
                                        }                                    ],
                                    kind: "Test string",
                                }                            ],
                            kind: "Test string",
                            name: "Test string",
                        }                    ],
                },
                dateRange: {
                    endDate: "Test string",
                    kind: "Test string",
                    relativeDateRange: "Test string",
                    startDate: "Test string",
                },
                dimensions: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                floodlightConfigId: {
                    dimensionName: "Test string",
                    etag: "Test string",
                    id: "Test string",
                    kind: "Test string",
                    matchType: "Test string",
                    value: "Test string",
                },
                metricNames: [
                    "Test string"                ],
                pathFilters: [
                    {
                        eventFilters: [
                            {
                                dimensionFilter: {
                                    dimensionName: "Test string",
                                    ids: [
                                        "Test string"                                    ],
                                    kind: "Test string",
                                    matchType: "Test string",
                                    values: [
                                        "Test string"                                    ],
                                },
                                kind: "Test string",
                            }                        ],
                        kind: "Test string",
                        pathMatchPosition: "Test string",
                    }                ],
            },
            pathToConversionCriteria: {
                activityFilters: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                conversionDimensions: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                customFloodlightVariables: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                customRichMediaEvents: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                dateRange: {
                    endDate: "Test string",
                    kind: "Test string",
                    relativeDateRange: "Test string",
                    startDate: "Test string",
                },
                floodlightConfigId: {
                    dimensionName: "Test string",
                    etag: "Test string",
                    id: "Test string",
                    kind: "Test string",
                    matchType: "Test string",
                    value: "Test string",
                },
                metricNames: [
                    "Test string"                ],
                perInteractionDimensions: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                reportProperties: {
                    clicksLookbackWindow: 42,
                    impressionsLookbackWindow: 42,
                    includeAttributedIPConversions: true,
                    includeUnattributedCookieConversions: true,
                    includeUnattributedIPConversions: true,
                    maximumClickInteractions: 42,
                    maximumImpressionInteractions: 42,
                    maximumInteractionGap: 42,
                    pivotOnInteractionPath: true,
                },
            },
            reachCriteria: {
                activities: {
                    filters: [
                        {
                            dimensionName: "Test string",
                            etag: "Test string",
                            id: "Test string",
                            kind: "Test string",
                            matchType: "Test string",
                            value: "Test string",
                        }                    ],
                    kind: "Test string",
                    metricNames: [
                        "Test string"                    ],
                },
                customRichMediaEvents: {
                    filteredEventIds: [
                        {
                            dimensionName: "Test string",
                            etag: "Test string",
                            id: "Test string",
                            kind: "Test string",
                            matchType: "Test string",
                            value: "Test string",
                        }                    ],
                    kind: "Test string",
                },
                dateRange: {
                    endDate: "Test string",
                    kind: "Test string",
                    relativeDateRange: "Test string",
                    startDate: "Test string",
                },
                dimensionFilters: [
                    {
                        dimensionName: "Test string",
                        etag: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        matchType: "Test string",
                        value: "Test string",
                    }                ],
                dimensions: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        sortOrder: "Test string",
                    }                ],
                enableAllDimensionCombinations: true,
                metricNames: [
                    "Test string"                ],
                reachByFrequencyMetricNames: [
                    "Test string"                ],
            },
            schedule: {
                active: true,
                every: 42,
                expirationDate: "Test string",
                repeats: "Test string",
                repeatsOnWeekDays: [
                    "Test string"                ],
                runsOnDayOfMonth: "Test string",
                startDate: "Test string",
            },
            subAccountId: "Test string",
            type: "Test string",
        });
        /** Retrieves a report file by its report ID and file ID. This method supports media download. */
        await gapi.client.dfareporting.reports.files.get({
            fileId: "Test string",
            profileId: "Test string",
            reportId: "Test string",
        });
        /** Lists files for a report. */
        await gapi.client.dfareporting.reports.files.list({
            maxResults: 42,
            pageToken: "Test string",
            profileId: "Test string",
            reportId: "Test string",
            sortField: "Test string",
            sortOrder: "Test string",
        });
        /** Gets one site by ID. */
        await gapi.client.dfareporting.sites.get({
            id: "Test string",
            profileId: "Test string",
        });
        /** Inserts a new site. */
        await gapi.client.dfareporting.sites.insert({
            profileId: "Test string",
        }, {
            accountId: "Test string",
            approved: true,
            directorySiteId: "Test string",
            directorySiteIdDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            id: "Test string",
            idDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            keyName: "Test string",
            kind: "Test string",
            name: "Test string",
            siteContacts: [
                {
                    address: "Test string",
                    contactType: "Test string",
                    email: "Test string",
                    firstName: "Test string",
                    id: "Test string",
                    lastName: "Test string",
                    phone: "Test string",
                    title: "Test string",
                }            ],
            siteSettings: {
                activeViewOptOut: true,
                adBlockingOptOut: true,
                disableNewCookie: true,
                tagSetting: {
                    additionalKeyValues: "Test string",
                    includeClickThroughUrls: true,
                    includeClickTracking: true,
                    keywordOption: "Test string",
                },
                videoActiveViewOptOutTemplate: true,
                vpaidAdapterChoiceTemplate: "Test string",
            },
            subaccountId: "Test string",
            videoSettings: {
                companionSettings: {
                    companionsDisabled: true,
                    enabledSizes: [
                        {
                            height: 42,
                            iab: true,
                            id: "Test string",
                            kind: "Test string",
                            width: 42,
                        }                    ],
                    imageOnly: true,
                    kind: "Test string",
                },
                kind: "Test string",
                obaEnabled: true,
                obaSettings: {
                    iconClickThroughUrl: "Test string",
                    iconClickTrackingUrl: "Test string",
                    iconViewTrackingUrl: "Test string",
                    program: "Test string",
                    resourceUrl: "Test string",
                    size: {
                        height: 42,
                        iab: true,
                        id: "Test string",
                        kind: "Test string",
                        width: 42,
                    },
                    xPosition: "Test string",
                    yPosition: "Test string",
                },
                orientation: "Test string",
                skippableSettings: {
                    kind: "Test string",
                    progressOffset: {
                        offsetPercentage: 42,
                        offsetSeconds: 42,
                    },
                    skipOffset: {
                        offsetPercentage: 42,
                        offsetSeconds: 42,
                    },
                    skippable: true,
                },
                transcodeSettings: {
                    enabledVideoFormats: [
                        42                    ],
                    kind: "Test string",
                },
            },
        });
        /** Retrieves a list of sites, possibly filtered. This method supports paging. */
        await gapi.client.dfareporting.sites.list({
            acceptsInStreamVideoPlacements: true,
            acceptsInterstitialPlacements: true,
            acceptsPublisherPaidPlacements: true,
            adWordsSite: true,
            approved: true,
            campaignIds: "Test string",
            directorySiteIds: "Test string",
            ids: "Test string",
            maxResults: 42,
            pageToken: "Test string",
            profileId: "Test string",
            searchString: "Test string",
            sortField: "Test string",
            sortOrder: "Test string",
            subaccountId: "Test string",
            unmappedSite: true,
        });
        /** Updates an existing site. This method supports patch semantics. */
        await gapi.client.dfareporting.sites.patch({
            id: "Test string",
            profileId: "Test string",
        }, {
            accountId: "Test string",
            approved: true,
            directorySiteId: "Test string",
            directorySiteIdDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            id: "Test string",
            idDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            keyName: "Test string",
            kind: "Test string",
            name: "Test string",
            siteContacts: [
                {
                    address: "Test string",
                    contactType: "Test string",
                    email: "Test string",
                    firstName: "Test string",
                    id: "Test string",
                    lastName: "Test string",
                    phone: "Test string",
                    title: "Test string",
                }            ],
            siteSettings: {
                activeViewOptOut: true,
                adBlockingOptOut: true,
                disableNewCookie: true,
                tagSetting: {
                    additionalKeyValues: "Test string",
                    includeClickThroughUrls: true,
                    includeClickTracking: true,
                    keywordOption: "Test string",
                },
                videoActiveViewOptOutTemplate: true,
                vpaidAdapterChoiceTemplate: "Test string",
            },
            subaccountId: "Test string",
            videoSettings: {
                companionSettings: {
                    companionsDisabled: true,
                    enabledSizes: [
                        {
                            height: 42,
                            iab: true,
                            id: "Test string",
                            kind: "Test string",
                            width: 42,
                        }                    ],
                    imageOnly: true,
                    kind: "Test string",
                },
                kind: "Test string",
                obaEnabled: true,
                obaSettings: {
                    iconClickThroughUrl: "Test string",
                    iconClickTrackingUrl: "Test string",
                    iconViewTrackingUrl: "Test string",
                    program: "Test string",
                    resourceUrl: "Test string",
                    size: {
                        height: 42,
                        iab: true,
                        id: "Test string",
                        kind: "Test string",
                        width: 42,
                    },
                    xPosition: "Test string",
                    yPosition: "Test string",
                },
                orientation: "Test string",
                skippableSettings: {
                    kind: "Test string",
                    progressOffset: {
                        offsetPercentage: 42,
                        offsetSeconds: 42,
                    },
                    skipOffset: {
                        offsetPercentage: 42,
                        offsetSeconds: 42,
                    },
                    skippable: true,
                },
                transcodeSettings: {
                    enabledVideoFormats: [
                        42                    ],
                    kind: "Test string",
                },
            },
        });
        /** Updates an existing site. */
        await gapi.client.dfareporting.sites.update({
            profileId: "Test string",
        }, {
            accountId: "Test string",
            approved: true,
            directorySiteId: "Test string",
            directorySiteIdDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            id: "Test string",
            idDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            keyName: "Test string",
            kind: "Test string",
            name: "Test string",
            siteContacts: [
                {
                    address: "Test string",
                    contactType: "Test string",
                    email: "Test string",
                    firstName: "Test string",
                    id: "Test string",
                    lastName: "Test string",
                    phone: "Test string",
                    title: "Test string",
                }            ],
            siteSettings: {
                activeViewOptOut: true,
                adBlockingOptOut: true,
                disableNewCookie: true,
                tagSetting: {
                    additionalKeyValues: "Test string",
                    includeClickThroughUrls: true,
                    includeClickTracking: true,
                    keywordOption: "Test string",
                },
                videoActiveViewOptOutTemplate: true,
                vpaidAdapterChoiceTemplate: "Test string",
            },
            subaccountId: "Test string",
            videoSettings: {
                companionSettings: {
                    companionsDisabled: true,
                    enabledSizes: [
                        {
                            height: 42,
                            iab: true,
                            id: "Test string",
                            kind: "Test string",
                            width: 42,
                        }                    ],
                    imageOnly: true,
                    kind: "Test string",
                },
                kind: "Test string",
                obaEnabled: true,
                obaSettings: {
                    iconClickThroughUrl: "Test string",
                    iconClickTrackingUrl: "Test string",
                    iconViewTrackingUrl: "Test string",
                    program: "Test string",
                    resourceUrl: "Test string",
                    size: {
                        height: 42,
                        iab: true,
                        id: "Test string",
                        kind: "Test string",
                        width: 42,
                    },
                    xPosition: "Test string",
                    yPosition: "Test string",
                },
                orientation: "Test string",
                skippableSettings: {
                    kind: "Test string",
                    progressOffset: {
                        offsetPercentage: 42,
                        offsetSeconds: 42,
                    },
                    skipOffset: {
                        offsetPercentage: 42,
                        offsetSeconds: 42,
                    },
                    skippable: true,
                },
                transcodeSettings: {
                    enabledVideoFormats: [
                        42                    ],
                    kind: "Test string",
                },
            },
        });
        /** Gets one size by ID. */
        await gapi.client.dfareporting.sizes.get({
            id: "Test string",
            profileId: "Test string",
        });
        /** Inserts a new size. */
        await gapi.client.dfareporting.sizes.insert({
            profileId: "Test string",
        }, {
            height: 42,
            iab: true,
            id: "Test string",
            kind: "Test string",
            width: 42,
        });
        /**
         * Retrieves a list of sizes, possibly filtered. Retrieved sizes are globally unique and may include values not currently in use by your account. Due to
         * this, the list of sizes returned by this method may differ from the list seen in the Trafficking UI.
         */
        await gapi.client.dfareporting.sizes.list({
            height: 42,
            iabStandard: true,
            ids: "Test string",
            profileId: "Test string",
            width: 42,
        });
        /** Gets one subaccount by ID. */
        await gapi.client.dfareporting.subaccounts.get({
            id: "Test string",
            profileId: "Test string",
        });
        /** Inserts a new subaccount. */
        await gapi.client.dfareporting.subaccounts.insert({
            profileId: "Test string",
        }, {
            accountId: "Test string",
            availablePermissionIds: [
                "Test string"            ],
            id: "Test string",
            kind: "Test string",
            name: "Test string",
        });
        /** Gets a list of subaccounts, possibly filtered. This method supports paging. */
        await gapi.client.dfareporting.subaccounts.list({
            ids: "Test string",
            maxResults: 42,
            pageToken: "Test string",
            profileId: "Test string",
            searchString: "Test string",
            sortField: "Test string",
            sortOrder: "Test string",
        });
        /** Updates an existing subaccount. This method supports patch semantics. */
        await gapi.client.dfareporting.subaccounts.patch({
            id: "Test string",
            profileId: "Test string",
        }, {
            accountId: "Test string",
            availablePermissionIds: [
                "Test string"            ],
            id: "Test string",
            kind: "Test string",
            name: "Test string",
        });
        /** Updates an existing subaccount. */
        await gapi.client.dfareporting.subaccounts.update({
            profileId: "Test string",
        }, {
            accountId: "Test string",
            availablePermissionIds: [
                "Test string"            ],
            id: "Test string",
            kind: "Test string",
            name: "Test string",
        });
        /** Gets one remarketing list by ID. */
        await gapi.client.dfareporting.targetableRemarketingLists.get({
            id: "Test string",
            profileId: "Test string",
        });
        /** Retrieves a list of targetable remarketing lists, possibly filtered. This method supports paging. */
        await gapi.client.dfareporting.targetableRemarketingLists.list({
            active: true,
            advertiserId: "Test string",
            maxResults: 42,
            name: "Test string",
            pageToken: "Test string",
            profileId: "Test string",
            sortField: "Test string",
            sortOrder: "Test string",
        });
        /** Gets one targeting template by ID. */
        await gapi.client.dfareporting.targetingTemplates.get({
            id: "Test string",
            profileId: "Test string",
        });
        /** Inserts a new targeting template. */
        await gapi.client.dfareporting.targetingTemplates.insert({
            profileId: "Test string",
        }, {
            accountId: "Test string",
            advertiserId: "Test string",
            advertiserIdDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            dayPartTargeting: {
                daysOfWeek: [
                    "Test string"                ],
                hoursOfDay: [
                    42                ],
                userLocalTime: true,
            },
            geoTargeting: {
                cities: [
                    {
                        countryCode: "Test string",
                        countryDartId: "Test string",
                        dartId: "Test string",
                        kind: "Test string",
                        metroCode: "Test string",
                        metroDmaId: "Test string",
                        name: "Test string",
                        regionCode: "Test string",
                        regionDartId: "Test string",
                    }                ],
                countries: [
                    {
                        countryCode: "Test string",
                        dartId: "Test string",
                        kind: "Test string",
                        name: "Test string",
                        sslEnabled: true,
                    }                ],
                excludeCountries: true,
                metros: [
                    {
                        countryCode: "Test string",
                        countryDartId: "Test string",
                        dartId: "Test string",
                        dmaId: "Test string",
                        kind: "Test string",
                        metroCode: "Test string",
                        name: "Test string",
                    }                ],
                postalCodes: [
                    {
                        code: "Test string",
                        countryCode: "Test string",
                        countryDartId: "Test string",
                        id: "Test string",
                        kind: "Test string",
                    }                ],
                regions: [
                    {
                        countryCode: "Test string",
                        countryDartId: "Test string",
                        dartId: "Test string",
                        kind: "Test string",
                        name: "Test string",
                        regionCode: "Test string",
                    }                ],
            },
            id: "Test string",
            keyValueTargetingExpression: {
                expression: "Test string",
            },
            kind: "Test string",
            languageTargeting: {
                languages: [
                    {
                        id: "Test string",
                        kind: "Test string",
                        languageCode: "Test string",
                        name: "Test string",
                    }                ],
            },
            listTargetingExpression: {
                expression: "Test string",
            },
            name: "Test string",
            subaccountId: "Test string",
            technologyTargeting: {
                browsers: [
                    {
                        browserVersionId: "Test string",
                        dartId: "Test string",
                        kind: "Test string",
                        majorVersion: "Test string",
                        minorVersion: "Test string",
                        name: "Test string",
                    }                ],
                connectionTypes: [
                    {
                        id: "Test string",
                        kind: "Test string",
                        name: "Test string",
                    }                ],
                mobileCarriers: [
                    {
                        countryCode: "Test string",
                        countryDartId: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        name: "Test string",
                    }                ],
                operatingSystems: [
                    {
                        dartId: "Test string",
                        desktop: true,
                        kind: "Test string",
                        mobile: true,
                        name: "Test string",
                    }                ],
                operatingSystemVersions: [
                    {
                        id: "Test string",
                        kind: "Test string",
                        majorVersion: "Test string",
                        minorVersion: "Test string",
                        name: "Test string",
                        operatingSystem: {
                            dartId: "Test string",
                            desktop: true,
                            kind: "Test string",
                            mobile: true,
                            name: "Test string",
                        },
                    }                ],
                platformTypes: [
                    {
                        id: "Test string",
                        kind: "Test string",
                        name: "Test string",
                    }                ],
            },
        });
        /** Retrieves a list of targeting templates, optionally filtered. This method supports paging. */
        await gapi.client.dfareporting.targetingTemplates.list({
            advertiserId: "Test string",
            ids: "Test string",
            maxResults: 42,
            pageToken: "Test string",
            profileId: "Test string",
            searchString: "Test string",
            sortField: "Test string",
            sortOrder: "Test string",
        });
        /** Updates an existing targeting template. This method supports patch semantics. */
        await gapi.client.dfareporting.targetingTemplates.patch({
            id: "Test string",
            profileId: "Test string",
        }, {
            accountId: "Test string",
            advertiserId: "Test string",
            advertiserIdDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            dayPartTargeting: {
                daysOfWeek: [
                    "Test string"                ],
                hoursOfDay: [
                    42                ],
                userLocalTime: true,
            },
            geoTargeting: {
                cities: [
                    {
                        countryCode: "Test string",
                        countryDartId: "Test string",
                        dartId: "Test string",
                        kind: "Test string",
                        metroCode: "Test string",
                        metroDmaId: "Test string",
                        name: "Test string",
                        regionCode: "Test string",
                        regionDartId: "Test string",
                    }                ],
                countries: [
                    {
                        countryCode: "Test string",
                        dartId: "Test string",
                        kind: "Test string",
                        name: "Test string",
                        sslEnabled: true,
                    }                ],
                excludeCountries: true,
                metros: [
                    {
                        countryCode: "Test string",
                        countryDartId: "Test string",
                        dartId: "Test string",
                        dmaId: "Test string",
                        kind: "Test string",
                        metroCode: "Test string",
                        name: "Test string",
                    }                ],
                postalCodes: [
                    {
                        code: "Test string",
                        countryCode: "Test string",
                        countryDartId: "Test string",
                        id: "Test string",
                        kind: "Test string",
                    }                ],
                regions: [
                    {
                        countryCode: "Test string",
                        countryDartId: "Test string",
                        dartId: "Test string",
                        kind: "Test string",
                        name: "Test string",
                        regionCode: "Test string",
                    }                ],
            },
            id: "Test string",
            keyValueTargetingExpression: {
                expression: "Test string",
            },
            kind: "Test string",
            languageTargeting: {
                languages: [
                    {
                        id: "Test string",
                        kind: "Test string",
                        languageCode: "Test string",
                        name: "Test string",
                    }                ],
            },
            listTargetingExpression: {
                expression: "Test string",
            },
            name: "Test string",
            subaccountId: "Test string",
            technologyTargeting: {
                browsers: [
                    {
                        browserVersionId: "Test string",
                        dartId: "Test string",
                        kind: "Test string",
                        majorVersion: "Test string",
                        minorVersion: "Test string",
                        name: "Test string",
                    }                ],
                connectionTypes: [
                    {
                        id: "Test string",
                        kind: "Test string",
                        name: "Test string",
                    }                ],
                mobileCarriers: [
                    {
                        countryCode: "Test string",
                        countryDartId: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        name: "Test string",
                    }                ],
                operatingSystems: [
                    {
                        dartId: "Test string",
                        desktop: true,
                        kind: "Test string",
                        mobile: true,
                        name: "Test string",
                    }                ],
                operatingSystemVersions: [
                    {
                        id: "Test string",
                        kind: "Test string",
                        majorVersion: "Test string",
                        minorVersion: "Test string",
                        name: "Test string",
                        operatingSystem: {
                            dartId: "Test string",
                            desktop: true,
                            kind: "Test string",
                            mobile: true,
                            name: "Test string",
                        },
                    }                ],
                platformTypes: [
                    {
                        id: "Test string",
                        kind: "Test string",
                        name: "Test string",
                    }                ],
            },
        });
        /** Updates an existing targeting template. */
        await gapi.client.dfareporting.targetingTemplates.update({
            profileId: "Test string",
        }, {
            accountId: "Test string",
            advertiserId: "Test string",
            advertiserIdDimensionValue: {
                dimensionName: "Test string",
                etag: "Test string",
                id: "Test string",
                kind: "Test string",
                matchType: "Test string",
                value: "Test string",
            },
            dayPartTargeting: {
                daysOfWeek: [
                    "Test string"                ],
                hoursOfDay: [
                    42                ],
                userLocalTime: true,
            },
            geoTargeting: {
                cities: [
                    {
                        countryCode: "Test string",
                        countryDartId: "Test string",
                        dartId: "Test string",
                        kind: "Test string",
                        metroCode: "Test string",
                        metroDmaId: "Test string",
                        name: "Test string",
                        regionCode: "Test string",
                        regionDartId: "Test string",
                    }                ],
                countries: [
                    {
                        countryCode: "Test string",
                        dartId: "Test string",
                        kind: "Test string",
                        name: "Test string",
                        sslEnabled: true,
                    }                ],
                excludeCountries: true,
                metros: [
                    {
                        countryCode: "Test string",
                        countryDartId: "Test string",
                        dartId: "Test string",
                        dmaId: "Test string",
                        kind: "Test string",
                        metroCode: "Test string",
                        name: "Test string",
                    }                ],
                postalCodes: [
                    {
                        code: "Test string",
                        countryCode: "Test string",
                        countryDartId: "Test string",
                        id: "Test string",
                        kind: "Test string",
                    }                ],
                regions: [
                    {
                        countryCode: "Test string",
                        countryDartId: "Test string",
                        dartId: "Test string",
                        kind: "Test string",
                        name: "Test string",
                        regionCode: "Test string",
                    }                ],
            },
            id: "Test string",
            keyValueTargetingExpression: {
                expression: "Test string",
            },
            kind: "Test string",
            languageTargeting: {
                languages: [
                    {
                        id: "Test string",
                        kind: "Test string",
                        languageCode: "Test string",
                        name: "Test string",
                    }                ],
            },
            listTargetingExpression: {
                expression: "Test string",
            },
            name: "Test string",
            subaccountId: "Test string",
            technologyTargeting: {
                browsers: [
                    {
                        browserVersionId: "Test string",
                        dartId: "Test string",
                        kind: "Test string",
                        majorVersion: "Test string",
                        minorVersion: "Test string",
                        name: "Test string",
                    }                ],
                connectionTypes: [
                    {
                        id: "Test string",
                        kind: "Test string",
                        name: "Test string",
                    }                ],
                mobileCarriers: [
                    {
                        countryCode: "Test string",
                        countryDartId: "Test string",
                        id: "Test string",
                        kind: "Test string",
                        name: "Test string",
                    }                ],
                operatingSystems: [
                    {
                        dartId: "Test string",
                        desktop: true,
                        kind: "Test string",
                        mobile: true,
                        name: "Test string",
                    }                ],
                operatingSystemVersions: [
                    {
                        id: "Test string",
                        kind: "Test string",
                        majorVersion: "Test string",
                        minorVersion: "Test string",
                        name: "Test string",
                        operatingSystem: {
                            dartId: "Test string",
                            desktop: true,
                            kind: "Test string",
                            mobile: true,
                            name: "Test string",
                        },
                    }                ],
                platformTypes: [
                    {
                        id: "Test string",
                        kind: "Test string",
                        name: "Test string",
                    }                ],
            },
        });
        /** Gets one user profile by ID. */
        await gapi.client.dfareporting.userProfiles.get({
            profileId: "Test string",
        });
        /** Retrieves list of user profiles for a user. */
        await gapi.client.dfareporting.userProfiles.list();
        /** Gets one user role permission group by ID. */
        await gapi.client.dfareporting.userRolePermissionGroups.get({
            id: "Test string",
            profileId: "Test string",
        });
        /** Gets a list of all supported user role permission groups. */
        await gapi.client.dfareporting.userRolePermissionGroups.list({
            profileId: "Test string",
        });
        /** Gets one user role permission by ID. */
        await gapi.client.dfareporting.userRolePermissions.get({
            id: "Test string",
            profileId: "Test string",
        });
        /** Gets a list of user role permissions, possibly filtered. */
        await gapi.client.dfareporting.userRolePermissions.list({
            ids: "Test string",
            profileId: "Test string",
        });
        /** Deletes an existing user role. */
        await gapi.client.dfareporting.userRoles.delete({
            id: "Test string",
            profileId: "Test string",
        });
        /** Gets one user role by ID. */
        await gapi.client.dfareporting.userRoles.get({
            id: "Test string",
            profileId: "Test string",
        });
        /** Inserts a new user role. */
        await gapi.client.dfareporting.userRoles.insert({
            profileId: "Test string",
        }, {
            accountId: "Test string",
            defaultUserRole: true,
            id: "Test string",
            kind: "Test string",
            name: "Test string",
            parentUserRoleId: "Test string",
            permissions: [
                {
                    availability: "Test string",
                    id: "Test string",
                    kind: "Test string",
                    name: "Test string",
                    permissionGroupId: "Test string",
                }            ],
            subaccountId: "Test string",
        });
        /** Retrieves a list of user roles, possibly filtered. This method supports paging. */
        await gapi.client.dfareporting.userRoles.list({
            accountUserRoleOnly: true,
            ids: "Test string",
            maxResults: 42,
            pageToken: "Test string",
            profileId: "Test string",
            searchString: "Test string",
            sortField: "Test string",
            sortOrder: "Test string",
            subaccountId: "Test string",
        });
        /** Updates an existing user role. This method supports patch semantics. */
        await gapi.client.dfareporting.userRoles.patch({
            id: "Test string",
            profileId: "Test string",
        }, {
            accountId: "Test string",
            defaultUserRole: true,
            id: "Test string",
            kind: "Test string",
            name: "Test string",
            parentUserRoleId: "Test string",
            permissions: [
                {
                    availability: "Test string",
                    id: "Test string",
                    kind: "Test string",
                    name: "Test string",
                    permissionGroupId: "Test string",
                }            ],
            subaccountId: "Test string",
        });
        /** Updates an existing user role. */
        await gapi.client.dfareporting.userRoles.update({
            profileId: "Test string",
        }, {
            accountId: "Test string",
            defaultUserRole: true,
            id: "Test string",
            kind: "Test string",
            name: "Test string",
            parentUserRoleId: "Test string",
            permissions: [
                {
                    availability: "Test string",
                    id: "Test string",
                    kind: "Test string",
                    name: "Test string",
                    permissionGroupId: "Test string",
                }            ],
            subaccountId: "Test string",
        });
        /** Gets one video format by ID. */
        await gapi.client.dfareporting.videoFormats.get({
            id: 42,
            profileId: "Test string",
        });
        /** Lists available video formats. */
        await gapi.client.dfareporting.videoFormats.list({
            profileId: "Test string",
        });
    }
});
