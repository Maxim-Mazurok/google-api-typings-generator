/* This is stub file for gapi.client.securityposture-v1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20241212

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://securityposture.googleapis.com/$discovery/rest?version=v1',
  );
  /** now we can use gapi.client.securityposture */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
    'https://www.googleapis.com/auth/cloud-platform',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of `1`, corresponding to `Code.CANCELLED`. */
    await gapi.client.securityposture.organizations.locations.operations.cancel(
      {
        name: 'Test string',
      },
      {},
    );
    /** Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. */
    await gapi.client.securityposture.organizations.locations.operations.delete(
      {
        name: 'Test string',
      },
    );
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.securityposture.organizations.locations.operations.get({
      name: 'Test string',
    });
    /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
    await gapi.client.securityposture.organizations.locations.operations.list({
      filter: 'Test string',
      name: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Creates a new PostureDeployment in a given project and location. */
    await gapi.client.securityposture.organizations.locations.postureDeployments.create(
      {
        parent: 'Test string',
        postureDeploymentId: 'Test string',
      },
      {
        annotations: {
          A: 'Test string',
        },
        categories: ['Test string'],
        createTime: 'Test string',
        description: 'Test string',
        desiredPostureId: 'Test string',
        desiredPostureRevisionId: 'Test string',
        etag: 'Test string',
        failureMessage: 'Test string',
        name: 'Test string',
        postureId: 'Test string',
        postureRevisionId: 'Test string',
        reconciling: true,
        state: 'Test string',
        targetResource: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Deletes a PostureDeployment. */
    await gapi.client.securityposture.organizations.locations.postureDeployments.delete(
      {
        etag: 'Test string',
        name: 'Test string',
      },
    );
    /** Gets details for a PostureDeployment. */
    await gapi.client.securityposture.organizations.locations.postureDeployments.get(
      {
        name: 'Test string',
      },
    );
    /** Lists every PostureDeployment in a project and location. */
    await gapi.client.securityposture.organizations.locations.postureDeployments.list(
      {
        filter: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
    /** Updates an existing PostureDeployment. To prevent concurrent updates from overwriting each other, always follow the read-modify-write pattern when you update a posture deployment: 1. Call GetPostureDeployment to get the current version of the deployment. 2. Update the fields in the deployment as needed. 3. Call UpdatePostureDeployment to update the deployment. Ensure that your request includes the `etag` value from the GetPostureDeployment response. **Important:** If you omit the `etag` when you call UpdatePostureDeployment, then the updated deployment unconditionally overwrites the existing deployment. */
    await gapi.client.securityposture.organizations.locations.postureDeployments.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        annotations: {
          A: 'Test string',
        },
        categories: ['Test string'],
        createTime: 'Test string',
        description: 'Test string',
        desiredPostureId: 'Test string',
        desiredPostureRevisionId: 'Test string',
        etag: 'Test string',
        failureMessage: 'Test string',
        name: 'Test string',
        postureId: 'Test string',
        postureRevisionId: 'Test string',
        reconciling: true,
        state: 'Test string',
        targetResource: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Creates a new Posture. */
    await gapi.client.securityposture.organizations.locations.postures.create(
      {
        parent: 'Test string',
        postureId: 'Test string',
      },
      {
        annotations: {
          A: 'Test string',
        },
        categories: ['Test string'],
        createTime: 'Test string',
        description: 'Test string',
        etag: 'Test string',
        name: 'Test string',
        policySets: [
          {
            description: 'Test string',
            policies: [
              {
                complianceStandards: [
                  {
                    control: 'Test string',
                    standard: 'Test string',
                  },
                ],
                constraint: {
                  orgPolicyConstraint: {
                    cannedConstraintId: 'Test string',
                    policyRules: [
                      {
                        allowAll: true,
                        condition: {
                          description: 'Test string',
                          expression: 'Test string',
                          location: 'Test string',
                          title: 'Test string',
                        },
                        denyAll: true,
                        enforce: true,
                        parameters: {
                          A: 42,
                        },
                        resourceTypes: {
                          included: ['Test string'],
                        },
                        values: {
                          allowedValues: ['Test string'],
                          deniedValues: ['Test string'],
                        },
                      },
                    ],
                  },
                  orgPolicyConstraintCustom: {
                    customConstraint: {
                      actionType: 'Test string',
                      condition: 'Test string',
                      description: 'Test string',
                      displayName: 'Test string',
                      methodTypes: ['Test string'],
                      name: 'Test string',
                      resourceTypes: ['Test string'],
                      updateTime: 'Test string',
                    },
                    policyRules: [
                      {
                        allowAll: true,
                        condition: {
                          description: 'Test string',
                          expression: 'Test string',
                          location: 'Test string',
                          title: 'Test string',
                        },
                        denyAll: true,
                        enforce: true,
                        parameters: {
                          A: 42,
                        },
                        resourceTypes: {
                          included: ['Test string'],
                        },
                        values: {
                          allowedValues: ['Test string'],
                          deniedValues: ['Test string'],
                        },
                      },
                    ],
                  },
                  securityHealthAnalyticsCustomModule: {
                    config: {
                      customOutput: {
                        properties: [
                          {
                            name: 'Test string',
                            valueExpression: {
                              description: 'Test string',
                              expression: 'Test string',
                              location: 'Test string',
                              title: 'Test string',
                            },
                          },
                        ],
                      },
                      description: 'Test string',
                      predicate: {
                        description: 'Test string',
                        expression: 'Test string',
                        location: 'Test string',
                        title: 'Test string',
                      },
                      recommendation: 'Test string',
                      resourceSelector: {
                        resourceTypes: ['Test string'],
                      },
                      severity: 'Test string',
                    },
                    displayName: 'Test string',
                    id: 'Test string',
                    moduleEnablementState: 'Test string',
                  },
                  securityHealthAnalyticsModule: {
                    moduleEnablementState: 'Test string',
                    moduleName: 'Test string',
                  },
                },
                description: 'Test string',
                policyId: 'Test string',
              },
            ],
            policySetId: 'Test string',
          },
        ],
        reconciling: true,
        revisionId: 'Test string',
        state: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Deletes all revisions of a Posture. You can only delete a posture if none of its revisions are deployed. */
    await gapi.client.securityposture.organizations.locations.postures.delete({
      etag: 'Test string',
      name: 'Test string',
    });
    /** Extracts existing policies from an organization, folder, or project, and applies them to another organization, folder, or project as a Posture. If the other organization, folder, or project already has a posture, then the result of the long-running operation is an ALREADY_EXISTS error. */
    await gapi.client.securityposture.organizations.locations.postures.extract(
      {
        parent: 'Test string',
      },
      {
        postureId: 'Test string',
        workload: 'Test string',
      },
    );
    /** Gets a single revision of a Posture. */
    await gapi.client.securityposture.organizations.locations.postures.get({
      name: 'Test string',
      revisionId: 'Test string',
    });
    /** Lists the most recent revisions of all Posture resources in a specified organization and location. */
    await gapi.client.securityposture.organizations.locations.postures.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Lists all revisions of a single Posture. */
    await gapi.client.securityposture.organizations.locations.postures.listRevisions(
      {
        name: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
      },
    );
    /** Updates a revision of an existing Posture. If the posture revision that you update is currently deployed, then a new revision of the posture is created. To prevent concurrent updates from overwriting each other, always follow the read-modify-write pattern when you update a posture: 1. Call GetPosture to get the current version of the posture. 2. Update the fields in the posture as needed. 3. Call UpdatePosture to update the posture. Ensure that your request includes the `etag` value from the GetPosture response. **Important:** If you omit the `etag` when you call UpdatePosture, then the updated posture unconditionally overwrites the existing posture. */
    await gapi.client.securityposture.organizations.locations.postures.patch(
      {
        name: 'Test string',
        revisionId: 'Test string',
        updateMask: 'Test string',
      },
      {
        annotations: {
          A: 'Test string',
        },
        categories: ['Test string'],
        createTime: 'Test string',
        description: 'Test string',
        etag: 'Test string',
        name: 'Test string',
        policySets: [
          {
            description: 'Test string',
            policies: [
              {
                complianceStandards: [
                  {
                    control: 'Test string',
                    standard: 'Test string',
                  },
                ],
                constraint: {
                  orgPolicyConstraint: {
                    cannedConstraintId: 'Test string',
                    policyRules: [
                      {
                        allowAll: true,
                        condition: {
                          description: 'Test string',
                          expression: 'Test string',
                          location: 'Test string',
                          title: 'Test string',
                        },
                        denyAll: true,
                        enforce: true,
                        parameters: {
                          A: 42,
                        },
                        resourceTypes: {
                          included: ['Test string'],
                        },
                        values: {
                          allowedValues: ['Test string'],
                          deniedValues: ['Test string'],
                        },
                      },
                    ],
                  },
                  orgPolicyConstraintCustom: {
                    customConstraint: {
                      actionType: 'Test string',
                      condition: 'Test string',
                      description: 'Test string',
                      displayName: 'Test string',
                      methodTypes: ['Test string'],
                      name: 'Test string',
                      resourceTypes: ['Test string'],
                      updateTime: 'Test string',
                    },
                    policyRules: [
                      {
                        allowAll: true,
                        condition: {
                          description: 'Test string',
                          expression: 'Test string',
                          location: 'Test string',
                          title: 'Test string',
                        },
                        denyAll: true,
                        enforce: true,
                        parameters: {
                          A: 42,
                        },
                        resourceTypes: {
                          included: ['Test string'],
                        },
                        values: {
                          allowedValues: ['Test string'],
                          deniedValues: ['Test string'],
                        },
                      },
                    ],
                  },
                  securityHealthAnalyticsCustomModule: {
                    config: {
                      customOutput: {
                        properties: [
                          {
                            name: 'Test string',
                            valueExpression: {
                              description: 'Test string',
                              expression: 'Test string',
                              location: 'Test string',
                              title: 'Test string',
                            },
                          },
                        ],
                      },
                      description: 'Test string',
                      predicate: {
                        description: 'Test string',
                        expression: 'Test string',
                        location: 'Test string',
                        title: 'Test string',
                      },
                      recommendation: 'Test string',
                      resourceSelector: {
                        resourceTypes: ['Test string'],
                      },
                      severity: 'Test string',
                    },
                    displayName: 'Test string',
                    id: 'Test string',
                    moduleEnablementState: 'Test string',
                  },
                  securityHealthAnalyticsModule: {
                    moduleEnablementState: 'Test string',
                    moduleName: 'Test string',
                  },
                },
                description: 'Test string',
                policyId: 'Test string',
              },
            ],
            policySetId: 'Test string',
          },
        ],
        reconciling: true,
        revisionId: 'Test string',
        state: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Gets a single revision of a PostureTemplate. */
    await gapi.client.securityposture.organizations.locations.postureTemplates.get(
      {
        name: 'Test string',
        revisionId: 'Test string',
      },
    );
    /** Lists every PostureTemplate in a given organization and location. */
    await gapi.client.securityposture.organizations.locations.postureTemplates.list(
      {
        filter: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
    /** Validates a specified infrastructure-as-code (IaC) configuration, and creates a Report with the validation results. Only Terraform configurations are supported. Only modified assets are validated. */
    await gapi.client.securityposture.organizations.locations.reports.createIaCValidationReport(
      {
        parent: 'Test string',
      },
      {
        iac: {
          tfPlan: 'Test string',
        },
      },
    );
    /** Gets details for a Report. */
    await gapi.client.securityposture.organizations.locations.reports.get({
      name: 'Test string',
    });
    /** Lists every Report in a given organization and location. */
    await gapi.client.securityposture.organizations.locations.reports.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Gets information about a location. */
    await gapi.client.securityposture.projects.locations.get({
      name: 'Test string',
    });
    /** Lists information about the supported locations for this service. */
    await gapi.client.securityposture.projects.locations.list({
      filter: 'Test string',
      name: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
  }
});
