/* This is stub file for gapi.client.logging definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20210521

gapi.load('client', () => {
    /** now we can use gapi.client */
    gapi.client.load('logging', 'v2', () => {
        /** now we can use gapi.client.logging */

        /** don't forget to authenticate your client before sending any request to resources: */
        /** declare client_id registered in Google Developers Console */
        const client_id = '<<PUT YOUR CLIENT ID HERE>>';
        const scope = [
            /** See, edit, configure, and delete your Google Cloud Platform data */
            'https://www.googleapis.com/auth/cloud-platform',
            /** View your data across Google Cloud Platform services */
            'https://www.googleapis.com/auth/cloud-platform.read-only',
            /** Administrate log data for your projects */
            'https://www.googleapis.com/auth/logging.admin',
            /** View log data for your projects */
            'https://www.googleapis.com/auth/logging.read',
            /** Submit log data for your projects */
            'https://www.googleapis.com/auth/logging.write',
        ];
        const immediate = false;
        gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
            if (authResult && !authResult.error) {
                /** handle successful authorization */
                run();
            } else {
                /** handle authorization error */
            }
        });
    });

    async function run() {
        /**
         * Lists log entries. Use this method to retrieve log entries that originated from a project/folder/organization/billing account. For ways to export log entries, see Exporting Logs
         * (https://cloud.google.com/logging/docs/export).
         */
        await gapi.client.logging.entries.list({
        }, {
            filter: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            projectIds: [
                "Test string"            ],
            resourceNames: [
                "Test string"            ],
        });
        /** Streaming read of log entries as they are ingested. Until the stream is terminated, it will continue reading logs. */
        await gapi.client.logging.entries.tail({
        }, {
            bufferWindow: "Test string",
            filter: "Test string",
            resourceNames: [
                "Test string"            ],
        });
        /**
         * Writes log entries to Logging. This API method is the only way to send log entries to Logging. This method is used, directly or indirectly, by the Logging agent (fluentd) and all
         * logging libraries configured to use Logging. A single request may contain log entries for a maximum of 1000 different resources (projects, organizations, billing accounts or folders)
         */
        await gapi.client.logging.entries.write({
        }, {
            dryRun: true,
            entries: [
                {
                    httpRequest: {
                        cacheFillBytes: "Test string",
                        cacheHit: true,
                        cacheLookup: true,
                        cacheValidatedWithOriginServer: true,
                        latency: "Test string",
                        protocol: "Test string",
                        referer: "Test string",
                        remoteIp: "Test string",
                        requestMethod: "Test string",
                        requestSize: "Test string",
                        requestUrl: "Test string",
                        responseSize: "Test string",
                        serverIp: "Test string",
                        status: 42,
                        userAgent: "Test string",
                    },
                    insertId: "Test string",
                    jsonPayload: {
                        A: 42                    },
                    labels: {
                        A: "Test string"                    },
                    logName: "Test string",
                    metadata: {
                        systemLabels: {
                            A: 42                        },
                        userLabels: {
                            A: "Test string"                        },
                    },
                    operation: {
                        first: true,
                        id: "Test string",
                        last: true,
                        producer: "Test string",
                    },
                    protoPayload: {
                        A: 42                    },
                    receiveTimestamp: "Test string",
                    resource: {
                        labels: {
                            A: "Test string"                        },
                        type: "Test string",
                    },
                    severity: "Test string",
                    sourceLocation: {
                        file: "Test string",
                        function: "Test string",
                        line: "Test string",
                    },
                    spanId: "Test string",
                    textPayload: "Test string",
                    timestamp: "Test string",
                    trace: "Test string",
                    traceSampled: true,
                }            ],
            labels: {
                A: "Test string"            },
            logName: "Test string",
            partialSuccess: true,
            resource: {
                labels: {
                    A: "Test string"                },
                type: "Test string",
            },
        });
        /** Creates a new exclusion in a specified parent resource. Only log entries belonging to that resource can be excluded. You can have up to 10 exclusions in a resource. */
        await gapi.client.logging.exclusions.create({
            parent: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            disabled: true,
            filter: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Deletes an exclusion. */
        await gapi.client.logging.exclusions.delete({
            name: "Test string",
        });
        /** Gets the description of an exclusion. */
        await gapi.client.logging.exclusions.get({
            name: "Test string",
        });
        /** Lists all the exclusions in a parent resource. */
        await gapi.client.logging.exclusions.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Changes one or more properties of an existing exclusion. */
        await gapi.client.logging.exclusions.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            disabled: true,
            filter: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Gets information about a location. */
        await gapi.client.logging.locations.get({
            name: "Test string",
        });
        /** Creates a bucket that can be used to store log entries. Once a bucket has been created, the region cannot be changed. */
        await gapi.client.logging.locations.buckets.create({
            bucketId: "Test string",
            parent: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            lifecycleState: "Test string",
            locked: true,
            name: "Test string",
            restrictedFields: [
                "Test string"            ],
            retentionDays: 42,
            updateTime: "Test string",
        });
        /** Creates a view over logs in a bucket. A bucket may contain a maximum of 50 views. */
        await gapi.client.logging.locations.buckets.views.create({
            parent: "Test string",
            viewId: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            filter: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Deletes a view from a bucket. */
        await gapi.client.logging.locations.buckets.views.delete({
            name: "Test string",
        });
        /** Gets a view. */
        await gapi.client.logging.locations.buckets.views.get({
            name: "Test string",
        });
        /** Lists views on a bucket. */
        await gapi.client.logging.locations.buckets.views.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a view. This method replaces the following fields in the existing view with values from the new view: filter. */
        await gapi.client.logging.locations.buckets.views.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            filter: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Deletes a bucket. Moves the bucket to the DELETE_REQUESTED state. After 7 days, the bucket will be purged and all logs in the bucket will be permanently deleted. */
        await gapi.client.logging.locations.buckets.delete({
            name: "Test string",
        });
        /** Creates a view over logs in a bucket. A bucket may contain a maximum of 50 views. */
        await gapi.client.logging.locations.buckets.views.create({
            parent: "Test string",
            viewId: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            filter: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Deletes a view from a bucket. */
        await gapi.client.logging.locations.buckets.views.delete({
            name: "Test string",
        });
        /** Gets a view. */
        await gapi.client.logging.locations.buckets.views.get({
            name: "Test string",
        });
        /** Lists views on a bucket. */
        await gapi.client.logging.locations.buckets.views.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a view. This method replaces the following fields in the existing view with values from the new view: filter. */
        await gapi.client.logging.locations.buckets.views.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            filter: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Gets a bucket. */
        await gapi.client.logging.locations.buckets.get({
            name: "Test string",
        });
        /** Creates a view over logs in a bucket. A bucket may contain a maximum of 50 views. */
        await gapi.client.logging.locations.buckets.views.create({
            parent: "Test string",
            viewId: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            filter: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Deletes a view from a bucket. */
        await gapi.client.logging.locations.buckets.views.delete({
            name: "Test string",
        });
        /** Gets a view. */
        await gapi.client.logging.locations.buckets.views.get({
            name: "Test string",
        });
        /** Lists views on a bucket. */
        await gapi.client.logging.locations.buckets.views.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a view. This method replaces the following fields in the existing view with values from the new view: filter. */
        await gapi.client.logging.locations.buckets.views.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            filter: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Lists buckets. */
        await gapi.client.logging.locations.buckets.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Creates a view over logs in a bucket. A bucket may contain a maximum of 50 views. */
        await gapi.client.logging.locations.buckets.views.create({
            parent: "Test string",
            viewId: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            filter: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Deletes a view from a bucket. */
        await gapi.client.logging.locations.buckets.views.delete({
            name: "Test string",
        });
        /** Gets a view. */
        await gapi.client.logging.locations.buckets.views.get({
            name: "Test string",
        });
        /** Lists views on a bucket. */
        await gapi.client.logging.locations.buckets.views.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a view. This method replaces the following fields in the existing view with values from the new view: filter. */
        await gapi.client.logging.locations.buckets.views.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            filter: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /**
         * Updates a bucket. This method replaces the following fields in the existing bucket with values from the new bucket: retention_periodIf the retention period is decreased and the bucket
         * is locked, FAILED_PRECONDITION will be returned.If the bucket has a LifecycleState of DELETE_REQUESTED, FAILED_PRECONDITION will be returned.A buckets region may not be modified after
         * it is created.
         */
        await gapi.client.logging.locations.buckets.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            lifecycleState: "Test string",
            locked: true,
            name: "Test string",
            restrictedFields: [
                "Test string"            ],
            retentionDays: 42,
            updateTime: "Test string",
        });
        /** Creates a view over logs in a bucket. A bucket may contain a maximum of 50 views. */
        await gapi.client.logging.locations.buckets.views.create({
            parent: "Test string",
            viewId: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            filter: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Deletes a view from a bucket. */
        await gapi.client.logging.locations.buckets.views.delete({
            name: "Test string",
        });
        /** Gets a view. */
        await gapi.client.logging.locations.buckets.views.get({
            name: "Test string",
        });
        /** Lists views on a bucket. */
        await gapi.client.logging.locations.buckets.views.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a view. This method replaces the following fields in the existing view with values from the new view: filter. */
        await gapi.client.logging.locations.buckets.views.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            filter: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Undeletes a bucket. A bucket that has been deleted may be undeleted within the grace period of 7 days. */
        await gapi.client.logging.locations.buckets.undelete({
            name: "Test string",
        }, {
        });
        /** Creates a view over logs in a bucket. A bucket may contain a maximum of 50 views. */
        await gapi.client.logging.locations.buckets.views.create({
            parent: "Test string",
            viewId: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            filter: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Deletes a view from a bucket. */
        await gapi.client.logging.locations.buckets.views.delete({
            name: "Test string",
        });
        /** Gets a view. */
        await gapi.client.logging.locations.buckets.views.get({
            name: "Test string",
        });
        /** Lists views on a bucket. */
        await gapi.client.logging.locations.buckets.views.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a view. This method replaces the following fields in the existing view with values from the new view: filter. */
        await gapi.client.logging.locations.buckets.views.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            filter: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Lists information about the supported locations for this service. */
        await gapi.client.logging.locations.list({
            filter: "Test string",
            name: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Creates a bucket that can be used to store log entries. Once a bucket has been created, the region cannot be changed. */
        await gapi.client.logging.locations.buckets.create({
            bucketId: "Test string",
            parent: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            lifecycleState: "Test string",
            locked: true,
            name: "Test string",
            restrictedFields: [
                "Test string"            ],
            retentionDays: 42,
            updateTime: "Test string",
        });
        /** Creates a view over logs in a bucket. A bucket may contain a maximum of 50 views. */
        await gapi.client.logging.locations.buckets.views.create({
            parent: "Test string",
            viewId: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            filter: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Deletes a view from a bucket. */
        await gapi.client.logging.locations.buckets.views.delete({
            name: "Test string",
        });
        /** Gets a view. */
        await gapi.client.logging.locations.buckets.views.get({
            name: "Test string",
        });
        /** Lists views on a bucket. */
        await gapi.client.logging.locations.buckets.views.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a view. This method replaces the following fields in the existing view with values from the new view: filter. */
        await gapi.client.logging.locations.buckets.views.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            filter: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Deletes a bucket. Moves the bucket to the DELETE_REQUESTED state. After 7 days, the bucket will be purged and all logs in the bucket will be permanently deleted. */
        await gapi.client.logging.locations.buckets.delete({
            name: "Test string",
        });
        /** Creates a view over logs in a bucket. A bucket may contain a maximum of 50 views. */
        await gapi.client.logging.locations.buckets.views.create({
            parent: "Test string",
            viewId: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            filter: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Deletes a view from a bucket. */
        await gapi.client.logging.locations.buckets.views.delete({
            name: "Test string",
        });
        /** Gets a view. */
        await gapi.client.logging.locations.buckets.views.get({
            name: "Test string",
        });
        /** Lists views on a bucket. */
        await gapi.client.logging.locations.buckets.views.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a view. This method replaces the following fields in the existing view with values from the new view: filter. */
        await gapi.client.logging.locations.buckets.views.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            filter: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Gets a bucket. */
        await gapi.client.logging.locations.buckets.get({
            name: "Test string",
        });
        /** Creates a view over logs in a bucket. A bucket may contain a maximum of 50 views. */
        await gapi.client.logging.locations.buckets.views.create({
            parent: "Test string",
            viewId: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            filter: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Deletes a view from a bucket. */
        await gapi.client.logging.locations.buckets.views.delete({
            name: "Test string",
        });
        /** Gets a view. */
        await gapi.client.logging.locations.buckets.views.get({
            name: "Test string",
        });
        /** Lists views on a bucket. */
        await gapi.client.logging.locations.buckets.views.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a view. This method replaces the following fields in the existing view with values from the new view: filter. */
        await gapi.client.logging.locations.buckets.views.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            filter: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Lists buckets. */
        await gapi.client.logging.locations.buckets.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Creates a view over logs in a bucket. A bucket may contain a maximum of 50 views. */
        await gapi.client.logging.locations.buckets.views.create({
            parent: "Test string",
            viewId: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            filter: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Deletes a view from a bucket. */
        await gapi.client.logging.locations.buckets.views.delete({
            name: "Test string",
        });
        /** Gets a view. */
        await gapi.client.logging.locations.buckets.views.get({
            name: "Test string",
        });
        /** Lists views on a bucket. */
        await gapi.client.logging.locations.buckets.views.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a view. This method replaces the following fields in the existing view with values from the new view: filter. */
        await gapi.client.logging.locations.buckets.views.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            filter: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /**
         * Updates a bucket. This method replaces the following fields in the existing bucket with values from the new bucket: retention_periodIf the retention period is decreased and the bucket
         * is locked, FAILED_PRECONDITION will be returned.If the bucket has a LifecycleState of DELETE_REQUESTED, FAILED_PRECONDITION will be returned.A buckets region may not be modified after
         * it is created.
         */
        await gapi.client.logging.locations.buckets.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            lifecycleState: "Test string",
            locked: true,
            name: "Test string",
            restrictedFields: [
                "Test string"            ],
            retentionDays: 42,
            updateTime: "Test string",
        });
        /** Creates a view over logs in a bucket. A bucket may contain a maximum of 50 views. */
        await gapi.client.logging.locations.buckets.views.create({
            parent: "Test string",
            viewId: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            filter: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Deletes a view from a bucket. */
        await gapi.client.logging.locations.buckets.views.delete({
            name: "Test string",
        });
        /** Gets a view. */
        await gapi.client.logging.locations.buckets.views.get({
            name: "Test string",
        });
        /** Lists views on a bucket. */
        await gapi.client.logging.locations.buckets.views.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a view. This method replaces the following fields in the existing view with values from the new view: filter. */
        await gapi.client.logging.locations.buckets.views.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            filter: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Undeletes a bucket. A bucket that has been deleted may be undeleted within the grace period of 7 days. */
        await gapi.client.logging.locations.buckets.undelete({
            name: "Test string",
        }, {
        });
        /** Creates a view over logs in a bucket. A bucket may contain a maximum of 50 views. */
        await gapi.client.logging.locations.buckets.views.create({
            parent: "Test string",
            viewId: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            filter: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Deletes a view from a bucket. */
        await gapi.client.logging.locations.buckets.views.delete({
            name: "Test string",
        });
        /** Gets a view. */
        await gapi.client.logging.locations.buckets.views.get({
            name: "Test string",
        });
        /** Lists views on a bucket. */
        await gapi.client.logging.locations.buckets.views.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a view. This method replaces the following fields in the existing view with values from the new view: filter. */
        await gapi.client.logging.locations.buckets.views.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            filter: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /**
         * Deletes all the log entries in a log for the _Default Log Bucket. The log reappears if it receives new entries. Log entries written shortly before the delete operation might not be
         * deleted. Entries received after the delete operation with a timestamp before the operation will be deleted.
         */
        await gapi.client.logging.logs.delete({
            logName: "Test string",
        });
        /** Lists the logs in projects, organizations, folders, or billing accounts. Only logs that have entries are listed. */
        await gapi.client.logging.logs.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
            resourceNames: "Test string",
        });
        /** Lists the descriptors for monitored resource types used by Logging. */
        await gapi.client.logging.monitoredResourceDescriptors.list({
            pageSize: 42,
            pageToken: "Test string",
        });
        /**
         * Gets the Logs Router CMEK settings for the given resource.Note: CMEK for the Logs Router can currently only be configured for GCP organizations. Once configured, it applies to all
         * projects and folders in the GCP organization.See Enabling CMEK for Logs Router (https://cloud.google.com/logging/docs/routing/managed-encryption) for more information.
         */
        await gapi.client.logging.organizations.getCmekSettings({
            name: "Test string",
        });
        /** Creates a new exclusion in a specified parent resource. Only log entries belonging to that resource can be excluded. You can have up to 10 exclusions in a resource. */
        await gapi.client.logging.organizations.exclusions.create({
            parent: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            disabled: true,
            filter: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Deletes an exclusion. */
        await gapi.client.logging.organizations.exclusions.delete({
            name: "Test string",
        });
        /** Gets the description of an exclusion. */
        await gapi.client.logging.organizations.exclusions.get({
            name: "Test string",
        });
        /** Lists all the exclusions in a parent resource. */
        await gapi.client.logging.organizations.exclusions.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Changes one or more properties of an existing exclusion. */
        await gapi.client.logging.organizations.exclusions.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            disabled: true,
            filter: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Gets information about a location. */
        await gapi.client.logging.organizations.locations.get({
            name: "Test string",
        });
        /** Creates a bucket that can be used to store log entries. Once a bucket has been created, the region cannot be changed. */
        await gapi.client.logging.organizations.locations.buckets.create({
            bucketId: "Test string",
            parent: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            lifecycleState: "Test string",
            locked: true,
            name: "Test string",
            restrictedFields: [
                "Test string"            ],
            retentionDays: 42,
            updateTime: "Test string",
        });
        /** Creates a view over logs in a bucket. A bucket may contain a maximum of 50 views. */
        await gapi.client.logging.organizations.locations.buckets.views.create({
            parent: "Test string",
            viewId: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            filter: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Deletes a view from a bucket. */
        await gapi.client.logging.organizations.locations.buckets.views.delete({
            name: "Test string",
        });
        /** Gets a view. */
        await gapi.client.logging.organizations.locations.buckets.views.get({
            name: "Test string",
        });
        /** Lists views on a bucket. */
        await gapi.client.logging.organizations.locations.buckets.views.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a view. This method replaces the following fields in the existing view with values from the new view: filter. */
        await gapi.client.logging.organizations.locations.buckets.views.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            filter: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Deletes a bucket. Moves the bucket to the DELETE_REQUESTED state. After 7 days, the bucket will be purged and all logs in the bucket will be permanently deleted. */
        await gapi.client.logging.organizations.locations.buckets.delete({
            name: "Test string",
        });
        /** Creates a view over logs in a bucket. A bucket may contain a maximum of 50 views. */
        await gapi.client.logging.organizations.locations.buckets.views.create({
            parent: "Test string",
            viewId: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            filter: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Deletes a view from a bucket. */
        await gapi.client.logging.organizations.locations.buckets.views.delete({
            name: "Test string",
        });
        /** Gets a view. */
        await gapi.client.logging.organizations.locations.buckets.views.get({
            name: "Test string",
        });
        /** Lists views on a bucket. */
        await gapi.client.logging.organizations.locations.buckets.views.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a view. This method replaces the following fields in the existing view with values from the new view: filter. */
        await gapi.client.logging.organizations.locations.buckets.views.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            filter: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Gets a bucket. */
        await gapi.client.logging.organizations.locations.buckets.get({
            name: "Test string",
        });
        /** Creates a view over logs in a bucket. A bucket may contain a maximum of 50 views. */
        await gapi.client.logging.organizations.locations.buckets.views.create({
            parent: "Test string",
            viewId: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            filter: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Deletes a view from a bucket. */
        await gapi.client.logging.organizations.locations.buckets.views.delete({
            name: "Test string",
        });
        /** Gets a view. */
        await gapi.client.logging.organizations.locations.buckets.views.get({
            name: "Test string",
        });
        /** Lists views on a bucket. */
        await gapi.client.logging.organizations.locations.buckets.views.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a view. This method replaces the following fields in the existing view with values from the new view: filter. */
        await gapi.client.logging.organizations.locations.buckets.views.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            filter: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Lists buckets. */
        await gapi.client.logging.organizations.locations.buckets.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Creates a view over logs in a bucket. A bucket may contain a maximum of 50 views. */
        await gapi.client.logging.organizations.locations.buckets.views.create({
            parent: "Test string",
            viewId: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            filter: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Deletes a view from a bucket. */
        await gapi.client.logging.organizations.locations.buckets.views.delete({
            name: "Test string",
        });
        /** Gets a view. */
        await gapi.client.logging.organizations.locations.buckets.views.get({
            name: "Test string",
        });
        /** Lists views on a bucket. */
        await gapi.client.logging.organizations.locations.buckets.views.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a view. This method replaces the following fields in the existing view with values from the new view: filter. */
        await gapi.client.logging.organizations.locations.buckets.views.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            filter: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /**
         * Updates a bucket. This method replaces the following fields in the existing bucket with values from the new bucket: retention_periodIf the retention period is decreased and the bucket
         * is locked, FAILED_PRECONDITION will be returned.If the bucket has a LifecycleState of DELETE_REQUESTED, FAILED_PRECONDITION will be returned.A buckets region may not be modified after
         * it is created.
         */
        await gapi.client.logging.organizations.locations.buckets.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            lifecycleState: "Test string",
            locked: true,
            name: "Test string",
            restrictedFields: [
                "Test string"            ],
            retentionDays: 42,
            updateTime: "Test string",
        });
        /** Creates a view over logs in a bucket. A bucket may contain a maximum of 50 views. */
        await gapi.client.logging.organizations.locations.buckets.views.create({
            parent: "Test string",
            viewId: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            filter: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Deletes a view from a bucket. */
        await gapi.client.logging.organizations.locations.buckets.views.delete({
            name: "Test string",
        });
        /** Gets a view. */
        await gapi.client.logging.organizations.locations.buckets.views.get({
            name: "Test string",
        });
        /** Lists views on a bucket. */
        await gapi.client.logging.organizations.locations.buckets.views.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a view. This method replaces the following fields in the existing view with values from the new view: filter. */
        await gapi.client.logging.organizations.locations.buckets.views.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            filter: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Undeletes a bucket. A bucket that has been deleted may be undeleted within the grace period of 7 days. */
        await gapi.client.logging.organizations.locations.buckets.undelete({
            name: "Test string",
        }, {
        });
        /** Creates a view over logs in a bucket. A bucket may contain a maximum of 50 views. */
        await gapi.client.logging.organizations.locations.buckets.views.create({
            parent: "Test string",
            viewId: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            filter: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Deletes a view from a bucket. */
        await gapi.client.logging.organizations.locations.buckets.views.delete({
            name: "Test string",
        });
        /** Gets a view. */
        await gapi.client.logging.organizations.locations.buckets.views.get({
            name: "Test string",
        });
        /** Lists views on a bucket. */
        await gapi.client.logging.organizations.locations.buckets.views.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a view. This method replaces the following fields in the existing view with values from the new view: filter. */
        await gapi.client.logging.organizations.locations.buckets.views.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            filter: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Lists information about the supported locations for this service. */
        await gapi.client.logging.organizations.locations.list({
            filter: "Test string",
            name: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Creates a bucket that can be used to store log entries. Once a bucket has been created, the region cannot be changed. */
        await gapi.client.logging.organizations.locations.buckets.create({
            bucketId: "Test string",
            parent: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            lifecycleState: "Test string",
            locked: true,
            name: "Test string",
            restrictedFields: [
                "Test string"            ],
            retentionDays: 42,
            updateTime: "Test string",
        });
        /** Creates a view over logs in a bucket. A bucket may contain a maximum of 50 views. */
        await gapi.client.logging.organizations.locations.buckets.views.create({
            parent: "Test string",
            viewId: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            filter: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Deletes a view from a bucket. */
        await gapi.client.logging.organizations.locations.buckets.views.delete({
            name: "Test string",
        });
        /** Gets a view. */
        await gapi.client.logging.organizations.locations.buckets.views.get({
            name: "Test string",
        });
        /** Lists views on a bucket. */
        await gapi.client.logging.organizations.locations.buckets.views.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a view. This method replaces the following fields in the existing view with values from the new view: filter. */
        await gapi.client.logging.organizations.locations.buckets.views.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            filter: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Deletes a bucket. Moves the bucket to the DELETE_REQUESTED state. After 7 days, the bucket will be purged and all logs in the bucket will be permanently deleted. */
        await gapi.client.logging.organizations.locations.buckets.delete({
            name: "Test string",
        });
        /** Creates a view over logs in a bucket. A bucket may contain a maximum of 50 views. */
        await gapi.client.logging.organizations.locations.buckets.views.create({
            parent: "Test string",
            viewId: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            filter: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Deletes a view from a bucket. */
        await gapi.client.logging.organizations.locations.buckets.views.delete({
            name: "Test string",
        });
        /** Gets a view. */
        await gapi.client.logging.organizations.locations.buckets.views.get({
            name: "Test string",
        });
        /** Lists views on a bucket. */
        await gapi.client.logging.organizations.locations.buckets.views.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a view. This method replaces the following fields in the existing view with values from the new view: filter. */
        await gapi.client.logging.organizations.locations.buckets.views.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            filter: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Gets a bucket. */
        await gapi.client.logging.organizations.locations.buckets.get({
            name: "Test string",
        });
        /** Creates a view over logs in a bucket. A bucket may contain a maximum of 50 views. */
        await gapi.client.logging.organizations.locations.buckets.views.create({
            parent: "Test string",
            viewId: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            filter: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Deletes a view from a bucket. */
        await gapi.client.logging.organizations.locations.buckets.views.delete({
            name: "Test string",
        });
        /** Gets a view. */
        await gapi.client.logging.organizations.locations.buckets.views.get({
            name: "Test string",
        });
        /** Lists views on a bucket. */
        await gapi.client.logging.organizations.locations.buckets.views.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a view. This method replaces the following fields in the existing view with values from the new view: filter. */
        await gapi.client.logging.organizations.locations.buckets.views.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            filter: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Lists buckets. */
        await gapi.client.logging.organizations.locations.buckets.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Creates a view over logs in a bucket. A bucket may contain a maximum of 50 views. */
        await gapi.client.logging.organizations.locations.buckets.views.create({
            parent: "Test string",
            viewId: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            filter: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Deletes a view from a bucket. */
        await gapi.client.logging.organizations.locations.buckets.views.delete({
            name: "Test string",
        });
        /** Gets a view. */
        await gapi.client.logging.organizations.locations.buckets.views.get({
            name: "Test string",
        });
        /** Lists views on a bucket. */
        await gapi.client.logging.organizations.locations.buckets.views.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a view. This method replaces the following fields in the existing view with values from the new view: filter. */
        await gapi.client.logging.organizations.locations.buckets.views.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            filter: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /**
         * Updates a bucket. This method replaces the following fields in the existing bucket with values from the new bucket: retention_periodIf the retention period is decreased and the bucket
         * is locked, FAILED_PRECONDITION will be returned.If the bucket has a LifecycleState of DELETE_REQUESTED, FAILED_PRECONDITION will be returned.A buckets region may not be modified after
         * it is created.
         */
        await gapi.client.logging.organizations.locations.buckets.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            lifecycleState: "Test string",
            locked: true,
            name: "Test string",
            restrictedFields: [
                "Test string"            ],
            retentionDays: 42,
            updateTime: "Test string",
        });
        /** Creates a view over logs in a bucket. A bucket may contain a maximum of 50 views. */
        await gapi.client.logging.organizations.locations.buckets.views.create({
            parent: "Test string",
            viewId: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            filter: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Deletes a view from a bucket. */
        await gapi.client.logging.organizations.locations.buckets.views.delete({
            name: "Test string",
        });
        /** Gets a view. */
        await gapi.client.logging.organizations.locations.buckets.views.get({
            name: "Test string",
        });
        /** Lists views on a bucket. */
        await gapi.client.logging.organizations.locations.buckets.views.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a view. This method replaces the following fields in the existing view with values from the new view: filter. */
        await gapi.client.logging.organizations.locations.buckets.views.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            filter: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Undeletes a bucket. A bucket that has been deleted may be undeleted within the grace period of 7 days. */
        await gapi.client.logging.organizations.locations.buckets.undelete({
            name: "Test string",
        }, {
        });
        /** Creates a view over logs in a bucket. A bucket may contain a maximum of 50 views. */
        await gapi.client.logging.organizations.locations.buckets.views.create({
            parent: "Test string",
            viewId: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            filter: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Deletes a view from a bucket. */
        await gapi.client.logging.organizations.locations.buckets.views.delete({
            name: "Test string",
        });
        /** Gets a view. */
        await gapi.client.logging.organizations.locations.buckets.views.get({
            name: "Test string",
        });
        /** Lists views on a bucket. */
        await gapi.client.logging.organizations.locations.buckets.views.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a view. This method replaces the following fields in the existing view with values from the new view: filter. */
        await gapi.client.logging.organizations.locations.buckets.views.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            filter: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /**
         * Deletes all the log entries in a log for the _Default Log Bucket. The log reappears if it receives new entries. Log entries written shortly before the delete operation might not be
         * deleted. Entries received after the delete operation with a timestamp before the operation will be deleted.
         */
        await gapi.client.logging.organizations.logs.delete({
            logName: "Test string",
        });
        /** Lists the logs in projects, organizations, folders, or billing accounts. Only logs that have entries are listed. */
        await gapi.client.logging.organizations.logs.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
            resourceNames: "Test string",
        });
        /**
         * Creates a sink that exports specified log entries to a destination. The export of newly-ingested log entries begins immediately, unless the sink's writer_identity is not permitted to
         * write to the destination. A sink can export log entries only from the resource owning the sink.
         */
        await gapi.client.logging.organizations.sinks.create({
            parent: "Test string",
            uniqueWriterIdentity: true,
        }, {
            bigqueryOptions: {
                usePartitionedTables: true,
                usesTimestampColumnPartitioning: true,
            },
            createTime: "Test string",
            description: "Test string",
            destination: "Test string",
            disabled: true,
            exclusions: [
                {
                    createTime: "Test string",
                    description: "Test string",
                    disabled: true,
                    filter: "Test string",
                    name: "Test string",
                    updateTime: "Test string",
                }            ],
            filter: "Test string",
            includeChildren: true,
            name: "Test string",
            outputVersionFormat: "Test string",
            updateTime: "Test string",
            writerIdentity: "Test string",
        });
        /** Deletes a sink. If the sink has a unique writer_identity, then that service account is also deleted. */
        await gapi.client.logging.organizations.sinks.delete({
            sinkName: "Test string",
        });
        /** Gets a sink. */
        await gapi.client.logging.organizations.sinks.get({
            sinkName: "Test string",
        });
        /** Lists sinks. */
        await gapi.client.logging.organizations.sinks.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Updates a sink. This method replaces the following fields in the existing sink with values from the new sink: destination, and filter.The updated sink might also have a new
         * writer_identity; see the unique_writer_identity field.
         */
        await gapi.client.logging.organizations.sinks.patch({
            sinkName: "Test string",
            uniqueWriterIdentity: true,
            updateMask: "Test string",
        }, {
            bigqueryOptions: {
                usePartitionedTables: true,
                usesTimestampColumnPartitioning: true,
            },
            createTime: "Test string",
            description: "Test string",
            destination: "Test string",
            disabled: true,
            exclusions: [
                {
                    createTime: "Test string",
                    description: "Test string",
                    disabled: true,
                    filter: "Test string",
                    name: "Test string",
                    updateTime: "Test string",
                }            ],
            filter: "Test string",
            includeChildren: true,
            name: "Test string",
            outputVersionFormat: "Test string",
            updateTime: "Test string",
            writerIdentity: "Test string",
        });
        /**
         * Updates a sink. This method replaces the following fields in the existing sink with values from the new sink: destination, and filter.The updated sink might also have a new
         * writer_identity; see the unique_writer_identity field.
         */
        await gapi.client.logging.organizations.sinks.update({
            sinkName: "Test string",
            uniqueWriterIdentity: true,
            updateMask: "Test string",
        }, {
            bigqueryOptions: {
                usePartitionedTables: true,
                usesTimestampColumnPartitioning: true,
            },
            createTime: "Test string",
            description: "Test string",
            destination: "Test string",
            disabled: true,
            exclusions: [
                {
                    createTime: "Test string",
                    description: "Test string",
                    disabled: true,
                    filter: "Test string",
                    name: "Test string",
                    updateTime: "Test string",
                }            ],
            filter: "Test string",
            includeChildren: true,
            name: "Test string",
            outputVersionFormat: "Test string",
            updateTime: "Test string",
            writerIdentity: "Test string",
        });
        /**
         * Updates the Logs Router CMEK settings for the given resource.Note: CMEK for the Logs Router can currently only be configured for GCP organizations. Once configured, it applies to all
         * projects and folders in the GCP organization.UpdateCmekSettings will fail if 1) kms_key_name is invalid, or 2) the associated service account does not have the required
         * roles/cloudkms.cryptoKeyEncrypterDecrypter role assigned for the key, or 3) access to the key is disabled.See Enabling CMEK for Logs Router
         * (https://cloud.google.com/logging/docs/routing/managed-encryption) for more information.
         */
        await gapi.client.logging.organizations.updateCmekSettings({
            name: "Test string",
            updateMask: "Test string",
        }, {
            kmsKeyName: "Test string",
            name: "Test string",
            serviceAccountId: "Test string",
        });
        /** Creates a new exclusion in a specified parent resource. Only log entries belonging to that resource can be excluded. You can have up to 10 exclusions in a resource. */
        await gapi.client.logging.organizations.exclusions.create({
            parent: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            disabled: true,
            filter: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Deletes an exclusion. */
        await gapi.client.logging.organizations.exclusions.delete({
            name: "Test string",
        });
        /** Gets the description of an exclusion. */
        await gapi.client.logging.organizations.exclusions.get({
            name: "Test string",
        });
        /** Lists all the exclusions in a parent resource. */
        await gapi.client.logging.organizations.exclusions.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Changes one or more properties of an existing exclusion. */
        await gapi.client.logging.organizations.exclusions.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            disabled: true,
            filter: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Gets information about a location. */
        await gapi.client.logging.organizations.locations.get({
            name: "Test string",
        });
        /** Creates a bucket that can be used to store log entries. Once a bucket has been created, the region cannot be changed. */
        await gapi.client.logging.organizations.locations.buckets.create({
            bucketId: "Test string",
            parent: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            lifecycleState: "Test string",
            locked: true,
            name: "Test string",
            restrictedFields: [
                "Test string"            ],
            retentionDays: 42,
            updateTime: "Test string",
        });
        /** Creates a view over logs in a bucket. A bucket may contain a maximum of 50 views. */
        await gapi.client.logging.organizations.locations.buckets.views.create({
            parent: "Test string",
            viewId: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            filter: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Deletes a view from a bucket. */
        await gapi.client.logging.organizations.locations.buckets.views.delete({
            name: "Test string",
        });
        /** Gets a view. */
        await gapi.client.logging.organizations.locations.buckets.views.get({
            name: "Test string",
        });
        /** Lists views on a bucket. */
        await gapi.client.logging.organizations.locations.buckets.views.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a view. This method replaces the following fields in the existing view with values from the new view: filter. */
        await gapi.client.logging.organizations.locations.buckets.views.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            filter: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Deletes a bucket. Moves the bucket to the DELETE_REQUESTED state. After 7 days, the bucket will be purged and all logs in the bucket will be permanently deleted. */
        await gapi.client.logging.organizations.locations.buckets.delete({
            name: "Test string",
        });
        /** Creates a view over logs in a bucket. A bucket may contain a maximum of 50 views. */
        await gapi.client.logging.organizations.locations.buckets.views.create({
            parent: "Test string",
            viewId: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            filter: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Deletes a view from a bucket. */
        await gapi.client.logging.organizations.locations.buckets.views.delete({
            name: "Test string",
        });
        /** Gets a view. */
        await gapi.client.logging.organizations.locations.buckets.views.get({
            name: "Test string",
        });
        /** Lists views on a bucket. */
        await gapi.client.logging.organizations.locations.buckets.views.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a view. This method replaces the following fields in the existing view with values from the new view: filter. */
        await gapi.client.logging.organizations.locations.buckets.views.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            filter: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Gets a bucket. */
        await gapi.client.logging.organizations.locations.buckets.get({
            name: "Test string",
        });
        /** Creates a view over logs in a bucket. A bucket may contain a maximum of 50 views. */
        await gapi.client.logging.organizations.locations.buckets.views.create({
            parent: "Test string",
            viewId: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            filter: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Deletes a view from a bucket. */
        await gapi.client.logging.organizations.locations.buckets.views.delete({
            name: "Test string",
        });
        /** Gets a view. */
        await gapi.client.logging.organizations.locations.buckets.views.get({
            name: "Test string",
        });
        /** Lists views on a bucket. */
        await gapi.client.logging.organizations.locations.buckets.views.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a view. This method replaces the following fields in the existing view with values from the new view: filter. */
        await gapi.client.logging.organizations.locations.buckets.views.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            filter: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Lists buckets. */
        await gapi.client.logging.organizations.locations.buckets.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Creates a view over logs in a bucket. A bucket may contain a maximum of 50 views. */
        await gapi.client.logging.organizations.locations.buckets.views.create({
            parent: "Test string",
            viewId: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            filter: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Deletes a view from a bucket. */
        await gapi.client.logging.organizations.locations.buckets.views.delete({
            name: "Test string",
        });
        /** Gets a view. */
        await gapi.client.logging.organizations.locations.buckets.views.get({
            name: "Test string",
        });
        /** Lists views on a bucket. */
        await gapi.client.logging.organizations.locations.buckets.views.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a view. This method replaces the following fields in the existing view with values from the new view: filter. */
        await gapi.client.logging.organizations.locations.buckets.views.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            filter: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /**
         * Updates a bucket. This method replaces the following fields in the existing bucket with values from the new bucket: retention_periodIf the retention period is decreased and the bucket
         * is locked, FAILED_PRECONDITION will be returned.If the bucket has a LifecycleState of DELETE_REQUESTED, FAILED_PRECONDITION will be returned.A buckets region may not be modified after
         * it is created.
         */
        await gapi.client.logging.organizations.locations.buckets.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            lifecycleState: "Test string",
            locked: true,
            name: "Test string",
            restrictedFields: [
                "Test string"            ],
            retentionDays: 42,
            updateTime: "Test string",
        });
        /** Creates a view over logs in a bucket. A bucket may contain a maximum of 50 views. */
        await gapi.client.logging.organizations.locations.buckets.views.create({
            parent: "Test string",
            viewId: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            filter: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Deletes a view from a bucket. */
        await gapi.client.logging.organizations.locations.buckets.views.delete({
            name: "Test string",
        });
        /** Gets a view. */
        await gapi.client.logging.organizations.locations.buckets.views.get({
            name: "Test string",
        });
        /** Lists views on a bucket. */
        await gapi.client.logging.organizations.locations.buckets.views.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a view. This method replaces the following fields in the existing view with values from the new view: filter. */
        await gapi.client.logging.organizations.locations.buckets.views.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            filter: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Undeletes a bucket. A bucket that has been deleted may be undeleted within the grace period of 7 days. */
        await gapi.client.logging.organizations.locations.buckets.undelete({
            name: "Test string",
        }, {
        });
        /** Creates a view over logs in a bucket. A bucket may contain a maximum of 50 views. */
        await gapi.client.logging.organizations.locations.buckets.views.create({
            parent: "Test string",
            viewId: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            filter: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Deletes a view from a bucket. */
        await gapi.client.logging.organizations.locations.buckets.views.delete({
            name: "Test string",
        });
        /** Gets a view. */
        await gapi.client.logging.organizations.locations.buckets.views.get({
            name: "Test string",
        });
        /** Lists views on a bucket. */
        await gapi.client.logging.organizations.locations.buckets.views.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a view. This method replaces the following fields in the existing view with values from the new view: filter. */
        await gapi.client.logging.organizations.locations.buckets.views.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            filter: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Lists information about the supported locations for this service. */
        await gapi.client.logging.organizations.locations.list({
            filter: "Test string",
            name: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Creates a bucket that can be used to store log entries. Once a bucket has been created, the region cannot be changed. */
        await gapi.client.logging.organizations.locations.buckets.create({
            bucketId: "Test string",
            parent: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            lifecycleState: "Test string",
            locked: true,
            name: "Test string",
            restrictedFields: [
                "Test string"            ],
            retentionDays: 42,
            updateTime: "Test string",
        });
        /** Creates a view over logs in a bucket. A bucket may contain a maximum of 50 views. */
        await gapi.client.logging.organizations.locations.buckets.views.create({
            parent: "Test string",
            viewId: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            filter: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Deletes a view from a bucket. */
        await gapi.client.logging.organizations.locations.buckets.views.delete({
            name: "Test string",
        });
        /** Gets a view. */
        await gapi.client.logging.organizations.locations.buckets.views.get({
            name: "Test string",
        });
        /** Lists views on a bucket. */
        await gapi.client.logging.organizations.locations.buckets.views.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a view. This method replaces the following fields in the existing view with values from the new view: filter. */
        await gapi.client.logging.organizations.locations.buckets.views.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            filter: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Deletes a bucket. Moves the bucket to the DELETE_REQUESTED state. After 7 days, the bucket will be purged and all logs in the bucket will be permanently deleted. */
        await gapi.client.logging.organizations.locations.buckets.delete({
            name: "Test string",
        });
        /** Creates a view over logs in a bucket. A bucket may contain a maximum of 50 views. */
        await gapi.client.logging.organizations.locations.buckets.views.create({
            parent: "Test string",
            viewId: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            filter: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Deletes a view from a bucket. */
        await gapi.client.logging.organizations.locations.buckets.views.delete({
            name: "Test string",
        });
        /** Gets a view. */
        await gapi.client.logging.organizations.locations.buckets.views.get({
            name: "Test string",
        });
        /** Lists views on a bucket. */
        await gapi.client.logging.organizations.locations.buckets.views.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a view. This method replaces the following fields in the existing view with values from the new view: filter. */
        await gapi.client.logging.organizations.locations.buckets.views.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            filter: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Gets a bucket. */
        await gapi.client.logging.organizations.locations.buckets.get({
            name: "Test string",
        });
        /** Creates a view over logs in a bucket. A bucket may contain a maximum of 50 views. */
        await gapi.client.logging.organizations.locations.buckets.views.create({
            parent: "Test string",
            viewId: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            filter: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Deletes a view from a bucket. */
        await gapi.client.logging.organizations.locations.buckets.views.delete({
            name: "Test string",
        });
        /** Gets a view. */
        await gapi.client.logging.organizations.locations.buckets.views.get({
            name: "Test string",
        });
        /** Lists views on a bucket. */
        await gapi.client.logging.organizations.locations.buckets.views.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a view. This method replaces the following fields in the existing view with values from the new view: filter. */
        await gapi.client.logging.organizations.locations.buckets.views.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            filter: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Lists buckets. */
        await gapi.client.logging.organizations.locations.buckets.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Creates a view over logs in a bucket. A bucket may contain a maximum of 50 views. */
        await gapi.client.logging.organizations.locations.buckets.views.create({
            parent: "Test string",
            viewId: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            filter: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Deletes a view from a bucket. */
        await gapi.client.logging.organizations.locations.buckets.views.delete({
            name: "Test string",
        });
        /** Gets a view. */
        await gapi.client.logging.organizations.locations.buckets.views.get({
            name: "Test string",
        });
        /** Lists views on a bucket. */
        await gapi.client.logging.organizations.locations.buckets.views.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a view. This method replaces the following fields in the existing view with values from the new view: filter. */
        await gapi.client.logging.organizations.locations.buckets.views.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            filter: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /**
         * Updates a bucket. This method replaces the following fields in the existing bucket with values from the new bucket: retention_periodIf the retention period is decreased and the bucket
         * is locked, FAILED_PRECONDITION will be returned.If the bucket has a LifecycleState of DELETE_REQUESTED, FAILED_PRECONDITION will be returned.A buckets region may not be modified after
         * it is created.
         */
        await gapi.client.logging.organizations.locations.buckets.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            lifecycleState: "Test string",
            locked: true,
            name: "Test string",
            restrictedFields: [
                "Test string"            ],
            retentionDays: 42,
            updateTime: "Test string",
        });
        /** Creates a view over logs in a bucket. A bucket may contain a maximum of 50 views. */
        await gapi.client.logging.organizations.locations.buckets.views.create({
            parent: "Test string",
            viewId: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            filter: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Deletes a view from a bucket. */
        await gapi.client.logging.organizations.locations.buckets.views.delete({
            name: "Test string",
        });
        /** Gets a view. */
        await gapi.client.logging.organizations.locations.buckets.views.get({
            name: "Test string",
        });
        /** Lists views on a bucket. */
        await gapi.client.logging.organizations.locations.buckets.views.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a view. This method replaces the following fields in the existing view with values from the new view: filter. */
        await gapi.client.logging.organizations.locations.buckets.views.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            filter: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Undeletes a bucket. A bucket that has been deleted may be undeleted within the grace period of 7 days. */
        await gapi.client.logging.organizations.locations.buckets.undelete({
            name: "Test string",
        }, {
        });
        /** Creates a view over logs in a bucket. A bucket may contain a maximum of 50 views. */
        await gapi.client.logging.organizations.locations.buckets.views.create({
            parent: "Test string",
            viewId: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            filter: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Deletes a view from a bucket. */
        await gapi.client.logging.organizations.locations.buckets.views.delete({
            name: "Test string",
        });
        /** Gets a view. */
        await gapi.client.logging.organizations.locations.buckets.views.get({
            name: "Test string",
        });
        /** Lists views on a bucket. */
        await gapi.client.logging.organizations.locations.buckets.views.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a view. This method replaces the following fields in the existing view with values from the new view: filter. */
        await gapi.client.logging.organizations.locations.buckets.views.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            filter: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /**
         * Deletes all the log entries in a log for the _Default Log Bucket. The log reappears if it receives new entries. Log entries written shortly before the delete operation might not be
         * deleted. Entries received after the delete operation with a timestamp before the operation will be deleted.
         */
        await gapi.client.logging.organizations.logs.delete({
            logName: "Test string",
        });
        /** Lists the logs in projects, organizations, folders, or billing accounts. Only logs that have entries are listed. */
        await gapi.client.logging.organizations.logs.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
            resourceNames: "Test string",
        });
        /**
         * Creates a sink that exports specified log entries to a destination. The export of newly-ingested log entries begins immediately, unless the sink's writer_identity is not permitted to
         * write to the destination. A sink can export log entries only from the resource owning the sink.
         */
        await gapi.client.logging.organizations.sinks.create({
            parent: "Test string",
            uniqueWriterIdentity: true,
        }, {
            bigqueryOptions: {
                usePartitionedTables: true,
                usesTimestampColumnPartitioning: true,
            },
            createTime: "Test string",
            description: "Test string",
            destination: "Test string",
            disabled: true,
            exclusions: [
                {
                    createTime: "Test string",
                    description: "Test string",
                    disabled: true,
                    filter: "Test string",
                    name: "Test string",
                    updateTime: "Test string",
                }            ],
            filter: "Test string",
            includeChildren: true,
            name: "Test string",
            outputVersionFormat: "Test string",
            updateTime: "Test string",
            writerIdentity: "Test string",
        });
        /** Deletes a sink. If the sink has a unique writer_identity, then that service account is also deleted. */
        await gapi.client.logging.organizations.sinks.delete({
            sinkName: "Test string",
        });
        /** Gets a sink. */
        await gapi.client.logging.organizations.sinks.get({
            sinkName: "Test string",
        });
        /** Lists sinks. */
        await gapi.client.logging.organizations.sinks.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Updates a sink. This method replaces the following fields in the existing sink with values from the new sink: destination, and filter.The updated sink might also have a new
         * writer_identity; see the unique_writer_identity field.
         */
        await gapi.client.logging.organizations.sinks.patch({
            sinkName: "Test string",
            uniqueWriterIdentity: true,
            updateMask: "Test string",
        }, {
            bigqueryOptions: {
                usePartitionedTables: true,
                usesTimestampColumnPartitioning: true,
            },
            createTime: "Test string",
            description: "Test string",
            destination: "Test string",
            disabled: true,
            exclusions: [
                {
                    createTime: "Test string",
                    description: "Test string",
                    disabled: true,
                    filter: "Test string",
                    name: "Test string",
                    updateTime: "Test string",
                }            ],
            filter: "Test string",
            includeChildren: true,
            name: "Test string",
            outputVersionFormat: "Test string",
            updateTime: "Test string",
            writerIdentity: "Test string",
        });
        /**
         * Updates a sink. This method replaces the following fields in the existing sink with values from the new sink: destination, and filter.The updated sink might also have a new
         * writer_identity; see the unique_writer_identity field.
         */
        await gapi.client.logging.organizations.sinks.update({
            sinkName: "Test string",
            uniqueWriterIdentity: true,
            updateMask: "Test string",
        }, {
            bigqueryOptions: {
                usePartitionedTables: true,
                usesTimestampColumnPartitioning: true,
            },
            createTime: "Test string",
            description: "Test string",
            destination: "Test string",
            disabled: true,
            exclusions: [
                {
                    createTime: "Test string",
                    description: "Test string",
                    disabled: true,
                    filter: "Test string",
                    name: "Test string",
                    updateTime: "Test string",
                }            ],
            filter: "Test string",
            includeChildren: true,
            name: "Test string",
            outputVersionFormat: "Test string",
            updateTime: "Test string",
            writerIdentity: "Test string",
        });
        /**
         * Creates a sink that exports specified log entries to a destination. The export of newly-ingested log entries begins immediately, unless the sink's writer_identity is not permitted to
         * write to the destination. A sink can export log entries only from the resource owning the sink.
         */
        await gapi.client.logging.sinks.create({
            parent: "Test string",
            uniqueWriterIdentity: true,
        }, {
            bigqueryOptions: {
                usePartitionedTables: true,
                usesTimestampColumnPartitioning: true,
            },
            createTime: "Test string",
            description: "Test string",
            destination: "Test string",
            disabled: true,
            exclusions: [
                {
                    createTime: "Test string",
                    description: "Test string",
                    disabled: true,
                    filter: "Test string",
                    name: "Test string",
                    updateTime: "Test string",
                }            ],
            filter: "Test string",
            includeChildren: true,
            name: "Test string",
            outputVersionFormat: "Test string",
            updateTime: "Test string",
            writerIdentity: "Test string",
        });
        /** Deletes a sink. If the sink has a unique writer_identity, then that service account is also deleted. */
        await gapi.client.logging.sinks.delete({
            sinkName: "Test string",
        });
        /** Gets a sink. */
        await gapi.client.logging.sinks.get({
            sinkName: "Test string",
        });
        /** Lists sinks. */
        await gapi.client.logging.sinks.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Updates a sink. This method replaces the following fields in the existing sink with values from the new sink: destination, and filter.The updated sink might also have a new
         * writer_identity; see the unique_writer_identity field.
         */
        await gapi.client.logging.sinks.update({
            sinkName: "Test string",
            uniqueWriterIdentity: true,
            updateMask: "Test string",
        }, {
            bigqueryOptions: {
                usePartitionedTables: true,
                usesTimestampColumnPartitioning: true,
            },
            createTime: "Test string",
            description: "Test string",
            destination: "Test string",
            disabled: true,
            exclusions: [
                {
                    createTime: "Test string",
                    description: "Test string",
                    disabled: true,
                    filter: "Test string",
                    name: "Test string",
                    updateTime: "Test string",
                }            ],
            filter: "Test string",
            includeChildren: true,
            name: "Test string",
            outputVersionFormat: "Test string",
            updateTime: "Test string",
            writerIdentity: "Test string",
        });
        /**
         * Gets the Logs Router CMEK settings for the given resource.Note: CMEK for the Logs Router can currently only be configured for GCP organizations. Once configured, it applies to all
         * projects and folders in the GCP organization.See Enabling CMEK for Logs Router (https://cloud.google.com/logging/docs/routing/managed-encryption) for more information.
         */
        await gapi.client.logging.v2.getCmekSettings({
            name: "Test string",
        });
        /**
         * Updates the Logs Router CMEK settings for the given resource.Note: CMEK for the Logs Router can currently only be configured for GCP organizations. Once configured, it applies to all
         * projects and folders in the GCP organization.UpdateCmekSettings will fail if 1) kms_key_name is invalid, or 2) the associated service account does not have the required
         * roles/cloudkms.cryptoKeyEncrypterDecrypter role assigned for the key, or 3) access to the key is disabled.See Enabling CMEK for Logs Router
         * (https://cloud.google.com/logging/docs/routing/managed-encryption) for more information.
         */
        await gapi.client.logging.v2.updateCmekSettings({
            name: "Test string",
            updateMask: "Test string",
        }, {
            kmsKeyName: "Test string",
            name: "Test string",
            serviceAccountId: "Test string",
        });
    }
});
