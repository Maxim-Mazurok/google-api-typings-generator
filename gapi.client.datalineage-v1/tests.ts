/* This is stub file for gapi.client.datalineage-v1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20240913

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://datalineage.googleapis.com/$discovery/rest?version=v1'
  );
  /** now we can use gapi.client.datalineage */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
    'https://www.googleapis.com/auth/cloud-platform',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Retrieve information about LineageProcesses associated with specific links. LineageProcesses are transformation pipelines that result in data flowing from **source** to **target** assets. Links between assets represent this operation. If you have specific link names, you can use this method to verify which LineageProcesses contribute to creating those links. See the SearchLinks method for more information on how to retrieve link name. You can retrieve the LineageProcess information in every project where you have the `datalineage.events.get` permission. The project provided in the URL is used for Billing and Quota. */
    await gapi.client.datalineage.projects.locations.batchSearchLinkProcesses(
      {
        parent: 'Test string',
      },
      {
        links: ['Test string'],
        pageSize: 42,
        pageToken: 'Test string',
      }
    );
    /** Creates new lineage events together with their parents: process and run. Updates the process and run if they already exist. Mapped from Open Lineage specification: https://github.com/OpenLineage/OpenLineage/blob/main/spec/OpenLineage.json. */
    await gapi.client.datalineage.projects.locations.processOpenLineageRunEvent(
      {
        parent: 'Test string',
        requestId: 'Test string',
      }
    );
    /** Retrieve a list of links connected to a specific asset. Links represent the data flow between **source** (upstream) and **target** (downstream) assets in transformation pipelines. Links are stored in the same project as the Lineage Events that create them. You can retrieve links in every project where you have the `datalineage.events.get` permission. The project provided in the URL is used for Billing and Quota. */
    await gapi.client.datalineage.projects.locations.searchLinks(
      {
        parent: 'Test string',
      },
      {
        pageSize: 42,
        pageToken: 'Test string',
        source: {
          fullyQualifiedName: 'Test string',
        },
        target: {
          fullyQualifiedName: 'Test string',
        },
      }
    );
    /** Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`. */
    await gapi.client.datalineage.projects.locations.operations.cancel(
      {
        name: 'Test string',
      },
      {}
    );
    /** Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. */
    await gapi.client.datalineage.projects.locations.operations.delete({
      name: 'Test string',
    });
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.datalineage.projects.locations.operations.get({
      name: 'Test string',
    });
    /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
    await gapi.client.datalineage.projects.locations.operations.list({
      filter: 'Test string',
      name: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Creates a new process. */
    await gapi.client.datalineage.projects.locations.processes.create(
      {
        parent: 'Test string',
        requestId: 'Test string',
      },
      {
        attributes: {
          A: 42,
        },
        displayName: 'Test string',
        name: 'Test string',
        origin: {
          name: 'Test string',
          sourceType: 'Test string',
        },
      }
    );
    /** Deletes the process with the specified name. */
    await gapi.client.datalineage.projects.locations.processes.delete({
      allowMissing: true,
      name: 'Test string',
    });
    /** Gets the details of the specified process. */
    await gapi.client.datalineage.projects.locations.processes.get({
      name: 'Test string',
    });
    /** List processes in the given project and location. List order is descending by insertion time. */
    await gapi.client.datalineage.projects.locations.processes.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates a process. */
    await gapi.client.datalineage.projects.locations.processes.patch(
      {
        allowMissing: true,
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        attributes: {
          A: 42,
        },
        displayName: 'Test string',
        name: 'Test string',
        origin: {
          name: 'Test string',
          sourceType: 'Test string',
        },
      }
    );
    /** Creates a new run. */
    await gapi.client.datalineage.projects.locations.processes.runs.create(
      {
        parent: 'Test string',
        requestId: 'Test string',
      },
      {
        attributes: {
          A: 42,
        },
        displayName: 'Test string',
        endTime: 'Test string',
        name: 'Test string',
        startTime: 'Test string',
        state: 'Test string',
      }
    );
    /** Deletes the run with the specified name. */
    await gapi.client.datalineage.projects.locations.processes.runs.delete({
      allowMissing: true,
      name: 'Test string',
    });
    /** Gets the details of the specified run. */
    await gapi.client.datalineage.projects.locations.processes.runs.get({
      name: 'Test string',
    });
    /** Lists runs in the given project and location. List order is descending by `start_time`. */
    await gapi.client.datalineage.projects.locations.processes.runs.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates a run. */
    await gapi.client.datalineage.projects.locations.processes.runs.patch(
      {
        allowMissing: true,
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        attributes: {
          A: 42,
        },
        displayName: 'Test string',
        endTime: 'Test string',
        name: 'Test string',
        startTime: 'Test string',
        state: 'Test string',
      }
    );
    /** Creates a new lineage event. */
    await gapi.client.datalineage.projects.locations.processes.runs.lineageEvents.create(
      {
        parent: 'Test string',
        requestId: 'Test string',
      },
      {
        endTime: 'Test string',
        links: [
          {
            source: {
              fullyQualifiedName: 'Test string',
            },
            target: {
              fullyQualifiedName: 'Test string',
            },
          },
        ],
        name: 'Test string',
        startTime: 'Test string',
      }
    );
    /** Deletes the lineage event with the specified name. */
    await gapi.client.datalineage.projects.locations.processes.runs.lineageEvents.delete(
      {
        allowMissing: true,
        name: 'Test string',
      }
    );
    /** Gets details of a specified lineage event. */
    await gapi.client.datalineage.projects.locations.processes.runs.lineageEvents.get(
      {
        name: 'Test string',
      }
    );
    /** Lists lineage events in the given project and location. The list order is not defined. */
    await gapi.client.datalineage.projects.locations.processes.runs.lineageEvents.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
  }
});
