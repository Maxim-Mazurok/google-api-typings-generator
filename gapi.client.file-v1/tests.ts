/* This is stub file for gapi.client.file-v1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20221010

gapi.load('client', async () => {
    /** now we can use gapi.client */

    await gapi.client.load('https://file.googleapis.com/$discovery/rest?version=v1');
    /** now we can use gapi.client.file */

    /** don't forget to authenticate your client before sending any request to resources: */
    /** declare client_id registered in Google Developers Console */
    const client_id = '<<PUT YOUR CLIENT ID HERE>>';
    const scope = [
        /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
        'https://www.googleapis.com/auth/cloud-platform',
    ];
    const immediate = false;
    gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
        if (authResult && !authResult.error) {
            /** handle successful authorization */
            run();
        } else {
            /** handle authorization error */
        }
    });

    async function run() {
        /** Gets information about a location. */
        await gapi.client.file.projects.locations.get({
            name: "Test string",
        });
        /** Lists information about the supported locations for this service. */
        await gapi.client.file.projects.locations.list({
            filter: "Test string",
            includeUnrevealedLocations: true,
            name: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Creates a backup. */
        await gapi.client.file.projects.locations.backups.create({
            backupId: "Test string",
            parent: "Test string",
        }, {
            capacityGb: "Test string",
            createTime: "Test string",
            description: "Test string",
            downloadBytes: "Test string",
            labels: {
                A: "Test string"
            },
            name: "Test string",
            satisfiesPzs: true,
            sourceFileShare: "Test string",
            sourceInstance: "Test string",
            sourceInstanceTier: "Test string",
            state: "Test string",
            storageBytes: "Test string",
        });
        /** Deletes a backup. */
        await gapi.client.file.projects.locations.backups.delete({
            name: "Test string",
        });
        /** Gets the details of a specific backup. */
        await gapi.client.file.projects.locations.backups.get({
            name: "Test string",
        });
        /** Lists all backups in a project for either a specified location or for all locations. */
        await gapi.client.file.projects.locations.backups.list({
            filter: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the settings of a specific backup. */
        await gapi.client.file.projects.locations.backups.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            capacityGb: "Test string",
            createTime: "Test string",
            description: "Test string",
            downloadBytes: "Test string",
            labels: {
                A: "Test string"
            },
            name: "Test string",
            satisfiesPzs: true,
            sourceFileShare: "Test string",
            sourceInstance: "Test string",
            sourceInstanceTier: "Test string",
            state: "Test string",
            storageBytes: "Test string",
        });
        /**
         * Creates an instance. When creating from a backup, the capacity of the new instance needs to be equal to or larger than the capacity of the backup (and also equal to or larger than the
         * minimum capacity of the tier).
         */
        await gapi.client.file.projects.locations.instances.create({
            instanceId: "Test string",
            parent: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            etag: "Test string",
            fileShares: [
                {
                    capacityGb: "Test string",
                    name: "Test string",
                    nfsExportOptions: [
                        {
                            accessMode: "Test string",
                            anonGid: "Test string",
                            anonUid: "Test string",
                            ipRanges: [
                                "Test string"
                            ],
                            squashMode: "Test string",
                        }
                    ],
                    sourceBackup: "Test string",
                }
            ],
            kmsKeyName: "Test string",
            labels: {
                A: "Test string"
            },
            name: "Test string",
            networks: [
                {
                    connectMode: "Test string",
                    ipAddresses: [
                        "Test string"
                    ],
                    modes: [
                        "Test string"
                    ],
                    network: "Test string",
                    reservedIpRange: "Test string",
                }
            ],
            satisfiesPzs: true,
            state: "Test string",
            statusMessage: "Test string",
            suspensionReasons: [
                "Test string"
            ],
            tier: "Test string",
        });
        /** Deletes an instance. */
        await gapi.client.file.projects.locations.instances.delete({
            force: true,
            name: "Test string",
        });
        /** Gets the details of a specific instance. */
        await gapi.client.file.projects.locations.instances.get({
            name: "Test string",
        });
        /** Lists all instances in a project for either a specified location or for all locations. */
        await gapi.client.file.projects.locations.instances.list({
            filter: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the settings of a specific instance. */
        await gapi.client.file.projects.locations.instances.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            etag: "Test string",
            fileShares: [
                {
                    capacityGb: "Test string",
                    name: "Test string",
                    nfsExportOptions: [
                        {
                            accessMode: "Test string",
                            anonGid: "Test string",
                            anonUid: "Test string",
                            ipRanges: [
                                "Test string"
                            ],
                            squashMode: "Test string",
                        }
                    ],
                    sourceBackup: "Test string",
                }
            ],
            kmsKeyName: "Test string",
            labels: {
                A: "Test string"
            },
            name: "Test string",
            networks: [
                {
                    connectMode: "Test string",
                    ipAddresses: [
                        "Test string"
                    ],
                    modes: [
                        "Test string"
                    ],
                    network: "Test string",
                    reservedIpRange: "Test string",
                }
            ],
            satisfiesPzs: true,
            state: "Test string",
            statusMessage: "Test string",
            suspensionReasons: [
                "Test string"
            ],
            tier: "Test string",
        });
        /**
         * Restores an existing instance's file share from a backup. The capacity of the instance needs to be equal to or larger than the capacity of the backup (and also equal to or larger than
         * the minimum capacity of the tier).
         */
        await gapi.client.file.projects.locations.instances.restore({
            name: "Test string",
        }, {
            fileShare: "Test string",
            sourceBackup: "Test string",
        });
        /** Creates a snapshot. */
        await gapi.client.file.projects.locations.instances.snapshots.create({
            parent: "Test string",
            snapshotId: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            filesystemUsedBytes: "Test string",
            labels: {
                A: "Test string"
            },
            name: "Test string",
            state: "Test string",
        });
        /** Deletes a snapshot. */
        await gapi.client.file.projects.locations.instances.snapshots.delete({
            name: "Test string",
        });
        /** Gets the details of a specific snapshot. */
        await gapi.client.file.projects.locations.instances.snapshots.get({
            name: "Test string",
        });
        /** Lists all snapshots in a project for either a specified location or for all locations. */
        await gapi.client.file.projects.locations.instances.snapshots.list({
            filter: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the settings of a specific snapshot. */
        await gapi.client.file.projects.locations.instances.snapshots.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            filesystemUsedBytes: "Test string",
            labels: {
                A: "Test string"
            },
            name: "Test string",
            state: "Test string",
        });
        /**
         * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this
         * method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation
         * completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of
         * 1, corresponding to `Code.CANCELLED`.
         */
        await gapi.client.file.projects.locations.operations.cancel({
            name: "Test string",
        }, {
        });
        /**
         * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support
         * this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
         */
        await gapi.client.file.projects.locations.operations.delete({
            name: "Test string",
        });
        /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
        await gapi.client.file.projects.locations.operations.get({
            name: "Test string",
        });
        /**
         * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to
         * override the binding to use different resource name schemes, such as `users/*‍/operations`. To override the binding, API services can add a binding such as
         * `"/v1/{name=users/*}/operations"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must
         * ensure the name binding is the parent resource, without the operations collection id.
         */
        await gapi.client.file.projects.locations.operations.list({
            filter: "Test string",
            name: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
    }
});
