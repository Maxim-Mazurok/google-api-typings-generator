/* This is stub file for gapi.client.adsensehost definition tests */
/* IMPORTANT.
* This file was automatically generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
* In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
**/
gapi.load('client', () => {
    /** now we can use gapi.client */
    gapi.client.load('adsensehost', 'v4.1', () => {
        /** now we can use gapi.client.adsensehost */

        /** don't forget to authenticate your client before sending any request to resources: */
        /** declare client_id registered in Google Developers Console */
        const client_id = '<<PUT YOUR CLIENT ID HERE>>';
        const scope = [
            /** View and manage your AdSense host data and associated accounts */
            'https://www.googleapis.com/auth/adsensehost',
        ];
        const immediate = false;
        gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
            if (authResult && !authResult.error) {
                /** handle successful authorization */
                run();
            } else {
                /** handle authorization error */
            }
        });
    });

    async function run() {
        /** Get information about the selected associated AdSense account. */
        await gapi.client.adsensehost.accounts.get({
            accountId: "Test string",
        });
        /** Get information about one of the ad clients in the specified publisher's AdSense account. */
        await gapi.client.adsensehost.accounts.adclients.get({
            accountId: "Test string",
            adClientId: "Test string",
        });
        /** List all hosted ad clients in the specified hosted account. */
        await gapi.client.adsensehost.accounts.adclients.list({
            accountId: "Test string",
            maxResults: 42,
            pageToken: "Test string",
        });
        /** Delete the specified ad unit from the specified publisher AdSense account. */
        await gapi.client.adsensehost.accounts.adunits.delete({
            accountId: "Test string",
            adClientId: "Test string",
            adUnitId: "Test string",
        });
        /** Get the specified host ad unit in this AdSense account. */
        await gapi.client.adsensehost.accounts.adunits.get({
            accountId: "Test string",
            adClientId: "Test string",
            adUnitId: "Test string",
        });
        /** Get ad code for the specified ad unit, attaching the specified host custom channels. */
        await gapi.client.adsensehost.accounts.adunits.getAdCode({
            accountId: "Test string",
            adClientId: "Test string",
            adUnitId: "Test string",
            hostCustomChannelId: "Test string",
        });
        /** Insert the supplied ad unit into the specified publisher AdSense account. */
        await gapi.client.adsensehost.accounts.adunits.insert({
            accountId: "Test string",
            adClientId: "Test string",
        }, {
            code: "Test string",
            contentAdsSettings: {
                backupOption: {
                    color: "Test string",
                    type: "Test string",
                    url: "Test string",
                },
                size: "Test string",
                type: "Test string",
            },
            customStyle: {
                colors: {
                    background: "Test string",
                    border: "Test string",
                    text: "Test string",
                    title: "Test string",
                    url: "Test string",
                },
                corners: "Test string",
                font: {
                    family: "Test string",
                    size: "Test string",
                },
                kind: "Test string",
            },
            id: "Test string",
            kind: "Test string",
            mobileContentAdsSettings: {
                markupLanguage: "Test string",
                scriptingLanguage: "Test string",
                size: "Test string",
                type: "Test string",
            },
            name: "Test string",
            status: "Test string",
        });
        /** List all ad units in the specified publisher's AdSense account. */
        await gapi.client.adsensehost.accounts.adunits.list({
            accountId: "Test string",
            adClientId: "Test string",
            includeInactive: true,
            maxResults: 42,
            pageToken: "Test string",
        });
        /** Update the supplied ad unit in the specified publisher AdSense account. This method supports patch semantics. */
        await gapi.client.adsensehost.accounts.adunits.patch({
            accountId: "Test string",
            adClientId: "Test string",
            adUnitId: "Test string",
        }, {
            code: "Test string",
            contentAdsSettings: {
                backupOption: {
                    color: "Test string",
                    type: "Test string",
                    url: "Test string",
                },
                size: "Test string",
                type: "Test string",
            },
            customStyle: {
                colors: {
                    background: "Test string",
                    border: "Test string",
                    text: "Test string",
                    title: "Test string",
                    url: "Test string",
                },
                corners: "Test string",
                font: {
                    family: "Test string",
                    size: "Test string",
                },
                kind: "Test string",
            },
            id: "Test string",
            kind: "Test string",
            mobileContentAdsSettings: {
                markupLanguage: "Test string",
                scriptingLanguage: "Test string",
                size: "Test string",
                type: "Test string",
            },
            name: "Test string",
            status: "Test string",
        });
        /** Update the supplied ad unit in the specified publisher AdSense account. */
        await gapi.client.adsensehost.accounts.adunits.update({
            accountId: "Test string",
            adClientId: "Test string",
        }, {
            code: "Test string",
            contentAdsSettings: {
                backupOption: {
                    color: "Test string",
                    type: "Test string",
                    url: "Test string",
                },
                size: "Test string",
                type: "Test string",
            },
            customStyle: {
                colors: {
                    background: "Test string",
                    border: "Test string",
                    text: "Test string",
                    title: "Test string",
                    url: "Test string",
                },
                corners: "Test string",
                font: {
                    family: "Test string",
                    size: "Test string",
                },
                kind: "Test string",
            },
            id: "Test string",
            kind: "Test string",
            mobileContentAdsSettings: {
                markupLanguage: "Test string",
                scriptingLanguage: "Test string",
                size: "Test string",
                type: "Test string",
            },
            name: "Test string",
            status: "Test string",
        });
        /** Generate an AdSense report based on the report request sent in the query parameters. Returns the result as JSON; to retrieve output in CSV format specify "alt=csv" as a query parameter. */
        await gapi.client.adsensehost.accounts.reports.generate({
            accountId: "Test string",
            dimension: "Test string",
            endDate: "Test string",
            filter: "Test string",
            locale: "Test string",
            maxResults: 42,
            metric: "Test string",
            sort: "Test string",
            startDate: "Test string",
            startIndex: 42,
        });
        /** List hosted accounts associated with this AdSense account by ad client id. */
        await gapi.client.adsensehost.accounts.list({
            filterAdClientId: "Test string",
        });
        /** Get information about one of the ad clients in the specified publisher's AdSense account. */
        await gapi.client.adsensehost.accounts.adclients.get({
            accountId: "Test string",
            adClientId: "Test string",
        });
        /** List all hosted ad clients in the specified hosted account. */
        await gapi.client.adsensehost.accounts.adclients.list({
            accountId: "Test string",
            maxResults: 42,
            pageToken: "Test string",
        });
        /** Delete the specified ad unit from the specified publisher AdSense account. */
        await gapi.client.adsensehost.accounts.adunits.delete({
            accountId: "Test string",
            adClientId: "Test string",
            adUnitId: "Test string",
        });
        /** Get the specified host ad unit in this AdSense account. */
        await gapi.client.adsensehost.accounts.adunits.get({
            accountId: "Test string",
            adClientId: "Test string",
            adUnitId: "Test string",
        });
        /** Get ad code for the specified ad unit, attaching the specified host custom channels. */
        await gapi.client.adsensehost.accounts.adunits.getAdCode({
            accountId: "Test string",
            adClientId: "Test string",
            adUnitId: "Test string",
            hostCustomChannelId: "Test string",
        });
        /** Insert the supplied ad unit into the specified publisher AdSense account. */
        await gapi.client.adsensehost.accounts.adunits.insert({
            accountId: "Test string",
            adClientId: "Test string",
        }, {
            code: "Test string",
            contentAdsSettings: {
                backupOption: {
                    color: "Test string",
                    type: "Test string",
                    url: "Test string",
                },
                size: "Test string",
                type: "Test string",
            },
            customStyle: {
                colors: {
                    background: "Test string",
                    border: "Test string",
                    text: "Test string",
                    title: "Test string",
                    url: "Test string",
                },
                corners: "Test string",
                font: {
                    family: "Test string",
                    size: "Test string",
                },
                kind: "Test string",
            },
            id: "Test string",
            kind: "Test string",
            mobileContentAdsSettings: {
                markupLanguage: "Test string",
                scriptingLanguage: "Test string",
                size: "Test string",
                type: "Test string",
            },
            name: "Test string",
            status: "Test string",
        });
        /** List all ad units in the specified publisher's AdSense account. */
        await gapi.client.adsensehost.accounts.adunits.list({
            accountId: "Test string",
            adClientId: "Test string",
            includeInactive: true,
            maxResults: 42,
            pageToken: "Test string",
        });
        /** Update the supplied ad unit in the specified publisher AdSense account. This method supports patch semantics. */
        await gapi.client.adsensehost.accounts.adunits.patch({
            accountId: "Test string",
            adClientId: "Test string",
            adUnitId: "Test string",
        }, {
            code: "Test string",
            contentAdsSettings: {
                backupOption: {
                    color: "Test string",
                    type: "Test string",
                    url: "Test string",
                },
                size: "Test string",
                type: "Test string",
            },
            customStyle: {
                colors: {
                    background: "Test string",
                    border: "Test string",
                    text: "Test string",
                    title: "Test string",
                    url: "Test string",
                },
                corners: "Test string",
                font: {
                    family: "Test string",
                    size: "Test string",
                },
                kind: "Test string",
            },
            id: "Test string",
            kind: "Test string",
            mobileContentAdsSettings: {
                markupLanguage: "Test string",
                scriptingLanguage: "Test string",
                size: "Test string",
                type: "Test string",
            },
            name: "Test string",
            status: "Test string",
        });
        /** Update the supplied ad unit in the specified publisher AdSense account. */
        await gapi.client.adsensehost.accounts.adunits.update({
            accountId: "Test string",
            adClientId: "Test string",
        }, {
            code: "Test string",
            contentAdsSettings: {
                backupOption: {
                    color: "Test string",
                    type: "Test string",
                    url: "Test string",
                },
                size: "Test string",
                type: "Test string",
            },
            customStyle: {
                colors: {
                    background: "Test string",
                    border: "Test string",
                    text: "Test string",
                    title: "Test string",
                    url: "Test string",
                },
                corners: "Test string",
                font: {
                    family: "Test string",
                    size: "Test string",
                },
                kind: "Test string",
            },
            id: "Test string",
            kind: "Test string",
            mobileContentAdsSettings: {
                markupLanguage: "Test string",
                scriptingLanguage: "Test string",
                size: "Test string",
                type: "Test string",
            },
            name: "Test string",
            status: "Test string",
        });
        /** Generate an AdSense report based on the report request sent in the query parameters. Returns the result as JSON; to retrieve output in CSV format specify "alt=csv" as a query parameter. */
        await gapi.client.adsensehost.accounts.reports.generate({
            accountId: "Test string",
            dimension: "Test string",
            endDate: "Test string",
            filter: "Test string",
            locale: "Test string",
            maxResults: 42,
            metric: "Test string",
            sort: "Test string",
            startDate: "Test string",
            startIndex: 42,
        });
        /** Get information about one of the ad clients in the Host AdSense account. */
        await gapi.client.adsensehost.adclients.get({
            adClientId: "Test string",
        });
        /** List all host ad clients in this AdSense account. */
        await gapi.client.adsensehost.adclients.list({
            maxResults: 42,
            pageToken: "Test string",
        });
        /** Create an association session for initiating an association with an AdSense user. */
        await gapi.client.adsensehost.associationsessions.start({
            callbackUrl: "Test string",
            productCode: "Test string",
            userLocale: "Test string",
            websiteLocale: "Test string",
            websiteUrl: "Test string",
        });
        /** Verify an association session after the association callback returns from AdSense signup. */
        await gapi.client.adsensehost.associationsessions.verify({
            token: "Test string",
        });
        /** Delete a specific custom channel from the host AdSense account. */
        await gapi.client.adsensehost.customchannels.delete({
            adClientId: "Test string",
            customChannelId: "Test string",
        });
        /** Get a specific custom channel from the host AdSense account. */
        await gapi.client.adsensehost.customchannels.get({
            adClientId: "Test string",
            customChannelId: "Test string",
        });
        /** Add a new custom channel to the host AdSense account. */
        await gapi.client.adsensehost.customchannels.insert({
            adClientId: "Test string",
        }, {
            code: "Test string",
            id: "Test string",
            kind: "Test string",
            name: "Test string",
        });
        /** List all host custom channels in this AdSense account. */
        await gapi.client.adsensehost.customchannels.list({
            adClientId: "Test string",
            maxResults: 42,
            pageToken: "Test string",
        });
        /** Update a custom channel in the host AdSense account. This method supports patch semantics. */
        await gapi.client.adsensehost.customchannels.patch({
            adClientId: "Test string",
            customChannelId: "Test string",
        }, {
            code: "Test string",
            id: "Test string",
            kind: "Test string",
            name: "Test string",
        });
        /** Update a custom channel in the host AdSense account. */
        await gapi.client.adsensehost.customchannels.update({
            adClientId: "Test string",
        }, {
            code: "Test string",
            id: "Test string",
            kind: "Test string",
            name: "Test string",
        });
        /** Generate an AdSense report based on the report request sent in the query parameters. Returns the result as JSON; to retrieve output in CSV format specify "alt=csv" as a query parameter. */
        await gapi.client.adsensehost.reports.generate({
            dimension: "Test string",
            endDate: "Test string",
            filter: "Test string",
            locale: "Test string",
            maxResults: 42,
            metric: "Test string",
            sort: "Test string",
            startDate: "Test string",
            startIndex: 42,
        });
        /** Delete a URL channel from the host AdSense account. */
        await gapi.client.adsensehost.urlchannels.delete({
            adClientId: "Test string",
            urlChannelId: "Test string",
        });
        /** Add a new URL channel to the host AdSense account. */
        await gapi.client.adsensehost.urlchannels.insert({
            adClientId: "Test string",
        }, {
            id: "Test string",
            kind: "Test string",
            urlPattern: "Test string",
        });
        /** List all host URL channels in the host AdSense account. */
        await gapi.client.adsensehost.urlchannels.list({
            adClientId: "Test string",
            maxResults: 42,
            pageToken: "Test string",
        });
    }
});
