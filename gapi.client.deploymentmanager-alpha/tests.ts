/* This is stub file for gapi.client.deploymentmanager-alpha definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20250505

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://deploymentmanager.googleapis.com/$discovery/rest?version=alpha',
  );
  /** now we can use gapi.client.deploymentmanager */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
    'https://www.googleapis.com/auth/cloud-platform',
    /** View your data across Google Cloud services and see the email address of your Google Account */
    'https://www.googleapis.com/auth/cloud-platform.read-only',
    /** View and manage your Google Cloud Platform management resources and deployment status information */
    'https://www.googleapis.com/auth/ndev.cloudman',
    /** View your Google Cloud Platform management resources and deployment status information */
    'https://www.googleapis.com/auth/ndev.cloudman.readonly',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Deletes a composite type. */
    await gapi.client.deploymentmanager.compositeTypes.delete({
      compositeType: 'Test string',
      'header.bypassBillingFilter': true,
      project: 'Test string',
    });
    /** Gets information about a specific composite type. */
    await gapi.client.deploymentmanager.compositeTypes.get({
      compositeType: 'Test string',
      'header.bypassBillingFilter': true,
      project: 'Test string',
    });
    /** Creates a composite type. */
    await gapi.client.deploymentmanager.compositeTypes.insert(
      {
        'header.bypassBillingFilter': true,
        project: 'Test string',
      },
      {
        description: 'Test string',
        id: 'Test string',
        insertTime: 'Test string',
        labels: [
          {
            key: 'Test string',
            value: 'Test string',
          },
        ],
        name: 'Test string',
        operation: {
          clientOperationId: 'Test string',
          creationTimestamp: 'Test string',
          description: 'Test string',
          endTime: 'Test string',
          error: {
            errors: [
              {
                arguments: ['Test string'],
                code: 'Test string',
                debugInfo: {
                  detail: 'Test string',
                  stackEntries: ['Test string'],
                },
                errorDetails: [
                  {
                    errorInfo: {
                      domain: 'Test string',
                      metadatas: {
                        A: 'Test string',
                      },
                      reason: 'Test string',
                    },
                    help: {
                      links: [
                        {
                          description: 'Test string',
                          url: 'Test string',
                        },
                      ],
                    },
                    localizedMessage: {
                      locale: 'Test string',
                      message: 'Test string',
                    },
                    quotaInfo: {
                      dimensions: {
                        A: 'Test string',
                      },
                      futureLimit: 42,
                      limit: 42,
                      limitName: 'Test string',
                      metricName: 'Test string',
                      rolloutStatus: 'Test string',
                    },
                  },
                ],
                location: 'Test string',
                message: 'Test string',
              },
            ],
          },
          httpErrorMessage: 'Test string',
          httpErrorStatusCode: 42,
          id: 'Test string',
          insertTime: 'Test string',
          instancesBulkInsertOperationMetadata: {
            machineType: 'Test string',
            perLocationStatus: {
              A: {
                createdVmCount: 42,
                deletedVmCount: 42,
                failedToCreateVmCount: 42,
                status: 'Test string',
                targetVmCount: 42,
              },
            },
          },
          kind: 'Test string',
          name: 'Test string',
          operationGroupId: 'Test string',
          operationType: 'Test string',
          progress: 42,
          region: 'Test string',
          selfLink: 'Test string',
          selfLinkWithId: 'Test string',
          setAutoscalerLinkOperationMetadata: {
            zonalIgmIds: ['Test string'],
          },
          setCommonInstanceMetadataOperationMetadata: {
            clientOperationId: 'Test string',
            perLocationOperations: {
              A: {
                error: {
                  code: 42,
                  details: [
                    {
                      A: 42,
                    },
                  ],
                  message: 'Test string',
                },
                state: 'Test string',
              },
            },
          },
          startTime: 'Test string',
          status: 'Test string',
          statusMessage: 'Test string',
          targetId: 'Test string',
          targetLink: 'Test string',
          user: 'Test string',
          warnings: [
            {
              code: 'Test string',
              data: [
                {
                  key: 'Test string',
                  value: 'Test string',
                },
              ],
              message: 'Test string',
            },
          ],
          zone: 'Test string',
        },
        selfLink: 'Test string',
        status: 'Test string',
        templateContents: {
          imports: [
            {
              content: 'Test string',
              name: 'Test string',
            },
          ],
          interpreter: 'Test string',
          mainTemplate: 'Test string',
          schema: 'Test string',
          template: 'Test string',
        },
      },
    );
    /** Lists all composite types for Deployment Manager. */
    await gapi.client.deploymentmanager.compositeTypes.list({
      filter: 'Test string',
      maxResults: 42,
      orderBy: 'Test string',
      pageToken: 'Test string',
      project: 'Test string',
    });
    /** Patches a composite type. */
    await gapi.client.deploymentmanager.compositeTypes.patch(
      {
        compositeType: 'Test string',
        'header.bypassBillingFilter': true,
        project: 'Test string',
      },
      {
        description: 'Test string',
        id: 'Test string',
        insertTime: 'Test string',
        labels: [
          {
            key: 'Test string',
            value: 'Test string',
          },
        ],
        name: 'Test string',
        operation: {
          clientOperationId: 'Test string',
          creationTimestamp: 'Test string',
          description: 'Test string',
          endTime: 'Test string',
          error: {
            errors: [
              {
                arguments: ['Test string'],
                code: 'Test string',
                debugInfo: {
                  detail: 'Test string',
                  stackEntries: ['Test string'],
                },
                errorDetails: [
                  {
                    errorInfo: {
                      domain: 'Test string',
                      metadatas: {
                        A: 'Test string',
                      },
                      reason: 'Test string',
                    },
                    help: {
                      links: [
                        {
                          description: 'Test string',
                          url: 'Test string',
                        },
                      ],
                    },
                    localizedMessage: {
                      locale: 'Test string',
                      message: 'Test string',
                    },
                    quotaInfo: {
                      dimensions: {
                        A: 'Test string',
                      },
                      futureLimit: 42,
                      limit: 42,
                      limitName: 'Test string',
                      metricName: 'Test string',
                      rolloutStatus: 'Test string',
                    },
                  },
                ],
                location: 'Test string',
                message: 'Test string',
              },
            ],
          },
          httpErrorMessage: 'Test string',
          httpErrorStatusCode: 42,
          id: 'Test string',
          insertTime: 'Test string',
          instancesBulkInsertOperationMetadata: {
            machineType: 'Test string',
            perLocationStatus: {
              A: {
                createdVmCount: 42,
                deletedVmCount: 42,
                failedToCreateVmCount: 42,
                status: 'Test string',
                targetVmCount: 42,
              },
            },
          },
          kind: 'Test string',
          name: 'Test string',
          operationGroupId: 'Test string',
          operationType: 'Test string',
          progress: 42,
          region: 'Test string',
          selfLink: 'Test string',
          selfLinkWithId: 'Test string',
          setAutoscalerLinkOperationMetadata: {
            zonalIgmIds: ['Test string'],
          },
          setCommonInstanceMetadataOperationMetadata: {
            clientOperationId: 'Test string',
            perLocationOperations: {
              A: {
                error: {
                  code: 42,
                  details: [
                    {
                      A: 42,
                    },
                  ],
                  message: 'Test string',
                },
                state: 'Test string',
              },
            },
          },
          startTime: 'Test string',
          status: 'Test string',
          statusMessage: 'Test string',
          targetId: 'Test string',
          targetLink: 'Test string',
          user: 'Test string',
          warnings: [
            {
              code: 'Test string',
              data: [
                {
                  key: 'Test string',
                  value: 'Test string',
                },
              ],
              message: 'Test string',
            },
          ],
          zone: 'Test string',
        },
        selfLink: 'Test string',
        status: 'Test string',
        templateContents: {
          imports: [
            {
              content: 'Test string',
              name: 'Test string',
            },
          ],
          interpreter: 'Test string',
          mainTemplate: 'Test string',
          schema: 'Test string',
          template: 'Test string',
        },
      },
    );
    /** Updates a composite type. */
    await gapi.client.deploymentmanager.compositeTypes.update(
      {
        compositeType: 'Test string',
        'header.bypassBillingFilter': true,
        project: 'Test string',
      },
      {
        description: 'Test string',
        id: 'Test string',
        insertTime: 'Test string',
        labels: [
          {
            key: 'Test string',
            value: 'Test string',
          },
        ],
        name: 'Test string',
        operation: {
          clientOperationId: 'Test string',
          creationTimestamp: 'Test string',
          description: 'Test string',
          endTime: 'Test string',
          error: {
            errors: [
              {
                arguments: ['Test string'],
                code: 'Test string',
                debugInfo: {
                  detail: 'Test string',
                  stackEntries: ['Test string'],
                },
                errorDetails: [
                  {
                    errorInfo: {
                      domain: 'Test string',
                      metadatas: {
                        A: 'Test string',
                      },
                      reason: 'Test string',
                    },
                    help: {
                      links: [
                        {
                          description: 'Test string',
                          url: 'Test string',
                        },
                      ],
                    },
                    localizedMessage: {
                      locale: 'Test string',
                      message: 'Test string',
                    },
                    quotaInfo: {
                      dimensions: {
                        A: 'Test string',
                      },
                      futureLimit: 42,
                      limit: 42,
                      limitName: 'Test string',
                      metricName: 'Test string',
                      rolloutStatus: 'Test string',
                    },
                  },
                ],
                location: 'Test string',
                message: 'Test string',
              },
            ],
          },
          httpErrorMessage: 'Test string',
          httpErrorStatusCode: 42,
          id: 'Test string',
          insertTime: 'Test string',
          instancesBulkInsertOperationMetadata: {
            machineType: 'Test string',
            perLocationStatus: {
              A: {
                createdVmCount: 42,
                deletedVmCount: 42,
                failedToCreateVmCount: 42,
                status: 'Test string',
                targetVmCount: 42,
              },
            },
          },
          kind: 'Test string',
          name: 'Test string',
          operationGroupId: 'Test string',
          operationType: 'Test string',
          progress: 42,
          region: 'Test string',
          selfLink: 'Test string',
          selfLinkWithId: 'Test string',
          setAutoscalerLinkOperationMetadata: {
            zonalIgmIds: ['Test string'],
          },
          setCommonInstanceMetadataOperationMetadata: {
            clientOperationId: 'Test string',
            perLocationOperations: {
              A: {
                error: {
                  code: 42,
                  details: [
                    {
                      A: 42,
                    },
                  ],
                  message: 'Test string',
                },
                state: 'Test string',
              },
            },
          },
          startTime: 'Test string',
          status: 'Test string',
          statusMessage: 'Test string',
          targetId: 'Test string',
          targetLink: 'Test string',
          user: 'Test string',
          warnings: [
            {
              code: 'Test string',
              data: [
                {
                  key: 'Test string',
                  value: 'Test string',
                },
              ],
              message: 'Test string',
            },
          ],
          zone: 'Test string',
        },
        selfLink: 'Test string',
        status: 'Test string',
        templateContents: {
          imports: [
            {
              content: 'Test string',
              name: 'Test string',
            },
          ],
          interpreter: 'Test string',
          mainTemplate: 'Test string',
          schema: 'Test string',
          template: 'Test string',
        },
      },
    );
    /** Cancels and removes the preview currently associated with the deployment. */
    await gapi.client.deploymentmanager.deployments.cancelPreview(
      {
        deployment: 'Test string',
        project: 'Test string',
      },
      {
        fingerprint: 'Test string',
      },
    );
    /** Deletes a deployment and all of the resources in the deployment. */
    await gapi.client.deploymentmanager.deployments.delete({
      deletePolicy: 'Test string',
      deployment: 'Test string',
      'header.bypassBillingFilter': true,
      project: 'Test string',
    });
    /** Gets information about a specific deployment. */
    await gapi.client.deploymentmanager.deployments.get({
      deployment: 'Test string',
      'header.bypassBillingFilter': true,
      project: 'Test string',
    });
    /** Gets the access control policy for a resource. May be empty if no such policy or resource exists. */
    await gapi.client.deploymentmanager.deployments.getIamPolicy({
      'header.bypassBillingFilter': true,
      optionsRequestedPolicyVersion: 42,
      project: 'Test string',
      resource: 'Test string',
    });
    /** Creates a deployment and all of the resources described by the deployment manifest. */
    await gapi.client.deploymentmanager.deployments.insert(
      {
        createPolicy: 'Test string',
        'header.bypassBillingFilter': true,
        preview: true,
        project: 'Test string',
      },
      {
        credential: {
          basicAuth: {
            password: 'Test string',
            user: 'Test string',
          },
          serviceAccount: {
            email: 'Test string',
          },
          useProjectDefault: true,
        },
        description: 'Test string',
        fingerprint: 'Test string',
        id: 'Test string',
        insertTime: 'Test string',
        labels: [
          {
            key: 'Test string',
            value: 'Test string',
          },
        ],
        manifest: 'Test string',
        name: 'Test string',
        operation: {
          clientOperationId: 'Test string',
          creationTimestamp: 'Test string',
          description: 'Test string',
          endTime: 'Test string',
          error: {
            errors: [
              {
                arguments: ['Test string'],
                code: 'Test string',
                debugInfo: {
                  detail: 'Test string',
                  stackEntries: ['Test string'],
                },
                errorDetails: [
                  {
                    errorInfo: {
                      domain: 'Test string',
                      metadatas: {
                        A: 'Test string',
                      },
                      reason: 'Test string',
                    },
                    help: {
                      links: [
                        {
                          description: 'Test string',
                          url: 'Test string',
                        },
                      ],
                    },
                    localizedMessage: {
                      locale: 'Test string',
                      message: 'Test string',
                    },
                    quotaInfo: {
                      dimensions: {
                        A: 'Test string',
                      },
                      futureLimit: 42,
                      limit: 42,
                      limitName: 'Test string',
                      metricName: 'Test string',
                      rolloutStatus: 'Test string',
                    },
                  },
                ],
                location: 'Test string',
                message: 'Test string',
              },
            ],
          },
          httpErrorMessage: 'Test string',
          httpErrorStatusCode: 42,
          id: 'Test string',
          insertTime: 'Test string',
          instancesBulkInsertOperationMetadata: {
            machineType: 'Test string',
            perLocationStatus: {
              A: {
                createdVmCount: 42,
                deletedVmCount: 42,
                failedToCreateVmCount: 42,
                status: 'Test string',
                targetVmCount: 42,
              },
            },
          },
          kind: 'Test string',
          name: 'Test string',
          operationGroupId: 'Test string',
          operationType: 'Test string',
          progress: 42,
          region: 'Test string',
          selfLink: 'Test string',
          selfLinkWithId: 'Test string',
          setAutoscalerLinkOperationMetadata: {
            zonalIgmIds: ['Test string'],
          },
          setCommonInstanceMetadataOperationMetadata: {
            clientOperationId: 'Test string',
            perLocationOperations: {
              A: {
                error: {
                  code: 42,
                  details: [
                    {
                      A: 42,
                    },
                  ],
                  message: 'Test string',
                },
                state: 'Test string',
              },
            },
          },
          startTime: 'Test string',
          status: 'Test string',
          statusMessage: 'Test string',
          targetId: 'Test string',
          targetLink: 'Test string',
          user: 'Test string',
          warnings: [
            {
              code: 'Test string',
              data: [
                {
                  key: 'Test string',
                  value: 'Test string',
                },
              ],
              message: 'Test string',
            },
          ],
          zone: 'Test string',
        },
        outputs: [
          {
            key: 'Test string',
            value: 'Test string',
          },
        ],
        selfLink: 'Test string',
        target: {
          config: {
            content: 'Test string',
          },
          imports: [
            {
              content: 'Test string',
              name: 'Test string',
            },
          ],
        },
        update: {
          credential: {
            basicAuth: {
              password: 'Test string',
              user: 'Test string',
            },
            serviceAccount: {
              email: 'Test string',
            },
            useProjectDefault: true,
          },
          description: 'Test string',
          labels: [
            {
              key: 'Test string',
              value: 'Test string',
            },
          ],
          manifest: 'Test string',
        },
        updateTime: 'Test string',
      },
    );
    /** Lists all deployments for a given project. */
    await gapi.client.deploymentmanager.deployments.list({
      filter: 'Test string',
      maxResults: 42,
      orderBy: 'Test string',
      pageToken: 'Test string',
      project: 'Test string',
    });
    /** Patches a deployment and all of the resources described by the deployment manifest. */
    await gapi.client.deploymentmanager.deployments.patch(
      {
        createPolicy: 'Test string',
        deletePolicy: 'Test string',
        deployment: 'Test string',
        'header.bypassBillingFilter': true,
        preview: true,
        project: 'Test string',
      },
      {
        credential: {
          basicAuth: {
            password: 'Test string',
            user: 'Test string',
          },
          serviceAccount: {
            email: 'Test string',
          },
          useProjectDefault: true,
        },
        description: 'Test string',
        fingerprint: 'Test string',
        id: 'Test string',
        insertTime: 'Test string',
        labels: [
          {
            key: 'Test string',
            value: 'Test string',
          },
        ],
        manifest: 'Test string',
        name: 'Test string',
        operation: {
          clientOperationId: 'Test string',
          creationTimestamp: 'Test string',
          description: 'Test string',
          endTime: 'Test string',
          error: {
            errors: [
              {
                arguments: ['Test string'],
                code: 'Test string',
                debugInfo: {
                  detail: 'Test string',
                  stackEntries: ['Test string'],
                },
                errorDetails: [
                  {
                    errorInfo: {
                      domain: 'Test string',
                      metadatas: {
                        A: 'Test string',
                      },
                      reason: 'Test string',
                    },
                    help: {
                      links: [
                        {
                          description: 'Test string',
                          url: 'Test string',
                        },
                      ],
                    },
                    localizedMessage: {
                      locale: 'Test string',
                      message: 'Test string',
                    },
                    quotaInfo: {
                      dimensions: {
                        A: 'Test string',
                      },
                      futureLimit: 42,
                      limit: 42,
                      limitName: 'Test string',
                      metricName: 'Test string',
                      rolloutStatus: 'Test string',
                    },
                  },
                ],
                location: 'Test string',
                message: 'Test string',
              },
            ],
          },
          httpErrorMessage: 'Test string',
          httpErrorStatusCode: 42,
          id: 'Test string',
          insertTime: 'Test string',
          instancesBulkInsertOperationMetadata: {
            machineType: 'Test string',
            perLocationStatus: {
              A: {
                createdVmCount: 42,
                deletedVmCount: 42,
                failedToCreateVmCount: 42,
                status: 'Test string',
                targetVmCount: 42,
              },
            },
          },
          kind: 'Test string',
          name: 'Test string',
          operationGroupId: 'Test string',
          operationType: 'Test string',
          progress: 42,
          region: 'Test string',
          selfLink: 'Test string',
          selfLinkWithId: 'Test string',
          setAutoscalerLinkOperationMetadata: {
            zonalIgmIds: ['Test string'],
          },
          setCommonInstanceMetadataOperationMetadata: {
            clientOperationId: 'Test string',
            perLocationOperations: {
              A: {
                error: {
                  code: 42,
                  details: [
                    {
                      A: 42,
                    },
                  ],
                  message: 'Test string',
                },
                state: 'Test string',
              },
            },
          },
          startTime: 'Test string',
          status: 'Test string',
          statusMessage: 'Test string',
          targetId: 'Test string',
          targetLink: 'Test string',
          user: 'Test string',
          warnings: [
            {
              code: 'Test string',
              data: [
                {
                  key: 'Test string',
                  value: 'Test string',
                },
              ],
              message: 'Test string',
            },
          ],
          zone: 'Test string',
        },
        outputs: [
          {
            key: 'Test string',
            value: 'Test string',
          },
        ],
        selfLink: 'Test string',
        target: {
          config: {
            content: 'Test string',
          },
          imports: [
            {
              content: 'Test string',
              name: 'Test string',
            },
          ],
        },
        update: {
          credential: {
            basicAuth: {
              password: 'Test string',
              user: 'Test string',
            },
            serviceAccount: {
              email: 'Test string',
            },
            useProjectDefault: true,
          },
          description: 'Test string',
          labels: [
            {
              key: 'Test string',
              value: 'Test string',
            },
          ],
          manifest: 'Test string',
        },
        updateTime: 'Test string',
      },
    );
    /** Sets the access control policy on the specified resource. Replaces any existing policy. */
    await gapi.client.deploymentmanager.deployments.setIamPolicy(
      {
        project: 'Test string',
        resource: 'Test string',
      },
      {
        bindings: [
          {
            condition: {
              description: 'Test string',
              expression: 'Test string',
              location: 'Test string',
              title: 'Test string',
            },
            members: ['Test string'],
            role: 'Test string',
          },
        ],
        etag: 'Test string',
        policy: {
          auditConfigs: [
            {
              auditLogConfigs: [
                {
                  exemptedMembers: ['Test string'],
                  logType: 'Test string',
                },
              ],
              service: 'Test string',
            },
          ],
          bindings: [
            {
              condition: {
                description: 'Test string',
                expression: 'Test string',
                location: 'Test string',
                title: 'Test string',
              },
              members: ['Test string'],
              role: 'Test string',
            },
          ],
          etag: 'Test string',
          version: 42,
        },
        updateMask: 'Test string',
      },
    );
    /** Stops an ongoing operation. This does not roll back any work that has already been completed, but prevents any new work from being started. */
    await gapi.client.deploymentmanager.deployments.stop(
      {
        deployment: 'Test string',
        project: 'Test string',
      },
      {
        fingerprint: 'Test string',
      },
    );
    /** Returns permissions that a caller has on the specified resource. */
    await gapi.client.deploymentmanager.deployments.testIamPermissions(
      {
        'header.bypassBillingFilter': true,
        project: 'Test string',
        resource: 'Test string',
      },
      {
        permissions: ['Test string'],
      },
    );
    /** Updates a deployment and all of the resources described by the deployment manifest. */
    await gapi.client.deploymentmanager.deployments.update(
      {
        createPolicy: 'Test string',
        deletePolicy: 'Test string',
        deployment: 'Test string',
        'header.bypassBillingFilter': true,
        preview: true,
        project: 'Test string',
      },
      {
        credential: {
          basicAuth: {
            password: 'Test string',
            user: 'Test string',
          },
          serviceAccount: {
            email: 'Test string',
          },
          useProjectDefault: true,
        },
        description: 'Test string',
        fingerprint: 'Test string',
        id: 'Test string',
        insertTime: 'Test string',
        labels: [
          {
            key: 'Test string',
            value: 'Test string',
          },
        ],
        manifest: 'Test string',
        name: 'Test string',
        operation: {
          clientOperationId: 'Test string',
          creationTimestamp: 'Test string',
          description: 'Test string',
          endTime: 'Test string',
          error: {
            errors: [
              {
                arguments: ['Test string'],
                code: 'Test string',
                debugInfo: {
                  detail: 'Test string',
                  stackEntries: ['Test string'],
                },
                errorDetails: [
                  {
                    errorInfo: {
                      domain: 'Test string',
                      metadatas: {
                        A: 'Test string',
                      },
                      reason: 'Test string',
                    },
                    help: {
                      links: [
                        {
                          description: 'Test string',
                          url: 'Test string',
                        },
                      ],
                    },
                    localizedMessage: {
                      locale: 'Test string',
                      message: 'Test string',
                    },
                    quotaInfo: {
                      dimensions: {
                        A: 'Test string',
                      },
                      futureLimit: 42,
                      limit: 42,
                      limitName: 'Test string',
                      metricName: 'Test string',
                      rolloutStatus: 'Test string',
                    },
                  },
                ],
                location: 'Test string',
                message: 'Test string',
              },
            ],
          },
          httpErrorMessage: 'Test string',
          httpErrorStatusCode: 42,
          id: 'Test string',
          insertTime: 'Test string',
          instancesBulkInsertOperationMetadata: {
            machineType: 'Test string',
            perLocationStatus: {
              A: {
                createdVmCount: 42,
                deletedVmCount: 42,
                failedToCreateVmCount: 42,
                status: 'Test string',
                targetVmCount: 42,
              },
            },
          },
          kind: 'Test string',
          name: 'Test string',
          operationGroupId: 'Test string',
          operationType: 'Test string',
          progress: 42,
          region: 'Test string',
          selfLink: 'Test string',
          selfLinkWithId: 'Test string',
          setAutoscalerLinkOperationMetadata: {
            zonalIgmIds: ['Test string'],
          },
          setCommonInstanceMetadataOperationMetadata: {
            clientOperationId: 'Test string',
            perLocationOperations: {
              A: {
                error: {
                  code: 42,
                  details: [
                    {
                      A: 42,
                    },
                  ],
                  message: 'Test string',
                },
                state: 'Test string',
              },
            },
          },
          startTime: 'Test string',
          status: 'Test string',
          statusMessage: 'Test string',
          targetId: 'Test string',
          targetLink: 'Test string',
          user: 'Test string',
          warnings: [
            {
              code: 'Test string',
              data: [
                {
                  key: 'Test string',
                  value: 'Test string',
                },
              ],
              message: 'Test string',
            },
          ],
          zone: 'Test string',
        },
        outputs: [
          {
            key: 'Test string',
            value: 'Test string',
          },
        ],
        selfLink: 'Test string',
        target: {
          config: {
            content: 'Test string',
          },
          imports: [
            {
              content: 'Test string',
              name: 'Test string',
            },
          ],
        },
        update: {
          credential: {
            basicAuth: {
              password: 'Test string',
              user: 'Test string',
            },
            serviceAccount: {
              email: 'Test string',
            },
            useProjectDefault: true,
          },
          description: 'Test string',
          labels: [
            {
              key: 'Test string',
              value: 'Test string',
            },
          ],
          manifest: 'Test string',
        },
        updateTime: 'Test string',
      },
    );
    /** Gets information about a specific manifest. */
    await gapi.client.deploymentmanager.manifests.get({
      deployment: 'Test string',
      'header.bypassBillingFilter': true,
      manifest: 'Test string',
      project: 'Test string',
    });
    /** Lists all manifests for a given deployment. */
    await gapi.client.deploymentmanager.manifests.list({
      deployment: 'Test string',
      filter: 'Test string',
      maxResults: 42,
      orderBy: 'Test string',
      pageToken: 'Test string',
      project: 'Test string',
    });
    /** Gets information about a specific operation. */
    await gapi.client.deploymentmanager.operations.get({
      'header.bypassBillingFilter': true,
      operation: 'Test string',
      project: 'Test string',
    });
    /** Lists all operations for a project. */
    await gapi.client.deploymentmanager.operations.list({
      filter: 'Test string',
      maxResults: 42,
      orderBy: 'Test string',
      pageToken: 'Test string',
      project: 'Test string',
    });
    /** Gets information about a single resource. */
    await gapi.client.deploymentmanager.resources.get({
      deployment: 'Test string',
      'header.bypassBillingFilter': true,
      project: 'Test string',
      resource: 'Test string',
    });
    /** Lists all resources in a given deployment. */
    await gapi.client.deploymentmanager.resources.list({
      deployment: 'Test string',
      filter: 'Test string',
      maxResults: 42,
      orderBy: 'Test string',
      pageToken: 'Test string',
      project: 'Test string',
    });
    /** Deletes a type provider. */
    await gapi.client.deploymentmanager.typeProviders.delete({
      'header.bypassBillingFilter': true,
      project: 'Test string',
      typeProvider: 'Test string',
    });
    /** Gets information about a specific type provider. */
    await gapi.client.deploymentmanager.typeProviders.get({
      'header.bypassBillingFilter': true,
      project: 'Test string',
      typeProvider: 'Test string',
    });
    /** Gets a type info for a type provided by a TypeProvider. */
    await gapi.client.deploymentmanager.typeProviders.getType({
      'header.bypassBillingFilter': true,
      project: 'Test string',
      type: 'Test string',
      typeProvider: 'Test string',
    });
    /** Creates a type provider. */
    await gapi.client.deploymentmanager.typeProviders.insert(
      {
        'header.bypassBillingFilter': true,
        project: 'Test string',
      },
      {
        collectionOverrides: [
          {
            collection: 'Test string',
            methodMap: {
              create: 'Test string',
              delete: 'Test string',
              get: 'Test string',
              setIamPolicy: 'Test string',
              update: 'Test string',
            },
            options: {
              asyncOptions: [
                {
                  methodMatch: 'Test string',
                  pollingOptions: {
                    diagnostics: [
                      {
                        field: 'Test string',
                        level: 'Test string',
                      },
                    ],
                    failCondition: 'Test string',
                    finishCondition: 'Test string',
                    pollingLink: 'Test string',
                    targetLink: 'Test string',
                  },
                },
              ],
              inputMappings: [
                {
                  fieldName: 'Test string',
                  location: 'Test string',
                  methodMatch: 'Test string',
                  value: 'Test string',
                },
              ],
              nameProperty: 'Test string',
              validationOptions: {
                schemaValidation: 'Test string',
                undeclaredProperties: 'Test string',
              },
            },
          },
        ],
        credential: {
          basicAuth: {
            password: 'Test string',
            user: 'Test string',
          },
          serviceAccount: {
            email: 'Test string',
          },
          useProjectDefault: true,
        },
        customCertificateAuthorityRoots: ['Test string'],
        description: 'Test string',
        descriptorUrl: 'Test string',
        id: 'Test string',
        insertTime: 'Test string',
        labels: [
          {
            key: 'Test string',
            value: 'Test string',
          },
        ],
        name: 'Test string',
        operation: {
          clientOperationId: 'Test string',
          creationTimestamp: 'Test string',
          description: 'Test string',
          endTime: 'Test string',
          error: {
            errors: [
              {
                arguments: ['Test string'],
                code: 'Test string',
                debugInfo: {
                  detail: 'Test string',
                  stackEntries: ['Test string'],
                },
                errorDetails: [
                  {
                    errorInfo: {
                      domain: 'Test string',
                      metadatas: {
                        A: 'Test string',
                      },
                      reason: 'Test string',
                    },
                    help: {
                      links: [
                        {
                          description: 'Test string',
                          url: 'Test string',
                        },
                      ],
                    },
                    localizedMessage: {
                      locale: 'Test string',
                      message: 'Test string',
                    },
                    quotaInfo: {
                      dimensions: {
                        A: 'Test string',
                      },
                      futureLimit: 42,
                      limit: 42,
                      limitName: 'Test string',
                      metricName: 'Test string',
                      rolloutStatus: 'Test string',
                    },
                  },
                ],
                location: 'Test string',
                message: 'Test string',
              },
            ],
          },
          httpErrorMessage: 'Test string',
          httpErrorStatusCode: 42,
          id: 'Test string',
          insertTime: 'Test string',
          instancesBulkInsertOperationMetadata: {
            machineType: 'Test string',
            perLocationStatus: {
              A: {
                createdVmCount: 42,
                deletedVmCount: 42,
                failedToCreateVmCount: 42,
                status: 'Test string',
                targetVmCount: 42,
              },
            },
          },
          kind: 'Test string',
          name: 'Test string',
          operationGroupId: 'Test string',
          operationType: 'Test string',
          progress: 42,
          region: 'Test string',
          selfLink: 'Test string',
          selfLinkWithId: 'Test string',
          setAutoscalerLinkOperationMetadata: {
            zonalIgmIds: ['Test string'],
          },
          setCommonInstanceMetadataOperationMetadata: {
            clientOperationId: 'Test string',
            perLocationOperations: {
              A: {
                error: {
                  code: 42,
                  details: [
                    {
                      A: 42,
                    },
                  ],
                  message: 'Test string',
                },
                state: 'Test string',
              },
            },
          },
          startTime: 'Test string',
          status: 'Test string',
          statusMessage: 'Test string',
          targetId: 'Test string',
          targetLink: 'Test string',
          user: 'Test string',
          warnings: [
            {
              code: 'Test string',
              data: [
                {
                  key: 'Test string',
                  value: 'Test string',
                },
              ],
              message: 'Test string',
            },
          ],
          zone: 'Test string',
        },
        options: {
          asyncOptions: [
            {
              methodMatch: 'Test string',
              pollingOptions: {
                diagnostics: [
                  {
                    field: 'Test string',
                    level: 'Test string',
                  },
                ],
                failCondition: 'Test string',
                finishCondition: 'Test string',
                pollingLink: 'Test string',
                targetLink: 'Test string',
              },
            },
          ],
          inputMappings: [
            {
              fieldName: 'Test string',
              location: 'Test string',
              methodMatch: 'Test string',
              value: 'Test string',
            },
          ],
          nameProperty: 'Test string',
          validationOptions: {
            schemaValidation: 'Test string',
            undeclaredProperties: 'Test string',
          },
        },
        selfLink: 'Test string',
      },
    );
    /** Lists all resource type providers for Deployment Manager. */
    await gapi.client.deploymentmanager.typeProviders.list({
      filter: 'Test string',
      maxResults: 42,
      orderBy: 'Test string',
      pageToken: 'Test string',
      project: 'Test string',
    });
    /** Lists all the type info for a TypeProvider. */
    await gapi.client.deploymentmanager.typeProviders.listTypes({
      filter: 'Test string',
      maxResults: 42,
      orderBy: 'Test string',
      pageToken: 'Test string',
      project: 'Test string',
      typeProvider: 'Test string',
    });
    /** Patches a type provider. */
    await gapi.client.deploymentmanager.typeProviders.patch(
      {
        'header.bypassBillingFilter': true,
        project: 'Test string',
        typeProvider: 'Test string',
      },
      {
        collectionOverrides: [
          {
            collection: 'Test string',
            methodMap: {
              create: 'Test string',
              delete: 'Test string',
              get: 'Test string',
              setIamPolicy: 'Test string',
              update: 'Test string',
            },
            options: {
              asyncOptions: [
                {
                  methodMatch: 'Test string',
                  pollingOptions: {
                    diagnostics: [
                      {
                        field: 'Test string',
                        level: 'Test string',
                      },
                    ],
                    failCondition: 'Test string',
                    finishCondition: 'Test string',
                    pollingLink: 'Test string',
                    targetLink: 'Test string',
                  },
                },
              ],
              inputMappings: [
                {
                  fieldName: 'Test string',
                  location: 'Test string',
                  methodMatch: 'Test string',
                  value: 'Test string',
                },
              ],
              nameProperty: 'Test string',
              validationOptions: {
                schemaValidation: 'Test string',
                undeclaredProperties: 'Test string',
              },
            },
          },
        ],
        credential: {
          basicAuth: {
            password: 'Test string',
            user: 'Test string',
          },
          serviceAccount: {
            email: 'Test string',
          },
          useProjectDefault: true,
        },
        customCertificateAuthorityRoots: ['Test string'],
        description: 'Test string',
        descriptorUrl: 'Test string',
        id: 'Test string',
        insertTime: 'Test string',
        labels: [
          {
            key: 'Test string',
            value: 'Test string',
          },
        ],
        name: 'Test string',
        operation: {
          clientOperationId: 'Test string',
          creationTimestamp: 'Test string',
          description: 'Test string',
          endTime: 'Test string',
          error: {
            errors: [
              {
                arguments: ['Test string'],
                code: 'Test string',
                debugInfo: {
                  detail: 'Test string',
                  stackEntries: ['Test string'],
                },
                errorDetails: [
                  {
                    errorInfo: {
                      domain: 'Test string',
                      metadatas: {
                        A: 'Test string',
                      },
                      reason: 'Test string',
                    },
                    help: {
                      links: [
                        {
                          description: 'Test string',
                          url: 'Test string',
                        },
                      ],
                    },
                    localizedMessage: {
                      locale: 'Test string',
                      message: 'Test string',
                    },
                    quotaInfo: {
                      dimensions: {
                        A: 'Test string',
                      },
                      futureLimit: 42,
                      limit: 42,
                      limitName: 'Test string',
                      metricName: 'Test string',
                      rolloutStatus: 'Test string',
                    },
                  },
                ],
                location: 'Test string',
                message: 'Test string',
              },
            ],
          },
          httpErrorMessage: 'Test string',
          httpErrorStatusCode: 42,
          id: 'Test string',
          insertTime: 'Test string',
          instancesBulkInsertOperationMetadata: {
            machineType: 'Test string',
            perLocationStatus: {
              A: {
                createdVmCount: 42,
                deletedVmCount: 42,
                failedToCreateVmCount: 42,
                status: 'Test string',
                targetVmCount: 42,
              },
            },
          },
          kind: 'Test string',
          name: 'Test string',
          operationGroupId: 'Test string',
          operationType: 'Test string',
          progress: 42,
          region: 'Test string',
          selfLink: 'Test string',
          selfLinkWithId: 'Test string',
          setAutoscalerLinkOperationMetadata: {
            zonalIgmIds: ['Test string'],
          },
          setCommonInstanceMetadataOperationMetadata: {
            clientOperationId: 'Test string',
            perLocationOperations: {
              A: {
                error: {
                  code: 42,
                  details: [
                    {
                      A: 42,
                    },
                  ],
                  message: 'Test string',
                },
                state: 'Test string',
              },
            },
          },
          startTime: 'Test string',
          status: 'Test string',
          statusMessage: 'Test string',
          targetId: 'Test string',
          targetLink: 'Test string',
          user: 'Test string',
          warnings: [
            {
              code: 'Test string',
              data: [
                {
                  key: 'Test string',
                  value: 'Test string',
                },
              ],
              message: 'Test string',
            },
          ],
          zone: 'Test string',
        },
        options: {
          asyncOptions: [
            {
              methodMatch: 'Test string',
              pollingOptions: {
                diagnostics: [
                  {
                    field: 'Test string',
                    level: 'Test string',
                  },
                ],
                failCondition: 'Test string',
                finishCondition: 'Test string',
                pollingLink: 'Test string',
                targetLink: 'Test string',
              },
            },
          ],
          inputMappings: [
            {
              fieldName: 'Test string',
              location: 'Test string',
              methodMatch: 'Test string',
              value: 'Test string',
            },
          ],
          nameProperty: 'Test string',
          validationOptions: {
            schemaValidation: 'Test string',
            undeclaredProperties: 'Test string',
          },
        },
        selfLink: 'Test string',
      },
    );
    /** Updates a type provider. */
    await gapi.client.deploymentmanager.typeProviders.update(
      {
        'header.bypassBillingFilter': true,
        project: 'Test string',
        typeProvider: 'Test string',
      },
      {
        collectionOverrides: [
          {
            collection: 'Test string',
            methodMap: {
              create: 'Test string',
              delete: 'Test string',
              get: 'Test string',
              setIamPolicy: 'Test string',
              update: 'Test string',
            },
            options: {
              asyncOptions: [
                {
                  methodMatch: 'Test string',
                  pollingOptions: {
                    diagnostics: [
                      {
                        field: 'Test string',
                        level: 'Test string',
                      },
                    ],
                    failCondition: 'Test string',
                    finishCondition: 'Test string',
                    pollingLink: 'Test string',
                    targetLink: 'Test string',
                  },
                },
              ],
              inputMappings: [
                {
                  fieldName: 'Test string',
                  location: 'Test string',
                  methodMatch: 'Test string',
                  value: 'Test string',
                },
              ],
              nameProperty: 'Test string',
              validationOptions: {
                schemaValidation: 'Test string',
                undeclaredProperties: 'Test string',
              },
            },
          },
        ],
        credential: {
          basicAuth: {
            password: 'Test string',
            user: 'Test string',
          },
          serviceAccount: {
            email: 'Test string',
          },
          useProjectDefault: true,
        },
        customCertificateAuthorityRoots: ['Test string'],
        description: 'Test string',
        descriptorUrl: 'Test string',
        id: 'Test string',
        insertTime: 'Test string',
        labels: [
          {
            key: 'Test string',
            value: 'Test string',
          },
        ],
        name: 'Test string',
        operation: {
          clientOperationId: 'Test string',
          creationTimestamp: 'Test string',
          description: 'Test string',
          endTime: 'Test string',
          error: {
            errors: [
              {
                arguments: ['Test string'],
                code: 'Test string',
                debugInfo: {
                  detail: 'Test string',
                  stackEntries: ['Test string'],
                },
                errorDetails: [
                  {
                    errorInfo: {
                      domain: 'Test string',
                      metadatas: {
                        A: 'Test string',
                      },
                      reason: 'Test string',
                    },
                    help: {
                      links: [
                        {
                          description: 'Test string',
                          url: 'Test string',
                        },
                      ],
                    },
                    localizedMessage: {
                      locale: 'Test string',
                      message: 'Test string',
                    },
                    quotaInfo: {
                      dimensions: {
                        A: 'Test string',
                      },
                      futureLimit: 42,
                      limit: 42,
                      limitName: 'Test string',
                      metricName: 'Test string',
                      rolloutStatus: 'Test string',
                    },
                  },
                ],
                location: 'Test string',
                message: 'Test string',
              },
            ],
          },
          httpErrorMessage: 'Test string',
          httpErrorStatusCode: 42,
          id: 'Test string',
          insertTime: 'Test string',
          instancesBulkInsertOperationMetadata: {
            machineType: 'Test string',
            perLocationStatus: {
              A: {
                createdVmCount: 42,
                deletedVmCount: 42,
                failedToCreateVmCount: 42,
                status: 'Test string',
                targetVmCount: 42,
              },
            },
          },
          kind: 'Test string',
          name: 'Test string',
          operationGroupId: 'Test string',
          operationType: 'Test string',
          progress: 42,
          region: 'Test string',
          selfLink: 'Test string',
          selfLinkWithId: 'Test string',
          setAutoscalerLinkOperationMetadata: {
            zonalIgmIds: ['Test string'],
          },
          setCommonInstanceMetadataOperationMetadata: {
            clientOperationId: 'Test string',
            perLocationOperations: {
              A: {
                error: {
                  code: 42,
                  details: [
                    {
                      A: 42,
                    },
                  ],
                  message: 'Test string',
                },
                state: 'Test string',
              },
            },
          },
          startTime: 'Test string',
          status: 'Test string',
          statusMessage: 'Test string',
          targetId: 'Test string',
          targetLink: 'Test string',
          user: 'Test string',
          warnings: [
            {
              code: 'Test string',
              data: [
                {
                  key: 'Test string',
                  value: 'Test string',
                },
              ],
              message: 'Test string',
            },
          ],
          zone: 'Test string',
        },
        options: {
          asyncOptions: [
            {
              methodMatch: 'Test string',
              pollingOptions: {
                diagnostics: [
                  {
                    field: 'Test string',
                    level: 'Test string',
                  },
                ],
                failCondition: 'Test string',
                finishCondition: 'Test string',
                pollingLink: 'Test string',
                targetLink: 'Test string',
              },
            },
          ],
          inputMappings: [
            {
              fieldName: 'Test string',
              location: 'Test string',
              methodMatch: 'Test string',
              value: 'Test string',
            },
          ],
          nameProperty: 'Test string',
          validationOptions: {
            schemaValidation: 'Test string',
            undeclaredProperties: 'Test string',
          },
        },
        selfLink: 'Test string',
      },
    );
    /** Gets information about a specific type. */
    await gapi.client.deploymentmanager.types.get({
      'header.bypassBillingFilter': true,
      project: 'Test string',
      type: 'Test string',
    });
    /** Lists all resource types for Deployment Manager. */
    await gapi.client.deploymentmanager.types.list({
      filter: 'Test string',
      maxResults: 42,
      orderBy: 'Test string',
      pageToken: 'Test string',
      project: 'Test string',
    });
  }
});
