/* This is stub file for gapi.client.resourcesettings-v1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20230807

gapi.load('client', async () => {
    /** now we can use gapi.client */

    await gapi.client.load('https://resourcesettings.googleapis.com/$discovery/rest?version=v1');
    /** now we can use gapi.client.resourcesettings */

    /** don't forget to authenticate your client before sending any request to resources: */
    /** declare client_id registered in Google Developers Console */
    const client_id = '<<PUT YOUR CLIENT ID HERE>>';
    const scope = [
        /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
        'https://www.googleapis.com/auth/cloud-platform',
    ];
    const immediate = false;
    gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
        if (authResult && !authResult.error) {
            /** handle successful authorization */
            run();
        } else {
            /** handle authorization error */
        }
    });

    async function run() {
        /** Returns a specified setting. Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the setting does not exist. */
        await gapi.client.resourcesettings.folders.settings.get({
            name: "Test string",
            view: "Test string",
        });
        /** Lists all the settings that are available on the Cloud resource `parent`. */
        await gapi.client.resourcesettings.folders.settings.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
            view: "Test string",
        });
        /**
         * Updates a specified setting. Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the setting does not exist. Returns a `google.rpc.Status` with
         * `google.rpc.Code.FAILED_PRECONDITION` if the setting is flagged as read only. Returns a `google.rpc.Status` with `google.rpc.Code.ABORTED` if the etag supplied in the request does not
         * match the persisted etag of the setting value. On success, the response will contain only `name`, `local_value` and `etag`. The `metadata` and `effective_value` cannot be updated
         * through this API. Note: the supplied setting will perform a full overwrite of the `local_value` field.
         */
        await gapi.client.resourcesettings.folders.settings.patch({
            name: "Test string",
        }, {
            effectiveValue: {
                booleanValue: true,
                durationValue: "Test string",
                enumValue: {
                    value: "Test string",
                },
                stringMapValue: {
                    mappings: {
                        A: "Test string"
                    },
                },
                stringSetValue: {
                    values: [
                        "Test string"
                    ],
                },
                stringValue: "Test string",
            },
            etag: "Test string",
            localValue: {
                booleanValue: true,
                durationValue: "Test string",
                enumValue: {
                    value: "Test string",
                },
                stringMapValue: {
                    mappings: {
                        A: "Test string"
                    },
                },
                stringSetValue: {
                    values: [
                        "Test string"
                    ],
                },
                stringValue: "Test string",
            },
            metadata: {
                dataType: "Test string",
                defaultValue: {
                    booleanValue: true,
                    durationValue: "Test string",
                    enumValue: {
                        value: "Test string",
                    },
                    stringMapValue: {
                        mappings: {
                            A: "Test string"
                        },
                    },
                    stringSetValue: {
                        values: [
                            "Test string"
                        ],
                    },
                    stringValue: "Test string",
                },
                description: "Test string",
                displayName: "Test string",
                readOnly: true,
            },
            name: "Test string",
        });
        /** Returns a specified setting. Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the setting does not exist. */
        await gapi.client.resourcesettings.organizations.settings.get({
            name: "Test string",
            view: "Test string",
        });
        /** Lists all the settings that are available on the Cloud resource `parent`. */
        await gapi.client.resourcesettings.organizations.settings.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
            view: "Test string",
        });
        /**
         * Updates a specified setting. Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the setting does not exist. Returns a `google.rpc.Status` with
         * `google.rpc.Code.FAILED_PRECONDITION` if the setting is flagged as read only. Returns a `google.rpc.Status` with `google.rpc.Code.ABORTED` if the etag supplied in the request does not
         * match the persisted etag of the setting value. On success, the response will contain only `name`, `local_value` and `etag`. The `metadata` and `effective_value` cannot be updated
         * through this API. Note: the supplied setting will perform a full overwrite of the `local_value` field.
         */
        await gapi.client.resourcesettings.organizations.settings.patch({
            name: "Test string",
        }, {
            effectiveValue: {
                booleanValue: true,
                durationValue: "Test string",
                enumValue: {
                    value: "Test string",
                },
                stringMapValue: {
                    mappings: {
                        A: "Test string"
                    },
                },
                stringSetValue: {
                    values: [
                        "Test string"
                    ],
                },
                stringValue: "Test string",
            },
            etag: "Test string",
            localValue: {
                booleanValue: true,
                durationValue: "Test string",
                enumValue: {
                    value: "Test string",
                },
                stringMapValue: {
                    mappings: {
                        A: "Test string"
                    },
                },
                stringSetValue: {
                    values: [
                        "Test string"
                    ],
                },
                stringValue: "Test string",
            },
            metadata: {
                dataType: "Test string",
                defaultValue: {
                    booleanValue: true,
                    durationValue: "Test string",
                    enumValue: {
                        value: "Test string",
                    },
                    stringMapValue: {
                        mappings: {
                            A: "Test string"
                        },
                    },
                    stringSetValue: {
                        values: [
                            "Test string"
                        ],
                    },
                    stringValue: "Test string",
                },
                description: "Test string",
                displayName: "Test string",
                readOnly: true,
            },
            name: "Test string",
        });
        /** Returns a specified setting. Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the setting does not exist. */
        await gapi.client.resourcesettings.projects.settings.get({
            name: "Test string",
            view: "Test string",
        });
        /** Lists all the settings that are available on the Cloud resource `parent`. */
        await gapi.client.resourcesettings.projects.settings.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
            view: "Test string",
        });
        /**
         * Updates a specified setting. Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the setting does not exist. Returns a `google.rpc.Status` with
         * `google.rpc.Code.FAILED_PRECONDITION` if the setting is flagged as read only. Returns a `google.rpc.Status` with `google.rpc.Code.ABORTED` if the etag supplied in the request does not
         * match the persisted etag of the setting value. On success, the response will contain only `name`, `local_value` and `etag`. The `metadata` and `effective_value` cannot be updated
         * through this API. Note: the supplied setting will perform a full overwrite of the `local_value` field.
         */
        await gapi.client.resourcesettings.projects.settings.patch({
            name: "Test string",
        }, {
            effectiveValue: {
                booleanValue: true,
                durationValue: "Test string",
                enumValue: {
                    value: "Test string",
                },
                stringMapValue: {
                    mappings: {
                        A: "Test string"
                    },
                },
                stringSetValue: {
                    values: [
                        "Test string"
                    ],
                },
                stringValue: "Test string",
            },
            etag: "Test string",
            localValue: {
                booleanValue: true,
                durationValue: "Test string",
                enumValue: {
                    value: "Test string",
                },
                stringMapValue: {
                    mappings: {
                        A: "Test string"
                    },
                },
                stringSetValue: {
                    values: [
                        "Test string"
                    ],
                },
                stringValue: "Test string",
            },
            metadata: {
                dataType: "Test string",
                defaultValue: {
                    booleanValue: true,
                    durationValue: "Test string",
                    enumValue: {
                        value: "Test string",
                    },
                    stringMapValue: {
                        mappings: {
                            A: "Test string"
                        },
                    },
                    stringSetValue: {
                        values: [
                            "Test string"
                        ],
                    },
                    stringValue: "Test string",
                },
                description: "Test string",
                displayName: "Test string",
                readOnly: true,
            },
            name: "Test string",
        });
    }
});
