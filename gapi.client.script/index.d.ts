// Type definitions for non-npm package Apps Script API v1 1.0
// Project: https://developers.google.com/apps-script/api/
// Definitions by: Maxim Mazurok <https://github.com/Maxim-Mazurok>
//                 Google API Typings Generator <https://github.com/google-api-typings-generator>
//                 Nick Amoscato <https://github.com/namoscato>
//                 Declan Vong <https://github.com/declanvong>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 2.8

// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
// Generated from: https://script.googleapis.com/$discovery/rest?version=v1
// Revision: 20200825

/// <reference types="gapi.client" />

declare namespace gapi.client {
    /** Load Apps Script API v1 */
    function load(name: "script", version: "v1"): PromiseLike<void>;
    function load(name: "script", version: "v1", callback: () => any): void;

    namespace script {
        interface Content {
            /**
             * The list of script project files. One of the files is a script manifest; it must be named "appsscript", must have type of JSON, and include the manifest configurations for the
             * project.
             */
            files?: File[];
            /** The script project's Drive ID. */
            scriptId?: string;
        }
        interface CreateProjectRequest {
            /**
             * The Drive ID of a parent file that the created script project is bound to. This is usually the ID of a Google Doc, Google Sheet, Google Form, or Google Slides file. If not set, a
             * standalone script project is created.
             */
            parentId?: string;
            /** The title for the project. */
            title?: string;
        }
        interface Deployment {
            /** The deployment configuration. */
            deploymentConfig?: DeploymentConfig;
            /** The deployment ID for this deployment. */
            deploymentId?: string;
            /** The deployment's entry points. */
            entryPoints?: EntryPoint[];
            /** Last modified date time stamp. */
            updateTime?: string;
        }
        interface DeploymentConfig {
            /** The description for this deployment. */
            description?: string;
            /** The manifest file name for this deployment. */
            manifestFileName?: string;
            /** The script project's Drive ID. */
            scriptId?: string;
            /** The version number on which this deployment is based. */
            versionNumber?: number;
        }
        // tslint:disable-next-line:no-empty-interface
        interface Empty {
        }
        interface EntryPoint {
            /** Add-on properties. */
            addOn?: GoogleAppsScriptTypeAddOnEntryPoint;
            /** The type of the entry point. */
            entryPointType?: string;
            /** An entry point specification for Apps Script API execution calls. */
            executionApi?: GoogleAppsScriptTypeExecutionApiEntryPoint;
            /** An entry point specification for web apps. */
            webApp?: GoogleAppsScriptTypeWebAppEntryPoint;
        }
        interface ExecuteStreamResponse {
            /** The result of the execution. */
            result?: ScriptExecutionResult;
        }
        interface ExecutionError {
            /** The error message thrown by Apps Script, usually localized into the user's language. */
            errorMessage?: string;
            /** The error type, for example `TypeError` or `ReferenceError`. If the error type is unavailable, this field is not included. */
            errorType?: string;
            /** An array of objects that provide a stack trace through the script to show where the execution failed, with the deepest call first. */
            scriptStackTraceElements?: ScriptStackTraceElement[];
        }
        interface ExecutionRequest {
            /**
             * If `true` and the user is an owner of the script, the script runs at the most recently saved version rather than the version deployed for use with the Apps Script API. Optional;
             * default is `false`.
             */
            devMode?: boolean;
            /**
             * The name of the function to execute in the given script. The name does not include parentheses or parameters. It can reference a function in an included library such as
             * `Library.libFunction1`.
             */
            function?: string;
            /**
             * The parameters to be passed to the function being executed. The object type for each parameter should match the expected type in Apps Script. Parameters cannot be Apps
             * Script-specific object types (such as a `Document` or a `Calendar`); they can only be primitive types such as `string`, `number`, `array`, `object`, or `boolean`. Optional.
             */
            parameters?: any[];
            /**
             * *Deprecated*. For use with Android add-ons only. An ID that represents the user's current session in the Android app for Google Docs or Sheets, included as extra data in the
             * [Intent](https://developer.android.com/guide/components/intents-filters.html) that launches the add-on. When an Android add-on is run with a session state, it gains the privileges
             * of a [bound](https://developers.google.com/apps-script/guides/bound) scriptâ€”that is, it can access information like the user's current cursor position (in Docs) or selected cell (in
             * Sheets). To retrieve the state, call `Intent.getStringExtra("com.google.android.apps.docs.addons.SessionState")`. Optional.
             */
            sessionState?: string;
        }
        interface ExecutionResponse {
            /**
             * The return value of the script function. The type matches the object type returned in Apps Script. Functions called using the Apps Script API cannot return Apps Script-specific
             * objects (such as a `Document` or a `Calendar`); they can only return primitive types such as a `string`, `number`, `array`, `object`, or `boolean`.
             */
            result?: any;
        }
        interface File {
            /** Creation date timestamp. This read-only field is only visible to users who have WRITER permission for the script project. */
            createTime?: string;
            /** The defined set of functions in the script file, if any. */
            functionSet?: GoogleAppsScriptTypeFunctionSet;
            /** The user who modified the file most recently. This read-only field is only visible to users who have WRITER permission for the script project. */
            lastModifyUser?: GoogleAppsScriptTypeUser;
            /** The name of the file. The file extension is not part of the file name, which can be identified from the type field. */
            name?: string;
            /** The file content. */
            source?: string;
            /** The type of the file. */
            type?: string;
            /** Last modified date timestamp. This read-only field is only visible to users who have WRITER permission for the script project. */
            updateTime?: string;
        }
        interface GoogleAppsScriptTypeAddOnEntryPoint {
            /** The add-on's required list of supported container types. */
            addOnType?: string;
            /** The add-on's optional description. */
            description?: string;
            /** The add-on's optional help URL. */
            helpUrl?: string;
            /** The add-on's required post install tip URL. */
            postInstallTipUrl?: string;
            /** The add-on's optional report issue URL. */
            reportIssueUrl?: string;
            /** The add-on's required title. */
            title?: string;
        }
        interface GoogleAppsScriptTypeExecutionApiConfig {
            /** Who has permission to run the API executable. */
            access?: string;
        }
        interface GoogleAppsScriptTypeExecutionApiEntryPoint {
            /** The entry point's configuration. */
            entryPointConfig?: GoogleAppsScriptTypeExecutionApiConfig;
        }
        interface GoogleAppsScriptTypeFunction {
            /** The function name in the script project. */
            name?: string;
        }
        interface GoogleAppsScriptTypeFunctionSet {
            /** A list of functions composing the set. */
            values?: GoogleAppsScriptTypeFunction[];
        }
        interface GoogleAppsScriptTypeProcess {
            /** Duration the execution spent executing. */
            duration?: string;
            /** Name of the function the started the execution. */
            functionName?: string;
            /** The executions status. */
            processStatus?: string;
            /** The executions type. */
            processType?: string;
            /** Name of the script being executed. */
            projectName?: string;
            /** Time the execution started. */
            startTime?: string;
            /** The executing users access level to the script. */
            userAccessLevel?: string;
        }
        interface GoogleAppsScriptTypeUser {
            /** The user's domain. */
            domain?: string;
            /** The user's identifying email address. */
            email?: string;
            /** The user's display name. */
            name?: string;
            /** The user's photo. */
            photoUrl?: string;
        }
        interface GoogleAppsScriptTypeWebAppConfig {
            /** Who has permission to run the web app. */
            access?: string;
            /** Who to execute the web app as. */
            executeAs?: string;
        }
        interface GoogleAppsScriptTypeWebAppEntryPoint {
            /** The entry point's configuration. */
            entryPointConfig?: GoogleAppsScriptTypeWebAppConfig;
            /** The URL for the web application. */
            url?: string;
        }
        interface ListDeploymentsResponse {
            /** The list of deployments. */
            deployments?: Deployment[];
            /** The token that can be used in the next call to get the next page of results. */
            nextPageToken?: string;
        }
        interface ListScriptProcessesResponse {
            /** Token for the next page of results. If empty, there are no more pages remaining. */
            nextPageToken?: string;
            /** List of processes matching request parameters. */
            processes?: GoogleAppsScriptTypeProcess[];
        }
        interface ListUserProcessesResponse {
            /** Token for the next page of results. If empty, there are no more pages remaining. */
            nextPageToken?: string;
            /** List of processes matching request parameters. */
            processes?: GoogleAppsScriptTypeProcess[];
        }
        interface ListValue {
            /** Repeated field of dynamically typed values. */
            values?: Value[];
        }
        interface ListVersionsResponse {
            /** The token use to fetch the next page of records. if not exist in the response, that means no more versions to list. */
            nextPageToken?: string;
            /** The list of versions. */
            versions?: Version[];
        }
        interface Metrics {
            /** Number of active users. */
            activeUsers?: MetricsValue[];
            /** Number of failed executions. */
            failedExecutions?: MetricsValue[];
            /** Number of total executions. */
            totalExecutions?: MetricsValue[];
        }
        interface MetricsValue {
            /** Required field indicating the end time of the interval. */
            endTime?: string;
            /** Required field indicating the start time of the interval. */
            startTime?: string;
            /** Indicates the number of executions counted. */
            value?: string;
        }
        interface Operation {
            /**
             * This field indicates whether the script execution has completed. A completed execution has a populated `response` field containing the ExecutionResponse from function that was
             * executed.
             */
            done?: boolean;
            /**
             * If a `run` call succeeds but the script function (or Apps Script itself) throws an exception, this field contains a Status object. The `Status` object's `details` field contains an
             * array with a single ExecutionError object that provides information about the nature of the error.
             */
            error?: Status;
            /** If the script function returns successfully, this field contains an ExecutionResponse object with the function's return value. */
            response?: { [P in string]: any };
        }
        interface Project {
            /** When the script was created. */
            createTime?: string;
            /** User who originally created the script. */
            creator?: GoogleAppsScriptTypeUser;
            /** User who last modified the script. */
            lastModifyUser?: GoogleAppsScriptTypeUser;
            /**
             * The parent's Drive ID that the script will be attached to. This is usually the ID of a Google Document or Google Sheet. This filed is optional, and if not set, a stand-alone script
             * will be created.
             */
            parentId?: string;
            /** The script project's Drive ID. */
            scriptId?: string;
            /** The title for the project. */
            title?: string;
            /** When the script was last updated. */
            updateTime?: string;
        }
        interface ScriptExecutionResult {
            /** The returned value of the execution. */
            returnValue?: Value;
        }
        interface ScriptStackTraceElement {
            /** The name of the function that failed. */
            function?: string;
            /** The line number where the script failed. */
            lineNumber?: number;
        }
        interface Status {
            /** The status code. For this API, this value either: - 10, indicating a `SCRIPT_TIMEOUT` error, - 3, indicating an `INVALID_ARGUMENT` error, or - 1, indicating a `CANCELLED` execution. */
            code?: number;
            /** An array that contains a single ExecutionError object that provides information about the nature of the error. */
            details?: Array<{ [P in string]: any }>;
            /** A developer-facing error message, which is in English. Any user-facing error message is localized and sent in the details field, or localized by the client. */
            message?: string;
        }
        interface Struct {
            /** Unordered map of dynamically typed values. */
            fields?: { [P in string]: Value };
        }
        interface UpdateDeploymentRequest {
            /** The deployment configuration. */
            deploymentConfig?: DeploymentConfig;
        }
        interface Value {
            /** Represents a boolean value. */
            boolValue?: boolean;
            /** Represents raw byte values. */
            bytesValue?: string;
            /** Represents a date in ms since the epoch. */
            dateValue?: string;
            /** Represents a repeated `Value`. */
            listValue?: ListValue;
            /** Represents a null value. */
            nullValue?: string;
            /** Represents a double value. */
            numberValue?: number;
            /** Represents a structured proto value. */
            protoValue?: { [P in string]: any };
            /** Represents a string value. */
            stringValue?: string;
            /** Represents a structured value. */
            structValue?: Struct;
        }
        interface Version {
            /** When the version was created. */
            createTime?: string;
            /** The description for this version. */
            description?: string;
            /** The script project's Drive ID. */
            scriptId?: string;
            /** The incremental ID that is created by Apps Script when a version is created. This is system assigned number and is immutable once created. */
            versionNumber?: number;
        }
        interface ProcessesResource {
            /** List information about processes made by or on behalf of a user, such as process type and current status. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The maximum number of returned processes per page of results. Defaults to 50. */
                pageSize?: number;
                /** The token for continuing a previous list request on the next page. This should be set to the value of `nextPageToken` from a previous response. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Optional field used to limit returned processes to those originating from projects with a specific deployment ID. */
                "userProcessFilter.deploymentId"?: string;
                /** Optional field used to limit returned processes to those that completed on or before the given timestamp. */
                "userProcessFilter.endTime"?: string;
                /** Optional field used to limit returned processes to those originating from a script function with the given function name. */
                "userProcessFilter.functionName"?: string;
                /** Optional field used to limit returned processes to those originating from projects with project names containing a specific string. */
                "userProcessFilter.projectName"?: string;
                /** Optional field used to limit returned processes to those originating from projects with a specific script ID. */
                "userProcessFilter.scriptId"?: string;
                /** Optional field used to limit returned processes to those that were started on or after the given timestamp. */
                "userProcessFilter.startTime"?: string;
                /** Optional field used to limit returned processes to those having one of the specified process statuses. */
                "userProcessFilter.statuses"?: string | string[];
                /** Optional field used to limit returned processes to those having one of the specified process types. */
                "userProcessFilter.types"?: string | string[];
                /** Optional field used to limit returned processes to those having one of the specified user access levels. */
                "userProcessFilter.userAccessLevels"?: string | string[];
            }): Request<ListUserProcessesResponse>;
            /** List information about a script's executed processes, such as process type and current status. */
            listScriptProcesses(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The maximum number of returned processes per page of results. Defaults to 50. */
                pageSize?: number;
                /** The token for continuing a previous list request on the next page. This should be set to the value of `nextPageToken` from a previous response. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The script ID of the project whose processes are listed. */
                scriptId?: string;
                /** Optional field used to limit returned processes to those originating from projects with a specific deployment ID. */
                "scriptProcessFilter.deploymentId"?: string;
                /** Optional field used to limit returned processes to those that completed on or before the given timestamp. */
                "scriptProcessFilter.endTime"?: string;
                /** Optional field used to limit returned processes to those originating from a script function with the given function name. */
                "scriptProcessFilter.functionName"?: string;
                /** Optional field used to limit returned processes to those that were started on or after the given timestamp. */
                "scriptProcessFilter.startTime"?: string;
                /** Optional field used to limit returned processes to those having one of the specified process statuses. */
                "scriptProcessFilter.statuses"?: string | string[];
                /** Optional field used to limit returned processes to those having one of the specified process types. */
                "scriptProcessFilter.types"?: string | string[];
                /** Optional field used to limit returned processes to those having one of the specified user access levels. */
                "scriptProcessFilter.userAccessLevels"?: string | string[];
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListScriptProcessesResponse>;
        }
        interface DeploymentsResource {
            /** Creates a deployment of an Apps Script project. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The script project's Drive ID. */
                scriptId: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: DeploymentConfig;
            }): Request<Deployment>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The script project's Drive ID. */
                scriptId: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: DeploymentConfig): Request<Deployment>;
            /** Deletes a deployment of an Apps Script project. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** The deployment ID to be undeployed. */
                deploymentId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The script project's Drive ID. */
                scriptId: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<{}>;
            /** Gets a deployment of an Apps Script project. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** The deployment ID. */
                deploymentId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The script project's Drive ID. */
                scriptId: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Deployment>;
            /** Lists the deployments of an Apps Script project. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The maximum number of deployments on each returned page. Defaults to 50. */
                pageSize?: number;
                /** The token for continuing a previous list request on the next page. This should be set to the value of `nextPageToken` from a previous response. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The script project's Drive ID. */
                scriptId: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListDeploymentsResponse>;
            /** Updates a deployment of an Apps Script project. */
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** The deployment ID for this deployment. */
                deploymentId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The script project's Drive ID. */
                scriptId: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: UpdateDeploymentRequest;
            }): Request<Deployment>;
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** The deployment ID for this deployment. */
                deploymentId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The script project's Drive ID. */
                scriptId: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: UpdateDeploymentRequest): Request<Deployment>;
        }
        interface VersionsResource {
            /** Creates a new immutable version using the current code, with a unique version number. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The script project's Drive ID. */
                scriptId: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Version;
            }): Request<Version>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The script project's Drive ID. */
                scriptId: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Version): Request<Version>;
            /** Gets a version of a script project. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The script project's Drive ID. */
                scriptId: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** The version number. */
                versionNumber: number;
            }): Request<Version>;
            /** List the versions of a script project. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The maximum number of versions on each returned page. Defaults to 50. */
                pageSize?: number;
                /** The token for continuing a previous list request on the next page. This should be set to the value of `nextPageToken` from a previous response. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The script project's Drive ID. */
                scriptId: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListVersionsResponse>;
        }
        interface ProjectsResource {
            /** Creates a new, empty script project with no script files and a base manifest file. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: CreateProjectRequest;
            }): Request<Project>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: CreateProjectRequest): Request<Project>;
            /** Gets a script project's metadata. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The script project's Drive ID. */
                scriptId: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Project>;
            /** Gets the content of the script project, including the code source and metadata for each script file. */
            getContent(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The script project's Drive ID. */
                scriptId: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** The version number of the project to retrieve. If not provided, the project's HEAD version is returned. */
                versionNumber?: number;
            }): Request<Content>;
            /** Get metrics data for scripts, such as number of executions and active users. */
            getMetrics(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Optional field indicating a specific deployment to retrieve metrics from. */
                "metricsFilter.deploymentId"?: string;
                /** Required field indicating what granularity of metrics are returned. */
                metricsGranularity?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Required field indicating the script to get metrics for. */
                scriptId: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Metrics>;
            /**
             * Updates the content of the specified script project. This content is stored as the HEAD version, and is used when the script is executed as a trigger, in the script editor, in
             * add-on preview mode, or as a web app or Apps Script API in development mode. This clears all the existing files in the project.
             */
            updateContent(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The script project's Drive ID. */
                scriptId: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Content;
            }): Request<Content>;
            updateContent(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The script project's Drive ID. */
                scriptId: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Content): Request<Content>;
            deployments: DeploymentsResource;
            versions: VersionsResource;
        }
        interface ScriptsResource {
            /**
             * Runs a function in an Apps Script project. The script project must be deployed for use with the Apps Script API and the calling application must share the same Cloud Platform
             * project. This method requires authorization with an OAuth 2.0 token that includes at least one of the scopes listed in the [Authorization](#authorization-scopes) section; script
             * projects that do not require authorization cannot be executed through this API. To find the correct scopes to include in the authentication token, open the project in the script
             * editor, then select **File > Project properties** and click the **Scopes** tab. The error `403, PERMISSION_DENIED: The caller does not have permission` indicates that the Cloud
             * Platform project used to authorize the request is not the same as the one used by the script.
             */
            run(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The script ID of the script to be executed. To find the script ID, open the project in the script editor and select **File > Project properties**. */
                scriptId: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: ExecutionRequest;
            }): Request<Operation>;
            run(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The script ID of the script to be executed. To find the script ID, open the project in the script editor and select **File > Project properties**. */
                scriptId: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: ExecutionRequest): Request<Operation>;
        }

        const processes: ProcessesResource;

        const projects: ProjectsResource;

        const scripts: ScriptsResource;
    }
}
