/* This is stub file for gapi.client.dlp-v2 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20230326

gapi.load('client', async () => {
    /** now we can use gapi.client */

    await gapi.client.load('https://dlp.googleapis.com/$discovery/rest?version=v2');
    /** now we can use gapi.client.dlp */

    /** don't forget to authenticate your client before sending any request to resources: */
    /** declare client_id registered in Google Developers Console */
    const client_id = '<<PUT YOUR CLIENT ID HERE>>';
    const scope = [
        /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
        'https://www.googleapis.com/auth/cloud-platform',
    ];
    const immediate = false;
    gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
        if (authResult && !authResult.error) {
            /** handle successful authorization */
            run();
        } else {
            /** handle authorization error */
        }
    });

    async function run() {
        /** Returns a list of the sensitive information types that DLP API supports. See https://cloud.google.com/dlp/docs/infotypes-reference to learn more. */
        await gapi.client.dlp.infoTypes.list({
            filter: "Test string",
            languageCode: "Test string",
            locationId: "Test string",
            parent: "Test string",
        });
        /** Returns a list of the sensitive information types that DLP API supports. See https://cloud.google.com/dlp/docs/infotypes-reference to learn more. */
        await gapi.client.dlp.locations.infoTypes.list({
            filter: "Test string",
            languageCode: "Test string",
            locationId: "Test string",
            parent: "Test string",
        });
        /**
         * Creates a DeidentifyTemplate for reusing frequently used configuration for de-identifying content, images, and storage. See https://cloud.google.com/dlp/docs/creating-templates-deid to
         * learn more.
         */
        await gapi.client.dlp.organizations.deidentifyTemplates.create({
            parent: "Test string",
        }, {
            deidentifyTemplate: {
                createTime: "Test string",
                deidentifyConfig: {
                    imageTransformations: {
                        transforms: [
                            {
                                allInfoTypes: {
                                },
                                allText: {
                                },
                                redactionColor: {
                                    blue: 42,
                                    green: 42,
                                    red: 42,
                                },
                                selectedInfoTypes: {
                                    infoTypes: [
                                        {
                                            name: "Test string",
                                            version: "Test string",
                                        }
                                    ],
                                },
                            }
                        ],
                    },
                    infoTypeTransformations: {
                        transformations: [
                            {
                                infoTypes: [
                                    {
                                        name: "Test string",
                                        version: "Test string",
                                    }
                                ],
                                primitiveTransformation: {
                                    bucketingConfig: {
                                        buckets: [
                                            {
                                                max: {
                                                    booleanValue: true,
                                                    dateValue: {
                                                        day: 42,
                                                        month: 42,
                                                        year: 42,
                                                    },
                                                    dayOfWeekValue: "Test string",
                                                    floatValue: 42,
                                                    integerValue: "Test string",
                                                    stringValue: "Test string",
                                                    timestampValue: "Test string",
                                                    timeValue: {
                                                        hours: 42,
                                                        minutes: 42,
                                                        nanos: 42,
                                                        seconds: 42,
                                                    },
                                                },
                                                min: {
                                                    booleanValue: true,
                                                    dateValue: {
                                                        day: 42,
                                                        month: 42,
                                                        year: 42,
                                                    },
                                                    dayOfWeekValue: "Test string",
                                                    floatValue: 42,
                                                    integerValue: "Test string",
                                                    stringValue: "Test string",
                                                    timestampValue: "Test string",
                                                    timeValue: {
                                                        hours: 42,
                                                        minutes: 42,
                                                        nanos: 42,
                                                        seconds: 42,
                                                    },
                                                },
                                                replacementValue: {
                                                    booleanValue: true,
                                                    dateValue: {
                                                        day: 42,
                                                        month: 42,
                                                        year: 42,
                                                    },
                                                    dayOfWeekValue: "Test string",
                                                    floatValue: 42,
                                                    integerValue: "Test string",
                                                    stringValue: "Test string",
                                                    timestampValue: "Test string",
                                                    timeValue: {
                                                        hours: 42,
                                                        minutes: 42,
                                                        nanos: 42,
                                                        seconds: 42,
                                                    },
                                                },
                                            }
                                        ],
                                    },
                                    characterMaskConfig: {
                                        charactersToIgnore: [
                                            {
                                                charactersToSkip: "Test string",
                                                commonCharactersToIgnore: "Test string",
                                            }
                                        ],
                                        maskingCharacter: "Test string",
                                        numberToMask: 42,
                                        reverseOrder: true,
                                    },
                                    cryptoDeterministicConfig: {
                                        context: {
                                            name: "Test string",
                                        },
                                        cryptoKey: {
                                            kmsWrapped: {
                                                cryptoKeyName: "Test string",
                                                wrappedKey: "Test string",
                                            },
                                            transient: {
                                                name: "Test string",
                                            },
                                            unwrapped: {
                                                key: "Test string",
                                            },
                                        },
                                        surrogateInfoType: {
                                            name: "Test string",
                                            version: "Test string",
                                        },
                                    },
                                    cryptoHashConfig: {
                                        cryptoKey: {
                                            kmsWrapped: {
                                                cryptoKeyName: "Test string",
                                                wrappedKey: "Test string",
                                            },
                                            transient: {
                                                name: "Test string",
                                            },
                                            unwrapped: {
                                                key: "Test string",
                                            },
                                        },
                                    },
                                    cryptoReplaceFfxFpeConfig: {
                                        commonAlphabet: "Test string",
                                        context: {
                                            name: "Test string",
                                        },
                                        cryptoKey: {
                                            kmsWrapped: {
                                                cryptoKeyName: "Test string",
                                                wrappedKey: "Test string",
                                            },
                                            transient: {
                                                name: "Test string",
                                            },
                                            unwrapped: {
                                                key: "Test string",
                                            },
                                        },
                                        customAlphabet: "Test string",
                                        radix: 42,
                                        surrogateInfoType: {
                                            name: "Test string",
                                            version: "Test string",
                                        },
                                    },
                                    dateShiftConfig: {
                                        context: {
                                            name: "Test string",
                                        },
                                        cryptoKey: {
                                            kmsWrapped: {
                                                cryptoKeyName: "Test string",
                                                wrappedKey: "Test string",
                                            },
                                            transient: {
                                                name: "Test string",
                                            },
                                            unwrapped: {
                                                key: "Test string",
                                            },
                                        },
                                        lowerBoundDays: 42,
                                        upperBoundDays: 42,
                                    },
                                    fixedSizeBucketingConfig: {
                                        bucketSize: 42,
                                        lowerBound: {
                                            booleanValue: true,
                                            dateValue: {
                                                day: 42,
                                                month: 42,
                                                year: 42,
                                            },
                                            dayOfWeekValue: "Test string",
                                            floatValue: 42,
                                            integerValue: "Test string",
                                            stringValue: "Test string",
                                            timestampValue: "Test string",
                                            timeValue: {
                                                hours: 42,
                                                minutes: 42,
                                                nanos: 42,
                                                seconds: 42,
                                            },
                                        },
                                        upperBound: {
                                            booleanValue: true,
                                            dateValue: {
                                                day: 42,
                                                month: 42,
                                                year: 42,
                                            },
                                            dayOfWeekValue: "Test string",
                                            floatValue: 42,
                                            integerValue: "Test string",
                                            stringValue: "Test string",
                                            timestampValue: "Test string",
                                            timeValue: {
                                                hours: 42,
                                                minutes: 42,
                                                nanos: 42,
                                                seconds: 42,
                                            },
                                        },
                                    },
                                    redactConfig: {
                                    },
                                    replaceConfig: {
                                        newValue: {
                                            booleanValue: true,
                                            dateValue: {
                                                day: 42,
                                                month: 42,
                                                year: 42,
                                            },
                                            dayOfWeekValue: "Test string",
                                            floatValue: 42,
                                            integerValue: "Test string",
                                            stringValue: "Test string",
                                            timestampValue: "Test string",
                                            timeValue: {
                                                hours: 42,
                                                minutes: 42,
                                                nanos: 42,
                                                seconds: 42,
                                            },
                                        },
                                    },
                                    replaceDictionaryConfig: {
                                        wordList: {
                                            words: [
                                                "Test string"
                                            ],
                                        },
                                    },
                                    replaceWithInfoTypeConfig: {
                                    },
                                    timePartConfig: {
                                        partToExtract: "Test string",
                                    },
                                },
                            }
                        ],
                    },
                    recordTransformations: {
                        fieldTransformations: [
                            {
                                condition: {
                                    expressions: {
                                        conditions: {
                                            conditions: [
                                                {
                                                    field: {
                                                        name: "Test string",
                                                    },
                                                    operator: "Test string",
                                                    value: {
                                                        booleanValue: true,
                                                        dateValue: {
                                                            day: 42,
                                                            month: 42,
                                                            year: 42,
                                                        },
                                                        dayOfWeekValue: "Test string",
                                                        floatValue: 42,
                                                        integerValue: "Test string",
                                                        stringValue: "Test string",
                                                        timestampValue: "Test string",
                                                        timeValue: {
                                                            hours: 42,
                                                            minutes: 42,
                                                            nanos: 42,
                                                            seconds: 42,
                                                        },
                                                    },
                                                }
                                            ],
                                        },
                                        logicalOperator: "Test string",
                                    },
                                },
                                fields: [
                                    {
                                        name: "Test string",
                                    }
                                ],
                                infoTypeTransformations: {
                                    transformations: [
                                        {
                                            infoTypes: [
                                                {
                                                    name: "Test string",
                                                    version: "Test string",
                                                }
                                            ],
                                            primitiveTransformation: {
                                                bucketingConfig: {
                                                    buckets: [
                                                        {
                                                            max: {
                                                                booleanValue: true,
                                                                dateValue: {
                                                                    day: 42,
                                                                    month: 42,
                                                                    year: 42,
                                                                },
                                                                dayOfWeekValue: "Test string",
                                                                floatValue: 42,
                                                                integerValue: "Test string",
                                                                stringValue: "Test string",
                                                                timestampValue: "Test string",
                                                                timeValue: {
                                                                    hours: 42,
                                                                    minutes: 42,
                                                                    nanos: 42,
                                                                    seconds: 42,
                                                                },
                                                            },
                                                            min: {
                                                                booleanValue: true,
                                                                dateValue: {
                                                                    day: 42,
                                                                    month: 42,
                                                                    year: 42,
                                                                },
                                                                dayOfWeekValue: "Test string",
                                                                floatValue: 42,
                                                                integerValue: "Test string",
                                                                stringValue: "Test string",
                                                                timestampValue: "Test string",
                                                                timeValue: {
                                                                    hours: 42,
                                                                    minutes: 42,
                                                                    nanos: 42,
                                                                    seconds: 42,
                                                                },
                                                            },
                                                            replacementValue: {
                                                                booleanValue: true,
                                                                dateValue: {
                                                                    day: 42,
                                                                    month: 42,
                                                                    year: 42,
                                                                },
                                                                dayOfWeekValue: "Test string",
                                                                floatValue: 42,
                                                                integerValue: "Test string",
                                                                stringValue: "Test string",
                                                                timestampValue: "Test string",
                                                                timeValue: {
                                                                    hours: 42,
                                                                    minutes: 42,
                                                                    nanos: 42,
                                                                    seconds: 42,
                                                                },
                                                            },
                                                        }
                                                    ],
                                                },
                                                characterMaskConfig: {
                                                    charactersToIgnore: [
                                                        {
                                                            charactersToSkip: "Test string",
                                                            commonCharactersToIgnore: "Test string",
                                                        }
                                                    ],
                                                    maskingCharacter: "Test string",
                                                    numberToMask: 42,
                                                    reverseOrder: true,
                                                },
                                                cryptoDeterministicConfig: {
                                                    context: {
                                                        name: "Test string",
                                                    },
                                                    cryptoKey: {
                                                        kmsWrapped: {
                                                            cryptoKeyName: "Test string",
                                                            wrappedKey: "Test string",
                                                        },
                                                        transient: {
                                                            name: "Test string",
                                                        },
                                                        unwrapped: {
                                                            key: "Test string",
                                                        },
                                                    },
                                                    surrogateInfoType: {
                                                        name: "Test string",
                                                        version: "Test string",
                                                    },
                                                },
                                                cryptoHashConfig: {
                                                    cryptoKey: {
                                                        kmsWrapped: {
                                                            cryptoKeyName: "Test string",
                                                            wrappedKey: "Test string",
                                                        },
                                                        transient: {
                                                            name: "Test string",
                                                        },
                                                        unwrapped: {
                                                            key: "Test string",
                                                        },
                                                    },
                                                },
                                                cryptoReplaceFfxFpeConfig: {
                                                    commonAlphabet: "Test string",
                                                    context: {
                                                        name: "Test string",
                                                    },
                                                    cryptoKey: {
                                                        kmsWrapped: {
                                                            cryptoKeyName: "Test string",
                                                            wrappedKey: "Test string",
                                                        },
                                                        transient: {
                                                            name: "Test string",
                                                        },
                                                        unwrapped: {
                                                            key: "Test string",
                                                        },
                                                    },
                                                    customAlphabet: "Test string",
                                                    radix: 42,
                                                    surrogateInfoType: {
                                                        name: "Test string",
                                                        version: "Test string",
                                                    },
                                                },
                                                dateShiftConfig: {
                                                    context: {
                                                        name: "Test string",
                                                    },
                                                    cryptoKey: {
                                                        kmsWrapped: {
                                                            cryptoKeyName: "Test string",
                                                            wrappedKey: "Test string",
                                                        },
                                                        transient: {
                                                            name: "Test string",
                                                        },
                                                        unwrapped: {
                                                            key: "Test string",
                                                        },
                                                    },
                                                    lowerBoundDays: 42,
                                                    upperBoundDays: 42,
                                                },
                                                fixedSizeBucketingConfig: {
                                                    bucketSize: 42,
                                                    lowerBound: {
                                                        booleanValue: true,
                                                        dateValue: {
                                                            day: 42,
                                                            month: 42,
                                                            year: 42,
                                                        },
                                                        dayOfWeekValue: "Test string",
                                                        floatValue: 42,
                                                        integerValue: "Test string",
                                                        stringValue: "Test string",
                                                        timestampValue: "Test string",
                                                        timeValue: {
                                                            hours: 42,
                                                            minutes: 42,
                                                            nanos: 42,
                                                            seconds: 42,
                                                        },
                                                    },
                                                    upperBound: {
                                                        booleanValue: true,
                                                        dateValue: {
                                                            day: 42,
                                                            month: 42,
                                                            year: 42,
                                                        },
                                                        dayOfWeekValue: "Test string",
                                                        floatValue: 42,
                                                        integerValue: "Test string",
                                                        stringValue: "Test string",
                                                        timestampValue: "Test string",
                                                        timeValue: {
                                                            hours: 42,
                                                            minutes: 42,
                                                            nanos: 42,
                                                            seconds: 42,
                                                        },
                                                    },
                                                },
                                                redactConfig: {
                                                },
                                                replaceConfig: {
                                                    newValue: {
                                                        booleanValue: true,
                                                        dateValue: {
                                                            day: 42,
                                                            month: 42,
                                                            year: 42,
                                                        },
                                                        dayOfWeekValue: "Test string",
                                                        floatValue: 42,
                                                        integerValue: "Test string",
                                                        stringValue: "Test string",
                                                        timestampValue: "Test string",
                                                        timeValue: {
                                                            hours: 42,
                                                            minutes: 42,
                                                            nanos: 42,
                                                            seconds: 42,
                                                        },
                                                    },
                                                },
                                                replaceDictionaryConfig: {
                                                    wordList: {
                                                        words: [
                                                            "Test string"
                                                        ],
                                                    },
                                                },
                                                replaceWithInfoTypeConfig: {
                                                },
                                                timePartConfig: {
                                                    partToExtract: "Test string",
                                                },
                                            },
                                        }
                                    ],
                                },
                                primitiveTransformation: {
                                    bucketingConfig: {
                                        buckets: [
                                            {
                                                max: {
                                                    booleanValue: true,
                                                    dateValue: {
                                                        day: 42,
                                                        month: 42,
                                                        year: 42,
                                                    },
                                                    dayOfWeekValue: "Test string",
                                                    floatValue: 42,
                                                    integerValue: "Test string",
                                                    stringValue: "Test string",
                                                    timestampValue: "Test string",
                                                    timeValue: {
                                                        hours: 42,
                                                        minutes: 42,
                                                        nanos: 42,
                                                        seconds: 42,
                                                    },
                                                },
                                                min: {
                                                    booleanValue: true,
                                                    dateValue: {
                                                        day: 42,
                                                        month: 42,
                                                        year: 42,
                                                    },
                                                    dayOfWeekValue: "Test string",
                                                    floatValue: 42,
                                                    integerValue: "Test string",
                                                    stringValue: "Test string",
                                                    timestampValue: "Test string",
                                                    timeValue: {
                                                        hours: 42,
                                                        minutes: 42,
                                                        nanos: 42,
                                                        seconds: 42,
                                                    },
                                                },
                                                replacementValue: {
                                                    booleanValue: true,
                                                    dateValue: {
                                                        day: 42,
                                                        month: 42,
                                                        year: 42,
                                                    },
                                                    dayOfWeekValue: "Test string",
                                                    floatValue: 42,
                                                    integerValue: "Test string",
                                                    stringValue: "Test string",
                                                    timestampValue: "Test string",
                                                    timeValue: {
                                                        hours: 42,
                                                        minutes: 42,
                                                        nanos: 42,
                                                        seconds: 42,
                                                    },
                                                },
                                            }
                                        ],
                                    },
                                    characterMaskConfig: {
                                        charactersToIgnore: [
                                            {
                                                charactersToSkip: "Test string",
                                                commonCharactersToIgnore: "Test string",
                                            }
                                        ],
                                        maskingCharacter: "Test string",
                                        numberToMask: 42,
                                        reverseOrder: true,
                                    },
                                    cryptoDeterministicConfig: {
                                        context: {
                                            name: "Test string",
                                        },
                                        cryptoKey: {
                                            kmsWrapped: {
                                                cryptoKeyName: "Test string",
                                                wrappedKey: "Test string",
                                            },
                                            transient: {
                                                name: "Test string",
                                            },
                                            unwrapped: {
                                                key: "Test string",
                                            },
                                        },
                                        surrogateInfoType: {
                                            name: "Test string",
                                            version: "Test string",
                                        },
                                    },
                                    cryptoHashConfig: {
                                        cryptoKey: {
                                            kmsWrapped: {
                                                cryptoKeyName: "Test string",
                                                wrappedKey: "Test string",
                                            },
                                            transient: {
                                                name: "Test string",
                                            },
                                            unwrapped: {
                                                key: "Test string",
                                            },
                                        },
                                    },
                                    cryptoReplaceFfxFpeConfig: {
                                        commonAlphabet: "Test string",
                                        context: {
                                            name: "Test string",
                                        },
                                        cryptoKey: {
                                            kmsWrapped: {
                                                cryptoKeyName: "Test string",
                                                wrappedKey: "Test string",
                                            },
                                            transient: {
                                                name: "Test string",
                                            },
                                            unwrapped: {
                                                key: "Test string",
                                            },
                                        },
                                        customAlphabet: "Test string",
                                        radix: 42,
                                        surrogateInfoType: {
                                            name: "Test string",
                                            version: "Test string",
                                        },
                                    },
                                    dateShiftConfig: {
                                        context: {
                                            name: "Test string",
                                        },
                                        cryptoKey: {
                                            kmsWrapped: {
                                                cryptoKeyName: "Test string",
                                                wrappedKey: "Test string",
                                            },
                                            transient: {
                                                name: "Test string",
                                            },
                                            unwrapped: {
                                                key: "Test string",
                                            },
                                        },
                                        lowerBoundDays: 42,
                                        upperBoundDays: 42,
                                    },
                                    fixedSizeBucketingConfig: {
                                        bucketSize: 42,
                                        lowerBound: {
                                            booleanValue: true,
                                            dateValue: {
                                                day: 42,
                                                month: 42,
                                                year: 42,
                                            },
                                            dayOfWeekValue: "Test string",
                                            floatValue: 42,
                                            integerValue: "Test string",
                                            stringValue: "Test string",
                                            timestampValue: "Test string",
                                            timeValue: {
                                                hours: 42,
                                                minutes: 42,
                                                nanos: 42,
                                                seconds: 42,
                                            },
                                        },
                                        upperBound: {
                                            booleanValue: true,
                                            dateValue: {
                                                day: 42,
                                                month: 42,
                                                year: 42,
                                            },
                                            dayOfWeekValue: "Test string",
                                            floatValue: 42,
                                            integerValue: "Test string",
                                            stringValue: "Test string",
                                            timestampValue: "Test string",
                                            timeValue: {
                                                hours: 42,
                                                minutes: 42,
                                                nanos: 42,
                                                seconds: 42,
                                            },
                                        },
                                    },
                                    redactConfig: {
                                    },
                                    replaceConfig: {
                                        newValue: {
                                            booleanValue: true,
                                            dateValue: {
                                                day: 42,
                                                month: 42,
                                                year: 42,
                                            },
                                            dayOfWeekValue: "Test string",
                                            floatValue: 42,
                                            integerValue: "Test string",
                                            stringValue: "Test string",
                                            timestampValue: "Test string",
                                            timeValue: {
                                                hours: 42,
                                                minutes: 42,
                                                nanos: 42,
                                                seconds: 42,
                                            },
                                        },
                                    },
                                    replaceDictionaryConfig: {
                                        wordList: {
                                            words: [
                                                "Test string"
                                            ],
                                        },
                                    },
                                    replaceWithInfoTypeConfig: {
                                    },
                                    timePartConfig: {
                                        partToExtract: "Test string",
                                    },
                                },
                            }
                        ],
                        recordSuppressions: [
                            {
                                condition: {
                                    expressions: {
                                        conditions: {
                                            conditions: [
                                                {
                                                    field: {
                                                        name: "Test string",
                                                    },
                                                    operator: "Test string",
                                                    value: {
                                                        booleanValue: true,
                                                        dateValue: {
                                                            day: 42,
                                                            month: 42,
                                                            year: 42,
                                                        },
                                                        dayOfWeekValue: "Test string",
                                                        floatValue: 42,
                                                        integerValue: "Test string",
                                                        stringValue: "Test string",
                                                        timestampValue: "Test string",
                                                        timeValue: {
                                                            hours: 42,
                                                            minutes: 42,
                                                            nanos: 42,
                                                            seconds: 42,
                                                        },
                                                    },
                                                }
                                            ],
                                        },
                                        logicalOperator: "Test string",
                                    },
                                },
                            }
                        ],
                    },
                    transformationErrorHandling: {
                        leaveUntransformed: {
                        },
                        throwError: {
                        },
                    },
                },
                description: "Test string",
                displayName: "Test string",
                name: "Test string",
                updateTime: "Test string",
            },
            locationId: "Test string",
            templateId: "Test string",
        });
        /** Deletes a DeidentifyTemplate. See https://cloud.google.com/dlp/docs/creating-templates-deid to learn more. */
        await gapi.client.dlp.organizations.deidentifyTemplates.delete({
            name: "Test string",
        });
        /** Gets a DeidentifyTemplate. See https://cloud.google.com/dlp/docs/creating-templates-deid to learn more. */
        await gapi.client.dlp.organizations.deidentifyTemplates.get({
            name: "Test string",
        });
        /** Lists DeidentifyTemplates. See https://cloud.google.com/dlp/docs/creating-templates-deid to learn more. */
        await gapi.client.dlp.organizations.deidentifyTemplates.list({
            locationId: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the DeidentifyTemplate. See https://cloud.google.com/dlp/docs/creating-templates-deid to learn more. */
        await gapi.client.dlp.organizations.deidentifyTemplates.patch({
            name: "Test string",
        }, {
            deidentifyTemplate: {
                createTime: "Test string",
                deidentifyConfig: {
                    imageTransformations: {
                        transforms: [
                            {
                                allInfoTypes: {
                                },
                                allText: {
                                },
                                redactionColor: {
                                    blue: 42,
                                    green: 42,
                                    red: 42,
                                },
                                selectedInfoTypes: {
                                    infoTypes: [
                                        {
                                            name: "Test string",
                                            version: "Test string",
                                        }
                                    ],
                                },
                            }
                        ],
                    },
                    infoTypeTransformations: {
                        transformations: [
                            {
                                infoTypes: [
                                    {
                                        name: "Test string",
                                        version: "Test string",
                                    }
                                ],
                                primitiveTransformation: {
                                    bucketingConfig: {
                                        buckets: [
                                            {
                                                max: {
                                                    booleanValue: true,
                                                    dateValue: {
                                                        day: 42,
                                                        month: 42,
                                                        year: 42,
                                                    },
                                                    dayOfWeekValue: "Test string",
                                                    floatValue: 42,
                                                    integerValue: "Test string",
                                                    stringValue: "Test string",
                                                    timestampValue: "Test string",
                                                    timeValue: {
                                                        hours: 42,
                                                        minutes: 42,
                                                        nanos: 42,
                                                        seconds: 42,
                                                    },
                                                },
                                                min: {
                                                    booleanValue: true,
                                                    dateValue: {
                                                        day: 42,
                                                        month: 42,
                                                        year: 42,
                                                    },
                                                    dayOfWeekValue: "Test string",
                                                    floatValue: 42,
                                                    integerValue: "Test string",
                                                    stringValue: "Test string",
                                                    timestampValue: "Test string",
                                                    timeValue: {
                                                        hours: 42,
                                                        minutes: 42,
                                                        nanos: 42,
                                                        seconds: 42,
                                                    },
                                                },
                                                replacementValue: {
                                                    booleanValue: true,
                                                    dateValue: {
                                                        day: 42,
                                                        month: 42,
                                                        year: 42,
                                                    },
                                                    dayOfWeekValue: "Test string",
                                                    floatValue: 42,
                                                    integerValue: "Test string",
                                                    stringValue: "Test string",
                                                    timestampValue: "Test string",
                                                    timeValue: {
                                                        hours: 42,
                                                        minutes: 42,
                                                        nanos: 42,
                                                        seconds: 42,
                                                    },
                                                },
                                            }
                                        ],
                                    },
                                    characterMaskConfig: {
                                        charactersToIgnore: [
                                            {
                                                charactersToSkip: "Test string",
                                                commonCharactersToIgnore: "Test string",
                                            }
                                        ],
                                        maskingCharacter: "Test string",
                                        numberToMask: 42,
                                        reverseOrder: true,
                                    },
                                    cryptoDeterministicConfig: {
                                        context: {
                                            name: "Test string",
                                        },
                                        cryptoKey: {
                                            kmsWrapped: {
                                                cryptoKeyName: "Test string",
                                                wrappedKey: "Test string",
                                            },
                                            transient: {
                                                name: "Test string",
                                            },
                                            unwrapped: {
                                                key: "Test string",
                                            },
                                        },
                                        surrogateInfoType: {
                                            name: "Test string",
                                            version: "Test string",
                                        },
                                    },
                                    cryptoHashConfig: {
                                        cryptoKey: {
                                            kmsWrapped: {
                                                cryptoKeyName: "Test string",
                                                wrappedKey: "Test string",
                                            },
                                            transient: {
                                                name: "Test string",
                                            },
                                            unwrapped: {
                                                key: "Test string",
                                            },
                                        },
                                    },
                                    cryptoReplaceFfxFpeConfig: {
                                        commonAlphabet: "Test string",
                                        context: {
                                            name: "Test string",
                                        },
                                        cryptoKey: {
                                            kmsWrapped: {
                                                cryptoKeyName: "Test string",
                                                wrappedKey: "Test string",
                                            },
                                            transient: {
                                                name: "Test string",
                                            },
                                            unwrapped: {
                                                key: "Test string",
                                            },
                                        },
                                        customAlphabet: "Test string",
                                        radix: 42,
                                        surrogateInfoType: {
                                            name: "Test string",
                                            version: "Test string",
                                        },
                                    },
                                    dateShiftConfig: {
                                        context: {
                                            name: "Test string",
                                        },
                                        cryptoKey: {
                                            kmsWrapped: {
                                                cryptoKeyName: "Test string",
                                                wrappedKey: "Test string",
                                            },
                                            transient: {
                                                name: "Test string",
                                            },
                                            unwrapped: {
                                                key: "Test string",
                                            },
                                        },
                                        lowerBoundDays: 42,
                                        upperBoundDays: 42,
                                    },
                                    fixedSizeBucketingConfig: {
                                        bucketSize: 42,
                                        lowerBound: {
                                            booleanValue: true,
                                            dateValue: {
                                                day: 42,
                                                month: 42,
                                                year: 42,
                                            },
                                            dayOfWeekValue: "Test string",
                                            floatValue: 42,
                                            integerValue: "Test string",
                                            stringValue: "Test string",
                                            timestampValue: "Test string",
                                            timeValue: {
                                                hours: 42,
                                                minutes: 42,
                                                nanos: 42,
                                                seconds: 42,
                                            },
                                        },
                                        upperBound: {
                                            booleanValue: true,
                                            dateValue: {
                                                day: 42,
                                                month: 42,
                                                year: 42,
                                            },
                                            dayOfWeekValue: "Test string",
                                            floatValue: 42,
                                            integerValue: "Test string",
                                            stringValue: "Test string",
                                            timestampValue: "Test string",
                                            timeValue: {
                                                hours: 42,
                                                minutes: 42,
                                                nanos: 42,
                                                seconds: 42,
                                            },
                                        },
                                    },
                                    redactConfig: {
                                    },
                                    replaceConfig: {
                                        newValue: {
                                            booleanValue: true,
                                            dateValue: {
                                                day: 42,
                                                month: 42,
                                                year: 42,
                                            },
                                            dayOfWeekValue: "Test string",
                                            floatValue: 42,
                                            integerValue: "Test string",
                                            stringValue: "Test string",
                                            timestampValue: "Test string",
                                            timeValue: {
                                                hours: 42,
                                                minutes: 42,
                                                nanos: 42,
                                                seconds: 42,
                                            },
                                        },
                                    },
                                    replaceDictionaryConfig: {
                                        wordList: {
                                            words: [
                                                "Test string"
                                            ],
                                        },
                                    },
                                    replaceWithInfoTypeConfig: {
                                    },
                                    timePartConfig: {
                                        partToExtract: "Test string",
                                    },
                                },
                            }
                        ],
                    },
                    recordTransformations: {
                        fieldTransformations: [
                            {
                                condition: {
                                    expressions: {
                                        conditions: {
                                            conditions: [
                                                {
                                                    field: {
                                                        name: "Test string",
                                                    },
                                                    operator: "Test string",
                                                    value: {
                                                        booleanValue: true,
                                                        dateValue: {
                                                            day: 42,
                                                            month: 42,
                                                            year: 42,
                                                        },
                                                        dayOfWeekValue: "Test string",
                                                        floatValue: 42,
                                                        integerValue: "Test string",
                                                        stringValue: "Test string",
                                                        timestampValue: "Test string",
                                                        timeValue: {
                                                            hours: 42,
                                                            minutes: 42,
                                                            nanos: 42,
                                                            seconds: 42,
                                                        },
                                                    },
                                                }
                                            ],
                                        },
                                        logicalOperator: "Test string",
                                    },
                                },
                                fields: [
                                    {
                                        name: "Test string",
                                    }
                                ],
                                infoTypeTransformations: {
                                    transformations: [
                                        {
                                            infoTypes: [
                                                {
                                                    name: "Test string",
                                                    version: "Test string",
                                                }
                                            ],
                                            primitiveTransformation: {
                                                bucketingConfig: {
                                                    buckets: [
                                                        {
                                                            max: {
                                                                booleanValue: true,
                                                                dateValue: {
                                                                    day: 42,
                                                                    month: 42,
                                                                    year: 42,
                                                                },
                                                                dayOfWeekValue: "Test string",
                                                                floatValue: 42,
                                                                integerValue: "Test string",
                                                                stringValue: "Test string",
                                                                timestampValue: "Test string",
                                                                timeValue: {
                                                                    hours: 42,
                                                                    minutes: 42,
                                                                    nanos: 42,
                                                                    seconds: 42,
                                                                },
                                                            },
                                                            min: {
                                                                booleanValue: true,
                                                                dateValue: {
                                                                    day: 42,
                                                                    month: 42,
                                                                    year: 42,
                                                                },
                                                                dayOfWeekValue: "Test string",
                                                                floatValue: 42,
                                                                integerValue: "Test string",
                                                                stringValue: "Test string",
                                                                timestampValue: "Test string",
                                                                timeValue: {
                                                                    hours: 42,
                                                                    minutes: 42,
                                                                    nanos: 42,
                                                                    seconds: 42,
                                                                },
                                                            },
                                                            replacementValue: {
                                                                booleanValue: true,
                                                                dateValue: {
                                                                    day: 42,
                                                                    month: 42,
                                                                    year: 42,
                                                                },
                                                                dayOfWeekValue: "Test string",
                                                                floatValue: 42,
                                                                integerValue: "Test string",
                                                                stringValue: "Test string",
                                                                timestampValue: "Test string",
                                                                timeValue: {
                                                                    hours: 42,
                                                                    minutes: 42,
                                                                    nanos: 42,
                                                                    seconds: 42,
                                                                },
                                                            },
                                                        }
                                                    ],
                                                },
                                                characterMaskConfig: {
                                                    charactersToIgnore: [
                                                        {
                                                            charactersToSkip: "Test string",
                                                            commonCharactersToIgnore: "Test string",
                                                        }
                                                    ],
                                                    maskingCharacter: "Test string",
                                                    numberToMask: 42,
                                                    reverseOrder: true,
                                                },
                                                cryptoDeterministicConfig: {
                                                    context: {
                                                        name: "Test string",
                                                    },
                                                    cryptoKey: {
                                                        kmsWrapped: {
                                                            cryptoKeyName: "Test string",
                                                            wrappedKey: "Test string",
                                                        },
                                                        transient: {
                                                            name: "Test string",
                                                        },
                                                        unwrapped: {
                                                            key: "Test string",
                                                        },
                                                    },
                                                    surrogateInfoType: {
                                                        name: "Test string",
                                                        version: "Test string",
                                                    },
                                                },
                                                cryptoHashConfig: {
                                                    cryptoKey: {
                                                        kmsWrapped: {
                                                            cryptoKeyName: "Test string",
                                                            wrappedKey: "Test string",
                                                        },
                                                        transient: {
                                                            name: "Test string",
                                                        },
                                                        unwrapped: {
                                                            key: "Test string",
                                                        },
                                                    },
                                                },
                                                cryptoReplaceFfxFpeConfig: {
                                                    commonAlphabet: "Test string",
                                                    context: {
                                                        name: "Test string",
                                                    },
                                                    cryptoKey: {
                                                        kmsWrapped: {
                                                            cryptoKeyName: "Test string",
                                                            wrappedKey: "Test string",
                                                        },
                                                        transient: {
                                                            name: "Test string",
                                                        },
                                                        unwrapped: {
                                                            key: "Test string",
                                                        },
                                                    },
                                                    customAlphabet: "Test string",
                                                    radix: 42,
                                                    surrogateInfoType: {
                                                        name: "Test string",
                                                        version: "Test string",
                                                    },
                                                },
                                                dateShiftConfig: {
                                                    context: {
                                                        name: "Test string",
                                                    },
                                                    cryptoKey: {
                                                        kmsWrapped: {
                                                            cryptoKeyName: "Test string",
                                                            wrappedKey: "Test string",
                                                        },
                                                        transient: {
                                                            name: "Test string",
                                                        },
                                                        unwrapped: {
                                                            key: "Test string",
                                                        },
                                                    },
                                                    lowerBoundDays: 42,
                                                    upperBoundDays: 42,
                                                },
                                                fixedSizeBucketingConfig: {
                                                    bucketSize: 42,
                                                    lowerBound: {
                                                        booleanValue: true,
                                                        dateValue: {
                                                            day: 42,
                                                            month: 42,
                                                            year: 42,
                                                        },
                                                        dayOfWeekValue: "Test string",
                                                        floatValue: 42,
                                                        integerValue: "Test string",
                                                        stringValue: "Test string",
                                                        timestampValue: "Test string",
                                                        timeValue: {
                                                            hours: 42,
                                                            minutes: 42,
                                                            nanos: 42,
                                                            seconds: 42,
                                                        },
                                                    },
                                                    upperBound: {
                                                        booleanValue: true,
                                                        dateValue: {
                                                            day: 42,
                                                            month: 42,
                                                            year: 42,
                                                        },
                                                        dayOfWeekValue: "Test string",
                                                        floatValue: 42,
                                                        integerValue: "Test string",
                                                        stringValue: "Test string",
                                                        timestampValue: "Test string",
                                                        timeValue: {
                                                            hours: 42,
                                                            minutes: 42,
                                                            nanos: 42,
                                                            seconds: 42,
                                                        },
                                                    },
                                                },
                                                redactConfig: {
                                                },
                                                replaceConfig: {
                                                    newValue: {
                                                        booleanValue: true,
                                                        dateValue: {
                                                            day: 42,
                                                            month: 42,
                                                            year: 42,
                                                        },
                                                        dayOfWeekValue: "Test string",
                                                        floatValue: 42,
                                                        integerValue: "Test string",
                                                        stringValue: "Test string",
                                                        timestampValue: "Test string",
                                                        timeValue: {
                                                            hours: 42,
                                                            minutes: 42,
                                                            nanos: 42,
                                                            seconds: 42,
                                                        },
                                                    },
                                                },
                                                replaceDictionaryConfig: {
                                                    wordList: {
                                                        words: [
                                                            "Test string"
                                                        ],
                                                    },
                                                },
                                                replaceWithInfoTypeConfig: {
                                                },
                                                timePartConfig: {
                                                    partToExtract: "Test string",
                                                },
                                            },
                                        }
                                    ],
                                },
                                primitiveTransformation: {
                                    bucketingConfig: {
                                        buckets: [
                                            {
                                                max: {
                                                    booleanValue: true,
                                                    dateValue: {
                                                        day: 42,
                                                        month: 42,
                                                        year: 42,
                                                    },
                                                    dayOfWeekValue: "Test string",
                                                    floatValue: 42,
                                                    integerValue: "Test string",
                                                    stringValue: "Test string",
                                                    timestampValue: "Test string",
                                                    timeValue: {
                                                        hours: 42,
                                                        minutes: 42,
                                                        nanos: 42,
                                                        seconds: 42,
                                                    },
                                                },
                                                min: {
                                                    booleanValue: true,
                                                    dateValue: {
                                                        day: 42,
                                                        month: 42,
                                                        year: 42,
                                                    },
                                                    dayOfWeekValue: "Test string",
                                                    floatValue: 42,
                                                    integerValue: "Test string",
                                                    stringValue: "Test string",
                                                    timestampValue: "Test string",
                                                    timeValue: {
                                                        hours: 42,
                                                        minutes: 42,
                                                        nanos: 42,
                                                        seconds: 42,
                                                    },
                                                },
                                                replacementValue: {
                                                    booleanValue: true,
                                                    dateValue: {
                                                        day: 42,
                                                        month: 42,
                                                        year: 42,
                                                    },
                                                    dayOfWeekValue: "Test string",
                                                    floatValue: 42,
                                                    integerValue: "Test string",
                                                    stringValue: "Test string",
                                                    timestampValue: "Test string",
                                                    timeValue: {
                                                        hours: 42,
                                                        minutes: 42,
                                                        nanos: 42,
                                                        seconds: 42,
                                                    },
                                                },
                                            }
                                        ],
                                    },
                                    characterMaskConfig: {
                                        charactersToIgnore: [
                                            {
                                                charactersToSkip: "Test string",
                                                commonCharactersToIgnore: "Test string",
                                            }
                                        ],
                                        maskingCharacter: "Test string",
                                        numberToMask: 42,
                                        reverseOrder: true,
                                    },
                                    cryptoDeterministicConfig: {
                                        context: {
                                            name: "Test string",
                                        },
                                        cryptoKey: {
                                            kmsWrapped: {
                                                cryptoKeyName: "Test string",
                                                wrappedKey: "Test string",
                                            },
                                            transient: {
                                                name: "Test string",
                                            },
                                            unwrapped: {
                                                key: "Test string",
                                            },
                                        },
                                        surrogateInfoType: {
                                            name: "Test string",
                                            version: "Test string",
                                        },
                                    },
                                    cryptoHashConfig: {
                                        cryptoKey: {
                                            kmsWrapped: {
                                                cryptoKeyName: "Test string",
                                                wrappedKey: "Test string",
                                            },
                                            transient: {
                                                name: "Test string",
                                            },
                                            unwrapped: {
                                                key: "Test string",
                                            },
                                        },
                                    },
                                    cryptoReplaceFfxFpeConfig: {
                                        commonAlphabet: "Test string",
                                        context: {
                                            name: "Test string",
                                        },
                                        cryptoKey: {
                                            kmsWrapped: {
                                                cryptoKeyName: "Test string",
                                                wrappedKey: "Test string",
                                            },
                                            transient: {
                                                name: "Test string",
                                            },
                                            unwrapped: {
                                                key: "Test string",
                                            },
                                        },
                                        customAlphabet: "Test string",
                                        radix: 42,
                                        surrogateInfoType: {
                                            name: "Test string",
                                            version: "Test string",
                                        },
                                    },
                                    dateShiftConfig: {
                                        context: {
                                            name: "Test string",
                                        },
                                        cryptoKey: {
                                            kmsWrapped: {
                                                cryptoKeyName: "Test string",
                                                wrappedKey: "Test string",
                                            },
                                            transient: {
                                                name: "Test string",
                                            },
                                            unwrapped: {
                                                key: "Test string",
                                            },
                                        },
                                        lowerBoundDays: 42,
                                        upperBoundDays: 42,
                                    },
                                    fixedSizeBucketingConfig: {
                                        bucketSize: 42,
                                        lowerBound: {
                                            booleanValue: true,
                                            dateValue: {
                                                day: 42,
                                                month: 42,
                                                year: 42,
                                            },
                                            dayOfWeekValue: "Test string",
                                            floatValue: 42,
                                            integerValue: "Test string",
                                            stringValue: "Test string",
                                            timestampValue: "Test string",
                                            timeValue: {
                                                hours: 42,
                                                minutes: 42,
                                                nanos: 42,
                                                seconds: 42,
                                            },
                                        },
                                        upperBound: {
                                            booleanValue: true,
                                            dateValue: {
                                                day: 42,
                                                month: 42,
                                                year: 42,
                                            },
                                            dayOfWeekValue: "Test string",
                                            floatValue: 42,
                                            integerValue: "Test string",
                                            stringValue: "Test string",
                                            timestampValue: "Test string",
                                            timeValue: {
                                                hours: 42,
                                                minutes: 42,
                                                nanos: 42,
                                                seconds: 42,
                                            },
                                        },
                                    },
                                    redactConfig: {
                                    },
                                    replaceConfig: {
                                        newValue: {
                                            booleanValue: true,
                                            dateValue: {
                                                day: 42,
                                                month: 42,
                                                year: 42,
                                            },
                                            dayOfWeekValue: "Test string",
                                            floatValue: 42,
                                            integerValue: "Test string",
                                            stringValue: "Test string",
                                            timestampValue: "Test string",
                                            timeValue: {
                                                hours: 42,
                                                minutes: 42,
                                                nanos: 42,
                                                seconds: 42,
                                            },
                                        },
                                    },
                                    replaceDictionaryConfig: {
                                        wordList: {
                                            words: [
                                                "Test string"
                                            ],
                                        },
                                    },
                                    replaceWithInfoTypeConfig: {
                                    },
                                    timePartConfig: {
                                        partToExtract: "Test string",
                                    },
                                },
                            }
                        ],
                        recordSuppressions: [
                            {
                                condition: {
                                    expressions: {
                                        conditions: {
                                            conditions: [
                                                {
                                                    field: {
                                                        name: "Test string",
                                                    },
                                                    operator: "Test string",
                                                    value: {
                                                        booleanValue: true,
                                                        dateValue: {
                                                            day: 42,
                                                            month: 42,
                                                            year: 42,
                                                        },
                                                        dayOfWeekValue: "Test string",
                                                        floatValue: 42,
                                                        integerValue: "Test string",
                                                        stringValue: "Test string",
                                                        timestampValue: "Test string",
                                                        timeValue: {
                                                            hours: 42,
                                                            minutes: 42,
                                                            nanos: 42,
                                                            seconds: 42,
                                                        },
                                                    },
                                                }
                                            ],
                                        },
                                        logicalOperator: "Test string",
                                    },
                                },
                            }
                        ],
                    },
                    transformationErrorHandling: {
                        leaveUntransformed: {
                        },
                        throwError: {
                        },
                    },
                },
                description: "Test string",
                displayName: "Test string",
                name: "Test string",
                updateTime: "Test string",
            },
            updateMask: "Test string",
        });
        /** Creates an InspectTemplate for reusing frequently used configuration for inspecting content, images, and storage. See https://cloud.google.com/dlp/docs/creating-templates to learn more. */
        await gapi.client.dlp.organizations.inspectTemplates.create({
            parent: "Test string",
        }, {
            inspectTemplate: {
                createTime: "Test string",
                description: "Test string",
                displayName: "Test string",
                inspectConfig: {
                    contentOptions: [
                        "Test string"
                    ],
                    customInfoTypes: [
                        {
                            detectionRules: [
                                {
                                    hotwordRule: {
                                        hotwordRegex: {
                                            groupIndexes: [
                                                42
                                            ],
                                            pattern: "Test string",
                                        },
                                        likelihoodAdjustment: {
                                            fixedLikelihood: "Test string",
                                            relativeLikelihood: 42,
                                        },
                                        proximity: {
                                            windowAfter: 42,
                                            windowBefore: 42,
                                        },
                                    },
                                }
                            ],
                            dictionary: {
                                cloudStoragePath: {
                                    path: "Test string",
                                },
                                wordList: {
                                    words: [
                                        "Test string"
                                    ],
                                },
                            },
                            exclusionType: "Test string",
                            infoType: {
                                name: "Test string",
                                version: "Test string",
                            },
                            likelihood: "Test string",
                            regex: {
                                groupIndexes: [
                                    42
                                ],
                                pattern: "Test string",
                            },
                            storedType: {
                                createTime: "Test string",
                                name: "Test string",
                            },
                            surrogateType: {
                            },
                        }
                    ],
                    excludeInfoTypes: true,
                    includeQuote: true,
                    infoTypes: [
                        {
                            name: "Test string",
                            version: "Test string",
                        }
                    ],
                    limits: {
                        maxFindingsPerInfoType: [
                            {
                                infoType: {
                                    name: "Test string",
                                    version: "Test string",
                                },
                                maxFindings: 42,
                            }
                        ],
                        maxFindingsPerItem: 42,
                        maxFindingsPerRequest: 42,
                    },
                    minLikelihood: "Test string",
                    ruleSet: [
                        {
                            infoTypes: [
                                {
                                    name: "Test string",
                                    version: "Test string",
                                }
                            ],
                            rules: [
                                {
                                    exclusionRule: {
                                        dictionary: {
                                            cloudStoragePath: {
                                                path: "Test string",
                                            },
                                            wordList: {
                                                words: [
                                                    "Test string"
                                                ],
                                            },
                                        },
                                        excludeByHotword: {
                                            hotwordRegex: {
                                                groupIndexes: [
                                                    42
                                                ],
                                                pattern: "Test string",
                                            },
                                            proximity: {
                                                windowAfter: 42,
                                                windowBefore: 42,
                                            },
                                        },
                                        excludeInfoTypes: {
                                            infoTypes: [
                                                {
                                                    name: "Test string",
                                                    version: "Test string",
                                                }
                                            ],
                                        },
                                        matchingType: "Test string",
                                        regex: {
                                            groupIndexes: [
                                                42
                                            ],
                                            pattern: "Test string",
                                        },
                                    },
                                    hotwordRule: {
                                        hotwordRegex: {
                                            groupIndexes: [
                                                42
                                            ],
                                            pattern: "Test string",
                                        },
                                        likelihoodAdjustment: {
                                            fixedLikelihood: "Test string",
                                            relativeLikelihood: 42,
                                        },
                                        proximity: {
                                            windowAfter: 42,
                                            windowBefore: 42,
                                        },
                                    },
                                }
                            ],
                        }
                    ],
                },
                name: "Test string",
                updateTime: "Test string",
            },
            locationId: "Test string",
            templateId: "Test string",
        });
        /** Deletes an InspectTemplate. See https://cloud.google.com/dlp/docs/creating-templates to learn more. */
        await gapi.client.dlp.organizations.inspectTemplates.delete({
            name: "Test string",
        });
        /** Gets an InspectTemplate. See https://cloud.google.com/dlp/docs/creating-templates to learn more. */
        await gapi.client.dlp.organizations.inspectTemplates.get({
            name: "Test string",
        });
        /** Lists InspectTemplates. See https://cloud.google.com/dlp/docs/creating-templates to learn more. */
        await gapi.client.dlp.organizations.inspectTemplates.list({
            locationId: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the InspectTemplate. See https://cloud.google.com/dlp/docs/creating-templates to learn more. */
        await gapi.client.dlp.organizations.inspectTemplates.patch({
            name: "Test string",
        }, {
            inspectTemplate: {
                createTime: "Test string",
                description: "Test string",
                displayName: "Test string",
                inspectConfig: {
                    contentOptions: [
                        "Test string"
                    ],
                    customInfoTypes: [
                        {
                            detectionRules: [
                                {
                                    hotwordRule: {
                                        hotwordRegex: {
                                            groupIndexes: [
                                                42
                                            ],
                                            pattern: "Test string",
                                        },
                                        likelihoodAdjustment: {
                                            fixedLikelihood: "Test string",
                                            relativeLikelihood: 42,
                                        },
                                        proximity: {
                                            windowAfter: 42,
                                            windowBefore: 42,
                                        },
                                    },
                                }
                            ],
                            dictionary: {
                                cloudStoragePath: {
                                    path: "Test string",
                                },
                                wordList: {
                                    words: [
                                        "Test string"
                                    ],
                                },
                            },
                            exclusionType: "Test string",
                            infoType: {
                                name: "Test string",
                                version: "Test string",
                            },
                            likelihood: "Test string",
                            regex: {
                                groupIndexes: [
                                    42
                                ],
                                pattern: "Test string",
                            },
                            storedType: {
                                createTime: "Test string",
                                name: "Test string",
                            },
                            surrogateType: {
                            },
                        }
                    ],
                    excludeInfoTypes: true,
                    includeQuote: true,
                    infoTypes: [
                        {
                            name: "Test string",
                            version: "Test string",
                        }
                    ],
                    limits: {
                        maxFindingsPerInfoType: [
                            {
                                infoType: {
                                    name: "Test string",
                                    version: "Test string",
                                },
                                maxFindings: 42,
                            }
                        ],
                        maxFindingsPerItem: 42,
                        maxFindingsPerRequest: 42,
                    },
                    minLikelihood: "Test string",
                    ruleSet: [
                        {
                            infoTypes: [
                                {
                                    name: "Test string",
                                    version: "Test string",
                                }
                            ],
                            rules: [
                                {
                                    exclusionRule: {
                                        dictionary: {
                                            cloudStoragePath: {
                                                path: "Test string",
                                            },
                                            wordList: {
                                                words: [
                                                    "Test string"
                                                ],
                                            },
                                        },
                                        excludeByHotword: {
                                            hotwordRegex: {
                                                groupIndexes: [
                                                    42
                                                ],
                                                pattern: "Test string",
                                            },
                                            proximity: {
                                                windowAfter: 42,
                                                windowBefore: 42,
                                            },
                                        },
                                        excludeInfoTypes: {
                                            infoTypes: [
                                                {
                                                    name: "Test string",
                                                    version: "Test string",
                                                }
                                            ],
                                        },
                                        matchingType: "Test string",
                                        regex: {
                                            groupIndexes: [
                                                42
                                            ],
                                            pattern: "Test string",
                                        },
                                    },
                                    hotwordRule: {
                                        hotwordRegex: {
                                            groupIndexes: [
                                                42
                                            ],
                                            pattern: "Test string",
                                        },
                                        likelihoodAdjustment: {
                                            fixedLikelihood: "Test string",
                                            relativeLikelihood: 42,
                                        },
                                        proximity: {
                                            windowAfter: 42,
                                            windowBefore: 42,
                                        },
                                    },
                                }
                            ],
                        }
                    ],
                },
                name: "Test string",
                updateTime: "Test string",
            },
            updateMask: "Test string",
        });
        /**
         * Creates a DeidentifyTemplate for reusing frequently used configuration for de-identifying content, images, and storage. See https://cloud.google.com/dlp/docs/creating-templates-deid to
         * learn more.
         */
        await gapi.client.dlp.organizations.locations.deidentifyTemplates.create({
            parent: "Test string",
        }, {
            deidentifyTemplate: {
                createTime: "Test string",
                deidentifyConfig: {
                    imageTransformations: {
                        transforms: [
                            {
                                allInfoTypes: {
                                },
                                allText: {
                                },
                                redactionColor: {
                                    blue: 42,
                                    green: 42,
                                    red: 42,
                                },
                                selectedInfoTypes: {
                                    infoTypes: [
                                        {
                                            name: "Test string",
                                            version: "Test string",
                                        }
                                    ],
                                },
                            }
                        ],
                    },
                    infoTypeTransformations: {
                        transformations: [
                            {
                                infoTypes: [
                                    {
                                        name: "Test string",
                                        version: "Test string",
                                    }
                                ],
                                primitiveTransformation: {
                                    bucketingConfig: {
                                        buckets: [
                                            {
                                                max: {
                                                    booleanValue: true,
                                                    dateValue: {
                                                        day: 42,
                                                        month: 42,
                                                        year: 42,
                                                    },
                                                    dayOfWeekValue: "Test string",
                                                    floatValue: 42,
                                                    integerValue: "Test string",
                                                    stringValue: "Test string",
                                                    timestampValue: "Test string",
                                                    timeValue: {
                                                        hours: 42,
                                                        minutes: 42,
                                                        nanos: 42,
                                                        seconds: 42,
                                                    },
                                                },
                                                min: {
                                                    booleanValue: true,
                                                    dateValue: {
                                                        day: 42,
                                                        month: 42,
                                                        year: 42,
                                                    },
                                                    dayOfWeekValue: "Test string",
                                                    floatValue: 42,
                                                    integerValue: "Test string",
                                                    stringValue: "Test string",
                                                    timestampValue: "Test string",
                                                    timeValue: {
                                                        hours: 42,
                                                        minutes: 42,
                                                        nanos: 42,
                                                        seconds: 42,
                                                    },
                                                },
                                                replacementValue: {
                                                    booleanValue: true,
                                                    dateValue: {
                                                        day: 42,
                                                        month: 42,
                                                        year: 42,
                                                    },
                                                    dayOfWeekValue: "Test string",
                                                    floatValue: 42,
                                                    integerValue: "Test string",
                                                    stringValue: "Test string",
                                                    timestampValue: "Test string",
                                                    timeValue: {
                                                        hours: 42,
                                                        minutes: 42,
                                                        nanos: 42,
                                                        seconds: 42,
                                                    },
                                                },
                                            }
                                        ],
                                    },
                                    characterMaskConfig: {
                                        charactersToIgnore: [
                                            {
                                                charactersToSkip: "Test string",
                                                commonCharactersToIgnore: "Test string",
                                            }
                                        ],
                                        maskingCharacter: "Test string",
                                        numberToMask: 42,
                                        reverseOrder: true,
                                    },
                                    cryptoDeterministicConfig: {
                                        context: {
                                            name: "Test string",
                                        },
                                        cryptoKey: {
                                            kmsWrapped: {
                                                cryptoKeyName: "Test string",
                                                wrappedKey: "Test string",
                                            },
                                            transient: {
                                                name: "Test string",
                                            },
                                            unwrapped: {
                                                key: "Test string",
                                            },
                                        },
                                        surrogateInfoType: {
                                            name: "Test string",
                                            version: "Test string",
                                        },
                                    },
                                    cryptoHashConfig: {
                                        cryptoKey: {
                                            kmsWrapped: {
                                                cryptoKeyName: "Test string",
                                                wrappedKey: "Test string",
                                            },
                                            transient: {
                                                name: "Test string",
                                            },
                                            unwrapped: {
                                                key: "Test string",
                                            },
                                        },
                                    },
                                    cryptoReplaceFfxFpeConfig: {
                                        commonAlphabet: "Test string",
                                        context: {
                                            name: "Test string",
                                        },
                                        cryptoKey: {
                                            kmsWrapped: {
                                                cryptoKeyName: "Test string",
                                                wrappedKey: "Test string",
                                            },
                                            transient: {
                                                name: "Test string",
                                            },
                                            unwrapped: {
                                                key: "Test string",
                                            },
                                        },
                                        customAlphabet: "Test string",
                                        radix: 42,
                                        surrogateInfoType: {
                                            name: "Test string",
                                            version: "Test string",
                                        },
                                    },
                                    dateShiftConfig: {
                                        context: {
                                            name: "Test string",
                                        },
                                        cryptoKey: {
                                            kmsWrapped: {
                                                cryptoKeyName: "Test string",
                                                wrappedKey: "Test string",
                                            },
                                            transient: {
                                                name: "Test string",
                                            },
                                            unwrapped: {
                                                key: "Test string",
                                            },
                                        },
                                        lowerBoundDays: 42,
                                        upperBoundDays: 42,
                                    },
                                    fixedSizeBucketingConfig: {
                                        bucketSize: 42,
                                        lowerBound: {
                                            booleanValue: true,
                                            dateValue: {
                                                day: 42,
                                                month: 42,
                                                year: 42,
                                            },
                                            dayOfWeekValue: "Test string",
                                            floatValue: 42,
                                            integerValue: "Test string",
                                            stringValue: "Test string",
                                            timestampValue: "Test string",
                                            timeValue: {
                                                hours: 42,
                                                minutes: 42,
                                                nanos: 42,
                                                seconds: 42,
                                            },
                                        },
                                        upperBound: {
                                            booleanValue: true,
                                            dateValue: {
                                                day: 42,
                                                month: 42,
                                                year: 42,
                                            },
                                            dayOfWeekValue: "Test string",
                                            floatValue: 42,
                                            integerValue: "Test string",
                                            stringValue: "Test string",
                                            timestampValue: "Test string",
                                            timeValue: {
                                                hours: 42,
                                                minutes: 42,
                                                nanos: 42,
                                                seconds: 42,
                                            },
                                        },
                                    },
                                    redactConfig: {
                                    },
                                    replaceConfig: {
                                        newValue: {
                                            booleanValue: true,
                                            dateValue: {
                                                day: 42,
                                                month: 42,
                                                year: 42,
                                            },
                                            dayOfWeekValue: "Test string",
                                            floatValue: 42,
                                            integerValue: "Test string",
                                            stringValue: "Test string",
                                            timestampValue: "Test string",
                                            timeValue: {
                                                hours: 42,
                                                minutes: 42,
                                                nanos: 42,
                                                seconds: 42,
                                            },
                                        },
                                    },
                                    replaceDictionaryConfig: {
                                        wordList: {
                                            words: [
                                                "Test string"
                                            ],
                                        },
                                    },
                                    replaceWithInfoTypeConfig: {
                                    },
                                    timePartConfig: {
                                        partToExtract: "Test string",
                                    },
                                },
                            }
                        ],
                    },
                    recordTransformations: {
                        fieldTransformations: [
                            {
                                condition: {
                                    expressions: {
                                        conditions: {
                                            conditions: [
                                                {
                                                    field: {
                                                        name: "Test string",
                                                    },
                                                    operator: "Test string",
                                                    value: {
                                                        booleanValue: true,
                                                        dateValue: {
                                                            day: 42,
                                                            month: 42,
                                                            year: 42,
                                                        },
                                                        dayOfWeekValue: "Test string",
                                                        floatValue: 42,
                                                        integerValue: "Test string",
                                                        stringValue: "Test string",
                                                        timestampValue: "Test string",
                                                        timeValue: {
                                                            hours: 42,
                                                            minutes: 42,
                                                            nanos: 42,
                                                            seconds: 42,
                                                        },
                                                    },
                                                }
                                            ],
                                        },
                                        logicalOperator: "Test string",
                                    },
                                },
                                fields: [
                                    {
                                        name: "Test string",
                                    }
                                ],
                                infoTypeTransformations: {
                                    transformations: [
                                        {
                                            infoTypes: [
                                                {
                                                    name: "Test string",
                                                    version: "Test string",
                                                }
                                            ],
                                            primitiveTransformation: {
                                                bucketingConfig: {
                                                    buckets: [
                                                        {
                                                            max: {
                                                                booleanValue: true,
                                                                dateValue: {
                                                                    day: 42,
                                                                    month: 42,
                                                                    year: 42,
                                                                },
                                                                dayOfWeekValue: "Test string",
                                                                floatValue: 42,
                                                                integerValue: "Test string",
                                                                stringValue: "Test string",
                                                                timestampValue: "Test string",
                                                                timeValue: {
                                                                    hours: 42,
                                                                    minutes: 42,
                                                                    nanos: 42,
                                                                    seconds: 42,
                                                                },
                                                            },
                                                            min: {
                                                                booleanValue: true,
                                                                dateValue: {
                                                                    day: 42,
                                                                    month: 42,
                                                                    year: 42,
                                                                },
                                                                dayOfWeekValue: "Test string",
                                                                floatValue: 42,
                                                                integerValue: "Test string",
                                                                stringValue: "Test string",
                                                                timestampValue: "Test string",
                                                                timeValue: {
                                                                    hours: 42,
                                                                    minutes: 42,
                                                                    nanos: 42,
                                                                    seconds: 42,
                                                                },
                                                            },
                                                            replacementValue: {
                                                                booleanValue: true,
                                                                dateValue: {
                                                                    day: 42,
                                                                    month: 42,
                                                                    year: 42,
                                                                },
                                                                dayOfWeekValue: "Test string",
                                                                floatValue: 42,
                                                                integerValue: "Test string",
                                                                stringValue: "Test string",
                                                                timestampValue: "Test string",
                                                                timeValue: {
                                                                    hours: 42,
                                                                    minutes: 42,
                                                                    nanos: 42,
                                                                    seconds: 42,
                                                                },
                                                            },
                                                        }
                                                    ],
                                                },
                                                characterMaskConfig: {
                                                    charactersToIgnore: [
                                                        {
                                                            charactersToSkip: "Test string",
                                                            commonCharactersToIgnore: "Test string",
                                                        }
                                                    ],
                                                    maskingCharacter: "Test string",
                                                    numberToMask: 42,
                                                    reverseOrder: true,
                                                },
                                                cryptoDeterministicConfig: {
                                                    context: {
                                                        name: "Test string",
                                                    },
                                                    cryptoKey: {
                                                        kmsWrapped: {
                                                            cryptoKeyName: "Test string",
                                                            wrappedKey: "Test string",
                                                        },
                                                        transient: {
                                                            name: "Test string",
                                                        },
                                                        unwrapped: {
                                                            key: "Test string",
                                                        },
                                                    },
                                                    surrogateInfoType: {
                                                        name: "Test string",
                                                        version: "Test string",
                                                    },
                                                },
                                                cryptoHashConfig: {
                                                    cryptoKey: {
                                                        kmsWrapped: {
                                                            cryptoKeyName: "Test string",
                                                            wrappedKey: "Test string",
                                                        },
                                                        transient: {
                                                            name: "Test string",
                                                        },
                                                        unwrapped: {
                                                            key: "Test string",
                                                        },
                                                    },
                                                },
                                                cryptoReplaceFfxFpeConfig: {
                                                    commonAlphabet: "Test string",
                                                    context: {
                                                        name: "Test string",
                                                    },
                                                    cryptoKey: {
                                                        kmsWrapped: {
                                                            cryptoKeyName: "Test string",
                                                            wrappedKey: "Test string",
                                                        },
                                                        transient: {
                                                            name: "Test string",
                                                        },
                                                        unwrapped: {
                                                            key: "Test string",
                                                        },
                                                    },
                                                    customAlphabet: "Test string",
                                                    radix: 42,
                                                    surrogateInfoType: {
                                                        name: "Test string",
                                                        version: "Test string",
                                                    },
                                                },
                                                dateShiftConfig: {
                                                    context: {
                                                        name: "Test string",
                                                    },
                                                    cryptoKey: {
                                                        kmsWrapped: {
                                                            cryptoKeyName: "Test string",
                                                            wrappedKey: "Test string",
                                                        },
                                                        transient: {
                                                            name: "Test string",
                                                        },
                                                        unwrapped: {
                                                            key: "Test string",
                                                        },
                                                    },
                                                    lowerBoundDays: 42,
                                                    upperBoundDays: 42,
                                                },
                                                fixedSizeBucketingConfig: {
                                                    bucketSize: 42,
                                                    lowerBound: {
                                                        booleanValue: true,
                                                        dateValue: {
                                                            day: 42,
                                                            month: 42,
                                                            year: 42,
                                                        },
                                                        dayOfWeekValue: "Test string",
                                                        floatValue: 42,
                                                        integerValue: "Test string",
                                                        stringValue: "Test string",
                                                        timestampValue: "Test string",
                                                        timeValue: {
                                                            hours: 42,
                                                            minutes: 42,
                                                            nanos: 42,
                                                            seconds: 42,
                                                        },
                                                    },
                                                    upperBound: {
                                                        booleanValue: true,
                                                        dateValue: {
                                                            day: 42,
                                                            month: 42,
                                                            year: 42,
                                                        },
                                                        dayOfWeekValue: "Test string",
                                                        floatValue: 42,
                                                        integerValue: "Test string",
                                                        stringValue: "Test string",
                                                        timestampValue: "Test string",
                                                        timeValue: {
                                                            hours: 42,
                                                            minutes: 42,
                                                            nanos: 42,
                                                            seconds: 42,
                                                        },
                                                    },
                                                },
                                                redactConfig: {
                                                },
                                                replaceConfig: {
                                                    newValue: {
                                                        booleanValue: true,
                                                        dateValue: {
                                                            day: 42,
                                                            month: 42,
                                                            year: 42,
                                                        },
                                                        dayOfWeekValue: "Test string",
                                                        floatValue: 42,
                                                        integerValue: "Test string",
                                                        stringValue: "Test string",
                                                        timestampValue: "Test string",
                                                        timeValue: {
                                                            hours: 42,
                                                            minutes: 42,
                                                            nanos: 42,
                                                            seconds: 42,
                                                        },
                                                    },
                                                },
                                                replaceDictionaryConfig: {
                                                    wordList: {
                                                        words: [
                                                            "Test string"
                                                        ],
                                                    },
                                                },
                                                replaceWithInfoTypeConfig: {
                                                },
                                                timePartConfig: {
                                                    partToExtract: "Test string",
                                                },
                                            },
                                        }
                                    ],
                                },
                                primitiveTransformation: {
                                    bucketingConfig: {
                                        buckets: [
                                            {
                                                max: {
                                                    booleanValue: true,
                                                    dateValue: {
                                                        day: 42,
                                                        month: 42,
                                                        year: 42,
                                                    },
                                                    dayOfWeekValue: "Test string",
                                                    floatValue: 42,
                                                    integerValue: "Test string",
                                                    stringValue: "Test string",
                                                    timestampValue: "Test string",
                                                    timeValue: {
                                                        hours: 42,
                                                        minutes: 42,
                                                        nanos: 42,
                                                        seconds: 42,
                                                    },
                                                },
                                                min: {
                                                    booleanValue: true,
                                                    dateValue: {
                                                        day: 42,
                                                        month: 42,
                                                        year: 42,
                                                    },
                                                    dayOfWeekValue: "Test string",
                                                    floatValue: 42,
                                                    integerValue: "Test string",
                                                    stringValue: "Test string",
                                                    timestampValue: "Test string",
                                                    timeValue: {
                                                        hours: 42,
                                                        minutes: 42,
                                                        nanos: 42,
                                                        seconds: 42,
                                                    },
                                                },
                                                replacementValue: {
                                                    booleanValue: true,
                                                    dateValue: {
                                                        day: 42,
                                                        month: 42,
                                                        year: 42,
                                                    },
                                                    dayOfWeekValue: "Test string",
                                                    floatValue: 42,
                                                    integerValue: "Test string",
                                                    stringValue: "Test string",
                                                    timestampValue: "Test string",
                                                    timeValue: {
                                                        hours: 42,
                                                        minutes: 42,
                                                        nanos: 42,
                                                        seconds: 42,
                                                    },
                                                },
                                            }
                                        ],
                                    },
                                    characterMaskConfig: {
                                        charactersToIgnore: [
                                            {
                                                charactersToSkip: "Test string",
                                                commonCharactersToIgnore: "Test string",
                                            }
                                        ],
                                        maskingCharacter: "Test string",
                                        numberToMask: 42,
                                        reverseOrder: true,
                                    },
                                    cryptoDeterministicConfig: {
                                        context: {
                                            name: "Test string",
                                        },
                                        cryptoKey: {
                                            kmsWrapped: {
                                                cryptoKeyName: "Test string",
                                                wrappedKey: "Test string",
                                            },
                                            transient: {
                                                name: "Test string",
                                            },
                                            unwrapped: {
                                                key: "Test string",
                                            },
                                        },
                                        surrogateInfoType: {
                                            name: "Test string",
                                            version: "Test string",
                                        },
                                    },
                                    cryptoHashConfig: {
                                        cryptoKey: {
                                            kmsWrapped: {
                                                cryptoKeyName: "Test string",
                                                wrappedKey: "Test string",
                                            },
                                            transient: {
                                                name: "Test string",
                                            },
                                            unwrapped: {
                                                key: "Test string",
                                            },
                                        },
                                    },
                                    cryptoReplaceFfxFpeConfig: {
                                        commonAlphabet: "Test string",
                                        context: {
                                            name: "Test string",
                                        },
                                        cryptoKey: {
                                            kmsWrapped: {
                                                cryptoKeyName: "Test string",
                                                wrappedKey: "Test string",
                                            },
                                            transient: {
                                                name: "Test string",
                                            },
                                            unwrapped: {
                                                key: "Test string",
                                            },
                                        },
                                        customAlphabet: "Test string",
                                        radix: 42,
                                        surrogateInfoType: {
                                            name: "Test string",
                                            version: "Test string",
                                        },
                                    },
                                    dateShiftConfig: {
                                        context: {
                                            name: "Test string",
                                        },
                                        cryptoKey: {
                                            kmsWrapped: {
                                                cryptoKeyName: "Test string",
                                                wrappedKey: "Test string",
                                            },
                                            transient: {
                                                name: "Test string",
                                            },
                                            unwrapped: {
                                                key: "Test string",
                                            },
                                        },
                                        lowerBoundDays: 42,
                                        upperBoundDays: 42,
                                    },
                                    fixedSizeBucketingConfig: {
                                        bucketSize: 42,
                                        lowerBound: {
                                            booleanValue: true,
                                            dateValue: {
                                                day: 42,
                                                month: 42,
                                                year: 42,
                                            },
                                            dayOfWeekValue: "Test string",
                                            floatValue: 42,
                                            integerValue: "Test string",
                                            stringValue: "Test string",
                                            timestampValue: "Test string",
                                            timeValue: {
                                                hours: 42,
                                                minutes: 42,
                                                nanos: 42,
                                                seconds: 42,
                                            },
                                        },
                                        upperBound: {
                                            booleanValue: true,
                                            dateValue: {
                                                day: 42,
                                                month: 42,
                                                year: 42,
                                            },
                                            dayOfWeekValue: "Test string",
                                            floatValue: 42,
                                            integerValue: "Test string",
                                            stringValue: "Test string",
                                            timestampValue: "Test string",
                                            timeValue: {
                                                hours: 42,
                                                minutes: 42,
                                                nanos: 42,
                                                seconds: 42,
                                            },
                                        },
                                    },
                                    redactConfig: {
                                    },
                                    replaceConfig: {
                                        newValue: {
                                            booleanValue: true,
                                            dateValue: {
                                                day: 42,
                                                month: 42,
                                                year: 42,
                                            },
                                            dayOfWeekValue: "Test string",
                                            floatValue: 42,
                                            integerValue: "Test string",
                                            stringValue: "Test string",
                                            timestampValue: "Test string",
                                            timeValue: {
                                                hours: 42,
                                                minutes: 42,
                                                nanos: 42,
                                                seconds: 42,
                                            },
                                        },
                                    },
                                    replaceDictionaryConfig: {
                                        wordList: {
                                            words: [
                                                "Test string"
                                            ],
                                        },
                                    },
                                    replaceWithInfoTypeConfig: {
                                    },
                                    timePartConfig: {
                                        partToExtract: "Test string",
                                    },
                                },
                            }
                        ],
                        recordSuppressions: [
                            {
                                condition: {
                                    expressions: {
                                        conditions: {
                                            conditions: [
                                                {
                                                    field: {
                                                        name: "Test string",
                                                    },
                                                    operator: "Test string",
                                                    value: {
                                                        booleanValue: true,
                                                        dateValue: {
                                                            day: 42,
                                                            month: 42,
                                                            year: 42,
                                                        },
                                                        dayOfWeekValue: "Test string",
                                                        floatValue: 42,
                                                        integerValue: "Test string",
                                                        stringValue: "Test string",
                                                        timestampValue: "Test string",
                                                        timeValue: {
                                                            hours: 42,
                                                            minutes: 42,
                                                            nanos: 42,
                                                            seconds: 42,
                                                        },
                                                    },
                                                }
                                            ],
                                        },
                                        logicalOperator: "Test string",
                                    },
                                },
                            }
                        ],
                    },
                    transformationErrorHandling: {
                        leaveUntransformed: {
                        },
                        throwError: {
                        },
                    },
                },
                description: "Test string",
                displayName: "Test string",
                name: "Test string",
                updateTime: "Test string",
            },
            locationId: "Test string",
            templateId: "Test string",
        });
        /** Deletes a DeidentifyTemplate. See https://cloud.google.com/dlp/docs/creating-templates-deid to learn more. */
        await gapi.client.dlp.organizations.locations.deidentifyTemplates.delete({
            name: "Test string",
        });
        /** Gets a DeidentifyTemplate. See https://cloud.google.com/dlp/docs/creating-templates-deid to learn more. */
        await gapi.client.dlp.organizations.locations.deidentifyTemplates.get({
            name: "Test string",
        });
        /** Lists DeidentifyTemplates. See https://cloud.google.com/dlp/docs/creating-templates-deid to learn more. */
        await gapi.client.dlp.organizations.locations.deidentifyTemplates.list({
            locationId: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the DeidentifyTemplate. See https://cloud.google.com/dlp/docs/creating-templates-deid to learn more. */
        await gapi.client.dlp.organizations.locations.deidentifyTemplates.patch({
            name: "Test string",
        }, {
            deidentifyTemplate: {
                createTime: "Test string",
                deidentifyConfig: {
                    imageTransformations: {
                        transforms: [
                            {
                                allInfoTypes: {
                                },
                                allText: {
                                },
                                redactionColor: {
                                    blue: 42,
                                    green: 42,
                                    red: 42,
                                },
                                selectedInfoTypes: {
                                    infoTypes: [
                                        {
                                            name: "Test string",
                                            version: "Test string",
                                        }
                                    ],
                                },
                            }
                        ],
                    },
                    infoTypeTransformations: {
                        transformations: [
                            {
                                infoTypes: [
                                    {
                                        name: "Test string",
                                        version: "Test string",
                                    }
                                ],
                                primitiveTransformation: {
                                    bucketingConfig: {
                                        buckets: [
                                            {
                                                max: {
                                                    booleanValue: true,
                                                    dateValue: {
                                                        day: 42,
                                                        month: 42,
                                                        year: 42,
                                                    },
                                                    dayOfWeekValue: "Test string",
                                                    floatValue: 42,
                                                    integerValue: "Test string",
                                                    stringValue: "Test string",
                                                    timestampValue: "Test string",
                                                    timeValue: {
                                                        hours: 42,
                                                        minutes: 42,
                                                        nanos: 42,
                                                        seconds: 42,
                                                    },
                                                },
                                                min: {
                                                    booleanValue: true,
                                                    dateValue: {
                                                        day: 42,
                                                        month: 42,
                                                        year: 42,
                                                    },
                                                    dayOfWeekValue: "Test string",
                                                    floatValue: 42,
                                                    integerValue: "Test string",
                                                    stringValue: "Test string",
                                                    timestampValue: "Test string",
                                                    timeValue: {
                                                        hours: 42,
                                                        minutes: 42,
                                                        nanos: 42,
                                                        seconds: 42,
                                                    },
                                                },
                                                replacementValue: {
                                                    booleanValue: true,
                                                    dateValue: {
                                                        day: 42,
                                                        month: 42,
                                                        year: 42,
                                                    },
                                                    dayOfWeekValue: "Test string",
                                                    floatValue: 42,
                                                    integerValue: "Test string",
                                                    stringValue: "Test string",
                                                    timestampValue: "Test string",
                                                    timeValue: {
                                                        hours: 42,
                                                        minutes: 42,
                                                        nanos: 42,
                                                        seconds: 42,
                                                    },
                                                },
                                            }
                                        ],
                                    },
                                    characterMaskConfig: {
                                        charactersToIgnore: [
                                            {
                                                charactersToSkip: "Test string",
                                                commonCharactersToIgnore: "Test string",
                                            }
                                        ],
                                        maskingCharacter: "Test string",
                                        numberToMask: 42,
                                        reverseOrder: true,
                                    },
                                    cryptoDeterministicConfig: {
                                        context: {
                                            name: "Test string",
                                        },
                                        cryptoKey: {
                                            kmsWrapped: {
                                                cryptoKeyName: "Test string",
                                                wrappedKey: "Test string",
                                            },
                                            transient: {
                                                name: "Test string",
                                            },
                                            unwrapped: {
                                                key: "Test string",
                                            },
                                        },
                                        surrogateInfoType: {
                                            name: "Test string",
                                            version: "Test string",
                                        },
                                    },
                                    cryptoHashConfig: {
                                        cryptoKey: {
                                            kmsWrapped: {
                                                cryptoKeyName: "Test string",
                                                wrappedKey: "Test string",
                                            },
                                            transient: {
                                                name: "Test string",
                                            },
                                            unwrapped: {
                                                key: "Test string",
                                            },
                                        },
                                    },
                                    cryptoReplaceFfxFpeConfig: {
                                        commonAlphabet: "Test string",
                                        context: {
                                            name: "Test string",
                                        },
                                        cryptoKey: {
                                            kmsWrapped: {
                                                cryptoKeyName: "Test string",
                                                wrappedKey: "Test string",
                                            },
                                            transient: {
                                                name: "Test string",
                                            },
                                            unwrapped: {
                                                key: "Test string",
                                            },
                                        },
                                        customAlphabet: "Test string",
                                        radix: 42,
                                        surrogateInfoType: {
                                            name: "Test string",
                                            version: "Test string",
                                        },
                                    },
                                    dateShiftConfig: {
                                        context: {
                                            name: "Test string",
                                        },
                                        cryptoKey: {
                                            kmsWrapped: {
                                                cryptoKeyName: "Test string",
                                                wrappedKey: "Test string",
                                            },
                                            transient: {
                                                name: "Test string",
                                            },
                                            unwrapped: {
                                                key: "Test string",
                                            },
                                        },
                                        lowerBoundDays: 42,
                                        upperBoundDays: 42,
                                    },
                                    fixedSizeBucketingConfig: {
                                        bucketSize: 42,
                                        lowerBound: {
                                            booleanValue: true,
                                            dateValue: {
                                                day: 42,
                                                month: 42,
                                                year: 42,
                                            },
                                            dayOfWeekValue: "Test string",
                                            floatValue: 42,
                                            integerValue: "Test string",
                                            stringValue: "Test string",
                                            timestampValue: "Test string",
                                            timeValue: {
                                                hours: 42,
                                                minutes: 42,
                                                nanos: 42,
                                                seconds: 42,
                                            },
                                        },
                                        upperBound: {
                                            booleanValue: true,
                                            dateValue: {
                                                day: 42,
                                                month: 42,
                                                year: 42,
                                            },
                                            dayOfWeekValue: "Test string",
                                            floatValue: 42,
                                            integerValue: "Test string",
                                            stringValue: "Test string",
                                            timestampValue: "Test string",
                                            timeValue: {
                                                hours: 42,
                                                minutes: 42,
                                                nanos: 42,
                                                seconds: 42,
                                            },
                                        },
                                    },
                                    redactConfig: {
                                    },
                                    replaceConfig: {
                                        newValue: {
                                            booleanValue: true,
                                            dateValue: {
                                                day: 42,
                                                month: 42,
                                                year: 42,
                                            },
                                            dayOfWeekValue: "Test string",
                                            floatValue: 42,
                                            integerValue: "Test string",
                                            stringValue: "Test string",
                                            timestampValue: "Test string",
                                            timeValue: {
                                                hours: 42,
                                                minutes: 42,
                                                nanos: 42,
                                                seconds: 42,
                                            },
                                        },
                                    },
                                    replaceDictionaryConfig: {
                                        wordList: {
                                            words: [
                                                "Test string"
                                            ],
                                        },
                                    },
                                    replaceWithInfoTypeConfig: {
                                    },
                                    timePartConfig: {
                                        partToExtract: "Test string",
                                    },
                                },
                            }
                        ],
                    },
                    recordTransformations: {
                        fieldTransformations: [
                            {
                                condition: {
                                    expressions: {
                                        conditions: {
                                            conditions: [
                                                {
                                                    field: {
                                                        name: "Test string",
                                                    },
                                                    operator: "Test string",
                                                    value: {
                                                        booleanValue: true,
                                                        dateValue: {
                                                            day: 42,
                                                            month: 42,
                                                            year: 42,
                                                        },
                                                        dayOfWeekValue: "Test string",
                                                        floatValue: 42,
                                                        integerValue: "Test string",
                                                        stringValue: "Test string",
                                                        timestampValue: "Test string",
                                                        timeValue: {
                                                            hours: 42,
                                                            minutes: 42,
                                                            nanos: 42,
                                                            seconds: 42,
                                                        },
                                                    },
                                                }
                                            ],
                                        },
                                        logicalOperator: "Test string",
                                    },
                                },
                                fields: [
                                    {
                                        name: "Test string",
                                    }
                                ],
                                infoTypeTransformations: {
                                    transformations: [
                                        {
                                            infoTypes: [
                                                {
                                                    name: "Test string",
                                                    version: "Test string",
                                                }
                                            ],
                                            primitiveTransformation: {
                                                bucketingConfig: {
                                                    buckets: [
                                                        {
                                                            max: {
                                                                booleanValue: true,
                                                                dateValue: {
                                                                    day: 42,
                                                                    month: 42,
                                                                    year: 42,
                                                                },
                                                                dayOfWeekValue: "Test string",
                                                                floatValue: 42,
                                                                integerValue: "Test string",
                                                                stringValue: "Test string",
                                                                timestampValue: "Test string",
                                                                timeValue: {
                                                                    hours: 42,
                                                                    minutes: 42,
                                                                    nanos: 42,
                                                                    seconds: 42,
                                                                },
                                                            },
                                                            min: {
                                                                booleanValue: true,
                                                                dateValue: {
                                                                    day: 42,
                                                                    month: 42,
                                                                    year: 42,
                                                                },
                                                                dayOfWeekValue: "Test string",
                                                                floatValue: 42,
                                                                integerValue: "Test string",
                                                                stringValue: "Test string",
                                                                timestampValue: "Test string",
                                                                timeValue: {
                                                                    hours: 42,
                                                                    minutes: 42,
                                                                    nanos: 42,
                                                                    seconds: 42,
                                                                },
                                                            },
                                                            replacementValue: {
                                                                booleanValue: true,
                                                                dateValue: {
                                                                    day: 42,
                                                                    month: 42,
                                                                    year: 42,
                                                                },
                                                                dayOfWeekValue: "Test string",
                                                                floatValue: 42,
                                                                integerValue: "Test string",
                                                                stringValue: "Test string",
                                                                timestampValue: "Test string",
                                                                timeValue: {
                                                                    hours: 42,
                                                                    minutes: 42,
                                                                    nanos: 42,
                                                                    seconds: 42,
                                                                },
                                                            },
                                                        }
                                                    ],
                                                },
                                                characterMaskConfig: {
                                                    charactersToIgnore: [
                                                        {
                                                            charactersToSkip: "Test string",
                                                            commonCharactersToIgnore: "Test string",
                                                        }
                                                    ],
                                                    maskingCharacter: "Test string",
                                                    numberToMask: 42,
                                                    reverseOrder: true,
                                                },
                                                cryptoDeterministicConfig: {
                                                    context: {
                                                        name: "Test string",
                                                    },
                                                    cryptoKey: {
                                                        kmsWrapped: {
                                                            cryptoKeyName: "Test string",
                                                            wrappedKey: "Test string",
                                                        },
                                                        transient: {
                                                            name: "Test string",
                                                        },
                                                        unwrapped: {
                                                            key: "Test string",
                                                        },
                                                    },
                                                    surrogateInfoType: {
                                                        name: "Test string",
                                                        version: "Test string",
                                                    },
                                                },
                                                cryptoHashConfig: {
                                                    cryptoKey: {
                                                        kmsWrapped: {
                                                            cryptoKeyName: "Test string",
                                                            wrappedKey: "Test string",
                                                        },
                                                        transient: {
                                                            name: "Test string",
                                                        },
                                                        unwrapped: {
                                                            key: "Test string",
                                                        },
                                                    },
                                                },
                                                cryptoReplaceFfxFpeConfig: {
                                                    commonAlphabet: "Test string",
                                                    context: {
                                                        name: "Test string",
                                                    },
                                                    cryptoKey: {
                                                        kmsWrapped: {
                                                            cryptoKeyName: "Test string",
                                                            wrappedKey: "Test string",
                                                        },
                                                        transient: {
                                                            name: "Test string",
                                                        },
                                                        unwrapped: {
                                                            key: "Test string",
                                                        },
                                                    },
                                                    customAlphabet: "Test string",
                                                    radix: 42,
                                                    surrogateInfoType: {
                                                        name: "Test string",
                                                        version: "Test string",
                                                    },
                                                },
                                                dateShiftConfig: {
                                                    context: {
                                                        name: "Test string",
                                                    },
                                                    cryptoKey: {
                                                        kmsWrapped: {
                                                            cryptoKeyName: "Test string",
                                                            wrappedKey: "Test string",
                                                        },
                                                        transient: {
                                                            name: "Test string",
                                                        },
                                                        unwrapped: {
                                                            key: "Test string",
                                                        },
                                                    },
                                                    lowerBoundDays: 42,
                                                    upperBoundDays: 42,
                                                },
                                                fixedSizeBucketingConfig: {
                                                    bucketSize: 42,
                                                    lowerBound: {
                                                        booleanValue: true,
                                                        dateValue: {
                                                            day: 42,
                                                            month: 42,
                                                            year: 42,
                                                        },
                                                        dayOfWeekValue: "Test string",
                                                        floatValue: 42,
                                                        integerValue: "Test string",
                                                        stringValue: "Test string",
                                                        timestampValue: "Test string",
                                                        timeValue: {
                                                            hours: 42,
                                                            minutes: 42,
                                                            nanos: 42,
                                                            seconds: 42,
                                                        },
                                                    },
                                                    upperBound: {
                                                        booleanValue: true,
                                                        dateValue: {
                                                            day: 42,
                                                            month: 42,
                                                            year: 42,
                                                        },
                                                        dayOfWeekValue: "Test string",
                                                        floatValue: 42,
                                                        integerValue: "Test string",
                                                        stringValue: "Test string",
                                                        timestampValue: "Test string",
                                                        timeValue: {
                                                            hours: 42,
                                                            minutes: 42,
                                                            nanos: 42,
                                                            seconds: 42,
                                                        },
                                                    },
                                                },
                                                redactConfig: {
                                                },
                                                replaceConfig: {
                                                    newValue: {
                                                        booleanValue: true,
                                                        dateValue: {
                                                            day: 42,
                                                            month: 42,
                                                            year: 42,
                                                        },
                                                        dayOfWeekValue: "Test string",
                                                        floatValue: 42,
                                                        integerValue: "Test string",
                                                        stringValue: "Test string",
                                                        timestampValue: "Test string",
                                                        timeValue: {
                                                            hours: 42,
                                                            minutes: 42,
                                                            nanos: 42,
                                                            seconds: 42,
                                                        },
                                                    },
                                                },
                                                replaceDictionaryConfig: {
                                                    wordList: {
                                                        words: [
                                                            "Test string"
                                                        ],
                                                    },
                                                },
                                                replaceWithInfoTypeConfig: {
                                                },
                                                timePartConfig: {
                                                    partToExtract: "Test string",
                                                },
                                            },
                                        }
                                    ],
                                },
                                primitiveTransformation: {
                                    bucketingConfig: {
                                        buckets: [
                                            {
                                                max: {
                                                    booleanValue: true,
                                                    dateValue: {
                                                        day: 42,
                                                        month: 42,
                                                        year: 42,
                                                    },
                                                    dayOfWeekValue: "Test string",
                                                    floatValue: 42,
                                                    integerValue: "Test string",
                                                    stringValue: "Test string",
                                                    timestampValue: "Test string",
                                                    timeValue: {
                                                        hours: 42,
                                                        minutes: 42,
                                                        nanos: 42,
                                                        seconds: 42,
                                                    },
                                                },
                                                min: {
                                                    booleanValue: true,
                                                    dateValue: {
                                                        day: 42,
                                                        month: 42,
                                                        year: 42,
                                                    },
                                                    dayOfWeekValue: "Test string",
                                                    floatValue: 42,
                                                    integerValue: "Test string",
                                                    stringValue: "Test string",
                                                    timestampValue: "Test string",
                                                    timeValue: {
                                                        hours: 42,
                                                        minutes: 42,
                                                        nanos: 42,
                                                        seconds: 42,
                                                    },
                                                },
                                                replacementValue: {
                                                    booleanValue: true,
                                                    dateValue: {
                                                        day: 42,
                                                        month: 42,
                                                        year: 42,
                                                    },
                                                    dayOfWeekValue: "Test string",
                                                    floatValue: 42,
                                                    integerValue: "Test string",
                                                    stringValue: "Test string",
                                                    timestampValue: "Test string",
                                                    timeValue: {
                                                        hours: 42,
                                                        minutes: 42,
                                                        nanos: 42,
                                                        seconds: 42,
                                                    },
                                                },
                                            }
                                        ],
                                    },
                                    characterMaskConfig: {
                                        charactersToIgnore: [
                                            {
                                                charactersToSkip: "Test string",
                                                commonCharactersToIgnore: "Test string",
                                            }
                                        ],
                                        maskingCharacter: "Test string",
                                        numberToMask: 42,
                                        reverseOrder: true,
                                    },
                                    cryptoDeterministicConfig: {
                                        context: {
                                            name: "Test string",
                                        },
                                        cryptoKey: {
                                            kmsWrapped: {
                                                cryptoKeyName: "Test string",
                                                wrappedKey: "Test string",
                                            },
                                            transient: {
                                                name: "Test string",
                                            },
                                            unwrapped: {
                                                key: "Test string",
                                            },
                                        },
                                        surrogateInfoType: {
                                            name: "Test string",
                                            version: "Test string",
                                        },
                                    },
                                    cryptoHashConfig: {
                                        cryptoKey: {
                                            kmsWrapped: {
                                                cryptoKeyName: "Test string",
                                                wrappedKey: "Test string",
                                            },
                                            transient: {
                                                name: "Test string",
                                            },
                                            unwrapped: {
                                                key: "Test string",
                                            },
                                        },
                                    },
                                    cryptoReplaceFfxFpeConfig: {
                                        commonAlphabet: "Test string",
                                        context: {
                                            name: "Test string",
                                        },
                                        cryptoKey: {
                                            kmsWrapped: {
                                                cryptoKeyName: "Test string",
                                                wrappedKey: "Test string",
                                            },
                                            transient: {
                                                name: "Test string",
                                            },
                                            unwrapped: {
                                                key: "Test string",
                                            },
                                        },
                                        customAlphabet: "Test string",
                                        radix: 42,
                                        surrogateInfoType: {
                                            name: "Test string",
                                            version: "Test string",
                                        },
                                    },
                                    dateShiftConfig: {
                                        context: {
                                            name: "Test string",
                                        },
                                        cryptoKey: {
                                            kmsWrapped: {
                                                cryptoKeyName: "Test string",
                                                wrappedKey: "Test string",
                                            },
                                            transient: {
                                                name: "Test string",
                                            },
                                            unwrapped: {
                                                key: "Test string",
                                            },
                                        },
                                        lowerBoundDays: 42,
                                        upperBoundDays: 42,
                                    },
                                    fixedSizeBucketingConfig: {
                                        bucketSize: 42,
                                        lowerBound: {
                                            booleanValue: true,
                                            dateValue: {
                                                day: 42,
                                                month: 42,
                                                year: 42,
                                            },
                                            dayOfWeekValue: "Test string",
                                            floatValue: 42,
                                            integerValue: "Test string",
                                            stringValue: "Test string",
                                            timestampValue: "Test string",
                                            timeValue: {
                                                hours: 42,
                                                minutes: 42,
                                                nanos: 42,
                                                seconds: 42,
                                            },
                                        },
                                        upperBound: {
                                            booleanValue: true,
                                            dateValue: {
                                                day: 42,
                                                month: 42,
                                                year: 42,
                                            },
                                            dayOfWeekValue: "Test string",
                                            floatValue: 42,
                                            integerValue: "Test string",
                                            stringValue: "Test string",
                                            timestampValue: "Test string",
                                            timeValue: {
                                                hours: 42,
                                                minutes: 42,
                                                nanos: 42,
                                                seconds: 42,
                                            },
                                        },
                                    },
                                    redactConfig: {
                                    },
                                    replaceConfig: {
                                        newValue: {
                                            booleanValue: true,
                                            dateValue: {
                                                day: 42,
                                                month: 42,
                                                year: 42,
                                            },
                                            dayOfWeekValue: "Test string",
                                            floatValue: 42,
                                            integerValue: "Test string",
                                            stringValue: "Test string",
                                            timestampValue: "Test string",
                                            timeValue: {
                                                hours: 42,
                                                minutes: 42,
                                                nanos: 42,
                                                seconds: 42,
                                            },
                                        },
                                    },
                                    replaceDictionaryConfig: {
                                        wordList: {
                                            words: [
                                                "Test string"
                                            ],
                                        },
                                    },
                                    replaceWithInfoTypeConfig: {
                                    },
                                    timePartConfig: {
                                        partToExtract: "Test string",
                                    },
                                },
                            }
                        ],
                        recordSuppressions: [
                            {
                                condition: {
                                    expressions: {
                                        conditions: {
                                            conditions: [
                                                {
                                                    field: {
                                                        name: "Test string",
                                                    },
                                                    operator: "Test string",
                                                    value: {
                                                        booleanValue: true,
                                                        dateValue: {
                                                            day: 42,
                                                            month: 42,
                                                            year: 42,
                                                        },
                                                        dayOfWeekValue: "Test string",
                                                        floatValue: 42,
                                                        integerValue: "Test string",
                                                        stringValue: "Test string",
                                                        timestampValue: "Test string",
                                                        timeValue: {
                                                            hours: 42,
                                                            minutes: 42,
                                                            nanos: 42,
                                                            seconds: 42,
                                                        },
                                                    },
                                                }
                                            ],
                                        },
                                        logicalOperator: "Test string",
                                    },
                                },
                            }
                        ],
                    },
                    transformationErrorHandling: {
                        leaveUntransformed: {
                        },
                        throwError: {
                        },
                    },
                },
                description: "Test string",
                displayName: "Test string",
                name: "Test string",
                updateTime: "Test string",
            },
            updateMask: "Test string",
        });
        /**
         * Lists DlpJobs that match the specified filter in the request. See https://cloud.google.com/dlp/docs/inspecting-storage and https://cloud.google.com/dlp/docs/compute-risk-analysis to
         * learn more.
         */
        await gapi.client.dlp.organizations.locations.dlpJobs.list({
            filter: "Test string",
            locationId: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
            type: "Test string",
        });
        /** Creates an InspectTemplate for reusing frequently used configuration for inspecting content, images, and storage. See https://cloud.google.com/dlp/docs/creating-templates to learn more. */
        await gapi.client.dlp.organizations.locations.inspectTemplates.create({
            parent: "Test string",
        }, {
            inspectTemplate: {
                createTime: "Test string",
                description: "Test string",
                displayName: "Test string",
                inspectConfig: {
                    contentOptions: [
                        "Test string"
                    ],
                    customInfoTypes: [
                        {
                            detectionRules: [
                                {
                                    hotwordRule: {
                                        hotwordRegex: {
                                            groupIndexes: [
                                                42
                                            ],
                                            pattern: "Test string",
                                        },
                                        likelihoodAdjustment: {
                                            fixedLikelihood: "Test string",
                                            relativeLikelihood: 42,
                                        },
                                        proximity: {
                                            windowAfter: 42,
                                            windowBefore: 42,
                                        },
                                    },
                                }
                            ],
                            dictionary: {
                                cloudStoragePath: {
                                    path: "Test string",
                                },
                                wordList: {
                                    words: [
                                        "Test string"
                                    ],
                                },
                            },
                            exclusionType: "Test string",
                            infoType: {
                                name: "Test string",
                                version: "Test string",
                            },
                            likelihood: "Test string",
                            regex: {
                                groupIndexes: [
                                    42
                                ],
                                pattern: "Test string",
                            },
                            storedType: {
                                createTime: "Test string",
                                name: "Test string",
                            },
                            surrogateType: {
                            },
                        }
                    ],
                    excludeInfoTypes: true,
                    includeQuote: true,
                    infoTypes: [
                        {
                            name: "Test string",
                            version: "Test string",
                        }
                    ],
                    limits: {
                        maxFindingsPerInfoType: [
                            {
                                infoType: {
                                    name: "Test string",
                                    version: "Test string",
                                },
                                maxFindings: 42,
                            }
                        ],
                        maxFindingsPerItem: 42,
                        maxFindingsPerRequest: 42,
                    },
                    minLikelihood: "Test string",
                    ruleSet: [
                        {
                            infoTypes: [
                                {
                                    name: "Test string",
                                    version: "Test string",
                                }
                            ],
                            rules: [
                                {
                                    exclusionRule: {
                                        dictionary: {
                                            cloudStoragePath: {
                                                path: "Test string",
                                            },
                                            wordList: {
                                                words: [
                                                    "Test string"
                                                ],
                                            },
                                        },
                                        excludeByHotword: {
                                            hotwordRegex: {
                                                groupIndexes: [
                                                    42
                                                ],
                                                pattern: "Test string",
                                            },
                                            proximity: {
                                                windowAfter: 42,
                                                windowBefore: 42,
                                            },
                                        },
                                        excludeInfoTypes: {
                                            infoTypes: [
                                                {
                                                    name: "Test string",
                                                    version: "Test string",
                                                }
                                            ],
                                        },
                                        matchingType: "Test string",
                                        regex: {
                                            groupIndexes: [
                                                42
                                            ],
                                            pattern: "Test string",
                                        },
                                    },
                                    hotwordRule: {
                                        hotwordRegex: {
                                            groupIndexes: [
                                                42
                                            ],
                                            pattern: "Test string",
                                        },
                                        likelihoodAdjustment: {
                                            fixedLikelihood: "Test string",
                                            relativeLikelihood: 42,
                                        },
                                        proximity: {
                                            windowAfter: 42,
                                            windowBefore: 42,
                                        },
                                    },
                                }
                            ],
                        }
                    ],
                },
                name: "Test string",
                updateTime: "Test string",
            },
            locationId: "Test string",
            templateId: "Test string",
        });
        /** Deletes an InspectTemplate. See https://cloud.google.com/dlp/docs/creating-templates to learn more. */
        await gapi.client.dlp.organizations.locations.inspectTemplates.delete({
            name: "Test string",
        });
        /** Gets an InspectTemplate. See https://cloud.google.com/dlp/docs/creating-templates to learn more. */
        await gapi.client.dlp.organizations.locations.inspectTemplates.get({
            name: "Test string",
        });
        /** Lists InspectTemplates. See https://cloud.google.com/dlp/docs/creating-templates to learn more. */
        await gapi.client.dlp.organizations.locations.inspectTemplates.list({
            locationId: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the InspectTemplate. See https://cloud.google.com/dlp/docs/creating-templates to learn more. */
        await gapi.client.dlp.organizations.locations.inspectTemplates.patch({
            name: "Test string",
        }, {
            inspectTemplate: {
                createTime: "Test string",
                description: "Test string",
                displayName: "Test string",
                inspectConfig: {
                    contentOptions: [
                        "Test string"
                    ],
                    customInfoTypes: [
                        {
                            detectionRules: [
                                {
                                    hotwordRule: {
                                        hotwordRegex: {
                                            groupIndexes: [
                                                42
                                            ],
                                            pattern: "Test string",
                                        },
                                        likelihoodAdjustment: {
                                            fixedLikelihood: "Test string",
                                            relativeLikelihood: 42,
                                        },
                                        proximity: {
                                            windowAfter: 42,
                                            windowBefore: 42,
                                        },
                                    },
                                }
                            ],
                            dictionary: {
                                cloudStoragePath: {
                                    path: "Test string",
                                },
                                wordList: {
                                    words: [
                                        "Test string"
                                    ],
                                },
                            },
                            exclusionType: "Test string",
                            infoType: {
                                name: "Test string",
                                version: "Test string",
                            },
                            likelihood: "Test string",
                            regex: {
                                groupIndexes: [
                                    42
                                ],
                                pattern: "Test string",
                            },
                            storedType: {
                                createTime: "Test string",
                                name: "Test string",
                            },
                            surrogateType: {
                            },
                        }
                    ],
                    excludeInfoTypes: true,
                    includeQuote: true,
                    infoTypes: [
                        {
                            name: "Test string",
                            version: "Test string",
                        }
                    ],
                    limits: {
                        maxFindingsPerInfoType: [
                            {
                                infoType: {
                                    name: "Test string",
                                    version: "Test string",
                                },
                                maxFindings: 42,
                            }
                        ],
                        maxFindingsPerItem: 42,
                        maxFindingsPerRequest: 42,
                    },
                    minLikelihood: "Test string",
                    ruleSet: [
                        {
                            infoTypes: [
                                {
                                    name: "Test string",
                                    version: "Test string",
                                }
                            ],
                            rules: [
                                {
                                    exclusionRule: {
                                        dictionary: {
                                            cloudStoragePath: {
                                                path: "Test string",
                                            },
                                            wordList: {
                                                words: [
                                                    "Test string"
                                                ],
                                            },
                                        },
                                        excludeByHotword: {
                                            hotwordRegex: {
                                                groupIndexes: [
                                                    42
                                                ],
                                                pattern: "Test string",
                                            },
                                            proximity: {
                                                windowAfter: 42,
                                                windowBefore: 42,
                                            },
                                        },
                                        excludeInfoTypes: {
                                            infoTypes: [
                                                {
                                                    name: "Test string",
                                                    version: "Test string",
                                                }
                                            ],
                                        },
                                        matchingType: "Test string",
                                        regex: {
                                            groupIndexes: [
                                                42
                                            ],
                                            pattern: "Test string",
                                        },
                                    },
                                    hotwordRule: {
                                        hotwordRegex: {
                                            groupIndexes: [
                                                42
                                            ],
                                            pattern: "Test string",
                                        },
                                        likelihoodAdjustment: {
                                            fixedLikelihood: "Test string",
                                            relativeLikelihood: 42,
                                        },
                                        proximity: {
                                            windowAfter: 42,
                                            windowBefore: 42,
                                        },
                                    },
                                }
                            ],
                        }
                    ],
                },
                name: "Test string",
                updateTime: "Test string",
            },
            updateMask: "Test string",
        });
        /** Creates a job trigger to run DLP actions such as scanning storage for sensitive information on a set schedule. See https://cloud.google.com/dlp/docs/creating-job-triggers to learn more. */
        await gapi.client.dlp.organizations.locations.jobTriggers.create({
            parent: "Test string",
        }, {
            jobTrigger: {
                createTime: "Test string",
                description: "Test string",
                displayName: "Test string",
                errors: [
                    {
                        details: {
                            code: 42,
                            details: [
                                {
                                    A: 42
                                }
                            ],
                            message: "Test string",
                        },
                        timestamps: [
                            "Test string"
                        ],
                    }
                ],
                inspectJob: {
                    actions: [
                        {
                            deidentify: {
                                cloudStorageOutput: "Test string",
                                fileTypesToTransform: [
                                    "Test string"
                                ],
                                transformationConfig: {
                                    deidentifyTemplate: "Test string",
                                    imageRedactTemplate: "Test string",
                                    structuredDeidentifyTemplate: "Test string",
                                },
                                transformationDetailsStorageConfig: {
                                    table: {
                                        datasetId: "Test string",
                                        projectId: "Test string",
                                        tableId: "Test string",
                                    },
                                },
                            },
                            jobNotificationEmails: {
                            },
                            publishFindingsToCloudDataCatalog: {
                            },
                            publishSummaryToCscc: {
                            },
                            publishToStackdriver: {
                            },
                            pubSub: {
                                topic: "Test string",
                            },
                            saveFindings: {
                                outputConfig: {
                                    outputSchema: "Test string",
                                    table: {
                                        datasetId: "Test string",
                                        projectId: "Test string",
                                        tableId: "Test string",
                                    },
                                },
                            },
                        }
                    ],
                    inspectConfig: {
                        contentOptions: [
                            "Test string"
                        ],
                        customInfoTypes: [
                            {
                                detectionRules: [
                                    {
                                        hotwordRule: {
                                            hotwordRegex: {
                                                groupIndexes: [
                                                    42
                                                ],
                                                pattern: "Test string",
                                            },
                                            likelihoodAdjustment: {
                                                fixedLikelihood: "Test string",
                                                relativeLikelihood: 42,
                                            },
                                            proximity: {
                                                windowAfter: 42,
                                                windowBefore: 42,
                                            },
                                        },
                                    }
                                ],
                                dictionary: {
                                    cloudStoragePath: {
                                        path: "Test string",
                                    },
                                    wordList: {
                                        words: [
                                            "Test string"
                                        ],
                                    },
                                },
                                exclusionType: "Test string",
                                infoType: {
                                    name: "Test string",
                                    version: "Test string",
                                },
                                likelihood: "Test string",
                                regex: {
                                    groupIndexes: [
                                        42
                                    ],
                                    pattern: "Test string",
                                },
                                storedType: {
                                    createTime: "Test string",
                                    name: "Test string",
                                },
                                surrogateType: {
                                },
                            }
                        ],
                        excludeInfoTypes: true,
                        includeQuote: true,
                        infoTypes: [
                            {
                                name: "Test string",
                                version: "Test string",
                            }
                        ],
                        limits: {
                            maxFindingsPerInfoType: [
                                {
                                    infoType: {
                                        name: "Test string",
                                        version: "Test string",
                                    },
                                    maxFindings: 42,
                                }
                            ],
                            maxFindingsPerItem: 42,
                            maxFindingsPerRequest: 42,
                        },
                        minLikelihood: "Test string",
                        ruleSet: [
                            {
                                infoTypes: [
                                    {
                                        name: "Test string",
                                        version: "Test string",
                                    }
                                ],
                                rules: [
                                    {
                                        exclusionRule: {
                                            dictionary: {
                                                cloudStoragePath: {
                                                    path: "Test string",
                                                },
                                                wordList: {
                                                    words: [
                                                        "Test string"
                                                    ],
                                                },
                                            },
                                            excludeByHotword: {
                                                hotwordRegex: {
                                                    groupIndexes: [
                                                        42
                                                    ],
                                                    pattern: "Test string",
                                                },
                                                proximity: {
                                                    windowAfter: 42,
                                                    windowBefore: 42,
                                                },
                                            },
                                            excludeInfoTypes: {
                                                infoTypes: [
                                                    {
                                                        name: "Test string",
                                                        version: "Test string",
                                                    }
                                                ],
                                            },
                                            matchingType: "Test string",
                                            regex: {
                                                groupIndexes: [
                                                    42
                                                ],
                                                pattern: "Test string",
                                            },
                                        },
                                        hotwordRule: {
                                            hotwordRegex: {
                                                groupIndexes: [
                                                    42
                                                ],
                                                pattern: "Test string",
                                            },
                                            likelihoodAdjustment: {
                                                fixedLikelihood: "Test string",
                                                relativeLikelihood: 42,
                                            },
                                            proximity: {
                                                windowAfter: 42,
                                                windowBefore: 42,
                                            },
                                        },
                                    }
                                ],
                            }
                        ],
                    },
                    inspectTemplateName: "Test string",
                    storageConfig: {
                        bigQueryOptions: {
                            excludedFields: [
                                {
                                    name: "Test string",
                                }
                            ],
                            identifyingFields: [
                                {
                                    name: "Test string",
                                }
                            ],
                            includedFields: [
                                {
                                    name: "Test string",
                                }
                            ],
                            rowsLimit: "Test string",
                            rowsLimitPercent: 42,
                            sampleMethod: "Test string",
                            tableReference: {
                                datasetId: "Test string",
                                projectId: "Test string",
                                tableId: "Test string",
                            },
                        },
                        cloudStorageOptions: {
                            bytesLimitPerFile: "Test string",
                            bytesLimitPerFilePercent: 42,
                            fileSet: {
                                regexFileSet: {
                                    bucketName: "Test string",
                                    excludeRegex: [
                                        "Test string"
                                    ],
                                    includeRegex: [
                                        "Test string"
                                    ],
                                },
                                url: "Test string",
                            },
                            filesLimitPercent: 42,
                            fileTypes: [
                                "Test string"
                            ],
                            sampleMethod: "Test string",
                        },
                        datastoreOptions: {
                            kind: {
                                name: "Test string",
                            },
                            partitionId: {
                                namespaceId: "Test string",
                                projectId: "Test string",
                            },
                        },
                        hybridOptions: {
                            description: "Test string",
                            labels: {
                                A: "Test string"
                            },
                            requiredFindingLabelKeys: [
                                "Test string"
                            ],
                            tableOptions: {
                                identifyingFields: [
                                    {
                                        name: "Test string",
                                    }
                                ],
                            },
                        },
                        timespanConfig: {
                            enableAutoPopulationOfTimespanConfig: true,
                            endTime: "Test string",
                            startTime: "Test string",
                            timestampField: {
                                name: "Test string",
                            },
                        },
                    },
                },
                lastRunTime: "Test string",
                name: "Test string",
                status: "Test string",
                triggers: [
                    {
                        manual: {
                        },
                        schedule: {
                            recurrencePeriodDuration: "Test string",
                        },
                    }
                ],
                updateTime: "Test string",
            },
            locationId: "Test string",
            triggerId: "Test string",
        });
        /** Deletes a job trigger. See https://cloud.google.com/dlp/docs/creating-job-triggers to learn more. */
        await gapi.client.dlp.organizations.locations.jobTriggers.delete({
            name: "Test string",
        });
        /** Gets a job trigger. See https://cloud.google.com/dlp/docs/creating-job-triggers to learn more. */
        await gapi.client.dlp.organizations.locations.jobTriggers.get({
            name: "Test string",
        });
        /** Lists job triggers. See https://cloud.google.com/dlp/docs/creating-job-triggers to learn more. */
        await gapi.client.dlp.organizations.locations.jobTriggers.list({
            filter: "Test string",
            locationId: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
            type: "Test string",
        });
        /** Updates a job trigger. See https://cloud.google.com/dlp/docs/creating-job-triggers to learn more. */
        await gapi.client.dlp.organizations.locations.jobTriggers.patch({
            name: "Test string",
        }, {
            jobTrigger: {
                createTime: "Test string",
                description: "Test string",
                displayName: "Test string",
                errors: [
                    {
                        details: {
                            code: 42,
                            details: [
                                {
                                    A: 42
                                }
                            ],
                            message: "Test string",
                        },
                        timestamps: [
                            "Test string"
                        ],
                    }
                ],
                inspectJob: {
                    actions: [
                        {
                            deidentify: {
                                cloudStorageOutput: "Test string",
                                fileTypesToTransform: [
                                    "Test string"
                                ],
                                transformationConfig: {
                                    deidentifyTemplate: "Test string",
                                    imageRedactTemplate: "Test string",
                                    structuredDeidentifyTemplate: "Test string",
                                },
                                transformationDetailsStorageConfig: {
                                    table: {
                                        datasetId: "Test string",
                                        projectId: "Test string",
                                        tableId: "Test string",
                                    },
                                },
                            },
                            jobNotificationEmails: {
                            },
                            publishFindingsToCloudDataCatalog: {
                            },
                            publishSummaryToCscc: {
                            },
                            publishToStackdriver: {
                            },
                            pubSub: {
                                topic: "Test string",
                            },
                            saveFindings: {
                                outputConfig: {
                                    outputSchema: "Test string",
                                    table: {
                                        datasetId: "Test string",
                                        projectId: "Test string",
                                        tableId: "Test string",
                                    },
                                },
                            },
                        }
                    ],
                    inspectConfig: {
                        contentOptions: [
                            "Test string"
                        ],
                        customInfoTypes: [
                            {
                                detectionRules: [
                                    {
                                        hotwordRule: {
                                            hotwordRegex: {
                                                groupIndexes: [
                                                    42
                                                ],
                                                pattern: "Test string",
                                            },
                                            likelihoodAdjustment: {
                                                fixedLikelihood: "Test string",
                                                relativeLikelihood: 42,
                                            },
                                            proximity: {
                                                windowAfter: 42,
                                                windowBefore: 42,
                                            },
                                        },
                                    }
                                ],
                                dictionary: {
                                    cloudStoragePath: {
                                        path: "Test string",
                                    },
                                    wordList: {
                                        words: [
                                            "Test string"
                                        ],
                                    },
                                },
                                exclusionType: "Test string",
                                infoType: {
                                    name: "Test string",
                                    version: "Test string",
                                },
                                likelihood: "Test string",
                                regex: {
                                    groupIndexes: [
                                        42
                                    ],
                                    pattern: "Test string",
                                },
                                storedType: {
                                    createTime: "Test string",
                                    name: "Test string",
                                },
                                surrogateType: {
                                },
                            }
                        ],
                        excludeInfoTypes: true,
                        includeQuote: true,
                        infoTypes: [
                            {
                                name: "Test string",
                                version: "Test string",
                            }
                        ],
                        limits: {
                            maxFindingsPerInfoType: [
                                {
                                    infoType: {
                                        name: "Test string",
                                        version: "Test string",
                                    },
                                    maxFindings: 42,
                                }
                            ],
                            maxFindingsPerItem: 42,
                            maxFindingsPerRequest: 42,
                        },
                        minLikelihood: "Test string",
                        ruleSet: [
                            {
                                infoTypes: [
                                    {
                                        name: "Test string",
                                        version: "Test string",
                                    }
                                ],
                                rules: [
                                    {
                                        exclusionRule: {
                                            dictionary: {
                                                cloudStoragePath: {
                                                    path: "Test string",
                                                },
                                                wordList: {
                                                    words: [
                                                        "Test string"
                                                    ],
                                                },
                                            },
                                            excludeByHotword: {
                                                hotwordRegex: {
                                                    groupIndexes: [
                                                        42
                                                    ],
                                                    pattern: "Test string",
                                                },
                                                proximity: {
                                                    windowAfter: 42,
                                                    windowBefore: 42,
                                                },
                                            },
                                            excludeInfoTypes: {
                                                infoTypes: [
                                                    {
                                                        name: "Test string",
                                                        version: "Test string",
                                                    }
                                                ],
                                            },
                                            matchingType: "Test string",
                                            regex: {
                                                groupIndexes: [
                                                    42
                                                ],
                                                pattern: "Test string",
                                            },
                                        },
                                        hotwordRule: {
                                            hotwordRegex: {
                                                groupIndexes: [
                                                    42
                                                ],
                                                pattern: "Test string",
                                            },
                                            likelihoodAdjustment: {
                                                fixedLikelihood: "Test string",
                                                relativeLikelihood: 42,
                                            },
                                            proximity: {
                                                windowAfter: 42,
                                                windowBefore: 42,
                                            },
                                        },
                                    }
                                ],
                            }
                        ],
                    },
                    inspectTemplateName: "Test string",
                    storageConfig: {
                        bigQueryOptions: {
                            excludedFields: [
                                {
                                    name: "Test string",
                                }
                            ],
                            identifyingFields: [
                                {
                                    name: "Test string",
                                }
                            ],
                            includedFields: [
                                {
                                    name: "Test string",
                                }
                            ],
                            rowsLimit: "Test string",
                            rowsLimitPercent: 42,
                            sampleMethod: "Test string",
                            tableReference: {
                                datasetId: "Test string",
                                projectId: "Test string",
                                tableId: "Test string",
                            },
                        },
                        cloudStorageOptions: {
                            bytesLimitPerFile: "Test string",
                            bytesLimitPerFilePercent: 42,
                            fileSet: {
                                regexFileSet: {
                                    bucketName: "Test string",
                                    excludeRegex: [
                                        "Test string"
                                    ],
                                    includeRegex: [
                                        "Test string"
                                    ],
                                },
                                url: "Test string",
                            },
                            filesLimitPercent: 42,
                            fileTypes: [
                                "Test string"
                            ],
                            sampleMethod: "Test string",
                        },
                        datastoreOptions: {
                            kind: {
                                name: "Test string",
                            },
                            partitionId: {
                                namespaceId: "Test string",
                                projectId: "Test string",
                            },
                        },
                        hybridOptions: {
                            description: "Test string",
                            labels: {
                                A: "Test string"
                            },
                            requiredFindingLabelKeys: [
                                "Test string"
                            ],
                            tableOptions: {
                                identifyingFields: [
                                    {
                                        name: "Test string",
                                    }
                                ],
                            },
                        },
                        timespanConfig: {
                            enableAutoPopulationOfTimespanConfig: true,
                            endTime: "Test string",
                            startTime: "Test string",
                            timestampField: {
                                name: "Test string",
                            },
                        },
                    },
                },
                lastRunTime: "Test string",
                name: "Test string",
                status: "Test string",
                triggers: [
                    {
                        manual: {
                        },
                        schedule: {
                            recurrencePeriodDuration: "Test string",
                        },
                    }
                ],
                updateTime: "Test string",
            },
            updateMask: "Test string",
        });
        /** Creates a pre-built stored infoType to be used for inspection. See https://cloud.google.com/dlp/docs/creating-stored-infotypes to learn more. */
        await gapi.client.dlp.organizations.locations.storedInfoTypes.create({
            parent: "Test string",
        }, {
            config: {
                description: "Test string",
                dictionary: {
                    cloudStoragePath: {
                        path: "Test string",
                    },
                    wordList: {
                        words: [
                            "Test string"
                        ],
                    },
                },
                displayName: "Test string",
                largeCustomDictionary: {
                    bigQueryField: {
                        field: {
                            name: "Test string",
                        },
                        table: {
                            datasetId: "Test string",
                            projectId: "Test string",
                            tableId: "Test string",
                        },
                    },
                    cloudStorageFileSet: {
                        url: "Test string",
                    },
                    outputPath: {
                        path: "Test string",
                    },
                },
                regex: {
                    groupIndexes: [
                        42
                    ],
                    pattern: "Test string",
                },
            },
            locationId: "Test string",
            storedInfoTypeId: "Test string",
        });
        /** Deletes a stored infoType. See https://cloud.google.com/dlp/docs/creating-stored-infotypes to learn more. */
        await gapi.client.dlp.organizations.locations.storedInfoTypes.delete({
            name: "Test string",
        });
        /** Gets a stored infoType. See https://cloud.google.com/dlp/docs/creating-stored-infotypes to learn more. */
        await gapi.client.dlp.organizations.locations.storedInfoTypes.get({
            name: "Test string",
        });
        /** Lists stored infoTypes. See https://cloud.google.com/dlp/docs/creating-stored-infotypes to learn more. */
        await gapi.client.dlp.organizations.locations.storedInfoTypes.list({
            locationId: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Updates the stored infoType by creating a new version. The existing version will continue to be used until the new version is ready. See
         * https://cloud.google.com/dlp/docs/creating-stored-infotypes to learn more.
         */
        await gapi.client.dlp.organizations.locations.storedInfoTypes.patch({
            name: "Test string",
        }, {
            config: {
                description: "Test string",
                dictionary: {
                    cloudStoragePath: {
                        path: "Test string",
                    },
                    wordList: {
                        words: [
                            "Test string"
                        ],
                    },
                },
                displayName: "Test string",
                largeCustomDictionary: {
                    bigQueryField: {
                        field: {
                            name: "Test string",
                        },
                        table: {
                            datasetId: "Test string",
                            projectId: "Test string",
                            tableId: "Test string",
                        },
                    },
                    cloudStorageFileSet: {
                        url: "Test string",
                    },
                    outputPath: {
                        path: "Test string",
                    },
                },
                regex: {
                    groupIndexes: [
                        42
                    ],
                    pattern: "Test string",
                },
            },
            updateMask: "Test string",
        });
        /** Creates a pre-built stored infoType to be used for inspection. See https://cloud.google.com/dlp/docs/creating-stored-infotypes to learn more. */
        await gapi.client.dlp.organizations.storedInfoTypes.create({
            parent: "Test string",
        }, {
            config: {
                description: "Test string",
                dictionary: {
                    cloudStoragePath: {
                        path: "Test string",
                    },
                    wordList: {
                        words: [
                            "Test string"
                        ],
                    },
                },
                displayName: "Test string",
                largeCustomDictionary: {
                    bigQueryField: {
                        field: {
                            name: "Test string",
                        },
                        table: {
                            datasetId: "Test string",
                            projectId: "Test string",
                            tableId: "Test string",
                        },
                    },
                    cloudStorageFileSet: {
                        url: "Test string",
                    },
                    outputPath: {
                        path: "Test string",
                    },
                },
                regex: {
                    groupIndexes: [
                        42
                    ],
                    pattern: "Test string",
                },
            },
            locationId: "Test string",
            storedInfoTypeId: "Test string",
        });
        /** Deletes a stored infoType. See https://cloud.google.com/dlp/docs/creating-stored-infotypes to learn more. */
        await gapi.client.dlp.organizations.storedInfoTypes.delete({
            name: "Test string",
        });
        /** Gets a stored infoType. See https://cloud.google.com/dlp/docs/creating-stored-infotypes to learn more. */
        await gapi.client.dlp.organizations.storedInfoTypes.get({
            name: "Test string",
        });
        /** Lists stored infoTypes. See https://cloud.google.com/dlp/docs/creating-stored-infotypes to learn more. */
        await gapi.client.dlp.organizations.storedInfoTypes.list({
            locationId: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Updates the stored infoType by creating a new version. The existing version will continue to be used until the new version is ready. See
         * https://cloud.google.com/dlp/docs/creating-stored-infotypes to learn more.
         */
        await gapi.client.dlp.organizations.storedInfoTypes.patch({
            name: "Test string",
        }, {
            config: {
                description: "Test string",
                dictionary: {
                    cloudStoragePath: {
                        path: "Test string",
                    },
                    wordList: {
                        words: [
                            "Test string"
                        ],
                    },
                },
                displayName: "Test string",
                largeCustomDictionary: {
                    bigQueryField: {
                        field: {
                            name: "Test string",
                        },
                        table: {
                            datasetId: "Test string",
                            projectId: "Test string",
                            tableId: "Test string",
                        },
                    },
                    cloudStorageFileSet: {
                        url: "Test string",
                    },
                    outputPath: {
                        path: "Test string",
                    },
                },
                regex: {
                    groupIndexes: [
                        42
                    ],
                    pattern: "Test string",
                },
            },
            updateMask: "Test string",
        });
        /**
         * De-identifies potentially sensitive info from a ContentItem. This method has limits on input size and output size. See https://cloud.google.com/dlp/docs/deidentify-sensitive-data to
         * learn more. When no InfoTypes or CustomInfoTypes are specified in this request, the system will automatically choose what detectors to run. By default this may be all types, but may
         * change over time as detectors are updated.
         */
        await gapi.client.dlp.projects.content.deidentify({
            parent: "Test string",
        }, {
            deidentifyConfig: {
                imageTransformations: {
                    transforms: [
                        {
                            allInfoTypes: {
                            },
                            allText: {
                            },
                            redactionColor: {
                                blue: 42,
                                green: 42,
                                red: 42,
                            },
                            selectedInfoTypes: {
                                infoTypes: [
                                    {
                                        name: "Test string",
                                        version: "Test string",
                                    }
                                ],
                            },
                        }
                    ],
                },
                infoTypeTransformations: {
                    transformations: [
                        {
                            infoTypes: [
                                {
                                    name: "Test string",
                                    version: "Test string",
                                }
                            ],
                            primitiveTransformation: {
                                bucketingConfig: {
                                    buckets: [
                                        {
                                            max: {
                                                booleanValue: true,
                                                dateValue: {
                                                    day: 42,
                                                    month: 42,
                                                    year: 42,
                                                },
                                                dayOfWeekValue: "Test string",
                                                floatValue: 42,
                                                integerValue: "Test string",
                                                stringValue: "Test string",
                                                timestampValue: "Test string",
                                                timeValue: {
                                                    hours: 42,
                                                    minutes: 42,
                                                    nanos: 42,
                                                    seconds: 42,
                                                },
                                            },
                                            min: {
                                                booleanValue: true,
                                                dateValue: {
                                                    day: 42,
                                                    month: 42,
                                                    year: 42,
                                                },
                                                dayOfWeekValue: "Test string",
                                                floatValue: 42,
                                                integerValue: "Test string",
                                                stringValue: "Test string",
                                                timestampValue: "Test string",
                                                timeValue: {
                                                    hours: 42,
                                                    minutes: 42,
                                                    nanos: 42,
                                                    seconds: 42,
                                                },
                                            },
                                            replacementValue: {
                                                booleanValue: true,
                                                dateValue: {
                                                    day: 42,
                                                    month: 42,
                                                    year: 42,
                                                },
                                                dayOfWeekValue: "Test string",
                                                floatValue: 42,
                                                integerValue: "Test string",
                                                stringValue: "Test string",
                                                timestampValue: "Test string",
                                                timeValue: {
                                                    hours: 42,
                                                    minutes: 42,
                                                    nanos: 42,
                                                    seconds: 42,
                                                },
                                            },
                                        }
                                    ],
                                },
                                characterMaskConfig: {
                                    charactersToIgnore: [
                                        {
                                            charactersToSkip: "Test string",
                                            commonCharactersToIgnore: "Test string",
                                        }
                                    ],
                                    maskingCharacter: "Test string",
                                    numberToMask: 42,
                                    reverseOrder: true,
                                },
                                cryptoDeterministicConfig: {
                                    context: {
                                        name: "Test string",
                                    },
                                    cryptoKey: {
                                        kmsWrapped: {
                                            cryptoKeyName: "Test string",
                                            wrappedKey: "Test string",
                                        },
                                        transient: {
                                            name: "Test string",
                                        },
                                        unwrapped: {
                                            key: "Test string",
                                        },
                                    },
                                    surrogateInfoType: {
                                        name: "Test string",
                                        version: "Test string",
                                    },
                                },
                                cryptoHashConfig: {
                                    cryptoKey: {
                                        kmsWrapped: {
                                            cryptoKeyName: "Test string",
                                            wrappedKey: "Test string",
                                        },
                                        transient: {
                                            name: "Test string",
                                        },
                                        unwrapped: {
                                            key: "Test string",
                                        },
                                    },
                                },
                                cryptoReplaceFfxFpeConfig: {
                                    commonAlphabet: "Test string",
                                    context: {
                                        name: "Test string",
                                    },
                                    cryptoKey: {
                                        kmsWrapped: {
                                            cryptoKeyName: "Test string",
                                            wrappedKey: "Test string",
                                        },
                                        transient: {
                                            name: "Test string",
                                        },
                                        unwrapped: {
                                            key: "Test string",
                                        },
                                    },
                                    customAlphabet: "Test string",
                                    radix: 42,
                                    surrogateInfoType: {
                                        name: "Test string",
                                        version: "Test string",
                                    },
                                },
                                dateShiftConfig: {
                                    context: {
                                        name: "Test string",
                                    },
                                    cryptoKey: {
                                        kmsWrapped: {
                                            cryptoKeyName: "Test string",
                                            wrappedKey: "Test string",
                                        },
                                        transient: {
                                            name: "Test string",
                                        },
                                        unwrapped: {
                                            key: "Test string",
                                        },
                                    },
                                    lowerBoundDays: 42,
                                    upperBoundDays: 42,
                                },
                                fixedSizeBucketingConfig: {
                                    bucketSize: 42,
                                    lowerBound: {
                                        booleanValue: true,
                                        dateValue: {
                                            day: 42,
                                            month: 42,
                                            year: 42,
                                        },
                                        dayOfWeekValue: "Test string",
                                        floatValue: 42,
                                        integerValue: "Test string",
                                        stringValue: "Test string",
                                        timestampValue: "Test string",
                                        timeValue: {
                                            hours: 42,
                                            minutes: 42,
                                            nanos: 42,
                                            seconds: 42,
                                        },
                                    },
                                    upperBound: {
                                        booleanValue: true,
                                        dateValue: {
                                            day: 42,
                                            month: 42,
                                            year: 42,
                                        },
                                        dayOfWeekValue: "Test string",
                                        floatValue: 42,
                                        integerValue: "Test string",
                                        stringValue: "Test string",
                                        timestampValue: "Test string",
                                        timeValue: {
                                            hours: 42,
                                            minutes: 42,
                                            nanos: 42,
                                            seconds: 42,
                                        },
                                    },
                                },
                                redactConfig: {
                                },
                                replaceConfig: {
                                    newValue: {
                                        booleanValue: true,
                                        dateValue: {
                                            day: 42,
                                            month: 42,
                                            year: 42,
                                        },
                                        dayOfWeekValue: "Test string",
                                        floatValue: 42,
                                        integerValue: "Test string",
                                        stringValue: "Test string",
                                        timestampValue: "Test string",
                                        timeValue: {
                                            hours: 42,
                                            minutes: 42,
                                            nanos: 42,
                                            seconds: 42,
                                        },
                                    },
                                },
                                replaceDictionaryConfig: {
                                    wordList: {
                                        words: [
                                            "Test string"
                                        ],
                                    },
                                },
                                replaceWithInfoTypeConfig: {
                                },
                                timePartConfig: {
                                    partToExtract: "Test string",
                                },
                            },
                        }
                    ],
                },
                recordTransformations: {
                    fieldTransformations: [
                        {
                            condition: {
                                expressions: {
                                    conditions: {
                                        conditions: [
                                            {
                                                field: {
                                                    name: "Test string",
                                                },
                                                operator: "Test string",
                                                value: {
                                                    booleanValue: true,
                                                    dateValue: {
                                                        day: 42,
                                                        month: 42,
                                                        year: 42,
                                                    },
                                                    dayOfWeekValue: "Test string",
                                                    floatValue: 42,
                                                    integerValue: "Test string",
                                                    stringValue: "Test string",
                                                    timestampValue: "Test string",
                                                    timeValue: {
                                                        hours: 42,
                                                        minutes: 42,
                                                        nanos: 42,
                                                        seconds: 42,
                                                    },
                                                },
                                            }
                                        ],
                                    },
                                    logicalOperator: "Test string",
                                },
                            },
                            fields: [
                                {
                                    name: "Test string",
                                }
                            ],
                            infoTypeTransformations: {
                                transformations: [
                                    {
                                        infoTypes: [
                                            {
                                                name: "Test string",
                                                version: "Test string",
                                            }
                                        ],
                                        primitiveTransformation: {
                                            bucketingConfig: {
                                                buckets: [
                                                    {
                                                        max: {
                                                            booleanValue: true,
                                                            dateValue: {
                                                                day: 42,
                                                                month: 42,
                                                                year: 42,
                                                            },
                                                            dayOfWeekValue: "Test string",
                                                            floatValue: 42,
                                                            integerValue: "Test string",
                                                            stringValue: "Test string",
                                                            timestampValue: "Test string",
                                                            timeValue: {
                                                                hours: 42,
                                                                minutes: 42,
                                                                nanos: 42,
                                                                seconds: 42,
                                                            },
                                                        },
                                                        min: {
                                                            booleanValue: true,
                                                            dateValue: {
                                                                day: 42,
                                                                month: 42,
                                                                year: 42,
                                                            },
                                                            dayOfWeekValue: "Test string",
                                                            floatValue: 42,
                                                            integerValue: "Test string",
                                                            stringValue: "Test string",
                                                            timestampValue: "Test string",
                                                            timeValue: {
                                                                hours: 42,
                                                                minutes: 42,
                                                                nanos: 42,
                                                                seconds: 42,
                                                            },
                                                        },
                                                        replacementValue: {
                                                            booleanValue: true,
                                                            dateValue: {
                                                                day: 42,
                                                                month: 42,
                                                                year: 42,
                                                            },
                                                            dayOfWeekValue: "Test string",
                                                            floatValue: 42,
                                                            integerValue: "Test string",
                                                            stringValue: "Test string",
                                                            timestampValue: "Test string",
                                                            timeValue: {
                                                                hours: 42,
                                                                minutes: 42,
                                                                nanos: 42,
                                                                seconds: 42,
                                                            },
                                                        },
                                                    }
                                                ],
                                            },
                                            characterMaskConfig: {
                                                charactersToIgnore: [
                                                    {
                                                        charactersToSkip: "Test string",
                                                        commonCharactersToIgnore: "Test string",
                                                    }
                                                ],
                                                maskingCharacter: "Test string",
                                                numberToMask: 42,
                                                reverseOrder: true,
                                            },
                                            cryptoDeterministicConfig: {
                                                context: {
                                                    name: "Test string",
                                                },
                                                cryptoKey: {
                                                    kmsWrapped: {
                                                        cryptoKeyName: "Test string",
                                                        wrappedKey: "Test string",
                                                    },
                                                    transient: {
                                                        name: "Test string",
                                                    },
                                                    unwrapped: {
                                                        key: "Test string",
                                                    },
                                                },
                                                surrogateInfoType: {
                                                    name: "Test string",
                                                    version: "Test string",
                                                },
                                            },
                                            cryptoHashConfig: {
                                                cryptoKey: {
                                                    kmsWrapped: {
                                                        cryptoKeyName: "Test string",
                                                        wrappedKey: "Test string",
                                                    },
                                                    transient: {
                                                        name: "Test string",
                                                    },
                                                    unwrapped: {
                                                        key: "Test string",
                                                    },
                                                },
                                            },
                                            cryptoReplaceFfxFpeConfig: {
                                                commonAlphabet: "Test string",
                                                context: {
                                                    name: "Test string",
                                                },
                                                cryptoKey: {
                                                    kmsWrapped: {
                                                        cryptoKeyName: "Test string",
                                                        wrappedKey: "Test string",
                                                    },
                                                    transient: {
                                                        name: "Test string",
                                                    },
                                                    unwrapped: {
                                                        key: "Test string",
                                                    },
                                                },
                                                customAlphabet: "Test string",
                                                radix: 42,
                                                surrogateInfoType: {
                                                    name: "Test string",
                                                    version: "Test string",
                                                },
                                            },
                                            dateShiftConfig: {
                                                context: {
                                                    name: "Test string",
                                                },
                                                cryptoKey: {
                                                    kmsWrapped: {
                                                        cryptoKeyName: "Test string",
                                                        wrappedKey: "Test string",
                                                    },
                                                    transient: {
                                                        name: "Test string",
                                                    },
                                                    unwrapped: {
                                                        key: "Test string",
                                                    },
                                                },
                                                lowerBoundDays: 42,
                                                upperBoundDays: 42,
                                            },
                                            fixedSizeBucketingConfig: {
                                                bucketSize: 42,
                                                lowerBound: {
                                                    booleanValue: true,
                                                    dateValue: {
                                                        day: 42,
                                                        month: 42,
                                                        year: 42,
                                                    },
                                                    dayOfWeekValue: "Test string",
                                                    floatValue: 42,
                                                    integerValue: "Test string",
                                                    stringValue: "Test string",
                                                    timestampValue: "Test string",
                                                    timeValue: {
                                                        hours: 42,
                                                        minutes: 42,
                                                        nanos: 42,
                                                        seconds: 42,
                                                    },
                                                },
                                                upperBound: {
                                                    booleanValue: true,
                                                    dateValue: {
                                                        day: 42,
                                                        month: 42,
                                                        year: 42,
                                                    },
                                                    dayOfWeekValue: "Test string",
                                                    floatValue: 42,
                                                    integerValue: "Test string",
                                                    stringValue: "Test string",
                                                    timestampValue: "Test string",
                                                    timeValue: {
                                                        hours: 42,
                                                        minutes: 42,
                                                        nanos: 42,
                                                        seconds: 42,
                                                    },
                                                },
                                            },
                                            redactConfig: {
                                            },
                                            replaceConfig: {
                                                newValue: {
                                                    booleanValue: true,
                                                    dateValue: {
                                                        day: 42,
                                                        month: 42,
                                                        year: 42,
                                                    },
                                                    dayOfWeekValue: "Test string",
                                                    floatValue: 42,
                                                    integerValue: "Test string",
                                                    stringValue: "Test string",
                                                    timestampValue: "Test string",
                                                    timeValue: {
                                                        hours: 42,
                                                        minutes: 42,
                                                        nanos: 42,
                                                        seconds: 42,
                                                    },
                                                },
                                            },
                                            replaceDictionaryConfig: {
                                                wordList: {
                                                    words: [
                                                        "Test string"
                                                    ],
                                                },
                                            },
                                            replaceWithInfoTypeConfig: {
                                            },
                                            timePartConfig: {
                                                partToExtract: "Test string",
                                            },
                                        },
                                    }
                                ],
                            },
                            primitiveTransformation: {
                                bucketingConfig: {
                                    buckets: [
                                        {
                                            max: {
                                                booleanValue: true,
                                                dateValue: {
                                                    day: 42,
                                                    month: 42,
                                                    year: 42,
                                                },
                                                dayOfWeekValue: "Test string",
                                                floatValue: 42,
                                                integerValue: "Test string",
                                                stringValue: "Test string",
                                                timestampValue: "Test string",
                                                timeValue: {
                                                    hours: 42,
                                                    minutes: 42,
                                                    nanos: 42,
                                                    seconds: 42,
                                                },
                                            },
                                            min: {
                                                booleanValue: true,
                                                dateValue: {
                                                    day: 42,
                                                    month: 42,
                                                    year: 42,
                                                },
                                                dayOfWeekValue: "Test string",
                                                floatValue: 42,
                                                integerValue: "Test string",
                                                stringValue: "Test string",
                                                timestampValue: "Test string",
                                                timeValue: {
                                                    hours: 42,
                                                    minutes: 42,
                                                    nanos: 42,
                                                    seconds: 42,
                                                },
                                            },
                                            replacementValue: {
                                                booleanValue: true,
                                                dateValue: {
                                                    day: 42,
                                                    month: 42,
                                                    year: 42,
                                                },
                                                dayOfWeekValue: "Test string",
                                                floatValue: 42,
                                                integerValue: "Test string",
                                                stringValue: "Test string",
                                                timestampValue: "Test string",
                                                timeValue: {
                                                    hours: 42,
                                                    minutes: 42,
                                                    nanos: 42,
                                                    seconds: 42,
                                                },
                                            },
                                        }
                                    ],
                                },
                                characterMaskConfig: {
                                    charactersToIgnore: [
                                        {
                                            charactersToSkip: "Test string",
                                            commonCharactersToIgnore: "Test string",
                                        }
                                    ],
                                    maskingCharacter: "Test string",
                                    numberToMask: 42,
                                    reverseOrder: true,
                                },
                                cryptoDeterministicConfig: {
                                    context: {
                                        name: "Test string",
                                    },
                                    cryptoKey: {
                                        kmsWrapped: {
                                            cryptoKeyName: "Test string",
                                            wrappedKey: "Test string",
                                        },
                                        transient: {
                                            name: "Test string",
                                        },
                                        unwrapped: {
                                            key: "Test string",
                                        },
                                    },
                                    surrogateInfoType: {
                                        name: "Test string",
                                        version: "Test string",
                                    },
                                },
                                cryptoHashConfig: {
                                    cryptoKey: {
                                        kmsWrapped: {
                                            cryptoKeyName: "Test string",
                                            wrappedKey: "Test string",
                                        },
                                        transient: {
                                            name: "Test string",
                                        },
                                        unwrapped: {
                                            key: "Test string",
                                        },
                                    },
                                },
                                cryptoReplaceFfxFpeConfig: {
                                    commonAlphabet: "Test string",
                                    context: {
                                        name: "Test string",
                                    },
                                    cryptoKey: {
                                        kmsWrapped: {
                                            cryptoKeyName: "Test string",
                                            wrappedKey: "Test string",
                                        },
                                        transient: {
                                            name: "Test string",
                                        },
                                        unwrapped: {
                                            key: "Test string",
                                        },
                                    },
                                    customAlphabet: "Test string",
                                    radix: 42,
                                    surrogateInfoType: {
                                        name: "Test string",
                                        version: "Test string",
                                    },
                                },
                                dateShiftConfig: {
                                    context: {
                                        name: "Test string",
                                    },
                                    cryptoKey: {
                                        kmsWrapped: {
                                            cryptoKeyName: "Test string",
                                            wrappedKey: "Test string",
                                        },
                                        transient: {
                                            name: "Test string",
                                        },
                                        unwrapped: {
                                            key: "Test string",
                                        },
                                    },
                                    lowerBoundDays: 42,
                                    upperBoundDays: 42,
                                },
                                fixedSizeBucketingConfig: {
                                    bucketSize: 42,
                                    lowerBound: {
                                        booleanValue: true,
                                        dateValue: {
                                            day: 42,
                                            month: 42,
                                            year: 42,
                                        },
                                        dayOfWeekValue: "Test string",
                                        floatValue: 42,
                                        integerValue: "Test string",
                                        stringValue: "Test string",
                                        timestampValue: "Test string",
                                        timeValue: {
                                            hours: 42,
                                            minutes: 42,
                                            nanos: 42,
                                            seconds: 42,
                                        },
                                    },
                                    upperBound: {
                                        booleanValue: true,
                                        dateValue: {
                                            day: 42,
                                            month: 42,
                                            year: 42,
                                        },
                                        dayOfWeekValue: "Test string",
                                        floatValue: 42,
                                        integerValue: "Test string",
                                        stringValue: "Test string",
                                        timestampValue: "Test string",
                                        timeValue: {
                                            hours: 42,
                                            minutes: 42,
                                            nanos: 42,
                                            seconds: 42,
                                        },
                                    },
                                },
                                redactConfig: {
                                },
                                replaceConfig: {
                                    newValue: {
                                        booleanValue: true,
                                        dateValue: {
                                            day: 42,
                                            month: 42,
                                            year: 42,
                                        },
                                        dayOfWeekValue: "Test string",
                                        floatValue: 42,
                                        integerValue: "Test string",
                                        stringValue: "Test string",
                                        timestampValue: "Test string",
                                        timeValue: {
                                            hours: 42,
                                            minutes: 42,
                                            nanos: 42,
                                            seconds: 42,
                                        },
                                    },
                                },
                                replaceDictionaryConfig: {
                                    wordList: {
                                        words: [
                                            "Test string"
                                        ],
                                    },
                                },
                                replaceWithInfoTypeConfig: {
                                },
                                timePartConfig: {
                                    partToExtract: "Test string",
                                },
                            },
                        }
                    ],
                    recordSuppressions: [
                        {
                            condition: {
                                expressions: {
                                    conditions: {
                                        conditions: [
                                            {
                                                field: {
                                                    name: "Test string",
                                                },
                                                operator: "Test string",
                                                value: {
                                                    booleanValue: true,
                                                    dateValue: {
                                                        day: 42,
                                                        month: 42,
                                                        year: 42,
                                                    },
                                                    dayOfWeekValue: "Test string",
                                                    floatValue: 42,
                                                    integerValue: "Test string",
                                                    stringValue: "Test string",
                                                    timestampValue: "Test string",
                                                    timeValue: {
                                                        hours: 42,
                                                        minutes: 42,
                                                        nanos: 42,
                                                        seconds: 42,
                                                    },
                                                },
                                            }
                                        ],
                                    },
                                    logicalOperator: "Test string",
                                },
                            },
                        }
                    ],
                },
                transformationErrorHandling: {
                    leaveUntransformed: {
                    },
                    throwError: {
                    },
                },
            },
            deidentifyTemplateName: "Test string",
            inspectConfig: {
                contentOptions: [
                    "Test string"
                ],
                customInfoTypes: [
                    {
                        detectionRules: [
                            {
                                hotwordRule: {
                                    hotwordRegex: {
                                        groupIndexes: [
                                            42
                                        ],
                                        pattern: "Test string",
                                    },
                                    likelihoodAdjustment: {
                                        fixedLikelihood: "Test string",
                                        relativeLikelihood: 42,
                                    },
                                    proximity: {
                                        windowAfter: 42,
                                        windowBefore: 42,
                                    },
                                },
                            }
                        ],
                        dictionary: {
                            cloudStoragePath: {
                                path: "Test string",
                            },
                            wordList: {
                                words: [
                                    "Test string"
                                ],
                            },
                        },
                        exclusionType: "Test string",
                        infoType: {
                            name: "Test string",
                            version: "Test string",
                        },
                        likelihood: "Test string",
                        regex: {
                            groupIndexes: [
                                42
                            ],
                            pattern: "Test string",
                        },
                        storedType: {
                            createTime: "Test string",
                            name: "Test string",
                        },
                        surrogateType: {
                        },
                    }
                ],
                excludeInfoTypes: true,
                includeQuote: true,
                infoTypes: [
                    {
                        name: "Test string",
                        version: "Test string",
                    }
                ],
                limits: {
                    maxFindingsPerInfoType: [
                        {
                            infoType: {
                                name: "Test string",
                                version: "Test string",
                            },
                            maxFindings: 42,
                        }
                    ],
                    maxFindingsPerItem: 42,
                    maxFindingsPerRequest: 42,
                },
                minLikelihood: "Test string",
                ruleSet: [
                    {
                        infoTypes: [
                            {
                                name: "Test string",
                                version: "Test string",
                            }
                        ],
                        rules: [
                            {
                                exclusionRule: {
                                    dictionary: {
                                        cloudStoragePath: {
                                            path: "Test string",
                                        },
                                        wordList: {
                                            words: [
                                                "Test string"
                                            ],
                                        },
                                    },
                                    excludeByHotword: {
                                        hotwordRegex: {
                                            groupIndexes: [
                                                42
                                            ],
                                            pattern: "Test string",
                                        },
                                        proximity: {
                                            windowAfter: 42,
                                            windowBefore: 42,
                                        },
                                    },
                                    excludeInfoTypes: {
                                        infoTypes: [
                                            {
                                                name: "Test string",
                                                version: "Test string",
                                            }
                                        ],
                                    },
                                    matchingType: "Test string",
                                    regex: {
                                        groupIndexes: [
                                            42
                                        ],
                                        pattern: "Test string",
                                    },
                                },
                                hotwordRule: {
                                    hotwordRegex: {
                                        groupIndexes: [
                                            42
                                        ],
                                        pattern: "Test string",
                                    },
                                    likelihoodAdjustment: {
                                        fixedLikelihood: "Test string",
                                        relativeLikelihood: 42,
                                    },
                                    proximity: {
                                        windowAfter: 42,
                                        windowBefore: 42,
                                    },
                                },
                            }
                        ],
                    }
                ],
            },
            inspectTemplateName: "Test string",
            item: {
                byteItem: {
                    data: "Test string",
                    type: "Test string",
                },
                table: {
                    headers: [
                        {
                            name: "Test string",
                        }
                    ],
                    rows: [
                        {
                            values: [
                                {
                                    booleanValue: true,
                                    dateValue: {
                                        day: 42,
                                        month: 42,
                                        year: 42,
                                    },
                                    dayOfWeekValue: "Test string",
                                    floatValue: 42,
                                    integerValue: "Test string",
                                    stringValue: "Test string",
                                    timestampValue: "Test string",
                                    timeValue: {
                                        hours: 42,
                                        minutes: 42,
                                        nanos: 42,
                                        seconds: 42,
                                    },
                                }
                            ],
                        }
                    ],
                },
                value: "Test string",
            },
            locationId: "Test string",
        });
        /**
         * Finds potentially sensitive info in content. This method has limits on input size, processing time, and output size. When no InfoTypes or CustomInfoTypes are specified in this request,
         * the system will automatically choose what detectors to run. By default this may be all types, but may change over time as detectors are updated. For how to guides, see
         * https://cloud.google.com/dlp/docs/inspecting-images and https://cloud.google.com/dlp/docs/inspecting-text,
         */
        await gapi.client.dlp.projects.content.inspect({
            parent: "Test string",
        }, {
            inspectConfig: {
                contentOptions: [
                    "Test string"
                ],
                customInfoTypes: [
                    {
                        detectionRules: [
                            {
                                hotwordRule: {
                                    hotwordRegex: {
                                        groupIndexes: [
                                            42
                                        ],
                                        pattern: "Test string",
                                    },
                                    likelihoodAdjustment: {
                                        fixedLikelihood: "Test string",
                                        relativeLikelihood: 42,
                                    },
                                    proximity: {
                                        windowAfter: 42,
                                        windowBefore: 42,
                                    },
                                },
                            }
                        ],
                        dictionary: {
                            cloudStoragePath: {
                                path: "Test string",
                            },
                            wordList: {
                                words: [
                                    "Test string"
                                ],
                            },
                        },
                        exclusionType: "Test string",
                        infoType: {
                            name: "Test string",
                            version: "Test string",
                        },
                        likelihood: "Test string",
                        regex: {
                            groupIndexes: [
                                42
                            ],
                            pattern: "Test string",
                        },
                        storedType: {
                            createTime: "Test string",
                            name: "Test string",
                        },
                        surrogateType: {
                        },
                    }
                ],
                excludeInfoTypes: true,
                includeQuote: true,
                infoTypes: [
                    {
                        name: "Test string",
                        version: "Test string",
                    }
                ],
                limits: {
                    maxFindingsPerInfoType: [
                        {
                            infoType: {
                                name: "Test string",
                                version: "Test string",
                            },
                            maxFindings: 42,
                        }
                    ],
                    maxFindingsPerItem: 42,
                    maxFindingsPerRequest: 42,
                },
                minLikelihood: "Test string",
                ruleSet: [
                    {
                        infoTypes: [
                            {
                                name: "Test string",
                                version: "Test string",
                            }
                        ],
                        rules: [
                            {
                                exclusionRule: {
                                    dictionary: {
                                        cloudStoragePath: {
                                            path: "Test string",
                                        },
                                        wordList: {
                                            words: [
                                                "Test string"
                                            ],
                                        },
                                    },
                                    excludeByHotword: {
                                        hotwordRegex: {
                                            groupIndexes: [
                                                42
                                            ],
                                            pattern: "Test string",
                                        },
                                        proximity: {
                                            windowAfter: 42,
                                            windowBefore: 42,
                                        },
                                    },
                                    excludeInfoTypes: {
                                        infoTypes: [
                                            {
                                                name: "Test string",
                                                version: "Test string",
                                            }
                                        ],
                                    },
                                    matchingType: "Test string",
                                    regex: {
                                        groupIndexes: [
                                            42
                                        ],
                                        pattern: "Test string",
                                    },
                                },
                                hotwordRule: {
                                    hotwordRegex: {
                                        groupIndexes: [
                                            42
                                        ],
                                        pattern: "Test string",
                                    },
                                    likelihoodAdjustment: {
                                        fixedLikelihood: "Test string",
                                        relativeLikelihood: 42,
                                    },
                                    proximity: {
                                        windowAfter: 42,
                                        windowBefore: 42,
                                    },
                                },
                            }
                        ],
                    }
                ],
            },
            inspectTemplateName: "Test string",
            item: {
                byteItem: {
                    data: "Test string",
                    type: "Test string",
                },
                table: {
                    headers: [
                        {
                            name: "Test string",
                        }
                    ],
                    rows: [
                        {
                            values: [
                                {
                                    booleanValue: true,
                                    dateValue: {
                                        day: 42,
                                        month: 42,
                                        year: 42,
                                    },
                                    dayOfWeekValue: "Test string",
                                    floatValue: 42,
                                    integerValue: "Test string",
                                    stringValue: "Test string",
                                    timestampValue: "Test string",
                                    timeValue: {
                                        hours: 42,
                                        minutes: 42,
                                        nanos: 42,
                                        seconds: 42,
                                    },
                                }
                            ],
                        }
                    ],
                },
                value: "Test string",
            },
            locationId: "Test string",
        });
        /** Re-identifies content that has been de-identified. See https://cloud.google.com/dlp/docs/pseudonymization#re-identification_in_free_text_code_example to learn more. */
        await gapi.client.dlp.projects.content.reidentify({
            parent: "Test string",
        }, {
            inspectConfig: {
                contentOptions: [
                    "Test string"
                ],
                customInfoTypes: [
                    {
                        detectionRules: [
                            {
                                hotwordRule: {
                                    hotwordRegex: {
                                        groupIndexes: [
                                            42
                                        ],
                                        pattern: "Test string",
                                    },
                                    likelihoodAdjustment: {
                                        fixedLikelihood: "Test string",
                                        relativeLikelihood: 42,
                                    },
                                    proximity: {
                                        windowAfter: 42,
                                        windowBefore: 42,
                                    },
                                },
                            }
                        ],
                        dictionary: {
                            cloudStoragePath: {
                                path: "Test string",
                            },
                            wordList: {
                                words: [
                                    "Test string"
                                ],
                            },
                        },
                        exclusionType: "Test string",
                        infoType: {
                            name: "Test string",
                            version: "Test string",
                        },
                        likelihood: "Test string",
                        regex: {
                            groupIndexes: [
                                42
                            ],
                            pattern: "Test string",
                        },
                        storedType: {
                            createTime: "Test string",
                            name: "Test string",
                        },
                        surrogateType: {
                        },
                    }
                ],
                excludeInfoTypes: true,
                includeQuote: true,
                infoTypes: [
                    {
                        name: "Test string",
                        version: "Test string",
                    }
                ],
                limits: {
                    maxFindingsPerInfoType: [
                        {
                            infoType: {
                                name: "Test string",
                                version: "Test string",
                            },
                            maxFindings: 42,
                        }
                    ],
                    maxFindingsPerItem: 42,
                    maxFindingsPerRequest: 42,
                },
                minLikelihood: "Test string",
                ruleSet: [
                    {
                        infoTypes: [
                            {
                                name: "Test string",
                                version: "Test string",
                            }
                        ],
                        rules: [
                            {
                                exclusionRule: {
                                    dictionary: {
                                        cloudStoragePath: {
                                            path: "Test string",
                                        },
                                        wordList: {
                                            words: [
                                                "Test string"
                                            ],
                                        },
                                    },
                                    excludeByHotword: {
                                        hotwordRegex: {
                                            groupIndexes: [
                                                42
                                            ],
                                            pattern: "Test string",
                                        },
                                        proximity: {
                                            windowAfter: 42,
                                            windowBefore: 42,
                                        },
                                    },
                                    excludeInfoTypes: {
                                        infoTypes: [
                                            {
                                                name: "Test string",
                                                version: "Test string",
                                            }
                                        ],
                                    },
                                    matchingType: "Test string",
                                    regex: {
                                        groupIndexes: [
                                            42
                                        ],
                                        pattern: "Test string",
                                    },
                                },
                                hotwordRule: {
                                    hotwordRegex: {
                                        groupIndexes: [
                                            42
                                        ],
                                        pattern: "Test string",
                                    },
                                    likelihoodAdjustment: {
                                        fixedLikelihood: "Test string",
                                        relativeLikelihood: 42,
                                    },
                                    proximity: {
                                        windowAfter: 42,
                                        windowBefore: 42,
                                    },
                                },
                            }
                        ],
                    }
                ],
            },
            inspectTemplateName: "Test string",
            item: {
                byteItem: {
                    data: "Test string",
                    type: "Test string",
                },
                table: {
                    headers: [
                        {
                            name: "Test string",
                        }
                    ],
                    rows: [
                        {
                            values: [
                                {
                                    booleanValue: true,
                                    dateValue: {
                                        day: 42,
                                        month: 42,
                                        year: 42,
                                    },
                                    dayOfWeekValue: "Test string",
                                    floatValue: 42,
                                    integerValue: "Test string",
                                    stringValue: "Test string",
                                    timestampValue: "Test string",
                                    timeValue: {
                                        hours: 42,
                                        minutes: 42,
                                        nanos: 42,
                                        seconds: 42,
                                    },
                                }
                            ],
                        }
                    ],
                },
                value: "Test string",
            },
            locationId: "Test string",
            reidentifyConfig: {
                imageTransformations: {
                    transforms: [
                        {
                            allInfoTypes: {
                            },
                            allText: {
                            },
                            redactionColor: {
                                blue: 42,
                                green: 42,
                                red: 42,
                            },
                            selectedInfoTypes: {
                                infoTypes: [
                                    {
                                        name: "Test string",
                                        version: "Test string",
                                    }
                                ],
                            },
                        }
                    ],
                },
                infoTypeTransformations: {
                    transformations: [
                        {
                            infoTypes: [
                                {
                                    name: "Test string",
                                    version: "Test string",
                                }
                            ],
                            primitiveTransformation: {
                                bucketingConfig: {
                                    buckets: [
                                        {
                                            max: {
                                                booleanValue: true,
                                                dateValue: {
                                                    day: 42,
                                                    month: 42,
                                                    year: 42,
                                                },
                                                dayOfWeekValue: "Test string",
                                                floatValue: 42,
                                                integerValue: "Test string",
                                                stringValue: "Test string",
                                                timestampValue: "Test string",
                                                timeValue: {
                                                    hours: 42,
                                                    minutes: 42,
                                                    nanos: 42,
                                                    seconds: 42,
                                                },
                                            },
                                            min: {
                                                booleanValue: true,
                                                dateValue: {
                                                    day: 42,
                                                    month: 42,
                                                    year: 42,
                                                },
                                                dayOfWeekValue: "Test string",
                                                floatValue: 42,
                                                integerValue: "Test string",
                                                stringValue: "Test string",
                                                timestampValue: "Test string",
                                                timeValue: {
                                                    hours: 42,
                                                    minutes: 42,
                                                    nanos: 42,
                                                    seconds: 42,
                                                },
                                            },
                                            replacementValue: {
                                                booleanValue: true,
                                                dateValue: {
                                                    day: 42,
                                                    month: 42,
                                                    year: 42,
                                                },
                                                dayOfWeekValue: "Test string",
                                                floatValue: 42,
                                                integerValue: "Test string",
                                                stringValue: "Test string",
                                                timestampValue: "Test string",
                                                timeValue: {
                                                    hours: 42,
                                                    minutes: 42,
                                                    nanos: 42,
                                                    seconds: 42,
                                                },
                                            },
                                        }
                                    ],
                                },
                                characterMaskConfig: {
                                    charactersToIgnore: [
                                        {
                                            charactersToSkip: "Test string",
                                            commonCharactersToIgnore: "Test string",
                                        }
                                    ],
                                    maskingCharacter: "Test string",
                                    numberToMask: 42,
                                    reverseOrder: true,
                                },
                                cryptoDeterministicConfig: {
                                    context: {
                                        name: "Test string",
                                    },
                                    cryptoKey: {
                                        kmsWrapped: {
                                            cryptoKeyName: "Test string",
                                            wrappedKey: "Test string",
                                        },
                                        transient: {
                                            name: "Test string",
                                        },
                                        unwrapped: {
                                            key: "Test string",
                                        },
                                    },
                                    surrogateInfoType: {
                                        name: "Test string",
                                        version: "Test string",
                                    },
                                },
                                cryptoHashConfig: {
                                    cryptoKey: {
                                        kmsWrapped: {
                                            cryptoKeyName: "Test string",
                                            wrappedKey: "Test string",
                                        },
                                        transient: {
                                            name: "Test string",
                                        },
                                        unwrapped: {
                                            key: "Test string",
                                        },
                                    },
                                },
                                cryptoReplaceFfxFpeConfig: {
                                    commonAlphabet: "Test string",
                                    context: {
                                        name: "Test string",
                                    },
                                    cryptoKey: {
                                        kmsWrapped: {
                                            cryptoKeyName: "Test string",
                                            wrappedKey: "Test string",
                                        },
                                        transient: {
                                            name: "Test string",
                                        },
                                        unwrapped: {
                                            key: "Test string",
                                        },
                                    },
                                    customAlphabet: "Test string",
                                    radix: 42,
                                    surrogateInfoType: {
                                        name: "Test string",
                                        version: "Test string",
                                    },
                                },
                                dateShiftConfig: {
                                    context: {
                                        name: "Test string",
                                    },
                                    cryptoKey: {
                                        kmsWrapped: {
                                            cryptoKeyName: "Test string",
                                            wrappedKey: "Test string",
                                        },
                                        transient: {
                                            name: "Test string",
                                        },
                                        unwrapped: {
                                            key: "Test string",
                                        },
                                    },
                                    lowerBoundDays: 42,
                                    upperBoundDays: 42,
                                },
                                fixedSizeBucketingConfig: {
                                    bucketSize: 42,
                                    lowerBound: {
                                        booleanValue: true,
                                        dateValue: {
                                            day: 42,
                                            month: 42,
                                            year: 42,
                                        },
                                        dayOfWeekValue: "Test string",
                                        floatValue: 42,
                                        integerValue: "Test string",
                                        stringValue: "Test string",
                                        timestampValue: "Test string",
                                        timeValue: {
                                            hours: 42,
                                            minutes: 42,
                                            nanos: 42,
                                            seconds: 42,
                                        },
                                    },
                                    upperBound: {
                                        booleanValue: true,
                                        dateValue: {
                                            day: 42,
                                            month: 42,
                                            year: 42,
                                        },
                                        dayOfWeekValue: "Test string",
                                        floatValue: 42,
                                        integerValue: "Test string",
                                        stringValue: "Test string",
                                        timestampValue: "Test string",
                                        timeValue: {
                                            hours: 42,
                                            minutes: 42,
                                            nanos: 42,
                                            seconds: 42,
                                        },
                                    },
                                },
                                redactConfig: {
                                },
                                replaceConfig: {
                                    newValue: {
                                        booleanValue: true,
                                        dateValue: {
                                            day: 42,
                                            month: 42,
                                            year: 42,
                                        },
                                        dayOfWeekValue: "Test string",
                                        floatValue: 42,
                                        integerValue: "Test string",
                                        stringValue: "Test string",
                                        timestampValue: "Test string",
                                        timeValue: {
                                            hours: 42,
                                            minutes: 42,
                                            nanos: 42,
                                            seconds: 42,
                                        },
                                    },
                                },
                                replaceDictionaryConfig: {
                                    wordList: {
                                        words: [
                                            "Test string"
                                        ],
                                    },
                                },
                                replaceWithInfoTypeConfig: {
                                },
                                timePartConfig: {
                                    partToExtract: "Test string",
                                },
                            },
                        }
                    ],
                },
                recordTransformations: {
                    fieldTransformations: [
                        {
                            condition: {
                                expressions: {
                                    conditions: {
                                        conditions: [
                                            {
                                                field: {
                                                    name: "Test string",
                                                },
                                                operator: "Test string",
                                                value: {
                                                    booleanValue: true,
                                                    dateValue: {
                                                        day: 42,
                                                        month: 42,
                                                        year: 42,
                                                    },
                                                    dayOfWeekValue: "Test string",
                                                    floatValue: 42,
                                                    integerValue: "Test string",
                                                    stringValue: "Test string",
                                                    timestampValue: "Test string",
                                                    timeValue: {
                                                        hours: 42,
                                                        minutes: 42,
                                                        nanos: 42,
                                                        seconds: 42,
                                                    },
                                                },
                                            }
                                        ],
                                    },
                                    logicalOperator: "Test string",
                                },
                            },
                            fields: [
                                {
                                    name: "Test string",
                                }
                            ],
                            infoTypeTransformations: {
                                transformations: [
                                    {
                                        infoTypes: [
                                            {
                                                name: "Test string",
                                                version: "Test string",
                                            }
                                        ],
                                        primitiveTransformation: {
                                            bucketingConfig: {
                                                buckets: [
                                                    {
                                                        max: {
                                                            booleanValue: true,
                                                            dateValue: {
                                                                day: 42,
                                                                month: 42,
                                                                year: 42,
                                                            },
                                                            dayOfWeekValue: "Test string",
                                                            floatValue: 42,
                                                            integerValue: "Test string",
                                                            stringValue: "Test string",
                                                            timestampValue: "Test string",
                                                            timeValue: {
                                                                hours: 42,
                                                                minutes: 42,
                                                                nanos: 42,
                                                                seconds: 42,
                                                            },
                                                        },
                                                        min: {
                                                            booleanValue: true,
                                                            dateValue: {
                                                                day: 42,
                                                                month: 42,
                                                                year: 42,
                                                            },
                                                            dayOfWeekValue: "Test string",
                                                            floatValue: 42,
                                                            integerValue: "Test string",
                                                            stringValue: "Test string",
                                                            timestampValue: "Test string",
                                                            timeValue: {
                                                                hours: 42,
                                                                minutes: 42,
                                                                nanos: 42,
                                                                seconds: 42,
                                                            },
                                                        },
                                                        replacementValue: {
                                                            booleanValue: true,
                                                            dateValue: {
                                                                day: 42,
                                                                month: 42,
                                                                year: 42,
                                                            },
                                                            dayOfWeekValue: "Test string",
                                                            floatValue: 42,
                                                            integerValue: "Test string",
                                                            stringValue: "Test string",
                                                            timestampValue: "Test string",
                                                            timeValue: {
                                                                hours: 42,
                                                                minutes: 42,
                                                                nanos: 42,
                                                                seconds: 42,
                                                            },
                                                        },
                                                    }
                                                ],
                                            },
                                            characterMaskConfig: {
                                                charactersToIgnore: [
                                                    {
                                                        charactersToSkip: "Test string",
                                                        commonCharactersToIgnore: "Test string",
                                                    }
                                                ],
                                                maskingCharacter: "Test string",
                                                numberToMask: 42,
                                                reverseOrder: true,
                                            },
                                            cryptoDeterministicConfig: {
                                                context: {
                                                    name: "Test string",
                                                },
                                                cryptoKey: {
                                                    kmsWrapped: {
                                                        cryptoKeyName: "Test string",
                                                        wrappedKey: "Test string",
                                                    },
                                                    transient: {
                                                        name: "Test string",
                                                    },
                                                    unwrapped: {
                                                        key: "Test string",
                                                    },
                                                },
                                                surrogateInfoType: {
                                                    name: "Test string",
                                                    version: "Test string",
                                                },
                                            },
                                            cryptoHashConfig: {
                                                cryptoKey: {
                                                    kmsWrapped: {
                                                        cryptoKeyName: "Test string",
                                                        wrappedKey: "Test string",
                                                    },
                                                    transient: {
                                                        name: "Test string",
                                                    },
                                                    unwrapped: {
                                                        key: "Test string",
                                                    },
                                                },
                                            },
                                            cryptoReplaceFfxFpeConfig: {
                                                commonAlphabet: "Test string",
                                                context: {
                                                    name: "Test string",
                                                },
                                                cryptoKey: {
                                                    kmsWrapped: {
                                                        cryptoKeyName: "Test string",
                                                        wrappedKey: "Test string",
                                                    },
                                                    transient: {
                                                        name: "Test string",
                                                    },
                                                    unwrapped: {
                                                        key: "Test string",
                                                    },
                                                },
                                                customAlphabet: "Test string",
                                                radix: 42,
                                                surrogateInfoType: {
                                                    name: "Test string",
                                                    version: "Test string",
                                                },
                                            },
                                            dateShiftConfig: {
                                                context: {
                                                    name: "Test string",
                                                },
                                                cryptoKey: {
                                                    kmsWrapped: {
                                                        cryptoKeyName: "Test string",
                                                        wrappedKey: "Test string",
                                                    },
                                                    transient: {
                                                        name: "Test string",
                                                    },
                                                    unwrapped: {
                                                        key: "Test string",
                                                    },
                                                },
                                                lowerBoundDays: 42,
                                                upperBoundDays: 42,
                                            },
                                            fixedSizeBucketingConfig: {
                                                bucketSize: 42,
                                                lowerBound: {
                                                    booleanValue: true,
                                                    dateValue: {
                                                        day: 42,
                                                        month: 42,
                                                        year: 42,
                                                    },
                                                    dayOfWeekValue: "Test string",
                                                    floatValue: 42,
                                                    integerValue: "Test string",
                                                    stringValue: "Test string",
                                                    timestampValue: "Test string",
                                                    timeValue: {
                                                        hours: 42,
                                                        minutes: 42,
                                                        nanos: 42,
                                                        seconds: 42,
                                                    },
                                                },
                                                upperBound: {
                                                    booleanValue: true,
                                                    dateValue: {
                                                        day: 42,
                                                        month: 42,
                                                        year: 42,
                                                    },
                                                    dayOfWeekValue: "Test string",
                                                    floatValue: 42,
                                                    integerValue: "Test string",
                                                    stringValue: "Test string",
                                                    timestampValue: "Test string",
                                                    timeValue: {
                                                        hours: 42,
                                                        minutes: 42,
                                                        nanos: 42,
                                                        seconds: 42,
                                                    },
                                                },
                                            },
                                            redactConfig: {
                                            },
                                            replaceConfig: {
                                                newValue: {
                                                    booleanValue: true,
                                                    dateValue: {
                                                        day: 42,
                                                        month: 42,
                                                        year: 42,
                                                    },
                                                    dayOfWeekValue: "Test string",
                                                    floatValue: 42,
                                                    integerValue: "Test string",
                                                    stringValue: "Test string",
                                                    timestampValue: "Test string",
                                                    timeValue: {
                                                        hours: 42,
                                                        minutes: 42,
                                                        nanos: 42,
                                                        seconds: 42,
                                                    },
                                                },
                                            },
                                            replaceDictionaryConfig: {
                                                wordList: {
                                                    words: [
                                                        "Test string"
                                                    ],
                                                },
                                            },
                                            replaceWithInfoTypeConfig: {
                                            },
                                            timePartConfig: {
                                                partToExtract: "Test string",
                                            },
                                        },
                                    }
                                ],
                            },
                            primitiveTransformation: {
                                bucketingConfig: {
                                    buckets: [
                                        {
                                            max: {
                                                booleanValue: true,
                                                dateValue: {
                                                    day: 42,
                                                    month: 42,
                                                    year: 42,
                                                },
                                                dayOfWeekValue: "Test string",
                                                floatValue: 42,
                                                integerValue: "Test string",
                                                stringValue: "Test string",
                                                timestampValue: "Test string",
                                                timeValue: {
                                                    hours: 42,
                                                    minutes: 42,
                                                    nanos: 42,
                                                    seconds: 42,
                                                },
                                            },
                                            min: {
                                                booleanValue: true,
                                                dateValue: {
                                                    day: 42,
                                                    month: 42,
                                                    year: 42,
                                                },
                                                dayOfWeekValue: "Test string",
                                                floatValue: 42,
                                                integerValue: "Test string",
                                                stringValue: "Test string",
                                                timestampValue: "Test string",
                                                timeValue: {
                                                    hours: 42,
                                                    minutes: 42,
                                                    nanos: 42,
                                                    seconds: 42,
                                                },
                                            },
                                            replacementValue: {
                                                booleanValue: true,
                                                dateValue: {
                                                    day: 42,
                                                    month: 42,
                                                    year: 42,
                                                },
                                                dayOfWeekValue: "Test string",
                                                floatValue: 42,
                                                integerValue: "Test string",
                                                stringValue: "Test string",
                                                timestampValue: "Test string",
                                                timeValue: {
                                                    hours: 42,
                                                    minutes: 42,
                                                    nanos: 42,
                                                    seconds: 42,
                                                },
                                            },
                                        }
                                    ],
                                },
                                characterMaskConfig: {
                                    charactersToIgnore: [
                                        {
                                            charactersToSkip: "Test string",
                                            commonCharactersToIgnore: "Test string",
                                        }
                                    ],
                                    maskingCharacter: "Test string",
                                    numberToMask: 42,
                                    reverseOrder: true,
                                },
                                cryptoDeterministicConfig: {
                                    context: {
                                        name: "Test string",
                                    },
                                    cryptoKey: {
                                        kmsWrapped: {
                                            cryptoKeyName: "Test string",
                                            wrappedKey: "Test string",
                                        },
                                        transient: {
                                            name: "Test string",
                                        },
                                        unwrapped: {
                                            key: "Test string",
                                        },
                                    },
                                    surrogateInfoType: {
                                        name: "Test string",
                                        version: "Test string",
                                    },
                                },
                                cryptoHashConfig: {
                                    cryptoKey: {
                                        kmsWrapped: {
                                            cryptoKeyName: "Test string",
                                            wrappedKey: "Test string",
                                        },
                                        transient: {
                                            name: "Test string",
                                        },
                                        unwrapped: {
                                            key: "Test string",
                                        },
                                    },
                                },
                                cryptoReplaceFfxFpeConfig: {
                                    commonAlphabet: "Test string",
                                    context: {
                                        name: "Test string",
                                    },
                                    cryptoKey: {
                                        kmsWrapped: {
                                            cryptoKeyName: "Test string",
                                            wrappedKey: "Test string",
                                        },
                                        transient: {
                                            name: "Test string",
                                        },
                                        unwrapped: {
                                            key: "Test string",
                                        },
                                    },
                                    customAlphabet: "Test string",
                                    radix: 42,
                                    surrogateInfoType: {
                                        name: "Test string",
                                        version: "Test string",
                                    },
                                },
                                dateShiftConfig: {
                                    context: {
                                        name: "Test string",
                                    },
                                    cryptoKey: {
                                        kmsWrapped: {
                                            cryptoKeyName: "Test string",
                                            wrappedKey: "Test string",
                                        },
                                        transient: {
                                            name: "Test string",
                                        },
                                        unwrapped: {
                                            key: "Test string",
                                        },
                                    },
                                    lowerBoundDays: 42,
                                    upperBoundDays: 42,
                                },
                                fixedSizeBucketingConfig: {
                                    bucketSize: 42,
                                    lowerBound: {
                                        booleanValue: true,
                                        dateValue: {
                                            day: 42,
                                            month: 42,
                                            year: 42,
                                        },
                                        dayOfWeekValue: "Test string",
                                        floatValue: 42,
                                        integerValue: "Test string",
                                        stringValue: "Test string",
                                        timestampValue: "Test string",
                                        timeValue: {
                                            hours: 42,
                                            minutes: 42,
                                            nanos: 42,
                                            seconds: 42,
                                        },
                                    },
                                    upperBound: {
                                        booleanValue: true,
                                        dateValue: {
                                            day: 42,
                                            month: 42,
                                            year: 42,
                                        },
                                        dayOfWeekValue: "Test string",
                                        floatValue: 42,
                                        integerValue: "Test string",
                                        stringValue: "Test string",
                                        timestampValue: "Test string",
                                        timeValue: {
                                            hours: 42,
                                            minutes: 42,
                                            nanos: 42,
                                            seconds: 42,
                                        },
                                    },
                                },
                                redactConfig: {
                                },
                                replaceConfig: {
                                    newValue: {
                                        booleanValue: true,
                                        dateValue: {
                                            day: 42,
                                            month: 42,
                                            year: 42,
                                        },
                                        dayOfWeekValue: "Test string",
                                        floatValue: 42,
                                        integerValue: "Test string",
                                        stringValue: "Test string",
                                        timestampValue: "Test string",
                                        timeValue: {
                                            hours: 42,
                                            minutes: 42,
                                            nanos: 42,
                                            seconds: 42,
                                        },
                                    },
                                },
                                replaceDictionaryConfig: {
                                    wordList: {
                                        words: [
                                            "Test string"
                                        ],
                                    },
                                },
                                replaceWithInfoTypeConfig: {
                                },
                                timePartConfig: {
                                    partToExtract: "Test string",
                                },
                            },
                        }
                    ],
                    recordSuppressions: [
                        {
                            condition: {
                                expressions: {
                                    conditions: {
                                        conditions: [
                                            {
                                                field: {
                                                    name: "Test string",
                                                },
                                                operator: "Test string",
                                                value: {
                                                    booleanValue: true,
                                                    dateValue: {
                                                        day: 42,
                                                        month: 42,
                                                        year: 42,
                                                    },
                                                    dayOfWeekValue: "Test string",
                                                    floatValue: 42,
                                                    integerValue: "Test string",
                                                    stringValue: "Test string",
                                                    timestampValue: "Test string",
                                                    timeValue: {
                                                        hours: 42,
                                                        minutes: 42,
                                                        nanos: 42,
                                                        seconds: 42,
                                                    },
                                                },
                                            }
                                        ],
                                    },
                                    logicalOperator: "Test string",
                                },
                            },
                        }
                    ],
                },
                transformationErrorHandling: {
                    leaveUntransformed: {
                    },
                    throwError: {
                    },
                },
            },
            reidentifyTemplateName: "Test string",
        });
        /**
         * Creates a DeidentifyTemplate for reusing frequently used configuration for de-identifying content, images, and storage. See https://cloud.google.com/dlp/docs/creating-templates-deid to
         * learn more.
         */
        await gapi.client.dlp.projects.deidentifyTemplates.create({
            parent: "Test string",
        }, {
            deidentifyTemplate: {
                createTime: "Test string",
                deidentifyConfig: {
                    imageTransformations: {
                        transforms: [
                            {
                                allInfoTypes: {
                                },
                                allText: {
                                },
                                redactionColor: {
                                    blue: 42,
                                    green: 42,
                                    red: 42,
                                },
                                selectedInfoTypes: {
                                    infoTypes: [
                                        {
                                            name: "Test string",
                                            version: "Test string",
                                        }
                                    ],
                                },
                            }
                        ],
                    },
                    infoTypeTransformations: {
                        transformations: [
                            {
                                infoTypes: [
                                    {
                                        name: "Test string",
                                        version: "Test string",
                                    }
                                ],
                                primitiveTransformation: {
                                    bucketingConfig: {
                                        buckets: [
                                            {
                                                max: {
                                                    booleanValue: true,
                                                    dateValue: {
                                                        day: 42,
                                                        month: 42,
                                                        year: 42,
                                                    },
                                                    dayOfWeekValue: "Test string",
                                                    floatValue: 42,
                                                    integerValue: "Test string",
                                                    stringValue: "Test string",
                                                    timestampValue: "Test string",
                                                    timeValue: {
                                                        hours: 42,
                                                        minutes: 42,
                                                        nanos: 42,
                                                        seconds: 42,
                                                    },
                                                },
                                                min: {
                                                    booleanValue: true,
                                                    dateValue: {
                                                        day: 42,
                                                        month: 42,
                                                        year: 42,
                                                    },
                                                    dayOfWeekValue: "Test string",
                                                    floatValue: 42,
                                                    integerValue: "Test string",
                                                    stringValue: "Test string",
                                                    timestampValue: "Test string",
                                                    timeValue: {
                                                        hours: 42,
                                                        minutes: 42,
                                                        nanos: 42,
                                                        seconds: 42,
                                                    },
                                                },
                                                replacementValue: {
                                                    booleanValue: true,
                                                    dateValue: {
                                                        day: 42,
                                                        month: 42,
                                                        year: 42,
                                                    },
                                                    dayOfWeekValue: "Test string",
                                                    floatValue: 42,
                                                    integerValue: "Test string",
                                                    stringValue: "Test string",
                                                    timestampValue: "Test string",
                                                    timeValue: {
                                                        hours: 42,
                                                        minutes: 42,
                                                        nanos: 42,
                                                        seconds: 42,
                                                    },
                                                },
                                            }
                                        ],
                                    },
                                    characterMaskConfig: {
                                        charactersToIgnore: [
                                            {
                                                charactersToSkip: "Test string",
                                                commonCharactersToIgnore: "Test string",
                                            }
                                        ],
                                        maskingCharacter: "Test string",
                                        numberToMask: 42,
                                        reverseOrder: true,
                                    },
                                    cryptoDeterministicConfig: {
                                        context: {
                                            name: "Test string",
                                        },
                                        cryptoKey: {
                                            kmsWrapped: {
                                                cryptoKeyName: "Test string",
                                                wrappedKey: "Test string",
                                            },
                                            transient: {
                                                name: "Test string",
                                            },
                                            unwrapped: {
                                                key: "Test string",
                                            },
                                        },
                                        surrogateInfoType: {
                                            name: "Test string",
                                            version: "Test string",
                                        },
                                    },
                                    cryptoHashConfig: {
                                        cryptoKey: {
                                            kmsWrapped: {
                                                cryptoKeyName: "Test string",
                                                wrappedKey: "Test string",
                                            },
                                            transient: {
                                                name: "Test string",
                                            },
                                            unwrapped: {
                                                key: "Test string",
                                            },
                                        },
                                    },
                                    cryptoReplaceFfxFpeConfig: {
                                        commonAlphabet: "Test string",
                                        context: {
                                            name: "Test string",
                                        },
                                        cryptoKey: {
                                            kmsWrapped: {
                                                cryptoKeyName: "Test string",
                                                wrappedKey: "Test string",
                                            },
                                            transient: {
                                                name: "Test string",
                                            },
                                            unwrapped: {
                                                key: "Test string",
                                            },
                                        },
                                        customAlphabet: "Test string",
                                        radix: 42,
                                        surrogateInfoType: {
                                            name: "Test string",
                                            version: "Test string",
                                        },
                                    },
                                    dateShiftConfig: {
                                        context: {
                                            name: "Test string",
                                        },
                                        cryptoKey: {
                                            kmsWrapped: {
                                                cryptoKeyName: "Test string",
                                                wrappedKey: "Test string",
                                            },
                                            transient: {
                                                name: "Test string",
                                            },
                                            unwrapped: {
                                                key: "Test string",
                                            },
                                        },
                                        lowerBoundDays: 42,
                                        upperBoundDays: 42,
                                    },
                                    fixedSizeBucketingConfig: {
                                        bucketSize: 42,
                                        lowerBound: {
                                            booleanValue: true,
                                            dateValue: {
                                                day: 42,
                                                month: 42,
                                                year: 42,
                                            },
                                            dayOfWeekValue: "Test string",
                                            floatValue: 42,
                                            integerValue: "Test string",
                                            stringValue: "Test string",
                                            timestampValue: "Test string",
                                            timeValue: {
                                                hours: 42,
                                                minutes: 42,
                                                nanos: 42,
                                                seconds: 42,
                                            },
                                        },
                                        upperBound: {
                                            booleanValue: true,
                                            dateValue: {
                                                day: 42,
                                                month: 42,
                                                year: 42,
                                            },
                                            dayOfWeekValue: "Test string",
                                            floatValue: 42,
                                            integerValue: "Test string",
                                            stringValue: "Test string",
                                            timestampValue: "Test string",
                                            timeValue: {
                                                hours: 42,
                                                minutes: 42,
                                                nanos: 42,
                                                seconds: 42,
                                            },
                                        },
                                    },
                                    redactConfig: {
                                    },
                                    replaceConfig: {
                                        newValue: {
                                            booleanValue: true,
                                            dateValue: {
                                                day: 42,
                                                month: 42,
                                                year: 42,
                                            },
                                            dayOfWeekValue: "Test string",
                                            floatValue: 42,
                                            integerValue: "Test string",
                                            stringValue: "Test string",
                                            timestampValue: "Test string",
                                            timeValue: {
                                                hours: 42,
                                                minutes: 42,
                                                nanos: 42,
                                                seconds: 42,
                                            },
                                        },
                                    },
                                    replaceDictionaryConfig: {
                                        wordList: {
                                            words: [
                                                "Test string"
                                            ],
                                        },
                                    },
                                    replaceWithInfoTypeConfig: {
                                    },
                                    timePartConfig: {
                                        partToExtract: "Test string",
                                    },
                                },
                            }
                        ],
                    },
                    recordTransformations: {
                        fieldTransformations: [
                            {
                                condition: {
                                    expressions: {
                                        conditions: {
                                            conditions: [
                                                {
                                                    field: {
                                                        name: "Test string",
                                                    },
                                                    operator: "Test string",
                                                    value: {
                                                        booleanValue: true,
                                                        dateValue: {
                                                            day: 42,
                                                            month: 42,
                                                            year: 42,
                                                        },
                                                        dayOfWeekValue: "Test string",
                                                        floatValue: 42,
                                                        integerValue: "Test string",
                                                        stringValue: "Test string",
                                                        timestampValue: "Test string",
                                                        timeValue: {
                                                            hours: 42,
                                                            minutes: 42,
                                                            nanos: 42,
                                                            seconds: 42,
                                                        },
                                                    },
                                                }
                                            ],
                                        },
                                        logicalOperator: "Test string",
                                    },
                                },
                                fields: [
                                    {
                                        name: "Test string",
                                    }
                                ],
                                infoTypeTransformations: {
                                    transformations: [
                                        {
                                            infoTypes: [
                                                {
                                                    name: "Test string",
                                                    version: "Test string",
                                                }
                                            ],
                                            primitiveTransformation: {
                                                bucketingConfig: {
                                                    buckets: [
                                                        {
                                                            max: {
                                                                booleanValue: true,
                                                                dateValue: {
                                                                    day: 42,
                                                                    month: 42,
                                                                    year: 42,
                                                                },
                                                                dayOfWeekValue: "Test string",
                                                                floatValue: 42,
                                                                integerValue: "Test string",
                                                                stringValue: "Test string",
                                                                timestampValue: "Test string",
                                                                timeValue: {
                                                                    hours: 42,
                                                                    minutes: 42,
                                                                    nanos: 42,
                                                                    seconds: 42,
                                                                },
                                                            },
                                                            min: {
                                                                booleanValue: true,
                                                                dateValue: {
                                                                    day: 42,
                                                                    month: 42,
                                                                    year: 42,
                                                                },
                                                                dayOfWeekValue: "Test string",
                                                                floatValue: 42,
                                                                integerValue: "Test string",
                                                                stringValue: "Test string",
                                                                timestampValue: "Test string",
                                                                timeValue: {
                                                                    hours: 42,
                                                                    minutes: 42,
                                                                    nanos: 42,
                                                                    seconds: 42,
                                                                },
                                                            },
                                                            replacementValue: {
                                                                booleanValue: true,
                                                                dateValue: {
                                                                    day: 42,
                                                                    month: 42,
                                                                    year: 42,
                                                                },
                                                                dayOfWeekValue: "Test string",
                                                                floatValue: 42,
                                                                integerValue: "Test string",
                                                                stringValue: "Test string",
                                                                timestampValue: "Test string",
                                                                timeValue: {
                                                                    hours: 42,
                                                                    minutes: 42,
                                                                    nanos: 42,
                                                                    seconds: 42,
                                                                },
                                                            },
                                                        }
                                                    ],
                                                },
                                                characterMaskConfig: {
                                                    charactersToIgnore: [
                                                        {
                                                            charactersToSkip: "Test string",
                                                            commonCharactersToIgnore: "Test string",
                                                        }
                                                    ],
                                                    maskingCharacter: "Test string",
                                                    numberToMask: 42,
                                                    reverseOrder: true,
                                                },
                                                cryptoDeterministicConfig: {
                                                    context: {
                                                        name: "Test string",
                                                    },
                                                    cryptoKey: {
                                                        kmsWrapped: {
                                                            cryptoKeyName: "Test string",
                                                            wrappedKey: "Test string",
                                                        },
                                                        transient: {
                                                            name: "Test string",
                                                        },
                                                        unwrapped: {
                                                            key: "Test string",
                                                        },
                                                    },
                                                    surrogateInfoType: {
                                                        name: "Test string",
                                                        version: "Test string",
                                                    },
                                                },
                                                cryptoHashConfig: {
                                                    cryptoKey: {
                                                        kmsWrapped: {
                                                            cryptoKeyName: "Test string",
                                                            wrappedKey: "Test string",
                                                        },
                                                        transient: {
                                                            name: "Test string",
                                                        },
                                                        unwrapped: {
                                                            key: "Test string",
                                                        },
                                                    },
                                                },
                                                cryptoReplaceFfxFpeConfig: {
                                                    commonAlphabet: "Test string",
                                                    context: {
                                                        name: "Test string",
                                                    },
                                                    cryptoKey: {
                                                        kmsWrapped: {
                                                            cryptoKeyName: "Test string",
                                                            wrappedKey: "Test string",
                                                        },
                                                        transient: {
                                                            name: "Test string",
                                                        },
                                                        unwrapped: {
                                                            key: "Test string",
                                                        },
                                                    },
                                                    customAlphabet: "Test string",
                                                    radix: 42,
                                                    surrogateInfoType: {
                                                        name: "Test string",
                                                        version: "Test string",
                                                    },
                                                },
                                                dateShiftConfig: {
                                                    context: {
                                                        name: "Test string",
                                                    },
                                                    cryptoKey: {
                                                        kmsWrapped: {
                                                            cryptoKeyName: "Test string",
                                                            wrappedKey: "Test string",
                                                        },
                                                        transient: {
                                                            name: "Test string",
                                                        },
                                                        unwrapped: {
                                                            key: "Test string",
                                                        },
                                                    },
                                                    lowerBoundDays: 42,
                                                    upperBoundDays: 42,
                                                },
                                                fixedSizeBucketingConfig: {
                                                    bucketSize: 42,
                                                    lowerBound: {
                                                        booleanValue: true,
                                                        dateValue: {
                                                            day: 42,
                                                            month: 42,
                                                            year: 42,
                                                        },
                                                        dayOfWeekValue: "Test string",
                                                        floatValue: 42,
                                                        integerValue: "Test string",
                                                        stringValue: "Test string",
                                                        timestampValue: "Test string",
                                                        timeValue: {
                                                            hours: 42,
                                                            minutes: 42,
                                                            nanos: 42,
                                                            seconds: 42,
                                                        },
                                                    },
                                                    upperBound: {
                                                        booleanValue: true,
                                                        dateValue: {
                                                            day: 42,
                                                            month: 42,
                                                            year: 42,
                                                        },
                                                        dayOfWeekValue: "Test string",
                                                        floatValue: 42,
                                                        integerValue: "Test string",
                                                        stringValue: "Test string",
                                                        timestampValue: "Test string",
                                                        timeValue: {
                                                            hours: 42,
                                                            minutes: 42,
                                                            nanos: 42,
                                                            seconds: 42,
                                                        },
                                                    },
                                                },
                                                redactConfig: {
                                                },
                                                replaceConfig: {
                                                    newValue: {
                                                        booleanValue: true,
                                                        dateValue: {
                                                            day: 42,
                                                            month: 42,
                                                            year: 42,
                                                        },
                                                        dayOfWeekValue: "Test string",
                                                        floatValue: 42,
                                                        integerValue: "Test string",
                                                        stringValue: "Test string",
                                                        timestampValue: "Test string",
                                                        timeValue: {
                                                            hours: 42,
                                                            minutes: 42,
                                                            nanos: 42,
                                                            seconds: 42,
                                                        },
                                                    },
                                                },
                                                replaceDictionaryConfig: {
                                                    wordList: {
                                                        words: [
                                                            "Test string"
                                                        ],
                                                    },
                                                },
                                                replaceWithInfoTypeConfig: {
                                                },
                                                timePartConfig: {
                                                    partToExtract: "Test string",
                                                },
                                            },
                                        }
                                    ],
                                },
                                primitiveTransformation: {
                                    bucketingConfig: {
                                        buckets: [
                                            {
                                                max: {
                                                    booleanValue: true,
                                                    dateValue: {
                                                        day: 42,
                                                        month: 42,
                                                        year: 42,
                                                    },
                                                    dayOfWeekValue: "Test string",
                                                    floatValue: 42,
                                                    integerValue: "Test string",
                                                    stringValue: "Test string",
                                                    timestampValue: "Test string",
                                                    timeValue: {
                                                        hours: 42,
                                                        minutes: 42,
                                                        nanos: 42,
                                                        seconds: 42,
                                                    },
                                                },
                                                min: {
                                                    booleanValue: true,
                                                    dateValue: {
                                                        day: 42,
                                                        month: 42,
                                                        year: 42,
                                                    },
                                                    dayOfWeekValue: "Test string",
                                                    floatValue: 42,
                                                    integerValue: "Test string",
                                                    stringValue: "Test string",
                                                    timestampValue: "Test string",
                                                    timeValue: {
                                                        hours: 42,
                                                        minutes: 42,
                                                        nanos: 42,
                                                        seconds: 42,
                                                    },
                                                },
                                                replacementValue: {
                                                    booleanValue: true,
                                                    dateValue: {
                                                        day: 42,
                                                        month: 42,
                                                        year: 42,
                                                    },
                                                    dayOfWeekValue: "Test string",
                                                    floatValue: 42,
                                                    integerValue: "Test string",
                                                    stringValue: "Test string",
                                                    timestampValue: "Test string",
                                                    timeValue: {
                                                        hours: 42,
                                                        minutes: 42,
                                                        nanos: 42,
                                                        seconds: 42,
                                                    },
                                                },
                                            }
                                        ],
                                    },
                                    characterMaskConfig: {
                                        charactersToIgnore: [
                                            {
                                                charactersToSkip: "Test string",
                                                commonCharactersToIgnore: "Test string",
                                            }
                                        ],
                                        maskingCharacter: "Test string",
                                        numberToMask: 42,
                                        reverseOrder: true,
                                    },
                                    cryptoDeterministicConfig: {
                                        context: {
                                            name: "Test string",
                                        },
                                        cryptoKey: {
                                            kmsWrapped: {
                                                cryptoKeyName: "Test string",
                                                wrappedKey: "Test string",
                                            },
                                            transient: {
                                                name: "Test string",
                                            },
                                            unwrapped: {
                                                key: "Test string",
                                            },
                                        },
                                        surrogateInfoType: {
                                            name: "Test string",
                                            version: "Test string",
                                        },
                                    },
                                    cryptoHashConfig: {
                                        cryptoKey: {
                                            kmsWrapped: {
                                                cryptoKeyName: "Test string",
                                                wrappedKey: "Test string",
                                            },
                                            transient: {
                                                name: "Test string",
                                            },
                                            unwrapped: {
                                                key: "Test string",
                                            },
                                        },
                                    },
                                    cryptoReplaceFfxFpeConfig: {
                                        commonAlphabet: "Test string",
                                        context: {
                                            name: "Test string",
                                        },
                                        cryptoKey: {
                                            kmsWrapped: {
                                                cryptoKeyName: "Test string",
                                                wrappedKey: "Test string",
                                            },
                                            transient: {
                                                name: "Test string",
                                            },
                                            unwrapped: {
                                                key: "Test string",
                                            },
                                        },
                                        customAlphabet: "Test string",
                                        radix: 42,
                                        surrogateInfoType: {
                                            name: "Test string",
                                            version: "Test string",
                                        },
                                    },
                                    dateShiftConfig: {
                                        context: {
                                            name: "Test string",
                                        },
                                        cryptoKey: {
                                            kmsWrapped: {
                                                cryptoKeyName: "Test string",
                                                wrappedKey: "Test string",
                                            },
                                            transient: {
                                                name: "Test string",
                                            },
                                            unwrapped: {
                                                key: "Test string",
                                            },
                                        },
                                        lowerBoundDays: 42,
                                        upperBoundDays: 42,
                                    },
                                    fixedSizeBucketingConfig: {
                                        bucketSize: 42,
                                        lowerBound: {
                                            booleanValue: true,
                                            dateValue: {
                                                day: 42,
                                                month: 42,
                                                year: 42,
                                            },
                                            dayOfWeekValue: "Test string",
                                            floatValue: 42,
                                            integerValue: "Test string",
                                            stringValue: "Test string",
                                            timestampValue: "Test string",
                                            timeValue: {
                                                hours: 42,
                                                minutes: 42,
                                                nanos: 42,
                                                seconds: 42,
                                            },
                                        },
                                        upperBound: {
                                            booleanValue: true,
                                            dateValue: {
                                                day: 42,
                                                month: 42,
                                                year: 42,
                                            },
                                            dayOfWeekValue: "Test string",
                                            floatValue: 42,
                                            integerValue: "Test string",
                                            stringValue: "Test string",
                                            timestampValue: "Test string",
                                            timeValue: {
                                                hours: 42,
                                                minutes: 42,
                                                nanos: 42,
                                                seconds: 42,
                                            },
                                        },
                                    },
                                    redactConfig: {
                                    },
                                    replaceConfig: {
                                        newValue: {
                                            booleanValue: true,
                                            dateValue: {
                                                day: 42,
                                                month: 42,
                                                year: 42,
                                            },
                                            dayOfWeekValue: "Test string",
                                            floatValue: 42,
                                            integerValue: "Test string",
                                            stringValue: "Test string",
                                            timestampValue: "Test string",
                                            timeValue: {
                                                hours: 42,
                                                minutes: 42,
                                                nanos: 42,
                                                seconds: 42,
                                            },
                                        },
                                    },
                                    replaceDictionaryConfig: {
                                        wordList: {
                                            words: [
                                                "Test string"
                                            ],
                                        },
                                    },
                                    replaceWithInfoTypeConfig: {
                                    },
                                    timePartConfig: {
                                        partToExtract: "Test string",
                                    },
                                },
                            }
                        ],
                        recordSuppressions: [
                            {
                                condition: {
                                    expressions: {
                                        conditions: {
                                            conditions: [
                                                {
                                                    field: {
                                                        name: "Test string",
                                                    },
                                                    operator: "Test string",
                                                    value: {
                                                        booleanValue: true,
                                                        dateValue: {
                                                            day: 42,
                                                            month: 42,
                                                            year: 42,
                                                        },
                                                        dayOfWeekValue: "Test string",
                                                        floatValue: 42,
                                                        integerValue: "Test string",
                                                        stringValue: "Test string",
                                                        timestampValue: "Test string",
                                                        timeValue: {
                                                            hours: 42,
                                                            minutes: 42,
                                                            nanos: 42,
                                                            seconds: 42,
                                                        },
                                                    },
                                                }
                                            ],
                                        },
                                        logicalOperator: "Test string",
                                    },
                                },
                            }
                        ],
                    },
                    transformationErrorHandling: {
                        leaveUntransformed: {
                        },
                        throwError: {
                        },
                    },
                },
                description: "Test string",
                displayName: "Test string",
                name: "Test string",
                updateTime: "Test string",
            },
            locationId: "Test string",
            templateId: "Test string",
        });
        /** Deletes a DeidentifyTemplate. See https://cloud.google.com/dlp/docs/creating-templates-deid to learn more. */
        await gapi.client.dlp.projects.deidentifyTemplates.delete({
            name: "Test string",
        });
        /** Gets a DeidentifyTemplate. See https://cloud.google.com/dlp/docs/creating-templates-deid to learn more. */
        await gapi.client.dlp.projects.deidentifyTemplates.get({
            name: "Test string",
        });
        /** Lists DeidentifyTemplates. See https://cloud.google.com/dlp/docs/creating-templates-deid to learn more. */
        await gapi.client.dlp.projects.deidentifyTemplates.list({
            locationId: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the DeidentifyTemplate. See https://cloud.google.com/dlp/docs/creating-templates-deid to learn more. */
        await gapi.client.dlp.projects.deidentifyTemplates.patch({
            name: "Test string",
        }, {
            deidentifyTemplate: {
                createTime: "Test string",
                deidentifyConfig: {
                    imageTransformations: {
                        transforms: [
                            {
                                allInfoTypes: {
                                },
                                allText: {
                                },
                                redactionColor: {
                                    blue: 42,
                                    green: 42,
                                    red: 42,
                                },
                                selectedInfoTypes: {
                                    infoTypes: [
                                        {
                                            name: "Test string",
                                            version: "Test string",
                                        }
                                    ],
                                },
                            }
                        ],
                    },
                    infoTypeTransformations: {
                        transformations: [
                            {
                                infoTypes: [
                                    {
                                        name: "Test string",
                                        version: "Test string",
                                    }
                                ],
                                primitiveTransformation: {
                                    bucketingConfig: {
                                        buckets: [
                                            {
                                                max: {
                                                    booleanValue: true,
                                                    dateValue: {
                                                        day: 42,
                                                        month: 42,
                                                        year: 42,
                                                    },
                                                    dayOfWeekValue: "Test string",
                                                    floatValue: 42,
                                                    integerValue: "Test string",
                                                    stringValue: "Test string",
                                                    timestampValue: "Test string",
                                                    timeValue: {
                                                        hours: 42,
                                                        minutes: 42,
                                                        nanos: 42,
                                                        seconds: 42,
                                                    },
                                                },
                                                min: {
                                                    booleanValue: true,
                                                    dateValue: {
                                                        day: 42,
                                                        month: 42,
                                                        year: 42,
                                                    },
                                                    dayOfWeekValue: "Test string",
                                                    floatValue: 42,
                                                    integerValue: "Test string",
                                                    stringValue: "Test string",
                                                    timestampValue: "Test string",
                                                    timeValue: {
                                                        hours: 42,
                                                        minutes: 42,
                                                        nanos: 42,
                                                        seconds: 42,
                                                    },
                                                },
                                                replacementValue: {
                                                    booleanValue: true,
                                                    dateValue: {
                                                        day: 42,
                                                        month: 42,
                                                        year: 42,
                                                    },
                                                    dayOfWeekValue: "Test string",
                                                    floatValue: 42,
                                                    integerValue: "Test string",
                                                    stringValue: "Test string",
                                                    timestampValue: "Test string",
                                                    timeValue: {
                                                        hours: 42,
                                                        minutes: 42,
                                                        nanos: 42,
                                                        seconds: 42,
                                                    },
                                                },
                                            }
                                        ],
                                    },
                                    characterMaskConfig: {
                                        charactersToIgnore: [
                                            {
                                                charactersToSkip: "Test string",
                                                commonCharactersToIgnore: "Test string",
                                            }
                                        ],
                                        maskingCharacter: "Test string",
                                        numberToMask: 42,
                                        reverseOrder: true,
                                    },
                                    cryptoDeterministicConfig: {
                                        context: {
                                            name: "Test string",
                                        },
                                        cryptoKey: {
                                            kmsWrapped: {
                                                cryptoKeyName: "Test string",
                                                wrappedKey: "Test string",
                                            },
                                            transient: {
                                                name: "Test string",
                                            },
                                            unwrapped: {
                                                key: "Test string",
                                            },
                                        },
                                        surrogateInfoType: {
                                            name: "Test string",
                                            version: "Test string",
                                        },
                                    },
                                    cryptoHashConfig: {
                                        cryptoKey: {
                                            kmsWrapped: {
                                                cryptoKeyName: "Test string",
                                                wrappedKey: "Test string",
                                            },
                                            transient: {
                                                name: "Test string",
                                            },
                                            unwrapped: {
                                                key: "Test string",
                                            },
                                        },
                                    },
                                    cryptoReplaceFfxFpeConfig: {
                                        commonAlphabet: "Test string",
                                        context: {
                                            name: "Test string",
                                        },
                                        cryptoKey: {
                                            kmsWrapped: {
                                                cryptoKeyName: "Test string",
                                                wrappedKey: "Test string",
                                            },
                                            transient: {
                                                name: "Test string",
                                            },
                                            unwrapped: {
                                                key: "Test string",
                                            },
                                        },
                                        customAlphabet: "Test string",
                                        radix: 42,
                                        surrogateInfoType: {
                                            name: "Test string",
                                            version: "Test string",
                                        },
                                    },
                                    dateShiftConfig: {
                                        context: {
                                            name: "Test string",
                                        },
                                        cryptoKey: {
                                            kmsWrapped: {
                                                cryptoKeyName: "Test string",
                                                wrappedKey: "Test string",
                                            },
                                            transient: {
                                                name: "Test string",
                                            },
                                            unwrapped: {
                                                key: "Test string",
                                            },
                                        },
                                        lowerBoundDays: 42,
                                        upperBoundDays: 42,
                                    },
                                    fixedSizeBucketingConfig: {
                                        bucketSize: 42,
                                        lowerBound: {
                                            booleanValue: true,
                                            dateValue: {
                                                day: 42,
                                                month: 42,
                                                year: 42,
                                            },
                                            dayOfWeekValue: "Test string",
                                            floatValue: 42,
                                            integerValue: "Test string",
                                            stringValue: "Test string",
                                            timestampValue: "Test string",
                                            timeValue: {
                                                hours: 42,
                                                minutes: 42,
                                                nanos: 42,
                                                seconds: 42,
                                            },
                                        },
                                        upperBound: {
                                            booleanValue: true,
                                            dateValue: {
                                                day: 42,
                                                month: 42,
                                                year: 42,
                                            },
                                            dayOfWeekValue: "Test string",
                                            floatValue: 42,
                                            integerValue: "Test string",
                                            stringValue: "Test string",
                                            timestampValue: "Test string",
                                            timeValue: {
                                                hours: 42,
                                                minutes: 42,
                                                nanos: 42,
                                                seconds: 42,
                                            },
                                        },
                                    },
                                    redactConfig: {
                                    },
                                    replaceConfig: {
                                        newValue: {
                                            booleanValue: true,
                                            dateValue: {
                                                day: 42,
                                                month: 42,
                                                year: 42,
                                            },
                                            dayOfWeekValue: "Test string",
                                            floatValue: 42,
                                            integerValue: "Test string",
                                            stringValue: "Test string",
                                            timestampValue: "Test string",
                                            timeValue: {
                                                hours: 42,
                                                minutes: 42,
                                                nanos: 42,
                                                seconds: 42,
                                            },
                                        },
                                    },
                                    replaceDictionaryConfig: {
                                        wordList: {
                                            words: [
                                                "Test string"
                                            ],
                                        },
                                    },
                                    replaceWithInfoTypeConfig: {
                                    },
                                    timePartConfig: {
                                        partToExtract: "Test string",
                                    },
                                },
                            }
                        ],
                    },
                    recordTransformations: {
                        fieldTransformations: [
                            {
                                condition: {
                                    expressions: {
                                        conditions: {
                                            conditions: [
                                                {
                                                    field: {
                                                        name: "Test string",
                                                    },
                                                    operator: "Test string",
                                                    value: {
                                                        booleanValue: true,
                                                        dateValue: {
                                                            day: 42,
                                                            month: 42,
                                                            year: 42,
                                                        },
                                                        dayOfWeekValue: "Test string",
                                                        floatValue: 42,
                                                        integerValue: "Test string",
                                                        stringValue: "Test string",
                                                        timestampValue: "Test string",
                                                        timeValue: {
                                                            hours: 42,
                                                            minutes: 42,
                                                            nanos: 42,
                                                            seconds: 42,
                                                        },
                                                    },
                                                }
                                            ],
                                        },
                                        logicalOperator: "Test string",
                                    },
                                },
                                fields: [
                                    {
                                        name: "Test string",
                                    }
                                ],
                                infoTypeTransformations: {
                                    transformations: [
                                        {
                                            infoTypes: [
                                                {
                                                    name: "Test string",
                                                    version: "Test string",
                                                }
                                            ],
                                            primitiveTransformation: {
                                                bucketingConfig: {
                                                    buckets: [
                                                        {
                                                            max: {
                                                                booleanValue: true,
                                                                dateValue: {
                                                                    day: 42,
                                                                    month: 42,
                                                                    year: 42,
                                                                },
                                                                dayOfWeekValue: "Test string",
                                                                floatValue: 42,
                                                                integerValue: "Test string",
                                                                stringValue: "Test string",
                                                                timestampValue: "Test string",
                                                                timeValue: {
                                                                    hours: 42,
                                                                    minutes: 42,
                                                                    nanos: 42,
                                                                    seconds: 42,
                                                                },
                                                            },
                                                            min: {
                                                                booleanValue: true,
                                                                dateValue: {
                                                                    day: 42,
                                                                    month: 42,
                                                                    year: 42,
                                                                },
                                                                dayOfWeekValue: "Test string",
                                                                floatValue: 42,
                                                                integerValue: "Test string",
                                                                stringValue: "Test string",
                                                                timestampValue: "Test string",
                                                                timeValue: {
                                                                    hours: 42,
                                                                    minutes: 42,
                                                                    nanos: 42,
                                                                    seconds: 42,
                                                                },
                                                            },
                                                            replacementValue: {
                                                                booleanValue: true,
                                                                dateValue: {
                                                                    day: 42,
                                                                    month: 42,
                                                                    year: 42,
                                                                },
                                                                dayOfWeekValue: "Test string",
                                                                floatValue: 42,
                                                                integerValue: "Test string",
                                                                stringValue: "Test string",
                                                                timestampValue: "Test string",
                                                                timeValue: {
                                                                    hours: 42,
                                                                    minutes: 42,
                                                                    nanos: 42,
                                                                    seconds: 42,
                                                                },
                                                            },
                                                        }
                                                    ],
                                                },
                                                characterMaskConfig: {
                                                    charactersToIgnore: [
                                                        {
                                                            charactersToSkip: "Test string",
                                                            commonCharactersToIgnore: "Test string",
                                                        }
                                                    ],
                                                    maskingCharacter: "Test string",
                                                    numberToMask: 42,
                                                    reverseOrder: true,
                                                },
                                                cryptoDeterministicConfig: {
                                                    context: {
                                                        name: "Test string",
                                                    },
                                                    cryptoKey: {
                                                        kmsWrapped: {
                                                            cryptoKeyName: "Test string",
                                                            wrappedKey: "Test string",
                                                        },
                                                        transient: {
                                                            name: "Test string",
                                                        },
                                                        unwrapped: {
                                                            key: "Test string",
                                                        },
                                                    },
                                                    surrogateInfoType: {
                                                        name: "Test string",
                                                        version: "Test string",
                                                    },
                                                },
                                                cryptoHashConfig: {
                                                    cryptoKey: {
                                                        kmsWrapped: {
                                                            cryptoKeyName: "Test string",
                                                            wrappedKey: "Test string",
                                                        },
                                                        transient: {
                                                            name: "Test string",
                                                        },
                                                        unwrapped: {
                                                            key: "Test string",
                                                        },
                                                    },
                                                },
                                                cryptoReplaceFfxFpeConfig: {
                                                    commonAlphabet: "Test string",
                                                    context: {
                                                        name: "Test string",
                                                    },
                                                    cryptoKey: {
                                                        kmsWrapped: {
                                                            cryptoKeyName: "Test string",
                                                            wrappedKey: "Test string",
                                                        },
                                                        transient: {
                                                            name: "Test string",
                                                        },
                                                        unwrapped: {
                                                            key: "Test string",
                                                        },
                                                    },
                                                    customAlphabet: "Test string",
                                                    radix: 42,
                                                    surrogateInfoType: {
                                                        name: "Test string",
                                                        version: "Test string",
                                                    },
                                                },
                                                dateShiftConfig: {
                                                    context: {
                                                        name: "Test string",
                                                    },
                                                    cryptoKey: {
                                                        kmsWrapped: {
                                                            cryptoKeyName: "Test string",
                                                            wrappedKey: "Test string",
                                                        },
                                                        transient: {
                                                            name: "Test string",
                                                        },
                                                        unwrapped: {
                                                            key: "Test string",
                                                        },
                                                    },
                                                    lowerBoundDays: 42,
                                                    upperBoundDays: 42,
                                                },
                                                fixedSizeBucketingConfig: {
                                                    bucketSize: 42,
                                                    lowerBound: {
                                                        booleanValue: true,
                                                        dateValue: {
                                                            day: 42,
                                                            month: 42,
                                                            year: 42,
                                                        },
                                                        dayOfWeekValue: "Test string",
                                                        floatValue: 42,
                                                        integerValue: "Test string",
                                                        stringValue: "Test string",
                                                        timestampValue: "Test string",
                                                        timeValue: {
                                                            hours: 42,
                                                            minutes: 42,
                                                            nanos: 42,
                                                            seconds: 42,
                                                        },
                                                    },
                                                    upperBound: {
                                                        booleanValue: true,
                                                        dateValue: {
                                                            day: 42,
                                                            month: 42,
                                                            year: 42,
                                                        },
                                                        dayOfWeekValue: "Test string",
                                                        floatValue: 42,
                                                        integerValue: "Test string",
                                                        stringValue: "Test string",
                                                        timestampValue: "Test string",
                                                        timeValue: {
                                                            hours: 42,
                                                            minutes: 42,
                                                            nanos: 42,
                                                            seconds: 42,
                                                        },
                                                    },
                                                },
                                                redactConfig: {
                                                },
                                                replaceConfig: {
                                                    newValue: {
                                                        booleanValue: true,
                                                        dateValue: {
                                                            day: 42,
                                                            month: 42,
                                                            year: 42,
                                                        },
                                                        dayOfWeekValue: "Test string",
                                                        floatValue: 42,
                                                        integerValue: "Test string",
                                                        stringValue: "Test string",
                                                        timestampValue: "Test string",
                                                        timeValue: {
                                                            hours: 42,
                                                            minutes: 42,
                                                            nanos: 42,
                                                            seconds: 42,
                                                        },
                                                    },
                                                },
                                                replaceDictionaryConfig: {
                                                    wordList: {
                                                        words: [
                                                            "Test string"
                                                        ],
                                                    },
                                                },
                                                replaceWithInfoTypeConfig: {
                                                },
                                                timePartConfig: {
                                                    partToExtract: "Test string",
                                                },
                                            },
                                        }
                                    ],
                                },
                                primitiveTransformation: {
                                    bucketingConfig: {
                                        buckets: [
                                            {
                                                max: {
                                                    booleanValue: true,
                                                    dateValue: {
                                                        day: 42,
                                                        month: 42,
                                                        year: 42,
                                                    },
                                                    dayOfWeekValue: "Test string",
                                                    floatValue: 42,
                                                    integerValue: "Test string",
                                                    stringValue: "Test string",
                                                    timestampValue: "Test string",
                                                    timeValue: {
                                                        hours: 42,
                                                        minutes: 42,
                                                        nanos: 42,
                                                        seconds: 42,
                                                    },
                                                },
                                                min: {
                                                    booleanValue: true,
                                                    dateValue: {
                                                        day: 42,
                                                        month: 42,
                                                        year: 42,
                                                    },
                                                    dayOfWeekValue: "Test string",
                                                    floatValue: 42,
                                                    integerValue: "Test string",
                                                    stringValue: "Test string",
                                                    timestampValue: "Test string",
                                                    timeValue: {
                                                        hours: 42,
                                                        minutes: 42,
                                                        nanos: 42,
                                                        seconds: 42,
                                                    },
                                                },
                                                replacementValue: {
                                                    booleanValue: true,
                                                    dateValue: {
                                                        day: 42,
                                                        month: 42,
                                                        year: 42,
                                                    },
                                                    dayOfWeekValue: "Test string",
                                                    floatValue: 42,
                                                    integerValue: "Test string",
                                                    stringValue: "Test string",
                                                    timestampValue: "Test string",
                                                    timeValue: {
                                                        hours: 42,
                                                        minutes: 42,
                                                        nanos: 42,
                                                        seconds: 42,
                                                    },
                                                },
                                            }
                                        ],
                                    },
                                    characterMaskConfig: {
                                        charactersToIgnore: [
                                            {
                                                charactersToSkip: "Test string",
                                                commonCharactersToIgnore: "Test string",
                                            }
                                        ],
                                        maskingCharacter: "Test string",
                                        numberToMask: 42,
                                        reverseOrder: true,
                                    },
                                    cryptoDeterministicConfig: {
                                        context: {
                                            name: "Test string",
                                        },
                                        cryptoKey: {
                                            kmsWrapped: {
                                                cryptoKeyName: "Test string",
                                                wrappedKey: "Test string",
                                            },
                                            transient: {
                                                name: "Test string",
                                            },
                                            unwrapped: {
                                                key: "Test string",
                                            },
                                        },
                                        surrogateInfoType: {
                                            name: "Test string",
                                            version: "Test string",
                                        },
                                    },
                                    cryptoHashConfig: {
                                        cryptoKey: {
                                            kmsWrapped: {
                                                cryptoKeyName: "Test string",
                                                wrappedKey: "Test string",
                                            },
                                            transient: {
                                                name: "Test string",
                                            },
                                            unwrapped: {
                                                key: "Test string",
                                            },
                                        },
                                    },
                                    cryptoReplaceFfxFpeConfig: {
                                        commonAlphabet: "Test string",
                                        context: {
                                            name: "Test string",
                                        },
                                        cryptoKey: {
                                            kmsWrapped: {
                                                cryptoKeyName: "Test string",
                                                wrappedKey: "Test string",
                                            },
                                            transient: {
                                                name: "Test string",
                                            },
                                            unwrapped: {
                                                key: "Test string",
                                            },
                                        },
                                        customAlphabet: "Test string",
                                        radix: 42,
                                        surrogateInfoType: {
                                            name: "Test string",
                                            version: "Test string",
                                        },
                                    },
                                    dateShiftConfig: {
                                        context: {
                                            name: "Test string",
                                        },
                                        cryptoKey: {
                                            kmsWrapped: {
                                                cryptoKeyName: "Test string",
                                                wrappedKey: "Test string",
                                            },
                                            transient: {
                                                name: "Test string",
                                            },
                                            unwrapped: {
                                                key: "Test string",
                                            },
                                        },
                                        lowerBoundDays: 42,
                                        upperBoundDays: 42,
                                    },
                                    fixedSizeBucketingConfig: {
                                        bucketSize: 42,
                                        lowerBound: {
                                            booleanValue: true,
                                            dateValue: {
                                                day: 42,
                                                month: 42,
                                                year: 42,
                                            },
                                            dayOfWeekValue: "Test string",
                                            floatValue: 42,
                                            integerValue: "Test string",
                                            stringValue: "Test string",
                                            timestampValue: "Test string",
                                            timeValue: {
                                                hours: 42,
                                                minutes: 42,
                                                nanos: 42,
                                                seconds: 42,
                                            },
                                        },
                                        upperBound: {
                                            booleanValue: true,
                                            dateValue: {
                                                day: 42,
                                                month: 42,
                                                year: 42,
                                            },
                                            dayOfWeekValue: "Test string",
                                            floatValue: 42,
                                            integerValue: "Test string",
                                            stringValue: "Test string",
                                            timestampValue: "Test string",
                                            timeValue: {
                                                hours: 42,
                                                minutes: 42,
                                                nanos: 42,
                                                seconds: 42,
                                            },
                                        },
                                    },
                                    redactConfig: {
                                    },
                                    replaceConfig: {
                                        newValue: {
                                            booleanValue: true,
                                            dateValue: {
                                                day: 42,
                                                month: 42,
                                                year: 42,
                                            },
                                            dayOfWeekValue: "Test string",
                                            floatValue: 42,
                                            integerValue: "Test string",
                                            stringValue: "Test string",
                                            timestampValue: "Test string",
                                            timeValue: {
                                                hours: 42,
                                                minutes: 42,
                                                nanos: 42,
                                                seconds: 42,
                                            },
                                        },
                                    },
                                    replaceDictionaryConfig: {
                                        wordList: {
                                            words: [
                                                "Test string"
                                            ],
                                        },
                                    },
                                    replaceWithInfoTypeConfig: {
                                    },
                                    timePartConfig: {
                                        partToExtract: "Test string",
                                    },
                                },
                            }
                        ],
                        recordSuppressions: [
                            {
                                condition: {
                                    expressions: {
                                        conditions: {
                                            conditions: [
                                                {
                                                    field: {
                                                        name: "Test string",
                                                    },
                                                    operator: "Test string",
                                                    value: {
                                                        booleanValue: true,
                                                        dateValue: {
                                                            day: 42,
                                                            month: 42,
                                                            year: 42,
                                                        },
                                                        dayOfWeekValue: "Test string",
                                                        floatValue: 42,
                                                        integerValue: "Test string",
                                                        stringValue: "Test string",
                                                        timestampValue: "Test string",
                                                        timeValue: {
                                                            hours: 42,
                                                            minutes: 42,
                                                            nanos: 42,
                                                            seconds: 42,
                                                        },
                                                    },
                                                }
                                            ],
                                        },
                                        logicalOperator: "Test string",
                                    },
                                },
                            }
                        ],
                    },
                    transformationErrorHandling: {
                        leaveUntransformed: {
                        },
                        throwError: {
                        },
                    },
                },
                description: "Test string",
                displayName: "Test string",
                name: "Test string",
                updateTime: "Test string",
            },
            updateMask: "Test string",
        });
        /**
         * Starts asynchronous cancellation on a long-running DlpJob. The server makes a best effort to cancel the DlpJob, but success is not guaranteed. See
         * https://cloud.google.com/dlp/docs/inspecting-storage and https://cloud.google.com/dlp/docs/compute-risk-analysis to learn more.
         */
        await gapi.client.dlp.projects.dlpJobs.cancel({
            name: "Test string",
        }, {
        });
        /**
         * Creates a new job to inspect storage or calculate risk metrics. See https://cloud.google.com/dlp/docs/inspecting-storage and https://cloud.google.com/dlp/docs/compute-risk-analysis to
         * learn more. When no InfoTypes or CustomInfoTypes are specified in inspect jobs, the system will automatically choose what detectors to run. By default this may be all types, but may
         * change over time as detectors are updated.
         */
        await gapi.client.dlp.projects.dlpJobs.create({
            parent: "Test string",
        }, {
            inspectJob: {
                actions: [
                    {
                        deidentify: {
                            cloudStorageOutput: "Test string",
                            fileTypesToTransform: [
                                "Test string"
                            ],
                            transformationConfig: {
                                deidentifyTemplate: "Test string",
                                imageRedactTemplate: "Test string",
                                structuredDeidentifyTemplate: "Test string",
                            },
                            transformationDetailsStorageConfig: {
                                table: {
                                    datasetId: "Test string",
                                    projectId: "Test string",
                                    tableId: "Test string",
                                },
                            },
                        },
                        jobNotificationEmails: {
                        },
                        publishFindingsToCloudDataCatalog: {
                        },
                        publishSummaryToCscc: {
                        },
                        publishToStackdriver: {
                        },
                        pubSub: {
                            topic: "Test string",
                        },
                        saveFindings: {
                            outputConfig: {
                                outputSchema: "Test string",
                                table: {
                                    datasetId: "Test string",
                                    projectId: "Test string",
                                    tableId: "Test string",
                                },
                            },
                        },
                    }
                ],
                inspectConfig: {
                    contentOptions: [
                        "Test string"
                    ],
                    customInfoTypes: [
                        {
                            detectionRules: [
                                {
                                    hotwordRule: {
                                        hotwordRegex: {
                                            groupIndexes: [
                                                42
                                            ],
                                            pattern: "Test string",
                                        },
                                        likelihoodAdjustment: {
                                            fixedLikelihood: "Test string",
                                            relativeLikelihood: 42,
                                        },
                                        proximity: {
                                            windowAfter: 42,
                                            windowBefore: 42,
                                        },
                                    },
                                }
                            ],
                            dictionary: {
                                cloudStoragePath: {
                                    path: "Test string",
                                },
                                wordList: {
                                    words: [
                                        "Test string"
                                    ],
                                },
                            },
                            exclusionType: "Test string",
                            infoType: {
                                name: "Test string",
                                version: "Test string",
                            },
                            likelihood: "Test string",
                            regex: {
                                groupIndexes: [
                                    42
                                ],
                                pattern: "Test string",
                            },
                            storedType: {
                                createTime: "Test string",
                                name: "Test string",
                            },
                            surrogateType: {
                            },
                        }
                    ],
                    excludeInfoTypes: true,
                    includeQuote: true,
                    infoTypes: [
                        {
                            name: "Test string",
                            version: "Test string",
                        }
                    ],
                    limits: {
                        maxFindingsPerInfoType: [
                            {
                                infoType: {
                                    name: "Test string",
                                    version: "Test string",
                                },
                                maxFindings: 42,
                            }
                        ],
                        maxFindingsPerItem: 42,
                        maxFindingsPerRequest: 42,
                    },
                    minLikelihood: "Test string",
                    ruleSet: [
                        {
                            infoTypes: [
                                {
                                    name: "Test string",
                                    version: "Test string",
                                }
                            ],
                            rules: [
                                {
                                    exclusionRule: {
                                        dictionary: {
                                            cloudStoragePath: {
                                                path: "Test string",
                                            },
                                            wordList: {
                                                words: [
                                                    "Test string"
                                                ],
                                            },
                                        },
                                        excludeByHotword: {
                                            hotwordRegex: {
                                                groupIndexes: [
                                                    42
                                                ],
                                                pattern: "Test string",
                                            },
                                            proximity: {
                                                windowAfter: 42,
                                                windowBefore: 42,
                                            },
                                        },
                                        excludeInfoTypes: {
                                            infoTypes: [
                                                {
                                                    name: "Test string",
                                                    version: "Test string",
                                                }
                                            ],
                                        },
                                        matchingType: "Test string",
                                        regex: {
                                            groupIndexes: [
                                                42
                                            ],
                                            pattern: "Test string",
                                        },
                                    },
                                    hotwordRule: {
                                        hotwordRegex: {
                                            groupIndexes: [
                                                42
                                            ],
                                            pattern: "Test string",
                                        },
                                        likelihoodAdjustment: {
                                            fixedLikelihood: "Test string",
                                            relativeLikelihood: 42,
                                        },
                                        proximity: {
                                            windowAfter: 42,
                                            windowBefore: 42,
                                        },
                                    },
                                }
                            ],
                        }
                    ],
                },
                inspectTemplateName: "Test string",
                storageConfig: {
                    bigQueryOptions: {
                        excludedFields: [
                            {
                                name: "Test string",
                            }
                        ],
                        identifyingFields: [
                            {
                                name: "Test string",
                            }
                        ],
                        includedFields: [
                            {
                                name: "Test string",
                            }
                        ],
                        rowsLimit: "Test string",
                        rowsLimitPercent: 42,
                        sampleMethod: "Test string",
                        tableReference: {
                            datasetId: "Test string",
                            projectId: "Test string",
                            tableId: "Test string",
                        },
                    },
                    cloudStorageOptions: {
                        bytesLimitPerFile: "Test string",
                        bytesLimitPerFilePercent: 42,
                        fileSet: {
                            regexFileSet: {
                                bucketName: "Test string",
                                excludeRegex: [
                                    "Test string"
                                ],
                                includeRegex: [
                                    "Test string"
                                ],
                            },
                            url: "Test string",
                        },
                        filesLimitPercent: 42,
                        fileTypes: [
                            "Test string"
                        ],
                        sampleMethod: "Test string",
                    },
                    datastoreOptions: {
                        kind: {
                            name: "Test string",
                        },
                        partitionId: {
                            namespaceId: "Test string",
                            projectId: "Test string",
                        },
                    },
                    hybridOptions: {
                        description: "Test string",
                        labels: {
                            A: "Test string"
                        },
                        requiredFindingLabelKeys: [
                            "Test string"
                        ],
                        tableOptions: {
                            identifyingFields: [
                                {
                                    name: "Test string",
                                }
                            ],
                        },
                    },
                    timespanConfig: {
                        enableAutoPopulationOfTimespanConfig: true,
                        endTime: "Test string",
                        startTime: "Test string",
                        timestampField: {
                            name: "Test string",
                        },
                    },
                },
            },
            jobId: "Test string",
            locationId: "Test string",
            riskJob: {
                actions: [
                    {
                        deidentify: {
                            cloudStorageOutput: "Test string",
                            fileTypesToTransform: [
                                "Test string"
                            ],
                            transformationConfig: {
                                deidentifyTemplate: "Test string",
                                imageRedactTemplate: "Test string",
                                structuredDeidentifyTemplate: "Test string",
                            },
                            transformationDetailsStorageConfig: {
                                table: {
                                    datasetId: "Test string",
                                    projectId: "Test string",
                                    tableId: "Test string",
                                },
                            },
                        },
                        jobNotificationEmails: {
                        },
                        publishFindingsToCloudDataCatalog: {
                        },
                        publishSummaryToCscc: {
                        },
                        publishToStackdriver: {
                        },
                        pubSub: {
                            topic: "Test string",
                        },
                        saveFindings: {
                            outputConfig: {
                                outputSchema: "Test string",
                                table: {
                                    datasetId: "Test string",
                                    projectId: "Test string",
                                    tableId: "Test string",
                                },
                            },
                        },
                    }
                ],
                privacyMetric: {
                    categoricalStatsConfig: {
                        field: {
                            name: "Test string",
                        },
                    },
                    deltaPresenceEstimationConfig: {
                        auxiliaryTables: [
                            {
                                quasiIds: [
                                    {
                                        customTag: "Test string",
                                        field: {
                                            name: "Test string",
                                        },
                                    }
                                ],
                                relativeFrequency: {
                                    name: "Test string",
                                },
                                table: {
                                    datasetId: "Test string",
                                    projectId: "Test string",
                                    tableId: "Test string",
                                },
                            }
                        ],
                        quasiIds: [
                            {
                                customTag: "Test string",
                                field: {
                                    name: "Test string",
                                },
                                inferred: {
                                },
                                infoType: {
                                    name: "Test string",
                                    version: "Test string",
                                },
                            }
                        ],
                        regionCode: "Test string",
                    },
                    kAnonymityConfig: {
                        entityId: {
                            field: {
                                name: "Test string",
                            },
                        },
                        quasiIds: [
                            {
                                name: "Test string",
                            }
                        ],
                    },
                    kMapEstimationConfig: {
                        auxiliaryTables: [
                            {
                                quasiIds: [
                                    {
                                        customTag: "Test string",
                                        field: {
                                            name: "Test string",
                                        },
                                    }
                                ],
                                relativeFrequency: {
                                    name: "Test string",
                                },
                                table: {
                                    datasetId: "Test string",
                                    projectId: "Test string",
                                    tableId: "Test string",
                                },
                            }
                        ],
                        quasiIds: [
                            {
                                customTag: "Test string",
                                field: {
                                    name: "Test string",
                                },
                                inferred: {
                                },
                                infoType: {
                                    name: "Test string",
                                    version: "Test string",
                                },
                            }
                        ],
                        regionCode: "Test string",
                    },
                    lDiversityConfig: {
                        quasiIds: [
                            {
                                name: "Test string",
                            }
                        ],
                        sensitiveAttribute: {
                            name: "Test string",
                        },
                    },
                    numericalStatsConfig: {
                        field: {
                            name: "Test string",
                        },
                    },
                },
                sourceTable: {
                    datasetId: "Test string",
                    projectId: "Test string",
                    tableId: "Test string",
                },
            },
        });
        /**
         * Deletes a long-running DlpJob. This method indicates that the client is no longer interested in the DlpJob result. The job will be canceled if possible. See
         * https://cloud.google.com/dlp/docs/inspecting-storage and https://cloud.google.com/dlp/docs/compute-risk-analysis to learn more.
         */
        await gapi.client.dlp.projects.dlpJobs.delete({
            name: "Test string",
        });
        /** Gets the latest state of a long-running DlpJob. See https://cloud.google.com/dlp/docs/inspecting-storage and https://cloud.google.com/dlp/docs/compute-risk-analysis to learn more. */
        await gapi.client.dlp.projects.dlpJobs.get({
            name: "Test string",
        });
        /**
         * Lists DlpJobs that match the specified filter in the request. See https://cloud.google.com/dlp/docs/inspecting-storage and https://cloud.google.com/dlp/docs/compute-risk-analysis to
         * learn more.
         */
        await gapi.client.dlp.projects.dlpJobs.list({
            filter: "Test string",
            locationId: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
            type: "Test string",
        });
        /**
         * Redacts potentially sensitive info from an image. This method has limits on input size, processing time, and output size. See
         * https://cloud.google.com/dlp/docs/redacting-sensitive-data-images to learn more. When no InfoTypes or CustomInfoTypes are specified in this request, the system will automatically choose
         * what detectors to run. By default this may be all types, but may change over time as detectors are updated.
         */
        await gapi.client.dlp.projects.image.redact({
            parent: "Test string",
        }, {
            byteItem: {
                data: "Test string",
                type: "Test string",
            },
            imageRedactionConfigs: [
                {
                    infoType: {
                        name: "Test string",
                        version: "Test string",
                    },
                    redactAllText: true,
                    redactionColor: {
                        blue: 42,
                        green: 42,
                        red: 42,
                    },
                }
            ],
            includeFindings: true,
            inspectConfig: {
                contentOptions: [
                    "Test string"
                ],
                customInfoTypes: [
                    {
                        detectionRules: [
                            {
                                hotwordRule: {
                                    hotwordRegex: {
                                        groupIndexes: [
                                            42
                                        ],
                                        pattern: "Test string",
                                    },
                                    likelihoodAdjustment: {
                                        fixedLikelihood: "Test string",
                                        relativeLikelihood: 42,
                                    },
                                    proximity: {
                                        windowAfter: 42,
                                        windowBefore: 42,
                                    },
                                },
                            }
                        ],
                        dictionary: {
                            cloudStoragePath: {
                                path: "Test string",
                            },
                            wordList: {
                                words: [
                                    "Test string"
                                ],
                            },
                        },
                        exclusionType: "Test string",
                        infoType: {
                            name: "Test string",
                            version: "Test string",
                        },
                        likelihood: "Test string",
                        regex: {
                            groupIndexes: [
                                42
                            ],
                            pattern: "Test string",
                        },
                        storedType: {
                            createTime: "Test string",
                            name: "Test string",
                        },
                        surrogateType: {
                        },
                    }
                ],
                excludeInfoTypes: true,
                includeQuote: true,
                infoTypes: [
                    {
                        name: "Test string",
                        version: "Test string",
                    }
                ],
                limits: {
                    maxFindingsPerInfoType: [
                        {
                            infoType: {
                                name: "Test string",
                                version: "Test string",
                            },
                            maxFindings: 42,
                        }
                    ],
                    maxFindingsPerItem: 42,
                    maxFindingsPerRequest: 42,
                },
                minLikelihood: "Test string",
                ruleSet: [
                    {
                        infoTypes: [
                            {
                                name: "Test string",
                                version: "Test string",
                            }
                        ],
                        rules: [
                            {
                                exclusionRule: {
                                    dictionary: {
                                        cloudStoragePath: {
                                            path: "Test string",
                                        },
                                        wordList: {
                                            words: [
                                                "Test string"
                                            ],
                                        },
                                    },
                                    excludeByHotword: {
                                        hotwordRegex: {
                                            groupIndexes: [
                                                42
                                            ],
                                            pattern: "Test string",
                                        },
                                        proximity: {
                                            windowAfter: 42,
                                            windowBefore: 42,
                                        },
                                    },
                                    excludeInfoTypes: {
                                        infoTypes: [
                                            {
                                                name: "Test string",
                                                version: "Test string",
                                            }
                                        ],
                                    },
                                    matchingType: "Test string",
                                    regex: {
                                        groupIndexes: [
                                            42
                                        ],
                                        pattern: "Test string",
                                    },
                                },
                                hotwordRule: {
                                    hotwordRegex: {
                                        groupIndexes: [
                                            42
                                        ],
                                        pattern: "Test string",
                                    },
                                    likelihoodAdjustment: {
                                        fixedLikelihood: "Test string",
                                        relativeLikelihood: 42,
                                    },
                                    proximity: {
                                        windowAfter: 42,
                                        windowBefore: 42,
                                    },
                                },
                            }
                        ],
                    }
                ],
            },
            locationId: "Test string",
        });
        /** Creates an InspectTemplate for reusing frequently used configuration for inspecting content, images, and storage. See https://cloud.google.com/dlp/docs/creating-templates to learn more. */
        await gapi.client.dlp.projects.inspectTemplates.create({
            parent: "Test string",
        }, {
            inspectTemplate: {
                createTime: "Test string",
                description: "Test string",
                displayName: "Test string",
                inspectConfig: {
                    contentOptions: [
                        "Test string"
                    ],
                    customInfoTypes: [
                        {
                            detectionRules: [
                                {
                                    hotwordRule: {
                                        hotwordRegex: {
                                            groupIndexes: [
                                                42
                                            ],
                                            pattern: "Test string",
                                        },
                                        likelihoodAdjustment: {
                                            fixedLikelihood: "Test string",
                                            relativeLikelihood: 42,
                                        },
                                        proximity: {
                                            windowAfter: 42,
                                            windowBefore: 42,
                                        },
                                    },
                                }
                            ],
                            dictionary: {
                                cloudStoragePath: {
                                    path: "Test string",
                                },
                                wordList: {
                                    words: [
                                        "Test string"
                                    ],
                                },
                            },
                            exclusionType: "Test string",
                            infoType: {
                                name: "Test string",
                                version: "Test string",
                            },
                            likelihood: "Test string",
                            regex: {
                                groupIndexes: [
                                    42
                                ],
                                pattern: "Test string",
                            },
                            storedType: {
                                createTime: "Test string",
                                name: "Test string",
                            },
                            surrogateType: {
                            },
                        }
                    ],
                    excludeInfoTypes: true,
                    includeQuote: true,
                    infoTypes: [
                        {
                            name: "Test string",
                            version: "Test string",
                        }
                    ],
                    limits: {
                        maxFindingsPerInfoType: [
                            {
                                infoType: {
                                    name: "Test string",
                                    version: "Test string",
                                },
                                maxFindings: 42,
                            }
                        ],
                        maxFindingsPerItem: 42,
                        maxFindingsPerRequest: 42,
                    },
                    minLikelihood: "Test string",
                    ruleSet: [
                        {
                            infoTypes: [
                                {
                                    name: "Test string",
                                    version: "Test string",
                                }
                            ],
                            rules: [
                                {
                                    exclusionRule: {
                                        dictionary: {
                                            cloudStoragePath: {
                                                path: "Test string",
                                            },
                                            wordList: {
                                                words: [
                                                    "Test string"
                                                ],
                                            },
                                        },
                                        excludeByHotword: {
                                            hotwordRegex: {
                                                groupIndexes: [
                                                    42
                                                ],
                                                pattern: "Test string",
                                            },
                                            proximity: {
                                                windowAfter: 42,
                                                windowBefore: 42,
                                            },
                                        },
                                        excludeInfoTypes: {
                                            infoTypes: [
                                                {
                                                    name: "Test string",
                                                    version: "Test string",
                                                }
                                            ],
                                        },
                                        matchingType: "Test string",
                                        regex: {
                                            groupIndexes: [
                                                42
                                            ],
                                            pattern: "Test string",
                                        },
                                    },
                                    hotwordRule: {
                                        hotwordRegex: {
                                            groupIndexes: [
                                                42
                                            ],
                                            pattern: "Test string",
                                        },
                                        likelihoodAdjustment: {
                                            fixedLikelihood: "Test string",
                                            relativeLikelihood: 42,
                                        },
                                        proximity: {
                                            windowAfter: 42,
                                            windowBefore: 42,
                                        },
                                    },
                                }
                            ],
                        }
                    ],
                },
                name: "Test string",
                updateTime: "Test string",
            },
            locationId: "Test string",
            templateId: "Test string",
        });
        /** Deletes an InspectTemplate. See https://cloud.google.com/dlp/docs/creating-templates to learn more. */
        await gapi.client.dlp.projects.inspectTemplates.delete({
            name: "Test string",
        });
        /** Gets an InspectTemplate. See https://cloud.google.com/dlp/docs/creating-templates to learn more. */
        await gapi.client.dlp.projects.inspectTemplates.get({
            name: "Test string",
        });
        /** Lists InspectTemplates. See https://cloud.google.com/dlp/docs/creating-templates to learn more. */
        await gapi.client.dlp.projects.inspectTemplates.list({
            locationId: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the InspectTemplate. See https://cloud.google.com/dlp/docs/creating-templates to learn more. */
        await gapi.client.dlp.projects.inspectTemplates.patch({
            name: "Test string",
        }, {
            inspectTemplate: {
                createTime: "Test string",
                description: "Test string",
                displayName: "Test string",
                inspectConfig: {
                    contentOptions: [
                        "Test string"
                    ],
                    customInfoTypes: [
                        {
                            detectionRules: [
                                {
                                    hotwordRule: {
                                        hotwordRegex: {
                                            groupIndexes: [
                                                42
                                            ],
                                            pattern: "Test string",
                                        },
                                        likelihoodAdjustment: {
                                            fixedLikelihood: "Test string",
                                            relativeLikelihood: 42,
                                        },
                                        proximity: {
                                            windowAfter: 42,
                                            windowBefore: 42,
                                        },
                                    },
                                }
                            ],
                            dictionary: {
                                cloudStoragePath: {
                                    path: "Test string",
                                },
                                wordList: {
                                    words: [
                                        "Test string"
                                    ],
                                },
                            },
                            exclusionType: "Test string",
                            infoType: {
                                name: "Test string",
                                version: "Test string",
                            },
                            likelihood: "Test string",
                            regex: {
                                groupIndexes: [
                                    42
                                ],
                                pattern: "Test string",
                            },
                            storedType: {
                                createTime: "Test string",
                                name: "Test string",
                            },
                            surrogateType: {
                            },
                        }
                    ],
                    excludeInfoTypes: true,
                    includeQuote: true,
                    infoTypes: [
                        {
                            name: "Test string",
                            version: "Test string",
                        }
                    ],
                    limits: {
                        maxFindingsPerInfoType: [
                            {
                                infoType: {
                                    name: "Test string",
                                    version: "Test string",
                                },
                                maxFindings: 42,
                            }
                        ],
                        maxFindingsPerItem: 42,
                        maxFindingsPerRequest: 42,
                    },
                    minLikelihood: "Test string",
                    ruleSet: [
                        {
                            infoTypes: [
                                {
                                    name: "Test string",
                                    version: "Test string",
                                }
                            ],
                            rules: [
                                {
                                    exclusionRule: {
                                        dictionary: {
                                            cloudStoragePath: {
                                                path: "Test string",
                                            },
                                            wordList: {
                                                words: [
                                                    "Test string"
                                                ],
                                            },
                                        },
                                        excludeByHotword: {
                                            hotwordRegex: {
                                                groupIndexes: [
                                                    42
                                                ],
                                                pattern: "Test string",
                                            },
                                            proximity: {
                                                windowAfter: 42,
                                                windowBefore: 42,
                                            },
                                        },
                                        excludeInfoTypes: {
                                            infoTypes: [
                                                {
                                                    name: "Test string",
                                                    version: "Test string",
                                                }
                                            ],
                                        },
                                        matchingType: "Test string",
                                        regex: {
                                            groupIndexes: [
                                                42
                                            ],
                                            pattern: "Test string",
                                        },
                                    },
                                    hotwordRule: {
                                        hotwordRegex: {
                                            groupIndexes: [
                                                42
                                            ],
                                            pattern: "Test string",
                                        },
                                        likelihoodAdjustment: {
                                            fixedLikelihood: "Test string",
                                            relativeLikelihood: 42,
                                        },
                                        proximity: {
                                            windowAfter: 42,
                                            windowBefore: 42,
                                        },
                                    },
                                }
                            ],
                        }
                    ],
                },
                name: "Test string",
                updateTime: "Test string",
            },
            updateMask: "Test string",
        });
        /** Activate a job trigger. Causes the immediate execute of a trigger instead of waiting on the trigger event to occur. */
        await gapi.client.dlp.projects.jobTriggers.activate({
            name: "Test string",
        }, {
        });
        /** Creates a job trigger to run DLP actions such as scanning storage for sensitive information on a set schedule. See https://cloud.google.com/dlp/docs/creating-job-triggers to learn more. */
        await gapi.client.dlp.projects.jobTriggers.create({
            parent: "Test string",
        }, {
            jobTrigger: {
                createTime: "Test string",
                description: "Test string",
                displayName: "Test string",
                errors: [
                    {
                        details: {
                            code: 42,
                            details: [
                                {
                                    A: 42
                                }
                            ],
                            message: "Test string",
                        },
                        timestamps: [
                            "Test string"
                        ],
                    }
                ],
                inspectJob: {
                    actions: [
                        {
                            deidentify: {
                                cloudStorageOutput: "Test string",
                                fileTypesToTransform: [
                                    "Test string"
                                ],
                                transformationConfig: {
                                    deidentifyTemplate: "Test string",
                                    imageRedactTemplate: "Test string",
                                    structuredDeidentifyTemplate: "Test string",
                                },
                                transformationDetailsStorageConfig: {
                                    table: {
                                        datasetId: "Test string",
                                        projectId: "Test string",
                                        tableId: "Test string",
                                    },
                                },
                            },
                            jobNotificationEmails: {
                            },
                            publishFindingsToCloudDataCatalog: {
                            },
                            publishSummaryToCscc: {
                            },
                            publishToStackdriver: {
                            },
                            pubSub: {
                                topic: "Test string",
                            },
                            saveFindings: {
                                outputConfig: {
                                    outputSchema: "Test string",
                                    table: {
                                        datasetId: "Test string",
                                        projectId: "Test string",
                                        tableId: "Test string",
                                    },
                                },
                            },
                        }
                    ],
                    inspectConfig: {
                        contentOptions: [
                            "Test string"
                        ],
                        customInfoTypes: [
                            {
                                detectionRules: [
                                    {
                                        hotwordRule: {
                                            hotwordRegex: {
                                                groupIndexes: [
                                                    42
                                                ],
                                                pattern: "Test string",
                                            },
                                            likelihoodAdjustment: {
                                                fixedLikelihood: "Test string",
                                                relativeLikelihood: 42,
                                            },
                                            proximity: {
                                                windowAfter: 42,
                                                windowBefore: 42,
                                            },
                                        },
                                    }
                                ],
                                dictionary: {
                                    cloudStoragePath: {
                                        path: "Test string",
                                    },
                                    wordList: {
                                        words: [
                                            "Test string"
                                        ],
                                    },
                                },
                                exclusionType: "Test string",
                                infoType: {
                                    name: "Test string",
                                    version: "Test string",
                                },
                                likelihood: "Test string",
                                regex: {
                                    groupIndexes: [
                                        42
                                    ],
                                    pattern: "Test string",
                                },
                                storedType: {
                                    createTime: "Test string",
                                    name: "Test string",
                                },
                                surrogateType: {
                                },
                            }
                        ],
                        excludeInfoTypes: true,
                        includeQuote: true,
                        infoTypes: [
                            {
                                name: "Test string",
                                version: "Test string",
                            }
                        ],
                        limits: {
                            maxFindingsPerInfoType: [
                                {
                                    infoType: {
                                        name: "Test string",
                                        version: "Test string",
                                    },
                                    maxFindings: 42,
                                }
                            ],
                            maxFindingsPerItem: 42,
                            maxFindingsPerRequest: 42,
                        },
                        minLikelihood: "Test string",
                        ruleSet: [
                            {
                                infoTypes: [
                                    {
                                        name: "Test string",
                                        version: "Test string",
                                    }
                                ],
                                rules: [
                                    {
                                        exclusionRule: {
                                            dictionary: {
                                                cloudStoragePath: {
                                                    path: "Test string",
                                                },
                                                wordList: {
                                                    words: [
                                                        "Test string"
                                                    ],
                                                },
                                            },
                                            excludeByHotword: {
                                                hotwordRegex: {
                                                    groupIndexes: [
                                                        42
                                                    ],
                                                    pattern: "Test string",
                                                },
                                                proximity: {
                                                    windowAfter: 42,
                                                    windowBefore: 42,
                                                },
                                            },
                                            excludeInfoTypes: {
                                                infoTypes: [
                                                    {
                                                        name: "Test string",
                                                        version: "Test string",
                                                    }
                                                ],
                                            },
                                            matchingType: "Test string",
                                            regex: {
                                                groupIndexes: [
                                                    42
                                                ],
                                                pattern: "Test string",
                                            },
                                        },
                                        hotwordRule: {
                                            hotwordRegex: {
                                                groupIndexes: [
                                                    42
                                                ],
                                                pattern: "Test string",
                                            },
                                            likelihoodAdjustment: {
                                                fixedLikelihood: "Test string",
                                                relativeLikelihood: 42,
                                            },
                                            proximity: {
                                                windowAfter: 42,
                                                windowBefore: 42,
                                            },
                                        },
                                    }
                                ],
                            }
                        ],
                    },
                    inspectTemplateName: "Test string",
                    storageConfig: {
                        bigQueryOptions: {
                            excludedFields: [
                                {
                                    name: "Test string",
                                }
                            ],
                            identifyingFields: [
                                {
                                    name: "Test string",
                                }
                            ],
                            includedFields: [
                                {
                                    name: "Test string",
                                }
                            ],
                            rowsLimit: "Test string",
                            rowsLimitPercent: 42,
                            sampleMethod: "Test string",
                            tableReference: {
                                datasetId: "Test string",
                                projectId: "Test string",
                                tableId: "Test string",
                            },
                        },
                        cloudStorageOptions: {
                            bytesLimitPerFile: "Test string",
                            bytesLimitPerFilePercent: 42,
                            fileSet: {
                                regexFileSet: {
                                    bucketName: "Test string",
                                    excludeRegex: [
                                        "Test string"
                                    ],
                                    includeRegex: [
                                        "Test string"
                                    ],
                                },
                                url: "Test string",
                            },
                            filesLimitPercent: 42,
                            fileTypes: [
                                "Test string"
                            ],
                            sampleMethod: "Test string",
                        },
                        datastoreOptions: {
                            kind: {
                                name: "Test string",
                            },
                            partitionId: {
                                namespaceId: "Test string",
                                projectId: "Test string",
                            },
                        },
                        hybridOptions: {
                            description: "Test string",
                            labels: {
                                A: "Test string"
                            },
                            requiredFindingLabelKeys: [
                                "Test string"
                            ],
                            tableOptions: {
                                identifyingFields: [
                                    {
                                        name: "Test string",
                                    }
                                ],
                            },
                        },
                        timespanConfig: {
                            enableAutoPopulationOfTimespanConfig: true,
                            endTime: "Test string",
                            startTime: "Test string",
                            timestampField: {
                                name: "Test string",
                            },
                        },
                    },
                },
                lastRunTime: "Test string",
                name: "Test string",
                status: "Test string",
                triggers: [
                    {
                        manual: {
                        },
                        schedule: {
                            recurrencePeriodDuration: "Test string",
                        },
                    }
                ],
                updateTime: "Test string",
            },
            locationId: "Test string",
            triggerId: "Test string",
        });
        /** Deletes a job trigger. See https://cloud.google.com/dlp/docs/creating-job-triggers to learn more. */
        await gapi.client.dlp.projects.jobTriggers.delete({
            name: "Test string",
        });
        /** Gets a job trigger. See https://cloud.google.com/dlp/docs/creating-job-triggers to learn more. */
        await gapi.client.dlp.projects.jobTriggers.get({
            name: "Test string",
        });
        /** Lists job triggers. See https://cloud.google.com/dlp/docs/creating-job-triggers to learn more. */
        await gapi.client.dlp.projects.jobTriggers.list({
            filter: "Test string",
            locationId: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
            type: "Test string",
        });
        /** Updates a job trigger. See https://cloud.google.com/dlp/docs/creating-job-triggers to learn more. */
        await gapi.client.dlp.projects.jobTriggers.patch({
            name: "Test string",
        }, {
            jobTrigger: {
                createTime: "Test string",
                description: "Test string",
                displayName: "Test string",
                errors: [
                    {
                        details: {
                            code: 42,
                            details: [
                                {
                                    A: 42
                                }
                            ],
                            message: "Test string",
                        },
                        timestamps: [
                            "Test string"
                        ],
                    }
                ],
                inspectJob: {
                    actions: [
                        {
                            deidentify: {
                                cloudStorageOutput: "Test string",
                                fileTypesToTransform: [
                                    "Test string"
                                ],
                                transformationConfig: {
                                    deidentifyTemplate: "Test string",
                                    imageRedactTemplate: "Test string",
                                    structuredDeidentifyTemplate: "Test string",
                                },
                                transformationDetailsStorageConfig: {
                                    table: {
                                        datasetId: "Test string",
                                        projectId: "Test string",
                                        tableId: "Test string",
                                    },
                                },
                            },
                            jobNotificationEmails: {
                            },
                            publishFindingsToCloudDataCatalog: {
                            },
                            publishSummaryToCscc: {
                            },
                            publishToStackdriver: {
                            },
                            pubSub: {
                                topic: "Test string",
                            },
                            saveFindings: {
                                outputConfig: {
                                    outputSchema: "Test string",
                                    table: {
                                        datasetId: "Test string",
                                        projectId: "Test string",
                                        tableId: "Test string",
                                    },
                                },
                            },
                        }
                    ],
                    inspectConfig: {
                        contentOptions: [
                            "Test string"
                        ],
                        customInfoTypes: [
                            {
                                detectionRules: [
                                    {
                                        hotwordRule: {
                                            hotwordRegex: {
                                                groupIndexes: [
                                                    42
                                                ],
                                                pattern: "Test string",
                                            },
                                            likelihoodAdjustment: {
                                                fixedLikelihood: "Test string",
                                                relativeLikelihood: 42,
                                            },
                                            proximity: {
                                                windowAfter: 42,
                                                windowBefore: 42,
                                            },
                                        },
                                    }
                                ],
                                dictionary: {
                                    cloudStoragePath: {
                                        path: "Test string",
                                    },
                                    wordList: {
                                        words: [
                                            "Test string"
                                        ],
                                    },
                                },
                                exclusionType: "Test string",
                                infoType: {
                                    name: "Test string",
                                    version: "Test string",
                                },
                                likelihood: "Test string",
                                regex: {
                                    groupIndexes: [
                                        42
                                    ],
                                    pattern: "Test string",
                                },
                                storedType: {
                                    createTime: "Test string",
                                    name: "Test string",
                                },
                                surrogateType: {
                                },
                            }
                        ],
                        excludeInfoTypes: true,
                        includeQuote: true,
                        infoTypes: [
                            {
                                name: "Test string",
                                version: "Test string",
                            }
                        ],
                        limits: {
                            maxFindingsPerInfoType: [
                                {
                                    infoType: {
                                        name: "Test string",
                                        version: "Test string",
                                    },
                                    maxFindings: 42,
                                }
                            ],
                            maxFindingsPerItem: 42,
                            maxFindingsPerRequest: 42,
                        },
                        minLikelihood: "Test string",
                        ruleSet: [
                            {
                                infoTypes: [
                                    {
                                        name: "Test string",
                                        version: "Test string",
                                    }
                                ],
                                rules: [
                                    {
                                        exclusionRule: {
                                            dictionary: {
                                                cloudStoragePath: {
                                                    path: "Test string",
                                                },
                                                wordList: {
                                                    words: [
                                                        "Test string"
                                                    ],
                                                },
                                            },
                                            excludeByHotword: {
                                                hotwordRegex: {
                                                    groupIndexes: [
                                                        42
                                                    ],
                                                    pattern: "Test string",
                                                },
                                                proximity: {
                                                    windowAfter: 42,
                                                    windowBefore: 42,
                                                },
                                            },
                                            excludeInfoTypes: {
                                                infoTypes: [
                                                    {
                                                        name: "Test string",
                                                        version: "Test string",
                                                    }
                                                ],
                                            },
                                            matchingType: "Test string",
                                            regex: {
                                                groupIndexes: [
                                                    42
                                                ],
                                                pattern: "Test string",
                                            },
                                        },
                                        hotwordRule: {
                                            hotwordRegex: {
                                                groupIndexes: [
                                                    42
                                                ],
                                                pattern: "Test string",
                                            },
                                            likelihoodAdjustment: {
                                                fixedLikelihood: "Test string",
                                                relativeLikelihood: 42,
                                            },
                                            proximity: {
                                                windowAfter: 42,
                                                windowBefore: 42,
                                            },
                                        },
                                    }
                                ],
                            }
                        ],
                    },
                    inspectTemplateName: "Test string",
                    storageConfig: {
                        bigQueryOptions: {
                            excludedFields: [
                                {
                                    name: "Test string",
                                }
                            ],
                            identifyingFields: [
                                {
                                    name: "Test string",
                                }
                            ],
                            includedFields: [
                                {
                                    name: "Test string",
                                }
                            ],
                            rowsLimit: "Test string",
                            rowsLimitPercent: 42,
                            sampleMethod: "Test string",
                            tableReference: {
                                datasetId: "Test string",
                                projectId: "Test string",
                                tableId: "Test string",
                            },
                        },
                        cloudStorageOptions: {
                            bytesLimitPerFile: "Test string",
                            bytesLimitPerFilePercent: 42,
                            fileSet: {
                                regexFileSet: {
                                    bucketName: "Test string",
                                    excludeRegex: [
                                        "Test string"
                                    ],
                                    includeRegex: [
                                        "Test string"
                                    ],
                                },
                                url: "Test string",
                            },
                            filesLimitPercent: 42,
                            fileTypes: [
                                "Test string"
                            ],
                            sampleMethod: "Test string",
                        },
                        datastoreOptions: {
                            kind: {
                                name: "Test string",
                            },
                            partitionId: {
                                namespaceId: "Test string",
                                projectId: "Test string",
                            },
                        },
                        hybridOptions: {
                            description: "Test string",
                            labels: {
                                A: "Test string"
                            },
                            requiredFindingLabelKeys: [
                                "Test string"
                            ],
                            tableOptions: {
                                identifyingFields: [
                                    {
                                        name: "Test string",
                                    }
                                ],
                            },
                        },
                        timespanConfig: {
                            enableAutoPopulationOfTimespanConfig: true,
                            endTime: "Test string",
                            startTime: "Test string",
                            timestampField: {
                                name: "Test string",
                            },
                        },
                    },
                },
                lastRunTime: "Test string",
                name: "Test string",
                status: "Test string",
                triggers: [
                    {
                        manual: {
                        },
                        schedule: {
                            recurrencePeriodDuration: "Test string",
                        },
                    }
                ],
                updateTime: "Test string",
            },
            updateMask: "Test string",
        });
        /**
         * De-identifies potentially sensitive info from a ContentItem. This method has limits on input size and output size. See https://cloud.google.com/dlp/docs/deidentify-sensitive-data to
         * learn more. When no InfoTypes or CustomInfoTypes are specified in this request, the system will automatically choose what detectors to run. By default this may be all types, but may
         * change over time as detectors are updated.
         */
        await gapi.client.dlp.projects.locations.content.deidentify({
            parent: "Test string",
        }, {
            deidentifyConfig: {
                imageTransformations: {
                    transforms: [
                        {
                            allInfoTypes: {
                            },
                            allText: {
                            },
                            redactionColor: {
                                blue: 42,
                                green: 42,
                                red: 42,
                            },
                            selectedInfoTypes: {
                                infoTypes: [
                                    {
                                        name: "Test string",
                                        version: "Test string",
                                    }
                                ],
                            },
                        }
                    ],
                },
                infoTypeTransformations: {
                    transformations: [
                        {
                            infoTypes: [
                                {
                                    name: "Test string",
                                    version: "Test string",
                                }
                            ],
                            primitiveTransformation: {
                                bucketingConfig: {
                                    buckets: [
                                        {
                                            max: {
                                                booleanValue: true,
                                                dateValue: {
                                                    day: 42,
                                                    month: 42,
                                                    year: 42,
                                                },
                                                dayOfWeekValue: "Test string",
                                                floatValue: 42,
                                                integerValue: "Test string",
                                                stringValue: "Test string",
                                                timestampValue: "Test string",
                                                timeValue: {
                                                    hours: 42,
                                                    minutes: 42,
                                                    nanos: 42,
                                                    seconds: 42,
                                                },
                                            },
                                            min: {
                                                booleanValue: true,
                                                dateValue: {
                                                    day: 42,
                                                    month: 42,
                                                    year: 42,
                                                },
                                                dayOfWeekValue: "Test string",
                                                floatValue: 42,
                                                integerValue: "Test string",
                                                stringValue: "Test string",
                                                timestampValue: "Test string",
                                                timeValue: {
                                                    hours: 42,
                                                    minutes: 42,
                                                    nanos: 42,
                                                    seconds: 42,
                                                },
                                            },
                                            replacementValue: {
                                                booleanValue: true,
                                                dateValue: {
                                                    day: 42,
                                                    month: 42,
                                                    year: 42,
                                                },
                                                dayOfWeekValue: "Test string",
                                                floatValue: 42,
                                                integerValue: "Test string",
                                                stringValue: "Test string",
                                                timestampValue: "Test string",
                                                timeValue: {
                                                    hours: 42,
                                                    minutes: 42,
                                                    nanos: 42,
                                                    seconds: 42,
                                                },
                                            },
                                        }
                                    ],
                                },
                                characterMaskConfig: {
                                    charactersToIgnore: [
                                        {
                                            charactersToSkip: "Test string",
                                            commonCharactersToIgnore: "Test string",
                                        }
                                    ],
                                    maskingCharacter: "Test string",
                                    numberToMask: 42,
                                    reverseOrder: true,
                                },
                                cryptoDeterministicConfig: {
                                    context: {
                                        name: "Test string",
                                    },
                                    cryptoKey: {
                                        kmsWrapped: {
                                            cryptoKeyName: "Test string",
                                            wrappedKey: "Test string",
                                        },
                                        transient: {
                                            name: "Test string",
                                        },
                                        unwrapped: {
                                            key: "Test string",
                                        },
                                    },
                                    surrogateInfoType: {
                                        name: "Test string",
                                        version: "Test string",
                                    },
                                },
                                cryptoHashConfig: {
                                    cryptoKey: {
                                        kmsWrapped: {
                                            cryptoKeyName: "Test string",
                                            wrappedKey: "Test string",
                                        },
                                        transient: {
                                            name: "Test string",
                                        },
                                        unwrapped: {
                                            key: "Test string",
                                        },
                                    },
                                },
                                cryptoReplaceFfxFpeConfig: {
                                    commonAlphabet: "Test string",
                                    context: {
                                        name: "Test string",
                                    },
                                    cryptoKey: {
                                        kmsWrapped: {
                                            cryptoKeyName: "Test string",
                                            wrappedKey: "Test string",
                                        },
                                        transient: {
                                            name: "Test string",
                                        },
                                        unwrapped: {
                                            key: "Test string",
                                        },
                                    },
                                    customAlphabet: "Test string",
                                    radix: 42,
                                    surrogateInfoType: {
                                        name: "Test string",
                                        version: "Test string",
                                    },
                                },
                                dateShiftConfig: {
                                    context: {
                                        name: "Test string",
                                    },
                                    cryptoKey: {
                                        kmsWrapped: {
                                            cryptoKeyName: "Test string",
                                            wrappedKey: "Test string",
                                        },
                                        transient: {
                                            name: "Test string",
                                        },
                                        unwrapped: {
                                            key: "Test string",
                                        },
                                    },
                                    lowerBoundDays: 42,
                                    upperBoundDays: 42,
                                },
                                fixedSizeBucketingConfig: {
                                    bucketSize: 42,
                                    lowerBound: {
                                        booleanValue: true,
                                        dateValue: {
                                            day: 42,
                                            month: 42,
                                            year: 42,
                                        },
                                        dayOfWeekValue: "Test string",
                                        floatValue: 42,
                                        integerValue: "Test string",
                                        stringValue: "Test string",
                                        timestampValue: "Test string",
                                        timeValue: {
                                            hours: 42,
                                            minutes: 42,
                                            nanos: 42,
                                            seconds: 42,
                                        },
                                    },
                                    upperBound: {
                                        booleanValue: true,
                                        dateValue: {
                                            day: 42,
                                            month: 42,
                                            year: 42,
                                        },
                                        dayOfWeekValue: "Test string",
                                        floatValue: 42,
                                        integerValue: "Test string",
                                        stringValue: "Test string",
                                        timestampValue: "Test string",
                                        timeValue: {
                                            hours: 42,
                                            minutes: 42,
                                            nanos: 42,
                                            seconds: 42,
                                        },
                                    },
                                },
                                redactConfig: {
                                },
                                replaceConfig: {
                                    newValue: {
                                        booleanValue: true,
                                        dateValue: {
                                            day: 42,
                                            month: 42,
                                            year: 42,
                                        },
                                        dayOfWeekValue: "Test string",
                                        floatValue: 42,
                                        integerValue: "Test string",
                                        stringValue: "Test string",
                                        timestampValue: "Test string",
                                        timeValue: {
                                            hours: 42,
                                            minutes: 42,
                                            nanos: 42,
                                            seconds: 42,
                                        },
                                    },
                                },
                                replaceDictionaryConfig: {
                                    wordList: {
                                        words: [
                                            "Test string"
                                        ],
                                    },
                                },
                                replaceWithInfoTypeConfig: {
                                },
                                timePartConfig: {
                                    partToExtract: "Test string",
                                },
                            },
                        }
                    ],
                },
                recordTransformations: {
                    fieldTransformations: [
                        {
                            condition: {
                                expressions: {
                                    conditions: {
                                        conditions: [
                                            {
                                                field: {
                                                    name: "Test string",
                                                },
                                                operator: "Test string",
                                                value: {
                                                    booleanValue: true,
                                                    dateValue: {
                                                        day: 42,
                                                        month: 42,
                                                        year: 42,
                                                    },
                                                    dayOfWeekValue: "Test string",
                                                    floatValue: 42,
                                                    integerValue: "Test string",
                                                    stringValue: "Test string",
                                                    timestampValue: "Test string",
                                                    timeValue: {
                                                        hours: 42,
                                                        minutes: 42,
                                                        nanos: 42,
                                                        seconds: 42,
                                                    },
                                                },
                                            }
                                        ],
                                    },
                                    logicalOperator: "Test string",
                                },
                            },
                            fields: [
                                {
                                    name: "Test string",
                                }
                            ],
                            infoTypeTransformations: {
                                transformations: [
                                    {
                                        infoTypes: [
                                            {
                                                name: "Test string",
                                                version: "Test string",
                                            }
                                        ],
                                        primitiveTransformation: {
                                            bucketingConfig: {
                                                buckets: [
                                                    {
                                                        max: {
                                                            booleanValue: true,
                                                            dateValue: {
                                                                day: 42,
                                                                month: 42,
                                                                year: 42,
                                                            },
                                                            dayOfWeekValue: "Test string",
                                                            floatValue: 42,
                                                            integerValue: "Test string",
                                                            stringValue: "Test string",
                                                            timestampValue: "Test string",
                                                            timeValue: {
                                                                hours: 42,
                                                                minutes: 42,
                                                                nanos: 42,
                                                                seconds: 42,
                                                            },
                                                        },
                                                        min: {
                                                            booleanValue: true,
                                                            dateValue: {
                                                                day: 42,
                                                                month: 42,
                                                                year: 42,
                                                            },
                                                            dayOfWeekValue: "Test string",
                                                            floatValue: 42,
                                                            integerValue: "Test string",
                                                            stringValue: "Test string",
                                                            timestampValue: "Test string",
                                                            timeValue: {
                                                                hours: 42,
                                                                minutes: 42,
                                                                nanos: 42,
                                                                seconds: 42,
                                                            },
                                                        },
                                                        replacementValue: {
                                                            booleanValue: true,
                                                            dateValue: {
                                                                day: 42,
                                                                month: 42,
                                                                year: 42,
                                                            },
                                                            dayOfWeekValue: "Test string",
                                                            floatValue: 42,
                                                            integerValue: "Test string",
                                                            stringValue: "Test string",
                                                            timestampValue: "Test string",
                                                            timeValue: {
                                                                hours: 42,
                                                                minutes: 42,
                                                                nanos: 42,
                                                                seconds: 42,
                                                            },
                                                        },
                                                    }
                                                ],
                                            },
                                            characterMaskConfig: {
                                                charactersToIgnore: [
                                                    {
                                                        charactersToSkip: "Test string",
                                                        commonCharactersToIgnore: "Test string",
                                                    }
                                                ],
                                                maskingCharacter: "Test string",
                                                numberToMask: 42,
                                                reverseOrder: true,
                                            },
                                            cryptoDeterministicConfig: {
                                                context: {
                                                    name: "Test string",
                                                },
                                                cryptoKey: {
                                                    kmsWrapped: {
                                                        cryptoKeyName: "Test string",
                                                        wrappedKey: "Test string",
                                                    },
                                                    transient: {
                                                        name: "Test string",
                                                    },
                                                    unwrapped: {
                                                        key: "Test string",
                                                    },
                                                },
                                                surrogateInfoType: {
                                                    name: "Test string",
                                                    version: "Test string",
                                                },
                                            },
                                            cryptoHashConfig: {
                                                cryptoKey: {
                                                    kmsWrapped: {
                                                        cryptoKeyName: "Test string",
                                                        wrappedKey: "Test string",
                                                    },
                                                    transient: {
                                                        name: "Test string",
                                                    },
                                                    unwrapped: {
                                                        key: "Test string",
                                                    },
                                                },
                                            },
                                            cryptoReplaceFfxFpeConfig: {
                                                commonAlphabet: "Test string",
                                                context: {
                                                    name: "Test string",
                                                },
                                                cryptoKey: {
                                                    kmsWrapped: {
                                                        cryptoKeyName: "Test string",
                                                        wrappedKey: "Test string",
                                                    },
                                                    transient: {
                                                        name: "Test string",
                                                    },
                                                    unwrapped: {
                                                        key: "Test string",
                                                    },
                                                },
                                                customAlphabet: "Test string",
                                                radix: 42,
                                                surrogateInfoType: {
                                                    name: "Test string",
                                                    version: "Test string",
                                                },
                                            },
                                            dateShiftConfig: {
                                                context: {
                                                    name: "Test string",
                                                },
                                                cryptoKey: {
                                                    kmsWrapped: {
                                                        cryptoKeyName: "Test string",
                                                        wrappedKey: "Test string",
                                                    },
                                                    transient: {
                                                        name: "Test string",
                                                    },
                                                    unwrapped: {
                                                        key: "Test string",
                                                    },
                                                },
                                                lowerBoundDays: 42,
                                                upperBoundDays: 42,
                                            },
                                            fixedSizeBucketingConfig: {
                                                bucketSize: 42,
                                                lowerBound: {
                                                    booleanValue: true,
                                                    dateValue: {
                                                        day: 42,
                                                        month: 42,
                                                        year: 42,
                                                    },
                                                    dayOfWeekValue: "Test string",
                                                    floatValue: 42,
                                                    integerValue: "Test string",
                                                    stringValue: "Test string",
                                                    timestampValue: "Test string",
                                                    timeValue: {
                                                        hours: 42,
                                                        minutes: 42,
                                                        nanos: 42,
                                                        seconds: 42,
                                                    },
                                                },
                                                upperBound: {
                                                    booleanValue: true,
                                                    dateValue: {
                                                        day: 42,
                                                        month: 42,
                                                        year: 42,
                                                    },
                                                    dayOfWeekValue: "Test string",
                                                    floatValue: 42,
                                                    integerValue: "Test string",
                                                    stringValue: "Test string",
                                                    timestampValue: "Test string",
                                                    timeValue: {
                                                        hours: 42,
                                                        minutes: 42,
                                                        nanos: 42,
                                                        seconds: 42,
                                                    },
                                                },
                                            },
                                            redactConfig: {
                                            },
                                            replaceConfig: {
                                                newValue: {
                                                    booleanValue: true,
                                                    dateValue: {
                                                        day: 42,
                                                        month: 42,
                                                        year: 42,
                                                    },
                                                    dayOfWeekValue: "Test string",
                                                    floatValue: 42,
                                                    integerValue: "Test string",
                                                    stringValue: "Test string",
                                                    timestampValue: "Test string",
                                                    timeValue: {
                                                        hours: 42,
                                                        minutes: 42,
                                                        nanos: 42,
                                                        seconds: 42,
                                                    },
                                                },
                                            },
                                            replaceDictionaryConfig: {
                                                wordList: {
                                                    words: [
                                                        "Test string"
                                                    ],
                                                },
                                            },
                                            replaceWithInfoTypeConfig: {
                                            },
                                            timePartConfig: {
                                                partToExtract: "Test string",
                                            },
                                        },
                                    }
                                ],
                            },
                            primitiveTransformation: {
                                bucketingConfig: {
                                    buckets: [
                                        {
                                            max: {
                                                booleanValue: true,
                                                dateValue: {
                                                    day: 42,
                                                    month: 42,
                                                    year: 42,
                                                },
                                                dayOfWeekValue: "Test string",
                                                floatValue: 42,
                                                integerValue: "Test string",
                                                stringValue: "Test string",
                                                timestampValue: "Test string",
                                                timeValue: {
                                                    hours: 42,
                                                    minutes: 42,
                                                    nanos: 42,
                                                    seconds: 42,
                                                },
                                            },
                                            min: {
                                                booleanValue: true,
                                                dateValue: {
                                                    day: 42,
                                                    month: 42,
                                                    year: 42,
                                                },
                                                dayOfWeekValue: "Test string",
                                                floatValue: 42,
                                                integerValue: "Test string",
                                                stringValue: "Test string",
                                                timestampValue: "Test string",
                                                timeValue: {
                                                    hours: 42,
                                                    minutes: 42,
                                                    nanos: 42,
                                                    seconds: 42,
                                                },
                                            },
                                            replacementValue: {
                                                booleanValue: true,
                                                dateValue: {
                                                    day: 42,
                                                    month: 42,
                                                    year: 42,
                                                },
                                                dayOfWeekValue: "Test string",
                                                floatValue: 42,
                                                integerValue: "Test string",
                                                stringValue: "Test string",
                                                timestampValue: "Test string",
                                                timeValue: {
                                                    hours: 42,
                                                    minutes: 42,
                                                    nanos: 42,
                                                    seconds: 42,
                                                },
                                            },
                                        }
                                    ],
                                },
                                characterMaskConfig: {
                                    charactersToIgnore: [
                                        {
                                            charactersToSkip: "Test string",
                                            commonCharactersToIgnore: "Test string",
                                        }
                                    ],
                                    maskingCharacter: "Test string",
                                    numberToMask: 42,
                                    reverseOrder: true,
                                },
                                cryptoDeterministicConfig: {
                                    context: {
                                        name: "Test string",
                                    },
                                    cryptoKey: {
                                        kmsWrapped: {
                                            cryptoKeyName: "Test string",
                                            wrappedKey: "Test string",
                                        },
                                        transient: {
                                            name: "Test string",
                                        },
                                        unwrapped: {
                                            key: "Test string",
                                        },
                                    },
                                    surrogateInfoType: {
                                        name: "Test string",
                                        version: "Test string",
                                    },
                                },
                                cryptoHashConfig: {
                                    cryptoKey: {
                                        kmsWrapped: {
                                            cryptoKeyName: "Test string",
                                            wrappedKey: "Test string",
                                        },
                                        transient: {
                                            name: "Test string",
                                        },
                                        unwrapped: {
                                            key: "Test string",
                                        },
                                    },
                                },
                                cryptoReplaceFfxFpeConfig: {
                                    commonAlphabet: "Test string",
                                    context: {
                                        name: "Test string",
                                    },
                                    cryptoKey: {
                                        kmsWrapped: {
                                            cryptoKeyName: "Test string",
                                            wrappedKey: "Test string",
                                        },
                                        transient: {
                                            name: "Test string",
                                        },
                                        unwrapped: {
                                            key: "Test string",
                                        },
                                    },
                                    customAlphabet: "Test string",
                                    radix: 42,
                                    surrogateInfoType: {
                                        name: "Test string",
                                        version: "Test string",
                                    },
                                },
                                dateShiftConfig: {
                                    context: {
                                        name: "Test string",
                                    },
                                    cryptoKey: {
                                        kmsWrapped: {
                                            cryptoKeyName: "Test string",
                                            wrappedKey: "Test string",
                                        },
                                        transient: {
                                            name: "Test string",
                                        },
                                        unwrapped: {
                                            key: "Test string",
                                        },
                                    },
                                    lowerBoundDays: 42,
                                    upperBoundDays: 42,
                                },
                                fixedSizeBucketingConfig: {
                                    bucketSize: 42,
                                    lowerBound: {
                                        booleanValue: true,
                                        dateValue: {
                                            day: 42,
                                            month: 42,
                                            year: 42,
                                        },
                                        dayOfWeekValue: "Test string",
                                        floatValue: 42,
                                        integerValue: "Test string",
                                        stringValue: "Test string",
                                        timestampValue: "Test string",
                                        timeValue: {
                                            hours: 42,
                                            minutes: 42,
                                            nanos: 42,
                                            seconds: 42,
                                        },
                                    },
                                    upperBound: {
                                        booleanValue: true,
                                        dateValue: {
                                            day: 42,
                                            month: 42,
                                            year: 42,
                                        },
                                        dayOfWeekValue: "Test string",
                                        floatValue: 42,
                                        integerValue: "Test string",
                                        stringValue: "Test string",
                                        timestampValue: "Test string",
                                        timeValue: {
                                            hours: 42,
                                            minutes: 42,
                                            nanos: 42,
                                            seconds: 42,
                                        },
                                    },
                                },
                                redactConfig: {
                                },
                                replaceConfig: {
                                    newValue: {
                                        booleanValue: true,
                                        dateValue: {
                                            day: 42,
                                            month: 42,
                                            year: 42,
                                        },
                                        dayOfWeekValue: "Test string",
                                        floatValue: 42,
                                        integerValue: "Test string",
                                        stringValue: "Test string",
                                        timestampValue: "Test string",
                                        timeValue: {
                                            hours: 42,
                                            minutes: 42,
                                            nanos: 42,
                                            seconds: 42,
                                        },
                                    },
                                },
                                replaceDictionaryConfig: {
                                    wordList: {
                                        words: [
                                            "Test string"
                                        ],
                                    },
                                },
                                replaceWithInfoTypeConfig: {
                                },
                                timePartConfig: {
                                    partToExtract: "Test string",
                                },
                            },
                        }
                    ],
                    recordSuppressions: [
                        {
                            condition: {
                                expressions: {
                                    conditions: {
                                        conditions: [
                                            {
                                                field: {
                                                    name: "Test string",
                                                },
                                                operator: "Test string",
                                                value: {
                                                    booleanValue: true,
                                                    dateValue: {
                                                        day: 42,
                                                        month: 42,
                                                        year: 42,
                                                    },
                                                    dayOfWeekValue: "Test string",
                                                    floatValue: 42,
                                                    integerValue: "Test string",
                                                    stringValue: "Test string",
                                                    timestampValue: "Test string",
                                                    timeValue: {
                                                        hours: 42,
                                                        minutes: 42,
                                                        nanos: 42,
                                                        seconds: 42,
                                                    },
                                                },
                                            }
                                        ],
                                    },
                                    logicalOperator: "Test string",
                                },
                            },
                        }
                    ],
                },
                transformationErrorHandling: {
                    leaveUntransformed: {
                    },
                    throwError: {
                    },
                },
            },
            deidentifyTemplateName: "Test string",
            inspectConfig: {
                contentOptions: [
                    "Test string"
                ],
                customInfoTypes: [
                    {
                        detectionRules: [
                            {
                                hotwordRule: {
                                    hotwordRegex: {
                                        groupIndexes: [
                                            42
                                        ],
                                        pattern: "Test string",
                                    },
                                    likelihoodAdjustment: {
                                        fixedLikelihood: "Test string",
                                        relativeLikelihood: 42,
                                    },
                                    proximity: {
                                        windowAfter: 42,
                                        windowBefore: 42,
                                    },
                                },
                            }
                        ],
                        dictionary: {
                            cloudStoragePath: {
                                path: "Test string",
                            },
                            wordList: {
                                words: [
                                    "Test string"
                                ],
                            },
                        },
                        exclusionType: "Test string",
                        infoType: {
                            name: "Test string",
                            version: "Test string",
                        },
                        likelihood: "Test string",
                        regex: {
                            groupIndexes: [
                                42
                            ],
                            pattern: "Test string",
                        },
                        storedType: {
                            createTime: "Test string",
                            name: "Test string",
                        },
                        surrogateType: {
                        },
                    }
                ],
                excludeInfoTypes: true,
                includeQuote: true,
                infoTypes: [
                    {
                        name: "Test string",
                        version: "Test string",
                    }
                ],
                limits: {
                    maxFindingsPerInfoType: [
                        {
                            infoType: {
                                name: "Test string",
                                version: "Test string",
                            },
                            maxFindings: 42,
                        }
                    ],
                    maxFindingsPerItem: 42,
                    maxFindingsPerRequest: 42,
                },
                minLikelihood: "Test string",
                ruleSet: [
                    {
                        infoTypes: [
                            {
                                name: "Test string",
                                version: "Test string",
                            }
                        ],
                        rules: [
                            {
                                exclusionRule: {
                                    dictionary: {
                                        cloudStoragePath: {
                                            path: "Test string",
                                        },
                                        wordList: {
                                            words: [
                                                "Test string"
                                            ],
                                        },
                                    },
                                    excludeByHotword: {
                                        hotwordRegex: {
                                            groupIndexes: [
                                                42
                                            ],
                                            pattern: "Test string",
                                        },
                                        proximity: {
                                            windowAfter: 42,
                                            windowBefore: 42,
                                        },
                                    },
                                    excludeInfoTypes: {
                                        infoTypes: [
                                            {
                                                name: "Test string",
                                                version: "Test string",
                                            }
                                        ],
                                    },
                                    matchingType: "Test string",
                                    regex: {
                                        groupIndexes: [
                                            42
                                        ],
                                        pattern: "Test string",
                                    },
                                },
                                hotwordRule: {
                                    hotwordRegex: {
                                        groupIndexes: [
                                            42
                                        ],
                                        pattern: "Test string",
                                    },
                                    likelihoodAdjustment: {
                                        fixedLikelihood: "Test string",
                                        relativeLikelihood: 42,
                                    },
                                    proximity: {
                                        windowAfter: 42,
                                        windowBefore: 42,
                                    },
                                },
                            }
                        ],
                    }
                ],
            },
            inspectTemplateName: "Test string",
            item: {
                byteItem: {
                    data: "Test string",
                    type: "Test string",
                },
                table: {
                    headers: [
                        {
                            name: "Test string",
                        }
                    ],
                    rows: [
                        {
                            values: [
                                {
                                    booleanValue: true,
                                    dateValue: {
                                        day: 42,
                                        month: 42,
                                        year: 42,
                                    },
                                    dayOfWeekValue: "Test string",
                                    floatValue: 42,
                                    integerValue: "Test string",
                                    stringValue: "Test string",
                                    timestampValue: "Test string",
                                    timeValue: {
                                        hours: 42,
                                        minutes: 42,
                                        nanos: 42,
                                        seconds: 42,
                                    },
                                }
                            ],
                        }
                    ],
                },
                value: "Test string",
            },
            locationId: "Test string",
        });
        /**
         * Finds potentially sensitive info in content. This method has limits on input size, processing time, and output size. When no InfoTypes or CustomInfoTypes are specified in this request,
         * the system will automatically choose what detectors to run. By default this may be all types, but may change over time as detectors are updated. For how to guides, see
         * https://cloud.google.com/dlp/docs/inspecting-images and https://cloud.google.com/dlp/docs/inspecting-text,
         */
        await gapi.client.dlp.projects.locations.content.inspect({
            parent: "Test string",
        }, {
            inspectConfig: {
                contentOptions: [
                    "Test string"
                ],
                customInfoTypes: [
                    {
                        detectionRules: [
                            {
                                hotwordRule: {
                                    hotwordRegex: {
                                        groupIndexes: [
                                            42
                                        ],
                                        pattern: "Test string",
                                    },
                                    likelihoodAdjustment: {
                                        fixedLikelihood: "Test string",
                                        relativeLikelihood: 42,
                                    },
                                    proximity: {
                                        windowAfter: 42,
                                        windowBefore: 42,
                                    },
                                },
                            }
                        ],
                        dictionary: {
                            cloudStoragePath: {
                                path: "Test string",
                            },
                            wordList: {
                                words: [
                                    "Test string"
                                ],
                            },
                        },
                        exclusionType: "Test string",
                        infoType: {
                            name: "Test string",
                            version: "Test string",
                        },
                        likelihood: "Test string",
                        regex: {
                            groupIndexes: [
                                42
                            ],
                            pattern: "Test string",
                        },
                        storedType: {
                            createTime: "Test string",
                            name: "Test string",
                        },
                        surrogateType: {
                        },
                    }
                ],
                excludeInfoTypes: true,
                includeQuote: true,
                infoTypes: [
                    {
                        name: "Test string",
                        version: "Test string",
                    }
                ],
                limits: {
                    maxFindingsPerInfoType: [
                        {
                            infoType: {
                                name: "Test string",
                                version: "Test string",
                            },
                            maxFindings: 42,
                        }
                    ],
                    maxFindingsPerItem: 42,
                    maxFindingsPerRequest: 42,
                },
                minLikelihood: "Test string",
                ruleSet: [
                    {
                        infoTypes: [
                            {
                                name: "Test string",
                                version: "Test string",
                            }
                        ],
                        rules: [
                            {
                                exclusionRule: {
                                    dictionary: {
                                        cloudStoragePath: {
                                            path: "Test string",
                                        },
                                        wordList: {
                                            words: [
                                                "Test string"
                                            ],
                                        },
                                    },
                                    excludeByHotword: {
                                        hotwordRegex: {
                                            groupIndexes: [
                                                42
                                            ],
                                            pattern: "Test string",
                                        },
                                        proximity: {
                                            windowAfter: 42,
                                            windowBefore: 42,
                                        },
                                    },
                                    excludeInfoTypes: {
                                        infoTypes: [
                                            {
                                                name: "Test string",
                                                version: "Test string",
                                            }
                                        ],
                                    },
                                    matchingType: "Test string",
                                    regex: {
                                        groupIndexes: [
                                            42
                                        ],
                                        pattern: "Test string",
                                    },
                                },
                                hotwordRule: {
                                    hotwordRegex: {
                                        groupIndexes: [
                                            42
                                        ],
                                        pattern: "Test string",
                                    },
                                    likelihoodAdjustment: {
                                        fixedLikelihood: "Test string",
                                        relativeLikelihood: 42,
                                    },
                                    proximity: {
                                        windowAfter: 42,
                                        windowBefore: 42,
                                    },
                                },
                            }
                        ],
                    }
                ],
            },
            inspectTemplateName: "Test string",
            item: {
                byteItem: {
                    data: "Test string",
                    type: "Test string",
                },
                table: {
                    headers: [
                        {
                            name: "Test string",
                        }
                    ],
                    rows: [
                        {
                            values: [
                                {
                                    booleanValue: true,
                                    dateValue: {
                                        day: 42,
                                        month: 42,
                                        year: 42,
                                    },
                                    dayOfWeekValue: "Test string",
                                    floatValue: 42,
                                    integerValue: "Test string",
                                    stringValue: "Test string",
                                    timestampValue: "Test string",
                                    timeValue: {
                                        hours: 42,
                                        minutes: 42,
                                        nanos: 42,
                                        seconds: 42,
                                    },
                                }
                            ],
                        }
                    ],
                },
                value: "Test string",
            },
            locationId: "Test string",
        });
        /** Re-identifies content that has been de-identified. See https://cloud.google.com/dlp/docs/pseudonymization#re-identification_in_free_text_code_example to learn more. */
        await gapi.client.dlp.projects.locations.content.reidentify({
            parent: "Test string",
        }, {
            inspectConfig: {
                contentOptions: [
                    "Test string"
                ],
                customInfoTypes: [
                    {
                        detectionRules: [
                            {
                                hotwordRule: {
                                    hotwordRegex: {
                                        groupIndexes: [
                                            42
                                        ],
                                        pattern: "Test string",
                                    },
                                    likelihoodAdjustment: {
                                        fixedLikelihood: "Test string",
                                        relativeLikelihood: 42,
                                    },
                                    proximity: {
                                        windowAfter: 42,
                                        windowBefore: 42,
                                    },
                                },
                            }
                        ],
                        dictionary: {
                            cloudStoragePath: {
                                path: "Test string",
                            },
                            wordList: {
                                words: [
                                    "Test string"
                                ],
                            },
                        },
                        exclusionType: "Test string",
                        infoType: {
                            name: "Test string",
                            version: "Test string",
                        },
                        likelihood: "Test string",
                        regex: {
                            groupIndexes: [
                                42
                            ],
                            pattern: "Test string",
                        },
                        storedType: {
                            createTime: "Test string",
                            name: "Test string",
                        },
                        surrogateType: {
                        },
                    }
                ],
                excludeInfoTypes: true,
                includeQuote: true,
                infoTypes: [
                    {
                        name: "Test string",
                        version: "Test string",
                    }
                ],
                limits: {
                    maxFindingsPerInfoType: [
                        {
                            infoType: {
                                name: "Test string",
                                version: "Test string",
                            },
                            maxFindings: 42,
                        }
                    ],
                    maxFindingsPerItem: 42,
                    maxFindingsPerRequest: 42,
                },
                minLikelihood: "Test string",
                ruleSet: [
                    {
                        infoTypes: [
                            {
                                name: "Test string",
                                version: "Test string",
                            }
                        ],
                        rules: [
                            {
                                exclusionRule: {
                                    dictionary: {
                                        cloudStoragePath: {
                                            path: "Test string",
                                        },
                                        wordList: {
                                            words: [
                                                "Test string"
                                            ],
                                        },
                                    },
                                    excludeByHotword: {
                                        hotwordRegex: {
                                            groupIndexes: [
                                                42
                                            ],
                                            pattern: "Test string",
                                        },
                                        proximity: {
                                            windowAfter: 42,
                                            windowBefore: 42,
                                        },
                                    },
                                    excludeInfoTypes: {
                                        infoTypes: [
                                            {
                                                name: "Test string",
                                                version: "Test string",
                                            }
                                        ],
                                    },
                                    matchingType: "Test string",
                                    regex: {
                                        groupIndexes: [
                                            42
                                        ],
                                        pattern: "Test string",
                                    },
                                },
                                hotwordRule: {
                                    hotwordRegex: {
                                        groupIndexes: [
                                            42
                                        ],
                                        pattern: "Test string",
                                    },
                                    likelihoodAdjustment: {
                                        fixedLikelihood: "Test string",
                                        relativeLikelihood: 42,
                                    },
                                    proximity: {
                                        windowAfter: 42,
                                        windowBefore: 42,
                                    },
                                },
                            }
                        ],
                    }
                ],
            },
            inspectTemplateName: "Test string",
            item: {
                byteItem: {
                    data: "Test string",
                    type: "Test string",
                },
                table: {
                    headers: [
                        {
                            name: "Test string",
                        }
                    ],
                    rows: [
                        {
                            values: [
                                {
                                    booleanValue: true,
                                    dateValue: {
                                        day: 42,
                                        month: 42,
                                        year: 42,
                                    },
                                    dayOfWeekValue: "Test string",
                                    floatValue: 42,
                                    integerValue: "Test string",
                                    stringValue: "Test string",
                                    timestampValue: "Test string",
                                    timeValue: {
                                        hours: 42,
                                        minutes: 42,
                                        nanos: 42,
                                        seconds: 42,
                                    },
                                }
                            ],
                        }
                    ],
                },
                value: "Test string",
            },
            locationId: "Test string",
            reidentifyConfig: {
                imageTransformations: {
                    transforms: [
                        {
                            allInfoTypes: {
                            },
                            allText: {
                            },
                            redactionColor: {
                                blue: 42,
                                green: 42,
                                red: 42,
                            },
                            selectedInfoTypes: {
                                infoTypes: [
                                    {
                                        name: "Test string",
                                        version: "Test string",
                                    }
                                ],
                            },
                        }
                    ],
                },
                infoTypeTransformations: {
                    transformations: [
                        {
                            infoTypes: [
                                {
                                    name: "Test string",
                                    version: "Test string",
                                }
                            ],
                            primitiveTransformation: {
                                bucketingConfig: {
                                    buckets: [
                                        {
                                            max: {
                                                booleanValue: true,
                                                dateValue: {
                                                    day: 42,
                                                    month: 42,
                                                    year: 42,
                                                },
                                                dayOfWeekValue: "Test string",
                                                floatValue: 42,
                                                integerValue: "Test string",
                                                stringValue: "Test string",
                                                timestampValue: "Test string",
                                                timeValue: {
                                                    hours: 42,
                                                    minutes: 42,
                                                    nanos: 42,
                                                    seconds: 42,
                                                },
                                            },
                                            min: {
                                                booleanValue: true,
                                                dateValue: {
                                                    day: 42,
                                                    month: 42,
                                                    year: 42,
                                                },
                                                dayOfWeekValue: "Test string",
                                                floatValue: 42,
                                                integerValue: "Test string",
                                                stringValue: "Test string",
                                                timestampValue: "Test string",
                                                timeValue: {
                                                    hours: 42,
                                                    minutes: 42,
                                                    nanos: 42,
                                                    seconds: 42,
                                                },
                                            },
                                            replacementValue: {
                                                booleanValue: true,
                                                dateValue: {
                                                    day: 42,
                                                    month: 42,
                                                    year: 42,
                                                },
                                                dayOfWeekValue: "Test string",
                                                floatValue: 42,
                                                integerValue: "Test string",
                                                stringValue: "Test string",
                                                timestampValue: "Test string",
                                                timeValue: {
                                                    hours: 42,
                                                    minutes: 42,
                                                    nanos: 42,
                                                    seconds: 42,
                                                },
                                            },
                                        }
                                    ],
                                },
                                characterMaskConfig: {
                                    charactersToIgnore: [
                                        {
                                            charactersToSkip: "Test string",
                                            commonCharactersToIgnore: "Test string",
                                        }
                                    ],
                                    maskingCharacter: "Test string",
                                    numberToMask: 42,
                                    reverseOrder: true,
                                },
                                cryptoDeterministicConfig: {
                                    context: {
                                        name: "Test string",
                                    },
                                    cryptoKey: {
                                        kmsWrapped: {
                                            cryptoKeyName: "Test string",
                                            wrappedKey: "Test string",
                                        },
                                        transient: {
                                            name: "Test string",
                                        },
                                        unwrapped: {
                                            key: "Test string",
                                        },
                                    },
                                    surrogateInfoType: {
                                        name: "Test string",
                                        version: "Test string",
                                    },
                                },
                                cryptoHashConfig: {
                                    cryptoKey: {
                                        kmsWrapped: {
                                            cryptoKeyName: "Test string",
                                            wrappedKey: "Test string",
                                        },
                                        transient: {
                                            name: "Test string",
                                        },
                                        unwrapped: {
                                            key: "Test string",
                                        },
                                    },
                                },
                                cryptoReplaceFfxFpeConfig: {
                                    commonAlphabet: "Test string",
                                    context: {
                                        name: "Test string",
                                    },
                                    cryptoKey: {
                                        kmsWrapped: {
                                            cryptoKeyName: "Test string",
                                            wrappedKey: "Test string",
                                        },
                                        transient: {
                                            name: "Test string",
                                        },
                                        unwrapped: {
                                            key: "Test string",
                                        },
                                    },
                                    customAlphabet: "Test string",
                                    radix: 42,
                                    surrogateInfoType: {
                                        name: "Test string",
                                        version: "Test string",
                                    },
                                },
                                dateShiftConfig: {
                                    context: {
                                        name: "Test string",
                                    },
                                    cryptoKey: {
                                        kmsWrapped: {
                                            cryptoKeyName: "Test string",
                                            wrappedKey: "Test string",
                                        },
                                        transient: {
                                            name: "Test string",
                                        },
                                        unwrapped: {
                                            key: "Test string",
                                        },
                                    },
                                    lowerBoundDays: 42,
                                    upperBoundDays: 42,
                                },
                                fixedSizeBucketingConfig: {
                                    bucketSize: 42,
                                    lowerBound: {
                                        booleanValue: true,
                                        dateValue: {
                                            day: 42,
                                            month: 42,
                                            year: 42,
                                        },
                                        dayOfWeekValue: "Test string",
                                        floatValue: 42,
                                        integerValue: "Test string",
                                        stringValue: "Test string",
                                        timestampValue: "Test string",
                                        timeValue: {
                                            hours: 42,
                                            minutes: 42,
                                            nanos: 42,
                                            seconds: 42,
                                        },
                                    },
                                    upperBound: {
                                        booleanValue: true,
                                        dateValue: {
                                            day: 42,
                                            month: 42,
                                            year: 42,
                                        },
                                        dayOfWeekValue: "Test string",
                                        floatValue: 42,
                                        integerValue: "Test string",
                                        stringValue: "Test string",
                                        timestampValue: "Test string",
                                        timeValue: {
                                            hours: 42,
                                            minutes: 42,
                                            nanos: 42,
                                            seconds: 42,
                                        },
                                    },
                                },
                                redactConfig: {
                                },
                                replaceConfig: {
                                    newValue: {
                                        booleanValue: true,
                                        dateValue: {
                                            day: 42,
                                            month: 42,
                                            year: 42,
                                        },
                                        dayOfWeekValue: "Test string",
                                        floatValue: 42,
                                        integerValue: "Test string",
                                        stringValue: "Test string",
                                        timestampValue: "Test string",
                                        timeValue: {
                                            hours: 42,
                                            minutes: 42,
                                            nanos: 42,
                                            seconds: 42,
                                        },
                                    },
                                },
                                replaceDictionaryConfig: {
                                    wordList: {
                                        words: [
                                            "Test string"
                                        ],
                                    },
                                },
                                replaceWithInfoTypeConfig: {
                                },
                                timePartConfig: {
                                    partToExtract: "Test string",
                                },
                            },
                        }
                    ],
                },
                recordTransformations: {
                    fieldTransformations: [
                        {
                            condition: {
                                expressions: {
                                    conditions: {
                                        conditions: [
                                            {
                                                field: {
                                                    name: "Test string",
                                                },
                                                operator: "Test string",
                                                value: {
                                                    booleanValue: true,
                                                    dateValue: {
                                                        day: 42,
                                                        month: 42,
                                                        year: 42,
                                                    },
                                                    dayOfWeekValue: "Test string",
                                                    floatValue: 42,
                                                    integerValue: "Test string",
                                                    stringValue: "Test string",
                                                    timestampValue: "Test string",
                                                    timeValue: {
                                                        hours: 42,
                                                        minutes: 42,
                                                        nanos: 42,
                                                        seconds: 42,
                                                    },
                                                },
                                            }
                                        ],
                                    },
                                    logicalOperator: "Test string",
                                },
                            },
                            fields: [
                                {
                                    name: "Test string",
                                }
                            ],
                            infoTypeTransformations: {
                                transformations: [
                                    {
                                        infoTypes: [
                                            {
                                                name: "Test string",
                                                version: "Test string",
                                            }
                                        ],
                                        primitiveTransformation: {
                                            bucketingConfig: {
                                                buckets: [
                                                    {
                                                        max: {
                                                            booleanValue: true,
                                                            dateValue: {
                                                                day: 42,
                                                                month: 42,
                                                                year: 42,
                                                            },
                                                            dayOfWeekValue: "Test string",
                                                            floatValue: 42,
                                                            integerValue: "Test string",
                                                            stringValue: "Test string",
                                                            timestampValue: "Test string",
                                                            timeValue: {
                                                                hours: 42,
                                                                minutes: 42,
                                                                nanos: 42,
                                                                seconds: 42,
                                                            },
                                                        },
                                                        min: {
                                                            booleanValue: true,
                                                            dateValue: {
                                                                day: 42,
                                                                month: 42,
                                                                year: 42,
                                                            },
                                                            dayOfWeekValue: "Test string",
                                                            floatValue: 42,
                                                            integerValue: "Test string",
                                                            stringValue: "Test string",
                                                            timestampValue: "Test string",
                                                            timeValue: {
                                                                hours: 42,
                                                                minutes: 42,
                                                                nanos: 42,
                                                                seconds: 42,
                                                            },
                                                        },
                                                        replacementValue: {
                                                            booleanValue: true,
                                                            dateValue: {
                                                                day: 42,
                                                                month: 42,
                                                                year: 42,
                                                            },
                                                            dayOfWeekValue: "Test string",
                                                            floatValue: 42,
                                                            integerValue: "Test string",
                                                            stringValue: "Test string",
                                                            timestampValue: "Test string",
                                                            timeValue: {
                                                                hours: 42,
                                                                minutes: 42,
                                                                nanos: 42,
                                                                seconds: 42,
                                                            },
                                                        },
                                                    }
                                                ],
                                            },
                                            characterMaskConfig: {
                                                charactersToIgnore: [
                                                    {
                                                        charactersToSkip: "Test string",
                                                        commonCharactersToIgnore: "Test string",
                                                    }
                                                ],
                                                maskingCharacter: "Test string",
                                                numberToMask: 42,
                                                reverseOrder: true,
                                            },
                                            cryptoDeterministicConfig: {
                                                context: {
                                                    name: "Test string",
                                                },
                                                cryptoKey: {
                                                    kmsWrapped: {
                                                        cryptoKeyName: "Test string",
                                                        wrappedKey: "Test string",
                                                    },
                                                    transient: {
                                                        name: "Test string",
                                                    },
                                                    unwrapped: {
                                                        key: "Test string",
                                                    },
                                                },
                                                surrogateInfoType: {
                                                    name: "Test string",
                                                    version: "Test string",
                                                },
                                            },
                                            cryptoHashConfig: {
                                                cryptoKey: {
                                                    kmsWrapped: {
                                                        cryptoKeyName: "Test string",
                                                        wrappedKey: "Test string",
                                                    },
                                                    transient: {
                                                        name: "Test string",
                                                    },
                                                    unwrapped: {
                                                        key: "Test string",
                                                    },
                                                },
                                            },
                                            cryptoReplaceFfxFpeConfig: {
                                                commonAlphabet: "Test string",
                                                context: {
                                                    name: "Test string",
                                                },
                                                cryptoKey: {
                                                    kmsWrapped: {
                                                        cryptoKeyName: "Test string",
                                                        wrappedKey: "Test string",
                                                    },
                                                    transient: {
                                                        name: "Test string",
                                                    },
                                                    unwrapped: {
                                                        key: "Test string",
                                                    },
                                                },
                                                customAlphabet: "Test string",
                                                radix: 42,
                                                surrogateInfoType: {
                                                    name: "Test string",
                                                    version: "Test string",
                                                },
                                            },
                                            dateShiftConfig: {
                                                context: {
                                                    name: "Test string",
                                                },
                                                cryptoKey: {
                                                    kmsWrapped: {
                                                        cryptoKeyName: "Test string",
                                                        wrappedKey: "Test string",
                                                    },
                                                    transient: {
                                                        name: "Test string",
                                                    },
                                                    unwrapped: {
                                                        key: "Test string",
                                                    },
                                                },
                                                lowerBoundDays: 42,
                                                upperBoundDays: 42,
                                            },
                                            fixedSizeBucketingConfig: {
                                                bucketSize: 42,
                                                lowerBound: {
                                                    booleanValue: true,
                                                    dateValue: {
                                                        day: 42,
                                                        month: 42,
                                                        year: 42,
                                                    },
                                                    dayOfWeekValue: "Test string",
                                                    floatValue: 42,
                                                    integerValue: "Test string",
                                                    stringValue: "Test string",
                                                    timestampValue: "Test string",
                                                    timeValue: {
                                                        hours: 42,
                                                        minutes: 42,
                                                        nanos: 42,
                                                        seconds: 42,
                                                    },
                                                },
                                                upperBound: {
                                                    booleanValue: true,
                                                    dateValue: {
                                                        day: 42,
                                                        month: 42,
                                                        year: 42,
                                                    },
                                                    dayOfWeekValue: "Test string",
                                                    floatValue: 42,
                                                    integerValue: "Test string",
                                                    stringValue: "Test string",
                                                    timestampValue: "Test string",
                                                    timeValue: {
                                                        hours: 42,
                                                        minutes: 42,
                                                        nanos: 42,
                                                        seconds: 42,
                                                    },
                                                },
                                            },
                                            redactConfig: {
                                            },
                                            replaceConfig: {
                                                newValue: {
                                                    booleanValue: true,
                                                    dateValue: {
                                                        day: 42,
                                                        month: 42,
                                                        year: 42,
                                                    },
                                                    dayOfWeekValue: "Test string",
                                                    floatValue: 42,
                                                    integerValue: "Test string",
                                                    stringValue: "Test string",
                                                    timestampValue: "Test string",
                                                    timeValue: {
                                                        hours: 42,
                                                        minutes: 42,
                                                        nanos: 42,
                                                        seconds: 42,
                                                    },
                                                },
                                            },
                                            replaceDictionaryConfig: {
                                                wordList: {
                                                    words: [
                                                        "Test string"
                                                    ],
                                                },
                                            },
                                            replaceWithInfoTypeConfig: {
                                            },
                                            timePartConfig: {
                                                partToExtract: "Test string",
                                            },
                                        },
                                    }
                                ],
                            },
                            primitiveTransformation: {
                                bucketingConfig: {
                                    buckets: [
                                        {
                                            max: {
                                                booleanValue: true,
                                                dateValue: {
                                                    day: 42,
                                                    month: 42,
                                                    year: 42,
                                                },
                                                dayOfWeekValue: "Test string",
                                                floatValue: 42,
                                                integerValue: "Test string",
                                                stringValue: "Test string",
                                                timestampValue: "Test string",
                                                timeValue: {
                                                    hours: 42,
                                                    minutes: 42,
                                                    nanos: 42,
                                                    seconds: 42,
                                                },
                                            },
                                            min: {
                                                booleanValue: true,
                                                dateValue: {
                                                    day: 42,
                                                    month: 42,
                                                    year: 42,
                                                },
                                                dayOfWeekValue: "Test string",
                                                floatValue: 42,
                                                integerValue: "Test string",
                                                stringValue: "Test string",
                                                timestampValue: "Test string",
                                                timeValue: {
                                                    hours: 42,
                                                    minutes: 42,
                                                    nanos: 42,
                                                    seconds: 42,
                                                },
                                            },
                                            replacementValue: {
                                                booleanValue: true,
                                                dateValue: {
                                                    day: 42,
                                                    month: 42,
                                                    year: 42,
                                                },
                                                dayOfWeekValue: "Test string",
                                                floatValue: 42,
                                                integerValue: "Test string",
                                                stringValue: "Test string",
                                                timestampValue: "Test string",
                                                timeValue: {
                                                    hours: 42,
                                                    minutes: 42,
                                                    nanos: 42,
                                                    seconds: 42,
                                                },
                                            },
                                        }
                                    ],
                                },
                                characterMaskConfig: {
                                    charactersToIgnore: [
                                        {
                                            charactersToSkip: "Test string",
                                            commonCharactersToIgnore: "Test string",
                                        }
                                    ],
                                    maskingCharacter: "Test string",
                                    numberToMask: 42,
                                    reverseOrder: true,
                                },
                                cryptoDeterministicConfig: {
                                    context: {
                                        name: "Test string",
                                    },
                                    cryptoKey: {
                                        kmsWrapped: {
                                            cryptoKeyName: "Test string",
                                            wrappedKey: "Test string",
                                        },
                                        transient: {
                                            name: "Test string",
                                        },
                                        unwrapped: {
                                            key: "Test string",
                                        },
                                    },
                                    surrogateInfoType: {
                                        name: "Test string",
                                        version: "Test string",
                                    },
                                },
                                cryptoHashConfig: {
                                    cryptoKey: {
                                        kmsWrapped: {
                                            cryptoKeyName: "Test string",
                                            wrappedKey: "Test string",
                                        },
                                        transient: {
                                            name: "Test string",
                                        },
                                        unwrapped: {
                                            key: "Test string",
                                        },
                                    },
                                },
                                cryptoReplaceFfxFpeConfig: {
                                    commonAlphabet: "Test string",
                                    context: {
                                        name: "Test string",
                                    },
                                    cryptoKey: {
                                        kmsWrapped: {
                                            cryptoKeyName: "Test string",
                                            wrappedKey: "Test string",
                                        },
                                        transient: {
                                            name: "Test string",
                                        },
                                        unwrapped: {
                                            key: "Test string",
                                        },
                                    },
                                    customAlphabet: "Test string",
                                    radix: 42,
                                    surrogateInfoType: {
                                        name: "Test string",
                                        version: "Test string",
                                    },
                                },
                                dateShiftConfig: {
                                    context: {
                                        name: "Test string",
                                    },
                                    cryptoKey: {
                                        kmsWrapped: {
                                            cryptoKeyName: "Test string",
                                            wrappedKey: "Test string",
                                        },
                                        transient: {
                                            name: "Test string",
                                        },
                                        unwrapped: {
                                            key: "Test string",
                                        },
                                    },
                                    lowerBoundDays: 42,
                                    upperBoundDays: 42,
                                },
                                fixedSizeBucketingConfig: {
                                    bucketSize: 42,
                                    lowerBound: {
                                        booleanValue: true,
                                        dateValue: {
                                            day: 42,
                                            month: 42,
                                            year: 42,
                                        },
                                        dayOfWeekValue: "Test string",
                                        floatValue: 42,
                                        integerValue: "Test string",
                                        stringValue: "Test string",
                                        timestampValue: "Test string",
                                        timeValue: {
                                            hours: 42,
                                            minutes: 42,
                                            nanos: 42,
                                            seconds: 42,
                                        },
                                    },
                                    upperBound: {
                                        booleanValue: true,
                                        dateValue: {
                                            day: 42,
                                            month: 42,
                                            year: 42,
                                        },
                                        dayOfWeekValue: "Test string",
                                        floatValue: 42,
                                        integerValue: "Test string",
                                        stringValue: "Test string",
                                        timestampValue: "Test string",
                                        timeValue: {
                                            hours: 42,
                                            minutes: 42,
                                            nanos: 42,
                                            seconds: 42,
                                        },
                                    },
                                },
                                redactConfig: {
                                },
                                replaceConfig: {
                                    newValue: {
                                        booleanValue: true,
                                        dateValue: {
                                            day: 42,
                                            month: 42,
                                            year: 42,
                                        },
                                        dayOfWeekValue: "Test string",
                                        floatValue: 42,
                                        integerValue: "Test string",
                                        stringValue: "Test string",
                                        timestampValue: "Test string",
                                        timeValue: {
                                            hours: 42,
                                            minutes: 42,
                                            nanos: 42,
                                            seconds: 42,
                                        },
                                    },
                                },
                                replaceDictionaryConfig: {
                                    wordList: {
                                        words: [
                                            "Test string"
                                        ],
                                    },
                                },
                                replaceWithInfoTypeConfig: {
                                },
                                timePartConfig: {
                                    partToExtract: "Test string",
                                },
                            },
                        }
                    ],
                    recordSuppressions: [
                        {
                            condition: {
                                expressions: {
                                    conditions: {
                                        conditions: [
                                            {
                                                field: {
                                                    name: "Test string",
                                                },
                                                operator: "Test string",
                                                value: {
                                                    booleanValue: true,
                                                    dateValue: {
                                                        day: 42,
                                                        month: 42,
                                                        year: 42,
                                                    },
                                                    dayOfWeekValue: "Test string",
                                                    floatValue: 42,
                                                    integerValue: "Test string",
                                                    stringValue: "Test string",
                                                    timestampValue: "Test string",
                                                    timeValue: {
                                                        hours: 42,
                                                        minutes: 42,
                                                        nanos: 42,
                                                        seconds: 42,
                                                    },
                                                },
                                            }
                                        ],
                                    },
                                    logicalOperator: "Test string",
                                },
                            },
                        }
                    ],
                },
                transformationErrorHandling: {
                    leaveUntransformed: {
                    },
                    throwError: {
                    },
                },
            },
            reidentifyTemplateName: "Test string",
        });
        /**
         * Creates a DeidentifyTemplate for reusing frequently used configuration for de-identifying content, images, and storage. See https://cloud.google.com/dlp/docs/creating-templates-deid to
         * learn more.
         */
        await gapi.client.dlp.projects.locations.deidentifyTemplates.create({
            parent: "Test string",
        }, {
            deidentifyTemplate: {
                createTime: "Test string",
                deidentifyConfig: {
                    imageTransformations: {
                        transforms: [
                            {
                                allInfoTypes: {
                                },
                                allText: {
                                },
                                redactionColor: {
                                    blue: 42,
                                    green: 42,
                                    red: 42,
                                },
                                selectedInfoTypes: {
                                    infoTypes: [
                                        {
                                            name: "Test string",
                                            version: "Test string",
                                        }
                                    ],
                                },
                            }
                        ],
                    },
                    infoTypeTransformations: {
                        transformations: [
                            {
                                infoTypes: [
                                    {
                                        name: "Test string",
                                        version: "Test string",
                                    }
                                ],
                                primitiveTransformation: {
                                    bucketingConfig: {
                                        buckets: [
                                            {
                                                max: {
                                                    booleanValue: true,
                                                    dateValue: {
                                                        day: 42,
                                                        month: 42,
                                                        year: 42,
                                                    },
                                                    dayOfWeekValue: "Test string",
                                                    floatValue: 42,
                                                    integerValue: "Test string",
                                                    stringValue: "Test string",
                                                    timestampValue: "Test string",
                                                    timeValue: {
                                                        hours: 42,
                                                        minutes: 42,
                                                        nanos: 42,
                                                        seconds: 42,
                                                    },
                                                },
                                                min: {
                                                    booleanValue: true,
                                                    dateValue: {
                                                        day: 42,
                                                        month: 42,
                                                        year: 42,
                                                    },
                                                    dayOfWeekValue: "Test string",
                                                    floatValue: 42,
                                                    integerValue: "Test string",
                                                    stringValue: "Test string",
                                                    timestampValue: "Test string",
                                                    timeValue: {
                                                        hours: 42,
                                                        minutes: 42,
                                                        nanos: 42,
                                                        seconds: 42,
                                                    },
                                                },
                                                replacementValue: {
                                                    booleanValue: true,
                                                    dateValue: {
                                                        day: 42,
                                                        month: 42,
                                                        year: 42,
                                                    },
                                                    dayOfWeekValue: "Test string",
                                                    floatValue: 42,
                                                    integerValue: "Test string",
                                                    stringValue: "Test string",
                                                    timestampValue: "Test string",
                                                    timeValue: {
                                                        hours: 42,
                                                        minutes: 42,
                                                        nanos: 42,
                                                        seconds: 42,
                                                    },
                                                },
                                            }
                                        ],
                                    },
                                    characterMaskConfig: {
                                        charactersToIgnore: [
                                            {
                                                charactersToSkip: "Test string",
                                                commonCharactersToIgnore: "Test string",
                                            }
                                        ],
                                        maskingCharacter: "Test string",
                                        numberToMask: 42,
                                        reverseOrder: true,
                                    },
                                    cryptoDeterministicConfig: {
                                        context: {
                                            name: "Test string",
                                        },
                                        cryptoKey: {
                                            kmsWrapped: {
                                                cryptoKeyName: "Test string",
                                                wrappedKey: "Test string",
                                            },
                                            transient: {
                                                name: "Test string",
                                            },
                                            unwrapped: {
                                                key: "Test string",
                                            },
                                        },
                                        surrogateInfoType: {
                                            name: "Test string",
                                            version: "Test string",
                                        },
                                    },
                                    cryptoHashConfig: {
                                        cryptoKey: {
                                            kmsWrapped: {
                                                cryptoKeyName: "Test string",
                                                wrappedKey: "Test string",
                                            },
                                            transient: {
                                                name: "Test string",
                                            },
                                            unwrapped: {
                                                key: "Test string",
                                            },
                                        },
                                    },
                                    cryptoReplaceFfxFpeConfig: {
                                        commonAlphabet: "Test string",
                                        context: {
                                            name: "Test string",
                                        },
                                        cryptoKey: {
                                            kmsWrapped: {
                                                cryptoKeyName: "Test string",
                                                wrappedKey: "Test string",
                                            },
                                            transient: {
                                                name: "Test string",
                                            },
                                            unwrapped: {
                                                key: "Test string",
                                            },
                                        },
                                        customAlphabet: "Test string",
                                        radix: 42,
                                        surrogateInfoType: {
                                            name: "Test string",
                                            version: "Test string",
                                        },
                                    },
                                    dateShiftConfig: {
                                        context: {
                                            name: "Test string",
                                        },
                                        cryptoKey: {
                                            kmsWrapped: {
                                                cryptoKeyName: "Test string",
                                                wrappedKey: "Test string",
                                            },
                                            transient: {
                                                name: "Test string",
                                            },
                                            unwrapped: {
                                                key: "Test string",
                                            },
                                        },
                                        lowerBoundDays: 42,
                                        upperBoundDays: 42,
                                    },
                                    fixedSizeBucketingConfig: {
                                        bucketSize: 42,
                                        lowerBound: {
                                            booleanValue: true,
                                            dateValue: {
                                                day: 42,
                                                month: 42,
                                                year: 42,
                                            },
                                            dayOfWeekValue: "Test string",
                                            floatValue: 42,
                                            integerValue: "Test string",
                                            stringValue: "Test string",
                                            timestampValue: "Test string",
                                            timeValue: {
                                                hours: 42,
                                                minutes: 42,
                                                nanos: 42,
                                                seconds: 42,
                                            },
                                        },
                                        upperBound: {
                                            booleanValue: true,
                                            dateValue: {
                                                day: 42,
                                                month: 42,
                                                year: 42,
                                            },
                                            dayOfWeekValue: "Test string",
                                            floatValue: 42,
                                            integerValue: "Test string",
                                            stringValue: "Test string",
                                            timestampValue: "Test string",
                                            timeValue: {
                                                hours: 42,
                                                minutes: 42,
                                                nanos: 42,
                                                seconds: 42,
                                            },
                                        },
                                    },
                                    redactConfig: {
                                    },
                                    replaceConfig: {
                                        newValue: {
                                            booleanValue: true,
                                            dateValue: {
                                                day: 42,
                                                month: 42,
                                                year: 42,
                                            },
                                            dayOfWeekValue: "Test string",
                                            floatValue: 42,
                                            integerValue: "Test string",
                                            stringValue: "Test string",
                                            timestampValue: "Test string",
                                            timeValue: {
                                                hours: 42,
                                                minutes: 42,
                                                nanos: 42,
                                                seconds: 42,
                                            },
                                        },
                                    },
                                    replaceDictionaryConfig: {
                                        wordList: {
                                            words: [
                                                "Test string"
                                            ],
                                        },
                                    },
                                    replaceWithInfoTypeConfig: {
                                    },
                                    timePartConfig: {
                                        partToExtract: "Test string",
                                    },
                                },
                            }
                        ],
                    },
                    recordTransformations: {
                        fieldTransformations: [
                            {
                                condition: {
                                    expressions: {
                                        conditions: {
                                            conditions: [
                                                {
                                                    field: {
                                                        name: "Test string",
                                                    },
                                                    operator: "Test string",
                                                    value: {
                                                        booleanValue: true,
                                                        dateValue: {
                                                            day: 42,
                                                            month: 42,
                                                            year: 42,
                                                        },
                                                        dayOfWeekValue: "Test string",
                                                        floatValue: 42,
                                                        integerValue: "Test string",
                                                        stringValue: "Test string",
                                                        timestampValue: "Test string",
                                                        timeValue: {
                                                            hours: 42,
                                                            minutes: 42,
                                                            nanos: 42,
                                                            seconds: 42,
                                                        },
                                                    },
                                                }
                                            ],
                                        },
                                        logicalOperator: "Test string",
                                    },
                                },
                                fields: [
                                    {
                                        name: "Test string",
                                    }
                                ],
                                infoTypeTransformations: {
                                    transformations: [
                                        {
                                            infoTypes: [
                                                {
                                                    name: "Test string",
                                                    version: "Test string",
                                                }
                                            ],
                                            primitiveTransformation: {
                                                bucketingConfig: {
                                                    buckets: [
                                                        {
                                                            max: {
                                                                booleanValue: true,
                                                                dateValue: {
                                                                    day: 42,
                                                                    month: 42,
                                                                    year: 42,
                                                                },
                                                                dayOfWeekValue: "Test string",
                                                                floatValue: 42,
                                                                integerValue: "Test string",
                                                                stringValue: "Test string",
                                                                timestampValue: "Test string",
                                                                timeValue: {
                                                                    hours: 42,
                                                                    minutes: 42,
                                                                    nanos: 42,
                                                                    seconds: 42,
                                                                },
                                                            },
                                                            min: {
                                                                booleanValue: true,
                                                                dateValue: {
                                                                    day: 42,
                                                                    month: 42,
                                                                    year: 42,
                                                                },
                                                                dayOfWeekValue: "Test string",
                                                                floatValue: 42,
                                                                integerValue: "Test string",
                                                                stringValue: "Test string",
                                                                timestampValue: "Test string",
                                                                timeValue: {
                                                                    hours: 42,
                                                                    minutes: 42,
                                                                    nanos: 42,
                                                                    seconds: 42,
                                                                },
                                                            },
                                                            replacementValue: {
                                                                booleanValue: true,
                                                                dateValue: {
                                                                    day: 42,
                                                                    month: 42,
                                                                    year: 42,
                                                                },
                                                                dayOfWeekValue: "Test string",
                                                                floatValue: 42,
                                                                integerValue: "Test string",
                                                                stringValue: "Test string",
                                                                timestampValue: "Test string",
                                                                timeValue: {
                                                                    hours: 42,
                                                                    minutes: 42,
                                                                    nanos: 42,
                                                                    seconds: 42,
                                                                },
                                                            },
                                                        }
                                                    ],
                                                },
                                                characterMaskConfig: {
                                                    charactersToIgnore: [
                                                        {
                                                            charactersToSkip: "Test string",
                                                            commonCharactersToIgnore: "Test string",
                                                        }
                                                    ],
                                                    maskingCharacter: "Test string",
                                                    numberToMask: 42,
                                                    reverseOrder: true,
                                                },
                                                cryptoDeterministicConfig: {
                                                    context: {
                                                        name: "Test string",
                                                    },
                                                    cryptoKey: {
                                                        kmsWrapped: {
                                                            cryptoKeyName: "Test string",
                                                            wrappedKey: "Test string",
                                                        },
                                                        transient: {
                                                            name: "Test string",
                                                        },
                                                        unwrapped: {
                                                            key: "Test string",
                                                        },
                                                    },
                                                    surrogateInfoType: {
                                                        name: "Test string",
                                                        version: "Test string",
                                                    },
                                                },
                                                cryptoHashConfig: {
                                                    cryptoKey: {
                                                        kmsWrapped: {
                                                            cryptoKeyName: "Test string",
                                                            wrappedKey: "Test string",
                                                        },
                                                        transient: {
                                                            name: "Test string",
                                                        },
                                                        unwrapped: {
                                                            key: "Test string",
                                                        },
                                                    },
                                                },
                                                cryptoReplaceFfxFpeConfig: {
                                                    commonAlphabet: "Test string",
                                                    context: {
                                                        name: "Test string",
                                                    },
                                                    cryptoKey: {
                                                        kmsWrapped: {
                                                            cryptoKeyName: "Test string",
                                                            wrappedKey: "Test string",
                                                        },
                                                        transient: {
                                                            name: "Test string",
                                                        },
                                                        unwrapped: {
                                                            key: "Test string",
                                                        },
                                                    },
                                                    customAlphabet: "Test string",
                                                    radix: 42,
                                                    surrogateInfoType: {
                                                        name: "Test string",
                                                        version: "Test string",
                                                    },
                                                },
                                                dateShiftConfig: {
                                                    context: {
                                                        name: "Test string",
                                                    },
                                                    cryptoKey: {
                                                        kmsWrapped: {
                                                            cryptoKeyName: "Test string",
                                                            wrappedKey: "Test string",
                                                        },
                                                        transient: {
                                                            name: "Test string",
                                                        },
                                                        unwrapped: {
                                                            key: "Test string",
                                                        },
                                                    },
                                                    lowerBoundDays: 42,
                                                    upperBoundDays: 42,
                                                },
                                                fixedSizeBucketingConfig: {
                                                    bucketSize: 42,
                                                    lowerBound: {
                                                        booleanValue: true,
                                                        dateValue: {
                                                            day: 42,
                                                            month: 42,
                                                            year: 42,
                                                        },
                                                        dayOfWeekValue: "Test string",
                                                        floatValue: 42,
                                                        integerValue: "Test string",
                                                        stringValue: "Test string",
                                                        timestampValue: "Test string",
                                                        timeValue: {
                                                            hours: 42,
                                                            minutes: 42,
                                                            nanos: 42,
                                                            seconds: 42,
                                                        },
                                                    },
                                                    upperBound: {
                                                        booleanValue: true,
                                                        dateValue: {
                                                            day: 42,
                                                            month: 42,
                                                            year: 42,
                                                        },
                                                        dayOfWeekValue: "Test string",
                                                        floatValue: 42,
                                                        integerValue: "Test string",
                                                        stringValue: "Test string",
                                                        timestampValue: "Test string",
                                                        timeValue: {
                                                            hours: 42,
                                                            minutes: 42,
                                                            nanos: 42,
                                                            seconds: 42,
                                                        },
                                                    },
                                                },
                                                redactConfig: {
                                                },
                                                replaceConfig: {
                                                    newValue: {
                                                        booleanValue: true,
                                                        dateValue: {
                                                            day: 42,
                                                            month: 42,
                                                            year: 42,
                                                        },
                                                        dayOfWeekValue: "Test string",
                                                        floatValue: 42,
                                                        integerValue: "Test string",
                                                        stringValue: "Test string",
                                                        timestampValue: "Test string",
                                                        timeValue: {
                                                            hours: 42,
                                                            minutes: 42,
                                                            nanos: 42,
                                                            seconds: 42,
                                                        },
                                                    },
                                                },
                                                replaceDictionaryConfig: {
                                                    wordList: {
                                                        words: [
                                                            "Test string"
                                                        ],
                                                    },
                                                },
                                                replaceWithInfoTypeConfig: {
                                                },
                                                timePartConfig: {
                                                    partToExtract: "Test string",
                                                },
                                            },
                                        }
                                    ],
                                },
                                primitiveTransformation: {
                                    bucketingConfig: {
                                        buckets: [
                                            {
                                                max: {
                                                    booleanValue: true,
                                                    dateValue: {
                                                        day: 42,
                                                        month: 42,
                                                        year: 42,
                                                    },
                                                    dayOfWeekValue: "Test string",
                                                    floatValue: 42,
                                                    integerValue: "Test string",
                                                    stringValue: "Test string",
                                                    timestampValue: "Test string",
                                                    timeValue: {
                                                        hours: 42,
                                                        minutes: 42,
                                                        nanos: 42,
                                                        seconds: 42,
                                                    },
                                                },
                                                min: {
                                                    booleanValue: true,
                                                    dateValue: {
                                                        day: 42,
                                                        month: 42,
                                                        year: 42,
                                                    },
                                                    dayOfWeekValue: "Test string",
                                                    floatValue: 42,
                                                    integerValue: "Test string",
                                                    stringValue: "Test string",
                                                    timestampValue: "Test string",
                                                    timeValue: {
                                                        hours: 42,
                                                        minutes: 42,
                                                        nanos: 42,
                                                        seconds: 42,
                                                    },
                                                },
                                                replacementValue: {
                                                    booleanValue: true,
                                                    dateValue: {
                                                        day: 42,
                                                        month: 42,
                                                        year: 42,
                                                    },
                                                    dayOfWeekValue: "Test string",
                                                    floatValue: 42,
                                                    integerValue: "Test string",
                                                    stringValue: "Test string",
                                                    timestampValue: "Test string",
                                                    timeValue: {
                                                        hours: 42,
                                                        minutes: 42,
                                                        nanos: 42,
                                                        seconds: 42,
                                                    },
                                                },
                                            }
                                        ],
                                    },
                                    characterMaskConfig: {
                                        charactersToIgnore: [
                                            {
                                                charactersToSkip: "Test string",
                                                commonCharactersToIgnore: "Test string",
                                            }
                                        ],
                                        maskingCharacter: "Test string",
                                        numberToMask: 42,
                                        reverseOrder: true,
                                    },
                                    cryptoDeterministicConfig: {
                                        context: {
                                            name: "Test string",
                                        },
                                        cryptoKey: {
                                            kmsWrapped: {
                                                cryptoKeyName: "Test string",
                                                wrappedKey: "Test string",
                                            },
                                            transient: {
                                                name: "Test string",
                                            },
                                            unwrapped: {
                                                key: "Test string",
                                            },
                                        },
                                        surrogateInfoType: {
                                            name: "Test string",
                                            version: "Test string",
                                        },
                                    },
                                    cryptoHashConfig: {
                                        cryptoKey: {
                                            kmsWrapped: {
                                                cryptoKeyName: "Test string",
                                                wrappedKey: "Test string",
                                            },
                                            transient: {
                                                name: "Test string",
                                            },
                                            unwrapped: {
                                                key: "Test string",
                                            },
                                        },
                                    },
                                    cryptoReplaceFfxFpeConfig: {
                                        commonAlphabet: "Test string",
                                        context: {
                                            name: "Test string",
                                        },
                                        cryptoKey: {
                                            kmsWrapped: {
                                                cryptoKeyName: "Test string",
                                                wrappedKey: "Test string",
                                            },
                                            transient: {
                                                name: "Test string",
                                            },
                                            unwrapped: {
                                                key: "Test string",
                                            },
                                        },
                                        customAlphabet: "Test string",
                                        radix: 42,
                                        surrogateInfoType: {
                                            name: "Test string",
                                            version: "Test string",
                                        },
                                    },
                                    dateShiftConfig: {
                                        context: {
                                            name: "Test string",
                                        },
                                        cryptoKey: {
                                            kmsWrapped: {
                                                cryptoKeyName: "Test string",
                                                wrappedKey: "Test string",
                                            },
                                            transient: {
                                                name: "Test string",
                                            },
                                            unwrapped: {
                                                key: "Test string",
                                            },
                                        },
                                        lowerBoundDays: 42,
                                        upperBoundDays: 42,
                                    },
                                    fixedSizeBucketingConfig: {
                                        bucketSize: 42,
                                        lowerBound: {
                                            booleanValue: true,
                                            dateValue: {
                                                day: 42,
                                                month: 42,
                                                year: 42,
                                            },
                                            dayOfWeekValue: "Test string",
                                            floatValue: 42,
                                            integerValue: "Test string",
                                            stringValue: "Test string",
                                            timestampValue: "Test string",
                                            timeValue: {
                                                hours: 42,
                                                minutes: 42,
                                                nanos: 42,
                                                seconds: 42,
                                            },
                                        },
                                        upperBound: {
                                            booleanValue: true,
                                            dateValue: {
                                                day: 42,
                                                month: 42,
                                                year: 42,
                                            },
                                            dayOfWeekValue: "Test string",
                                            floatValue: 42,
                                            integerValue: "Test string",
                                            stringValue: "Test string",
                                            timestampValue: "Test string",
                                            timeValue: {
                                                hours: 42,
                                                minutes: 42,
                                                nanos: 42,
                                                seconds: 42,
                                            },
                                        },
                                    },
                                    redactConfig: {
                                    },
                                    replaceConfig: {
                                        newValue: {
                                            booleanValue: true,
                                            dateValue: {
                                                day: 42,
                                                month: 42,
                                                year: 42,
                                            },
                                            dayOfWeekValue: "Test string",
                                            floatValue: 42,
                                            integerValue: "Test string",
                                            stringValue: "Test string",
                                            timestampValue: "Test string",
                                            timeValue: {
                                                hours: 42,
                                                minutes: 42,
                                                nanos: 42,
                                                seconds: 42,
                                            },
                                        },
                                    },
                                    replaceDictionaryConfig: {
                                        wordList: {
                                            words: [
                                                "Test string"
                                            ],
                                        },
                                    },
                                    replaceWithInfoTypeConfig: {
                                    },
                                    timePartConfig: {
                                        partToExtract: "Test string",
                                    },
                                },
                            }
                        ],
                        recordSuppressions: [
                            {
                                condition: {
                                    expressions: {
                                        conditions: {
                                            conditions: [
                                                {
                                                    field: {
                                                        name: "Test string",
                                                    },
                                                    operator: "Test string",
                                                    value: {
                                                        booleanValue: true,
                                                        dateValue: {
                                                            day: 42,
                                                            month: 42,
                                                            year: 42,
                                                        },
                                                        dayOfWeekValue: "Test string",
                                                        floatValue: 42,
                                                        integerValue: "Test string",
                                                        stringValue: "Test string",
                                                        timestampValue: "Test string",
                                                        timeValue: {
                                                            hours: 42,
                                                            minutes: 42,
                                                            nanos: 42,
                                                            seconds: 42,
                                                        },
                                                    },
                                                }
                                            ],
                                        },
                                        logicalOperator: "Test string",
                                    },
                                },
                            }
                        ],
                    },
                    transformationErrorHandling: {
                        leaveUntransformed: {
                        },
                        throwError: {
                        },
                    },
                },
                description: "Test string",
                displayName: "Test string",
                name: "Test string",
                updateTime: "Test string",
            },
            locationId: "Test string",
            templateId: "Test string",
        });
        /** Deletes a DeidentifyTemplate. See https://cloud.google.com/dlp/docs/creating-templates-deid to learn more. */
        await gapi.client.dlp.projects.locations.deidentifyTemplates.delete({
            name: "Test string",
        });
        /** Gets a DeidentifyTemplate. See https://cloud.google.com/dlp/docs/creating-templates-deid to learn more. */
        await gapi.client.dlp.projects.locations.deidentifyTemplates.get({
            name: "Test string",
        });
        /** Lists DeidentifyTemplates. See https://cloud.google.com/dlp/docs/creating-templates-deid to learn more. */
        await gapi.client.dlp.projects.locations.deidentifyTemplates.list({
            locationId: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the DeidentifyTemplate. See https://cloud.google.com/dlp/docs/creating-templates-deid to learn more. */
        await gapi.client.dlp.projects.locations.deidentifyTemplates.patch({
            name: "Test string",
        }, {
            deidentifyTemplate: {
                createTime: "Test string",
                deidentifyConfig: {
                    imageTransformations: {
                        transforms: [
                            {
                                allInfoTypes: {
                                },
                                allText: {
                                },
                                redactionColor: {
                                    blue: 42,
                                    green: 42,
                                    red: 42,
                                },
                                selectedInfoTypes: {
                                    infoTypes: [
                                        {
                                            name: "Test string",
                                            version: "Test string",
                                        }
                                    ],
                                },
                            }
                        ],
                    },
                    infoTypeTransformations: {
                        transformations: [
                            {
                                infoTypes: [
                                    {
                                        name: "Test string",
                                        version: "Test string",
                                    }
                                ],
                                primitiveTransformation: {
                                    bucketingConfig: {
                                        buckets: [
                                            {
                                                max: {
                                                    booleanValue: true,
                                                    dateValue: {
                                                        day: 42,
                                                        month: 42,
                                                        year: 42,
                                                    },
                                                    dayOfWeekValue: "Test string",
                                                    floatValue: 42,
                                                    integerValue: "Test string",
                                                    stringValue: "Test string",
                                                    timestampValue: "Test string",
                                                    timeValue: {
                                                        hours: 42,
                                                        minutes: 42,
                                                        nanos: 42,
                                                        seconds: 42,
                                                    },
                                                },
                                                min: {
                                                    booleanValue: true,
                                                    dateValue: {
                                                        day: 42,
                                                        month: 42,
                                                        year: 42,
                                                    },
                                                    dayOfWeekValue: "Test string",
                                                    floatValue: 42,
                                                    integerValue: "Test string",
                                                    stringValue: "Test string",
                                                    timestampValue: "Test string",
                                                    timeValue: {
                                                        hours: 42,
                                                        minutes: 42,
                                                        nanos: 42,
                                                        seconds: 42,
                                                    },
                                                },
                                                replacementValue: {
                                                    booleanValue: true,
                                                    dateValue: {
                                                        day: 42,
                                                        month: 42,
                                                        year: 42,
                                                    },
                                                    dayOfWeekValue: "Test string",
                                                    floatValue: 42,
                                                    integerValue: "Test string",
                                                    stringValue: "Test string",
                                                    timestampValue: "Test string",
                                                    timeValue: {
                                                        hours: 42,
                                                        minutes: 42,
                                                        nanos: 42,
                                                        seconds: 42,
                                                    },
                                                },
                                            }
                                        ],
                                    },
                                    characterMaskConfig: {
                                        charactersToIgnore: [
                                            {
                                                charactersToSkip: "Test string",
                                                commonCharactersToIgnore: "Test string",
                                            }
                                        ],
                                        maskingCharacter: "Test string",
                                        numberToMask: 42,
                                        reverseOrder: true,
                                    },
                                    cryptoDeterministicConfig: {
                                        context: {
                                            name: "Test string",
                                        },
                                        cryptoKey: {
                                            kmsWrapped: {
                                                cryptoKeyName: "Test string",
                                                wrappedKey: "Test string",
                                            },
                                            transient: {
                                                name: "Test string",
                                            },
                                            unwrapped: {
                                                key: "Test string",
                                            },
                                        },
                                        surrogateInfoType: {
                                            name: "Test string",
                                            version: "Test string",
                                        },
                                    },
                                    cryptoHashConfig: {
                                        cryptoKey: {
                                            kmsWrapped: {
                                                cryptoKeyName: "Test string",
                                                wrappedKey: "Test string",
                                            },
                                            transient: {
                                                name: "Test string",
                                            },
                                            unwrapped: {
                                                key: "Test string",
                                            },
                                        },
                                    },
                                    cryptoReplaceFfxFpeConfig: {
                                        commonAlphabet: "Test string",
                                        context: {
                                            name: "Test string",
                                        },
                                        cryptoKey: {
                                            kmsWrapped: {
                                                cryptoKeyName: "Test string",
                                                wrappedKey: "Test string",
                                            },
                                            transient: {
                                                name: "Test string",
                                            },
                                            unwrapped: {
                                                key: "Test string",
                                            },
                                        },
                                        customAlphabet: "Test string",
                                        radix: 42,
                                        surrogateInfoType: {
                                            name: "Test string",
                                            version: "Test string",
                                        },
                                    },
                                    dateShiftConfig: {
                                        context: {
                                            name: "Test string",
                                        },
                                        cryptoKey: {
                                            kmsWrapped: {
                                                cryptoKeyName: "Test string",
                                                wrappedKey: "Test string",
                                            },
                                            transient: {
                                                name: "Test string",
                                            },
                                            unwrapped: {
                                                key: "Test string",
                                            },
                                        },
                                        lowerBoundDays: 42,
                                        upperBoundDays: 42,
                                    },
                                    fixedSizeBucketingConfig: {
                                        bucketSize: 42,
                                        lowerBound: {
                                            booleanValue: true,
                                            dateValue: {
                                                day: 42,
                                                month: 42,
                                                year: 42,
                                            },
                                            dayOfWeekValue: "Test string",
                                            floatValue: 42,
                                            integerValue: "Test string",
                                            stringValue: "Test string",
                                            timestampValue: "Test string",
                                            timeValue: {
                                                hours: 42,
                                                minutes: 42,
                                                nanos: 42,
                                                seconds: 42,
                                            },
                                        },
                                        upperBound: {
                                            booleanValue: true,
                                            dateValue: {
                                                day: 42,
                                                month: 42,
                                                year: 42,
                                            },
                                            dayOfWeekValue: "Test string",
                                            floatValue: 42,
                                            integerValue: "Test string",
                                            stringValue: "Test string",
                                            timestampValue: "Test string",
                                            timeValue: {
                                                hours: 42,
                                                minutes: 42,
                                                nanos: 42,
                                                seconds: 42,
                                            },
                                        },
                                    },
                                    redactConfig: {
                                    },
                                    replaceConfig: {
                                        newValue: {
                                            booleanValue: true,
                                            dateValue: {
                                                day: 42,
                                                month: 42,
                                                year: 42,
                                            },
                                            dayOfWeekValue: "Test string",
                                            floatValue: 42,
                                            integerValue: "Test string",
                                            stringValue: "Test string",
                                            timestampValue: "Test string",
                                            timeValue: {
                                                hours: 42,
                                                minutes: 42,
                                                nanos: 42,
                                                seconds: 42,
                                            },
                                        },
                                    },
                                    replaceDictionaryConfig: {
                                        wordList: {
                                            words: [
                                                "Test string"
                                            ],
                                        },
                                    },
                                    replaceWithInfoTypeConfig: {
                                    },
                                    timePartConfig: {
                                        partToExtract: "Test string",
                                    },
                                },
                            }
                        ],
                    },
                    recordTransformations: {
                        fieldTransformations: [
                            {
                                condition: {
                                    expressions: {
                                        conditions: {
                                            conditions: [
                                                {
                                                    field: {
                                                        name: "Test string",
                                                    },
                                                    operator: "Test string",
                                                    value: {
                                                        booleanValue: true,
                                                        dateValue: {
                                                            day: 42,
                                                            month: 42,
                                                            year: 42,
                                                        },
                                                        dayOfWeekValue: "Test string",
                                                        floatValue: 42,
                                                        integerValue: "Test string",
                                                        stringValue: "Test string",
                                                        timestampValue: "Test string",
                                                        timeValue: {
                                                            hours: 42,
                                                            minutes: 42,
                                                            nanos: 42,
                                                            seconds: 42,
                                                        },
                                                    },
                                                }
                                            ],
                                        },
                                        logicalOperator: "Test string",
                                    },
                                },
                                fields: [
                                    {
                                        name: "Test string",
                                    }
                                ],
                                infoTypeTransformations: {
                                    transformations: [
                                        {
                                            infoTypes: [
                                                {
                                                    name: "Test string",
                                                    version: "Test string",
                                                }
                                            ],
                                            primitiveTransformation: {
                                                bucketingConfig: {
                                                    buckets: [
                                                        {
                                                            max: {
                                                                booleanValue: true,
                                                                dateValue: {
                                                                    day: 42,
                                                                    month: 42,
                                                                    year: 42,
                                                                },
                                                                dayOfWeekValue: "Test string",
                                                                floatValue: 42,
                                                                integerValue: "Test string",
                                                                stringValue: "Test string",
                                                                timestampValue: "Test string",
                                                                timeValue: {
                                                                    hours: 42,
                                                                    minutes: 42,
                                                                    nanos: 42,
                                                                    seconds: 42,
                                                                },
                                                            },
                                                            min: {
                                                                booleanValue: true,
                                                                dateValue: {
                                                                    day: 42,
                                                                    month: 42,
                                                                    year: 42,
                                                                },
                                                                dayOfWeekValue: "Test string",
                                                                floatValue: 42,
                                                                integerValue: "Test string",
                                                                stringValue: "Test string",
                                                                timestampValue: "Test string",
                                                                timeValue: {
                                                                    hours: 42,
                                                                    minutes: 42,
                                                                    nanos: 42,
                                                                    seconds: 42,
                                                                },
                                                            },
                                                            replacementValue: {
                                                                booleanValue: true,
                                                                dateValue: {
                                                                    day: 42,
                                                                    month: 42,
                                                                    year: 42,
                                                                },
                                                                dayOfWeekValue: "Test string",
                                                                floatValue: 42,
                                                                integerValue: "Test string",
                                                                stringValue: "Test string",
                                                                timestampValue: "Test string",
                                                                timeValue: {
                                                                    hours: 42,
                                                                    minutes: 42,
                                                                    nanos: 42,
                                                                    seconds: 42,
                                                                },
                                                            },
                                                        }
                                                    ],
                                                },
                                                characterMaskConfig: {
                                                    charactersToIgnore: [
                                                        {
                                                            charactersToSkip: "Test string",
                                                            commonCharactersToIgnore: "Test string",
                                                        }
                                                    ],
                                                    maskingCharacter: "Test string",
                                                    numberToMask: 42,
                                                    reverseOrder: true,
                                                },
                                                cryptoDeterministicConfig: {
                                                    context: {
                                                        name: "Test string",
                                                    },
                                                    cryptoKey: {
                                                        kmsWrapped: {
                                                            cryptoKeyName: "Test string",
                                                            wrappedKey: "Test string",
                                                        },
                                                        transient: {
                                                            name: "Test string",
                                                        },
                                                        unwrapped: {
                                                            key: "Test string",
                                                        },
                                                    },
                                                    surrogateInfoType: {
                                                        name: "Test string",
                                                        version: "Test string",
                                                    },
                                                },
                                                cryptoHashConfig: {
                                                    cryptoKey: {
                                                        kmsWrapped: {
                                                            cryptoKeyName: "Test string",
                                                            wrappedKey: "Test string",
                                                        },
                                                        transient: {
                                                            name: "Test string",
                                                        },
                                                        unwrapped: {
                                                            key: "Test string",
                                                        },
                                                    },
                                                },
                                                cryptoReplaceFfxFpeConfig: {
                                                    commonAlphabet: "Test string",
                                                    context: {
                                                        name: "Test string",
                                                    },
                                                    cryptoKey: {
                                                        kmsWrapped: {
                                                            cryptoKeyName: "Test string",
                                                            wrappedKey: "Test string",
                                                        },
                                                        transient: {
                                                            name: "Test string",
                                                        },
                                                        unwrapped: {
                                                            key: "Test string",
                                                        },
                                                    },
                                                    customAlphabet: "Test string",
                                                    radix: 42,
                                                    surrogateInfoType: {
                                                        name: "Test string",
                                                        version: "Test string",
                                                    },
                                                },
                                                dateShiftConfig: {
                                                    context: {
                                                        name: "Test string",
                                                    },
                                                    cryptoKey: {
                                                        kmsWrapped: {
                                                            cryptoKeyName: "Test string",
                                                            wrappedKey: "Test string",
                                                        },
                                                        transient: {
                                                            name: "Test string",
                                                        },
                                                        unwrapped: {
                                                            key: "Test string",
                                                        },
                                                    },
                                                    lowerBoundDays: 42,
                                                    upperBoundDays: 42,
                                                },
                                                fixedSizeBucketingConfig: {
                                                    bucketSize: 42,
                                                    lowerBound: {
                                                        booleanValue: true,
                                                        dateValue: {
                                                            day: 42,
                                                            month: 42,
                                                            year: 42,
                                                        },
                                                        dayOfWeekValue: "Test string",
                                                        floatValue: 42,
                                                        integerValue: "Test string",
                                                        stringValue: "Test string",
                                                        timestampValue: "Test string",
                                                        timeValue: {
                                                            hours: 42,
                                                            minutes: 42,
                                                            nanos: 42,
                                                            seconds: 42,
                                                        },
                                                    },
                                                    upperBound: {
                                                        booleanValue: true,
                                                        dateValue: {
                                                            day: 42,
                                                            month: 42,
                                                            year: 42,
                                                        },
                                                        dayOfWeekValue: "Test string",
                                                        floatValue: 42,
                                                        integerValue: "Test string",
                                                        stringValue: "Test string",
                                                        timestampValue: "Test string",
                                                        timeValue: {
                                                            hours: 42,
                                                            minutes: 42,
                                                            nanos: 42,
                                                            seconds: 42,
                                                        },
                                                    },
                                                },
                                                redactConfig: {
                                                },
                                                replaceConfig: {
                                                    newValue: {
                                                        booleanValue: true,
                                                        dateValue: {
                                                            day: 42,
                                                            month: 42,
                                                            year: 42,
                                                        },
                                                        dayOfWeekValue: "Test string",
                                                        floatValue: 42,
                                                        integerValue: "Test string",
                                                        stringValue: "Test string",
                                                        timestampValue: "Test string",
                                                        timeValue: {
                                                            hours: 42,
                                                            minutes: 42,
                                                            nanos: 42,
                                                            seconds: 42,
                                                        },
                                                    },
                                                },
                                                replaceDictionaryConfig: {
                                                    wordList: {
                                                        words: [
                                                            "Test string"
                                                        ],
                                                    },
                                                },
                                                replaceWithInfoTypeConfig: {
                                                },
                                                timePartConfig: {
                                                    partToExtract: "Test string",
                                                },
                                            },
                                        }
                                    ],
                                },
                                primitiveTransformation: {
                                    bucketingConfig: {
                                        buckets: [
                                            {
                                                max: {
                                                    booleanValue: true,
                                                    dateValue: {
                                                        day: 42,
                                                        month: 42,
                                                        year: 42,
                                                    },
                                                    dayOfWeekValue: "Test string",
                                                    floatValue: 42,
                                                    integerValue: "Test string",
                                                    stringValue: "Test string",
                                                    timestampValue: "Test string",
                                                    timeValue: {
                                                        hours: 42,
                                                        minutes: 42,
                                                        nanos: 42,
                                                        seconds: 42,
                                                    },
                                                },
                                                min: {
                                                    booleanValue: true,
                                                    dateValue: {
                                                        day: 42,
                                                        month: 42,
                                                        year: 42,
                                                    },
                                                    dayOfWeekValue: "Test string",
                                                    floatValue: 42,
                                                    integerValue: "Test string",
                                                    stringValue: "Test string",
                                                    timestampValue: "Test string",
                                                    timeValue: {
                                                        hours: 42,
                                                        minutes: 42,
                                                        nanos: 42,
                                                        seconds: 42,
                                                    },
                                                },
                                                replacementValue: {
                                                    booleanValue: true,
                                                    dateValue: {
                                                        day: 42,
                                                        month: 42,
                                                        year: 42,
                                                    },
                                                    dayOfWeekValue: "Test string",
                                                    floatValue: 42,
                                                    integerValue: "Test string",
                                                    stringValue: "Test string",
                                                    timestampValue: "Test string",
                                                    timeValue: {
                                                        hours: 42,
                                                        minutes: 42,
                                                        nanos: 42,
                                                        seconds: 42,
                                                    },
                                                },
                                            }
                                        ],
                                    },
                                    characterMaskConfig: {
                                        charactersToIgnore: [
                                            {
                                                charactersToSkip: "Test string",
                                                commonCharactersToIgnore: "Test string",
                                            }
                                        ],
                                        maskingCharacter: "Test string",
                                        numberToMask: 42,
                                        reverseOrder: true,
                                    },
                                    cryptoDeterministicConfig: {
                                        context: {
                                            name: "Test string",
                                        },
                                        cryptoKey: {
                                            kmsWrapped: {
                                                cryptoKeyName: "Test string",
                                                wrappedKey: "Test string",
                                            },
                                            transient: {
                                                name: "Test string",
                                            },
                                            unwrapped: {
                                                key: "Test string",
                                            },
                                        },
                                        surrogateInfoType: {
                                            name: "Test string",
                                            version: "Test string",
                                        },
                                    },
                                    cryptoHashConfig: {
                                        cryptoKey: {
                                            kmsWrapped: {
                                                cryptoKeyName: "Test string",
                                                wrappedKey: "Test string",
                                            },
                                            transient: {
                                                name: "Test string",
                                            },
                                            unwrapped: {
                                                key: "Test string",
                                            },
                                        },
                                    },
                                    cryptoReplaceFfxFpeConfig: {
                                        commonAlphabet: "Test string",
                                        context: {
                                            name: "Test string",
                                        },
                                        cryptoKey: {
                                            kmsWrapped: {
                                                cryptoKeyName: "Test string",
                                                wrappedKey: "Test string",
                                            },
                                            transient: {
                                                name: "Test string",
                                            },
                                            unwrapped: {
                                                key: "Test string",
                                            },
                                        },
                                        customAlphabet: "Test string",
                                        radix: 42,
                                        surrogateInfoType: {
                                            name: "Test string",
                                            version: "Test string",
                                        },
                                    },
                                    dateShiftConfig: {
                                        context: {
                                            name: "Test string",
                                        },
                                        cryptoKey: {
                                            kmsWrapped: {
                                                cryptoKeyName: "Test string",
                                                wrappedKey: "Test string",
                                            },
                                            transient: {
                                                name: "Test string",
                                            },
                                            unwrapped: {
                                                key: "Test string",
                                            },
                                        },
                                        lowerBoundDays: 42,
                                        upperBoundDays: 42,
                                    },
                                    fixedSizeBucketingConfig: {
                                        bucketSize: 42,
                                        lowerBound: {
                                            booleanValue: true,
                                            dateValue: {
                                                day: 42,
                                                month: 42,
                                                year: 42,
                                            },
                                            dayOfWeekValue: "Test string",
                                            floatValue: 42,
                                            integerValue: "Test string",
                                            stringValue: "Test string",
                                            timestampValue: "Test string",
                                            timeValue: {
                                                hours: 42,
                                                minutes: 42,
                                                nanos: 42,
                                                seconds: 42,
                                            },
                                        },
                                        upperBound: {
                                            booleanValue: true,
                                            dateValue: {
                                                day: 42,
                                                month: 42,
                                                year: 42,
                                            },
                                            dayOfWeekValue: "Test string",
                                            floatValue: 42,
                                            integerValue: "Test string",
                                            stringValue: "Test string",
                                            timestampValue: "Test string",
                                            timeValue: {
                                                hours: 42,
                                                minutes: 42,
                                                nanos: 42,
                                                seconds: 42,
                                            },
                                        },
                                    },
                                    redactConfig: {
                                    },
                                    replaceConfig: {
                                        newValue: {
                                            booleanValue: true,
                                            dateValue: {
                                                day: 42,
                                                month: 42,
                                                year: 42,
                                            },
                                            dayOfWeekValue: "Test string",
                                            floatValue: 42,
                                            integerValue: "Test string",
                                            stringValue: "Test string",
                                            timestampValue: "Test string",
                                            timeValue: {
                                                hours: 42,
                                                minutes: 42,
                                                nanos: 42,
                                                seconds: 42,
                                            },
                                        },
                                    },
                                    replaceDictionaryConfig: {
                                        wordList: {
                                            words: [
                                                "Test string"
                                            ],
                                        },
                                    },
                                    replaceWithInfoTypeConfig: {
                                    },
                                    timePartConfig: {
                                        partToExtract: "Test string",
                                    },
                                },
                            }
                        ],
                        recordSuppressions: [
                            {
                                condition: {
                                    expressions: {
                                        conditions: {
                                            conditions: [
                                                {
                                                    field: {
                                                        name: "Test string",
                                                    },
                                                    operator: "Test string",
                                                    value: {
                                                        booleanValue: true,
                                                        dateValue: {
                                                            day: 42,
                                                            month: 42,
                                                            year: 42,
                                                        },
                                                        dayOfWeekValue: "Test string",
                                                        floatValue: 42,
                                                        integerValue: "Test string",
                                                        stringValue: "Test string",
                                                        timestampValue: "Test string",
                                                        timeValue: {
                                                            hours: 42,
                                                            minutes: 42,
                                                            nanos: 42,
                                                            seconds: 42,
                                                        },
                                                    },
                                                }
                                            ],
                                        },
                                        logicalOperator: "Test string",
                                    },
                                },
                            }
                        ],
                    },
                    transformationErrorHandling: {
                        leaveUntransformed: {
                        },
                        throwError: {
                        },
                    },
                },
                description: "Test string",
                displayName: "Test string",
                name: "Test string",
                updateTime: "Test string",
            },
            updateMask: "Test string",
        });
        /**
         * Starts asynchronous cancellation on a long-running DlpJob. The server makes a best effort to cancel the DlpJob, but success is not guaranteed. See
         * https://cloud.google.com/dlp/docs/inspecting-storage and https://cloud.google.com/dlp/docs/compute-risk-analysis to learn more.
         */
        await gapi.client.dlp.projects.locations.dlpJobs.cancel({
            name: "Test string",
        }, {
        });
        /**
         * Creates a new job to inspect storage or calculate risk metrics. See https://cloud.google.com/dlp/docs/inspecting-storage and https://cloud.google.com/dlp/docs/compute-risk-analysis to
         * learn more. When no InfoTypes or CustomInfoTypes are specified in inspect jobs, the system will automatically choose what detectors to run. By default this may be all types, but may
         * change over time as detectors are updated.
         */
        await gapi.client.dlp.projects.locations.dlpJobs.create({
            parent: "Test string",
        }, {
            inspectJob: {
                actions: [
                    {
                        deidentify: {
                            cloudStorageOutput: "Test string",
                            fileTypesToTransform: [
                                "Test string"
                            ],
                            transformationConfig: {
                                deidentifyTemplate: "Test string",
                                imageRedactTemplate: "Test string",
                                structuredDeidentifyTemplate: "Test string",
                            },
                            transformationDetailsStorageConfig: {
                                table: {
                                    datasetId: "Test string",
                                    projectId: "Test string",
                                    tableId: "Test string",
                                },
                            },
                        },
                        jobNotificationEmails: {
                        },
                        publishFindingsToCloudDataCatalog: {
                        },
                        publishSummaryToCscc: {
                        },
                        publishToStackdriver: {
                        },
                        pubSub: {
                            topic: "Test string",
                        },
                        saveFindings: {
                            outputConfig: {
                                outputSchema: "Test string",
                                table: {
                                    datasetId: "Test string",
                                    projectId: "Test string",
                                    tableId: "Test string",
                                },
                            },
                        },
                    }
                ],
                inspectConfig: {
                    contentOptions: [
                        "Test string"
                    ],
                    customInfoTypes: [
                        {
                            detectionRules: [
                                {
                                    hotwordRule: {
                                        hotwordRegex: {
                                            groupIndexes: [
                                                42
                                            ],
                                            pattern: "Test string",
                                        },
                                        likelihoodAdjustment: {
                                            fixedLikelihood: "Test string",
                                            relativeLikelihood: 42,
                                        },
                                        proximity: {
                                            windowAfter: 42,
                                            windowBefore: 42,
                                        },
                                    },
                                }
                            ],
                            dictionary: {
                                cloudStoragePath: {
                                    path: "Test string",
                                },
                                wordList: {
                                    words: [
                                        "Test string"
                                    ],
                                },
                            },
                            exclusionType: "Test string",
                            infoType: {
                                name: "Test string",
                                version: "Test string",
                            },
                            likelihood: "Test string",
                            regex: {
                                groupIndexes: [
                                    42
                                ],
                                pattern: "Test string",
                            },
                            storedType: {
                                createTime: "Test string",
                                name: "Test string",
                            },
                            surrogateType: {
                            },
                        }
                    ],
                    excludeInfoTypes: true,
                    includeQuote: true,
                    infoTypes: [
                        {
                            name: "Test string",
                            version: "Test string",
                        }
                    ],
                    limits: {
                        maxFindingsPerInfoType: [
                            {
                                infoType: {
                                    name: "Test string",
                                    version: "Test string",
                                },
                                maxFindings: 42,
                            }
                        ],
                        maxFindingsPerItem: 42,
                        maxFindingsPerRequest: 42,
                    },
                    minLikelihood: "Test string",
                    ruleSet: [
                        {
                            infoTypes: [
                                {
                                    name: "Test string",
                                    version: "Test string",
                                }
                            ],
                            rules: [
                                {
                                    exclusionRule: {
                                        dictionary: {
                                            cloudStoragePath: {
                                                path: "Test string",
                                            },
                                            wordList: {
                                                words: [
                                                    "Test string"
                                                ],
                                            },
                                        },
                                        excludeByHotword: {
                                            hotwordRegex: {
                                                groupIndexes: [
                                                    42
                                                ],
                                                pattern: "Test string",
                                            },
                                            proximity: {
                                                windowAfter: 42,
                                                windowBefore: 42,
                                            },
                                        },
                                        excludeInfoTypes: {
                                            infoTypes: [
                                                {
                                                    name: "Test string",
                                                    version: "Test string",
                                                }
                                            ],
                                        },
                                        matchingType: "Test string",
                                        regex: {
                                            groupIndexes: [
                                                42
                                            ],
                                            pattern: "Test string",
                                        },
                                    },
                                    hotwordRule: {
                                        hotwordRegex: {
                                            groupIndexes: [
                                                42
                                            ],
                                            pattern: "Test string",
                                        },
                                        likelihoodAdjustment: {
                                            fixedLikelihood: "Test string",
                                            relativeLikelihood: 42,
                                        },
                                        proximity: {
                                            windowAfter: 42,
                                            windowBefore: 42,
                                        },
                                    },
                                }
                            ],
                        }
                    ],
                },
                inspectTemplateName: "Test string",
                storageConfig: {
                    bigQueryOptions: {
                        excludedFields: [
                            {
                                name: "Test string",
                            }
                        ],
                        identifyingFields: [
                            {
                                name: "Test string",
                            }
                        ],
                        includedFields: [
                            {
                                name: "Test string",
                            }
                        ],
                        rowsLimit: "Test string",
                        rowsLimitPercent: 42,
                        sampleMethod: "Test string",
                        tableReference: {
                            datasetId: "Test string",
                            projectId: "Test string",
                            tableId: "Test string",
                        },
                    },
                    cloudStorageOptions: {
                        bytesLimitPerFile: "Test string",
                        bytesLimitPerFilePercent: 42,
                        fileSet: {
                            regexFileSet: {
                                bucketName: "Test string",
                                excludeRegex: [
                                    "Test string"
                                ],
                                includeRegex: [
                                    "Test string"
                                ],
                            },
                            url: "Test string",
                        },
                        filesLimitPercent: 42,
                        fileTypes: [
                            "Test string"
                        ],
                        sampleMethod: "Test string",
                    },
                    datastoreOptions: {
                        kind: {
                            name: "Test string",
                        },
                        partitionId: {
                            namespaceId: "Test string",
                            projectId: "Test string",
                        },
                    },
                    hybridOptions: {
                        description: "Test string",
                        labels: {
                            A: "Test string"
                        },
                        requiredFindingLabelKeys: [
                            "Test string"
                        ],
                        tableOptions: {
                            identifyingFields: [
                                {
                                    name: "Test string",
                                }
                            ],
                        },
                    },
                    timespanConfig: {
                        enableAutoPopulationOfTimespanConfig: true,
                        endTime: "Test string",
                        startTime: "Test string",
                        timestampField: {
                            name: "Test string",
                        },
                    },
                },
            },
            jobId: "Test string",
            locationId: "Test string",
            riskJob: {
                actions: [
                    {
                        deidentify: {
                            cloudStorageOutput: "Test string",
                            fileTypesToTransform: [
                                "Test string"
                            ],
                            transformationConfig: {
                                deidentifyTemplate: "Test string",
                                imageRedactTemplate: "Test string",
                                structuredDeidentifyTemplate: "Test string",
                            },
                            transformationDetailsStorageConfig: {
                                table: {
                                    datasetId: "Test string",
                                    projectId: "Test string",
                                    tableId: "Test string",
                                },
                            },
                        },
                        jobNotificationEmails: {
                        },
                        publishFindingsToCloudDataCatalog: {
                        },
                        publishSummaryToCscc: {
                        },
                        publishToStackdriver: {
                        },
                        pubSub: {
                            topic: "Test string",
                        },
                        saveFindings: {
                            outputConfig: {
                                outputSchema: "Test string",
                                table: {
                                    datasetId: "Test string",
                                    projectId: "Test string",
                                    tableId: "Test string",
                                },
                            },
                        },
                    }
                ],
                privacyMetric: {
                    categoricalStatsConfig: {
                        field: {
                            name: "Test string",
                        },
                    },
                    deltaPresenceEstimationConfig: {
                        auxiliaryTables: [
                            {
                                quasiIds: [
                                    {
                                        customTag: "Test string",
                                        field: {
                                            name: "Test string",
                                        },
                                    }
                                ],
                                relativeFrequency: {
                                    name: "Test string",
                                },
                                table: {
                                    datasetId: "Test string",
                                    projectId: "Test string",
                                    tableId: "Test string",
                                },
                            }
                        ],
                        quasiIds: [
                            {
                                customTag: "Test string",
                                field: {
                                    name: "Test string",
                                },
                                inferred: {
                                },
                                infoType: {
                                    name: "Test string",
                                    version: "Test string",
                                },
                            }
                        ],
                        regionCode: "Test string",
                    },
                    kAnonymityConfig: {
                        entityId: {
                            field: {
                                name: "Test string",
                            },
                        },
                        quasiIds: [
                            {
                                name: "Test string",
                            }
                        ],
                    },
                    kMapEstimationConfig: {
                        auxiliaryTables: [
                            {
                                quasiIds: [
                                    {
                                        customTag: "Test string",
                                        field: {
                                            name: "Test string",
                                        },
                                    }
                                ],
                                relativeFrequency: {
                                    name: "Test string",
                                },
                                table: {
                                    datasetId: "Test string",
                                    projectId: "Test string",
                                    tableId: "Test string",
                                },
                            }
                        ],
                        quasiIds: [
                            {
                                customTag: "Test string",
                                field: {
                                    name: "Test string",
                                },
                                inferred: {
                                },
                                infoType: {
                                    name: "Test string",
                                    version: "Test string",
                                },
                            }
                        ],
                        regionCode: "Test string",
                    },
                    lDiversityConfig: {
                        quasiIds: [
                            {
                                name: "Test string",
                            }
                        ],
                        sensitiveAttribute: {
                            name: "Test string",
                        },
                    },
                    numericalStatsConfig: {
                        field: {
                            name: "Test string",
                        },
                    },
                },
                sourceTable: {
                    datasetId: "Test string",
                    projectId: "Test string",
                    tableId: "Test string",
                },
            },
        });
        /**
         * Deletes a long-running DlpJob. This method indicates that the client is no longer interested in the DlpJob result. The job will be canceled if possible. See
         * https://cloud.google.com/dlp/docs/inspecting-storage and https://cloud.google.com/dlp/docs/compute-risk-analysis to learn more.
         */
        await gapi.client.dlp.projects.locations.dlpJobs.delete({
            name: "Test string",
        });
        /** Finish a running hybrid DlpJob. Triggers the finalization steps and running of any enabled actions that have not yet run. */
        await gapi.client.dlp.projects.locations.dlpJobs.finish({
            name: "Test string",
        }, {
        });
        /** Gets the latest state of a long-running DlpJob. See https://cloud.google.com/dlp/docs/inspecting-storage and https://cloud.google.com/dlp/docs/compute-risk-analysis to learn more. */
        await gapi.client.dlp.projects.locations.dlpJobs.get({
            name: "Test string",
        });
        /** Inspect hybrid content and store findings to a job. To review the findings, inspect the job. Inspection will occur asynchronously. */
        await gapi.client.dlp.projects.locations.dlpJobs.hybridInspect({
            name: "Test string",
        }, {
            hybridItem: {
                findingDetails: {
                    containerDetails: {
                        fullPath: "Test string",
                        projectId: "Test string",
                        relativePath: "Test string",
                        rootPath: "Test string",
                        type: "Test string",
                        updateTime: "Test string",
                        version: "Test string",
                    },
                    fileOffset: "Test string",
                    labels: {
                        A: "Test string"
                    },
                    rowOffset: "Test string",
                    tableOptions: {
                        identifyingFields: [
                            {
                                name: "Test string",
                            }
                        ],
                    },
                },
                item: {
                    byteItem: {
                        data: "Test string",
                        type: "Test string",
                    },
                    table: {
                        headers: [
                            {
                                name: "Test string",
                            }
                        ],
                        rows: [
                            {
                                values: [
                                    {
                                        booleanValue: true,
                                        dateValue: {
                                            day: 42,
                                            month: 42,
                                            year: 42,
                                        },
                                        dayOfWeekValue: "Test string",
                                        floatValue: 42,
                                        integerValue: "Test string",
                                        stringValue: "Test string",
                                        timestampValue: "Test string",
                                        timeValue: {
                                            hours: 42,
                                            minutes: 42,
                                            nanos: 42,
                                            seconds: 42,
                                        },
                                    }
                                ],
                            }
                        ],
                    },
                    value: "Test string",
                },
            },
        });
        /**
         * Lists DlpJobs that match the specified filter in the request. See https://cloud.google.com/dlp/docs/inspecting-storage and https://cloud.google.com/dlp/docs/compute-risk-analysis to
         * learn more.
         */
        await gapi.client.dlp.projects.locations.dlpJobs.list({
            filter: "Test string",
            locationId: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
            type: "Test string",
        });
        /**
         * Redacts potentially sensitive info from an image. This method has limits on input size, processing time, and output size. See
         * https://cloud.google.com/dlp/docs/redacting-sensitive-data-images to learn more. When no InfoTypes or CustomInfoTypes are specified in this request, the system will automatically choose
         * what detectors to run. By default this may be all types, but may change over time as detectors are updated.
         */
        await gapi.client.dlp.projects.locations.image.redact({
            parent: "Test string",
        }, {
            byteItem: {
                data: "Test string",
                type: "Test string",
            },
            imageRedactionConfigs: [
                {
                    infoType: {
                        name: "Test string",
                        version: "Test string",
                    },
                    redactAllText: true,
                    redactionColor: {
                        blue: 42,
                        green: 42,
                        red: 42,
                    },
                }
            ],
            includeFindings: true,
            inspectConfig: {
                contentOptions: [
                    "Test string"
                ],
                customInfoTypes: [
                    {
                        detectionRules: [
                            {
                                hotwordRule: {
                                    hotwordRegex: {
                                        groupIndexes: [
                                            42
                                        ],
                                        pattern: "Test string",
                                    },
                                    likelihoodAdjustment: {
                                        fixedLikelihood: "Test string",
                                        relativeLikelihood: 42,
                                    },
                                    proximity: {
                                        windowAfter: 42,
                                        windowBefore: 42,
                                    },
                                },
                            }
                        ],
                        dictionary: {
                            cloudStoragePath: {
                                path: "Test string",
                            },
                            wordList: {
                                words: [
                                    "Test string"
                                ],
                            },
                        },
                        exclusionType: "Test string",
                        infoType: {
                            name: "Test string",
                            version: "Test string",
                        },
                        likelihood: "Test string",
                        regex: {
                            groupIndexes: [
                                42
                            ],
                            pattern: "Test string",
                        },
                        storedType: {
                            createTime: "Test string",
                            name: "Test string",
                        },
                        surrogateType: {
                        },
                    }
                ],
                excludeInfoTypes: true,
                includeQuote: true,
                infoTypes: [
                    {
                        name: "Test string",
                        version: "Test string",
                    }
                ],
                limits: {
                    maxFindingsPerInfoType: [
                        {
                            infoType: {
                                name: "Test string",
                                version: "Test string",
                            },
                            maxFindings: 42,
                        }
                    ],
                    maxFindingsPerItem: 42,
                    maxFindingsPerRequest: 42,
                },
                minLikelihood: "Test string",
                ruleSet: [
                    {
                        infoTypes: [
                            {
                                name: "Test string",
                                version: "Test string",
                            }
                        ],
                        rules: [
                            {
                                exclusionRule: {
                                    dictionary: {
                                        cloudStoragePath: {
                                            path: "Test string",
                                        },
                                        wordList: {
                                            words: [
                                                "Test string"
                                            ],
                                        },
                                    },
                                    excludeByHotword: {
                                        hotwordRegex: {
                                            groupIndexes: [
                                                42
                                            ],
                                            pattern: "Test string",
                                        },
                                        proximity: {
                                            windowAfter: 42,
                                            windowBefore: 42,
                                        },
                                    },
                                    excludeInfoTypes: {
                                        infoTypes: [
                                            {
                                                name: "Test string",
                                                version: "Test string",
                                            }
                                        ],
                                    },
                                    matchingType: "Test string",
                                    regex: {
                                        groupIndexes: [
                                            42
                                        ],
                                        pattern: "Test string",
                                    },
                                },
                                hotwordRule: {
                                    hotwordRegex: {
                                        groupIndexes: [
                                            42
                                        ],
                                        pattern: "Test string",
                                    },
                                    likelihoodAdjustment: {
                                        fixedLikelihood: "Test string",
                                        relativeLikelihood: 42,
                                    },
                                    proximity: {
                                        windowAfter: 42,
                                        windowBefore: 42,
                                    },
                                },
                            }
                        ],
                    }
                ],
            },
            locationId: "Test string",
        });
        /** Creates an InspectTemplate for reusing frequently used configuration for inspecting content, images, and storage. See https://cloud.google.com/dlp/docs/creating-templates to learn more. */
        await gapi.client.dlp.projects.locations.inspectTemplates.create({
            parent: "Test string",
        }, {
            inspectTemplate: {
                createTime: "Test string",
                description: "Test string",
                displayName: "Test string",
                inspectConfig: {
                    contentOptions: [
                        "Test string"
                    ],
                    customInfoTypes: [
                        {
                            detectionRules: [
                                {
                                    hotwordRule: {
                                        hotwordRegex: {
                                            groupIndexes: [
                                                42
                                            ],
                                            pattern: "Test string",
                                        },
                                        likelihoodAdjustment: {
                                            fixedLikelihood: "Test string",
                                            relativeLikelihood: 42,
                                        },
                                        proximity: {
                                            windowAfter: 42,
                                            windowBefore: 42,
                                        },
                                    },
                                }
                            ],
                            dictionary: {
                                cloudStoragePath: {
                                    path: "Test string",
                                },
                                wordList: {
                                    words: [
                                        "Test string"
                                    ],
                                },
                            },
                            exclusionType: "Test string",
                            infoType: {
                                name: "Test string",
                                version: "Test string",
                            },
                            likelihood: "Test string",
                            regex: {
                                groupIndexes: [
                                    42
                                ],
                                pattern: "Test string",
                            },
                            storedType: {
                                createTime: "Test string",
                                name: "Test string",
                            },
                            surrogateType: {
                            },
                        }
                    ],
                    excludeInfoTypes: true,
                    includeQuote: true,
                    infoTypes: [
                        {
                            name: "Test string",
                            version: "Test string",
                        }
                    ],
                    limits: {
                        maxFindingsPerInfoType: [
                            {
                                infoType: {
                                    name: "Test string",
                                    version: "Test string",
                                },
                                maxFindings: 42,
                            }
                        ],
                        maxFindingsPerItem: 42,
                        maxFindingsPerRequest: 42,
                    },
                    minLikelihood: "Test string",
                    ruleSet: [
                        {
                            infoTypes: [
                                {
                                    name: "Test string",
                                    version: "Test string",
                                }
                            ],
                            rules: [
                                {
                                    exclusionRule: {
                                        dictionary: {
                                            cloudStoragePath: {
                                                path: "Test string",
                                            },
                                            wordList: {
                                                words: [
                                                    "Test string"
                                                ],
                                            },
                                        },
                                        excludeByHotword: {
                                            hotwordRegex: {
                                                groupIndexes: [
                                                    42
                                                ],
                                                pattern: "Test string",
                                            },
                                            proximity: {
                                                windowAfter: 42,
                                                windowBefore: 42,
                                            },
                                        },
                                        excludeInfoTypes: {
                                            infoTypes: [
                                                {
                                                    name: "Test string",
                                                    version: "Test string",
                                                }
                                            ],
                                        },
                                        matchingType: "Test string",
                                        regex: {
                                            groupIndexes: [
                                                42
                                            ],
                                            pattern: "Test string",
                                        },
                                    },
                                    hotwordRule: {
                                        hotwordRegex: {
                                            groupIndexes: [
                                                42
                                            ],
                                            pattern: "Test string",
                                        },
                                        likelihoodAdjustment: {
                                            fixedLikelihood: "Test string",
                                            relativeLikelihood: 42,
                                        },
                                        proximity: {
                                            windowAfter: 42,
                                            windowBefore: 42,
                                        },
                                    },
                                }
                            ],
                        }
                    ],
                },
                name: "Test string",
                updateTime: "Test string",
            },
            locationId: "Test string",
            templateId: "Test string",
        });
        /** Deletes an InspectTemplate. See https://cloud.google.com/dlp/docs/creating-templates to learn more. */
        await gapi.client.dlp.projects.locations.inspectTemplates.delete({
            name: "Test string",
        });
        /** Gets an InspectTemplate. See https://cloud.google.com/dlp/docs/creating-templates to learn more. */
        await gapi.client.dlp.projects.locations.inspectTemplates.get({
            name: "Test string",
        });
        /** Lists InspectTemplates. See https://cloud.google.com/dlp/docs/creating-templates to learn more. */
        await gapi.client.dlp.projects.locations.inspectTemplates.list({
            locationId: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the InspectTemplate. See https://cloud.google.com/dlp/docs/creating-templates to learn more. */
        await gapi.client.dlp.projects.locations.inspectTemplates.patch({
            name: "Test string",
        }, {
            inspectTemplate: {
                createTime: "Test string",
                description: "Test string",
                displayName: "Test string",
                inspectConfig: {
                    contentOptions: [
                        "Test string"
                    ],
                    customInfoTypes: [
                        {
                            detectionRules: [
                                {
                                    hotwordRule: {
                                        hotwordRegex: {
                                            groupIndexes: [
                                                42
                                            ],
                                            pattern: "Test string",
                                        },
                                        likelihoodAdjustment: {
                                            fixedLikelihood: "Test string",
                                            relativeLikelihood: 42,
                                        },
                                        proximity: {
                                            windowAfter: 42,
                                            windowBefore: 42,
                                        },
                                    },
                                }
                            ],
                            dictionary: {
                                cloudStoragePath: {
                                    path: "Test string",
                                },
                                wordList: {
                                    words: [
                                        "Test string"
                                    ],
                                },
                            },
                            exclusionType: "Test string",
                            infoType: {
                                name: "Test string",
                                version: "Test string",
                            },
                            likelihood: "Test string",
                            regex: {
                                groupIndexes: [
                                    42
                                ],
                                pattern: "Test string",
                            },
                            storedType: {
                                createTime: "Test string",
                                name: "Test string",
                            },
                            surrogateType: {
                            },
                        }
                    ],
                    excludeInfoTypes: true,
                    includeQuote: true,
                    infoTypes: [
                        {
                            name: "Test string",
                            version: "Test string",
                        }
                    ],
                    limits: {
                        maxFindingsPerInfoType: [
                            {
                                infoType: {
                                    name: "Test string",
                                    version: "Test string",
                                },
                                maxFindings: 42,
                            }
                        ],
                        maxFindingsPerItem: 42,
                        maxFindingsPerRequest: 42,
                    },
                    minLikelihood: "Test string",
                    ruleSet: [
                        {
                            infoTypes: [
                                {
                                    name: "Test string",
                                    version: "Test string",
                                }
                            ],
                            rules: [
                                {
                                    exclusionRule: {
                                        dictionary: {
                                            cloudStoragePath: {
                                                path: "Test string",
                                            },
                                            wordList: {
                                                words: [
                                                    "Test string"
                                                ],
                                            },
                                        },
                                        excludeByHotword: {
                                            hotwordRegex: {
                                                groupIndexes: [
                                                    42
                                                ],
                                                pattern: "Test string",
                                            },
                                            proximity: {
                                                windowAfter: 42,
                                                windowBefore: 42,
                                            },
                                        },
                                        excludeInfoTypes: {
                                            infoTypes: [
                                                {
                                                    name: "Test string",
                                                    version: "Test string",
                                                }
                                            ],
                                        },
                                        matchingType: "Test string",
                                        regex: {
                                            groupIndexes: [
                                                42
                                            ],
                                            pattern: "Test string",
                                        },
                                    },
                                    hotwordRule: {
                                        hotwordRegex: {
                                            groupIndexes: [
                                                42
                                            ],
                                            pattern: "Test string",
                                        },
                                        likelihoodAdjustment: {
                                            fixedLikelihood: "Test string",
                                            relativeLikelihood: 42,
                                        },
                                        proximity: {
                                            windowAfter: 42,
                                            windowBefore: 42,
                                        },
                                    },
                                }
                            ],
                        }
                    ],
                },
                name: "Test string",
                updateTime: "Test string",
            },
            updateMask: "Test string",
        });
        /** Activate a job trigger. Causes the immediate execute of a trigger instead of waiting on the trigger event to occur. */
        await gapi.client.dlp.projects.locations.jobTriggers.activate({
            name: "Test string",
        }, {
        });
        /** Creates a job trigger to run DLP actions such as scanning storage for sensitive information on a set schedule. See https://cloud.google.com/dlp/docs/creating-job-triggers to learn more. */
        await gapi.client.dlp.projects.locations.jobTriggers.create({
            parent: "Test string",
        }, {
            jobTrigger: {
                createTime: "Test string",
                description: "Test string",
                displayName: "Test string",
                errors: [
                    {
                        details: {
                            code: 42,
                            details: [
                                {
                                    A: 42
                                }
                            ],
                            message: "Test string",
                        },
                        timestamps: [
                            "Test string"
                        ],
                    }
                ],
                inspectJob: {
                    actions: [
                        {
                            deidentify: {
                                cloudStorageOutput: "Test string",
                                fileTypesToTransform: [
                                    "Test string"
                                ],
                                transformationConfig: {
                                    deidentifyTemplate: "Test string",
                                    imageRedactTemplate: "Test string",
                                    structuredDeidentifyTemplate: "Test string",
                                },
                                transformationDetailsStorageConfig: {
                                    table: {
                                        datasetId: "Test string",
                                        projectId: "Test string",
                                        tableId: "Test string",
                                    },
                                },
                            },
                            jobNotificationEmails: {
                            },
                            publishFindingsToCloudDataCatalog: {
                            },
                            publishSummaryToCscc: {
                            },
                            publishToStackdriver: {
                            },
                            pubSub: {
                                topic: "Test string",
                            },
                            saveFindings: {
                                outputConfig: {
                                    outputSchema: "Test string",
                                    table: {
                                        datasetId: "Test string",
                                        projectId: "Test string",
                                        tableId: "Test string",
                                    },
                                },
                            },
                        }
                    ],
                    inspectConfig: {
                        contentOptions: [
                            "Test string"
                        ],
                        customInfoTypes: [
                            {
                                detectionRules: [
                                    {
                                        hotwordRule: {
                                            hotwordRegex: {
                                                groupIndexes: [
                                                    42
                                                ],
                                                pattern: "Test string",
                                            },
                                            likelihoodAdjustment: {
                                                fixedLikelihood: "Test string",
                                                relativeLikelihood: 42,
                                            },
                                            proximity: {
                                                windowAfter: 42,
                                                windowBefore: 42,
                                            },
                                        },
                                    }
                                ],
                                dictionary: {
                                    cloudStoragePath: {
                                        path: "Test string",
                                    },
                                    wordList: {
                                        words: [
                                            "Test string"
                                        ],
                                    },
                                },
                                exclusionType: "Test string",
                                infoType: {
                                    name: "Test string",
                                    version: "Test string",
                                },
                                likelihood: "Test string",
                                regex: {
                                    groupIndexes: [
                                        42
                                    ],
                                    pattern: "Test string",
                                },
                                storedType: {
                                    createTime: "Test string",
                                    name: "Test string",
                                },
                                surrogateType: {
                                },
                            }
                        ],
                        excludeInfoTypes: true,
                        includeQuote: true,
                        infoTypes: [
                            {
                                name: "Test string",
                                version: "Test string",
                            }
                        ],
                        limits: {
                            maxFindingsPerInfoType: [
                                {
                                    infoType: {
                                        name: "Test string",
                                        version: "Test string",
                                    },
                                    maxFindings: 42,
                                }
                            ],
                            maxFindingsPerItem: 42,
                            maxFindingsPerRequest: 42,
                        },
                        minLikelihood: "Test string",
                        ruleSet: [
                            {
                                infoTypes: [
                                    {
                                        name: "Test string",
                                        version: "Test string",
                                    }
                                ],
                                rules: [
                                    {
                                        exclusionRule: {
                                            dictionary: {
                                                cloudStoragePath: {
                                                    path: "Test string",
                                                },
                                                wordList: {
                                                    words: [
                                                        "Test string"
                                                    ],
                                                },
                                            },
                                            excludeByHotword: {
                                                hotwordRegex: {
                                                    groupIndexes: [
                                                        42
                                                    ],
                                                    pattern: "Test string",
                                                },
                                                proximity: {
                                                    windowAfter: 42,
                                                    windowBefore: 42,
                                                },
                                            },
                                            excludeInfoTypes: {
                                                infoTypes: [
                                                    {
                                                        name: "Test string",
                                                        version: "Test string",
                                                    }
                                                ],
                                            },
                                            matchingType: "Test string",
                                            regex: {
                                                groupIndexes: [
                                                    42
                                                ],
                                                pattern: "Test string",
                                            },
                                        },
                                        hotwordRule: {
                                            hotwordRegex: {
                                                groupIndexes: [
                                                    42
                                                ],
                                                pattern: "Test string",
                                            },
                                            likelihoodAdjustment: {
                                                fixedLikelihood: "Test string",
                                                relativeLikelihood: 42,
                                            },
                                            proximity: {
                                                windowAfter: 42,
                                                windowBefore: 42,
                                            },
                                        },
                                    }
                                ],
                            }
                        ],
                    },
                    inspectTemplateName: "Test string",
                    storageConfig: {
                        bigQueryOptions: {
                            excludedFields: [
                                {
                                    name: "Test string",
                                }
                            ],
                            identifyingFields: [
                                {
                                    name: "Test string",
                                }
                            ],
                            includedFields: [
                                {
                                    name: "Test string",
                                }
                            ],
                            rowsLimit: "Test string",
                            rowsLimitPercent: 42,
                            sampleMethod: "Test string",
                            tableReference: {
                                datasetId: "Test string",
                                projectId: "Test string",
                                tableId: "Test string",
                            },
                        },
                        cloudStorageOptions: {
                            bytesLimitPerFile: "Test string",
                            bytesLimitPerFilePercent: 42,
                            fileSet: {
                                regexFileSet: {
                                    bucketName: "Test string",
                                    excludeRegex: [
                                        "Test string"
                                    ],
                                    includeRegex: [
                                        "Test string"
                                    ],
                                },
                                url: "Test string",
                            },
                            filesLimitPercent: 42,
                            fileTypes: [
                                "Test string"
                            ],
                            sampleMethod: "Test string",
                        },
                        datastoreOptions: {
                            kind: {
                                name: "Test string",
                            },
                            partitionId: {
                                namespaceId: "Test string",
                                projectId: "Test string",
                            },
                        },
                        hybridOptions: {
                            description: "Test string",
                            labels: {
                                A: "Test string"
                            },
                            requiredFindingLabelKeys: [
                                "Test string"
                            ],
                            tableOptions: {
                                identifyingFields: [
                                    {
                                        name: "Test string",
                                    }
                                ],
                            },
                        },
                        timespanConfig: {
                            enableAutoPopulationOfTimespanConfig: true,
                            endTime: "Test string",
                            startTime: "Test string",
                            timestampField: {
                                name: "Test string",
                            },
                        },
                    },
                },
                lastRunTime: "Test string",
                name: "Test string",
                status: "Test string",
                triggers: [
                    {
                        manual: {
                        },
                        schedule: {
                            recurrencePeriodDuration: "Test string",
                        },
                    }
                ],
                updateTime: "Test string",
            },
            locationId: "Test string",
            triggerId: "Test string",
        });
        /** Deletes a job trigger. See https://cloud.google.com/dlp/docs/creating-job-triggers to learn more. */
        await gapi.client.dlp.projects.locations.jobTriggers.delete({
            name: "Test string",
        });
        /** Gets a job trigger. See https://cloud.google.com/dlp/docs/creating-job-triggers to learn more. */
        await gapi.client.dlp.projects.locations.jobTriggers.get({
            name: "Test string",
        });
        /** Inspect hybrid content and store findings to a trigger. The inspection will be processed asynchronously. To review the findings monitor the jobs within the trigger. */
        await gapi.client.dlp.projects.locations.jobTriggers.hybridInspect({
            name: "Test string",
        }, {
            hybridItem: {
                findingDetails: {
                    containerDetails: {
                        fullPath: "Test string",
                        projectId: "Test string",
                        relativePath: "Test string",
                        rootPath: "Test string",
                        type: "Test string",
                        updateTime: "Test string",
                        version: "Test string",
                    },
                    fileOffset: "Test string",
                    labels: {
                        A: "Test string"
                    },
                    rowOffset: "Test string",
                    tableOptions: {
                        identifyingFields: [
                            {
                                name: "Test string",
                            }
                        ],
                    },
                },
                item: {
                    byteItem: {
                        data: "Test string",
                        type: "Test string",
                    },
                    table: {
                        headers: [
                            {
                                name: "Test string",
                            }
                        ],
                        rows: [
                            {
                                values: [
                                    {
                                        booleanValue: true,
                                        dateValue: {
                                            day: 42,
                                            month: 42,
                                            year: 42,
                                        },
                                        dayOfWeekValue: "Test string",
                                        floatValue: 42,
                                        integerValue: "Test string",
                                        stringValue: "Test string",
                                        timestampValue: "Test string",
                                        timeValue: {
                                            hours: 42,
                                            minutes: 42,
                                            nanos: 42,
                                            seconds: 42,
                                        },
                                    }
                                ],
                            }
                        ],
                    },
                    value: "Test string",
                },
            },
        });
        /** Lists job triggers. See https://cloud.google.com/dlp/docs/creating-job-triggers to learn more. */
        await gapi.client.dlp.projects.locations.jobTriggers.list({
            filter: "Test string",
            locationId: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
            type: "Test string",
        });
        /** Updates a job trigger. See https://cloud.google.com/dlp/docs/creating-job-triggers to learn more. */
        await gapi.client.dlp.projects.locations.jobTriggers.patch({
            name: "Test string",
        }, {
            jobTrigger: {
                createTime: "Test string",
                description: "Test string",
                displayName: "Test string",
                errors: [
                    {
                        details: {
                            code: 42,
                            details: [
                                {
                                    A: 42
                                }
                            ],
                            message: "Test string",
                        },
                        timestamps: [
                            "Test string"
                        ],
                    }
                ],
                inspectJob: {
                    actions: [
                        {
                            deidentify: {
                                cloudStorageOutput: "Test string",
                                fileTypesToTransform: [
                                    "Test string"
                                ],
                                transformationConfig: {
                                    deidentifyTemplate: "Test string",
                                    imageRedactTemplate: "Test string",
                                    structuredDeidentifyTemplate: "Test string",
                                },
                                transformationDetailsStorageConfig: {
                                    table: {
                                        datasetId: "Test string",
                                        projectId: "Test string",
                                        tableId: "Test string",
                                    },
                                },
                            },
                            jobNotificationEmails: {
                            },
                            publishFindingsToCloudDataCatalog: {
                            },
                            publishSummaryToCscc: {
                            },
                            publishToStackdriver: {
                            },
                            pubSub: {
                                topic: "Test string",
                            },
                            saveFindings: {
                                outputConfig: {
                                    outputSchema: "Test string",
                                    table: {
                                        datasetId: "Test string",
                                        projectId: "Test string",
                                        tableId: "Test string",
                                    },
                                },
                            },
                        }
                    ],
                    inspectConfig: {
                        contentOptions: [
                            "Test string"
                        ],
                        customInfoTypes: [
                            {
                                detectionRules: [
                                    {
                                        hotwordRule: {
                                            hotwordRegex: {
                                                groupIndexes: [
                                                    42
                                                ],
                                                pattern: "Test string",
                                            },
                                            likelihoodAdjustment: {
                                                fixedLikelihood: "Test string",
                                                relativeLikelihood: 42,
                                            },
                                            proximity: {
                                                windowAfter: 42,
                                                windowBefore: 42,
                                            },
                                        },
                                    }
                                ],
                                dictionary: {
                                    cloudStoragePath: {
                                        path: "Test string",
                                    },
                                    wordList: {
                                        words: [
                                            "Test string"
                                        ],
                                    },
                                },
                                exclusionType: "Test string",
                                infoType: {
                                    name: "Test string",
                                    version: "Test string",
                                },
                                likelihood: "Test string",
                                regex: {
                                    groupIndexes: [
                                        42
                                    ],
                                    pattern: "Test string",
                                },
                                storedType: {
                                    createTime: "Test string",
                                    name: "Test string",
                                },
                                surrogateType: {
                                },
                            }
                        ],
                        excludeInfoTypes: true,
                        includeQuote: true,
                        infoTypes: [
                            {
                                name: "Test string",
                                version: "Test string",
                            }
                        ],
                        limits: {
                            maxFindingsPerInfoType: [
                                {
                                    infoType: {
                                        name: "Test string",
                                        version: "Test string",
                                    },
                                    maxFindings: 42,
                                }
                            ],
                            maxFindingsPerItem: 42,
                            maxFindingsPerRequest: 42,
                        },
                        minLikelihood: "Test string",
                        ruleSet: [
                            {
                                infoTypes: [
                                    {
                                        name: "Test string",
                                        version: "Test string",
                                    }
                                ],
                                rules: [
                                    {
                                        exclusionRule: {
                                            dictionary: {
                                                cloudStoragePath: {
                                                    path: "Test string",
                                                },
                                                wordList: {
                                                    words: [
                                                        "Test string"
                                                    ],
                                                },
                                            },
                                            excludeByHotword: {
                                                hotwordRegex: {
                                                    groupIndexes: [
                                                        42
                                                    ],
                                                    pattern: "Test string",
                                                },
                                                proximity: {
                                                    windowAfter: 42,
                                                    windowBefore: 42,
                                                },
                                            },
                                            excludeInfoTypes: {
                                                infoTypes: [
                                                    {
                                                        name: "Test string",
                                                        version: "Test string",
                                                    }
                                                ],
                                            },
                                            matchingType: "Test string",
                                            regex: {
                                                groupIndexes: [
                                                    42
                                                ],
                                                pattern: "Test string",
                                            },
                                        },
                                        hotwordRule: {
                                            hotwordRegex: {
                                                groupIndexes: [
                                                    42
                                                ],
                                                pattern: "Test string",
                                            },
                                            likelihoodAdjustment: {
                                                fixedLikelihood: "Test string",
                                                relativeLikelihood: 42,
                                            },
                                            proximity: {
                                                windowAfter: 42,
                                                windowBefore: 42,
                                            },
                                        },
                                    }
                                ],
                            }
                        ],
                    },
                    inspectTemplateName: "Test string",
                    storageConfig: {
                        bigQueryOptions: {
                            excludedFields: [
                                {
                                    name: "Test string",
                                }
                            ],
                            identifyingFields: [
                                {
                                    name: "Test string",
                                }
                            ],
                            includedFields: [
                                {
                                    name: "Test string",
                                }
                            ],
                            rowsLimit: "Test string",
                            rowsLimitPercent: 42,
                            sampleMethod: "Test string",
                            tableReference: {
                                datasetId: "Test string",
                                projectId: "Test string",
                                tableId: "Test string",
                            },
                        },
                        cloudStorageOptions: {
                            bytesLimitPerFile: "Test string",
                            bytesLimitPerFilePercent: 42,
                            fileSet: {
                                regexFileSet: {
                                    bucketName: "Test string",
                                    excludeRegex: [
                                        "Test string"
                                    ],
                                    includeRegex: [
                                        "Test string"
                                    ],
                                },
                                url: "Test string",
                            },
                            filesLimitPercent: 42,
                            fileTypes: [
                                "Test string"
                            ],
                            sampleMethod: "Test string",
                        },
                        datastoreOptions: {
                            kind: {
                                name: "Test string",
                            },
                            partitionId: {
                                namespaceId: "Test string",
                                projectId: "Test string",
                            },
                        },
                        hybridOptions: {
                            description: "Test string",
                            labels: {
                                A: "Test string"
                            },
                            requiredFindingLabelKeys: [
                                "Test string"
                            ],
                            tableOptions: {
                                identifyingFields: [
                                    {
                                        name: "Test string",
                                    }
                                ],
                            },
                        },
                        timespanConfig: {
                            enableAutoPopulationOfTimespanConfig: true,
                            endTime: "Test string",
                            startTime: "Test string",
                            timestampField: {
                                name: "Test string",
                            },
                        },
                    },
                },
                lastRunTime: "Test string",
                name: "Test string",
                status: "Test string",
                triggers: [
                    {
                        manual: {
                        },
                        schedule: {
                            recurrencePeriodDuration: "Test string",
                        },
                    }
                ],
                updateTime: "Test string",
            },
            updateMask: "Test string",
        });
        /** Creates a pre-built stored infoType to be used for inspection. See https://cloud.google.com/dlp/docs/creating-stored-infotypes to learn more. */
        await gapi.client.dlp.projects.locations.storedInfoTypes.create({
            parent: "Test string",
        }, {
            config: {
                description: "Test string",
                dictionary: {
                    cloudStoragePath: {
                        path: "Test string",
                    },
                    wordList: {
                        words: [
                            "Test string"
                        ],
                    },
                },
                displayName: "Test string",
                largeCustomDictionary: {
                    bigQueryField: {
                        field: {
                            name: "Test string",
                        },
                        table: {
                            datasetId: "Test string",
                            projectId: "Test string",
                            tableId: "Test string",
                        },
                    },
                    cloudStorageFileSet: {
                        url: "Test string",
                    },
                    outputPath: {
                        path: "Test string",
                    },
                },
                regex: {
                    groupIndexes: [
                        42
                    ],
                    pattern: "Test string",
                },
            },
            locationId: "Test string",
            storedInfoTypeId: "Test string",
        });
        /** Deletes a stored infoType. See https://cloud.google.com/dlp/docs/creating-stored-infotypes to learn more. */
        await gapi.client.dlp.projects.locations.storedInfoTypes.delete({
            name: "Test string",
        });
        /** Gets a stored infoType. See https://cloud.google.com/dlp/docs/creating-stored-infotypes to learn more. */
        await gapi.client.dlp.projects.locations.storedInfoTypes.get({
            name: "Test string",
        });
        /** Lists stored infoTypes. See https://cloud.google.com/dlp/docs/creating-stored-infotypes to learn more. */
        await gapi.client.dlp.projects.locations.storedInfoTypes.list({
            locationId: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Updates the stored infoType by creating a new version. The existing version will continue to be used until the new version is ready. See
         * https://cloud.google.com/dlp/docs/creating-stored-infotypes to learn more.
         */
        await gapi.client.dlp.projects.locations.storedInfoTypes.patch({
            name: "Test string",
        }, {
            config: {
                description: "Test string",
                dictionary: {
                    cloudStoragePath: {
                        path: "Test string",
                    },
                    wordList: {
                        words: [
                            "Test string"
                        ],
                    },
                },
                displayName: "Test string",
                largeCustomDictionary: {
                    bigQueryField: {
                        field: {
                            name: "Test string",
                        },
                        table: {
                            datasetId: "Test string",
                            projectId: "Test string",
                            tableId: "Test string",
                        },
                    },
                    cloudStorageFileSet: {
                        url: "Test string",
                    },
                    outputPath: {
                        path: "Test string",
                    },
                },
                regex: {
                    groupIndexes: [
                        42
                    ],
                    pattern: "Test string",
                },
            },
            updateMask: "Test string",
        });
        /** Creates a pre-built stored infoType to be used for inspection. See https://cloud.google.com/dlp/docs/creating-stored-infotypes to learn more. */
        await gapi.client.dlp.projects.storedInfoTypes.create({
            parent: "Test string",
        }, {
            config: {
                description: "Test string",
                dictionary: {
                    cloudStoragePath: {
                        path: "Test string",
                    },
                    wordList: {
                        words: [
                            "Test string"
                        ],
                    },
                },
                displayName: "Test string",
                largeCustomDictionary: {
                    bigQueryField: {
                        field: {
                            name: "Test string",
                        },
                        table: {
                            datasetId: "Test string",
                            projectId: "Test string",
                            tableId: "Test string",
                        },
                    },
                    cloudStorageFileSet: {
                        url: "Test string",
                    },
                    outputPath: {
                        path: "Test string",
                    },
                },
                regex: {
                    groupIndexes: [
                        42
                    ],
                    pattern: "Test string",
                },
            },
            locationId: "Test string",
            storedInfoTypeId: "Test string",
        });
        /** Deletes a stored infoType. See https://cloud.google.com/dlp/docs/creating-stored-infotypes to learn more. */
        await gapi.client.dlp.projects.storedInfoTypes.delete({
            name: "Test string",
        });
        /** Gets a stored infoType. See https://cloud.google.com/dlp/docs/creating-stored-infotypes to learn more. */
        await gapi.client.dlp.projects.storedInfoTypes.get({
            name: "Test string",
        });
        /** Lists stored infoTypes. See https://cloud.google.com/dlp/docs/creating-stored-infotypes to learn more. */
        await gapi.client.dlp.projects.storedInfoTypes.list({
            locationId: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Updates the stored infoType by creating a new version. The existing version will continue to be used until the new version is ready. See
         * https://cloud.google.com/dlp/docs/creating-stored-infotypes to learn more.
         */
        await gapi.client.dlp.projects.storedInfoTypes.patch({
            name: "Test string",
        }, {
            config: {
                description: "Test string",
                dictionary: {
                    cloudStoragePath: {
                        path: "Test string",
                    },
                    wordList: {
                        words: [
                            "Test string"
                        ],
                    },
                },
                displayName: "Test string",
                largeCustomDictionary: {
                    bigQueryField: {
                        field: {
                            name: "Test string",
                        },
                        table: {
                            datasetId: "Test string",
                            projectId: "Test string",
                            tableId: "Test string",
                        },
                    },
                    cloudStorageFileSet: {
                        url: "Test string",
                    },
                    outputPath: {
                        path: "Test string",
                    },
                },
                regex: {
                    groupIndexes: [
                        42
                    ],
                    pattern: "Test string",
                },
            },
            updateMask: "Test string",
        });
    }
});
