/* This is stub file for gapi.client.chromemanagement-v1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20241125

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://chromemanagement.googleapis.com/$discovery/rest?version=v1'
  );
  /** now we can use gapi.client.chromemanagement */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** See detailed information about apps installed on Chrome browsers and devices managed by your organization */
    'https://www.googleapis.com/auth/chrome.management.appdetails.readonly',
    /** See reports about devices and Chrome browsers managed within your organization */
    'https://www.googleapis.com/auth/chrome.management.reports.readonly',
    /** See basic device and telemetry information collected from ChromeOS devices or users managed within your organization */
    'https://www.googleapis.com/auth/chrome.management.telemetry.readonly',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Generate summary of app installation requests. */
    await gapi.client.chromemanagement.customers.apps.countChromeAppRequests({
      customer: 'Test string',
      orderBy: 'Test string',
      orgUnitId: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Get a list of devices that have requested to install an extension. */
    await gapi.client.chromemanagement.customers.apps.fetchDevicesRequestingExtension(
      {
        customer: 'Test string',
        extensionId: 'Test string',
        orgUnitId: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
      }
    );
    /** Get a list of users that have requested to install an extension. */
    await gapi.client.chromemanagement.customers.apps.fetchUsersRequestingExtension(
      {
        customer: 'Test string',
        extensionId: 'Test string',
        orgUnitId: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
      }
    );
    /** Get a specific app for a customer by its resource name. */
    await gapi.client.chromemanagement.customers.apps.android.get({
      name: 'Test string',
    });
    /** Get a specific app for a customer by its resource name. */
    await gapi.client.chromemanagement.customers.apps.chrome.get({
      name: 'Test string',
    });
    /** Get a specific app for a customer by its resource name. */
    await gapi.client.chromemanagement.customers.apps.web.get({
      name: 'Test string',
    });
    /** Deletes the data collected from a Chrome browser profile. */
    await gapi.client.chromemanagement.customers.profiles.delete({
      name: 'Test string',
    });
    /** Gets a Chrome browser profile with customer ID and profile permanent ID. */
    await gapi.client.chromemanagement.customers.profiles.get({
      name: 'Test string',
    });
    /** Lists Chrome browser profiles of a customer based on the given search and sorting criteria. */
    await gapi.client.chromemanagement.customers.profiles.list({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Count of Chrome Browsers that have been recently enrolled, have new policy to be synced, or have no recent activity. */
    await gapi.client.chromemanagement.customers.reports.countChromeBrowsersNeedingAttention(
      {
        customer: 'Test string',
        orgUnitId: 'Test string',
      }
    );
    /** Get a count of Chrome crash events. */
    await gapi.client.chromemanagement.customers.reports.countChromeCrashEvents(
      {
        customer: 'Test string',
        filter: 'Test string',
        orderBy: 'Test string',
        orgUnitId: 'Test string',
      }
    );
    /** Generate report of the number of devices expiring in each month of the selected time frame. Devices are grouped by auto update expiration date and model. Further information can be found [here](https://support.google.com/chrome/a/answer/10564947). */
    await gapi.client.chromemanagement.customers.reports.countChromeDevicesReachingAutoExpirationDate(
      {
        customer: 'Test string',
        maxAueDate: 'Test string',
        minAueDate: 'Test string',
        orgUnitId: 'Test string',
      }
    );
    /** Counts of ChromeOS devices that have not synced policies or have lacked user activity in the past 28 days, are out of date, or are not complaint. Further information can be found here https://support.google.com/chrome/a/answer/10564947 */
    await gapi.client.chromemanagement.customers.reports.countChromeDevicesThatNeedAttention(
      {
        customer: 'Test string',
        orgUnitId: 'Test string',
        readMask: 'Test string',
      }
    );
    /** Counts of devices with a specific hardware specification from the requested hardware type (for example model name, processor type). Further information can be found here https://support.google.com/chrome/a/answer/10564947 */
    await gapi.client.chromemanagement.customers.reports.countChromeHardwareFleetDevices(
      {
        customer: 'Test string',
        orgUnitId: 'Test string',
        readMask: 'Test string',
      }
    );
    /** Generate report of installed Chrome versions. */
    await gapi.client.chromemanagement.customers.reports.countChromeVersions({
      customer: 'Test string',
      filter: 'Test string',
      orgUnitId: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Generate report of app installations. */
    await gapi.client.chromemanagement.customers.reports.countInstalledApps({
      customer: 'Test string',
      filter: 'Test string',
      orderBy: 'Test string',
      orgUnitId: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Get a summary of printing done by each printer. */
    await gapi.client.chromemanagement.customers.reports.countPrintJobsByPrinter(
      {
        customer: 'Test string',
        filter: 'Test string',
        orderBy: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        printerOrgUnitId: 'Test string',
      }
    );
    /** Get a summary of printing done by each user. */
    await gapi.client.chromemanagement.customers.reports.countPrintJobsByUser({
      customer: 'Test string',
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      printerOrgUnitId: 'Test string',
    });
    /** Get a list of print jobs. */
    await gapi.client.chromemanagement.customers.reports.enumeratePrintJobs({
      customer: 'Test string',
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      printerOrgUnitId: 'Test string',
    });
    /** Generate report of managed Chrome browser devices that have a specified app installed. */
    await gapi.client.chromemanagement.customers.reports.findInstalledAppDevices(
      {
        appId: 'Test string',
        appType: 'Test string',
        customer: 'Test string',
        filter: 'Test string',
        orderBy: 'Test string',
        orgUnitId: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
      }
    );
    /** Get telemetry device. */
    await gapi.client.chromemanagement.customers.telemetry.devices.get({
      name: 'Test string',
      readMask: 'Test string',
    });
    /** List all telemetry devices. */
    await gapi.client.chromemanagement.customers.telemetry.devices.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
      readMask: 'Test string',
    });
    /** List telemetry events. */
    await gapi.client.chromemanagement.customers.telemetry.events.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
      readMask: 'Test string',
    });
    /** Create a telemetry notification config. */
    await gapi.client.chromemanagement.customers.telemetry.notificationConfigs.create(
      {
        parent: 'Test string',
      },
      {
        customer: 'Test string',
        filter: {
          deviceId: 'Test string',
          deviceOrgUnitId: 'Test string',
          telemetryEventNotificationFilter: {
            eventTypes: ['Test string'],
          },
          userEmail: 'Test string',
          userOrgUnitId: 'Test string',
        },
        googleCloudPubsubTopic: 'Test string',
        name: 'Test string',
      }
    );
    /** Delete a telemetry notification config. */
    await gapi.client.chromemanagement.customers.telemetry.notificationConfigs.delete(
      {
        name: 'Test string',
      }
    );
    /** List all telemetry notification configs. */
    await gapi.client.chromemanagement.customers.telemetry.notificationConfigs.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Get telemetry user. */
    await gapi.client.chromemanagement.customers.telemetry.users.get({
      name: 'Test string',
      readMask: 'Test string',
    });
    /** List all telemetry users. */
    await gapi.client.chromemanagement.customers.telemetry.users.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
      readMask: 'Test string',
    });
  }
});
