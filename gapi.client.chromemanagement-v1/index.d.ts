/* Type definitions for non-npm package Chrome Management API v1 0.0 */
// Project: https://developers.google.com/chrome/management/
// Definitions by: Maxim Mazurok <https://github.com/Maxim-Mazurok>
//                 Nick Amoscato <https://github.com/namoscato>
//                 Declan Vong <https://github.com/declanvong>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped

// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
// Generated from: https://chromemanagement.googleapis.com/$discovery/rest?version=v1
// Revision: 20250219

/// <reference types="gapi.client" />

declare namespace gapi.client {
  /** Load Chrome Management API v1 */
  function load(
    urlOrObject: 'https://chromemanagement.googleapis.com/$discovery/rest?version=v1',
  ): Promise<void>;
  /** @deprecated Please load APIs with discovery documents. */
  function load(name: 'chromemanagement', version: 'v1'): Promise<void>;
  /** @deprecated Please load APIs with discovery documents. */
  function load(
    name: 'chromemanagement',
    version: 'v1',
    callback: () => any,
  ): void;

  namespace chromemanagement {
    interface GoogleChromeManagementV1AndroidAppInfo {
      /** Output only. Permissions requested by an Android app. */
      permissions?: GoogleChromeManagementV1AndroidAppPermission[];
    }
    interface GoogleChromeManagementV1AndroidAppPermission {
      /** Output only. The type of the permission. */
      type?: string;
    }
    interface GoogleChromeManagementV1AppDetails {
      /** Output only. Android app information. */
      androidAppInfo?: GoogleChromeManagementV1AndroidAppInfo;
      /** Output only. Unique store identifier for the item. Examples: "gmbmikajjgmnabiglmofipeabaddhgne" for the Save to Google Drive Chrome extension, "com.google.android.apps.docs" for the Google Drive Android app. */
      appId?: string;
      /** Output only. Chrome Web Store app information. */
      chromeAppInfo?: GoogleChromeManagementV1ChromeAppInfo;
      /** Output only. App's description. */
      description?: string;
      /** Output only. The uri for the detail page of the item. */
      detailUri?: string;
      /** Output only. App's display name. */
      displayName?: string;
      /** Output only. First published time. */
      firstPublishTime?: string;
      /** Output only. Home page or Website uri. */
      homepageUri?: string;
      /** Output only. A link to an image that can be used as an icon for the product. */
      iconUri?: string;
      /** Output only. Indicates if the app has to be paid for OR has paid content. */
      isPaidApp?: boolean;
      /** Output only. Latest published time. */
      latestPublishTime?: string;
      /** Output only. Format: name=customers/{customer_id}/apps/{chrome|android|web}/{app_id}@{version} */
      name?: string;
      /** Output only. The URI pointing to the privacy policy of the app, if it was provided by the developer. Version-specific field that will only be set when the requested app version is found. */
      privacyPolicyUri?: string;
      /** Output only. The publisher of the item. */
      publisher?: string;
      /** Output only. Number of reviews received. Chrome Web Store review information will always be for the latest version of an app. */
      reviewNumber?: string;
      /** Output only. The rating of the app (on 5 stars). Chrome Web Store review information will always be for the latest version of an app. */
      reviewRating?: number;
      /** Output only. App version. A new revision is committed whenever a new version of the app is published. */
      revisionId?: string;
      /** Output only. Information about a partial service error if applicable. */
      serviceError?: GoogleRpcStatus;
      /** Output only. App type. */
      type?: string;
    }
    interface GoogleChromeManagementV1AppReport {
      /** Timestamp when the report was collected. */
      reportTime?: string;
      /** App usage data. */
      usageData?: GoogleChromeManagementV1AppUsageData[];
    }
    interface GoogleChromeManagementV1AppUsageData {
      /** App id. */
      appId?: string;
      /** Application instance id. This will be unique per window/instance. */
      appInstanceId?: string;
      /** Type of app. */
      appType?: string;
      /** App foreground running time. */
      runningDuration?: string;
    }
    interface GoogleChromeManagementV1AudioStatusReport {
      /** Output only. Active input device's name. */
      inputDevice?: string;
      /** Output only. Active input device's gain in [0, 100]. */
      inputGain?: number;
      /** Output only. Is active input device mute or not. */
      inputMute?: boolean;
      /** Output only. Active output device's name. */
      outputDevice?: string;
      /** Output only. Is active output device mute or not. */
      outputMute?: boolean;
      /** Output only. Active output device's volume in [0, 100]. */
      outputVolume?: number;
      /** Output only. Timestamp of when the sample was collected on device. */
      reportTime?: string;
    }
    interface GoogleChromeManagementV1BatteryInfo {
      /** Output only. Design capacity (mAmpere-hours). */
      designCapacity?: string;
      /** Output only. Designed minimum output voltage (mV) */
      designMinVoltage?: number;
      /** Output only. The date the battery was manufactured. */
      manufactureDate?: GoogleTypeDate;
      /** Output only. Battery manufacturer. */
      manufacturer?: string;
      /** Output only. Battery serial number. */
      serialNumber?: string;
      /** Output only. Technology of the battery. Example: Li-ion */
      technology?: string;
    }
    interface GoogleChromeManagementV1BatterySampleReport {
      /** Output only. Battery charge percentage. */
      chargeRate?: number;
      /** Output only. Battery current (mA). */
      current?: string;
      /** Output only. The battery discharge rate measured in mW. Positive if the battery is being discharged, negative if it's being charged. */
      dischargeRate?: number;
      /** Output only. Battery remaining capacity (mAmpere-hours). */
      remainingCapacity?: string;
      /** Output only. Timestamp of when the sample was collected on device */
      reportTime?: string;
      /** Output only. Battery status read from sysfs. Example: Discharging */
      status?: string;
      /** Output only. Temperature in Celsius degrees. */
      temperature?: number;
      /** Output only. Battery voltage (millivolt). */
      voltage?: string;
    }
    interface GoogleChromeManagementV1BatteryStatusReport {
      /** Output only. Battery health. */
      batteryHealth?: string;
      /** Output only. Cycle count. */
      cycleCount?: number;
      /** Output only. Full charge capacity (mAmpere-hours). */
      fullChargeCapacity?: string;
      /** Output only. Timestamp of when the sample was collected on device */
      reportTime?: string;
      /** Output only. Sampling data for the battery sorted in a decreasing order of report_time. */
      sample?: GoogleChromeManagementV1BatterySampleReport[];
      /** Output only. Battery serial number. */
      serialNumber?: string;
    }
    interface GoogleChromeManagementV1BootPerformanceReport {
      /** Total time to boot up. */
      bootUpDuration?: string;
      /** The timestamp when power came on. */
      bootUpTime?: string;
      /** Timestamp when the report was collected. */
      reportTime?: string;
      /** Total time since shutdown start to power off. */
      shutdownDuration?: string;
      /** The shutdown reason. */
      shutdownReason?: string;
      /** The timestamp when shutdown. */
      shutdownTime?: string;
    }
    interface GoogleChromeManagementV1BrowserVersion {
      /** Output only. The release channel of the installed browser. */
      channel?: string;
      /** Output only. Count grouped by device_system and major version */
      count?: string;
      /** Output only. Version of the system-specified operating system. */
      deviceOsVersion?: string;
      /** Output only. The device operating system. */
      system?: string;
      /** Output only. The full version of the installed browser. */
      version?: string;
    }
    interface GoogleChromeManagementV1ChromeAppInfo {
      /** Output only. Whether the app or extension is built and maintained by Google. Version-specific field that will only be set when the requested app version is found. */
      googleOwned?: boolean;
      /** Output only. Whether the app or extension is in a published state in the Chrome Web Store. */
      isCwsHosted?: boolean;
      /** Output only. Whether an app supports policy for extensions. */
      isExtensionPolicySupported?: boolean;
      /** Output only. Whether the app is only for Kiosk mode on ChromeOS devices */
      isKioskOnly?: boolean;
      /** Output only. Whether the app or extension is a theme. */
      isTheme?: boolean;
      /** Output only. Whether this app is enabled for Kiosk mode on ChromeOS devices */
      kioskEnabled?: boolean;
      /** Output only. The minimum number of users using this app. */
      minUserCount?: number;
      /** Output only. Every custom permission requested by the app. Version-specific field that will only be set when the requested app version is found. */
      permissions?: GoogleChromeManagementV1ChromeAppPermission[];
      /** Output only. Every permission giving access to domains or broad host patterns. ( e.g. www.google.com). This includes the matches from content scripts as well as hosts in the permissions node of the manifest. Version-specific field that will only be set when the requested app version is found. */
      siteAccess?: GoogleChromeManagementV1ChromeAppSiteAccess[];
      /** Output only. The app developer has enabled support for their app. Version-specific field that will only be set when the requested app version is found. */
      supportEnabled?: boolean;
      /** Output only. Types of an item in the Chrome Web Store */
      type?: string;
    }
    interface GoogleChromeManagementV1ChromeAppPermission {
      /** Output only. If available, whether this permissions grants the app/extension access to user data. */
      accessUserData?: boolean;
      /** Output only. If available, a URI to a page that has documentation for the current permission. */
      documentationUri?: string;
      /** Output only. The type of the permission. */
      type?: string;
    }
    interface GoogleChromeManagementV1ChromeAppRequest {
      /** Output only. Format: app_details=customers/{customer_id}/apps/chrome/{app_id} */
      appDetails?: string;
      /** Output only. Unique store identifier for the app. Example: "gmbmikajjgmnabiglmofipeabaddhgne" for the Save to Google Drive Chrome extension. */
      appId?: string;
      /** Output only. The uri for the detail page of the item. */
      detailUri?: string;
      /** Output only. App's display name. */
      displayName?: string;
      /** Output only. A link to an image that can be used as an icon for the product. */
      iconUri?: string;
      /** Output only. The timestamp of the most recently made request for this app. */
      latestRequestTime?: string;
      /** Output only. Total count of requests for this app. */
      requestCount?: string;
    }
    interface GoogleChromeManagementV1ChromeAppSiteAccess {
      /** Output only. This can contain very specific hosts, or patterns like "*.com" for instance. */
      hostMatch?: string;
    }
    interface GoogleChromeManagementV1CountChromeAppRequestsResponse {
      /** Token to specify the next page in the list. */
      nextPageToken?: string;
      /** Count of requested apps matching request. */
      requestedApps?: GoogleChromeManagementV1ChromeAppRequest[];
      /** Total number of matching app requests. */
      totalSize?: number;
    }
    interface GoogleChromeManagementV1CountChromeBrowsersNeedingAttentionResponse {
      /** Number of browsers that haven’t had any recent activity */
      noRecentActivityCount?: string;
      /** Number of browsers that are pending an OS update */
      pendingBrowserUpdateCount?: string;
      /** Number of browsers that have been recently enrolled */
      recentlyEnrolledCount?: string;
    }
    interface GoogleChromeManagementV1CountChromeCrashEventsResponse {
      /** Crash event counts grouped by date and browser version. */
      crashEventCounts?: GoogleChromeManagementV1CountChromeCrashEventsResponseCrashEventCount[];
    }
    interface GoogleChromeManagementV1CountChromeCrashEventsResponseCrashEventCount {
      /** Browser version this is counting. */
      browserVersion?: string;
      /** Total count of crash events. */
      count?: string;
      /** Date of the crash event. */
      date?: GoogleTypeDate;
    }
    interface GoogleChromeManagementV1CountChromeDevicesReachingAutoExpirationDateResponse {
      /** The list of reports sorted by auto update expiration date in ascending order. */
      deviceAueCountReports?: GoogleChromeManagementV1DeviceAueCountReport[];
    }
    interface GoogleChromeManagementV1CountChromeDevicesThatNeedAttentionResponse {
      /** Number of ChromeOS devices have not synced policies in the past 28 days. */
      noRecentPolicySyncCount?: string;
      /** Number of ChromeOS devices that have not seen any user activity in the past 28 days. */
      noRecentUserActivityCount?: string;
      /** Number of devices whose OS version is not compliant. */
      osVersionNotCompliantCount?: string;
      /** Number of devices that are pending an OS update. */
      pendingUpdate?: string;
      /** Number of devices that are unable to apply a policy due to an OS version mismatch. */
      unsupportedPolicyCount?: string;
    }
    interface GoogleChromeManagementV1CountChromeHardwareFleetDevicesResponse {
      /** The DeviceHardwareCountReport for device cpu type (for example Intel(R) Core(TM) i7-10610U CPU @ 1.80GHz). */
      cpuReports?: GoogleChromeManagementV1DeviceHardwareCountReport[];
      /** The DeviceHardwareCountReport for device memory amount in gigabytes (for example 16). */
      memoryReports?: GoogleChromeManagementV1DeviceHardwareCountReport[];
      /** The DeviceHardwareCountReport for device model type (for example Acer C7 Chromebook). */
      modelReports?: GoogleChromeManagementV1DeviceHardwareCountReport[];
      /** The DeviceHardwareCountReport for device storage amount in gigabytes (for example 128). */
      storageReports?: GoogleChromeManagementV1DeviceHardwareCountReport[];
    }
    interface GoogleChromeManagementV1CountChromeVersionsResponse {
      /** List of all browser versions and their install counts. */
      browserVersions?: GoogleChromeManagementV1BrowserVersion[];
      /** Token to specify the next page of the request. */
      nextPageToken?: string;
      /** Total number browser versions matching request. */
      totalSize?: number;
    }
    interface GoogleChromeManagementV1CountInstalledAppsResponse {
      /** List of installed apps matching request. */
      installedApps?: GoogleChromeManagementV1InstalledApp[];
      /** Token to specify the next page of the request. */
      nextPageToken?: string;
      /** Total number of installed apps matching request. */
      totalSize?: number;
    }
    interface GoogleChromeManagementV1CountPrintJobsByPrinterResponse {
      /** Pagination token for requesting the next page. */
      nextPageToken?: string;
      /** List of PrinterReports matching request. */
      printerReports?: GoogleChromeManagementV1PrinterReport[];
      /** Total number of printers matching request. */
      totalSize?: string;
    }
    interface GoogleChromeManagementV1CountPrintJobsByUserResponse {
      /** Pagination token for requesting the next page. */
      nextPageToken?: string;
      /** Total number of users matching request. */
      totalSize?: string;
      /** List of UserPrintReports matching request. */
      userPrintReports?: GoogleChromeManagementV1UserPrintReport[];
    }
    interface GoogleChromeManagementV1CpuInfo {
      /** Output only. Architecture type for the CPU. * This field provides device information, which is static and will not change over time. * Data for this field is controlled via policy: [ReportDeviceCpuInfo](https://chromeenterprise.google/policies/#ReportDeviceCpuInfo) * Data Collection Frequency: Only at Upload * Default Data Reporting Frequency: 3 hours - Policy Controlled: Yes * Cache: If the device is offline, the collected data is stored locally, and will be reported when the device is next online: No * Reported for affiliated users only: N/A */
      architecture?: string;
      /** Output only. Whether keylocker is configured.`TRUE` = Enabled; `FALSE` = disabled. Only reported if keylockerSupported = `TRUE`. */
      keylockerConfigured?: boolean;
      /** Output only. Whether keylocker is supported. */
      keylockerSupported?: boolean;
      /** Output only. The max CPU clock speed in kHz. */
      maxClockSpeed?: number;
      /** Output only. The CPU model name. Example: Intel(R) Core(TM) i5-8250U CPU @ 1.60GHz */
      model?: string;
    }
    interface GoogleChromeManagementV1CpuStatusReport {
      /** Output only. CPU temperature sample info per CPU core in Celsius */
      cpuTemperatureInfo?: GoogleChromeManagementV1CpuTemperatureInfo[];
      /** Output only. Sample of CPU utilization (0-100 percent). */
      cpuUtilizationPct?: number;
      /** Output only. The timestamp in milliseconds representing time at which this report was sampled. */
      reportTime?: string;
      /** Output only. Frequency the report is sampled. */
      sampleFrequency?: string;
    }
    interface GoogleChromeManagementV1CpuTemperatureInfo {
      /** Output only. CPU label. Example: Core 0 */
      label?: string;
      /** Output only. CPU temperature in Celsius. */
      temperatureCelsius?: number;
    }
    interface GoogleChromeManagementV1Device {
      /** Output only. The ID of the device that reported this Chrome browser information. */
      deviceId?: string;
      /** Output only. The name of the machine within its local network. */
      machine?: string;
    }
    interface GoogleChromeManagementV1DeviceActivityReport {
      /** Output only. Device activity state. */
      deviceActivityState?: string;
      /** Output only. Timestamp of when the report was collected. */
      reportTime?: string;
    }
    interface GoogleChromeManagementV1DeviceAueCountReport {
      /** Enum value of month corresponding to the auto update expiration date in UTC time zone. If the device is already expired, this field is empty. */
      aueMonth?: string;
      /** Int value of year corresponding to the Auto Update Expiration date in UTC time zone. If the device is already expired, this field is empty. */
      aueYear?: string;
      /** Count of devices of this model. */
      count?: string;
      /** Boolean value for whether or not the device has already expired. */
      expired?: boolean;
      /** Public model name of the devices. */
      model?: string;
    }
    interface GoogleChromeManagementV1DeviceHardwareCountReport {
      /** Public name of the hardware specification. */
      bucket?: string;
      /** Count of devices with a unique hardware specification. */
      count?: string;
    }
    interface GoogleChromeManagementV1DeviceRequestingExtensionDetails {
      /** The name of a device that has requested the extension. */
      deviceName?: string;
      /** Request justification as entered by the user. */
      justification?: string;
    }
    interface GoogleChromeManagementV1DiskInfo {
      /** Output only. Number of bytes read since last boot. */
      bytesReadThisSession?: string;
      /** Output only. Number of bytes written since last boot. */
      bytesWrittenThisSession?: string;
      /** Output only. Time spent discarding since last boot. Discarding is writing to clear blocks which are no longer in use. Supported on kernels 4.18+. */
      discardTimeThisSession?: string;
      /** Output only. Disk health. */
      health?: string;
      /** Output only. Counts the time the disk and queue were busy, so unlike the fields above, parallel requests are not counted multiple times. */
      ioTimeThisSession?: string;
      /** Output only. Disk manufacturer. */
      manufacturer?: string;
      /** Output only. Disk model. */
      model?: string;
      /** Output only. Time spent reading from disk since last boot. */
      readTimeThisSession?: string;
      /** Output only. Disk serial number. */
      serialNumber?: string;
      /** Output only. Disk size. */
      sizeBytes?: string;
      /** Output only. Disk type: eMMC / NVMe / ATA / SCSI. */
      type?: string;
      /** Output only. Disk volumes. */
      volumeIds?: string[];
      /** Output only. Time spent writing to disk since last boot. */
      writeTimeThisSession?: string;
    }
    interface GoogleChromeManagementV1DisplayDevice {
      /** Output only. Display height in millimeters. */
      displayHeightMm?: number;
      /** Output only. Display device name. */
      displayName?: string;
      /** Output only. Display width in millimeters. */
      displayWidthMm?: number;
      /** Output only. Is display internal or not. */
      internal?: boolean;
      /** Output only. Three letter manufacturer ID. */
      manufacturerId?: string;
      /** Output only. Year of manufacture. */
      manufactureYear?: number;
      /** Output only. Manufacturer product code. */
      modelId?: number;
    }
    interface GoogleChromeManagementV1DisplayInfo {
      /** Output only. Represents the graphics card device id. */
      deviceId?: string;
      /** Output only. Display device name. */
      displayName?: string;
      /** Output only. Indicates if display is internal or not. */
      isInternal?: boolean;
      /** Output only. Refresh rate in Hz. */
      refreshRate?: number;
      /** Output only. Resolution height in pixels. */
      resolutionHeight?: number;
      /** Output only. Resolution width in pixels. */
      resolutionWidth?: number;
    }
    interface GoogleChromeManagementV1EnumeratePrintJobsResponse {
      /** A token, which can be used in a subsequent request to retrieve the next page. If this field is omitted, there are no subsequent pages. */
      nextPageToken?: string;
      /** List of requested print jobs. */
      printJobs?: GoogleChromeManagementV1PrintJob[];
      /** Total number of print jobs matching request. */
      totalSize?: string;
    }
    interface GoogleChromeManagementV1FetchDevicesRequestingExtensionResponse {
      /** Details of devices that have requested the queried extension. */
      deviceDetails?: GoogleChromeManagementV1DeviceRequestingExtensionDetails[];
      /** Optional. Token to specify the next page in the list. Token expires after 1 day. */
      nextPageToken?: string;
      /** Optional. Total number of devices in response. */
      totalSize?: number;
    }
    interface GoogleChromeManagementV1FetchUsersRequestingExtensionResponse {
      /** Token to specify the next page in the list. */
      nextPageToken?: string;
      /** Total number of users in response. */
      totalSize?: number;
      /** Details of users that have requested the queried extension. */
      userDetails?: GoogleChromeManagementV1UserRequestingExtensionDetails[];
    }
    interface GoogleChromeManagementV1FindInstalledAppDevicesResponse {
      /** A list of devices which have the app installed. Sorted in ascending alphabetical order on the Device.machine field. */
      devices?: GoogleChromeManagementV1Device[];
      /** Token to specify the next page of the request. */
      nextPageToken?: string;
      /** Total number of devices matching request. */
      totalSize?: number;
    }
    interface GoogleChromeManagementV1GraphicsAdapterInfo {
      /** Output only. Adapter name. Example: Mesa DRI Intel(R) UHD Graphics 620 (Kabylake GT2). */
      adapter?: string;
      /** Output only. Represents the graphics card device id. */
      deviceId?: string;
      /** Output only. Version of the GPU driver. */
      driverVersion?: string;
    }
    interface GoogleChromeManagementV1GraphicsInfo {
      /** Output only. Information about the graphics adapter (GPU). */
      adapterInfo?: GoogleChromeManagementV1GraphicsAdapterInfo;
      /** Output only. Information about the display(s) of the device. */
      displayDevices?: GoogleChromeManagementV1DisplayDevice[];
      /** Output only. Is ePrivacy screen supported or not. */
      eprivacySupported?: boolean;
      /** Output only. Information about the internal touch screen(s) of the device. */
      touchScreenInfo?: GoogleChromeManagementV1TouchScreenInfo;
    }
    interface GoogleChromeManagementV1GraphicsStatusReport {
      /** Output only. Information about the displays for the device. */
      displays?: GoogleChromeManagementV1DisplayInfo[];
      /** Output only. Time at which the graphics data was reported. */
      reportTime?: string;
    }
    interface GoogleChromeManagementV1HeartbeatStatusReport {
      /** Timestamp of when status changed was detected */
      reportTime?: string;
      /** State the device changed to */
      state?: string;
    }
    interface GoogleChromeManagementV1HttpsLatencyRoutineData {
      /** Output only. HTTPS latency if routine succeeded or failed because of HIGH_LATENCY or VERY_HIGH_LATENCY. */
      latency?: string;
      /** Output only. HTTPS latency routine problem if a problem occurred. */
      problem?: string;
    }
    interface GoogleChromeManagementV1InstalledApp {
      /** Output only. Unique identifier of the app. For Chrome apps and extensions, the 32-character id (e.g. ehoadneljpdggcbbknedodolkkjodefl). For Android apps, the package name (e.g. com.evernote). */
      appId?: string;
      /** Output only. How the app was installed. */
      appInstallType?: string;
      /** Output only. Source of the installed app. */
      appSource?: string;
      /** Output only. Type of the app. */
      appType?: string;
      /** Output only. Count of browser devices with this app installed. */
      browserDeviceCount?: string;
      /** Output only. Description of the installed app. */
      description?: string;
      /** Output only. Whether the app is disabled. */
      disabled?: boolean;
      /** Output only. Name of the installed app. */
      displayName?: string;
      /** Output only. Homepage uri of the installed app. */
      homepageUri?: string;
      /** Output only. Count of ChromeOS users with this app installed. */
      osUserCount?: string;
      /** Output only. Permissions of the installed app. */
      permissions?: string[];
      /** Output only. If available, the risk assessment data about this extension. */
      riskAssessment?: GoogleChromeManagementV1RiskAssessmentData;
    }
    interface GoogleChromeManagementV1KioskAppStatusReport {
      /** App id of kiosk app for example "mdmkkicfmmkgmpkmkdikhlbggogpicma" */
      appId?: string;
      /** App version number of kiosk app for example "1.10.118" */
      appVersion?: string;
      /** Timestamp of when report was collected */
      reportTime?: string;
    }
    interface GoogleChromeManagementV1ListTelemetryDevicesResponse {
      /** Telemetry devices returned in the response. */
      devices?: GoogleChromeManagementV1TelemetryDevice[];
      /** Token to specify next page in the list. */
      nextPageToken?: string;
    }
    interface GoogleChromeManagementV1ListTelemetryEventsResponse {
      /** Token to specify next page in the list. */
      nextPageToken?: string;
      /** Telemetry events returned in the response. */
      telemetryEvents?: GoogleChromeManagementV1TelemetryEvent[];
    }
    interface GoogleChromeManagementV1ListTelemetryNotificationConfigsResponse {
      /** A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages. */
      nextPageToken?: string;
      /** The telemetry notification configs from the specified customer. */
      telemetryNotificationConfigs?: GoogleChromeManagementV1TelemetryNotificationConfig[];
    }
    interface GoogleChromeManagementV1ListTelemetryUsersResponse {
      /** Token to specify next page in the list. */
      nextPageToken?: string;
      /** Telemetry users returned in the response. */
      telemetryUsers?: GoogleChromeManagementV1TelemetryUser[];
    }
    interface GoogleChromeManagementV1MemoryInfo {
      /** Output only. Amount of available RAM in bytes. */
      availableRamBytes?: string;
      /** Output only. Total memory encryption info for the device. */
      totalMemoryEncryption?: GoogleChromeManagementV1TotalMemoryEncryptionInfo;
      /** Output only. Total RAM in bytes. */
      totalRamBytes?: string;
    }
    interface GoogleChromeManagementV1MemoryStatusReport {
      /** Output only. Number of page faults during this collection */
      pageFaults?: number;
      /** Output only. The timestamp in milliseconds representing time at which this report was sampled. */
      reportTime?: string;
      /** Output only. Frequency the report is sampled. */
      sampleFrequency?: string;
      /** Output only. Amount of free RAM in bytes (unreliable due to Garbage Collection). */
      systemRamFreeBytes?: string;
    }
    interface GoogleChromeManagementV1NetworkBandwidthReport {
      /** Output only. Download speed in kilobits per second. */
      downloadSpeedKbps?: string;
      /** Output only. Timestamp of when the report was collected. */
      reportTime?: string;
    }
    interface GoogleChromeManagementV1NetworkDevice {
      /** Output only. The integrated circuit card ID associated with the device's sim card. */
      iccid?: string;
      /** Output only. IMEI (if applicable) of the corresponding network device. */
      imei?: string;
      /** Output only. MAC address (if applicable) of the corresponding network device. */
      macAddress?: string;
      /** Output only. The mobile directory number associated with the device's sim card. */
      mdn?: string;
      /** Output only. MEID (if applicable) of the corresponding network device. */
      meid?: string;
      /** Output only. Network device type. */
      type?: string;
    }
    interface GoogleChromeManagementV1NetworkDiagnosticsReport {
      /** Output only. HTTPS latency test data. */
      httpsLatencyData?: GoogleChromeManagementV1HttpsLatencyRoutineData;
      /** Output only. Timestamp of when the diagnostics were collected. */
      reportTime?: string;
    }
    interface GoogleChromeManagementV1NetworkInfo {
      /** Output only. List of network devices. */
      networkDevices?: GoogleChromeManagementV1NetworkDevice[];
    }
    interface GoogleChromeManagementV1NetworkStatusReport {
      /** Output only. Current connection state of the network. */
      connectionState?: string;
      /** Output only. Network connection type. */
      connectionType?: string;
      /** Output only. Whether the wifi encryption key is turned off. */
      encryptionOn?: boolean;
      /** Output only. Gateway IP address. */
      gatewayIpAddress?: string;
      /** Output only. Network connection guid. */
      guid?: string;
      /** Output only. LAN IP address. */
      lanIpAddress?: string;
      /** Output only. Receiving bit rate measured in Megabits per second. */
      receivingBitRateMbps?: string;
      /** Output only. Time at which the network state was reported. */
      reportTime?: string;
      /** Output only. Frequency the report is sampled. */
      sampleFrequency?: string;
      /** Output only. Signal strength for wireless networks measured in decibels. */
      signalStrengthDbm?: number;
      /** Output only. Transmission bit rate measured in Megabits per second. */
      transmissionBitRateMbps?: string;
      /** Output only. Transmission power measured in decibels. */
      transmissionPowerDbm?: number;
      /** Output only. Wifi link quality. Value ranges from [0, 70]. 0 indicates no signal and 70 indicates a strong signal. */
      wifiLinkQuality?: string;
      /** Output only. Wifi power management enabled */
      wifiPowerManagementEnabled?: boolean;
    }
    interface GoogleChromeManagementV1OsUpdateStatus {
      /** Output only. Timestamp of the last reboot. */
      lastRebootTime?: string;
      /** Output only. Timestamp of the last update check. */
      lastUpdateCheckTime?: string;
      /** Output only. Timestamp of the last successful update. */
      lastUpdateTime?: string;
      /** Output only. New platform version of the os image being downloaded and applied. It is only set when update status is OS_IMAGE_DOWNLOAD_IN_PROGRESS or OS_UPDATE_NEED_REBOOT. Note this could be a dummy "0.0.0.0" for OS_UPDATE_NEED_REBOOT status for some edge cases, e.g. update engine is restarted without a reboot. */
      newPlatformVersion?: string;
      /** Output only. New requested platform version from the pending updated kiosk app. */
      newRequestedPlatformVersion?: string;
      /** Output only. Current state of the os update. */
      updateState?: string;
    }
    interface GoogleChromeManagementV1PeripheralsReport {
      /** Output only. Timestamp of when the report was collected. */
      reportTime?: string;
      /** Reports of all usb connected devices. */
      usbPeripheralReport?: GoogleChromeManagementV1UsbPeripheralReport[];
    }
    interface GoogleChromeManagementV1PrinterReport {
      /** Number of chrome devices that have been used to send print jobs to the specified printer. */
      deviceCount?: string;
      /** Number of print jobs sent to the printer. */
      jobCount?: string;
      /** Printer name. */
      printer?: string;
      /** Printer API ID. */
      printerId?: string;
      /** Printer model. */
      printerModel?: string;
      /** Number of users that have sent print jobs to the printer. */
      userCount?: string;
    }
    interface GoogleChromeManagementV1PrintJob {
      /** Color mode. */
      colorMode?: string;
      /** Print job completion timestamp. */
      completeTime?: string;
      /** Number of copies. */
      copyCount?: number;
      /** Print job creation timestamp. */
      createTime?: string;
      /** Number of pages in the document. */
      documentPageCount?: number;
      /** Duplex mode. */
      duplexMode?: string;
      /** Unique ID of the print job. */
      id?: string;
      /** Name of the printer used for printing. */
      printer?: string;
      /** API ID of the printer used for printing. */
      printerId?: string;
      /** The final state of the job. */
      state?: string;
      /** The title of the document. */
      title?: string;
      /** The primary e-mail address of the user who submitted the print job. */
      userEmail?: string;
      /** The unique Directory API ID of the user who submitted the print job. */
      userId?: string;
    }
    interface GoogleChromeManagementV1RiskAssessment {
      /** Risk assessment for the extension. Currently, this is a numerical value, and its interpretation is specific to each risk assessment provider. */
      assessment?: string;
      /** A URL that a user can navigate to for more information about the risk assessment. */
      detailsUrl?: string;
      /** The version of the extension that this assessment applies to. */
      version?: string;
    }
    interface GoogleChromeManagementV1RiskAssessmentData {
      /** Individual risk assessments. */
      entries?: GoogleChromeManagementV1RiskAssessmentEntry[];
      /** Overall assessed risk level across all entries. This will be the highest risk level from all entries. */
      overallRiskLevel?: string;
    }
    interface GoogleChromeManagementV1RiskAssessmentEntry {
      /** The risk assessment provider from which this entry comes from. */
      provider?: string;
      /** The details of the provider's risk assessment. */
      riskAssessment?: GoogleChromeManagementV1RiskAssessment;
      /** The bucketed risk level for the risk assessment. */
      riskLevel?: string;
    }
    interface GoogleChromeManagementV1RuntimeCountersReport {
      /** Number of times that the device has entered into the hibernation state. Currently obtained via the PSR, count from S0->S4. */
      enterHibernationCount?: string;
      /** Number of times that the device has entered into the power-off state. Currently obtained via the PSR, count from S0->S5. */
      enterPoweroffCount?: string;
      /** Number of times that the device has entered into the sleep state. Currently obtained via the PSR, count from S0->S3. */
      enterSleepCount?: string;
      /** Timestamp when the report was collected. */
      reportTime?: string;
      /** Total lifetime runtime. Currently always S0 runtime from Intel vPro PSR. */
      uptimeRuntimeDuration?: string;
    }
    interface GoogleChromeManagementV1StorageInfo {
      /** The available space for user data storage in the device in bytes. */
      availableDiskBytes?: string;
      /** The total space for user data storage in the device in bytes. */
      totalDiskBytes?: string;
      /** Information for disk volumes */
      volume?: GoogleChromeManagementV1StorageInfoDiskVolume[];
    }
    interface GoogleChromeManagementV1StorageInfoDiskVolume {
      /** Free storage space in bytes. */
      storageFreeBytes?: string;
      /** Total storage space in bytes. */
      storageTotalBytes?: string;
      /** Disk volume id. */
      volumeId?: string;
    }
    interface GoogleChromeManagementV1StorageStatusReport {
      /** Output only. Reports on disk. */
      disk?: GoogleChromeManagementV1DiskInfo[];
      /** Output only. Timestamp of when the sample was collected on device */
      reportTime?: string;
    }
    interface GoogleChromeManagementV1TelemetryAppInstallEvent {
      /** App id. For PWAs this is the start URL, and for extensions this is the extension id. */
      appId?: string;
      /** App installation reason. */
      appInstallReason?: string;
      /** App installation source. */
      appInstallSource?: string;
      /** App installation time depending on the app lifecycle. */
      appInstallTime?: string;
      /** Type of app. */
      appType?: string;
    }
    interface GoogleChromeManagementV1TelemetryAppLaunchEvent {
      /** App id. For PWAs this is the start URL, and for extensions this is the extension id. */
      appId?: string;
      /** App launch source. */
      appLaunchSource?: string;
      /** Type of app. */
      appType?: string;
    }
    interface GoogleChromeManagementV1TelemetryAppUninstallEvent {
      /** App id. For PWAs this is the start URL, and for extensions this is the extension id. */
      appId?: string;
      /** Type of app. */
      appType?: string;
      /** App uninstall source. */
      appUninstallSource?: string;
    }
    interface GoogleChromeManagementV1TelemetryAudioSevereUnderrunEvent {}
    interface GoogleChromeManagementV1TelemetryDevice {
      /** Output only. App reports collected periodically sorted in a decreasing order of report_time. */
      appReport?: GoogleChromeManagementV1AppReport[];
      /** Output only. Audio reports collected periodically sorted in a decreasing order of report_time. */
      audioStatusReport?: GoogleChromeManagementV1AudioStatusReport[];
      /** Output only. Information on battery specs for the device. */
      batteryInfo?: GoogleChromeManagementV1BatteryInfo[];
      /** Output only. Battery reports collected periodically. */
      batteryStatusReport?: GoogleChromeManagementV1BatteryStatusReport[];
      /** Output only. Boot performance reports of the device. */
      bootPerformanceReport?: GoogleChromeManagementV1BootPerformanceReport[];
      /** Output only. Information regarding CPU specs for the device. */
      cpuInfo?: GoogleChromeManagementV1CpuInfo[];
      /** Output only. CPU status reports collected periodically sorted in a decreasing order of report_time. */
      cpuStatusReport?: GoogleChromeManagementV1CpuStatusReport[];
      /** Output only. Google Workspace Customer whose enterprise enrolled the device. */
      customer?: string;
      /** Output only. The unique Directory API ID of the device. This value is the same as the Admin Console's Directory API ID in the ChromeOS Devices tab */
      deviceId?: string;
      /** Output only. Contains information regarding Graphic peripherals for the device. */
      graphicsInfo?: GoogleChromeManagementV1GraphicsInfo;
      /** Output only. Graphics reports collected periodically. */
      graphicsStatusReport?: GoogleChromeManagementV1GraphicsStatusReport[];
      /** Output only. Heartbeat status report containing timestamps periodically sorted in decreasing order of report_time */
      heartbeatStatusReport?: GoogleChromeManagementV1HeartbeatStatusReport[];
      /** Output only. Kiosk app status report for the kiosk device */
      kioskAppStatusReport?: GoogleChromeManagementV1KioskAppStatusReport[];
      /** Output only. Information regarding memory specs for the device. */
      memoryInfo?: GoogleChromeManagementV1MemoryInfo;
      /** Output only. Memory status reports collected periodically sorted decreasing by report_time. */
      memoryStatusReport?: GoogleChromeManagementV1MemoryStatusReport[];
      /** Output only. Resource name of the device. */
      name?: string;
      /** Output only. Network bandwidth reports collected periodically sorted in a decreasing order of report_time. */
      networkBandwidthReport?: GoogleChromeManagementV1NetworkBandwidthReport[];
      /** Output only. Network diagnostics collected periodically. */
      networkDiagnosticsReport?: GoogleChromeManagementV1NetworkDiagnosticsReport[];
      /** Output only. Network devices information. */
      networkInfo?: GoogleChromeManagementV1NetworkInfo;
      /** Output only. Network specs collected periodically. */
      networkStatusReport?: GoogleChromeManagementV1NetworkStatusReport[];
      /** Output only. Organization unit ID of the device. */
      orgUnitId?: string;
      /** Output only. Contains relevant information regarding ChromeOS update status. */
      osUpdateStatus?: GoogleChromeManagementV1OsUpdateStatus[];
      /** Output only. Peripherals reports collected periodically sorted in a decreasing order of report_time. */
      peripheralsReport?: GoogleChromeManagementV1PeripheralsReport[];
      /** Output only. Runtime counters reports collected device lifetime runtime, as well as the counts of S0->S3, S0->S4, and S0->S5 transitions, meaning entering into sleep, hibernation, and power-off states */
      runtimeCountersReport?: GoogleChromeManagementV1RuntimeCountersReport[];
      /** Output only. Device serial number. This value is the same as the Admin Console's Serial Number in the ChromeOS Devices tab. */
      serialNumber?: string;
      /** Output only. Information of storage specs for the device. */
      storageInfo?: GoogleChromeManagementV1StorageInfo;
      /** Output only. Storage reports collected periodically. */
      storageStatusReport?: GoogleChromeManagementV1StorageStatusReport[];
      /** Output only. Information on Thunderbolt bus. */
      thunderboltInfo?: GoogleChromeManagementV1ThunderboltInfo[];
    }
    interface GoogleChromeManagementV1TelemetryDeviceInfo {
      /** Output only. The unique Directory API ID of the device. This value is the same as the Admin Console's Directory API ID in the ChromeOS Devices tab. */
      deviceId?: string;
      /** Output only. Organization unit ID of the device. */
      orgUnitId?: string;
    }
    interface GoogleChromeManagementV1TelemetryEvent {
      /** Output only. Payload for app install event. Present only when `event_type` is `APP_INSTALLED`. */
      appInstallEvent?: GoogleChromeManagementV1TelemetryAppInstallEvent;
      /** Output only. Payload for app launch event.Present only when `event_type` is `APP_LAUNCHED`. */
      appLaunchEvent?: GoogleChromeManagementV1TelemetryAppLaunchEvent;
      /** Output only. Payload for app uninstall event. Present only when `event_type` is `APP_UNINSTALLED`. */
      appUninstallEvent?: GoogleChromeManagementV1TelemetryAppUninstallEvent;
      /** Output only. Payload for audio severe underrun event. Present only when the `event_type` field is `AUDIO_SEVERE_UNDERRUN`. */
      audioSevereUnderrunEvent?: any;
      /** Output only. Information about the device associated with the event. */
      device?: GoogleChromeManagementV1TelemetryDeviceInfo;
      /** The event type of the current event. */
      eventType?: string;
      /** Output only. Payload for HTTPS latency change event. Present only when `event_type` is `NETWORK_HTTPS_LATENCY_CHANGE`. */
      httpsLatencyChangeEvent?: GoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent;
      /** Output only. Resource name of the event. */
      name?: string;
      /** Output only. Payload for network connection state change event. Present only when `event_type` is `NETWORK_STATE_CHANGE`. */
      networkStateChangeEvent?: GoogleChromeManagementV1TelemetryNetworkConnectionStateChangeEvent;
      /** Timestamp that represents when the event was reported. */
      reportTime?: string;
      /** Output only. Payload for usb peripherals event. Present only when the `event_type` field is either `USB_ADDED` or `USB_REMOVED`. */
      usbPeripheralsEvent?: GoogleChromeManagementV1TelemetryUsbPeripheralsEvent;
      /** Output only. Information about the user associated with the event. */
      user?: GoogleChromeManagementV1TelemetryUserInfo;
      /** Output only. Payload for VPN connection state change event. Present only when `event_type` is `VPN_CONNECTION_STATE_CHANGE`. */
      vpnConnectionStateChangeEvent?: GoogleChromeManagementV1TelemetryNetworkConnectionStateChangeEvent;
      /** Output only. Payload for WiFi signal strength events. Present only when `event_type` is `WIFI_SIGNAL_STRENGTH_LOW` or `WIFI_SIGNAL_STRENGTH_RECOVERED`. */
      wifiSignalStrengthEvent?: GoogleChromeManagementV1TelemetryNetworkSignalStrengthEvent;
    }
    interface GoogleChromeManagementV1TelemetryEventNotificationFilter {
      /** Only sends the notifications for events of these types. Must not be empty. */
      eventTypes?: string[];
    }
    interface GoogleChromeManagementV1TelemetryHttpsLatencyChangeEvent {
      /** HTTPS latency routine data that triggered the event. */
      httpsLatencyRoutineData?: GoogleChromeManagementV1HttpsLatencyRoutineData;
      /** Current HTTPS latency state. */
      httpsLatencyState?: string;
    }
    interface GoogleChromeManagementV1TelemetryNetworkConnectionStateChangeEvent {
      /** Current connection state of the network. */
      connectionState?: string;
      /** Unique identifier of the network. */
      guid?: string;
    }
    interface GoogleChromeManagementV1TelemetryNetworkSignalStrengthEvent {
      /** Unique identifier of the network. */
      guid?: string;
      /** Signal strength RSSI value. */
      signalStrengthDbm?: number;
    }
    interface GoogleChromeManagementV1TelemetryNotificationConfig {
      /** Output only. Google Workspace customer that owns the resource. */
      customer?: string;
      /** Only send notifications for telemetry data matching this filter. */
      filter?: GoogleChromeManagementV1TelemetryNotificationFilter;
      /** The pubsub topic to which notifications are published to. */
      googleCloudPubsubTopic?: string;
      /** Output only. Resource name of the notification configuration. */
      name?: string;
    }
    interface GoogleChromeManagementV1TelemetryNotificationFilter {
      /** If set, only sends notifications for telemetry data coming from this device. */
      deviceId?: string;
      /** If set, only sends notifications for telemetry data coming from devices in this org unit. */
      deviceOrgUnitId?: string;
      /** Only sends notifications for the telemetry events matching this filter. */
      telemetryEventNotificationFilter?: GoogleChromeManagementV1TelemetryEventNotificationFilter;
      /** If set, only sends notifications for telemetry data coming from devices owned by this user. */
      userEmail?: string;
      /** If set, only sends notifications for telemetry data coming from devices owned by users in this org unit. */
      userOrgUnitId?: string;
    }
    interface GoogleChromeManagementV1TelemetryUsbPeripheralsEvent {
      /** List of usb devices that were either added or removed. */
      usbPeripheralReport?: GoogleChromeManagementV1UsbPeripheralReport[];
    }
    interface GoogleChromeManagementV1TelemetryUser {
      /** G Suite Customer whose enterprise enrolled the device. */
      customer?: string;
      /** Resource name of the user. */
      name?: string;
      /** Organization unit of the user. */
      orgUnitId?: string;
      /** Telemetry data collected from a managed user and device. */
      userDevice?: GoogleChromeManagementV1TelemetryUserDevice[];
      /** Email address of the user. */
      userEmail?: string;
      /** Directory ID of the user. */
      userId?: string;
    }
    interface GoogleChromeManagementV1TelemetryUserDevice {
      /** Output only. App reports collected periodically sorted in a decreasing order of report_time. */
      appReport?: GoogleChromeManagementV1AppReport[];
      /** Output only. Audio reports collected periodically sorted in a decreasing order of report_time. */
      audioStatusReport?: GoogleChromeManagementV1AudioStatusReport[];
      /** Output only. Device activity reports collected periodically sorted in a decreasing order of report_time. */
      deviceActivityReport?: GoogleChromeManagementV1DeviceActivityReport[];
      /** The unique Directory API ID of the device. This value is the same as the Admin Console's Directory API ID in the ChromeOS Devices tab. */
      deviceId?: string;
      /** Output only. Network bandwidth reports collected periodically sorted in a decreasing order of report_time. */
      networkBandwidthReport?: GoogleChromeManagementV1NetworkBandwidthReport[];
      /** Output only. Peripherals reports collected periodically sorted in a decreasing order of report_time. */
      peripheralsReport?: GoogleChromeManagementV1PeripheralsReport[];
    }
    interface GoogleChromeManagementV1TelemetryUserInfo {
      /** Output only. User's email. */
      email?: string;
      /** Output only. Organization unit ID of the user. */
      orgUnitId?: string;
    }
    interface GoogleChromeManagementV1ThunderboltInfo {
      /** Security level of the Thunderbolt bus. */
      securityLevel?: string;
    }
    interface GoogleChromeManagementV1TotalMemoryEncryptionInfo {
      /** Memory encryption algorithm. */
      encryptionAlgorithm?: string;
      /** The state of memory encryption on the device. */
      encryptionState?: string;
      /** The length of the encryption keys. */
      keyLength?: string;
      /** The maximum number of keys that can be used for encryption. */
      maxKeys?: string;
    }
    interface GoogleChromeManagementV1TouchScreenDevice {
      /** Output only. Touch screen device display name. */
      displayName?: string;
      /** Output only. Touch screen device is stylus capable or not. */
      stylusCapable?: boolean;
      /** Output only. Number of touch points supported on the device. */
      touchPointCount?: number;
    }
    interface GoogleChromeManagementV1TouchScreenInfo {
      /** Output only. List of the internal touch screen devices. */
      devices?: GoogleChromeManagementV1TouchScreenDevice[];
      /** Output only. Touchpad library name used by the input stack. */
      touchpadLibrary?: string;
    }
    interface GoogleChromeManagementV1UsbPeripheralReport {
      /** Output only. Categories the device belongs to https://www.usb.org/defined-class-codes */
      categories?: string[];
      /** Output only. Class ID https://www.usb.org/defined-class-codes */
      classId?: number;
      /** Output only. Firmware version */
      firmwareVersion?: string;
      /** Output only. Device name, model name, or product name */
      name?: string;
      /** Output only. Product ID */
      pid?: number;
      /** Output only. Subclass ID https://www.usb.org/defined-class-codes */
      subclassId?: number;
      /** Output only. Vendor name */
      vendor?: string;
      /** Output only. Vendor ID */
      vid?: number;
    }
    interface GoogleChromeManagementV1UserPrintReport {
      /** Number of chrome devices that have been used to initiate print jobs by the user. */
      deviceCount?: string;
      /** Number of print jobs initiated by the user. */
      jobCount?: string;
      /** Number of printers used by the user. */
      printerCount?: string;
      /** The primary e-mail address of the user. */
      userEmail?: string;
      /** The unique Directory API ID of the user. */
      userId?: string;
    }
    interface GoogleChromeManagementV1UserRequestingExtensionDetails {
      /** The e-mail address of a user that has requested the extension. */
      email?: string;
      /** Request justification as entered by the user. */
      justification?: string;
    }
    interface GoogleChromeManagementVersionsV1alpha1CertificateProvisioningProcess {
      /** Output only. A JSON string that contains the administrator-provided configuration for the certification authority service. This field can be missing if no configuration was given. */
      caConnectionAdapterConfigReference?: string;
      /** Output only. The client certificate is being provisioned for a ChromeOS device. This contains information about the device. */
      chromeOsDevice?: GoogleChromeManagementVersionsV1alpha1ChromeOsDevice;
      /** Output only. The client certificate is being provisioned for a ChromeOS user session. This contains information about the user session. */
      chromeOsUserSession?: GoogleChromeManagementVersionsV1alpha1ChromeOsUserSession;
      /** Output only. A message describing why this `CertificateProvisioningProcess` failed. Presence of this field indicates that the `CertificateProvisioningProcess` has failed. */
      failureMessage?: string;
      /** Output only. The CA connection is a generic CA connection. */
      genericCaConnection?: GoogleChromeManagementVersionsV1alpha1GenericCaConnection;
      /** Output only. The profile is a generic certificate provisioning profile. */
      genericProfile?: GoogleChromeManagementVersionsV1alpha1GenericProfile;
      /** Output only. The issued certificate for this `CertificateProvisioningProcess` in PEM format. */
      issuedCertificate?: string;
      /** Identifier. Resource name of the `CertificateProvisioningProcess`. The name pattern is given as `customers/{customer}/certificateProvisioningProcesses/{certificate_provisioning_process}` with `{customer}` being the obfuscated customer id and `{certificate_provisioning_process}` being the certificate provisioning process id. */
      name?: string;
      /** Output only. A JSON string that contains the administrator-provided configuration for the certificate provisioning profile. This field can be missing if no configuration was given. */
      profileAdapterConfigReference?: string;
      /** Output only. The ID of the certificate provisioning profile. */
      provisioningProfileId?: string;
      /** Output only. The signature of `signature_algorithm`, generated using the client's private key using `signature_algorithm`. This field is only present after the`SignData` operation has finished. */
      signature?: string;
      /** Output only. The signature algorithm that the adapter expects the client and backend components to use when processing `sign_data`. This field is only present after the `SignData` operation has been initiated. */
      signatureAlgorithm?: string;
      /** Output only. The data that the client was asked to sign. This field is only present after the `SignData` operation has been initiated. */
      signData?: string;
      /** Output only. Server-generated timestamp of when the certificate provisioning process has been created. */
      startTime?: string;
      /** Output only. The public key for which a certificate should be provisioned. Represented as a DER-encoded X.509 SubjectPublicKeyInfo. */
      subjectPublicKeyInfo?: string;
    }
    interface GoogleChromeManagementVersionsV1alpha1ChromeOsDevice {
      /** Output only. The unique Directory API ID of the device. This value is the same as the Admin Console's Directory API ID in the ChromeOS Devices tab. */
      deviceDirectoryApiId?: string;
      /** Output only. Device serial number. This value is the same as the Admin Console's Serial Number in the ChromeOS Devices tab. */
      serialNumber?: string;
    }
    interface GoogleChromeManagementVersionsV1alpha1ChromeOsUserSession {
      /** Output only. This field contains information about the ChromeOS device that the user session is running on. It is only set if the user session is affiliated, i.e. if the user is managed by the same organization that managed the ChromeOS device. */
      chromeOsDevice?: GoogleChromeManagementVersionsV1alpha1ChromeOsDevice;
      /** Output only. The unique Directory API ID of the user. */
      userDirectoryApiId?: string;
      /** Output only. The primary e-mail address of the user. */
      userPrimaryEmail?: string;
    }
    interface GoogleChromeManagementVersionsV1alpha1GenericCaConnection {
      /** Output only. A string that references the administrator-provided configuration for the certification authority service. This field can be missing if no configuration was given. */
      caConnectionAdapterConfigReference?: string;
    }
    interface GoogleChromeManagementVersionsV1alpha1GenericProfile {
      /** Output only. A string that references the administrator-provided configuration for the certificate provisioning profile. This field can be missing if no configuration was given. */
      profileAdapterConfigReference?: string;
    }
    interface GoogleChromeManagementVersionsV1alpha1SignDataMetadata {
      /** Output only. Start time of the SignData operation. */
      startTime?: string;
    }
    interface GoogleChromeManagementVersionsV1alpha1SignDataResponse {
      /** Output only. The certificate provisioning process. The signature generated by the client will be available in the `signature` field of `CertificateProvisioningProcess`. */
      certificateProvisioningProcess?: GoogleChromeManagementVersionsV1alpha1CertificateProvisioningProcess;
    }
    interface GoogleChromeManagementVersionsV1AttestationCredential {
      /** Output only. Latest rotation timestamp of the public key rotation. */
      keyRotationTime?: string;
      /** Output only. Trust level of the public key. */
      keyTrustLevel?: string;
      /** Output only. Type of the public key. */
      keyType?: string;
      /** Output only. Value of the public key. */
      publicKey?: string;
    }
    interface GoogleChromeManagementVersionsV1CertificateProvisioningProcess {
      /** Output only. A JSON string that contains the administrator-provided configuration for the certification authority service. This field can be missing if no configuration was given. */
      caConnectionAdapterConfigReference?: string;
      /** Output only. The client certificate is being provisioned for a ChromeOS device. This contains information about the device. */
      chromeOsDevice?: GoogleChromeManagementVersionsV1ChromeOsDevice;
      /** Output only. The client certificate is being provisioned for a ChromeOS user session. This contains information about the user session. */
      chromeOsUserSession?: GoogleChromeManagementVersionsV1ChromeOsUserSession;
      /** Output only. A message describing why this `CertificateProvisioningProcess` failed. Presence of this field indicates that the `CertificateProvisioningProcess` has failed. */
      failureMessage?: string;
      /** Output only. The CA connection is a generic CA connection. */
      genericCaConnection?: GoogleChromeManagementVersionsV1GenericCaConnection;
      /** Output only. The profile is a generic certificate provisioning profile. */
      genericProfile?: GoogleChromeManagementVersionsV1GenericProfile;
      /** Output only. The issued certificate for this `CertificateProvisioningProcess` in PEM format. */
      issuedCertificate?: string;
      /** Identifier. Resource name of the `CertificateProvisioningProcess`. The name pattern is given as `customers/{customer}/certificateProvisioningProcesses/{certificate_provisioning_process}` with `{customer}` being the obfuscated customer id and `{certificate_provisioning_process}` being the certificate provisioning process id. */
      name?: string;
      /** Output only. A JSON string that contains the administrator-provided configuration for the certificate provisioning profile. This field can be missing if no configuration was given. */
      profileAdapterConfigReference?: string;
      /** Output only. The ID of the certificate provisioning profile. */
      provisioningProfileId?: string;
      /** Output only. The signature of `signature_algorithm`, generated using the client's private key using `signature_algorithm`. This field is only present after the`SignData` operation has finished. */
      signature?: string;
      /** Output only. The signature algorithm that the adapter expects the client and backend components to use when processing `sign_data`. This field is only present after the `SignData` operation has been initiated. */
      signatureAlgorithm?: string;
      /** Output only. The data that the client was asked to sign. This field is only present after the `SignData` operation has been initiated. */
      signData?: string;
      /** Output only. Server-generated timestamp of when the certificate provisioning process has been created. */
      startTime?: string;
      /** Output only. The public key for which a certificate should be provisioned. Represented as a DER-encoded X.509 SubjectPublicKeyInfo. */
      subjectPublicKeyInfo?: string;
    }
    interface GoogleChromeManagementVersionsV1ChromeBrowserProfile {
      /** Output only. The specific affiliation state of the profile. */
      affiliationState?: string;
      /** Optional. Location of the profile annotated by the admin. */
      annotatedLocation?: string;
      /** Optional. User of the profile annotated by the admin. */
      annotatedUser?: string;
      /** Output only. Attestation credential information of the profile. */
      attestationCredential?: GoogleChromeManagementVersionsV1AttestationCredential;
      /** Output only. Channel of the browser on which the profile exists. */
      browserChannel?: string;
      /** Output only. Version of the browser on which the profile exists. */
      browserVersion?: string;
      /** Output only. Basic information of the device on which the profile exists. This information is only available for the affiliated profiles. */
      deviceInfo?: GoogleChromeManagementVersionsV1DeviceInfo;
      /** Output only. Profile display name set by client. */
      displayName?: string;
      /** Output only. Etag of this ChromeBrowserProfile resource. This etag can be used with UPDATE operation to ensure consistency. */
      etag?: string;
      /** Output only. Number of extensions installed on the profile. */
      extensionCount?: string;
      /** Output only. Timestamp of the first enrollment of the profile. */
      firstEnrollmentTime?: string;
      /** Output only. Identify provider of the profile. */
      identityProvider?: string;
      /** Output only. Timestamp of the latest activity by the profile. */
      lastActivityTime?: string;
      /** Output only. Timestamp of the latest policy fetch by the profile. */
      lastPolicyFetchTime?: string;
      /** Output only. Timestamp of the latest policy sync by the profile. */
      lastPolicySyncTime?: string;
      /** Output only. Timestamp of the latest status report by the profile. */
      lastStatusReportTime?: string;
      /** Identifier. Format: customers/{customer_id}/profiles/{profile_permanent_id} */
      name?: string;
      /** Output only. OS platform of the device on which the profile exists. */
      osPlatformType?: string;
      /** Output only. Major OS version of the device on which the profile exists. (i.e. Windows 10) */
      osPlatformVersion?: string;
      /** Output only. OS version of the device on which the profile exists. */
      osVersion?: string;
      /** Output only. Number of policies applied on the profile. */
      policyCount?: string;
      /** Output only. Chrome client side profile ID. */
      profileId?: string;
      /** Output only. Profile permanent ID is the unique identifier of a profile within one customer. */
      profilePermanentId?: string;
      /** Output only. Detailed reporting data of the profile. This information is only available when the profile reporting policy is enabled. */
      reportingData?: GoogleChromeManagementVersionsV1ReportingData;
      /** Output only. Email address of the user to which the profile belongs. */
      userEmail?: string;
      /** Output only. Unique Directory API ID of the user that can be used in Admin SDK Users API. */
      userId?: string;
    }
    interface GoogleChromeManagementVersionsV1ChromeOsDevice {
      /** Output only. The unique Directory API ID of the device. This value is the same as the Admin Console's Directory API ID in the ChromeOS Devices tab. */
      deviceDirectoryApiId?: string;
      /** Output only. Device serial number. This value is the same as the Admin Console's Serial Number in the ChromeOS Devices tab. */
      serialNumber?: string;
    }
    interface GoogleChromeManagementVersionsV1ChromeOsUserSession {
      /** Output only. This field contains information about the ChromeOS device that the user session is running on. It is only set if the user session is affiliated, i.e. if the user is managed by the same organization that managed the ChromeOS device. */
      chromeOsDevice?: GoogleChromeManagementVersionsV1ChromeOsDevice;
      /** Output only. The unique Directory API ID of the user. */
      userDirectoryApiId?: string;
      /** Output only. The primary e-mail address of the user. */
      userPrimaryEmail?: string;
    }
    interface GoogleChromeManagementVersionsV1DeviceInfo {
      /** Output only. Device ID that identifies the affiliated device on which the profile exists. If the device type is CHROME_BROWSER, then this represents a unique Directory API ID of the device that can be used in Admin SDK Browsers API. */
      affiliatedDeviceId?: string;
      /** Output only. Type of the device on which the profile exists. */
      deviceType?: string;
      /** Output only. Hostname of the device on which the profile exists. */
      hostname?: string;
      /** Output only. Machine name of the device on which the profile exists. On platforms which do not report the machine name (currently iOS and Android) this is instead set to the browser's device_id - but note that this is a different device_id than the |affiliated_device_id|. */
      machine?: string;
    }
    interface GoogleChromeManagementVersionsV1GenericCaConnection {
      /** Output only. A string that references the administrator-provided configuration for the certification authority service. This field can be missing if no configuration was given. */
      caConnectionAdapterConfigReference?: string;
    }
    interface GoogleChromeManagementVersionsV1GenericProfile {
      /** Output only. A string that references the administrator-provided configuration for the certificate provisioning profile. This field can be missing if no configuration was given. */
      profileAdapterConfigReference?: string;
    }
    interface GoogleChromeManagementVersionsV1ListChromeBrowserProfilesResponse {
      /** The list of profiles returned. */
      chromeBrowserProfiles?: GoogleChromeManagementVersionsV1ChromeBrowserProfile[];
      /** The pagination token that can be used to list the next page. */
      nextPageToken?: string;
      /** Total size represents an estimated number of resources returned. Not guaranteed to be accurate above 10k profiles. */
      totalSize?: string;
    }
    interface GoogleChromeManagementVersionsV1ReportingData {
      /** Output only. Executable path of the installed Chrome browser. A valid path is included only in affiliated profiles. */
      browserExecutablePath?: string;
      /** Output only. Information of the extensions installed on the profile. */
      extensionData?: GoogleChromeManagementVersionsV1ReportingDataExtensionData[];
      /** Output only. Information of the policies applied on the extensions. */
      extensionPolicyData?: GoogleChromeManagementVersionsV1ReportingDataExtensionPolicyData[];
      /** Output only. Updated version of a browser, if it is different from the active browser version. */
      installedBrowserVersion?: string;
      /** Output only. Information of the policies applied on the profile. */
      policyData?: GoogleChromeManagementVersionsV1ReportingDataPolicyData[];
      /** Output only. Path of the profile. A valid path is included only in affiliated profiles. */
      profilePath?: string;
    }
    interface GoogleChromeManagementVersionsV1ReportingDataConflictingPolicyData {
      /** Output only. Source of the policy. */
      source?: string;
    }
    interface GoogleChromeManagementVersionsV1ReportingDataExtensionData {
      /** Output only. Description of the extension. */
      description?: string;
      /** Output only. ID of the extension. */
      extensionId?: string;
      /** Output only. Type of the extension. */
      extensionType?: string;
      /** Output only. The URL of the homepage of the extension. */
      homepageUri?: string;
      /** Output only. Installation type of the extension. */
      installationType?: string;
      /** Output only. Represents whether the user disabled the extension. */
      isDisabled?: boolean;
      /** Output only. Represents whether the extension is from the webstore. */
      isWebstoreExtension?: boolean;
      /** Output only. Manifest version of the extension. */
      manifestVersion?: number;
      /** Output only. Name of the extension. */
      name?: string;
      /** Output only. Permissions requested by the extension. */
      permissions?: string[];
      /** Output only. Version of the extension. */
      version?: string;
    }
    interface GoogleChromeManagementVersionsV1ReportingDataExtensionPolicyData {
      /** Output only. ID of the extension. */
      extensionId?: string;
      /** Output only. Name of the extension. */
      extensionName?: string;
      /** Output only. Information of the policies applied on the extension. */
      policyData?: GoogleChromeManagementVersionsV1ReportingDataPolicyData[];
    }
    interface GoogleChromeManagementVersionsV1ReportingDataPolicyData {
      /** Output only. Conflicting policy information. */
      conflicts?: GoogleChromeManagementVersionsV1ReportingDataConflictingPolicyData[];
      /** Output only. Error message of the policy, if any. */
      error?: string;
      /** Output only. Name of the policy. */
      name?: string;
      /** Output only. Source of the policy. */
      source?: string;
      /** Output only. Value of the policy. */
      value?: string;
    }
    interface GoogleChromeManagementVersionsV1SignDataMetadata {
      /** Output only. Start time of the SignData operation. */
      startTime?: string;
    }
    interface GoogleChromeManagementVersionsV1SignDataResponse {
      /** Output only. The certificate provisioning process. The signature generated by the client will be available in the `signature` field of `CertificateProvisioningProcess`. */
      certificateProvisioningProcess?: GoogleChromeManagementVersionsV1CertificateProvisioningProcess;
    }
    interface GoogleProtobufEmpty {}
    interface GoogleRpcStatus {
      /** The status code, which should be an enum value of google.rpc.Code. */
      code?: number;
      /** A list of messages that carry the error details. There is a common set of message types for APIs to use. */
      details?: Array<{[P in string]: any}>;
      /** A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client. */
      message?: string;
    }
    interface GoogleTypeDate {
      /** Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant. */
      day?: number;
      /** Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day. */
      month?: number;
      /** Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year. */
      year?: number;
    }
    interface AndroidResource {
      /** Get a specific app for a customer by its resource name. */
      get(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. The app for which details are being queried. Examples: "customers/my_customer/apps/chrome/gmbmikajjgmnabiglmofipeabaddhgne@2.1.2" for the Save to Google Drive Chrome extension version 2.1.2, "customers/my_customer/apps/android/com.google.android.apps.docs" for the Google Drive Android app's latest version. */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<GoogleChromeManagementV1AppDetails>;
    }
    interface ChromeResource {
      /** Get a specific app for a customer by its resource name. */
      get(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. The app for which details are being queried. Examples: "customers/my_customer/apps/chrome/gmbmikajjgmnabiglmofipeabaddhgne@2.1.2" for the Save to Google Drive Chrome extension version 2.1.2, "customers/my_customer/apps/android/com.google.android.apps.docs" for the Google Drive Android app's latest version. */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<GoogleChromeManagementV1AppDetails>;
    }
    interface WebResource {
      /** Get a specific app for a customer by its resource name. */
      get(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. The app for which details are being queried. Examples: "customers/my_customer/apps/chrome/gmbmikajjgmnabiglmofipeabaddhgne@2.1.2" for the Save to Google Drive Chrome extension version 2.1.2, "customers/my_customer/apps/android/com.google.android.apps.docs" for the Google Drive Android app's latest version. */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<GoogleChromeManagementV1AppDetails>;
    }
    interface AppsResource {
      /** Generate summary of app installation requests. */
      countChromeAppRequests(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Required. Customer id or "my_customer" to use the customer associated to the account making the request. */
        customer: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Field used to order results. Supported fields: * request_count * latest_request_time */
        orderBy?: string;
        /** The ID of the organizational unit. */
        orgUnitId?: string;
        /** Maximum number of results to return. Maximum and default are 50, anything above will be coerced to 50. */
        pageSize?: number;
        /** Token to specify the page of the request to be returned. */
        pageToken?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<GoogleChromeManagementV1CountChromeAppRequestsResponse>;
      /** Get a list of devices that have requested to install an extension. */
      fetchDevicesRequestingExtension(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Required. The customer ID or "my_customer" prefixed with "customers/". */
        customer: string;
        /** Required. The extension for which we want to find requesting devices. */
        extensionId?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** The ID of the organizational unit. Only consider devices that directly belong to this org unit, i.e. sub-orgunits are not counted. If omitted, all data will be returned. */
        orgUnitId?: string;
        /** Optional. Maximum number of results to return. Maximum and default are 50. Any page size larger than 50 will be coerced to 50. */
        pageSize?: number;
        /** Optional. Token to specify the page of the request to be returned. Token expires after 1 day. */
        pageToken?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<GoogleChromeManagementV1FetchDevicesRequestingExtensionResponse>;
      /** Get a list of users that have requested to install an extension. */
      fetchUsersRequestingExtension(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Required. The customer ID or "my_customer" prefixed with "customers/". */
        customer: string;
        /** Required. The extension for which we want to find the requesting users. */
        extensionId?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** The ID of the organizational unit. Only consider devices that directly belong to this org unit, i.e. sub-orgunits are not counted. If omitted, all data will be returned. */
        orgUnitId?: string;
        /** Optional. Maximum number of results to return. Maximum and default are 50. Any page size larger than 50 will be coerced to 50. */
        pageSize?: number;
        /** Optional. Token to specify the page of the request to be returned. Token expires after 1 day. */
        pageToken?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<GoogleChromeManagementV1FetchUsersRequestingExtensionResponse>;
      android: AndroidResource;
      chrome: ChromeResource;
      web: WebResource;
    }
    interface ProfilesResource {
      /** Deletes the data collected from a Chrome browser profile. */
      delete(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. Format: customers/{customer_id}/profiles/{profile_permanent_id} */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<{}>;
      /** Gets a Chrome browser profile with customer ID and profile permanent ID. */
      get(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. Format: customers/{customer_id}/profiles/{profile_permanent_id} */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<GoogleChromeManagementVersionsV1ChromeBrowserProfile>;
      /** Lists Chrome browser profiles of a customer based on the given search and sorting criteria. */
      list(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** Optional. The filter used to filter profiles. The following fields can be used in the filter: - profile_id - display_name - user_email - last_activity_time - last_policy_sync_time - last_status_report_time - first_enrollment_time - os_platform_type - os_version - browser_version - browser_channel - policy_count - extension_count - identity_provider - affiliation_state - ouId Any of the above fields can be used to specify a filter, and filtering by multiple fields is supported with AND operator. String type fields and enum type fields support '=' and '!=' operators. The integer type and the timestamp type fields support '=', '!=', '<', '>', '<=' and '>=' operators. Timestamps expect an RFC-3339 formatted string (e.g. 2012-04-21T11:30:00-04:00). Wildcard '*' can be used with a string type field filter. In addition, string literal filtering is also supported, for example, 'ABC' as a filter maps to a filter that checks if any of the filterable string type fields contains 'ABC'. Organization unit number can be used as a filtering criteria here by specifying 'ouId = ${your_org_unit_id}', please note that only single OU ID matching is supported. */
        filter?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Optional. The fields used to specify the ordering of the results. The supported fields are: - profile_id - display_name - user_email - last_activity_time - last_policy_sync_time - last_status_report_time - first_enrollment_time - os_platform_type - os_version - browser_version - browser_channel - policy_count - extension_count - identity_provider - affiliation_state By default, sorting is in ascending order, to specify descending order for a field, a suffix " desc" should be added to the field name. The default ordering is the descending order of last_status_report_time. */
        orderBy?: string;
        /** Optional. The maximum number of profiles to return. The default page size is 100 if page_size is unspecified, and the maximum page size allowed is 200. */
        pageSize?: number;
        /** Optional. The page token used to retrieve a specific page of the listing request. */
        pageToken?: string;
        /** Required. Format: customers/{customer_id} */
        parent: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<GoogleChromeManagementVersionsV1ListChromeBrowserProfilesResponse>;
    }
    interface ReportsResource {
      /** Count of Chrome Browsers that have been recently enrolled, have new policy to be synced, or have no recent activity. */
      countChromeBrowsersNeedingAttention(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Required. The customer ID or "my_customer" prefixed with "customers/". */
        customer: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Optional. The ID of the organizational unit. If omitted, all data will be returned. */
        orgUnitId?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<GoogleChromeManagementV1CountChromeBrowsersNeedingAttentionResponse>;
      /** Get a count of Chrome crash events. */
      countChromeCrashEvents(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Customer ID. */
        customer: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** Query string to filter results, AND-separated fields in EBNF syntax. Supported filter fields: * major_browser_version * minor_browser_version * browser_channel * device_platform * past_number_days Example: `major_browser_version = 'M115' AND past_number_days = '28'`. */
        filter?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Field used to order results. Supported order by fields: * browser_version * count * date */
        orderBy?: string;
        /** If specified, only count the number of crash events of the devices in this organizational unit. */
        orgUnitId?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<GoogleChromeManagementV1CountChromeCrashEventsResponse>;
      /** Generate report of the number of devices expiring in each month of the selected time frame. Devices are grouped by auto update expiration date and model. Further information can be found [here](https://support.google.com/chrome/a/answer/10564947). */
      countChromeDevicesReachingAutoExpirationDate(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Required. The customer ID or "my_customer" prefixed with "customers/". */
        customer: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Optional. Maximum expiration date in format yyyy-mm-dd in UTC timezone. If included returns all devices that have already expired and devices with auto expiration date equal to or earlier than the maximum date. */
        maxAueDate?: string;
        /** Optional. Maximum expiration date in format yyyy-mm-dd in UTC timezone. If included returns all devices that have already expired and devices with auto expiration date equal to or later than the minimum date. */
        minAueDate?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Optional. The organizational unit ID, if omitted, will return data for all organizational units. */
        orgUnitId?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<GoogleChromeManagementV1CountChromeDevicesReachingAutoExpirationDateResponse>;
      /** Counts of ChromeOS devices that have not synced policies or have lacked user activity in the past 28 days, are out of date, or are not complaint. Further information can be found here https://support.google.com/chrome/a/answer/10564947 */
      countChromeDevicesThatNeedAttention(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Required. The customer ID or "my_customer" prefixed with "customers/". */
        customer: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Optional. The ID of the organizational unit. If omitted, all data will be returned. */
        orgUnitId?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Required. Mask of the fields that should be populated in the returned report. */
        readMask?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<GoogleChromeManagementV1CountChromeDevicesThatNeedAttentionResponse>;
      /** Counts of devices with a specific hardware specification from the requested hardware type (for example model name, processor type). Further information can be found here https://support.google.com/chrome/a/answer/10564947 */
      countChromeHardwareFleetDevices(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Required. The customer ID or "my_customer". */
        customer: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Optional. The ID of the organizational unit. If omitted, all data will be returned. */
        orgUnitId?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Required. Mask of the fields that should be populated in the returned report. */
        readMask?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<GoogleChromeManagementV1CountChromeHardwareFleetDevicesResponse>;
      /** Generate report of installed Chrome versions. */
      countChromeVersions(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Required. Customer id or "my_customer" to use the customer associated to the account making the request. */
        customer: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** Query string to filter results, AND-separated fields in EBNF syntax. Note: OR operations are not supported in this filter. Supported filter fields: * last_active_date */
        filter?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** The ID of the organizational unit. */
        orgUnitId?: string;
        /** Maximum number of results to return. Maximum and default are 100. */
        pageSize?: number;
        /** Token to specify the page of the request to be returned. */
        pageToken?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<GoogleChromeManagementV1CountChromeVersionsResponse>;
      /** Generate report of app installations. */
      countInstalledApps(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Required. Customer id or "my_customer" to use the customer associated to the account making the request. */
        customer: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** Query string to filter results, AND-separated fields in EBNF syntax. Note: OR operations are not supported in this filter. Supported filter fields: * app_name * app_type * install_type * number_of_permissions * total_install_count * latest_profile_active_date * permission_name * app_id * manifest_versions * risk_score */
        filter?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Field used to order results. Supported order by fields: * app_name * app_type * install_type * number_of_permissions * total_install_count * app_id * manifest_versions * risk_score */
        orderBy?: string;
        /** The ID of the organizational unit. */
        orgUnitId?: string;
        /** Maximum number of results to return. Maximum and default are 100. */
        pageSize?: number;
        /** Token to specify the page of the request to be returned. */
        pageToken?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<GoogleChromeManagementV1CountInstalledAppsResponse>;
      /** Get a summary of printing done by each printer. */
      countPrintJobsByPrinter(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Required. Customer ID prefixed with "customers/" or "customers/my_customer" to use the customer associated to the account making the request. */
        customer: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** Query string to filter results, AND-separated fields in EBNF syntax. Note: OR operations are not supported in this filter. Note: Only >= and <= comparators are supported in this filter. Supported filter fields: * complete_time */
        filter?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Field used to order results. If omitted, results will be ordered in ascending order of the 'printer' field. Supported order_by fields: * printer * job_count * device_count * user_count */
        orderBy?: string;
        /** Maximum number of results to return. Maximum and default are 100. */
        pageSize?: number;
        /** Token to specify the page of the response to be returned. */
        pageToken?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** The ID of the organizational unit for printers. If specified, only data for printers from the specified organizational unit will be returned. If omitted, data for printers from all organizational units will be returned. */
        printerOrgUnitId?: string;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<GoogleChromeManagementV1CountPrintJobsByPrinterResponse>;
      /** Get a summary of printing done by each user. */
      countPrintJobsByUser(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Required. Customer ID prefixed with "customers/" or "customers/my_customer" to use the customer associated to the account making the request. */
        customer: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** Query string to filter results, AND-separated fields in EBNF syntax. Note: OR operations are not supported in this filter. Note: Only >= and <= comparators are supported in this filter. Supported filter fields: * complete_time */
        filter?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Field used to order results. If omitted, results will be ordered in ascending order of the 'user_email' field. Supported order_by fields: * user_email * job_count * printer_count * device_count */
        orderBy?: string;
        /** Maximum number of results to return. Maximum and default are 100. */
        pageSize?: number;
        /** Token to specify the page of the response to be returned. */
        pageToken?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** The ID of the organizational unit for printers. If specified, only print jobs initiated with printers from the specified organizational unit will be counted. If omitted, all print jobs will be counted. */
        printerOrgUnitId?: string;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<GoogleChromeManagementV1CountPrintJobsByUserResponse>;
      /** Get a list of print jobs. */
      enumeratePrintJobs(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Required. Customer ID prefixed with "customers/" or "customers/my_customer" to use the customer associated to the account making the request. */
        customer: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** Query string to filter results, AND-separated fields in EBNF syntax. Note: OR operations are not supported in this filter. Note: Only >= and <= comparators are supported for `complete_time`. Note: Only = comparator supported for `user_id` and `printer_id`. Supported filter fields: * complete_time * printer_id * user_id */
        filter?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Field used to order results. If not specified, results will be ordered in descending order of the `complete_time` field. Supported order by fields: * title * state * create_time * complete_time * document_page_count * color_mode * duplex_mode * printer * user_email */
        orderBy?: string;
        /** The number of print jobs in the page from 0 to 100 inclusive, if page_size is not specified or zero, the size will be 50. */
        pageSize?: number;
        /** A page token received from a previous `EnumeratePrintJobs` call. Provide this to retrieve the subsequent page. If omitted, the first page of results will be returned. When paginating, all other parameters provided to `EnumeratePrintJobs` must match the call that provided the page token. */
        pageToken?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** The ID of the organizational unit for printers. If specified, only print jobs submitted to printers from the specified organizational unit will be returned. */
        printerOrgUnitId?: string;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<GoogleChromeManagementV1EnumeratePrintJobsResponse>;
      /** Generate report of managed Chrome browser devices that have a specified app installed. */
      findInstalledAppDevices(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** Unique identifier of the app. For Chrome apps and extensions, the 32-character id (e.g. ehoadneljpdggcbbknedodolkkjodefl). For Android apps, the package name (e.g. com.evernote). */
        appId?: string;
        /** Type of the app. */
        appType?: string;
        /** JSONP */
        callback?: string;
        /** Required. Customer id or "my_customer" to use the customer associated to the account making the request. */
        customer: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** Query string to filter results, AND-separated fields in EBNF syntax. Note: OR operations are not supported in this filter. Supported filter fields: * last_active_date */
        filter?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Field used to order results. Supported order by fields: * machine * device_id */
        orderBy?: string;
        /** The ID of the organizational unit. */
        orgUnitId?: string;
        /** Maximum number of results to return. Maximum and default are 100. */
        pageSize?: number;
        /** Token to specify the page of the request to be returned. */
        pageToken?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<GoogleChromeManagementV1FindInstalledAppDevicesResponse>;
    }
    interface DevicesResource {
      /** Get telemetry device. */
      get(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. Name of the `TelemetryDevice` to return. */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Required. Read mask to specify which fields to return. Supported read_mask paths are: - name - org_unit_id - device_id - serial_number - cpu_info - cpu_status_report - memory_info - memory_status_report - network_info - network_diagnostics_report - network_status_report - os_update_status - graphics_info - graphics_status_report - battery_info - battery_status_report - storage_info - storage_status_report - thunderbolt_info - audio_status_report - boot_performance_report - heartbeat_status_report - network_bandwidth_report - peripherals_report - kiosk_app_status_report - app_report - runtime_counters_report */
        readMask?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<GoogleChromeManagementV1TelemetryDevice>;
      /** List all telemetry devices. */
      list(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** Optional. Only include resources that match the filter. Requests that don't specify a "reports_timestamp" value will default to returning only recent reports. Specify "reports_timestamp>=0" to get all report data. Supported filter fields: - org_unit_id - serial_number - device_id - reports_timestamp The "reports_timestamp" filter accepts either the Unix Epoch milliseconds format or the RFC3339 UTC "Zulu" format with nanosecond resolution and up to nine fractional digits. Both formats should be surrounded by simple double quotes. Examples: "2014-10-02T15:01:23Z", "2014-10-02T15:01:23.045123456Z", "1679283943823". */
        filter?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Maximum number of results to return. Default value is 100. Maximum value is 1000. */
        pageSize?: number;
        /** Token to specify next page in the list. */
        pageToken?: string;
        /** Required. Customer id or "my_customer" to use the customer associated to the account making the request. */
        parent: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Required. Read mask to specify which fields to return. Supported read_mask paths are: - name - org_unit_id - device_id - serial_number - cpu_info - cpu_status_report - memory_info - memory_status_report - network_info - network_diagnostics_report - network_status_report - os_update_status - graphics_info - graphics_status_report - battery_info - battery_status_report - storage_info - storage_status_report - thunderbolt_info - audio_status_report - boot_performance_report - heartbeat_status_report - network_bandwidth_report - peripherals_report - kiosk_app_status_report - app_report - runtime_counters_report */
        readMask?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<GoogleChromeManagementV1ListTelemetryDevicesResponse>;
    }
    interface EventsResource {
      /** List telemetry events. */
      list(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** Optional. Only include resources that match the filter. Although this parameter is currently optional, this parameter will be required- please specify at least 1 event type. Supported filter fields: - device_id - user_id - device_org_unit_id - user_org_unit_id - timestamp - event_type The "timestamp" filter accepts either the Unix Epoch milliseconds format or the RFC3339 UTC "Zulu" format with nanosecond resolution and up to nine fractional digits. Both formats should be surrounded by simple double quotes. Examples: "2014-10-02T15:01:23Z", "2014-10-02T15:01:23.045123456Z", "1679283943823". */
        filter?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Optional. Maximum number of results to return. Default value is 100. Maximum value is 1000. */
        pageSize?: number;
        /** Optional. Token to specify next page in the list. */
        pageToken?: string;
        /** Required. Customer id or "my_customer" to use the customer associated to the account making the request. */
        parent: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Required. Read mask to specify which fields to return. Although currently required, this field will become optional, while the filter parameter with an event type will be come required. Supported read_mask paths are: - device - user - audio_severe_underrun_event - usb_peripherals_event - https_latency_change_event - network_state_change_event - wifi_signal_strength_event - vpn_connection_state_change_event - app_install_event - app_uninstall_event - app_launch_event - os_crash_event */
        readMask?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<GoogleChromeManagementV1ListTelemetryEventsResponse>;
    }
    interface NotificationConfigsResource {
      /** Create a telemetry notification config. */
      create(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Required. The parent resource where this notification config will be created. Format: `customers/{customer}` */
        parent: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: GoogleChromeManagementV1TelemetryNotificationConfig;
      }): Request<GoogleChromeManagementV1TelemetryNotificationConfig>;
      create(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Required. The parent resource where this notification config will be created. Format: `customers/{customer}` */
          parent: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: GoogleChromeManagementV1TelemetryNotificationConfig,
      ): Request<GoogleChromeManagementV1TelemetryNotificationConfig>;
      /** Delete a telemetry notification config. */
      delete(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. The name of the notification config to delete. Format: `customers/{customer}/telemetry/notificationConfigs/{notification_config}` */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<{}>;
      /** List all telemetry notification configs. */
      list(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** The maximum number of notification configs to return. The service may return fewer than this value. If unspecified, at most 100 notification configs will be returned. The maximum value is 100; values above 100 will be coerced to 100. */
        pageSize?: number;
        /** A page token, received from a previous `ListTelemetryNotificationConfigs` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListTelemetryNotificationConfigs` must match the call that provided the page token. */
        pageToken?: string;
        /** Required. The parent which owns the notification configs. */
        parent: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<GoogleChromeManagementV1ListTelemetryNotificationConfigsResponse>;
    }
    interface UsersResource {
      /** Get telemetry user. */
      get(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. Name of the `TelemetryUser` to return. */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Read mask to specify which fields to return. Supported read_mask paths are: - name - org_unit_id - user_id - user_email - user_device.device_id - user_device.audio_status_report - user_device.device_activity_report - user_device.network_bandwidth_report - user_device.peripherals_report - user_device.app_report */
        readMask?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<GoogleChromeManagementV1TelemetryUser>;
      /** List all telemetry users. */
      list(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** Only include resources that match the filter. Supported filter fields: - user_id - user_org_unit_id */
        filter?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Maximum number of results to return. Default value is 100. Maximum value is 1000. */
        pageSize?: number;
        /** Token to specify next page in the list. */
        pageToken?: string;
        /** Required. Customer id or "my_customer" to use the customer associated to the account making the request. */
        parent: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Read mask to specify which fields to return. Supported read_mask paths are: - name - org_unit_id - user_id - user_email - user_device.device_id - user_device.audio_status_report - user_device.device_activity_report - user_device.network_bandwidth_report - user_device.peripherals_report - user_device.app_report */
        readMask?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<GoogleChromeManagementV1ListTelemetryUsersResponse>;
    }
    interface TelemetryResource {
      devices: DevicesResource;
      events: EventsResource;
      notificationConfigs: NotificationConfigsResource;
      users: UsersResource;
    }
    interface CustomersResource {
      apps: AppsResource;
      profiles: ProfilesResource;
      reports: ReportsResource;
      telemetry: TelemetryResource;
    }

    const customers: CustomersResource;
  }
}
