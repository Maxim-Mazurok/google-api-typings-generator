/* This is stub file for gapi.client.chromepolicy-v1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20230613

gapi.load('client', async () => {
    /** now we can use gapi.client */

    await gapi.client.load('https://chromepolicy.googleapis.com/$discovery/rest?version=v1');
    /** now we can use gapi.client.chromepolicy */

    /** don't forget to authenticate your client before sending any request to resources: */
    /** declare client_id registered in Google Developers Console */
    const client_id = '<<PUT YOUR CLIENT ID HERE>>';
    const scope = [
        /** See, edit, create or delete policies applied to Chrome OS and Chrome Browsers managed within your organization */
        'https://www.googleapis.com/auth/chrome.management.policy',
        /** See policies applied to Chrome OS and Chrome Browsers managed within your organization */
        'https://www.googleapis.com/auth/chrome.management.policy.readonly',
    ];
    const immediate = false;
    gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
        if (authResult && !authResult.error) {
            /** handle successful authorization */
            run();
        } else {
            /** handle authorization error */
        }
    });

    async function run() {
        /** Gets the resolved policy values for a list of policies that match a search query. */
        await gapi.client.chromepolicy.customers.policies.resolve({
            customer: "Test string",
        }, {
            pageSize: 42,
            pageToken: "Test string",
            policySchemaFilter: "Test string",
            policyTargetKey: {
                additionalTargetKeys: {
                    A: "Test string"
                },
                targetResource: "Test string",
            },
        });
        /**
         * Delete multiple policy values that are applied to a specific group. All targets must have the same target format. That is to say that they must point to the same target resource and
         * must have the same keys specified in `additionalTargetKeyNames`, though the values for those keys may be different. On failure the request will return the error details as part of the
         * google.rpc.Status.
         */
        await gapi.client.chromepolicy.customers.policies.groups.batchDelete({
            customer: "Test string",
        }, {
            requests: [
                {
                    policySchema: "Test string",
                    policyTargetKey: {
                        additionalTargetKeys: {
                            A: "Test string"
                        },
                        targetResource: "Test string",
                    },
                }
            ],
        });
        /**
         * Modify multiple policy values that are applied to a specific group. All targets must have the same target format. That is to say that they must point to the same target resource and
         * must have the same keys specified in `additionalTargetKeyNames`, though the values for those keys may be different. On failure the request will return the error details as part of the
         * google.rpc.Status.
         */
        await gapi.client.chromepolicy.customers.policies.groups.batchModify({
            customer: "Test string",
        }, {
            requests: [
                {
                    policyTargetKey: {
                        additionalTargetKeys: {
                            A: "Test string"
                        },
                        targetResource: "Test string",
                    },
                    policyValue: {
                        policySchema: "Test string",
                        value: {
                            A: 42
                        },
                    },
                    updateMask: "Test string",
                }
            ],
        });
        /**
         * Retrieve a group priority ordering for an app. The target app must be supplied in `additionalTargetKeyNames` in the PolicyTargetKey. On failure the request will return the error details
         * as part of the google.rpc.Status.
         */
        await gapi.client.chromepolicy.customers.policies.groups.listGroupPriorityOrdering({
            customer: "Test string",
        }, {
            policyNamespace: "Test string",
            policySchema: "Test string",
            policyTargetKey: {
                additionalTargetKeys: {
                    A: "Test string"
                },
                targetResource: "Test string",
            },
        });
        /**
         * Update a group priority ordering for an app. The target app must be supplied in `additionalTargetKeyNames` in the PolicyTargetKey. On failure the request will return the error details
         * as part of the google.rpc.Status.
         */
        await gapi.client.chromepolicy.customers.policies.groups.updateGroupPriorityOrdering({
            customer: "Test string",
        }, {
            groupIds: [
                "Test string"
            ],
            policyNamespace: "Test string",
            policySchema: "Test string",
            policyTargetKey: {
                additionalTargetKeys: {
                    A: "Test string"
                },
                targetResource: "Test string",
            },
        });
        /** Creates a certificate at a specified OU for a customer. */
        await gapi.client.chromepolicy.customers.policies.networks.defineCertificate({
            customer: "Test string",
        }, {
            ceritificateName: "Test string",
            certificate: "Test string",
            settings: [
                {
                    policySchema: "Test string",
                    value: {
                        A: 42
                    },
                }
            ],
            targetResource: "Test string",
        });
        /** Define a new network. */
        await gapi.client.chromepolicy.customers.policies.networks.defineNetwork({
            customer: "Test string",
        }, {
            name: "Test string",
            settings: [
                {
                    policySchema: "Test string",
                    value: {
                        A: 42
                    },
                }
            ],
            targetResource: "Test string",
        });
        /** Remove an existing certificate by guid. */
        await gapi.client.chromepolicy.customers.policies.networks.removeCertificate({
            customer: "Test string",
        }, {
            networkId: "Test string",
            targetResource: "Test string",
        });
        /** Remove an existing network by guid. */
        await gapi.client.chromepolicy.customers.policies.networks.removeNetwork({
            customer: "Test string",
        }, {
            networkId: "Test string",
            targetResource: "Test string",
        });
        /**
         * Modify multiple policy values that are applied to a specific org unit so that they now inherit the value from a parent (if applicable). All targets must have the same target format.
         * That is to say that they must point to the same target resource and must have the same keys specified in `additionalTargetKeyNames`, though the values for those keys may be different.
         * On failure the request will return the error details as part of the google.rpc.Status.
         */
        await gapi.client.chromepolicy.customers.policies.orgunits.batchInherit({
            customer: "Test string",
        }, {
            requests: [
                {
                    policySchema: "Test string",
                    policyTargetKey: {
                        additionalTargetKeys: {
                            A: "Test string"
                        },
                        targetResource: "Test string",
                    },
                }
            ],
        });
        /**
         * Modify multiple policy values that are applied to a specific org unit. All targets must have the same target format. That is to say that they must point to the same target resource and
         * must have the same keys specified in `additionalTargetKeyNames`, though the values for those keys may be different. On failure the request will return the error details as part of the
         * google.rpc.Status.
         */
        await gapi.client.chromepolicy.customers.policies.orgunits.batchModify({
            customer: "Test string",
        }, {
            requests: [
                {
                    policyTargetKey: {
                        additionalTargetKeys: {
                            A: "Test string"
                        },
                        targetResource: "Test string",
                    },
                    policyValue: {
                        policySchema: "Test string",
                        value: {
                            A: 42
                        },
                    },
                    updateMask: "Test string",
                }
            ],
        });
        /** Get a specific policy schema for a customer by its resource name. */
        await gapi.client.chromepolicy.customers.policySchemas.get({
            name: "Test string",
        });
        /** Gets a list of policy schemas that match a specified filter value for a given customer. */
        await gapi.client.chromepolicy.customers.policySchemas.list({
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Creates an enterprise file from the content provided by user. Returns a public download url for end user. */
        await gapi.client.chromepolicy.media.upload({
            customer: "Test string",
        }, {
            policyField: "Test string",
        });
    }
});
