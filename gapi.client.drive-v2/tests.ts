/* This is stub file for gapi.client.drive-v2 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20240602

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://www.googleapis.com/discovery/v1/apis/drive/v2/rest'
  );
  /** now we can use gapi.client.drive */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** See, edit, create, and delete all of your Google Drive files */
    'https://www.googleapis.com/auth/drive',
    /** See, create, and delete its own configuration data in your Google Drive */
    'https://www.googleapis.com/auth/drive.appdata',
    /** View your Google Drive apps */
    'https://www.googleapis.com/auth/drive.apps.readonly',
    /** See, edit, create, and delete only the specific Google Drive files you use with this app */
    'https://www.googleapis.com/auth/drive.file',
    /** See and download your Google Drive files that were created or edited by Google Meet. */
    'https://www.googleapis.com/auth/drive.meet.readonly',
    /** View and manage metadata of files in your Google Drive */
    'https://www.googleapis.com/auth/drive.metadata',
    /** See information about your Google Drive files */
    'https://www.googleapis.com/auth/drive.metadata.readonly',
    /** View the photos, videos and albums in your Google Photos */
    'https://www.googleapis.com/auth/drive.photos.readonly',
    /** See and download all your Google Drive files */
    'https://www.googleapis.com/auth/drive.readonly',
    /** Modify your Google Apps Script scripts' behavior */
    'https://www.googleapis.com/auth/drive.scripts',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Gets the information about the current user along with Drive API settings */
    await gapi.client.drive.about.get({
      includeSubscribed: true,
      maxChangeIdCount: 'Test string',
      startChangeId: 'Test string',
    });
    /** Gets a specific app. */
    await gapi.client.drive.apps.get({
      appId: 'Test string',
    });
    /** Lists a user's installed apps. */
    await gapi.client.drive.apps.list({
      appFilterExtensions: 'Test string',
      appFilterMimeTypes: 'Test string',
      languageCode: 'Test string',
    });
    /** Deprecated: Use `changes.getStartPageToken` and `changes.list` to retrieve recent changes. */
    await gapi.client.drive.changes.get({
      changeId: 'Test string',
      driveId: 'Test string',
      supportsAllDrives: true,
      supportsTeamDrives: true,
      teamDriveId: 'Test string',
    });
    /** Gets the starting pageToken for listing future changes. */
    await gapi.client.drive.changes.getStartPageToken({
      driveId: 'Test string',
      supportsAllDrives: true,
      supportsTeamDrives: true,
      teamDriveId: 'Test string',
    });
    /** Lists the changes for a user or shared drive. */
    await gapi.client.drive.changes.list({
      driveId: 'Test string',
      includeCorpusRemovals: true,
      includeDeleted: true,
      includeItemsFromAllDrives: true,
      includeLabels: 'Test string',
      includePermissionsForView: 'Test string',
      includeSubscribed: true,
      includeTeamDriveItems: true,
      maxResults: 42,
      pageToken: 'Test string',
      spaces: 'Test string',
      startChangeId: 'Test string',
      supportsAllDrives: true,
      supportsTeamDrives: true,
      teamDriveId: 'Test string',
    });
    /** Subscribe to changes for a user. */
    await gapi.client.drive.changes.watch(
      {
        driveId: 'Test string',
        includeCorpusRemovals: true,
        includeDeleted: true,
        includeItemsFromAllDrives: true,
        includeLabels: 'Test string',
        includePermissionsForView: 'Test string',
        includeSubscribed: true,
        includeTeamDriveItems: true,
        maxResults: 42,
        pageToken: 'Test string',
        spaces: 'Test string',
        startChangeId: 'Test string',
        supportsAllDrives: true,
        supportsTeamDrives: true,
        teamDriveId: 'Test string',
      },
      {
        address: 'Test string',
        expiration: 'Test string',
        id: 'Test string',
        kind: 'Test string',
        params: {
          A: 'Test string',
        },
        payload: true,
        resourceId: 'Test string',
        resourceUri: 'Test string',
        token: 'Test string',
        type: 'Test string',
      }
    );
    /** Stops watching resources through this channel. */
    await gapi.client.drive.channels.stop(
      {},
      {
        address: 'Test string',
        expiration: 'Test string',
        id: 'Test string',
        kind: 'Test string',
        params: {
          A: 'Test string',
        },
        payload: true,
        resourceId: 'Test string',
        resourceUri: 'Test string',
        token: 'Test string',
        type: 'Test string',
      }
    );
    /** Removes a child from a folder. */
    await gapi.client.drive.children.delete({
      childId: 'Test string',
      enforceSingleParent: true,
      folderId: 'Test string',
    });
    /** Gets a specific child reference. */
    await gapi.client.drive.children.get({
      childId: 'Test string',
      folderId: 'Test string',
    });
    /** Inserts a file into a folder. */
    await gapi.client.drive.children.insert(
      {
        enforceSingleParent: true,
        folderId: 'Test string',
        supportsAllDrives: true,
        supportsTeamDrives: true,
      },
      {
        childLink: 'Test string',
        id: 'Test string',
        kind: 'Test string',
        selfLink: 'Test string',
      }
    );
    /** Lists a folder's children. */
    await gapi.client.drive.children.list({
      folderId: 'Test string',
      maxResults: 42,
      orderBy: 'Test string',
      pageToken: 'Test string',
      q: 'Test string',
    });
    /** Deletes a comment. */
    await gapi.client.drive.comments.delete({
      commentId: 'Test string',
      fileId: 'Test string',
    });
    /** Gets a comment by ID. */
    await gapi.client.drive.comments.get({
      commentId: 'Test string',
      fileId: 'Test string',
      includeDeleted: true,
    });
    /** Creates a new comment on the given file. */
    await gapi.client.drive.comments.insert(
      {
        fileId: 'Test string',
      },
      {
        anchor: 'Test string',
        author: {
          displayName: 'Test string',
          emailAddress: 'Test string',
          isAuthenticatedUser: true,
          kind: 'Test string',
          permissionId: 'Test string',
          picture: {
            url: 'Test string',
          },
        },
        commentId: 'Test string',
        content: 'Test string',
        context: {
          type: 'Test string',
          value: 'Test string',
        },
        createdDate: 'Test string',
        deleted: true,
        fileId: 'Test string',
        fileTitle: 'Test string',
        htmlContent: 'Test string',
        kind: 'Test string',
        modifiedDate: 'Test string',
        replies: [
          {
            author: {
              displayName: 'Test string',
              emailAddress: 'Test string',
              isAuthenticatedUser: true,
              kind: 'Test string',
              permissionId: 'Test string',
              picture: {
                url: 'Test string',
              },
            },
            content: 'Test string',
            createdDate: 'Test string',
            deleted: true,
            htmlContent: 'Test string',
            kind: 'Test string',
            modifiedDate: 'Test string',
            replyId: 'Test string',
            verb: 'Test string',
          },
        ],
        selfLink: 'Test string',
        status: 'Test string',
      }
    );
    /** Lists a file's comments. */
    await gapi.client.drive.comments.list({
      fileId: 'Test string',
      includeDeleted: true,
      maxResults: 42,
      pageToken: 'Test string',
      updatedMin: 'Test string',
    });
    /** Updates an existing comment. */
    await gapi.client.drive.comments.patch(
      {
        commentId: 'Test string',
        fileId: 'Test string',
      },
      {
        anchor: 'Test string',
        author: {
          displayName: 'Test string',
          emailAddress: 'Test string',
          isAuthenticatedUser: true,
          kind: 'Test string',
          permissionId: 'Test string',
          picture: {
            url: 'Test string',
          },
        },
        commentId: 'Test string',
        content: 'Test string',
        context: {
          type: 'Test string',
          value: 'Test string',
        },
        createdDate: 'Test string',
        deleted: true,
        fileId: 'Test string',
        fileTitle: 'Test string',
        htmlContent: 'Test string',
        kind: 'Test string',
        modifiedDate: 'Test string',
        replies: [
          {
            author: {
              displayName: 'Test string',
              emailAddress: 'Test string',
              isAuthenticatedUser: true,
              kind: 'Test string',
              permissionId: 'Test string',
              picture: {
                url: 'Test string',
              },
            },
            content: 'Test string',
            createdDate: 'Test string',
            deleted: true,
            htmlContent: 'Test string',
            kind: 'Test string',
            modifiedDate: 'Test string',
            replyId: 'Test string',
            verb: 'Test string',
          },
        ],
        selfLink: 'Test string',
        status: 'Test string',
      }
    );
    /** Updates an existing comment. */
    await gapi.client.drive.comments.update(
      {
        commentId: 'Test string',
        fileId: 'Test string',
      },
      {
        anchor: 'Test string',
        author: {
          displayName: 'Test string',
          emailAddress: 'Test string',
          isAuthenticatedUser: true,
          kind: 'Test string',
          permissionId: 'Test string',
          picture: {
            url: 'Test string',
          },
        },
        commentId: 'Test string',
        content: 'Test string',
        context: {
          type: 'Test string',
          value: 'Test string',
        },
        createdDate: 'Test string',
        deleted: true,
        fileId: 'Test string',
        fileTitle: 'Test string',
        htmlContent: 'Test string',
        kind: 'Test string',
        modifiedDate: 'Test string',
        replies: [
          {
            author: {
              displayName: 'Test string',
              emailAddress: 'Test string',
              isAuthenticatedUser: true,
              kind: 'Test string',
              permissionId: 'Test string',
              picture: {
                url: 'Test string',
              },
            },
            content: 'Test string',
            createdDate: 'Test string',
            deleted: true,
            htmlContent: 'Test string',
            kind: 'Test string',
            modifiedDate: 'Test string',
            replyId: 'Test string',
            verb: 'Test string',
          },
        ],
        selfLink: 'Test string',
        status: 'Test string',
      }
    );
    /** Permanently deletes a shared drive for which the user is an `organizer`. The shared drive cannot contain any untrashed items. */
    await gapi.client.drive.drives.delete({
      allowItemDeletion: true,
      driveId: 'Test string',
      useDomainAdminAccess: true,
    });
    /** Gets a shared drive's metadata by ID. */
    await gapi.client.drive.drives.get({
      driveId: 'Test string',
      useDomainAdminAccess: true,
    });
    /** Hides a shared drive from the default view. */
    await gapi.client.drive.drives.hide({
      driveId: 'Test string',
    });
    /** Creates a new shared drive. */
    await gapi.client.drive.drives.insert(
      {
        requestId: 'Test string',
      },
      {
        backgroundImageFile: {
          id: 'Test string',
          width: 42,
          xCoordinate: 42,
          yCoordinate: 42,
        },
        backgroundImageLink: 'Test string',
        capabilities: {
          canAddChildren: true,
          canChangeCopyRequiresWriterPermissionRestriction: true,
          canChangeDomainUsersOnlyRestriction: true,
          canChangeDriveBackground: true,
          canChangeDriveMembersOnlyRestriction: true,
          canChangeSharingFoldersRequiresOrganizerPermissionRestriction: true,
          canComment: true,
          canCopy: true,
          canDeleteChildren: true,
          canDeleteDrive: true,
          canDownload: true,
          canEdit: true,
          canListChildren: true,
          canManageMembers: true,
          canReadRevisions: true,
          canRename: true,
          canRenameDrive: true,
          canResetDriveRestrictions: true,
          canShare: true,
          canTrashChildren: true,
        },
        colorRgb: 'Test string',
        createdDate: 'Test string',
        hidden: true,
        id: 'Test string',
        kind: 'Test string',
        name: 'Test string',
        orgUnitId: 'Test string',
        restrictions: {
          adminManagedRestrictions: true,
          copyRequiresWriterPermission: true,
          domainUsersOnly: true,
          driveMembersOnly: true,
          sharingFoldersRequiresOrganizerPermission: true,
        },
        themeId: 'Test string',
      }
    );
    /** Lists the user's shared drives. This method accepts the `q` parameter, which is a search query combining one or more search terms. For more information, see the [Search for shared drives](/drive/api/guides/search-shareddrives) guide. */
    await gapi.client.drive.drives.list({
      maxResults: 42,
      pageToken: 'Test string',
      q: 'Test string',
      useDomainAdminAccess: true,
    });
    /** Restores a shared drive to the default view. */
    await gapi.client.drive.drives.unhide({
      driveId: 'Test string',
    });
    /** Updates the metadata for a shared drive. */
    await gapi.client.drive.drives.update(
      {
        driveId: 'Test string',
        useDomainAdminAccess: true,
      },
      {
        backgroundImageFile: {
          id: 'Test string',
          width: 42,
          xCoordinate: 42,
          yCoordinate: 42,
        },
        backgroundImageLink: 'Test string',
        capabilities: {
          canAddChildren: true,
          canChangeCopyRequiresWriterPermissionRestriction: true,
          canChangeDomainUsersOnlyRestriction: true,
          canChangeDriveBackground: true,
          canChangeDriveMembersOnlyRestriction: true,
          canChangeSharingFoldersRequiresOrganizerPermissionRestriction: true,
          canComment: true,
          canCopy: true,
          canDeleteChildren: true,
          canDeleteDrive: true,
          canDownload: true,
          canEdit: true,
          canListChildren: true,
          canManageMembers: true,
          canReadRevisions: true,
          canRename: true,
          canRenameDrive: true,
          canResetDriveRestrictions: true,
          canShare: true,
          canTrashChildren: true,
        },
        colorRgb: 'Test string',
        createdDate: 'Test string',
        hidden: true,
        id: 'Test string',
        kind: 'Test string',
        name: 'Test string',
        orgUnitId: 'Test string',
        restrictions: {
          adminManagedRestrictions: true,
          copyRequiresWriterPermission: true,
          domainUsersOnly: true,
          driveMembersOnly: true,
          sharingFoldersRequiresOrganizerPermission: true,
        },
        themeId: 'Test string',
      }
    );
    /** Creates a copy of the specified file. */
    await gapi.client.drive.files.copy(
      {
        convert: true,
        enforceSingleParent: true,
        fileId: 'Test string',
        includeLabels: 'Test string',
        includePermissionsForView: 'Test string',
        ocr: true,
        ocrLanguage: 'Test string',
        pinned: true,
        supportsAllDrives: true,
        supportsTeamDrives: true,
        timedTextLanguage: 'Test string',
        timedTextTrackName: 'Test string',
        visibility: 'Test string',
      },
      {
        alternateLink: 'Test string',
        appDataContents: true,
        canComment: true,
        canReadRevisions: true,
        capabilities: {
          canAcceptOwnership: true,
          canAddChildren: true,
          canAddFolderFromAnotherDrive: true,
          canAddMyDriveParent: true,
          canChangeCopyRequiresWriterPermission: true,
          canChangeRestrictedDownload: true,
          canChangeSecurityUpdateEnabled: true,
          canComment: true,
          canCopy: true,
          canDelete: true,
          canDeleteChildren: true,
          canDownload: true,
          canEdit: true,
          canListChildren: true,
          canModifyContent: true,
          canModifyContentRestriction: true,
          canModifyEditorContentRestriction: true,
          canModifyLabels: true,
          canModifyOwnerContentRestriction: true,
          canMoveChildrenOutOfDrive: true,
          canMoveChildrenOutOfTeamDrive: true,
          canMoveChildrenWithinDrive: true,
          canMoveChildrenWithinTeamDrive: true,
          canMoveItemIntoTeamDrive: true,
          canMoveItemOutOfDrive: true,
          canMoveItemOutOfTeamDrive: true,
          canMoveItemWithinDrive: true,
          canMoveItemWithinTeamDrive: true,
          canMoveTeamDriveItem: true,
          canReadDrive: true,
          canReadLabels: true,
          canReadRevisions: true,
          canReadTeamDrive: true,
          canRemoveChildren: true,
          canRemoveContentRestriction: true,
          canRemoveMyDriveParent: true,
          canRename: true,
          canShare: true,
          canTrash: true,
          canTrashChildren: true,
          canUntrash: true,
        },
        contentRestrictions: [
          {
            ownerRestricted: true,
            readOnly: true,
            reason: 'Test string',
            restrictingUser: {
              displayName: 'Test string',
              emailAddress: 'Test string',
              isAuthenticatedUser: true,
              kind: 'Test string',
              permissionId: 'Test string',
              picture: {
                url: 'Test string',
              },
            },
            restrictionDate: 'Test string',
            systemRestricted: true,
            type: 'Test string',
          },
        ],
        copyable: true,
        copyRequiresWriterPermission: true,
        createdDate: 'Test string',
        defaultOpenWithLink: 'Test string',
        description: 'Test string',
        downloadUrl: 'Test string',
        driveId: 'Test string',
        editable: true,
        embedLink: 'Test string',
        etag: 'Test string',
        explicitlyTrashed: true,
        exportLinks: {
          A: 'Test string',
        },
        fileExtension: 'Test string',
        fileSize: 'Test string',
        folderColorRgb: 'Test string',
        fullFileExtension: 'Test string',
        hasAugmentedPermissions: true,
        hasThumbnail: true,
        headRevisionId: 'Test string',
        iconLink: 'Test string',
        id: 'Test string',
        imageMediaMetadata: {
          aperture: 42,
          cameraMake: 'Test string',
          cameraModel: 'Test string',
          colorSpace: 'Test string',
          date: 'Test string',
          exposureBias: 42,
          exposureMode: 'Test string',
          exposureTime: 42,
          flashUsed: true,
          focalLength: 42,
          height: 42,
          isoSpeed: 42,
          lens: 'Test string',
          location: {
            altitude: 42,
            latitude: 42,
            longitude: 42,
          },
          maxApertureValue: 42,
          meteringMode: 'Test string',
          rotation: 42,
          sensor: 'Test string',
          subjectDistance: 42,
          whiteBalance: 'Test string',
          width: 42,
        },
        indexableText: {
          text: 'Test string',
        },
        isAppAuthorized: true,
        kind: 'Test string',
        labelInfo: {
          labels: [
            {
              fields: {
                A: {
                  dateString: ['Test string'],
                  id: 'Test string',
                  integer: ['Test string'],
                  kind: 'Test string',
                  selection: ['Test string'],
                  text: ['Test string'],
                  user: [
                    {
                      displayName: 'Test string',
                      emailAddress: 'Test string',
                      isAuthenticatedUser: true,
                      kind: 'Test string',
                      permissionId: 'Test string',
                      picture: {
                        url: 'Test string',
                      },
                    },
                  ],
                  valueType: 'Test string',
                },
              },
              id: 'Test string',
              kind: 'Test string',
              revisionId: 'Test string',
            },
          ],
        },
        labels: {
          hidden: true,
          modified: true,
          restricted: true,
          starred: true,
          trashed: true,
          viewed: true,
        },
        lastModifyingUser: {
          displayName: 'Test string',
          emailAddress: 'Test string',
          isAuthenticatedUser: true,
          kind: 'Test string',
          permissionId: 'Test string',
          picture: {
            url: 'Test string',
          },
        },
        lastModifyingUserName: 'Test string',
        lastViewedByMeDate: 'Test string',
        linkShareMetadata: {
          securityUpdateEligible: true,
          securityUpdateEnabled: true,
        },
        markedViewedByMeDate: 'Test string',
        md5Checksum: 'Test string',
        mimeType: 'Test string',
        modifiedByMeDate: 'Test string',
        modifiedDate: 'Test string',
        openWithLinks: {
          A: 'Test string',
        },
        originalFilename: 'Test string',
        ownedByMe: true,
        ownerNames: ['Test string'],
        owners: [
          {
            displayName: 'Test string',
            emailAddress: 'Test string',
            isAuthenticatedUser: true,
            kind: 'Test string',
            permissionId: 'Test string',
            picture: {
              url: 'Test string',
            },
          },
        ],
        parents: [
          {
            id: 'Test string',
            isRoot: true,
            kind: 'Test string',
            parentLink: 'Test string',
            selfLink: 'Test string',
          },
        ],
        permissionIds: ['Test string'],
        permissions: [
          {
            additionalRoles: ['Test string'],
            authKey: 'Test string',
            deleted: true,
            domain: 'Test string',
            emailAddress: 'Test string',
            etag: 'Test string',
            expirationDate: 'Test string',
            id: 'Test string',
            kind: 'Test string',
            name: 'Test string',
            pendingOwner: true,
            permissionDetails: [
              {
                additionalRoles: ['Test string'],
                inherited: true,
                inheritedFrom: 'Test string',
                permissionType: 'Test string',
                role: 'Test string',
              },
            ],
            photoLink: 'Test string',
            role: 'Test string',
            selfLink: 'Test string',
            teamDrivePermissionDetails: [
              {
                additionalRoles: ['Test string'],
                inherited: true,
                inheritedFrom: 'Test string',
                role: 'Test string',
                teamDrivePermissionType: 'Test string',
              },
            ],
            type: 'Test string',
            value: 'Test string',
            view: 'Test string',
            withLink: true,
          },
        ],
        properties: [
          {
            etag: 'Test string',
            key: 'Test string',
            kind: 'Test string',
            selfLink: 'Test string',
            value: 'Test string',
            visibility: 'Test string',
          },
        ],
        quotaBytesUsed: 'Test string',
        resourceKey: 'Test string',
        selfLink: 'Test string',
        sha1Checksum: 'Test string',
        sha256Checksum: 'Test string',
        shareable: true,
        shared: true,
        sharedWithMeDate: 'Test string',
        sharingUser: {
          displayName: 'Test string',
          emailAddress: 'Test string',
          isAuthenticatedUser: true,
          kind: 'Test string',
          permissionId: 'Test string',
          picture: {
            url: 'Test string',
          },
        },
        shortcutDetails: {
          targetId: 'Test string',
          targetMimeType: 'Test string',
          targetResourceKey: 'Test string',
        },
        spaces: ['Test string'],
        teamDriveId: 'Test string',
        thumbnail: {
          image: 'Test string',
          mimeType: 'Test string',
        },
        thumbnailLink: 'Test string',
        thumbnailVersion: 'Test string',
        title: 'Test string',
        trashedDate: 'Test string',
        trashingUser: {
          displayName: 'Test string',
          emailAddress: 'Test string',
          isAuthenticatedUser: true,
          kind: 'Test string',
          permissionId: 'Test string',
          picture: {
            url: 'Test string',
          },
        },
        userPermission: {
          additionalRoles: ['Test string'],
          authKey: 'Test string',
          deleted: true,
          domain: 'Test string',
          emailAddress: 'Test string',
          etag: 'Test string',
          expirationDate: 'Test string',
          id: 'Test string',
          kind: 'Test string',
          name: 'Test string',
          pendingOwner: true,
          permissionDetails: [
            {
              additionalRoles: ['Test string'],
              inherited: true,
              inheritedFrom: 'Test string',
              permissionType: 'Test string',
              role: 'Test string',
            },
          ],
          photoLink: 'Test string',
          role: 'Test string',
          selfLink: 'Test string',
          teamDrivePermissionDetails: [
            {
              additionalRoles: ['Test string'],
              inherited: true,
              inheritedFrom: 'Test string',
              role: 'Test string',
              teamDrivePermissionType: 'Test string',
            },
          ],
          type: 'Test string',
          value: 'Test string',
          view: 'Test string',
          withLink: true,
        },
        version: 'Test string',
        videoMediaMetadata: {
          durationMillis: 'Test string',
          height: 42,
          width: 42,
        },
        webContentLink: 'Test string',
        webViewLink: 'Test string',
        writersCanShare: true,
      }
    );
    /** Permanently deletes a file owned by the user without moving it to the trash. If the file belongs to a shared drive, the user must be an `organizer` on the parent folder. If the target is a folder, all descendants owned by the user are also deleted. */
    await gapi.client.drive.files.delete({
      enforceSingleParent: true,
      fileId: 'Test string',
      supportsAllDrives: true,
      supportsTeamDrives: true,
    });
    /** Permanently deletes all of the user's trashed files. */
    await gapi.client.drive.files.emptyTrash({
      driveId: 'Test string',
      enforceSingleParent: true,
    });
    /** Exports a Google Workspace document to the requested MIME type and returns exported byte content. Note that the exported content is limited to 10MB. */
    await gapi.client.drive.files.export({
      fileId: 'Test string',
      mimeType: 'Test string',
    });
    /** Generates a set of file IDs which can be provided in insert or copy requests. */
    await gapi.client.drive.files.generateIds({
      maxResults: 42,
      space: 'Test string',
      type: 'Test string',
    });
    /** Gets a file's metadata or content by ID. If you provide the URL parameter `alt=media`, then the response includes the file contents in the response body. Downloading content with `alt=media` only works if the file is stored in Drive. To download Google Docs, Sheets, and Slides use [`files.export`](/drive/api/reference/rest/v2/files/export) instead. For more information, see [Download & export files](/drive/api/guides/manage-downloads). */
    await gapi.client.drive.files.get({
      acknowledgeAbuse: true,
      fileId: 'Test string',
      includeLabels: 'Test string',
      includePermissionsForView: 'Test string',
      projection: 'Test string',
      revisionId: 'Test string',
      supportsAllDrives: true,
      supportsTeamDrives: true,
      updateViewedDate: true,
    });
    /** Inserts a new file. This method supports an *‍/upload* URI and accepts uploaded media with the following characteristics: - *Maximum file size:* 5,120 GB - *Accepted Media MIME types:*`*‍/*` Note: Specify a valid MIME type, rather than the literal `*‍/*` value. The literal `*‍/*` is only used to indicate that any valid MIME type can be uploaded. For more information on uploading files, see [Upload file data](/drive/api/guides/manage-uploads). Apps creating shortcuts with `files.insert` must specify the MIME type `application/vnd.google-apps.shortcut`. Apps should specify a file extension in the `title` property when inserting files with the API. For example, an operation to insert a JPEG file should specify something like `"title": "cat.jpg"` in the metadata. Subsequent `GET` requests include the read-only `fileExtension` property populated with the extension originally specified in the `title` property. When a Google Drive user requests to download a file, or when the file is downloaded through the sync client, Drive builds a full filename (with extension) based on the title. In cases where the extension is missing, Drive attempts to determine the extension based on the file's MIME type. */
    await gapi.client.drive.files.insert(
      {
        convert: true,
        enforceSingleParent: true,
        includeLabels: 'Test string',
        includePermissionsForView: 'Test string',
        ocr: true,
        ocrLanguage: 'Test string',
        pinned: true,
        supportsAllDrives: true,
        supportsTeamDrives: true,
        timedTextLanguage: 'Test string',
        timedTextTrackName: 'Test string',
        useContentAsIndexableText: true,
        visibility: 'Test string',
      },
      {
        alternateLink: 'Test string',
        appDataContents: true,
        canComment: true,
        canReadRevisions: true,
        capabilities: {
          canAcceptOwnership: true,
          canAddChildren: true,
          canAddFolderFromAnotherDrive: true,
          canAddMyDriveParent: true,
          canChangeCopyRequiresWriterPermission: true,
          canChangeRestrictedDownload: true,
          canChangeSecurityUpdateEnabled: true,
          canComment: true,
          canCopy: true,
          canDelete: true,
          canDeleteChildren: true,
          canDownload: true,
          canEdit: true,
          canListChildren: true,
          canModifyContent: true,
          canModifyContentRestriction: true,
          canModifyEditorContentRestriction: true,
          canModifyLabels: true,
          canModifyOwnerContentRestriction: true,
          canMoveChildrenOutOfDrive: true,
          canMoveChildrenOutOfTeamDrive: true,
          canMoveChildrenWithinDrive: true,
          canMoveChildrenWithinTeamDrive: true,
          canMoveItemIntoTeamDrive: true,
          canMoveItemOutOfDrive: true,
          canMoveItemOutOfTeamDrive: true,
          canMoveItemWithinDrive: true,
          canMoveItemWithinTeamDrive: true,
          canMoveTeamDriveItem: true,
          canReadDrive: true,
          canReadLabels: true,
          canReadRevisions: true,
          canReadTeamDrive: true,
          canRemoveChildren: true,
          canRemoveContentRestriction: true,
          canRemoveMyDriveParent: true,
          canRename: true,
          canShare: true,
          canTrash: true,
          canTrashChildren: true,
          canUntrash: true,
        },
        contentRestrictions: [
          {
            ownerRestricted: true,
            readOnly: true,
            reason: 'Test string',
            restrictingUser: {
              displayName: 'Test string',
              emailAddress: 'Test string',
              isAuthenticatedUser: true,
              kind: 'Test string',
              permissionId: 'Test string',
              picture: {
                url: 'Test string',
              },
            },
            restrictionDate: 'Test string',
            systemRestricted: true,
            type: 'Test string',
          },
        ],
        copyable: true,
        copyRequiresWriterPermission: true,
        createdDate: 'Test string',
        defaultOpenWithLink: 'Test string',
        description: 'Test string',
        downloadUrl: 'Test string',
        driveId: 'Test string',
        editable: true,
        embedLink: 'Test string',
        etag: 'Test string',
        explicitlyTrashed: true,
        exportLinks: {
          A: 'Test string',
        },
        fileExtension: 'Test string',
        fileSize: 'Test string',
        folderColorRgb: 'Test string',
        fullFileExtension: 'Test string',
        hasAugmentedPermissions: true,
        hasThumbnail: true,
        headRevisionId: 'Test string',
        iconLink: 'Test string',
        id: 'Test string',
        imageMediaMetadata: {
          aperture: 42,
          cameraMake: 'Test string',
          cameraModel: 'Test string',
          colorSpace: 'Test string',
          date: 'Test string',
          exposureBias: 42,
          exposureMode: 'Test string',
          exposureTime: 42,
          flashUsed: true,
          focalLength: 42,
          height: 42,
          isoSpeed: 42,
          lens: 'Test string',
          location: {
            altitude: 42,
            latitude: 42,
            longitude: 42,
          },
          maxApertureValue: 42,
          meteringMode: 'Test string',
          rotation: 42,
          sensor: 'Test string',
          subjectDistance: 42,
          whiteBalance: 'Test string',
          width: 42,
        },
        indexableText: {
          text: 'Test string',
        },
        isAppAuthorized: true,
        kind: 'Test string',
        labelInfo: {
          labels: [
            {
              fields: {
                A: {
                  dateString: ['Test string'],
                  id: 'Test string',
                  integer: ['Test string'],
                  kind: 'Test string',
                  selection: ['Test string'],
                  text: ['Test string'],
                  user: [
                    {
                      displayName: 'Test string',
                      emailAddress: 'Test string',
                      isAuthenticatedUser: true,
                      kind: 'Test string',
                      permissionId: 'Test string',
                      picture: {
                        url: 'Test string',
                      },
                    },
                  ],
                  valueType: 'Test string',
                },
              },
              id: 'Test string',
              kind: 'Test string',
              revisionId: 'Test string',
            },
          ],
        },
        labels: {
          hidden: true,
          modified: true,
          restricted: true,
          starred: true,
          trashed: true,
          viewed: true,
        },
        lastModifyingUser: {
          displayName: 'Test string',
          emailAddress: 'Test string',
          isAuthenticatedUser: true,
          kind: 'Test string',
          permissionId: 'Test string',
          picture: {
            url: 'Test string',
          },
        },
        lastModifyingUserName: 'Test string',
        lastViewedByMeDate: 'Test string',
        linkShareMetadata: {
          securityUpdateEligible: true,
          securityUpdateEnabled: true,
        },
        markedViewedByMeDate: 'Test string',
        md5Checksum: 'Test string',
        mimeType: 'Test string',
        modifiedByMeDate: 'Test string',
        modifiedDate: 'Test string',
        openWithLinks: {
          A: 'Test string',
        },
        originalFilename: 'Test string',
        ownedByMe: true,
        ownerNames: ['Test string'],
        owners: [
          {
            displayName: 'Test string',
            emailAddress: 'Test string',
            isAuthenticatedUser: true,
            kind: 'Test string',
            permissionId: 'Test string',
            picture: {
              url: 'Test string',
            },
          },
        ],
        parents: [
          {
            id: 'Test string',
            isRoot: true,
            kind: 'Test string',
            parentLink: 'Test string',
            selfLink: 'Test string',
          },
        ],
        permissionIds: ['Test string'],
        permissions: [
          {
            additionalRoles: ['Test string'],
            authKey: 'Test string',
            deleted: true,
            domain: 'Test string',
            emailAddress: 'Test string',
            etag: 'Test string',
            expirationDate: 'Test string',
            id: 'Test string',
            kind: 'Test string',
            name: 'Test string',
            pendingOwner: true,
            permissionDetails: [
              {
                additionalRoles: ['Test string'],
                inherited: true,
                inheritedFrom: 'Test string',
                permissionType: 'Test string',
                role: 'Test string',
              },
            ],
            photoLink: 'Test string',
            role: 'Test string',
            selfLink: 'Test string',
            teamDrivePermissionDetails: [
              {
                additionalRoles: ['Test string'],
                inherited: true,
                inheritedFrom: 'Test string',
                role: 'Test string',
                teamDrivePermissionType: 'Test string',
              },
            ],
            type: 'Test string',
            value: 'Test string',
            view: 'Test string',
            withLink: true,
          },
        ],
        properties: [
          {
            etag: 'Test string',
            key: 'Test string',
            kind: 'Test string',
            selfLink: 'Test string',
            value: 'Test string',
            visibility: 'Test string',
          },
        ],
        quotaBytesUsed: 'Test string',
        resourceKey: 'Test string',
        selfLink: 'Test string',
        sha1Checksum: 'Test string',
        sha256Checksum: 'Test string',
        shareable: true,
        shared: true,
        sharedWithMeDate: 'Test string',
        sharingUser: {
          displayName: 'Test string',
          emailAddress: 'Test string',
          isAuthenticatedUser: true,
          kind: 'Test string',
          permissionId: 'Test string',
          picture: {
            url: 'Test string',
          },
        },
        shortcutDetails: {
          targetId: 'Test string',
          targetMimeType: 'Test string',
          targetResourceKey: 'Test string',
        },
        spaces: ['Test string'],
        teamDriveId: 'Test string',
        thumbnail: {
          image: 'Test string',
          mimeType: 'Test string',
        },
        thumbnailLink: 'Test string',
        thumbnailVersion: 'Test string',
        title: 'Test string',
        trashedDate: 'Test string',
        trashingUser: {
          displayName: 'Test string',
          emailAddress: 'Test string',
          isAuthenticatedUser: true,
          kind: 'Test string',
          permissionId: 'Test string',
          picture: {
            url: 'Test string',
          },
        },
        userPermission: {
          additionalRoles: ['Test string'],
          authKey: 'Test string',
          deleted: true,
          domain: 'Test string',
          emailAddress: 'Test string',
          etag: 'Test string',
          expirationDate: 'Test string',
          id: 'Test string',
          kind: 'Test string',
          name: 'Test string',
          pendingOwner: true,
          permissionDetails: [
            {
              additionalRoles: ['Test string'],
              inherited: true,
              inheritedFrom: 'Test string',
              permissionType: 'Test string',
              role: 'Test string',
            },
          ],
          photoLink: 'Test string',
          role: 'Test string',
          selfLink: 'Test string',
          teamDrivePermissionDetails: [
            {
              additionalRoles: ['Test string'],
              inherited: true,
              inheritedFrom: 'Test string',
              role: 'Test string',
              teamDrivePermissionType: 'Test string',
            },
          ],
          type: 'Test string',
          value: 'Test string',
          view: 'Test string',
          withLink: true,
        },
        version: 'Test string',
        videoMediaMetadata: {
          durationMillis: 'Test string',
          height: 42,
          width: 42,
        },
        webContentLink: 'Test string',
        webViewLink: 'Test string',
        writersCanShare: true,
      }
    );
    /** Lists the user's files. This method accepts the `q` parameter, which is a search query combining one or more search terms. For more information, see the [Search for files & folders](/drive/api/guides/search-files) guide. *Note:* This method returns *all* files by default, including trashed files. If you don't want trashed files to appear in the list, use the `trashed=false` query parameter to remove trashed files from the results. */
    await gapi.client.drive.files.list({
      corpora: 'Test string',
      corpus: 'Test string',
      driveId: 'Test string',
      includeItemsFromAllDrives: true,
      includeLabels: 'Test string',
      includePermissionsForView: 'Test string',
      includeTeamDriveItems: true,
      maxResults: 42,
      orderBy: 'Test string',
      pageToken: 'Test string',
      projection: 'Test string',
      q: 'Test string',
      spaces: 'Test string',
      supportsAllDrives: true,
      supportsTeamDrives: true,
      teamDriveId: 'Test string',
    });
    /** Lists the labels on a file. */
    await gapi.client.drive.files.listLabels({
      fileId: 'Test string',
      maxResults: 42,
      pageToken: 'Test string',
    });
    /** Modifies the set of labels applied to a file. Returns a list of the labels that were added or modified. */
    await gapi.client.drive.files.modifyLabels(
      {
        fileId: 'Test string',
      },
      {
        kind: 'Test string',
        labelModifications: [
          {
            fieldModifications: [
              {
                fieldId: 'Test string',
                kind: 'Test string',
                setDateValues: ['Test string'],
                setIntegerValues: ['Test string'],
                setSelectionValues: ['Test string'],
                setTextValues: ['Test string'],
                setUserValues: ['Test string'],
                unsetValues: true,
              },
            ],
            kind: 'Test string',
            labelId: 'Test string',
            removeLabel: true,
          },
        ],
      }
    );
    /** Updates a file's metadata and/or content. When calling this method, only populate fields in the request that you want to modify. When updating fields, some fields might change automatically, such as modifiedDate. This method supports patch semantics. */
    await gapi.client.drive.files.patch(
      {
        addParents: 'Test string',
        convert: true,
        enforceSingleParent: true,
        fileId: 'Test string',
        includeLabels: 'Test string',
        includePermissionsForView: 'Test string',
        modifiedDateBehavior: 'Test string',
        newRevision: true,
        ocr: true,
        ocrLanguage: 'Test string',
        pinned: true,
        removeParents: 'Test string',
        setModifiedDate: true,
        supportsAllDrives: true,
        supportsTeamDrives: true,
        timedTextLanguage: 'Test string',
        timedTextTrackName: 'Test string',
        updateViewedDate: true,
        useContentAsIndexableText: true,
      },
      {
        alternateLink: 'Test string',
        appDataContents: true,
        canComment: true,
        canReadRevisions: true,
        capabilities: {
          canAcceptOwnership: true,
          canAddChildren: true,
          canAddFolderFromAnotherDrive: true,
          canAddMyDriveParent: true,
          canChangeCopyRequiresWriterPermission: true,
          canChangeRestrictedDownload: true,
          canChangeSecurityUpdateEnabled: true,
          canComment: true,
          canCopy: true,
          canDelete: true,
          canDeleteChildren: true,
          canDownload: true,
          canEdit: true,
          canListChildren: true,
          canModifyContent: true,
          canModifyContentRestriction: true,
          canModifyEditorContentRestriction: true,
          canModifyLabels: true,
          canModifyOwnerContentRestriction: true,
          canMoveChildrenOutOfDrive: true,
          canMoveChildrenOutOfTeamDrive: true,
          canMoveChildrenWithinDrive: true,
          canMoveChildrenWithinTeamDrive: true,
          canMoveItemIntoTeamDrive: true,
          canMoveItemOutOfDrive: true,
          canMoveItemOutOfTeamDrive: true,
          canMoveItemWithinDrive: true,
          canMoveItemWithinTeamDrive: true,
          canMoveTeamDriveItem: true,
          canReadDrive: true,
          canReadLabels: true,
          canReadRevisions: true,
          canReadTeamDrive: true,
          canRemoveChildren: true,
          canRemoveContentRestriction: true,
          canRemoveMyDriveParent: true,
          canRename: true,
          canShare: true,
          canTrash: true,
          canTrashChildren: true,
          canUntrash: true,
        },
        contentRestrictions: [
          {
            ownerRestricted: true,
            readOnly: true,
            reason: 'Test string',
            restrictingUser: {
              displayName: 'Test string',
              emailAddress: 'Test string',
              isAuthenticatedUser: true,
              kind: 'Test string',
              permissionId: 'Test string',
              picture: {
                url: 'Test string',
              },
            },
            restrictionDate: 'Test string',
            systemRestricted: true,
            type: 'Test string',
          },
        ],
        copyable: true,
        copyRequiresWriterPermission: true,
        createdDate: 'Test string',
        defaultOpenWithLink: 'Test string',
        description: 'Test string',
        downloadUrl: 'Test string',
        driveId: 'Test string',
        editable: true,
        embedLink: 'Test string',
        etag: 'Test string',
        explicitlyTrashed: true,
        exportLinks: {
          A: 'Test string',
        },
        fileExtension: 'Test string',
        fileSize: 'Test string',
        folderColorRgb: 'Test string',
        fullFileExtension: 'Test string',
        hasAugmentedPermissions: true,
        hasThumbnail: true,
        headRevisionId: 'Test string',
        iconLink: 'Test string',
        id: 'Test string',
        imageMediaMetadata: {
          aperture: 42,
          cameraMake: 'Test string',
          cameraModel: 'Test string',
          colorSpace: 'Test string',
          date: 'Test string',
          exposureBias: 42,
          exposureMode: 'Test string',
          exposureTime: 42,
          flashUsed: true,
          focalLength: 42,
          height: 42,
          isoSpeed: 42,
          lens: 'Test string',
          location: {
            altitude: 42,
            latitude: 42,
            longitude: 42,
          },
          maxApertureValue: 42,
          meteringMode: 'Test string',
          rotation: 42,
          sensor: 'Test string',
          subjectDistance: 42,
          whiteBalance: 'Test string',
          width: 42,
        },
        indexableText: {
          text: 'Test string',
        },
        isAppAuthorized: true,
        kind: 'Test string',
        labelInfo: {
          labels: [
            {
              fields: {
                A: {
                  dateString: ['Test string'],
                  id: 'Test string',
                  integer: ['Test string'],
                  kind: 'Test string',
                  selection: ['Test string'],
                  text: ['Test string'],
                  user: [
                    {
                      displayName: 'Test string',
                      emailAddress: 'Test string',
                      isAuthenticatedUser: true,
                      kind: 'Test string',
                      permissionId: 'Test string',
                      picture: {
                        url: 'Test string',
                      },
                    },
                  ],
                  valueType: 'Test string',
                },
              },
              id: 'Test string',
              kind: 'Test string',
              revisionId: 'Test string',
            },
          ],
        },
        labels: {
          hidden: true,
          modified: true,
          restricted: true,
          starred: true,
          trashed: true,
          viewed: true,
        },
        lastModifyingUser: {
          displayName: 'Test string',
          emailAddress: 'Test string',
          isAuthenticatedUser: true,
          kind: 'Test string',
          permissionId: 'Test string',
          picture: {
            url: 'Test string',
          },
        },
        lastModifyingUserName: 'Test string',
        lastViewedByMeDate: 'Test string',
        linkShareMetadata: {
          securityUpdateEligible: true,
          securityUpdateEnabled: true,
        },
        markedViewedByMeDate: 'Test string',
        md5Checksum: 'Test string',
        mimeType: 'Test string',
        modifiedByMeDate: 'Test string',
        modifiedDate: 'Test string',
        openWithLinks: {
          A: 'Test string',
        },
        originalFilename: 'Test string',
        ownedByMe: true,
        ownerNames: ['Test string'],
        owners: [
          {
            displayName: 'Test string',
            emailAddress: 'Test string',
            isAuthenticatedUser: true,
            kind: 'Test string',
            permissionId: 'Test string',
            picture: {
              url: 'Test string',
            },
          },
        ],
        parents: [
          {
            id: 'Test string',
            isRoot: true,
            kind: 'Test string',
            parentLink: 'Test string',
            selfLink: 'Test string',
          },
        ],
        permissionIds: ['Test string'],
        permissions: [
          {
            additionalRoles: ['Test string'],
            authKey: 'Test string',
            deleted: true,
            domain: 'Test string',
            emailAddress: 'Test string',
            etag: 'Test string',
            expirationDate: 'Test string',
            id: 'Test string',
            kind: 'Test string',
            name: 'Test string',
            pendingOwner: true,
            permissionDetails: [
              {
                additionalRoles: ['Test string'],
                inherited: true,
                inheritedFrom: 'Test string',
                permissionType: 'Test string',
                role: 'Test string',
              },
            ],
            photoLink: 'Test string',
            role: 'Test string',
            selfLink: 'Test string',
            teamDrivePermissionDetails: [
              {
                additionalRoles: ['Test string'],
                inherited: true,
                inheritedFrom: 'Test string',
                role: 'Test string',
                teamDrivePermissionType: 'Test string',
              },
            ],
            type: 'Test string',
            value: 'Test string',
            view: 'Test string',
            withLink: true,
          },
        ],
        properties: [
          {
            etag: 'Test string',
            key: 'Test string',
            kind: 'Test string',
            selfLink: 'Test string',
            value: 'Test string',
            visibility: 'Test string',
          },
        ],
        quotaBytesUsed: 'Test string',
        resourceKey: 'Test string',
        selfLink: 'Test string',
        sha1Checksum: 'Test string',
        sha256Checksum: 'Test string',
        shareable: true,
        shared: true,
        sharedWithMeDate: 'Test string',
        sharingUser: {
          displayName: 'Test string',
          emailAddress: 'Test string',
          isAuthenticatedUser: true,
          kind: 'Test string',
          permissionId: 'Test string',
          picture: {
            url: 'Test string',
          },
        },
        shortcutDetails: {
          targetId: 'Test string',
          targetMimeType: 'Test string',
          targetResourceKey: 'Test string',
        },
        spaces: ['Test string'],
        teamDriveId: 'Test string',
        thumbnail: {
          image: 'Test string',
          mimeType: 'Test string',
        },
        thumbnailLink: 'Test string',
        thumbnailVersion: 'Test string',
        title: 'Test string',
        trashedDate: 'Test string',
        trashingUser: {
          displayName: 'Test string',
          emailAddress: 'Test string',
          isAuthenticatedUser: true,
          kind: 'Test string',
          permissionId: 'Test string',
          picture: {
            url: 'Test string',
          },
        },
        userPermission: {
          additionalRoles: ['Test string'],
          authKey: 'Test string',
          deleted: true,
          domain: 'Test string',
          emailAddress: 'Test string',
          etag: 'Test string',
          expirationDate: 'Test string',
          id: 'Test string',
          kind: 'Test string',
          name: 'Test string',
          pendingOwner: true,
          permissionDetails: [
            {
              additionalRoles: ['Test string'],
              inherited: true,
              inheritedFrom: 'Test string',
              permissionType: 'Test string',
              role: 'Test string',
            },
          ],
          photoLink: 'Test string',
          role: 'Test string',
          selfLink: 'Test string',
          teamDrivePermissionDetails: [
            {
              additionalRoles: ['Test string'],
              inherited: true,
              inheritedFrom: 'Test string',
              role: 'Test string',
              teamDrivePermissionType: 'Test string',
            },
          ],
          type: 'Test string',
          value: 'Test string',
          view: 'Test string',
          withLink: true,
        },
        version: 'Test string',
        videoMediaMetadata: {
          durationMillis: 'Test string',
          height: 42,
          width: 42,
        },
        webContentLink: 'Test string',
        webViewLink: 'Test string',
        writersCanShare: true,
      }
    );
    /** Set the file's updated time to the current server time. */
    await gapi.client.drive.files.touch({
      fileId: 'Test string',
      includeLabels: 'Test string',
      includePermissionsForView: 'Test string',
      supportsAllDrives: true,
      supportsTeamDrives: true,
    });
    /** Moves a file to the trash. The currently authenticated user must own the file or be at least a `fileOrganizer` on the parent for shared drive files. */
    await gapi.client.drive.files.trash({
      fileId: 'Test string',
      includeLabels: 'Test string',
      includePermissionsForView: 'Test string',
      supportsAllDrives: true,
      supportsTeamDrives: true,
    });
    /** Restores a file from the trash. The currently authenticated user must own the file or be at least a `fileOrganizer` on the parent for shared drive files. */
    await gapi.client.drive.files.untrash({
      fileId: 'Test string',
      includeLabels: 'Test string',
      includePermissionsForView: 'Test string',
      supportsAllDrives: true,
      supportsTeamDrives: true,
    });
    /** Updates a file's metadata and/or content. When calling this method, only populate fields in the request that you want to modify. When updating fields, some fields might be changed automatically, such as `modifiedDate`. This method supports patch semantics. This method supports an *‍/upload* URI and accepts uploaded media with the following characteristics: - *Maximum file size:* 5,120 GB - *Accepted Media MIME types:*`*‍/*` Note: Specify a valid MIME type, rather than the literal `*‍/*` value. The literal `*‍/*` is only used to indicate that any valid MIME type can be uploaded. For more information on uploading files, see [Upload file data](/drive/api/guides/manage-uploads). */
    await gapi.client.drive.files.update(
      {
        addParents: 'Test string',
        convert: true,
        enforceSingleParent: true,
        fileId: 'Test string',
        includeLabels: 'Test string',
        includePermissionsForView: 'Test string',
        modifiedDateBehavior: 'Test string',
        newRevision: true,
        ocr: true,
        ocrLanguage: 'Test string',
        pinned: true,
        removeParents: 'Test string',
        setModifiedDate: true,
        supportsAllDrives: true,
        supportsTeamDrives: true,
        timedTextLanguage: 'Test string',
        timedTextTrackName: 'Test string',
        updateViewedDate: true,
        useContentAsIndexableText: true,
      },
      {
        alternateLink: 'Test string',
        appDataContents: true,
        canComment: true,
        canReadRevisions: true,
        capabilities: {
          canAcceptOwnership: true,
          canAddChildren: true,
          canAddFolderFromAnotherDrive: true,
          canAddMyDriveParent: true,
          canChangeCopyRequiresWriterPermission: true,
          canChangeRestrictedDownload: true,
          canChangeSecurityUpdateEnabled: true,
          canComment: true,
          canCopy: true,
          canDelete: true,
          canDeleteChildren: true,
          canDownload: true,
          canEdit: true,
          canListChildren: true,
          canModifyContent: true,
          canModifyContentRestriction: true,
          canModifyEditorContentRestriction: true,
          canModifyLabels: true,
          canModifyOwnerContentRestriction: true,
          canMoveChildrenOutOfDrive: true,
          canMoveChildrenOutOfTeamDrive: true,
          canMoveChildrenWithinDrive: true,
          canMoveChildrenWithinTeamDrive: true,
          canMoveItemIntoTeamDrive: true,
          canMoveItemOutOfDrive: true,
          canMoveItemOutOfTeamDrive: true,
          canMoveItemWithinDrive: true,
          canMoveItemWithinTeamDrive: true,
          canMoveTeamDriveItem: true,
          canReadDrive: true,
          canReadLabels: true,
          canReadRevisions: true,
          canReadTeamDrive: true,
          canRemoveChildren: true,
          canRemoveContentRestriction: true,
          canRemoveMyDriveParent: true,
          canRename: true,
          canShare: true,
          canTrash: true,
          canTrashChildren: true,
          canUntrash: true,
        },
        contentRestrictions: [
          {
            ownerRestricted: true,
            readOnly: true,
            reason: 'Test string',
            restrictingUser: {
              displayName: 'Test string',
              emailAddress: 'Test string',
              isAuthenticatedUser: true,
              kind: 'Test string',
              permissionId: 'Test string',
              picture: {
                url: 'Test string',
              },
            },
            restrictionDate: 'Test string',
            systemRestricted: true,
            type: 'Test string',
          },
        ],
        copyable: true,
        copyRequiresWriterPermission: true,
        createdDate: 'Test string',
        defaultOpenWithLink: 'Test string',
        description: 'Test string',
        downloadUrl: 'Test string',
        driveId: 'Test string',
        editable: true,
        embedLink: 'Test string',
        etag: 'Test string',
        explicitlyTrashed: true,
        exportLinks: {
          A: 'Test string',
        },
        fileExtension: 'Test string',
        fileSize: 'Test string',
        folderColorRgb: 'Test string',
        fullFileExtension: 'Test string',
        hasAugmentedPermissions: true,
        hasThumbnail: true,
        headRevisionId: 'Test string',
        iconLink: 'Test string',
        id: 'Test string',
        imageMediaMetadata: {
          aperture: 42,
          cameraMake: 'Test string',
          cameraModel: 'Test string',
          colorSpace: 'Test string',
          date: 'Test string',
          exposureBias: 42,
          exposureMode: 'Test string',
          exposureTime: 42,
          flashUsed: true,
          focalLength: 42,
          height: 42,
          isoSpeed: 42,
          lens: 'Test string',
          location: {
            altitude: 42,
            latitude: 42,
            longitude: 42,
          },
          maxApertureValue: 42,
          meteringMode: 'Test string',
          rotation: 42,
          sensor: 'Test string',
          subjectDistance: 42,
          whiteBalance: 'Test string',
          width: 42,
        },
        indexableText: {
          text: 'Test string',
        },
        isAppAuthorized: true,
        kind: 'Test string',
        labelInfo: {
          labels: [
            {
              fields: {
                A: {
                  dateString: ['Test string'],
                  id: 'Test string',
                  integer: ['Test string'],
                  kind: 'Test string',
                  selection: ['Test string'],
                  text: ['Test string'],
                  user: [
                    {
                      displayName: 'Test string',
                      emailAddress: 'Test string',
                      isAuthenticatedUser: true,
                      kind: 'Test string',
                      permissionId: 'Test string',
                      picture: {
                        url: 'Test string',
                      },
                    },
                  ],
                  valueType: 'Test string',
                },
              },
              id: 'Test string',
              kind: 'Test string',
              revisionId: 'Test string',
            },
          ],
        },
        labels: {
          hidden: true,
          modified: true,
          restricted: true,
          starred: true,
          trashed: true,
          viewed: true,
        },
        lastModifyingUser: {
          displayName: 'Test string',
          emailAddress: 'Test string',
          isAuthenticatedUser: true,
          kind: 'Test string',
          permissionId: 'Test string',
          picture: {
            url: 'Test string',
          },
        },
        lastModifyingUserName: 'Test string',
        lastViewedByMeDate: 'Test string',
        linkShareMetadata: {
          securityUpdateEligible: true,
          securityUpdateEnabled: true,
        },
        markedViewedByMeDate: 'Test string',
        md5Checksum: 'Test string',
        mimeType: 'Test string',
        modifiedByMeDate: 'Test string',
        modifiedDate: 'Test string',
        openWithLinks: {
          A: 'Test string',
        },
        originalFilename: 'Test string',
        ownedByMe: true,
        ownerNames: ['Test string'],
        owners: [
          {
            displayName: 'Test string',
            emailAddress: 'Test string',
            isAuthenticatedUser: true,
            kind: 'Test string',
            permissionId: 'Test string',
            picture: {
              url: 'Test string',
            },
          },
        ],
        parents: [
          {
            id: 'Test string',
            isRoot: true,
            kind: 'Test string',
            parentLink: 'Test string',
            selfLink: 'Test string',
          },
        ],
        permissionIds: ['Test string'],
        permissions: [
          {
            additionalRoles: ['Test string'],
            authKey: 'Test string',
            deleted: true,
            domain: 'Test string',
            emailAddress: 'Test string',
            etag: 'Test string',
            expirationDate: 'Test string',
            id: 'Test string',
            kind: 'Test string',
            name: 'Test string',
            pendingOwner: true,
            permissionDetails: [
              {
                additionalRoles: ['Test string'],
                inherited: true,
                inheritedFrom: 'Test string',
                permissionType: 'Test string',
                role: 'Test string',
              },
            ],
            photoLink: 'Test string',
            role: 'Test string',
            selfLink: 'Test string',
            teamDrivePermissionDetails: [
              {
                additionalRoles: ['Test string'],
                inherited: true,
                inheritedFrom: 'Test string',
                role: 'Test string',
                teamDrivePermissionType: 'Test string',
              },
            ],
            type: 'Test string',
            value: 'Test string',
            view: 'Test string',
            withLink: true,
          },
        ],
        properties: [
          {
            etag: 'Test string',
            key: 'Test string',
            kind: 'Test string',
            selfLink: 'Test string',
            value: 'Test string',
            visibility: 'Test string',
          },
        ],
        quotaBytesUsed: 'Test string',
        resourceKey: 'Test string',
        selfLink: 'Test string',
        sha1Checksum: 'Test string',
        sha256Checksum: 'Test string',
        shareable: true,
        shared: true,
        sharedWithMeDate: 'Test string',
        sharingUser: {
          displayName: 'Test string',
          emailAddress: 'Test string',
          isAuthenticatedUser: true,
          kind: 'Test string',
          permissionId: 'Test string',
          picture: {
            url: 'Test string',
          },
        },
        shortcutDetails: {
          targetId: 'Test string',
          targetMimeType: 'Test string',
          targetResourceKey: 'Test string',
        },
        spaces: ['Test string'],
        teamDriveId: 'Test string',
        thumbnail: {
          image: 'Test string',
          mimeType: 'Test string',
        },
        thumbnailLink: 'Test string',
        thumbnailVersion: 'Test string',
        title: 'Test string',
        trashedDate: 'Test string',
        trashingUser: {
          displayName: 'Test string',
          emailAddress: 'Test string',
          isAuthenticatedUser: true,
          kind: 'Test string',
          permissionId: 'Test string',
          picture: {
            url: 'Test string',
          },
        },
        userPermission: {
          additionalRoles: ['Test string'],
          authKey: 'Test string',
          deleted: true,
          domain: 'Test string',
          emailAddress: 'Test string',
          etag: 'Test string',
          expirationDate: 'Test string',
          id: 'Test string',
          kind: 'Test string',
          name: 'Test string',
          pendingOwner: true,
          permissionDetails: [
            {
              additionalRoles: ['Test string'],
              inherited: true,
              inheritedFrom: 'Test string',
              permissionType: 'Test string',
              role: 'Test string',
            },
          ],
          photoLink: 'Test string',
          role: 'Test string',
          selfLink: 'Test string',
          teamDrivePermissionDetails: [
            {
              additionalRoles: ['Test string'],
              inherited: true,
              inheritedFrom: 'Test string',
              role: 'Test string',
              teamDrivePermissionType: 'Test string',
            },
          ],
          type: 'Test string',
          value: 'Test string',
          view: 'Test string',
          withLink: true,
        },
        version: 'Test string',
        videoMediaMetadata: {
          durationMillis: 'Test string',
          height: 42,
          width: 42,
        },
        webContentLink: 'Test string',
        webViewLink: 'Test string',
        writersCanShare: true,
      }
    );
    /** Subscribes to changes to a file. */
    await gapi.client.drive.files.watch(
      {
        acknowledgeAbuse: true,
        fileId: 'Test string',
        includeLabels: 'Test string',
        includePermissionsForView: 'Test string',
        projection: 'Test string',
        revisionId: 'Test string',
        supportsAllDrives: true,
        supportsTeamDrives: true,
        updateViewedDate: true,
      },
      {
        address: 'Test string',
        expiration: 'Test string',
        id: 'Test string',
        kind: 'Test string',
        params: {
          A: 'Test string',
        },
        payload: true,
        resourceId: 'Test string',
        resourceUri: 'Test string',
        token: 'Test string',
        type: 'Test string',
      }
    );
    /** Removes a parent from a file. */
    await gapi.client.drive.parents.delete({
      enforceSingleParent: true,
      fileId: 'Test string',
      parentId: 'Test string',
    });
    /** Gets a specific parent reference. */
    await gapi.client.drive.parents.get({
      fileId: 'Test string',
      parentId: 'Test string',
    });
    /** Adds a parent folder for a file. */
    await gapi.client.drive.parents.insert(
      {
        enforceSingleParent: true,
        fileId: 'Test string',
        supportsAllDrives: true,
        supportsTeamDrives: true,
      },
      {
        id: 'Test string',
        isRoot: true,
        kind: 'Test string',
        parentLink: 'Test string',
        selfLink: 'Test string',
      }
    );
    /** Lists a file's parents. */
    await gapi.client.drive.parents.list({
      fileId: 'Test string',
    });
    /** Deletes a permission from a file or shared drive. **Warning:** Concurrent permissions operations on the same file are not supported; only the last update is applied. */
    await gapi.client.drive.permissions.delete({
      fileId: 'Test string',
      permissionId: 'Test string',
      supportsAllDrives: true,
      supportsTeamDrives: true,
      useDomainAdminAccess: true,
    });
    /** Gets a permission by ID. */
    await gapi.client.drive.permissions.get({
      fileId: 'Test string',
      permissionId: 'Test string',
      supportsAllDrives: true,
      supportsTeamDrives: true,
      useDomainAdminAccess: true,
    });
    /** Returns the permission ID for an email address. */
    await gapi.client.drive.permissions.getIdForEmail({
      email: 'Test string',
    });
    /** Inserts a permission for a file or shared drive. **Warning:** Concurrent permissions operations on the same file are not supported; only the last update is applied. */
    await gapi.client.drive.permissions.insert(
      {
        emailMessage: 'Test string',
        enforceSingleParent: true,
        fileId: 'Test string',
        moveToNewOwnersRoot: true,
        sendNotificationEmails: true,
        supportsAllDrives: true,
        supportsTeamDrives: true,
        useDomainAdminAccess: true,
      },
      {
        additionalRoles: ['Test string'],
        authKey: 'Test string',
        deleted: true,
        domain: 'Test string',
        emailAddress: 'Test string',
        etag: 'Test string',
        expirationDate: 'Test string',
        id: 'Test string',
        kind: 'Test string',
        name: 'Test string',
        pendingOwner: true,
        permissionDetails: [
          {
            additionalRoles: ['Test string'],
            inherited: true,
            inheritedFrom: 'Test string',
            permissionType: 'Test string',
            role: 'Test string',
          },
        ],
        photoLink: 'Test string',
        role: 'Test string',
        selfLink: 'Test string',
        teamDrivePermissionDetails: [
          {
            additionalRoles: ['Test string'],
            inherited: true,
            inheritedFrom: 'Test string',
            role: 'Test string',
            teamDrivePermissionType: 'Test string',
          },
        ],
        type: 'Test string',
        value: 'Test string',
        view: 'Test string',
        withLink: true,
      }
    );
    /** Lists a file's or shared drive's permissions. */
    await gapi.client.drive.permissions.list({
      fileId: 'Test string',
      includePermissionsForView: 'Test string',
      maxResults: 42,
      pageToken: 'Test string',
      supportsAllDrives: true,
      supportsTeamDrives: true,
      useDomainAdminAccess: true,
    });
    /** Updates a permission using patch semantics. **Warning:** Concurrent permissions operations on the same file are not supported; only the last update is applied. */
    await gapi.client.drive.permissions.patch(
      {
        fileId: 'Test string',
        permissionId: 'Test string',
        removeExpiration: true,
        supportsAllDrives: true,
        supportsTeamDrives: true,
        transferOwnership: true,
        useDomainAdminAccess: true,
      },
      {
        additionalRoles: ['Test string'],
        authKey: 'Test string',
        deleted: true,
        domain: 'Test string',
        emailAddress: 'Test string',
        etag: 'Test string',
        expirationDate: 'Test string',
        id: 'Test string',
        kind: 'Test string',
        name: 'Test string',
        pendingOwner: true,
        permissionDetails: [
          {
            additionalRoles: ['Test string'],
            inherited: true,
            inheritedFrom: 'Test string',
            permissionType: 'Test string',
            role: 'Test string',
          },
        ],
        photoLink: 'Test string',
        role: 'Test string',
        selfLink: 'Test string',
        teamDrivePermissionDetails: [
          {
            additionalRoles: ['Test string'],
            inherited: true,
            inheritedFrom: 'Test string',
            role: 'Test string',
            teamDrivePermissionType: 'Test string',
          },
        ],
        type: 'Test string',
        value: 'Test string',
        view: 'Test string',
        withLink: true,
      }
    );
    /** Updates a permission. **Warning:** Concurrent permissions operations on the same file are not supported; only the last update is applied. */
    await gapi.client.drive.permissions.update(
      {
        fileId: 'Test string',
        permissionId: 'Test string',
        removeExpiration: true,
        supportsAllDrives: true,
        supportsTeamDrives: true,
        transferOwnership: true,
        useDomainAdminAccess: true,
      },
      {
        additionalRoles: ['Test string'],
        authKey: 'Test string',
        deleted: true,
        domain: 'Test string',
        emailAddress: 'Test string',
        etag: 'Test string',
        expirationDate: 'Test string',
        id: 'Test string',
        kind: 'Test string',
        name: 'Test string',
        pendingOwner: true,
        permissionDetails: [
          {
            additionalRoles: ['Test string'],
            inherited: true,
            inheritedFrom: 'Test string',
            permissionType: 'Test string',
            role: 'Test string',
          },
        ],
        photoLink: 'Test string',
        role: 'Test string',
        selfLink: 'Test string',
        teamDrivePermissionDetails: [
          {
            additionalRoles: ['Test string'],
            inherited: true,
            inheritedFrom: 'Test string',
            role: 'Test string',
            teamDrivePermissionType: 'Test string',
          },
        ],
        type: 'Test string',
        value: 'Test string',
        view: 'Test string',
        withLink: true,
      }
    );
    /** Deletes a property. */
    await gapi.client.drive.properties.delete({
      fileId: 'Test string',
      propertyKey: 'Test string',
      visibility: 'Test string',
    });
    /** Gets a property by its key. */
    await gapi.client.drive.properties.get({
      fileId: 'Test string',
      propertyKey: 'Test string',
      visibility: 'Test string',
    });
    /** Adds a property to a file, or updates it if it already exists. */
    await gapi.client.drive.properties.insert(
      {
        fileId: 'Test string',
      },
      {
        etag: 'Test string',
        key: 'Test string',
        kind: 'Test string',
        selfLink: 'Test string',
        value: 'Test string',
        visibility: 'Test string',
      }
    );
    /** Lists a file's properties. */
    await gapi.client.drive.properties.list({
      fileId: 'Test string',
    });
    /** Updates a property. */
    await gapi.client.drive.properties.patch(
      {
        fileId: 'Test string',
        propertyKey: 'Test string',
        visibility: 'Test string',
      },
      {
        etag: 'Test string',
        key: 'Test string',
        kind: 'Test string',
        selfLink: 'Test string',
        value: 'Test string',
        visibility: 'Test string',
      }
    );
    /** Updates a property. */
    await gapi.client.drive.properties.update(
      {
        fileId: 'Test string',
        propertyKey: 'Test string',
        visibility: 'Test string',
      },
      {
        etag: 'Test string',
        key: 'Test string',
        kind: 'Test string',
        selfLink: 'Test string',
        value: 'Test string',
        visibility: 'Test string',
      }
    );
    /** Deletes a reply. */
    await gapi.client.drive.replies.delete({
      commentId: 'Test string',
      fileId: 'Test string',
      replyId: 'Test string',
    });
    /** Gets a reply. */
    await gapi.client.drive.replies.get({
      commentId: 'Test string',
      fileId: 'Test string',
      includeDeleted: true,
      replyId: 'Test string',
    });
    /** Creates a new reply to the given comment. */
    await gapi.client.drive.replies.insert(
      {
        commentId: 'Test string',
        fileId: 'Test string',
      },
      {
        author: {
          displayName: 'Test string',
          emailAddress: 'Test string',
          isAuthenticatedUser: true,
          kind: 'Test string',
          permissionId: 'Test string',
          picture: {
            url: 'Test string',
          },
        },
        content: 'Test string',
        createdDate: 'Test string',
        deleted: true,
        htmlContent: 'Test string',
        kind: 'Test string',
        modifiedDate: 'Test string',
        replyId: 'Test string',
        verb: 'Test string',
      }
    );
    /** Lists all of the replies to a comment. */
    await gapi.client.drive.replies.list({
      commentId: 'Test string',
      fileId: 'Test string',
      includeDeleted: true,
      maxResults: 42,
      pageToken: 'Test string',
    });
    /** Updates an existing reply. */
    await gapi.client.drive.replies.patch(
      {
        commentId: 'Test string',
        fileId: 'Test string',
        replyId: 'Test string',
      },
      {
        author: {
          displayName: 'Test string',
          emailAddress: 'Test string',
          isAuthenticatedUser: true,
          kind: 'Test string',
          permissionId: 'Test string',
          picture: {
            url: 'Test string',
          },
        },
        content: 'Test string',
        createdDate: 'Test string',
        deleted: true,
        htmlContent: 'Test string',
        kind: 'Test string',
        modifiedDate: 'Test string',
        replyId: 'Test string',
        verb: 'Test string',
      }
    );
    /** Updates an existing reply. */
    await gapi.client.drive.replies.update(
      {
        commentId: 'Test string',
        fileId: 'Test string',
        replyId: 'Test string',
      },
      {
        author: {
          displayName: 'Test string',
          emailAddress: 'Test string',
          isAuthenticatedUser: true,
          kind: 'Test string',
          permissionId: 'Test string',
          picture: {
            url: 'Test string',
          },
        },
        content: 'Test string',
        createdDate: 'Test string',
        deleted: true,
        htmlContent: 'Test string',
        kind: 'Test string',
        modifiedDate: 'Test string',
        replyId: 'Test string',
        verb: 'Test string',
      }
    );
    /** Permanently deletes a file version. You can only delete revisions for files with binary content, like images or videos. Revisions for other files, like Google Docs or Sheets, and the last remaining file version can't be deleted. */
    await gapi.client.drive.revisions.delete({
      fileId: 'Test string',
      revisionId: 'Test string',
    });
    /** Gets a specific revision. */
    await gapi.client.drive.revisions.get({
      fileId: 'Test string',
      revisionId: 'Test string',
    });
    /** Lists a file's revisions. */
    await gapi.client.drive.revisions.list({
      fileId: 'Test string',
      maxResults: 42,
      pageToken: 'Test string',
    });
    /** Updates a revision. */
    await gapi.client.drive.revisions.patch(
      {
        fileId: 'Test string',
        revisionId: 'Test string',
      },
      {
        downloadUrl: 'Test string',
        etag: 'Test string',
        exportLinks: {
          A: 'Test string',
        },
        fileSize: 'Test string',
        id: 'Test string',
        kind: 'Test string',
        lastModifyingUser: {
          displayName: 'Test string',
          emailAddress: 'Test string',
          isAuthenticatedUser: true,
          kind: 'Test string',
          permissionId: 'Test string',
          picture: {
            url: 'Test string',
          },
        },
        lastModifyingUserName: 'Test string',
        md5Checksum: 'Test string',
        mimeType: 'Test string',
        modifiedDate: 'Test string',
        originalFilename: 'Test string',
        pinned: true,
        publishAuto: true,
        published: true,
        publishedLink: 'Test string',
        publishedOutsideDomain: true,
        selfLink: 'Test string',
      }
    );
    /** Updates a revision. */
    await gapi.client.drive.revisions.update(
      {
        fileId: 'Test string',
        revisionId: 'Test string',
      },
      {
        downloadUrl: 'Test string',
        etag: 'Test string',
        exportLinks: {
          A: 'Test string',
        },
        fileSize: 'Test string',
        id: 'Test string',
        kind: 'Test string',
        lastModifyingUser: {
          displayName: 'Test string',
          emailAddress: 'Test string',
          isAuthenticatedUser: true,
          kind: 'Test string',
          permissionId: 'Test string',
          picture: {
            url: 'Test string',
          },
        },
        lastModifyingUserName: 'Test string',
        md5Checksum: 'Test string',
        mimeType: 'Test string',
        modifiedDate: 'Test string',
        originalFilename: 'Test string',
        pinned: true,
        publishAuto: true,
        published: true,
        publishedLink: 'Test string',
        publishedOutsideDomain: true,
        selfLink: 'Test string',
      }
    );
    /** Deprecated: Use `drives.delete` instead. */
    await gapi.client.drive.teamdrives.delete({
      teamDriveId: 'Test string',
    });
    /** Deprecated: Use `drives.get` instead. */
    await gapi.client.drive.teamdrives.get({
      teamDriveId: 'Test string',
      useDomainAdminAccess: true,
    });
    /** Deprecated: Use `drives.insert` instead. */
    await gapi.client.drive.teamdrives.insert(
      {
        requestId: 'Test string',
      },
      {
        backgroundImageFile: {
          id: 'Test string',
          width: 42,
          xCoordinate: 42,
          yCoordinate: 42,
        },
        backgroundImageLink: 'Test string',
        capabilities: {
          canAddChildren: true,
          canChangeCopyRequiresWriterPermissionRestriction: true,
          canChangeDomainUsersOnlyRestriction: true,
          canChangeSharingFoldersRequiresOrganizerPermissionRestriction: true,
          canChangeTeamDriveBackground: true,
          canChangeTeamMembersOnlyRestriction: true,
          canComment: true,
          canCopy: true,
          canDeleteChildren: true,
          canDeleteTeamDrive: true,
          canDownload: true,
          canEdit: true,
          canListChildren: true,
          canManageMembers: true,
          canReadRevisions: true,
          canRemoveChildren: true,
          canRename: true,
          canRenameTeamDrive: true,
          canResetTeamDriveRestrictions: true,
          canShare: true,
          canTrashChildren: true,
        },
        colorRgb: 'Test string',
        createdDate: 'Test string',
        id: 'Test string',
        kind: 'Test string',
        name: 'Test string',
        orgUnitId: 'Test string',
        restrictions: {
          adminManagedRestrictions: true,
          copyRequiresWriterPermission: true,
          domainUsersOnly: true,
          sharingFoldersRequiresOrganizerPermission: true,
          teamMembersOnly: true,
        },
        themeId: 'Test string',
      }
    );
    /** Deprecated: Use `drives.list` instead. */
    await gapi.client.drive.teamdrives.list({
      maxResults: 42,
      pageToken: 'Test string',
      q: 'Test string',
      useDomainAdminAccess: true,
    });
    /** Deprecated: Use `drives.update` instead. */
    await gapi.client.drive.teamdrives.update(
      {
        teamDriveId: 'Test string',
        useDomainAdminAccess: true,
      },
      {
        backgroundImageFile: {
          id: 'Test string',
          width: 42,
          xCoordinate: 42,
          yCoordinate: 42,
        },
        backgroundImageLink: 'Test string',
        capabilities: {
          canAddChildren: true,
          canChangeCopyRequiresWriterPermissionRestriction: true,
          canChangeDomainUsersOnlyRestriction: true,
          canChangeSharingFoldersRequiresOrganizerPermissionRestriction: true,
          canChangeTeamDriveBackground: true,
          canChangeTeamMembersOnlyRestriction: true,
          canComment: true,
          canCopy: true,
          canDeleteChildren: true,
          canDeleteTeamDrive: true,
          canDownload: true,
          canEdit: true,
          canListChildren: true,
          canManageMembers: true,
          canReadRevisions: true,
          canRemoveChildren: true,
          canRename: true,
          canRenameTeamDrive: true,
          canResetTeamDriveRestrictions: true,
          canShare: true,
          canTrashChildren: true,
        },
        colorRgb: 'Test string',
        createdDate: 'Test string',
        id: 'Test string',
        kind: 'Test string',
        name: 'Test string',
        orgUnitId: 'Test string',
        restrictions: {
          adminManagedRestrictions: true,
          copyRequiresWriterPermission: true,
          domainUsersOnly: true,
          sharingFoldersRequiresOrganizerPermission: true,
          teamMembersOnly: true,
        },
        themeId: 'Test string',
      }
    );
  }
});
