/* This is stub file for gapi.client.securitycenter-v1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20221021

gapi.load('client', async () => {
    /** now we can use gapi.client */

    await gapi.client.load('https://securitycenter.googleapis.com/$discovery/rest?version=v1');
    /** now we can use gapi.client.securitycenter */

    /** don't forget to authenticate your client before sending any request to resources: */
    /** declare client_id registered in Google Developers Console */
    const client_id = '<<PUT YOUR CLIENT ID HERE>>';
    const scope = [
        /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
        'https://www.googleapis.com/auth/cloud-platform',
    ];
    const immediate = false;
    gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
        if (authResult && !authResult.error) {
            /** handle successful authorization */
            run();
        } else {
            /** handle authorization error */
        }
    });

    async function run() {
        /** Filters an organization's assets and groups them by their specified properties. */
        await gapi.client.securitycenter.folders.assets.group({
            parent: "Test string",
        }, {
            compareDuration: "Test string",
            filter: "Test string",
            groupBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            readTime: "Test string",
        });
        /** Lists an organization's assets. */
        await gapi.client.securitycenter.folders.assets.list({
            compareDuration: "Test string",
            fieldMask: "Test string",
            filter: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
            readTime: "Test string",
        });
        /** Updates security marks. */
        await gapi.client.securitycenter.folders.assets.updateSecurityMarks({
            name: "Test string",
            startTime: "Test string",
            updateMask: "Test string",
        }, {
            canonicalName: "Test string",
            marks: {
                A: "Test string"
            },
            name: "Test string",
        });
        /** Creates a big query export. */
        await gapi.client.securitycenter.folders.bigQueryExports.create({
            bigQueryExportId: "Test string",
            parent: "Test string",
        }, {
            createTime: "Test string",
            dataset: "Test string",
            description: "Test string",
            filter: "Test string",
            mostRecentEditor: "Test string",
            name: "Test string",
            principal: "Test string",
            updateTime: "Test string",
        });
        /** Deletes an existing big query export. */
        await gapi.client.securitycenter.folders.bigQueryExports.delete({
            name: "Test string",
        });
        /** Gets a big query export. */
        await gapi.client.securitycenter.folders.bigQueryExports.get({
            name: "Test string",
        });
        /**
         * Lists BigQuery exports. Note that when requesting BigQuery exports at a given level all exports under that level are also returned e.g. if requesting BigQuery exports under a folder,
         * then all BigQuery exports immediately under the folder plus the ones created under the projects within the folder are returned.
         */
        await gapi.client.securitycenter.folders.bigQueryExports.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a BigQuery export. */
        await gapi.client.securitycenter.folders.bigQueryExports.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            dataset: "Test string",
            description: "Test string",
            filter: "Test string",
            mostRecentEditor: "Test string",
            name: "Test string",
            principal: "Test string",
            updateTime: "Test string",
        });
        /**
         * Kicks off an LRO to bulk mute findings for a parent based on a filter. The parent can be either an organization, folder or project. The findings matched by the filter will be muted
         * after the LRO is done.
         */
        await gapi.client.securitycenter.folders.findings.bulkMute({
            parent: "Test string",
        }, {
            filter: "Test string",
            muteAnnotation: "Test string",
        });
        /** Creates a mute config. */
        await gapi.client.securitycenter.folders.muteConfigs.create({
            muteConfigId: "Test string",
            parent: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            displayName: "Test string",
            filter: "Test string",
            mostRecentEditor: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Deletes an existing mute config. */
        await gapi.client.securitycenter.folders.muteConfigs.delete({
            name: "Test string",
        });
        /** Gets a mute config. */
        await gapi.client.securitycenter.folders.muteConfigs.get({
            name: "Test string",
        });
        /** Lists mute configs. */
        await gapi.client.securitycenter.folders.muteConfigs.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a mute config. */
        await gapi.client.securitycenter.folders.muteConfigs.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            displayName: "Test string",
            filter: "Test string",
            mostRecentEditor: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Creates a notification config. */
        await gapi.client.securitycenter.folders.notificationConfigs.create({
            configId: "Test string",
            parent: "Test string",
        }, {
            description: "Test string",
            name: "Test string",
            pubsubTopic: "Test string",
            serviceAccount: "Test string",
            streamingConfig: {
                filter: "Test string",
            },
        });
        /** Deletes a notification config. */
        await gapi.client.securitycenter.folders.notificationConfigs.delete({
            name: "Test string",
        });
        /** Gets a notification config. */
        await gapi.client.securitycenter.folders.notificationConfigs.get({
            name: "Test string",
        });
        /** Lists notification configs. */
        await gapi.client.securitycenter.folders.notificationConfigs.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a notification config. The following update fields are allowed: description, pubsub_topic, streaming_config.filter */
        await gapi.client.securitycenter.folders.notificationConfigs.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            description: "Test string",
            name: "Test string",
            pubsubTopic: "Test string",
            serviceAccount: "Test string",
            streamingConfig: {
                filter: "Test string",
            },
        });
        /** Lists all sources belonging to an organization. */
        await gapi.client.securitycenter.folders.sources.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Filters an organization or source's findings and groups them by their specified properties. To group across all sources provide a `-` as the source id. Example:
         * /v1/organizations/{organization_id}/sources/-/findings, /v1/folders/{folder_id}/sources/-/findings, /v1/projects/{project_id}/sources/-/findings
         */
        await gapi.client.securitycenter.folders.sources.findings.group({
            parent: "Test string",
        }, {
            compareDuration: "Test string",
            filter: "Test string",
            groupBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            readTime: "Test string",
        });
        /** Lists an organization or source's findings. To list across all sources provide a `-` as the source id. Example: /v1/organizations/{organization_id}/sources/-/findings */
        await gapi.client.securitycenter.folders.sources.findings.list({
            compareDuration: "Test string",
            fieldMask: "Test string",
            filter: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
            readTime: "Test string",
        });
        /** Creates or updates a finding. The corresponding source must exist for a finding creation to succeed. */
        await gapi.client.securitycenter.folders.sources.findings.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            access: {
                callerIp: "Test string",
                callerIpGeo: {
                    regionCode: "Test string",
                },
                methodName: "Test string",
                principalEmail: "Test string",
                principalSubject: "Test string",
                serviceAccountDelegationInfo: [
                    {
                        principalEmail: "Test string",
                        principalSubject: "Test string",
                    }
                ],
                serviceAccountKeyName: "Test string",
                serviceName: "Test string",
                userAgentFamily: "Test string",
                userName: "Test string",
            },
            canonicalName: "Test string",
            category: "Test string",
            compliances: [
                {
                    ids: [
                        "Test string"
                    ],
                    standard: "Test string",
                    version: "Test string",
                }
            ],
            connections: [
                {
                    destinationIp: "Test string",
                    destinationPort: 42,
                    protocol: "Test string",
                    sourceIp: "Test string",
                    sourcePort: 42,
                }
            ],
            contacts: {
                A: {
                    contacts: [
                        {
                            email: "Test string",
                        }
                    ],
                }
            },
            containers: [
                {
                    imageId: "Test string",
                    labels: [
                        {
                            name: "Test string",
                            value: "Test string",
                        }
                    ],
                    name: "Test string",
                    uri: "Test string",
                }
            ],
            createTime: "Test string",
            database: {
                displayName: "Test string",
                grantees: [
                    "Test string"
                ],
                name: "Test string",
                query: "Test string",
                userName: "Test string",
            },
            description: "Test string",
            eventTime: "Test string",
            exfiltration: {
                sources: [
                    {
                        components: [
                            "Test string"
                        ],
                        name: "Test string",
                    }
                ],
                targets: [
                    {
                        components: [
                            "Test string"
                        ],
                        name: "Test string",
                    }
                ],
            },
            externalSystems: {
                A: {
                    assignees: [
                        "Test string"
                    ],
                    externalSystemUpdateTime: "Test string",
                    externalUid: "Test string",
                    name: "Test string",
                    status: "Test string",
                }
            },
            externalUri: "Test string",
            findingClass: "Test string",
            iamBindings: [
                {
                    action: "Test string",
                    member: "Test string",
                    role: "Test string",
                }
            ],
            indicator: {
                domains: [
                    "Test string"
                ],
                ipAddresses: [
                    "Test string"
                ],
                signatures: [
                    {
                        memoryHashSignature: {
                            binaryFamily: "Test string",
                            detections: [
                                {
                                    binary: "Test string",
                                    percentPagesMatched: 42,
                                }
                            ],
                        },
                        yaraRuleSignature: {
                            yaraRule: "Test string",
                        },
                    }
                ],
                uris: [
                    "Test string"
                ],
            },
            kubernetes: {
                accessReviews: [
                    {
                        group: "Test string",
                        name: "Test string",
                        ns: "Test string",
                        resource: "Test string",
                        subresource: "Test string",
                        verb: "Test string",
                        version: "Test string",
                    }
                ],
                bindings: [
                    {
                        name: "Test string",
                        ns: "Test string",
                        role: {
                            kind: "Test string",
                            name: "Test string",
                            ns: "Test string",
                        },
                        subjects: [
                            {
                                kind: "Test string",
                                name: "Test string",
                                ns: "Test string",
                            }
                        ],
                    }
                ],
                nodePools: [
                    {
                        name: "Test string",
                        nodes: [
                            {
                                name: "Test string",
                            }
                        ],
                    }
                ],
                nodes: [
                    {
                        name: "Test string",
                    }
                ],
                pods: [
                    {
                        containers: [
                            {
                                imageId: "Test string",
                                labels: [
                                    {
                                        name: "Test string",
                                        value: "Test string",
                                    }
                                ],
                                name: "Test string",
                                uri: "Test string",
                            }
                        ],
                        labels: [
                            {
                                name: "Test string",
                                value: "Test string",
                            }
                        ],
                        name: "Test string",
                        ns: "Test string",
                    }
                ],
                roles: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        ns: "Test string",
                    }
                ],
            },
            mitreAttack: {
                additionalTactics: [
                    "Test string"
                ],
                additionalTechniques: [
                    "Test string"
                ],
                primaryTactic: "Test string",
                primaryTechniques: [
                    "Test string"
                ],
                version: "Test string",
            },
            mute: "Test string",
            muteInitiator: "Test string",
            muteUpdateTime: "Test string",
            name: "Test string",
            nextSteps: "Test string",
            parent: "Test string",
            parentDisplayName: "Test string",
            processes: [
                {
                    args: [
                        "Test string"
                    ],
                    argumentsTruncated: true,
                    binary: {
                        contents: "Test string",
                        hashedSize: "Test string",
                        partiallyHashed: true,
                        path: "Test string",
                        sha256: "Test string",
                        size: "Test string",
                    },
                    envVariables: [
                        {
                            name: "Test string",
                            val: "Test string",
                        }
                    ],
                    envVariablesTruncated: true,
                    libraries: [
                        {
                            contents: "Test string",
                            hashedSize: "Test string",
                            partiallyHashed: true,
                            path: "Test string",
                            sha256: "Test string",
                            size: "Test string",
                        }
                    ],
                    name: "Test string",
                    parentPid: "Test string",
                    pid: "Test string",
                    script: {
                        contents: "Test string",
                        hashedSize: "Test string",
                        partiallyHashed: true,
                        path: "Test string",
                        sha256: "Test string",
                        size: "Test string",
                    },
                }
            ],
            resourceName: "Test string",
            securityMarks: {
                canonicalName: "Test string",
                marks: {
                    A: "Test string"
                },
                name: "Test string",
            },
            severity: "Test string",
            sourceProperties: {
                A: 42
            },
            state: "Test string",
            vulnerability: {
                cve: {
                    cvssv3: {
                        attackComplexity: "Test string",
                        attackVector: "Test string",
                        availabilityImpact: "Test string",
                        baseScore: 42,
                        confidentialityImpact: "Test string",
                        integrityImpact: "Test string",
                        privilegesRequired: "Test string",
                        scope: "Test string",
                        userInteraction: "Test string",
                    },
                    id: "Test string",
                    references: [
                        {
                            source: "Test string",
                            uri: "Test string",
                        }
                    ],
                    upstreamFixAvailable: true,
                },
            },
        });
        /** Updates the mute state of a finding. */
        await gapi.client.securitycenter.folders.sources.findings.setMute({
            name: "Test string",
        }, {
            mute: "Test string",
        });
        /** Updates the state of a finding. */
        await gapi.client.securitycenter.folders.sources.findings.setState({
            name: "Test string",
        }, {
            startTime: "Test string",
            state: "Test string",
        });
        /** Updates security marks. */
        await gapi.client.securitycenter.folders.sources.findings.updateSecurityMarks({
            name: "Test string",
            startTime: "Test string",
            updateMask: "Test string",
        }, {
            canonicalName: "Test string",
            marks: {
                A: "Test string"
            },
            name: "Test string",
        });
        /** Updates external system. This is for a given finding. */
        await gapi.client.securitycenter.folders.sources.findings.externalSystems.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            assignees: [
                "Test string"
            ],
            externalSystemUpdateTime: "Test string",
            externalUid: "Test string",
            name: "Test string",
            status: "Test string",
        });
        /** Gets the settings for an organization. */
        await gapi.client.securitycenter.organizations.getOrganizationSettings({
            name: "Test string",
        });
        /** Updates an organization's settings. */
        await gapi.client.securitycenter.organizations.updateOrganizationSettings({
            name: "Test string",
            updateMask: "Test string",
        }, {
            assetDiscoveryConfig: {
                folderIds: [
                    "Test string"
                ],
                inclusionMode: "Test string",
                projectIds: [
                    "Test string"
                ],
            },
            enableAssetDiscovery: true,
            name: "Test string",
        });
        /** Filters an organization's assets and groups them by their specified properties. */
        await gapi.client.securitycenter.organizations.assets.group({
            parent: "Test string",
        }, {
            compareDuration: "Test string",
            filter: "Test string",
            groupBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            readTime: "Test string",
        });
        /** Lists an organization's assets. */
        await gapi.client.securitycenter.organizations.assets.list({
            compareDuration: "Test string",
            fieldMask: "Test string",
            filter: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
            readTime: "Test string",
        });
        /**
         * Runs asset discovery. The discovery is tracked with a long-running operation. This API can only be called with limited frequency for an organization. If it is called too frequently the
         * caller will receive a TOO_MANY_REQUESTS error.
         */
        await gapi.client.securitycenter.organizations.assets.runDiscovery({
            parent: "Test string",
        }, {
        });
        /** Updates security marks. */
        await gapi.client.securitycenter.organizations.assets.updateSecurityMarks({
            name: "Test string",
            startTime: "Test string",
            updateMask: "Test string",
        }, {
            canonicalName: "Test string",
            marks: {
                A: "Test string"
            },
            name: "Test string",
        });
        /** Creates a big query export. */
        await gapi.client.securitycenter.organizations.bigQueryExports.create({
            bigQueryExportId: "Test string",
            parent: "Test string",
        }, {
            createTime: "Test string",
            dataset: "Test string",
            description: "Test string",
            filter: "Test string",
            mostRecentEditor: "Test string",
            name: "Test string",
            principal: "Test string",
            updateTime: "Test string",
        });
        /** Deletes an existing big query export. */
        await gapi.client.securitycenter.organizations.bigQueryExports.delete({
            name: "Test string",
        });
        /** Gets a big query export. */
        await gapi.client.securitycenter.organizations.bigQueryExports.get({
            name: "Test string",
        });
        /**
         * Lists BigQuery exports. Note that when requesting BigQuery exports at a given level all exports under that level are also returned e.g. if requesting BigQuery exports under a folder,
         * then all BigQuery exports immediately under the folder plus the ones created under the projects within the folder are returned.
         */
        await gapi.client.securitycenter.organizations.bigQueryExports.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a BigQuery export. */
        await gapi.client.securitycenter.organizations.bigQueryExports.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            dataset: "Test string",
            description: "Test string",
            filter: "Test string",
            mostRecentEditor: "Test string",
            name: "Test string",
            principal: "Test string",
            updateTime: "Test string",
        });
        /**
         * Kicks off an LRO to bulk mute findings for a parent based on a filter. The parent can be either an organization, folder or project. The findings matched by the filter will be muted
         * after the LRO is done.
         */
        await gapi.client.securitycenter.organizations.findings.bulkMute({
            parent: "Test string",
        }, {
            filter: "Test string",
            muteAnnotation: "Test string",
        });
        /** Creates a mute config. */
        await gapi.client.securitycenter.organizations.muteConfigs.create({
            muteConfigId: "Test string",
            parent: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            displayName: "Test string",
            filter: "Test string",
            mostRecentEditor: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Deletes an existing mute config. */
        await gapi.client.securitycenter.organizations.muteConfigs.delete({
            name: "Test string",
        });
        /** Gets a mute config. */
        await gapi.client.securitycenter.organizations.muteConfigs.get({
            name: "Test string",
        });
        /** Lists mute configs. */
        await gapi.client.securitycenter.organizations.muteConfigs.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a mute config. */
        await gapi.client.securitycenter.organizations.muteConfigs.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            displayName: "Test string",
            filter: "Test string",
            mostRecentEditor: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Creates a notification config. */
        await gapi.client.securitycenter.organizations.notificationConfigs.create({
            configId: "Test string",
            parent: "Test string",
        }, {
            description: "Test string",
            name: "Test string",
            pubsubTopic: "Test string",
            serviceAccount: "Test string",
            streamingConfig: {
                filter: "Test string",
            },
        });
        /** Deletes a notification config. */
        await gapi.client.securitycenter.organizations.notificationConfigs.delete({
            name: "Test string",
        });
        /** Gets a notification config. */
        await gapi.client.securitycenter.organizations.notificationConfigs.get({
            name: "Test string",
        });
        /** Lists notification configs. */
        await gapi.client.securitycenter.organizations.notificationConfigs.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a notification config. The following update fields are allowed: description, pubsub_topic, streaming_config.filter */
        await gapi.client.securitycenter.organizations.notificationConfigs.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            description: "Test string",
            name: "Test string",
            pubsubTopic: "Test string",
            serviceAccount: "Test string",
            streamingConfig: {
                filter: "Test string",
            },
        });
        /**
         * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this
         * method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation
         * completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of
         * 1, corresponding to `Code.CANCELLED`.
         */
        await gapi.client.securitycenter.organizations.operations.cancel({
            name: "Test string",
        });
        /**
         * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support
         * this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
         */
        await gapi.client.securitycenter.organizations.operations.delete({
            name: "Test string",
        });
        /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
        await gapi.client.securitycenter.organizations.operations.get({
            name: "Test string",
        });
        /**
         * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to
         * override the binding to use different resource name schemes, such as `users/*‍/operations`. To override the binding, API services can add a binding such as
         * `"/v1/{name=users/*}/operations"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must
         * ensure the name binding is the parent resource, without the operations collection id.
         */
        await gapi.client.securitycenter.organizations.operations.list({
            filter: "Test string",
            name: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Creates a source. */
        await gapi.client.securitycenter.organizations.sources.create({
            parent: "Test string",
        }, {
            canonicalName: "Test string",
            description: "Test string",
            displayName: "Test string",
            name: "Test string",
        });
        /** Gets a source. */
        await gapi.client.securitycenter.organizations.sources.get({
            name: "Test string",
        });
        /** Gets the access control policy on the specified Source. */
        await gapi.client.securitycenter.organizations.sources.getIamPolicy({
            resource: "Test string",
        }, {
            options: {
                requestedPolicyVersion: 42,
            },
        });
        /** Lists all sources belonging to an organization. */
        await gapi.client.securitycenter.organizations.sources.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a source. */
        await gapi.client.securitycenter.organizations.sources.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            canonicalName: "Test string",
            description: "Test string",
            displayName: "Test string",
            name: "Test string",
        });
        /** Sets the access control policy on the specified Source. */
        await gapi.client.securitycenter.organizations.sources.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                auditConfigs: [
                    {
                        auditLogConfigs: [
                            {
                                exemptedMembers: [
                                    "Test string"
                                ],
                                logType: "Test string",
                            }
                        ],
                        service: "Test string",
                    }
                ],
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"
                        ],
                        role: "Test string",
                    }
                ],
                etag: "Test string",
                version: 42,
            },
            updateMask: "Test string",
        });
        /** Returns the permissions that a caller has on the specified source. */
        await gapi.client.securitycenter.organizations.sources.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"
            ],
        });
        /** Creates a finding. The corresponding source must exist for finding creation to succeed. */
        await gapi.client.securitycenter.organizations.sources.findings.create({
            findingId: "Test string",
            parent: "Test string",
        }, {
            access: {
                callerIp: "Test string",
                callerIpGeo: {
                    regionCode: "Test string",
                },
                methodName: "Test string",
                principalEmail: "Test string",
                principalSubject: "Test string",
                serviceAccountDelegationInfo: [
                    {
                        principalEmail: "Test string",
                        principalSubject: "Test string",
                    }
                ],
                serviceAccountKeyName: "Test string",
                serviceName: "Test string",
                userAgentFamily: "Test string",
                userName: "Test string",
            },
            canonicalName: "Test string",
            category: "Test string",
            compliances: [
                {
                    ids: [
                        "Test string"
                    ],
                    standard: "Test string",
                    version: "Test string",
                }
            ],
            connections: [
                {
                    destinationIp: "Test string",
                    destinationPort: 42,
                    protocol: "Test string",
                    sourceIp: "Test string",
                    sourcePort: 42,
                }
            ],
            contacts: {
                A: {
                    contacts: [
                        {
                            email: "Test string",
                        }
                    ],
                }
            },
            containers: [
                {
                    imageId: "Test string",
                    labels: [
                        {
                            name: "Test string",
                            value: "Test string",
                        }
                    ],
                    name: "Test string",
                    uri: "Test string",
                }
            ],
            createTime: "Test string",
            database: {
                displayName: "Test string",
                grantees: [
                    "Test string"
                ],
                name: "Test string",
                query: "Test string",
                userName: "Test string",
            },
            description: "Test string",
            eventTime: "Test string",
            exfiltration: {
                sources: [
                    {
                        components: [
                            "Test string"
                        ],
                        name: "Test string",
                    }
                ],
                targets: [
                    {
                        components: [
                            "Test string"
                        ],
                        name: "Test string",
                    }
                ],
            },
            externalSystems: {
                A: {
                    assignees: [
                        "Test string"
                    ],
                    externalSystemUpdateTime: "Test string",
                    externalUid: "Test string",
                    name: "Test string",
                    status: "Test string",
                }
            },
            externalUri: "Test string",
            findingClass: "Test string",
            iamBindings: [
                {
                    action: "Test string",
                    member: "Test string",
                    role: "Test string",
                }
            ],
            indicator: {
                domains: [
                    "Test string"
                ],
                ipAddresses: [
                    "Test string"
                ],
                signatures: [
                    {
                        memoryHashSignature: {
                            binaryFamily: "Test string",
                            detections: [
                                {
                                    binary: "Test string",
                                    percentPagesMatched: 42,
                                }
                            ],
                        },
                        yaraRuleSignature: {
                            yaraRule: "Test string",
                        },
                    }
                ],
                uris: [
                    "Test string"
                ],
            },
            kubernetes: {
                accessReviews: [
                    {
                        group: "Test string",
                        name: "Test string",
                        ns: "Test string",
                        resource: "Test string",
                        subresource: "Test string",
                        verb: "Test string",
                        version: "Test string",
                    }
                ],
                bindings: [
                    {
                        name: "Test string",
                        ns: "Test string",
                        role: {
                            kind: "Test string",
                            name: "Test string",
                            ns: "Test string",
                        },
                        subjects: [
                            {
                                kind: "Test string",
                                name: "Test string",
                                ns: "Test string",
                            }
                        ],
                    }
                ],
                nodePools: [
                    {
                        name: "Test string",
                        nodes: [
                            {
                                name: "Test string",
                            }
                        ],
                    }
                ],
                nodes: [
                    {
                        name: "Test string",
                    }
                ],
                pods: [
                    {
                        containers: [
                            {
                                imageId: "Test string",
                                labels: [
                                    {
                                        name: "Test string",
                                        value: "Test string",
                                    }
                                ],
                                name: "Test string",
                                uri: "Test string",
                            }
                        ],
                        labels: [
                            {
                                name: "Test string",
                                value: "Test string",
                            }
                        ],
                        name: "Test string",
                        ns: "Test string",
                    }
                ],
                roles: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        ns: "Test string",
                    }
                ],
            },
            mitreAttack: {
                additionalTactics: [
                    "Test string"
                ],
                additionalTechniques: [
                    "Test string"
                ],
                primaryTactic: "Test string",
                primaryTechniques: [
                    "Test string"
                ],
                version: "Test string",
            },
            mute: "Test string",
            muteInitiator: "Test string",
            muteUpdateTime: "Test string",
            name: "Test string",
            nextSteps: "Test string",
            parent: "Test string",
            parentDisplayName: "Test string",
            processes: [
                {
                    args: [
                        "Test string"
                    ],
                    argumentsTruncated: true,
                    binary: {
                        contents: "Test string",
                        hashedSize: "Test string",
                        partiallyHashed: true,
                        path: "Test string",
                        sha256: "Test string",
                        size: "Test string",
                    },
                    envVariables: [
                        {
                            name: "Test string",
                            val: "Test string",
                        }
                    ],
                    envVariablesTruncated: true,
                    libraries: [
                        {
                            contents: "Test string",
                            hashedSize: "Test string",
                            partiallyHashed: true,
                            path: "Test string",
                            sha256: "Test string",
                            size: "Test string",
                        }
                    ],
                    name: "Test string",
                    parentPid: "Test string",
                    pid: "Test string",
                    script: {
                        contents: "Test string",
                        hashedSize: "Test string",
                        partiallyHashed: true,
                        path: "Test string",
                        sha256: "Test string",
                        size: "Test string",
                    },
                }
            ],
            resourceName: "Test string",
            securityMarks: {
                canonicalName: "Test string",
                marks: {
                    A: "Test string"
                },
                name: "Test string",
            },
            severity: "Test string",
            sourceProperties: {
                A: 42
            },
            state: "Test string",
            vulnerability: {
                cve: {
                    cvssv3: {
                        attackComplexity: "Test string",
                        attackVector: "Test string",
                        availabilityImpact: "Test string",
                        baseScore: 42,
                        confidentialityImpact: "Test string",
                        integrityImpact: "Test string",
                        privilegesRequired: "Test string",
                        scope: "Test string",
                        userInteraction: "Test string",
                    },
                    id: "Test string",
                    references: [
                        {
                            source: "Test string",
                            uri: "Test string",
                        }
                    ],
                    upstreamFixAvailable: true,
                },
            },
        });
        /**
         * Filters an organization or source's findings and groups them by their specified properties. To group across all sources provide a `-` as the source id. Example:
         * /v1/organizations/{organization_id}/sources/-/findings, /v1/folders/{folder_id}/sources/-/findings, /v1/projects/{project_id}/sources/-/findings
         */
        await gapi.client.securitycenter.organizations.sources.findings.group({
            parent: "Test string",
        }, {
            compareDuration: "Test string",
            filter: "Test string",
            groupBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            readTime: "Test string",
        });
        /** Lists an organization or source's findings. To list across all sources provide a `-` as the source id. Example: /v1/organizations/{organization_id}/sources/-/findings */
        await gapi.client.securitycenter.organizations.sources.findings.list({
            compareDuration: "Test string",
            fieldMask: "Test string",
            filter: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
            readTime: "Test string",
        });
        /** Creates or updates a finding. The corresponding source must exist for a finding creation to succeed. */
        await gapi.client.securitycenter.organizations.sources.findings.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            access: {
                callerIp: "Test string",
                callerIpGeo: {
                    regionCode: "Test string",
                },
                methodName: "Test string",
                principalEmail: "Test string",
                principalSubject: "Test string",
                serviceAccountDelegationInfo: [
                    {
                        principalEmail: "Test string",
                        principalSubject: "Test string",
                    }
                ],
                serviceAccountKeyName: "Test string",
                serviceName: "Test string",
                userAgentFamily: "Test string",
                userName: "Test string",
            },
            canonicalName: "Test string",
            category: "Test string",
            compliances: [
                {
                    ids: [
                        "Test string"
                    ],
                    standard: "Test string",
                    version: "Test string",
                }
            ],
            connections: [
                {
                    destinationIp: "Test string",
                    destinationPort: 42,
                    protocol: "Test string",
                    sourceIp: "Test string",
                    sourcePort: 42,
                }
            ],
            contacts: {
                A: {
                    contacts: [
                        {
                            email: "Test string",
                        }
                    ],
                }
            },
            containers: [
                {
                    imageId: "Test string",
                    labels: [
                        {
                            name: "Test string",
                            value: "Test string",
                        }
                    ],
                    name: "Test string",
                    uri: "Test string",
                }
            ],
            createTime: "Test string",
            database: {
                displayName: "Test string",
                grantees: [
                    "Test string"
                ],
                name: "Test string",
                query: "Test string",
                userName: "Test string",
            },
            description: "Test string",
            eventTime: "Test string",
            exfiltration: {
                sources: [
                    {
                        components: [
                            "Test string"
                        ],
                        name: "Test string",
                    }
                ],
                targets: [
                    {
                        components: [
                            "Test string"
                        ],
                        name: "Test string",
                    }
                ],
            },
            externalSystems: {
                A: {
                    assignees: [
                        "Test string"
                    ],
                    externalSystemUpdateTime: "Test string",
                    externalUid: "Test string",
                    name: "Test string",
                    status: "Test string",
                }
            },
            externalUri: "Test string",
            findingClass: "Test string",
            iamBindings: [
                {
                    action: "Test string",
                    member: "Test string",
                    role: "Test string",
                }
            ],
            indicator: {
                domains: [
                    "Test string"
                ],
                ipAddresses: [
                    "Test string"
                ],
                signatures: [
                    {
                        memoryHashSignature: {
                            binaryFamily: "Test string",
                            detections: [
                                {
                                    binary: "Test string",
                                    percentPagesMatched: 42,
                                }
                            ],
                        },
                        yaraRuleSignature: {
                            yaraRule: "Test string",
                        },
                    }
                ],
                uris: [
                    "Test string"
                ],
            },
            kubernetes: {
                accessReviews: [
                    {
                        group: "Test string",
                        name: "Test string",
                        ns: "Test string",
                        resource: "Test string",
                        subresource: "Test string",
                        verb: "Test string",
                        version: "Test string",
                    }
                ],
                bindings: [
                    {
                        name: "Test string",
                        ns: "Test string",
                        role: {
                            kind: "Test string",
                            name: "Test string",
                            ns: "Test string",
                        },
                        subjects: [
                            {
                                kind: "Test string",
                                name: "Test string",
                                ns: "Test string",
                            }
                        ],
                    }
                ],
                nodePools: [
                    {
                        name: "Test string",
                        nodes: [
                            {
                                name: "Test string",
                            }
                        ],
                    }
                ],
                nodes: [
                    {
                        name: "Test string",
                    }
                ],
                pods: [
                    {
                        containers: [
                            {
                                imageId: "Test string",
                                labels: [
                                    {
                                        name: "Test string",
                                        value: "Test string",
                                    }
                                ],
                                name: "Test string",
                                uri: "Test string",
                            }
                        ],
                        labels: [
                            {
                                name: "Test string",
                                value: "Test string",
                            }
                        ],
                        name: "Test string",
                        ns: "Test string",
                    }
                ],
                roles: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        ns: "Test string",
                    }
                ],
            },
            mitreAttack: {
                additionalTactics: [
                    "Test string"
                ],
                additionalTechniques: [
                    "Test string"
                ],
                primaryTactic: "Test string",
                primaryTechniques: [
                    "Test string"
                ],
                version: "Test string",
            },
            mute: "Test string",
            muteInitiator: "Test string",
            muteUpdateTime: "Test string",
            name: "Test string",
            nextSteps: "Test string",
            parent: "Test string",
            parentDisplayName: "Test string",
            processes: [
                {
                    args: [
                        "Test string"
                    ],
                    argumentsTruncated: true,
                    binary: {
                        contents: "Test string",
                        hashedSize: "Test string",
                        partiallyHashed: true,
                        path: "Test string",
                        sha256: "Test string",
                        size: "Test string",
                    },
                    envVariables: [
                        {
                            name: "Test string",
                            val: "Test string",
                        }
                    ],
                    envVariablesTruncated: true,
                    libraries: [
                        {
                            contents: "Test string",
                            hashedSize: "Test string",
                            partiallyHashed: true,
                            path: "Test string",
                            sha256: "Test string",
                            size: "Test string",
                        }
                    ],
                    name: "Test string",
                    parentPid: "Test string",
                    pid: "Test string",
                    script: {
                        contents: "Test string",
                        hashedSize: "Test string",
                        partiallyHashed: true,
                        path: "Test string",
                        sha256: "Test string",
                        size: "Test string",
                    },
                }
            ],
            resourceName: "Test string",
            securityMarks: {
                canonicalName: "Test string",
                marks: {
                    A: "Test string"
                },
                name: "Test string",
            },
            severity: "Test string",
            sourceProperties: {
                A: 42
            },
            state: "Test string",
            vulnerability: {
                cve: {
                    cvssv3: {
                        attackComplexity: "Test string",
                        attackVector: "Test string",
                        availabilityImpact: "Test string",
                        baseScore: 42,
                        confidentialityImpact: "Test string",
                        integrityImpact: "Test string",
                        privilegesRequired: "Test string",
                        scope: "Test string",
                        userInteraction: "Test string",
                    },
                    id: "Test string",
                    references: [
                        {
                            source: "Test string",
                            uri: "Test string",
                        }
                    ],
                    upstreamFixAvailable: true,
                },
            },
        });
        /** Updates the mute state of a finding. */
        await gapi.client.securitycenter.organizations.sources.findings.setMute({
            name: "Test string",
        }, {
            mute: "Test string",
        });
        /** Updates the state of a finding. */
        await gapi.client.securitycenter.organizations.sources.findings.setState({
            name: "Test string",
        }, {
            startTime: "Test string",
            state: "Test string",
        });
        /** Updates security marks. */
        await gapi.client.securitycenter.organizations.sources.findings.updateSecurityMarks({
            name: "Test string",
            startTime: "Test string",
            updateMask: "Test string",
        }, {
            canonicalName: "Test string",
            marks: {
                A: "Test string"
            },
            name: "Test string",
        });
        /** Updates external system. This is for a given finding. */
        await gapi.client.securitycenter.organizations.sources.findings.externalSystems.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            assignees: [
                "Test string"
            ],
            externalSystemUpdateTime: "Test string",
            externalUid: "Test string",
            name: "Test string",
            status: "Test string",
        });
        /** Filters an organization's assets and groups them by their specified properties. */
        await gapi.client.securitycenter.projects.assets.group({
            parent: "Test string",
        }, {
            compareDuration: "Test string",
            filter: "Test string",
            groupBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            readTime: "Test string",
        });
        /** Lists an organization's assets. */
        await gapi.client.securitycenter.projects.assets.list({
            compareDuration: "Test string",
            fieldMask: "Test string",
            filter: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
            readTime: "Test string",
        });
        /** Updates security marks. */
        await gapi.client.securitycenter.projects.assets.updateSecurityMarks({
            name: "Test string",
            startTime: "Test string",
            updateMask: "Test string",
        }, {
            canonicalName: "Test string",
            marks: {
                A: "Test string"
            },
            name: "Test string",
        });
        /** Creates a big query export. */
        await gapi.client.securitycenter.projects.bigQueryExports.create({
            bigQueryExportId: "Test string",
            parent: "Test string",
        }, {
            createTime: "Test string",
            dataset: "Test string",
            description: "Test string",
            filter: "Test string",
            mostRecentEditor: "Test string",
            name: "Test string",
            principal: "Test string",
            updateTime: "Test string",
        });
        /** Deletes an existing big query export. */
        await gapi.client.securitycenter.projects.bigQueryExports.delete({
            name: "Test string",
        });
        /** Gets a big query export. */
        await gapi.client.securitycenter.projects.bigQueryExports.get({
            name: "Test string",
        });
        /**
         * Lists BigQuery exports. Note that when requesting BigQuery exports at a given level all exports under that level are also returned e.g. if requesting BigQuery exports under a folder,
         * then all BigQuery exports immediately under the folder plus the ones created under the projects within the folder are returned.
         */
        await gapi.client.securitycenter.projects.bigQueryExports.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a BigQuery export. */
        await gapi.client.securitycenter.projects.bigQueryExports.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            dataset: "Test string",
            description: "Test string",
            filter: "Test string",
            mostRecentEditor: "Test string",
            name: "Test string",
            principal: "Test string",
            updateTime: "Test string",
        });
        /**
         * Kicks off an LRO to bulk mute findings for a parent based on a filter. The parent can be either an organization, folder or project. The findings matched by the filter will be muted
         * after the LRO is done.
         */
        await gapi.client.securitycenter.projects.findings.bulkMute({
            parent: "Test string",
        }, {
            filter: "Test string",
            muteAnnotation: "Test string",
        });
        /** Creates a mute config. */
        await gapi.client.securitycenter.projects.muteConfigs.create({
            muteConfigId: "Test string",
            parent: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            displayName: "Test string",
            filter: "Test string",
            mostRecentEditor: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Deletes an existing mute config. */
        await gapi.client.securitycenter.projects.muteConfigs.delete({
            name: "Test string",
        });
        /** Gets a mute config. */
        await gapi.client.securitycenter.projects.muteConfigs.get({
            name: "Test string",
        });
        /** Lists mute configs. */
        await gapi.client.securitycenter.projects.muteConfigs.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a mute config. */
        await gapi.client.securitycenter.projects.muteConfigs.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            displayName: "Test string",
            filter: "Test string",
            mostRecentEditor: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Creates a notification config. */
        await gapi.client.securitycenter.projects.notificationConfigs.create({
            configId: "Test string",
            parent: "Test string",
        }, {
            description: "Test string",
            name: "Test string",
            pubsubTopic: "Test string",
            serviceAccount: "Test string",
            streamingConfig: {
                filter: "Test string",
            },
        });
        /** Deletes a notification config. */
        await gapi.client.securitycenter.projects.notificationConfigs.delete({
            name: "Test string",
        });
        /** Gets a notification config. */
        await gapi.client.securitycenter.projects.notificationConfigs.get({
            name: "Test string",
        });
        /** Lists notification configs. */
        await gapi.client.securitycenter.projects.notificationConfigs.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a notification config. The following update fields are allowed: description, pubsub_topic, streaming_config.filter */
        await gapi.client.securitycenter.projects.notificationConfigs.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            description: "Test string",
            name: "Test string",
            pubsubTopic: "Test string",
            serviceAccount: "Test string",
            streamingConfig: {
                filter: "Test string",
            },
        });
        /** Lists all sources belonging to an organization. */
        await gapi.client.securitycenter.projects.sources.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Filters an organization or source's findings and groups them by their specified properties. To group across all sources provide a `-` as the source id. Example:
         * /v1/organizations/{organization_id}/sources/-/findings, /v1/folders/{folder_id}/sources/-/findings, /v1/projects/{project_id}/sources/-/findings
         */
        await gapi.client.securitycenter.projects.sources.findings.group({
            parent: "Test string",
        }, {
            compareDuration: "Test string",
            filter: "Test string",
            groupBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            readTime: "Test string",
        });
        /** Lists an organization or source's findings. To list across all sources provide a `-` as the source id. Example: /v1/organizations/{organization_id}/sources/-/findings */
        await gapi.client.securitycenter.projects.sources.findings.list({
            compareDuration: "Test string",
            fieldMask: "Test string",
            filter: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
            readTime: "Test string",
        });
        /** Creates or updates a finding. The corresponding source must exist for a finding creation to succeed. */
        await gapi.client.securitycenter.projects.sources.findings.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            access: {
                callerIp: "Test string",
                callerIpGeo: {
                    regionCode: "Test string",
                },
                methodName: "Test string",
                principalEmail: "Test string",
                principalSubject: "Test string",
                serviceAccountDelegationInfo: [
                    {
                        principalEmail: "Test string",
                        principalSubject: "Test string",
                    }
                ],
                serviceAccountKeyName: "Test string",
                serviceName: "Test string",
                userAgentFamily: "Test string",
                userName: "Test string",
            },
            canonicalName: "Test string",
            category: "Test string",
            compliances: [
                {
                    ids: [
                        "Test string"
                    ],
                    standard: "Test string",
                    version: "Test string",
                }
            ],
            connections: [
                {
                    destinationIp: "Test string",
                    destinationPort: 42,
                    protocol: "Test string",
                    sourceIp: "Test string",
                    sourcePort: 42,
                }
            ],
            contacts: {
                A: {
                    contacts: [
                        {
                            email: "Test string",
                        }
                    ],
                }
            },
            containers: [
                {
                    imageId: "Test string",
                    labels: [
                        {
                            name: "Test string",
                            value: "Test string",
                        }
                    ],
                    name: "Test string",
                    uri: "Test string",
                }
            ],
            createTime: "Test string",
            database: {
                displayName: "Test string",
                grantees: [
                    "Test string"
                ],
                name: "Test string",
                query: "Test string",
                userName: "Test string",
            },
            description: "Test string",
            eventTime: "Test string",
            exfiltration: {
                sources: [
                    {
                        components: [
                            "Test string"
                        ],
                        name: "Test string",
                    }
                ],
                targets: [
                    {
                        components: [
                            "Test string"
                        ],
                        name: "Test string",
                    }
                ],
            },
            externalSystems: {
                A: {
                    assignees: [
                        "Test string"
                    ],
                    externalSystemUpdateTime: "Test string",
                    externalUid: "Test string",
                    name: "Test string",
                    status: "Test string",
                }
            },
            externalUri: "Test string",
            findingClass: "Test string",
            iamBindings: [
                {
                    action: "Test string",
                    member: "Test string",
                    role: "Test string",
                }
            ],
            indicator: {
                domains: [
                    "Test string"
                ],
                ipAddresses: [
                    "Test string"
                ],
                signatures: [
                    {
                        memoryHashSignature: {
                            binaryFamily: "Test string",
                            detections: [
                                {
                                    binary: "Test string",
                                    percentPagesMatched: 42,
                                }
                            ],
                        },
                        yaraRuleSignature: {
                            yaraRule: "Test string",
                        },
                    }
                ],
                uris: [
                    "Test string"
                ],
            },
            kubernetes: {
                accessReviews: [
                    {
                        group: "Test string",
                        name: "Test string",
                        ns: "Test string",
                        resource: "Test string",
                        subresource: "Test string",
                        verb: "Test string",
                        version: "Test string",
                    }
                ],
                bindings: [
                    {
                        name: "Test string",
                        ns: "Test string",
                        role: {
                            kind: "Test string",
                            name: "Test string",
                            ns: "Test string",
                        },
                        subjects: [
                            {
                                kind: "Test string",
                                name: "Test string",
                                ns: "Test string",
                            }
                        ],
                    }
                ],
                nodePools: [
                    {
                        name: "Test string",
                        nodes: [
                            {
                                name: "Test string",
                            }
                        ],
                    }
                ],
                nodes: [
                    {
                        name: "Test string",
                    }
                ],
                pods: [
                    {
                        containers: [
                            {
                                imageId: "Test string",
                                labels: [
                                    {
                                        name: "Test string",
                                        value: "Test string",
                                    }
                                ],
                                name: "Test string",
                                uri: "Test string",
                            }
                        ],
                        labels: [
                            {
                                name: "Test string",
                                value: "Test string",
                            }
                        ],
                        name: "Test string",
                        ns: "Test string",
                    }
                ],
                roles: [
                    {
                        kind: "Test string",
                        name: "Test string",
                        ns: "Test string",
                    }
                ],
            },
            mitreAttack: {
                additionalTactics: [
                    "Test string"
                ],
                additionalTechniques: [
                    "Test string"
                ],
                primaryTactic: "Test string",
                primaryTechniques: [
                    "Test string"
                ],
                version: "Test string",
            },
            mute: "Test string",
            muteInitiator: "Test string",
            muteUpdateTime: "Test string",
            name: "Test string",
            nextSteps: "Test string",
            parent: "Test string",
            parentDisplayName: "Test string",
            processes: [
                {
                    args: [
                        "Test string"
                    ],
                    argumentsTruncated: true,
                    binary: {
                        contents: "Test string",
                        hashedSize: "Test string",
                        partiallyHashed: true,
                        path: "Test string",
                        sha256: "Test string",
                        size: "Test string",
                    },
                    envVariables: [
                        {
                            name: "Test string",
                            val: "Test string",
                        }
                    ],
                    envVariablesTruncated: true,
                    libraries: [
                        {
                            contents: "Test string",
                            hashedSize: "Test string",
                            partiallyHashed: true,
                            path: "Test string",
                            sha256: "Test string",
                            size: "Test string",
                        }
                    ],
                    name: "Test string",
                    parentPid: "Test string",
                    pid: "Test string",
                    script: {
                        contents: "Test string",
                        hashedSize: "Test string",
                        partiallyHashed: true,
                        path: "Test string",
                        sha256: "Test string",
                        size: "Test string",
                    },
                }
            ],
            resourceName: "Test string",
            securityMarks: {
                canonicalName: "Test string",
                marks: {
                    A: "Test string"
                },
                name: "Test string",
            },
            severity: "Test string",
            sourceProperties: {
                A: 42
            },
            state: "Test string",
            vulnerability: {
                cve: {
                    cvssv3: {
                        attackComplexity: "Test string",
                        attackVector: "Test string",
                        availabilityImpact: "Test string",
                        baseScore: 42,
                        confidentialityImpact: "Test string",
                        integrityImpact: "Test string",
                        privilegesRequired: "Test string",
                        scope: "Test string",
                        userInteraction: "Test string",
                    },
                    id: "Test string",
                    references: [
                        {
                            source: "Test string",
                            uri: "Test string",
                        }
                    ],
                    upstreamFixAvailable: true,
                },
            },
        });
        /** Updates the mute state of a finding. */
        await gapi.client.securitycenter.projects.sources.findings.setMute({
            name: "Test string",
        }, {
            mute: "Test string",
        });
        /** Updates the state of a finding. */
        await gapi.client.securitycenter.projects.sources.findings.setState({
            name: "Test string",
        }, {
            startTime: "Test string",
            state: "Test string",
        });
        /** Updates security marks. */
        await gapi.client.securitycenter.projects.sources.findings.updateSecurityMarks({
            name: "Test string",
            startTime: "Test string",
            updateMask: "Test string",
        }, {
            canonicalName: "Test string",
            marks: {
                A: "Test string"
            },
            name: "Test string",
        });
        /** Updates external system. This is for a given finding. */
        await gapi.client.securitycenter.projects.sources.findings.externalSystems.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            assignees: [
                "Test string"
            ],
            externalSystemUpdateTime: "Test string",
            externalUid: "Test string",
            name: "Test string",
            status: "Test string",
        });
    }
});
