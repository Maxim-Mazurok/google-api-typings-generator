/* This is stub file for gapi.client.securitycenter-v1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20240213

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://securitycenter.googleapis.com/$discovery/rest?version=v1'
  );
  /** now we can use gapi.client.securitycenter */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
    'https://www.googleapis.com/auth/cloud-platform',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Filters an organization's assets and groups them by their specified properties. */
    await gapi.client.securitycenter.folders.assets.group(
      {
        parent: 'Test string',
      },
      {
        compareDuration: 'Test string',
        filter: 'Test string',
        groupBy: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        readTime: 'Test string',
      }
    );
    /** Lists an organization's assets. */
    await gapi.client.securitycenter.folders.assets.list({
      compareDuration: 'Test string',
      fieldMask: 'Test string',
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
      readTime: 'Test string',
    });
    /** Updates security marks. */
    await gapi.client.securitycenter.folders.assets.updateSecurityMarks(
      {
        name: 'Test string',
        startTime: 'Test string',
        updateMask: 'Test string',
      },
      {
        canonicalName: 'Test string',
        marks: {
          A: 'Test string',
        },
        name: 'Test string',
      }
    );
    /** Creates a BigQuery export. */
    await gapi.client.securitycenter.folders.bigQueryExports.create(
      {
        bigQueryExportId: 'Test string',
        parent: 'Test string',
      },
      {
        createTime: 'Test string',
        dataset: 'Test string',
        description: 'Test string',
        filter: 'Test string',
        mostRecentEditor: 'Test string',
        name: 'Test string',
        principal: 'Test string',
        updateTime: 'Test string',
      }
    );
    /** Deletes an existing BigQuery export. */
    await gapi.client.securitycenter.folders.bigQueryExports.delete({
      name: 'Test string',
    });
    /** Gets a BigQuery export. */
    await gapi.client.securitycenter.folders.bigQueryExports.get({
      name: 'Test string',
    });
    /** Lists BigQuery exports. Note that when requesting BigQuery exports at a given level all exports under that level are also returned e.g. if requesting BigQuery exports under a folder, then all BigQuery exports immediately under the folder plus the ones created under the projects within the folder are returned. */
    await gapi.client.securitycenter.folders.bigQueryExports.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates a BigQuery export. */
    await gapi.client.securitycenter.folders.bigQueryExports.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        createTime: 'Test string',
        dataset: 'Test string',
        description: 'Test string',
        filter: 'Test string',
        mostRecentEditor: 'Test string',
        name: 'Test string',
        principal: 'Test string',
        updateTime: 'Test string',
      }
    );
    /** Validates the given Event Threat Detection custom module. */
    await gapi.client.securitycenter.folders.eventThreatDetectionSettings.validateCustomModule(
      {
        parent: 'Test string',
      },
      {
        rawText: 'Test string',
        type: 'Test string',
      }
    );
    /** Creates a resident Event Threat Detection custom module at the scope of the given Resource Manager parent, and also creates inherited custom modules for all descendants of the given parent. These modules are enabled by default. */
    await gapi.client.securitycenter.folders.eventThreatDetectionSettings.customModules.create(
      {
        parent: 'Test string',
      },
      {
        ancestorModule: 'Test string',
        config: {
          A: 42,
        },
        description: 'Test string',
        displayName: 'Test string',
        enablementState: 'Test string',
        lastEditor: 'Test string',
        name: 'Test string',
        type: 'Test string',
        updateTime: 'Test string',
      }
    );
    /** Deletes the specified Event Threat Detection custom module and all of its descendants in the Resource Manager hierarchy. This method is only supported for resident custom modules. */
    await gapi.client.securitycenter.folders.eventThreatDetectionSettings.customModules.delete(
      {
        name: 'Test string',
      }
    );
    /** Gets an Event Threat Detection custom module. */
    await gapi.client.securitycenter.folders.eventThreatDetectionSettings.customModules.get(
      {
        name: 'Test string',
      }
    );
    /** Lists all Event Threat Detection custom modules for the given Resource Manager parent. This includes resident modules defined at the scope of the parent along with modules inherited from ancestors. */
    await gapi.client.securitycenter.folders.eventThreatDetectionSettings.customModules.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Lists all resident Event Threat Detection custom modules under the given Resource Manager parent and its descendants. */
    await gapi.client.securitycenter.folders.eventThreatDetectionSettings.customModules.listDescendant(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Updates the Event Threat Detection custom module with the given name based on the given update mask. Updating the enablement state is supported for both resident and inherited modules (though resident modules cannot have an enablement state of "inherited"). Updating the display name or configuration of a module is supported for resident modules only. The type of a module cannot be changed. */
    await gapi.client.securitycenter.folders.eventThreatDetectionSettings.customModules.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        ancestorModule: 'Test string',
        config: {
          A: 42,
        },
        description: 'Test string',
        displayName: 'Test string',
        enablementState: 'Test string',
        lastEditor: 'Test string',
        name: 'Test string',
        type: 'Test string',
        updateTime: 'Test string',
      }
    );
    /** Gets an effective Event Threat Detection custom module at the given level. */
    await gapi.client.securitycenter.folders.eventThreatDetectionSettings.effectiveCustomModules.get(
      {
        name: 'Test string',
      }
    );
    /** Lists all effective Event Threat Detection custom modules for the given parent. This includes resident modules defined at the scope of the parent along with modules inherited from its ancestors. */
    await gapi.client.securitycenter.folders.eventThreatDetectionSettings.effectiveCustomModules.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Kicks off an LRO to bulk mute findings for a parent based on a filter. The parent can be either an organization, folder or project. The findings matched by the filter will be muted after the LRO is done. */
    await gapi.client.securitycenter.folders.findings.bulkMute(
      {
        parent: 'Test string',
      },
      {
        filter: 'Test string',
        muteAnnotation: 'Test string',
      }
    );
    /** Deletes an existing mute config. */
    await gapi.client.securitycenter.folders.locations.muteConfigs.delete({
      name: 'Test string',
    });
    /** Gets a mute config. */
    await gapi.client.securitycenter.folders.locations.muteConfigs.get({
      name: 'Test string',
    });
    /** Updates a mute config. */
    await gapi.client.securitycenter.folders.locations.muteConfigs.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        displayName: 'Test string',
        filter: 'Test string',
        mostRecentEditor: 'Test string',
        name: 'Test string',
        updateTime: 'Test string',
      }
    );
    /** Creates a mute config. */
    await gapi.client.securitycenter.folders.muteConfigs.create(
      {
        muteConfigId: 'Test string',
        parent: 'Test string',
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        displayName: 'Test string',
        filter: 'Test string',
        mostRecentEditor: 'Test string',
        name: 'Test string',
        updateTime: 'Test string',
      }
    );
    /** Deletes an existing mute config. */
    await gapi.client.securitycenter.folders.muteConfigs.delete({
      name: 'Test string',
    });
    /** Gets a mute config. */
    await gapi.client.securitycenter.folders.muteConfigs.get({
      name: 'Test string',
    });
    /** Lists mute configs. */
    await gapi.client.securitycenter.folders.muteConfigs.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates a mute config. */
    await gapi.client.securitycenter.folders.muteConfigs.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        displayName: 'Test string',
        filter: 'Test string',
        mostRecentEditor: 'Test string',
        name: 'Test string',
        updateTime: 'Test string',
      }
    );
    /** Creates a notification config. */
    await gapi.client.securitycenter.folders.notificationConfigs.create(
      {
        configId: 'Test string',
        parent: 'Test string',
      },
      {
        description: 'Test string',
        name: 'Test string',
        pubsubTopic: 'Test string',
        serviceAccount: 'Test string',
        streamingConfig: {
          filter: 'Test string',
        },
      }
    );
    /** Deletes a notification config. */
    await gapi.client.securitycenter.folders.notificationConfigs.delete({
      name: 'Test string',
    });
    /** Gets a notification config. */
    await gapi.client.securitycenter.folders.notificationConfigs.get({
      name: 'Test string',
    });
    /** Lists notification configs. */
    await gapi.client.securitycenter.folders.notificationConfigs.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates a notification config. The following update fields are allowed: description, pubsub_topic, streaming_config.filter */
    await gapi.client.securitycenter.folders.notificationConfigs.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        description: 'Test string',
        name: 'Test string',
        pubsubTopic: 'Test string',
        serviceAccount: 'Test string',
        streamingConfig: {
          filter: 'Test string',
        },
      }
    );
    /** Creates a resident SecurityHealthAnalyticsCustomModule at the scope of the given CRM parent, and also creates inherited SecurityHealthAnalyticsCustomModules for all CRM descendants of the given parent. These modules are enabled by default. */
    await gapi.client.securitycenter.folders.securityHealthAnalyticsSettings.customModules.create(
      {
        parent: 'Test string',
      },
      {
        ancestorModule: 'Test string',
        customConfig: {
          customOutput: {
            properties: [
              {
                name: 'Test string',
                valueExpression: {
                  description: 'Test string',
                  expression: 'Test string',
                  location: 'Test string',
                  title: 'Test string',
                },
              },
            ],
          },
          description: 'Test string',
          predicate: {
            description: 'Test string',
            expression: 'Test string',
            location: 'Test string',
            title: 'Test string',
          },
          recommendation: 'Test string',
          resourceSelector: {
            resourceTypes: ['Test string'],
          },
          severity: 'Test string',
        },
        displayName: 'Test string',
        enablementState: 'Test string',
        lastEditor: 'Test string',
        name: 'Test string',
        updateTime: 'Test string',
      }
    );
    /** Deletes the specified SecurityHealthAnalyticsCustomModule and all of its descendants in the CRM hierarchy. This method is only supported for resident custom modules. */
    await gapi.client.securitycenter.folders.securityHealthAnalyticsSettings.customModules.delete(
      {
        name: 'Test string',
      }
    );
    /** Retrieves a SecurityHealthAnalyticsCustomModule. */
    await gapi.client.securitycenter.folders.securityHealthAnalyticsSettings.customModules.get(
      {
        name: 'Test string',
      }
    );
    /** Returns a list of all SecurityHealthAnalyticsCustomModules for the given parent. This includes resident modules defined at the scope of the parent, and inherited modules, inherited from CRM ancestors. */
    await gapi.client.securitycenter.folders.securityHealthAnalyticsSettings.customModules.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Returns a list of all resident SecurityHealthAnalyticsCustomModules under the given CRM parent and all of the parent’s CRM descendants. */
    await gapi.client.securitycenter.folders.securityHealthAnalyticsSettings.customModules.listDescendant(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Updates the SecurityHealthAnalyticsCustomModule under the given name based on the given update mask. Updating the enablement state is supported on both resident and inherited modules (though resident modules cannot have an enablement state of "inherited"). Updating the display name and custom config of a module is supported on resident modules only. */
    await gapi.client.securitycenter.folders.securityHealthAnalyticsSettings.customModules.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        ancestorModule: 'Test string',
        customConfig: {
          customOutput: {
            properties: [
              {
                name: 'Test string',
                valueExpression: {
                  description: 'Test string',
                  expression: 'Test string',
                  location: 'Test string',
                  title: 'Test string',
                },
              },
            ],
          },
          description: 'Test string',
          predicate: {
            description: 'Test string',
            expression: 'Test string',
            location: 'Test string',
            title: 'Test string',
          },
          recommendation: 'Test string',
          resourceSelector: {
            resourceTypes: ['Test string'],
          },
          severity: 'Test string',
        },
        displayName: 'Test string',
        enablementState: 'Test string',
        lastEditor: 'Test string',
        name: 'Test string',
        updateTime: 'Test string',
      }
    );
    /** Simulates a given SecurityHealthAnalyticsCustomModule and Resource. */
    await gapi.client.securitycenter.folders.securityHealthAnalyticsSettings.customModules.simulate(
      {
        parent: 'Test string',
      },
      {
        customConfig: {
          customOutput: {
            properties: [
              {
                name: 'Test string',
                valueExpression: {
                  description: 'Test string',
                  expression: 'Test string',
                  location: 'Test string',
                  title: 'Test string',
                },
              },
            ],
          },
          description: 'Test string',
          predicate: {
            description: 'Test string',
            expression: 'Test string',
            location: 'Test string',
            title: 'Test string',
          },
          recommendation: 'Test string',
          resourceSelector: {
            resourceTypes: ['Test string'],
          },
          severity: 'Test string',
        },
        resource: {
          iamPolicyData: {
            auditConfigs: [
              {
                auditLogConfigs: [
                  {
                    exemptedMembers: ['Test string'],
                    logType: 'Test string',
                  },
                ],
                service: 'Test string',
              },
            ],
            bindings: [
              {
                condition: {
                  description: 'Test string',
                  expression: 'Test string',
                  location: 'Test string',
                  title: 'Test string',
                },
                members: ['Test string'],
                role: 'Test string',
              },
            ],
            etag: 'Test string',
            version: 42,
          },
          resourceData: {
            A: 42,
          },
          resourceType: 'Test string',
        },
      }
    );
    /** Retrieves an EffectiveSecurityHealthAnalyticsCustomModule. */
    await gapi.client.securitycenter.folders.securityHealthAnalyticsSettings.effectiveCustomModules.get(
      {
        name: 'Test string',
      }
    );
    /** Returns a list of all EffectiveSecurityHealthAnalyticsCustomModules for the given parent. This includes resident modules defined at the scope of the parent, and inherited modules, inherited from CRM ancestors. */
    await gapi.client.securitycenter.folders.securityHealthAnalyticsSettings.effectiveCustomModules.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Lists all sources belonging to an organization. */
    await gapi.client.securitycenter.folders.sources.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Filters an organization or source's findings and groups them by their specified properties. To group across all sources provide a `-` as the source id. Example: /v1/organizations/{organization_id}/sources/-/findings, /v1/folders/{folder_id}/sources/-/findings, /v1/projects/{project_id}/sources/-/findings */
    await gapi.client.securitycenter.folders.sources.findings.group(
      {
        parent: 'Test string',
      },
      {
        compareDuration: 'Test string',
        filter: 'Test string',
        groupBy: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        readTime: 'Test string',
      }
    );
    /** Lists an organization or source's findings. To list across all sources provide a `-` as the source id. Example: /v1/organizations/{organization_id}/sources/-/findings */
    await gapi.client.securitycenter.folders.sources.findings.list({
      compareDuration: 'Test string',
      fieldMask: 'Test string',
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
      readTime: 'Test string',
    });
    /** Creates or updates a finding. The corresponding source must exist for a finding creation to succeed. */
    await gapi.client.securitycenter.folders.sources.findings.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        access: {
          callerIp: 'Test string',
          callerIpGeo: {
            regionCode: 'Test string',
          },
          methodName: 'Test string',
          principalEmail: 'Test string',
          principalSubject: 'Test string',
          serviceAccountDelegationInfo: [
            {
              principalEmail: 'Test string',
              principalSubject: 'Test string',
            },
          ],
          serviceAccountKeyName: 'Test string',
          serviceName: 'Test string',
          userAgent: 'Test string',
          userAgentFamily: 'Test string',
          userName: 'Test string',
        },
        application: {
          baseUri: 'Test string',
          fullUri: 'Test string',
        },
        attackExposure: {
          attackExposureResult: 'Test string',
          exposedHighValueResourcesCount: 42,
          exposedLowValueResourcesCount: 42,
          exposedMediumValueResourcesCount: 42,
          latestCalculationTime: 'Test string',
          score: 42,
          state: 'Test string',
        },
        backupDisasterRecovery: {
          appliance: 'Test string',
          applications: ['Test string'],
          backupCreateTime: 'Test string',
          backupTemplate: 'Test string',
          backupType: 'Test string',
          host: 'Test string',
          policies: ['Test string'],
          policyOptions: ['Test string'],
          profile: 'Test string',
          storagePool: 'Test string',
        },
        canonicalName: 'Test string',
        category: 'Test string',
        cloudDlpDataProfile: {
          dataProfile: 'Test string',
          parentType: 'Test string',
        },
        cloudDlpInspection: {
          fullScan: true,
          infoType: 'Test string',
          infoTypeCount: 'Test string',
          inspectJob: 'Test string',
        },
        compliances: [
          {
            ids: ['Test string'],
            standard: 'Test string',
            version: 'Test string',
          },
        ],
        connections: [
          {
            destinationIp: 'Test string',
            destinationPort: 42,
            protocol: 'Test string',
            sourceIp: 'Test string',
            sourcePort: 42,
          },
        ],
        contacts: {
          A: {
            contacts: [
              {
                email: 'Test string',
              },
            ],
          },
        },
        containers: [
          {
            createTime: 'Test string',
            imageId: 'Test string',
            labels: [
              {
                name: 'Test string',
                value: 'Test string',
              },
            ],
            name: 'Test string',
            uri: 'Test string',
          },
        ],
        createTime: 'Test string',
        database: {
          displayName: 'Test string',
          grantees: ['Test string'],
          name: 'Test string',
          query: 'Test string',
          userName: 'Test string',
          version: 'Test string',
        },
        description: 'Test string',
        eventTime: 'Test string',
        exfiltration: {
          sources: [
            {
              components: ['Test string'],
              name: 'Test string',
            },
          ],
          targets: [
            {
              components: ['Test string'],
              name: 'Test string',
            },
          ],
          totalExfiltratedBytes: 'Test string',
        },
        externalSystems: {
          A: {
            assignees: ['Test string'],
            casePriority: 'Test string',
            caseSla: 'Test string',
            caseUri: 'Test string',
            externalSystemUpdateTime: 'Test string',
            externalUid: 'Test string',
            name: 'Test string',
            status: 'Test string',
            ticketInfo: {
              assignee: 'Test string',
              description: 'Test string',
              id: 'Test string',
              status: 'Test string',
              updateTime: 'Test string',
              uri: 'Test string',
            },
          },
        },
        externalUri: 'Test string',
        files: [
          {
            contents: 'Test string',
            diskPath: {
              partitionUuid: 'Test string',
              relativePath: 'Test string',
            },
            hashedSize: 'Test string',
            partiallyHashed: true,
            path: 'Test string',
            sha256: 'Test string',
            size: 'Test string',
          },
        ],
        findingClass: 'Test string',
        iamBindings: [
          {
            action: 'Test string',
            member: 'Test string',
            role: 'Test string',
          },
        ],
        indicator: {
          domains: ['Test string'],
          ipAddresses: ['Test string'],
          signatures: [
            {
              memoryHashSignature: {
                binaryFamily: 'Test string',
                detections: [
                  {
                    binary: 'Test string',
                    percentPagesMatched: 42,
                  },
                ],
              },
              signatureType: 'Test string',
              yaraRuleSignature: {
                yaraRule: 'Test string',
              },
            },
          ],
          uris: ['Test string'],
        },
        kernelRootkit: {
          name: 'Test string',
          unexpectedCodeModification: true,
          unexpectedFtraceHandler: true,
          unexpectedInterruptHandler: true,
          unexpectedKernelCodePages: true,
          unexpectedKprobeHandler: true,
          unexpectedProcessesInRunqueue: true,
          unexpectedReadOnlyDataModification: true,
          unexpectedSystemCallHandler: true,
        },
        kubernetes: {
          accessReviews: [
            {
              group: 'Test string',
              name: 'Test string',
              ns: 'Test string',
              resource: 'Test string',
              subresource: 'Test string',
              verb: 'Test string',
              version: 'Test string',
            },
          ],
          bindings: [
            {
              name: 'Test string',
              ns: 'Test string',
              role: {
                kind: 'Test string',
                name: 'Test string',
                ns: 'Test string',
              },
              subjects: [
                {
                  kind: 'Test string',
                  name: 'Test string',
                  ns: 'Test string',
                },
              ],
            },
          ],
          nodePools: [
            {
              name: 'Test string',
              nodes: [
                {
                  name: 'Test string',
                },
              ],
            },
          ],
          nodes: [
            {
              name: 'Test string',
            },
          ],
          objects: [
            {
              containers: [
                {
                  createTime: 'Test string',
                  imageId: 'Test string',
                  labels: [
                    {
                      name: 'Test string',
                      value: 'Test string',
                    },
                  ],
                  name: 'Test string',
                  uri: 'Test string',
                },
              ],
              group: 'Test string',
              kind: 'Test string',
              name: 'Test string',
              ns: 'Test string',
            },
          ],
          pods: [
            {
              containers: [
                {
                  createTime: 'Test string',
                  imageId: 'Test string',
                  labels: [
                    {
                      name: 'Test string',
                      value: 'Test string',
                    },
                  ],
                  name: 'Test string',
                  uri: 'Test string',
                },
              ],
              labels: [
                {
                  name: 'Test string',
                  value: 'Test string',
                },
              ],
              name: 'Test string',
              ns: 'Test string',
            },
          ],
          roles: [
            {
              kind: 'Test string',
              name: 'Test string',
              ns: 'Test string',
            },
          ],
        },
        loadBalancers: [
          {
            name: 'Test string',
          },
        ],
        logEntries: [
          {
            cloudLoggingEntry: {
              insertId: 'Test string',
              logId: 'Test string',
              resourceContainer: 'Test string',
              timestamp: 'Test string',
            },
          },
        ],
        mitreAttack: {
          additionalTactics: ['Test string'],
          additionalTechniques: ['Test string'],
          primaryTactic: 'Test string',
          primaryTechniques: ['Test string'],
          version: 'Test string',
        },
        moduleName: 'Test string',
        mute: 'Test string',
        muteInitiator: 'Test string',
        muteUpdateTime: 'Test string',
        name: 'Test string',
        nextSteps: 'Test string',
        orgPolicies: [
          {
            name: 'Test string',
          },
        ],
        parent: 'Test string',
        parentDisplayName: 'Test string',
        processes: [
          {
            args: ['Test string'],
            argumentsTruncated: true,
            binary: {
              contents: 'Test string',
              diskPath: {
                partitionUuid: 'Test string',
                relativePath: 'Test string',
              },
              hashedSize: 'Test string',
              partiallyHashed: true,
              path: 'Test string',
              sha256: 'Test string',
              size: 'Test string',
            },
            envVariables: [
              {
                name: 'Test string',
                val: 'Test string',
              },
            ],
            envVariablesTruncated: true,
            libraries: [
              {
                contents: 'Test string',
                diskPath: {
                  partitionUuid: 'Test string',
                  relativePath: 'Test string',
                },
                hashedSize: 'Test string',
                partiallyHashed: true,
                path: 'Test string',
                sha256: 'Test string',
                size: 'Test string',
              },
            ],
            name: 'Test string',
            parentPid: 'Test string',
            pid: 'Test string',
            script: {
              contents: 'Test string',
              diskPath: {
                partitionUuid: 'Test string',
                relativePath: 'Test string',
              },
              hashedSize: 'Test string',
              partiallyHashed: true,
              path: 'Test string',
              sha256: 'Test string',
              size: 'Test string',
            },
          },
        ],
        resourceName: 'Test string',
        securityMarks: {
          canonicalName: 'Test string',
          marks: {
            A: 'Test string',
          },
          name: 'Test string',
        },
        securityPosture: {
          changedPolicy: 'Test string',
          name: 'Test string',
          policy: 'Test string',
          policyDriftDetails: [
            {
              detectedValue: 'Test string',
              expectedValue: 'Test string',
              field: 'Test string',
            },
          ],
          policySet: 'Test string',
          postureDeployment: 'Test string',
          postureDeploymentResource: 'Test string',
          revisionId: 'Test string',
        },
        severity: 'Test string',
        sourceProperties: {
          A: 42,
        },
        state: 'Test string',
        vulnerability: {
          cve: {
            cvssv3: {
              attackComplexity: 'Test string',
              attackVector: 'Test string',
              availabilityImpact: 'Test string',
              baseScore: 42,
              confidentialityImpact: 'Test string',
              integrityImpact: 'Test string',
              privilegesRequired: 'Test string',
              scope: 'Test string',
              userInteraction: 'Test string',
            },
            exploitationActivity: 'Test string',
            id: 'Test string',
            impact: 'Test string',
            observedInTheWild: true,
            references: [
              {
                source: 'Test string',
                uri: 'Test string',
              },
            ],
            upstreamFixAvailable: true,
            zeroDay: true,
          },
          fixedPackage: {
            cpeUri: 'Test string',
            packageName: 'Test string',
            packageType: 'Test string',
            packageVersion: 'Test string',
          },
          offendingPackage: {
            cpeUri: 'Test string',
            packageName: 'Test string',
            packageType: 'Test string',
            packageVersion: 'Test string',
          },
          securityBulletin: {
            bulletinId: 'Test string',
            submissionTime: 'Test string',
            suggestedUpgradeVersion: 'Test string',
          },
        },
      }
    );
    /** Updates the mute state of a finding. */
    await gapi.client.securitycenter.folders.sources.findings.setMute(
      {
        name: 'Test string',
      },
      {
        mute: 'Test string',
      }
    );
    /** Updates the state of a finding. */
    await gapi.client.securitycenter.folders.sources.findings.setState(
      {
        name: 'Test string',
      },
      {
        startTime: 'Test string',
        state: 'Test string',
      }
    );
    /** Updates security marks. */
    await gapi.client.securitycenter.folders.sources.findings.updateSecurityMarks(
      {
        name: 'Test string',
        startTime: 'Test string',
        updateMask: 'Test string',
      },
      {
        canonicalName: 'Test string',
        marks: {
          A: 'Test string',
        },
        name: 'Test string',
      }
    );
    /** Updates external system. This is for a given finding. */
    await gapi.client.securitycenter.folders.sources.findings.externalSystems.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        assignees: ['Test string'],
        casePriority: 'Test string',
        caseSla: 'Test string',
        caseUri: 'Test string',
        externalSystemUpdateTime: 'Test string',
        externalUid: 'Test string',
        name: 'Test string',
        status: 'Test string',
        ticketInfo: {
          assignee: 'Test string',
          description: 'Test string',
          id: 'Test string',
          status: 'Test string',
          updateTime: 'Test string',
          uri: 'Test string',
        },
      }
    );
    /** Gets the settings for an organization. */
    await gapi.client.securitycenter.organizations.getOrganizationSettings({
      name: 'Test string',
    });
    /** Updates an organization's settings. */
    await gapi.client.securitycenter.organizations.updateOrganizationSettings(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        assetDiscoveryConfig: {
          folderIds: ['Test string'],
          inclusionMode: 'Test string',
          projectIds: ['Test string'],
        },
        enableAssetDiscovery: true,
        name: 'Test string',
      }
    );
    /** Filters an organization's assets and groups them by their specified properties. */
    await gapi.client.securitycenter.organizations.assets.group(
      {
        parent: 'Test string',
      },
      {
        compareDuration: 'Test string',
        filter: 'Test string',
        groupBy: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        readTime: 'Test string',
      }
    );
    /** Lists an organization's assets. */
    await gapi.client.securitycenter.organizations.assets.list({
      compareDuration: 'Test string',
      fieldMask: 'Test string',
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
      readTime: 'Test string',
    });
    /** Runs asset discovery. The discovery is tracked with a long-running operation. This API can only be called with limited frequency for an organization. If it is called too frequently the caller will receive a TOO_MANY_REQUESTS error. */
    await gapi.client.securitycenter.organizations.assets.runDiscovery(
      {
        parent: 'Test string',
      },
      {}
    );
    /** Updates security marks. */
    await gapi.client.securitycenter.organizations.assets.updateSecurityMarks(
      {
        name: 'Test string',
        startTime: 'Test string',
        updateMask: 'Test string',
      },
      {
        canonicalName: 'Test string',
        marks: {
          A: 'Test string',
        },
        name: 'Test string',
      }
    );
    /** Creates a BigQuery export. */
    await gapi.client.securitycenter.organizations.bigQueryExports.create(
      {
        bigQueryExportId: 'Test string',
        parent: 'Test string',
      },
      {
        createTime: 'Test string',
        dataset: 'Test string',
        description: 'Test string',
        filter: 'Test string',
        mostRecentEditor: 'Test string',
        name: 'Test string',
        principal: 'Test string',
        updateTime: 'Test string',
      }
    );
    /** Deletes an existing BigQuery export. */
    await gapi.client.securitycenter.organizations.bigQueryExports.delete({
      name: 'Test string',
    });
    /** Gets a BigQuery export. */
    await gapi.client.securitycenter.organizations.bigQueryExports.get({
      name: 'Test string',
    });
    /** Lists BigQuery exports. Note that when requesting BigQuery exports at a given level all exports under that level are also returned e.g. if requesting BigQuery exports under a folder, then all BigQuery exports immediately under the folder plus the ones created under the projects within the folder are returned. */
    await gapi.client.securitycenter.organizations.bigQueryExports.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates a BigQuery export. */
    await gapi.client.securitycenter.organizations.bigQueryExports.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        createTime: 'Test string',
        dataset: 'Test string',
        description: 'Test string',
        filter: 'Test string',
        mostRecentEditor: 'Test string',
        name: 'Test string',
        principal: 'Test string',
        updateTime: 'Test string',
      }
    );
    /** Validates the given Event Threat Detection custom module. */
    await gapi.client.securitycenter.organizations.eventThreatDetectionSettings.validateCustomModule(
      {
        parent: 'Test string',
      },
      {
        rawText: 'Test string',
        type: 'Test string',
      }
    );
    /** Creates a resident Event Threat Detection custom module at the scope of the given Resource Manager parent, and also creates inherited custom modules for all descendants of the given parent. These modules are enabled by default. */
    await gapi.client.securitycenter.organizations.eventThreatDetectionSettings.customModules.create(
      {
        parent: 'Test string',
      },
      {
        ancestorModule: 'Test string',
        config: {
          A: 42,
        },
        description: 'Test string',
        displayName: 'Test string',
        enablementState: 'Test string',
        lastEditor: 'Test string',
        name: 'Test string',
        type: 'Test string',
        updateTime: 'Test string',
      }
    );
    /** Deletes the specified Event Threat Detection custom module and all of its descendants in the Resource Manager hierarchy. This method is only supported for resident custom modules. */
    await gapi.client.securitycenter.organizations.eventThreatDetectionSettings.customModules.delete(
      {
        name: 'Test string',
      }
    );
    /** Gets an Event Threat Detection custom module. */
    await gapi.client.securitycenter.organizations.eventThreatDetectionSettings.customModules.get(
      {
        name: 'Test string',
      }
    );
    /** Lists all Event Threat Detection custom modules for the given Resource Manager parent. This includes resident modules defined at the scope of the parent along with modules inherited from ancestors. */
    await gapi.client.securitycenter.organizations.eventThreatDetectionSettings.customModules.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Lists all resident Event Threat Detection custom modules under the given Resource Manager parent and its descendants. */
    await gapi.client.securitycenter.organizations.eventThreatDetectionSettings.customModules.listDescendant(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Updates the Event Threat Detection custom module with the given name based on the given update mask. Updating the enablement state is supported for both resident and inherited modules (though resident modules cannot have an enablement state of "inherited"). Updating the display name or configuration of a module is supported for resident modules only. The type of a module cannot be changed. */
    await gapi.client.securitycenter.organizations.eventThreatDetectionSettings.customModules.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        ancestorModule: 'Test string',
        config: {
          A: 42,
        },
        description: 'Test string',
        displayName: 'Test string',
        enablementState: 'Test string',
        lastEditor: 'Test string',
        name: 'Test string',
        type: 'Test string',
        updateTime: 'Test string',
      }
    );
    /** Gets an effective Event Threat Detection custom module at the given level. */
    await gapi.client.securitycenter.organizations.eventThreatDetectionSettings.effectiveCustomModules.get(
      {
        name: 'Test string',
      }
    );
    /** Lists all effective Event Threat Detection custom modules for the given parent. This includes resident modules defined at the scope of the parent along with modules inherited from its ancestors. */
    await gapi.client.securitycenter.organizations.eventThreatDetectionSettings.effectiveCustomModules.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Kicks off an LRO to bulk mute findings for a parent based on a filter. The parent can be either an organization, folder or project. The findings matched by the filter will be muted after the LRO is done. */
    await gapi.client.securitycenter.organizations.findings.bulkMute(
      {
        parent: 'Test string',
      },
      {
        filter: 'Test string',
        muteAnnotation: 'Test string',
      }
    );
    /** Deletes an existing mute config. */
    await gapi.client.securitycenter.organizations.locations.muteConfigs.delete(
      {
        name: 'Test string',
      }
    );
    /** Gets a mute config. */
    await gapi.client.securitycenter.organizations.locations.muteConfigs.get({
      name: 'Test string',
    });
    /** Updates a mute config. */
    await gapi.client.securitycenter.organizations.locations.muteConfigs.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        displayName: 'Test string',
        filter: 'Test string',
        mostRecentEditor: 'Test string',
        name: 'Test string',
        updateTime: 'Test string',
      }
    );
    /** Creates a mute config. */
    await gapi.client.securitycenter.organizations.muteConfigs.create(
      {
        muteConfigId: 'Test string',
        parent: 'Test string',
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        displayName: 'Test string',
        filter: 'Test string',
        mostRecentEditor: 'Test string',
        name: 'Test string',
        updateTime: 'Test string',
      }
    );
    /** Deletes an existing mute config. */
    await gapi.client.securitycenter.organizations.muteConfigs.delete({
      name: 'Test string',
    });
    /** Gets a mute config. */
    await gapi.client.securitycenter.organizations.muteConfigs.get({
      name: 'Test string',
    });
    /** Lists mute configs. */
    await gapi.client.securitycenter.organizations.muteConfigs.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates a mute config. */
    await gapi.client.securitycenter.organizations.muteConfigs.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        displayName: 'Test string',
        filter: 'Test string',
        mostRecentEditor: 'Test string',
        name: 'Test string',
        updateTime: 'Test string',
      }
    );
    /** Creates a notification config. */
    await gapi.client.securitycenter.organizations.notificationConfigs.create(
      {
        configId: 'Test string',
        parent: 'Test string',
      },
      {
        description: 'Test string',
        name: 'Test string',
        pubsubTopic: 'Test string',
        serviceAccount: 'Test string',
        streamingConfig: {
          filter: 'Test string',
        },
      }
    );
    /** Deletes a notification config. */
    await gapi.client.securitycenter.organizations.notificationConfigs.delete({
      name: 'Test string',
    });
    /** Gets a notification config. */
    await gapi.client.securitycenter.organizations.notificationConfigs.get({
      name: 'Test string',
    });
    /** Lists notification configs. */
    await gapi.client.securitycenter.organizations.notificationConfigs.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates a notification config. The following update fields are allowed: description, pubsub_topic, streaming_config.filter */
    await gapi.client.securitycenter.organizations.notificationConfigs.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        description: 'Test string',
        name: 'Test string',
        pubsubTopic: 'Test string',
        serviceAccount: 'Test string',
        streamingConfig: {
          filter: 'Test string',
        },
      }
    );
    /** Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`. */
    await gapi.client.securitycenter.organizations.operations.cancel({
      name: 'Test string',
    });
    /** Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. */
    await gapi.client.securitycenter.organizations.operations.delete({
      name: 'Test string',
    });
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.securitycenter.organizations.operations.get({
      name: 'Test string',
    });
    /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
    await gapi.client.securitycenter.organizations.operations.list({
      filter: 'Test string',
      name: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Creates a ResourceValueConfig for an organization. Maps user's tags to difference resource values for use by the attack path simulation. */
    await gapi.client.securitycenter.organizations.resourceValueConfigs.batchCreate(
      {
        parent: 'Test string',
      },
      {
        requests: [
          {
            parent: 'Test string',
            resourceValueConfig: {
              createTime: 'Test string',
              description: 'Test string',
              name: 'Test string',
              resourceLabelsSelector: {
                A: 'Test string',
              },
              resourceType: 'Test string',
              resourceValue: 'Test string',
              scope: 'Test string',
              sensitiveDataProtectionMapping: {
                highSensitivityMapping: 'Test string',
                mediumSensitivityMapping: 'Test string',
              },
              tagValues: ['Test string'],
              updateTime: 'Test string',
            },
          },
        ],
      }
    );
    /** Deletes a ResourceValueConfig. */
    await gapi.client.securitycenter.organizations.resourceValueConfigs.delete({
      name: 'Test string',
    });
    /** Gets a ResourceValueConfig. */
    await gapi.client.securitycenter.organizations.resourceValueConfigs.get({
      name: 'Test string',
    });
    /** Lists all ResourceValueConfigs. */
    await gapi.client.securitycenter.organizations.resourceValueConfigs.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates an existing ResourceValueConfigs with new rules. */
    await gapi.client.securitycenter.organizations.resourceValueConfigs.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        name: 'Test string',
        resourceLabelsSelector: {
          A: 'Test string',
        },
        resourceType: 'Test string',
        resourceValue: 'Test string',
        scope: 'Test string',
        sensitiveDataProtectionMapping: {
          highSensitivityMapping: 'Test string',
          mediumSensitivityMapping: 'Test string',
        },
        tagValues: ['Test string'],
        updateTime: 'Test string',
      }
    );
    /** Creates a resident SecurityHealthAnalyticsCustomModule at the scope of the given CRM parent, and also creates inherited SecurityHealthAnalyticsCustomModules for all CRM descendants of the given parent. These modules are enabled by default. */
    await gapi.client.securitycenter.organizations.securityHealthAnalyticsSettings.customModules.create(
      {
        parent: 'Test string',
      },
      {
        ancestorModule: 'Test string',
        customConfig: {
          customOutput: {
            properties: [
              {
                name: 'Test string',
                valueExpression: {
                  description: 'Test string',
                  expression: 'Test string',
                  location: 'Test string',
                  title: 'Test string',
                },
              },
            ],
          },
          description: 'Test string',
          predicate: {
            description: 'Test string',
            expression: 'Test string',
            location: 'Test string',
            title: 'Test string',
          },
          recommendation: 'Test string',
          resourceSelector: {
            resourceTypes: ['Test string'],
          },
          severity: 'Test string',
        },
        displayName: 'Test string',
        enablementState: 'Test string',
        lastEditor: 'Test string',
        name: 'Test string',
        updateTime: 'Test string',
      }
    );
    /** Deletes the specified SecurityHealthAnalyticsCustomModule and all of its descendants in the CRM hierarchy. This method is only supported for resident custom modules. */
    await gapi.client.securitycenter.organizations.securityHealthAnalyticsSettings.customModules.delete(
      {
        name: 'Test string',
      }
    );
    /** Retrieves a SecurityHealthAnalyticsCustomModule. */
    await gapi.client.securitycenter.organizations.securityHealthAnalyticsSettings.customModules.get(
      {
        name: 'Test string',
      }
    );
    /** Returns a list of all SecurityHealthAnalyticsCustomModules for the given parent. This includes resident modules defined at the scope of the parent, and inherited modules, inherited from CRM ancestors. */
    await gapi.client.securitycenter.organizations.securityHealthAnalyticsSettings.customModules.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Returns a list of all resident SecurityHealthAnalyticsCustomModules under the given CRM parent and all of the parent’s CRM descendants. */
    await gapi.client.securitycenter.organizations.securityHealthAnalyticsSettings.customModules.listDescendant(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Updates the SecurityHealthAnalyticsCustomModule under the given name based on the given update mask. Updating the enablement state is supported on both resident and inherited modules (though resident modules cannot have an enablement state of "inherited"). Updating the display name and custom config of a module is supported on resident modules only. */
    await gapi.client.securitycenter.organizations.securityHealthAnalyticsSettings.customModules.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        ancestorModule: 'Test string',
        customConfig: {
          customOutput: {
            properties: [
              {
                name: 'Test string',
                valueExpression: {
                  description: 'Test string',
                  expression: 'Test string',
                  location: 'Test string',
                  title: 'Test string',
                },
              },
            ],
          },
          description: 'Test string',
          predicate: {
            description: 'Test string',
            expression: 'Test string',
            location: 'Test string',
            title: 'Test string',
          },
          recommendation: 'Test string',
          resourceSelector: {
            resourceTypes: ['Test string'],
          },
          severity: 'Test string',
        },
        displayName: 'Test string',
        enablementState: 'Test string',
        lastEditor: 'Test string',
        name: 'Test string',
        updateTime: 'Test string',
      }
    );
    /** Simulates a given SecurityHealthAnalyticsCustomModule and Resource. */
    await gapi.client.securitycenter.organizations.securityHealthAnalyticsSettings.customModules.simulate(
      {
        parent: 'Test string',
      },
      {
        customConfig: {
          customOutput: {
            properties: [
              {
                name: 'Test string',
                valueExpression: {
                  description: 'Test string',
                  expression: 'Test string',
                  location: 'Test string',
                  title: 'Test string',
                },
              },
            ],
          },
          description: 'Test string',
          predicate: {
            description: 'Test string',
            expression: 'Test string',
            location: 'Test string',
            title: 'Test string',
          },
          recommendation: 'Test string',
          resourceSelector: {
            resourceTypes: ['Test string'],
          },
          severity: 'Test string',
        },
        resource: {
          iamPolicyData: {
            auditConfigs: [
              {
                auditLogConfigs: [
                  {
                    exemptedMembers: ['Test string'],
                    logType: 'Test string',
                  },
                ],
                service: 'Test string',
              },
            ],
            bindings: [
              {
                condition: {
                  description: 'Test string',
                  expression: 'Test string',
                  location: 'Test string',
                  title: 'Test string',
                },
                members: ['Test string'],
                role: 'Test string',
              },
            ],
            etag: 'Test string',
            version: 42,
          },
          resourceData: {
            A: 42,
          },
          resourceType: 'Test string',
        },
      }
    );
    /** Retrieves an EffectiveSecurityHealthAnalyticsCustomModule. */
    await gapi.client.securitycenter.organizations.securityHealthAnalyticsSettings.effectiveCustomModules.get(
      {
        name: 'Test string',
      }
    );
    /** Returns a list of all EffectiveSecurityHealthAnalyticsCustomModules for the given parent. This includes resident modules defined at the scope of the parent, and inherited modules, inherited from CRM ancestors. */
    await gapi.client.securitycenter.organizations.securityHealthAnalyticsSettings.effectiveCustomModules.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Get the simulation by name or the latest simulation for the given organization. */
    await gapi.client.securitycenter.organizations.simulations.get({
      name: 'Test string',
    });
    /** Lists the attack paths for a set of simulation results or valued resources and filter. */
    await gapi.client.securitycenter.organizations.simulations.attackExposureResults.attackPaths.list(
      {
        filter: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Lists the valued resources for a set of simulation results and filter. */
    await gapi.client.securitycenter.organizations.simulations.attackExposureResults.valuedResources.list(
      {
        filter: 'Test string',
        orderBy: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Lists the attack paths for a set of simulation results or valued resources and filter. */
    await gapi.client.securitycenter.organizations.simulations.attackPaths.list(
      {
        filter: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Get the valued resource by name */
    await gapi.client.securitycenter.organizations.simulations.valuedResources.get(
      {
        name: 'Test string',
      }
    );
    /** Lists the valued resources for a set of simulation results and filter. */
    await gapi.client.securitycenter.organizations.simulations.valuedResources.list(
      {
        filter: 'Test string',
        orderBy: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Lists the attack paths for a set of simulation results or valued resources and filter. */
    await gapi.client.securitycenter.organizations.simulations.valuedResources.attackPaths.list(
      {
        filter: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Creates a source. */
    await gapi.client.securitycenter.organizations.sources.create(
      {
        parent: 'Test string',
      },
      {
        canonicalName: 'Test string',
        description: 'Test string',
        displayName: 'Test string',
        name: 'Test string',
      }
    );
    /** Gets a source. */
    await gapi.client.securitycenter.organizations.sources.get({
      name: 'Test string',
    });
    /** Gets the access control policy on the specified Source. */
    await gapi.client.securitycenter.organizations.sources.getIamPolicy(
      {
        resource: 'Test string',
      },
      {
        options: {
          requestedPolicyVersion: 42,
        },
      }
    );
    /** Lists all sources belonging to an organization. */
    await gapi.client.securitycenter.organizations.sources.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates a source. */
    await gapi.client.securitycenter.organizations.sources.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        canonicalName: 'Test string',
        description: 'Test string',
        displayName: 'Test string',
        name: 'Test string',
      }
    );
    /** Sets the access control policy on the specified Source. */
    await gapi.client.securitycenter.organizations.sources.setIamPolicy(
      {
        resource: 'Test string',
      },
      {
        policy: {
          auditConfigs: [
            {
              auditLogConfigs: [
                {
                  exemptedMembers: ['Test string'],
                  logType: 'Test string',
                },
              ],
              service: 'Test string',
            },
          ],
          bindings: [
            {
              condition: {
                description: 'Test string',
                expression: 'Test string',
                location: 'Test string',
                title: 'Test string',
              },
              members: ['Test string'],
              role: 'Test string',
            },
          ],
          etag: 'Test string',
          version: 42,
        },
        updateMask: 'Test string',
      }
    );
    /** Returns the permissions that a caller has on the specified source. */
    await gapi.client.securitycenter.organizations.sources.testIamPermissions(
      {
        resource: 'Test string',
      },
      {
        permissions: ['Test string'],
      }
    );
    /** Creates a finding. The corresponding source must exist for finding creation to succeed. */
    await gapi.client.securitycenter.organizations.sources.findings.create(
      {
        findingId: 'Test string',
        parent: 'Test string',
      },
      {
        access: {
          callerIp: 'Test string',
          callerIpGeo: {
            regionCode: 'Test string',
          },
          methodName: 'Test string',
          principalEmail: 'Test string',
          principalSubject: 'Test string',
          serviceAccountDelegationInfo: [
            {
              principalEmail: 'Test string',
              principalSubject: 'Test string',
            },
          ],
          serviceAccountKeyName: 'Test string',
          serviceName: 'Test string',
          userAgent: 'Test string',
          userAgentFamily: 'Test string',
          userName: 'Test string',
        },
        application: {
          baseUri: 'Test string',
          fullUri: 'Test string',
        },
        attackExposure: {
          attackExposureResult: 'Test string',
          exposedHighValueResourcesCount: 42,
          exposedLowValueResourcesCount: 42,
          exposedMediumValueResourcesCount: 42,
          latestCalculationTime: 'Test string',
          score: 42,
          state: 'Test string',
        },
        backupDisasterRecovery: {
          appliance: 'Test string',
          applications: ['Test string'],
          backupCreateTime: 'Test string',
          backupTemplate: 'Test string',
          backupType: 'Test string',
          host: 'Test string',
          policies: ['Test string'],
          policyOptions: ['Test string'],
          profile: 'Test string',
          storagePool: 'Test string',
        },
        canonicalName: 'Test string',
        category: 'Test string',
        cloudDlpDataProfile: {
          dataProfile: 'Test string',
          parentType: 'Test string',
        },
        cloudDlpInspection: {
          fullScan: true,
          infoType: 'Test string',
          infoTypeCount: 'Test string',
          inspectJob: 'Test string',
        },
        compliances: [
          {
            ids: ['Test string'],
            standard: 'Test string',
            version: 'Test string',
          },
        ],
        connections: [
          {
            destinationIp: 'Test string',
            destinationPort: 42,
            protocol: 'Test string',
            sourceIp: 'Test string',
            sourcePort: 42,
          },
        ],
        contacts: {
          A: {
            contacts: [
              {
                email: 'Test string',
              },
            ],
          },
        },
        containers: [
          {
            createTime: 'Test string',
            imageId: 'Test string',
            labels: [
              {
                name: 'Test string',
                value: 'Test string',
              },
            ],
            name: 'Test string',
            uri: 'Test string',
          },
        ],
        createTime: 'Test string',
        database: {
          displayName: 'Test string',
          grantees: ['Test string'],
          name: 'Test string',
          query: 'Test string',
          userName: 'Test string',
          version: 'Test string',
        },
        description: 'Test string',
        eventTime: 'Test string',
        exfiltration: {
          sources: [
            {
              components: ['Test string'],
              name: 'Test string',
            },
          ],
          targets: [
            {
              components: ['Test string'],
              name: 'Test string',
            },
          ],
          totalExfiltratedBytes: 'Test string',
        },
        externalSystems: {
          A: {
            assignees: ['Test string'],
            casePriority: 'Test string',
            caseSla: 'Test string',
            caseUri: 'Test string',
            externalSystemUpdateTime: 'Test string',
            externalUid: 'Test string',
            name: 'Test string',
            status: 'Test string',
            ticketInfo: {
              assignee: 'Test string',
              description: 'Test string',
              id: 'Test string',
              status: 'Test string',
              updateTime: 'Test string',
              uri: 'Test string',
            },
          },
        },
        externalUri: 'Test string',
        files: [
          {
            contents: 'Test string',
            diskPath: {
              partitionUuid: 'Test string',
              relativePath: 'Test string',
            },
            hashedSize: 'Test string',
            partiallyHashed: true,
            path: 'Test string',
            sha256: 'Test string',
            size: 'Test string',
          },
        ],
        findingClass: 'Test string',
        iamBindings: [
          {
            action: 'Test string',
            member: 'Test string',
            role: 'Test string',
          },
        ],
        indicator: {
          domains: ['Test string'],
          ipAddresses: ['Test string'],
          signatures: [
            {
              memoryHashSignature: {
                binaryFamily: 'Test string',
                detections: [
                  {
                    binary: 'Test string',
                    percentPagesMatched: 42,
                  },
                ],
              },
              signatureType: 'Test string',
              yaraRuleSignature: {
                yaraRule: 'Test string',
              },
            },
          ],
          uris: ['Test string'],
        },
        kernelRootkit: {
          name: 'Test string',
          unexpectedCodeModification: true,
          unexpectedFtraceHandler: true,
          unexpectedInterruptHandler: true,
          unexpectedKernelCodePages: true,
          unexpectedKprobeHandler: true,
          unexpectedProcessesInRunqueue: true,
          unexpectedReadOnlyDataModification: true,
          unexpectedSystemCallHandler: true,
        },
        kubernetes: {
          accessReviews: [
            {
              group: 'Test string',
              name: 'Test string',
              ns: 'Test string',
              resource: 'Test string',
              subresource: 'Test string',
              verb: 'Test string',
              version: 'Test string',
            },
          ],
          bindings: [
            {
              name: 'Test string',
              ns: 'Test string',
              role: {
                kind: 'Test string',
                name: 'Test string',
                ns: 'Test string',
              },
              subjects: [
                {
                  kind: 'Test string',
                  name: 'Test string',
                  ns: 'Test string',
                },
              ],
            },
          ],
          nodePools: [
            {
              name: 'Test string',
              nodes: [
                {
                  name: 'Test string',
                },
              ],
            },
          ],
          nodes: [
            {
              name: 'Test string',
            },
          ],
          objects: [
            {
              containers: [
                {
                  createTime: 'Test string',
                  imageId: 'Test string',
                  labels: [
                    {
                      name: 'Test string',
                      value: 'Test string',
                    },
                  ],
                  name: 'Test string',
                  uri: 'Test string',
                },
              ],
              group: 'Test string',
              kind: 'Test string',
              name: 'Test string',
              ns: 'Test string',
            },
          ],
          pods: [
            {
              containers: [
                {
                  createTime: 'Test string',
                  imageId: 'Test string',
                  labels: [
                    {
                      name: 'Test string',
                      value: 'Test string',
                    },
                  ],
                  name: 'Test string',
                  uri: 'Test string',
                },
              ],
              labels: [
                {
                  name: 'Test string',
                  value: 'Test string',
                },
              ],
              name: 'Test string',
              ns: 'Test string',
            },
          ],
          roles: [
            {
              kind: 'Test string',
              name: 'Test string',
              ns: 'Test string',
            },
          ],
        },
        loadBalancers: [
          {
            name: 'Test string',
          },
        ],
        logEntries: [
          {
            cloudLoggingEntry: {
              insertId: 'Test string',
              logId: 'Test string',
              resourceContainer: 'Test string',
              timestamp: 'Test string',
            },
          },
        ],
        mitreAttack: {
          additionalTactics: ['Test string'],
          additionalTechniques: ['Test string'],
          primaryTactic: 'Test string',
          primaryTechniques: ['Test string'],
          version: 'Test string',
        },
        moduleName: 'Test string',
        mute: 'Test string',
        muteInitiator: 'Test string',
        muteUpdateTime: 'Test string',
        name: 'Test string',
        nextSteps: 'Test string',
        orgPolicies: [
          {
            name: 'Test string',
          },
        ],
        parent: 'Test string',
        parentDisplayName: 'Test string',
        processes: [
          {
            args: ['Test string'],
            argumentsTruncated: true,
            binary: {
              contents: 'Test string',
              diskPath: {
                partitionUuid: 'Test string',
                relativePath: 'Test string',
              },
              hashedSize: 'Test string',
              partiallyHashed: true,
              path: 'Test string',
              sha256: 'Test string',
              size: 'Test string',
            },
            envVariables: [
              {
                name: 'Test string',
                val: 'Test string',
              },
            ],
            envVariablesTruncated: true,
            libraries: [
              {
                contents: 'Test string',
                diskPath: {
                  partitionUuid: 'Test string',
                  relativePath: 'Test string',
                },
                hashedSize: 'Test string',
                partiallyHashed: true,
                path: 'Test string',
                sha256: 'Test string',
                size: 'Test string',
              },
            ],
            name: 'Test string',
            parentPid: 'Test string',
            pid: 'Test string',
            script: {
              contents: 'Test string',
              diskPath: {
                partitionUuid: 'Test string',
                relativePath: 'Test string',
              },
              hashedSize: 'Test string',
              partiallyHashed: true,
              path: 'Test string',
              sha256: 'Test string',
              size: 'Test string',
            },
          },
        ],
        resourceName: 'Test string',
        securityMarks: {
          canonicalName: 'Test string',
          marks: {
            A: 'Test string',
          },
          name: 'Test string',
        },
        securityPosture: {
          changedPolicy: 'Test string',
          name: 'Test string',
          policy: 'Test string',
          policyDriftDetails: [
            {
              detectedValue: 'Test string',
              expectedValue: 'Test string',
              field: 'Test string',
            },
          ],
          policySet: 'Test string',
          postureDeployment: 'Test string',
          postureDeploymentResource: 'Test string',
          revisionId: 'Test string',
        },
        severity: 'Test string',
        sourceProperties: {
          A: 42,
        },
        state: 'Test string',
        vulnerability: {
          cve: {
            cvssv3: {
              attackComplexity: 'Test string',
              attackVector: 'Test string',
              availabilityImpact: 'Test string',
              baseScore: 42,
              confidentialityImpact: 'Test string',
              integrityImpact: 'Test string',
              privilegesRequired: 'Test string',
              scope: 'Test string',
              userInteraction: 'Test string',
            },
            exploitationActivity: 'Test string',
            id: 'Test string',
            impact: 'Test string',
            observedInTheWild: true,
            references: [
              {
                source: 'Test string',
                uri: 'Test string',
              },
            ],
            upstreamFixAvailable: true,
            zeroDay: true,
          },
          fixedPackage: {
            cpeUri: 'Test string',
            packageName: 'Test string',
            packageType: 'Test string',
            packageVersion: 'Test string',
          },
          offendingPackage: {
            cpeUri: 'Test string',
            packageName: 'Test string',
            packageType: 'Test string',
            packageVersion: 'Test string',
          },
          securityBulletin: {
            bulletinId: 'Test string',
            submissionTime: 'Test string',
            suggestedUpgradeVersion: 'Test string',
          },
        },
      }
    );
    /** Filters an organization or source's findings and groups them by their specified properties. To group across all sources provide a `-` as the source id. Example: /v1/organizations/{organization_id}/sources/-/findings, /v1/folders/{folder_id}/sources/-/findings, /v1/projects/{project_id}/sources/-/findings */
    await gapi.client.securitycenter.organizations.sources.findings.group(
      {
        parent: 'Test string',
      },
      {
        compareDuration: 'Test string',
        filter: 'Test string',
        groupBy: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        readTime: 'Test string',
      }
    );
    /** Lists an organization or source's findings. To list across all sources provide a `-` as the source id. Example: /v1/organizations/{organization_id}/sources/-/findings */
    await gapi.client.securitycenter.organizations.sources.findings.list({
      compareDuration: 'Test string',
      fieldMask: 'Test string',
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
      readTime: 'Test string',
    });
    /** Creates or updates a finding. The corresponding source must exist for a finding creation to succeed. */
    await gapi.client.securitycenter.organizations.sources.findings.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        access: {
          callerIp: 'Test string',
          callerIpGeo: {
            regionCode: 'Test string',
          },
          methodName: 'Test string',
          principalEmail: 'Test string',
          principalSubject: 'Test string',
          serviceAccountDelegationInfo: [
            {
              principalEmail: 'Test string',
              principalSubject: 'Test string',
            },
          ],
          serviceAccountKeyName: 'Test string',
          serviceName: 'Test string',
          userAgent: 'Test string',
          userAgentFamily: 'Test string',
          userName: 'Test string',
        },
        application: {
          baseUri: 'Test string',
          fullUri: 'Test string',
        },
        attackExposure: {
          attackExposureResult: 'Test string',
          exposedHighValueResourcesCount: 42,
          exposedLowValueResourcesCount: 42,
          exposedMediumValueResourcesCount: 42,
          latestCalculationTime: 'Test string',
          score: 42,
          state: 'Test string',
        },
        backupDisasterRecovery: {
          appliance: 'Test string',
          applications: ['Test string'],
          backupCreateTime: 'Test string',
          backupTemplate: 'Test string',
          backupType: 'Test string',
          host: 'Test string',
          policies: ['Test string'],
          policyOptions: ['Test string'],
          profile: 'Test string',
          storagePool: 'Test string',
        },
        canonicalName: 'Test string',
        category: 'Test string',
        cloudDlpDataProfile: {
          dataProfile: 'Test string',
          parentType: 'Test string',
        },
        cloudDlpInspection: {
          fullScan: true,
          infoType: 'Test string',
          infoTypeCount: 'Test string',
          inspectJob: 'Test string',
        },
        compliances: [
          {
            ids: ['Test string'],
            standard: 'Test string',
            version: 'Test string',
          },
        ],
        connections: [
          {
            destinationIp: 'Test string',
            destinationPort: 42,
            protocol: 'Test string',
            sourceIp: 'Test string',
            sourcePort: 42,
          },
        ],
        contacts: {
          A: {
            contacts: [
              {
                email: 'Test string',
              },
            ],
          },
        },
        containers: [
          {
            createTime: 'Test string',
            imageId: 'Test string',
            labels: [
              {
                name: 'Test string',
                value: 'Test string',
              },
            ],
            name: 'Test string',
            uri: 'Test string',
          },
        ],
        createTime: 'Test string',
        database: {
          displayName: 'Test string',
          grantees: ['Test string'],
          name: 'Test string',
          query: 'Test string',
          userName: 'Test string',
          version: 'Test string',
        },
        description: 'Test string',
        eventTime: 'Test string',
        exfiltration: {
          sources: [
            {
              components: ['Test string'],
              name: 'Test string',
            },
          ],
          targets: [
            {
              components: ['Test string'],
              name: 'Test string',
            },
          ],
          totalExfiltratedBytes: 'Test string',
        },
        externalSystems: {
          A: {
            assignees: ['Test string'],
            casePriority: 'Test string',
            caseSla: 'Test string',
            caseUri: 'Test string',
            externalSystemUpdateTime: 'Test string',
            externalUid: 'Test string',
            name: 'Test string',
            status: 'Test string',
            ticketInfo: {
              assignee: 'Test string',
              description: 'Test string',
              id: 'Test string',
              status: 'Test string',
              updateTime: 'Test string',
              uri: 'Test string',
            },
          },
        },
        externalUri: 'Test string',
        files: [
          {
            contents: 'Test string',
            diskPath: {
              partitionUuid: 'Test string',
              relativePath: 'Test string',
            },
            hashedSize: 'Test string',
            partiallyHashed: true,
            path: 'Test string',
            sha256: 'Test string',
            size: 'Test string',
          },
        ],
        findingClass: 'Test string',
        iamBindings: [
          {
            action: 'Test string',
            member: 'Test string',
            role: 'Test string',
          },
        ],
        indicator: {
          domains: ['Test string'],
          ipAddresses: ['Test string'],
          signatures: [
            {
              memoryHashSignature: {
                binaryFamily: 'Test string',
                detections: [
                  {
                    binary: 'Test string',
                    percentPagesMatched: 42,
                  },
                ],
              },
              signatureType: 'Test string',
              yaraRuleSignature: {
                yaraRule: 'Test string',
              },
            },
          ],
          uris: ['Test string'],
        },
        kernelRootkit: {
          name: 'Test string',
          unexpectedCodeModification: true,
          unexpectedFtraceHandler: true,
          unexpectedInterruptHandler: true,
          unexpectedKernelCodePages: true,
          unexpectedKprobeHandler: true,
          unexpectedProcessesInRunqueue: true,
          unexpectedReadOnlyDataModification: true,
          unexpectedSystemCallHandler: true,
        },
        kubernetes: {
          accessReviews: [
            {
              group: 'Test string',
              name: 'Test string',
              ns: 'Test string',
              resource: 'Test string',
              subresource: 'Test string',
              verb: 'Test string',
              version: 'Test string',
            },
          ],
          bindings: [
            {
              name: 'Test string',
              ns: 'Test string',
              role: {
                kind: 'Test string',
                name: 'Test string',
                ns: 'Test string',
              },
              subjects: [
                {
                  kind: 'Test string',
                  name: 'Test string',
                  ns: 'Test string',
                },
              ],
            },
          ],
          nodePools: [
            {
              name: 'Test string',
              nodes: [
                {
                  name: 'Test string',
                },
              ],
            },
          ],
          nodes: [
            {
              name: 'Test string',
            },
          ],
          objects: [
            {
              containers: [
                {
                  createTime: 'Test string',
                  imageId: 'Test string',
                  labels: [
                    {
                      name: 'Test string',
                      value: 'Test string',
                    },
                  ],
                  name: 'Test string',
                  uri: 'Test string',
                },
              ],
              group: 'Test string',
              kind: 'Test string',
              name: 'Test string',
              ns: 'Test string',
            },
          ],
          pods: [
            {
              containers: [
                {
                  createTime: 'Test string',
                  imageId: 'Test string',
                  labels: [
                    {
                      name: 'Test string',
                      value: 'Test string',
                    },
                  ],
                  name: 'Test string',
                  uri: 'Test string',
                },
              ],
              labels: [
                {
                  name: 'Test string',
                  value: 'Test string',
                },
              ],
              name: 'Test string',
              ns: 'Test string',
            },
          ],
          roles: [
            {
              kind: 'Test string',
              name: 'Test string',
              ns: 'Test string',
            },
          ],
        },
        loadBalancers: [
          {
            name: 'Test string',
          },
        ],
        logEntries: [
          {
            cloudLoggingEntry: {
              insertId: 'Test string',
              logId: 'Test string',
              resourceContainer: 'Test string',
              timestamp: 'Test string',
            },
          },
        ],
        mitreAttack: {
          additionalTactics: ['Test string'],
          additionalTechniques: ['Test string'],
          primaryTactic: 'Test string',
          primaryTechniques: ['Test string'],
          version: 'Test string',
        },
        moduleName: 'Test string',
        mute: 'Test string',
        muteInitiator: 'Test string',
        muteUpdateTime: 'Test string',
        name: 'Test string',
        nextSteps: 'Test string',
        orgPolicies: [
          {
            name: 'Test string',
          },
        ],
        parent: 'Test string',
        parentDisplayName: 'Test string',
        processes: [
          {
            args: ['Test string'],
            argumentsTruncated: true,
            binary: {
              contents: 'Test string',
              diskPath: {
                partitionUuid: 'Test string',
                relativePath: 'Test string',
              },
              hashedSize: 'Test string',
              partiallyHashed: true,
              path: 'Test string',
              sha256: 'Test string',
              size: 'Test string',
            },
            envVariables: [
              {
                name: 'Test string',
                val: 'Test string',
              },
            ],
            envVariablesTruncated: true,
            libraries: [
              {
                contents: 'Test string',
                diskPath: {
                  partitionUuid: 'Test string',
                  relativePath: 'Test string',
                },
                hashedSize: 'Test string',
                partiallyHashed: true,
                path: 'Test string',
                sha256: 'Test string',
                size: 'Test string',
              },
            ],
            name: 'Test string',
            parentPid: 'Test string',
            pid: 'Test string',
            script: {
              contents: 'Test string',
              diskPath: {
                partitionUuid: 'Test string',
                relativePath: 'Test string',
              },
              hashedSize: 'Test string',
              partiallyHashed: true,
              path: 'Test string',
              sha256: 'Test string',
              size: 'Test string',
            },
          },
        ],
        resourceName: 'Test string',
        securityMarks: {
          canonicalName: 'Test string',
          marks: {
            A: 'Test string',
          },
          name: 'Test string',
        },
        securityPosture: {
          changedPolicy: 'Test string',
          name: 'Test string',
          policy: 'Test string',
          policyDriftDetails: [
            {
              detectedValue: 'Test string',
              expectedValue: 'Test string',
              field: 'Test string',
            },
          ],
          policySet: 'Test string',
          postureDeployment: 'Test string',
          postureDeploymentResource: 'Test string',
          revisionId: 'Test string',
        },
        severity: 'Test string',
        sourceProperties: {
          A: 42,
        },
        state: 'Test string',
        vulnerability: {
          cve: {
            cvssv3: {
              attackComplexity: 'Test string',
              attackVector: 'Test string',
              availabilityImpact: 'Test string',
              baseScore: 42,
              confidentialityImpact: 'Test string',
              integrityImpact: 'Test string',
              privilegesRequired: 'Test string',
              scope: 'Test string',
              userInteraction: 'Test string',
            },
            exploitationActivity: 'Test string',
            id: 'Test string',
            impact: 'Test string',
            observedInTheWild: true,
            references: [
              {
                source: 'Test string',
                uri: 'Test string',
              },
            ],
            upstreamFixAvailable: true,
            zeroDay: true,
          },
          fixedPackage: {
            cpeUri: 'Test string',
            packageName: 'Test string',
            packageType: 'Test string',
            packageVersion: 'Test string',
          },
          offendingPackage: {
            cpeUri: 'Test string',
            packageName: 'Test string',
            packageType: 'Test string',
            packageVersion: 'Test string',
          },
          securityBulletin: {
            bulletinId: 'Test string',
            submissionTime: 'Test string',
            suggestedUpgradeVersion: 'Test string',
          },
        },
      }
    );
    /** Updates the mute state of a finding. */
    await gapi.client.securitycenter.organizations.sources.findings.setMute(
      {
        name: 'Test string',
      },
      {
        mute: 'Test string',
      }
    );
    /** Updates the state of a finding. */
    await gapi.client.securitycenter.organizations.sources.findings.setState(
      {
        name: 'Test string',
      },
      {
        startTime: 'Test string',
        state: 'Test string',
      }
    );
    /** Updates security marks. */
    await gapi.client.securitycenter.organizations.sources.findings.updateSecurityMarks(
      {
        name: 'Test string',
        startTime: 'Test string',
        updateMask: 'Test string',
      },
      {
        canonicalName: 'Test string',
        marks: {
          A: 'Test string',
        },
        name: 'Test string',
      }
    );
    /** Updates external system. This is for a given finding. */
    await gapi.client.securitycenter.organizations.sources.findings.externalSystems.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        assignees: ['Test string'],
        casePriority: 'Test string',
        caseSla: 'Test string',
        caseUri: 'Test string',
        externalSystemUpdateTime: 'Test string',
        externalUid: 'Test string',
        name: 'Test string',
        status: 'Test string',
        ticketInfo: {
          assignee: 'Test string',
          description: 'Test string',
          id: 'Test string',
          status: 'Test string',
          updateTime: 'Test string',
          uri: 'Test string',
        },
      }
    );
    /** Filters an organization's assets and groups them by their specified properties. */
    await gapi.client.securitycenter.projects.assets.group(
      {
        parent: 'Test string',
      },
      {
        compareDuration: 'Test string',
        filter: 'Test string',
        groupBy: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        readTime: 'Test string',
      }
    );
    /** Lists an organization's assets. */
    await gapi.client.securitycenter.projects.assets.list({
      compareDuration: 'Test string',
      fieldMask: 'Test string',
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
      readTime: 'Test string',
    });
    /** Updates security marks. */
    await gapi.client.securitycenter.projects.assets.updateSecurityMarks(
      {
        name: 'Test string',
        startTime: 'Test string',
        updateMask: 'Test string',
      },
      {
        canonicalName: 'Test string',
        marks: {
          A: 'Test string',
        },
        name: 'Test string',
      }
    );
    /** Creates a BigQuery export. */
    await gapi.client.securitycenter.projects.bigQueryExports.create(
      {
        bigQueryExportId: 'Test string',
        parent: 'Test string',
      },
      {
        createTime: 'Test string',
        dataset: 'Test string',
        description: 'Test string',
        filter: 'Test string',
        mostRecentEditor: 'Test string',
        name: 'Test string',
        principal: 'Test string',
        updateTime: 'Test string',
      }
    );
    /** Deletes an existing BigQuery export. */
    await gapi.client.securitycenter.projects.bigQueryExports.delete({
      name: 'Test string',
    });
    /** Gets a BigQuery export. */
    await gapi.client.securitycenter.projects.bigQueryExports.get({
      name: 'Test string',
    });
    /** Lists BigQuery exports. Note that when requesting BigQuery exports at a given level all exports under that level are also returned e.g. if requesting BigQuery exports under a folder, then all BigQuery exports immediately under the folder plus the ones created under the projects within the folder are returned. */
    await gapi.client.securitycenter.projects.bigQueryExports.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates a BigQuery export. */
    await gapi.client.securitycenter.projects.bigQueryExports.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        createTime: 'Test string',
        dataset: 'Test string',
        description: 'Test string',
        filter: 'Test string',
        mostRecentEditor: 'Test string',
        name: 'Test string',
        principal: 'Test string',
        updateTime: 'Test string',
      }
    );
    /** Validates the given Event Threat Detection custom module. */
    await gapi.client.securitycenter.projects.eventThreatDetectionSettings.validateCustomModule(
      {
        parent: 'Test string',
      },
      {
        rawText: 'Test string',
        type: 'Test string',
      }
    );
    /** Creates a resident Event Threat Detection custom module at the scope of the given Resource Manager parent, and also creates inherited custom modules for all descendants of the given parent. These modules are enabled by default. */
    await gapi.client.securitycenter.projects.eventThreatDetectionSettings.customModules.create(
      {
        parent: 'Test string',
      },
      {
        ancestorModule: 'Test string',
        config: {
          A: 42,
        },
        description: 'Test string',
        displayName: 'Test string',
        enablementState: 'Test string',
        lastEditor: 'Test string',
        name: 'Test string',
        type: 'Test string',
        updateTime: 'Test string',
      }
    );
    /** Deletes the specified Event Threat Detection custom module and all of its descendants in the Resource Manager hierarchy. This method is only supported for resident custom modules. */
    await gapi.client.securitycenter.projects.eventThreatDetectionSettings.customModules.delete(
      {
        name: 'Test string',
      }
    );
    /** Gets an Event Threat Detection custom module. */
    await gapi.client.securitycenter.projects.eventThreatDetectionSettings.customModules.get(
      {
        name: 'Test string',
      }
    );
    /** Lists all Event Threat Detection custom modules for the given Resource Manager parent. This includes resident modules defined at the scope of the parent along with modules inherited from ancestors. */
    await gapi.client.securitycenter.projects.eventThreatDetectionSettings.customModules.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Lists all resident Event Threat Detection custom modules under the given Resource Manager parent and its descendants. */
    await gapi.client.securitycenter.projects.eventThreatDetectionSettings.customModules.listDescendant(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Updates the Event Threat Detection custom module with the given name based on the given update mask. Updating the enablement state is supported for both resident and inherited modules (though resident modules cannot have an enablement state of "inherited"). Updating the display name or configuration of a module is supported for resident modules only. The type of a module cannot be changed. */
    await gapi.client.securitycenter.projects.eventThreatDetectionSettings.customModules.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        ancestorModule: 'Test string',
        config: {
          A: 42,
        },
        description: 'Test string',
        displayName: 'Test string',
        enablementState: 'Test string',
        lastEditor: 'Test string',
        name: 'Test string',
        type: 'Test string',
        updateTime: 'Test string',
      }
    );
    /** Gets an effective Event Threat Detection custom module at the given level. */
    await gapi.client.securitycenter.projects.eventThreatDetectionSettings.effectiveCustomModules.get(
      {
        name: 'Test string',
      }
    );
    /** Lists all effective Event Threat Detection custom modules for the given parent. This includes resident modules defined at the scope of the parent along with modules inherited from its ancestors. */
    await gapi.client.securitycenter.projects.eventThreatDetectionSettings.effectiveCustomModules.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Kicks off an LRO to bulk mute findings for a parent based on a filter. The parent can be either an organization, folder or project. The findings matched by the filter will be muted after the LRO is done. */
    await gapi.client.securitycenter.projects.findings.bulkMute(
      {
        parent: 'Test string',
      },
      {
        filter: 'Test string',
        muteAnnotation: 'Test string',
      }
    );
    /** Deletes an existing mute config. */
    await gapi.client.securitycenter.projects.locations.muteConfigs.delete({
      name: 'Test string',
    });
    /** Gets a mute config. */
    await gapi.client.securitycenter.projects.locations.muteConfigs.get({
      name: 'Test string',
    });
    /** Updates a mute config. */
    await gapi.client.securitycenter.projects.locations.muteConfigs.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        displayName: 'Test string',
        filter: 'Test string',
        mostRecentEditor: 'Test string',
        name: 'Test string',
        updateTime: 'Test string',
      }
    );
    /** Creates a mute config. */
    await gapi.client.securitycenter.projects.muteConfigs.create(
      {
        muteConfigId: 'Test string',
        parent: 'Test string',
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        displayName: 'Test string',
        filter: 'Test string',
        mostRecentEditor: 'Test string',
        name: 'Test string',
        updateTime: 'Test string',
      }
    );
    /** Deletes an existing mute config. */
    await gapi.client.securitycenter.projects.muteConfigs.delete({
      name: 'Test string',
    });
    /** Gets a mute config. */
    await gapi.client.securitycenter.projects.muteConfigs.get({
      name: 'Test string',
    });
    /** Lists mute configs. */
    await gapi.client.securitycenter.projects.muteConfigs.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates a mute config. */
    await gapi.client.securitycenter.projects.muteConfigs.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        displayName: 'Test string',
        filter: 'Test string',
        mostRecentEditor: 'Test string',
        name: 'Test string',
        updateTime: 'Test string',
      }
    );
    /** Creates a notification config. */
    await gapi.client.securitycenter.projects.notificationConfigs.create(
      {
        configId: 'Test string',
        parent: 'Test string',
      },
      {
        description: 'Test string',
        name: 'Test string',
        pubsubTopic: 'Test string',
        serviceAccount: 'Test string',
        streamingConfig: {
          filter: 'Test string',
        },
      }
    );
    /** Deletes a notification config. */
    await gapi.client.securitycenter.projects.notificationConfigs.delete({
      name: 'Test string',
    });
    /** Gets a notification config. */
    await gapi.client.securitycenter.projects.notificationConfigs.get({
      name: 'Test string',
    });
    /** Lists notification configs. */
    await gapi.client.securitycenter.projects.notificationConfigs.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates a notification config. The following update fields are allowed: description, pubsub_topic, streaming_config.filter */
    await gapi.client.securitycenter.projects.notificationConfigs.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        description: 'Test string',
        name: 'Test string',
        pubsubTopic: 'Test string',
        serviceAccount: 'Test string',
        streamingConfig: {
          filter: 'Test string',
        },
      }
    );
    /** Creates a resident SecurityHealthAnalyticsCustomModule at the scope of the given CRM parent, and also creates inherited SecurityHealthAnalyticsCustomModules for all CRM descendants of the given parent. These modules are enabled by default. */
    await gapi.client.securitycenter.projects.securityHealthAnalyticsSettings.customModules.create(
      {
        parent: 'Test string',
      },
      {
        ancestorModule: 'Test string',
        customConfig: {
          customOutput: {
            properties: [
              {
                name: 'Test string',
                valueExpression: {
                  description: 'Test string',
                  expression: 'Test string',
                  location: 'Test string',
                  title: 'Test string',
                },
              },
            ],
          },
          description: 'Test string',
          predicate: {
            description: 'Test string',
            expression: 'Test string',
            location: 'Test string',
            title: 'Test string',
          },
          recommendation: 'Test string',
          resourceSelector: {
            resourceTypes: ['Test string'],
          },
          severity: 'Test string',
        },
        displayName: 'Test string',
        enablementState: 'Test string',
        lastEditor: 'Test string',
        name: 'Test string',
        updateTime: 'Test string',
      }
    );
    /** Deletes the specified SecurityHealthAnalyticsCustomModule and all of its descendants in the CRM hierarchy. This method is only supported for resident custom modules. */
    await gapi.client.securitycenter.projects.securityHealthAnalyticsSettings.customModules.delete(
      {
        name: 'Test string',
      }
    );
    /** Retrieves a SecurityHealthAnalyticsCustomModule. */
    await gapi.client.securitycenter.projects.securityHealthAnalyticsSettings.customModules.get(
      {
        name: 'Test string',
      }
    );
    /** Returns a list of all SecurityHealthAnalyticsCustomModules for the given parent. This includes resident modules defined at the scope of the parent, and inherited modules, inherited from CRM ancestors. */
    await gapi.client.securitycenter.projects.securityHealthAnalyticsSettings.customModules.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Returns a list of all resident SecurityHealthAnalyticsCustomModules under the given CRM parent and all of the parent’s CRM descendants. */
    await gapi.client.securitycenter.projects.securityHealthAnalyticsSettings.customModules.listDescendant(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Updates the SecurityHealthAnalyticsCustomModule under the given name based on the given update mask. Updating the enablement state is supported on both resident and inherited modules (though resident modules cannot have an enablement state of "inherited"). Updating the display name and custom config of a module is supported on resident modules only. */
    await gapi.client.securitycenter.projects.securityHealthAnalyticsSettings.customModules.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        ancestorModule: 'Test string',
        customConfig: {
          customOutput: {
            properties: [
              {
                name: 'Test string',
                valueExpression: {
                  description: 'Test string',
                  expression: 'Test string',
                  location: 'Test string',
                  title: 'Test string',
                },
              },
            ],
          },
          description: 'Test string',
          predicate: {
            description: 'Test string',
            expression: 'Test string',
            location: 'Test string',
            title: 'Test string',
          },
          recommendation: 'Test string',
          resourceSelector: {
            resourceTypes: ['Test string'],
          },
          severity: 'Test string',
        },
        displayName: 'Test string',
        enablementState: 'Test string',
        lastEditor: 'Test string',
        name: 'Test string',
        updateTime: 'Test string',
      }
    );
    /** Simulates a given SecurityHealthAnalyticsCustomModule and Resource. */
    await gapi.client.securitycenter.projects.securityHealthAnalyticsSettings.customModules.simulate(
      {
        parent: 'Test string',
      },
      {
        customConfig: {
          customOutput: {
            properties: [
              {
                name: 'Test string',
                valueExpression: {
                  description: 'Test string',
                  expression: 'Test string',
                  location: 'Test string',
                  title: 'Test string',
                },
              },
            ],
          },
          description: 'Test string',
          predicate: {
            description: 'Test string',
            expression: 'Test string',
            location: 'Test string',
            title: 'Test string',
          },
          recommendation: 'Test string',
          resourceSelector: {
            resourceTypes: ['Test string'],
          },
          severity: 'Test string',
        },
        resource: {
          iamPolicyData: {
            auditConfigs: [
              {
                auditLogConfigs: [
                  {
                    exemptedMembers: ['Test string'],
                    logType: 'Test string',
                  },
                ],
                service: 'Test string',
              },
            ],
            bindings: [
              {
                condition: {
                  description: 'Test string',
                  expression: 'Test string',
                  location: 'Test string',
                  title: 'Test string',
                },
                members: ['Test string'],
                role: 'Test string',
              },
            ],
            etag: 'Test string',
            version: 42,
          },
          resourceData: {
            A: 42,
          },
          resourceType: 'Test string',
        },
      }
    );
    /** Retrieves an EffectiveSecurityHealthAnalyticsCustomModule. */
    await gapi.client.securitycenter.projects.securityHealthAnalyticsSettings.effectiveCustomModules.get(
      {
        name: 'Test string',
      }
    );
    /** Returns a list of all EffectiveSecurityHealthAnalyticsCustomModules for the given parent. This includes resident modules defined at the scope of the parent, and inherited modules, inherited from CRM ancestors. */
    await gapi.client.securitycenter.projects.securityHealthAnalyticsSettings.effectiveCustomModules.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Lists all sources belonging to an organization. */
    await gapi.client.securitycenter.projects.sources.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Filters an organization or source's findings and groups them by their specified properties. To group across all sources provide a `-` as the source id. Example: /v1/organizations/{organization_id}/sources/-/findings, /v1/folders/{folder_id}/sources/-/findings, /v1/projects/{project_id}/sources/-/findings */
    await gapi.client.securitycenter.projects.sources.findings.group(
      {
        parent: 'Test string',
      },
      {
        compareDuration: 'Test string',
        filter: 'Test string',
        groupBy: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        readTime: 'Test string',
      }
    );
    /** Lists an organization or source's findings. To list across all sources provide a `-` as the source id. Example: /v1/organizations/{organization_id}/sources/-/findings */
    await gapi.client.securitycenter.projects.sources.findings.list({
      compareDuration: 'Test string',
      fieldMask: 'Test string',
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
      readTime: 'Test string',
    });
    /** Creates or updates a finding. The corresponding source must exist for a finding creation to succeed. */
    await gapi.client.securitycenter.projects.sources.findings.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        access: {
          callerIp: 'Test string',
          callerIpGeo: {
            regionCode: 'Test string',
          },
          methodName: 'Test string',
          principalEmail: 'Test string',
          principalSubject: 'Test string',
          serviceAccountDelegationInfo: [
            {
              principalEmail: 'Test string',
              principalSubject: 'Test string',
            },
          ],
          serviceAccountKeyName: 'Test string',
          serviceName: 'Test string',
          userAgent: 'Test string',
          userAgentFamily: 'Test string',
          userName: 'Test string',
        },
        application: {
          baseUri: 'Test string',
          fullUri: 'Test string',
        },
        attackExposure: {
          attackExposureResult: 'Test string',
          exposedHighValueResourcesCount: 42,
          exposedLowValueResourcesCount: 42,
          exposedMediumValueResourcesCount: 42,
          latestCalculationTime: 'Test string',
          score: 42,
          state: 'Test string',
        },
        backupDisasterRecovery: {
          appliance: 'Test string',
          applications: ['Test string'],
          backupCreateTime: 'Test string',
          backupTemplate: 'Test string',
          backupType: 'Test string',
          host: 'Test string',
          policies: ['Test string'],
          policyOptions: ['Test string'],
          profile: 'Test string',
          storagePool: 'Test string',
        },
        canonicalName: 'Test string',
        category: 'Test string',
        cloudDlpDataProfile: {
          dataProfile: 'Test string',
          parentType: 'Test string',
        },
        cloudDlpInspection: {
          fullScan: true,
          infoType: 'Test string',
          infoTypeCount: 'Test string',
          inspectJob: 'Test string',
        },
        compliances: [
          {
            ids: ['Test string'],
            standard: 'Test string',
            version: 'Test string',
          },
        ],
        connections: [
          {
            destinationIp: 'Test string',
            destinationPort: 42,
            protocol: 'Test string',
            sourceIp: 'Test string',
            sourcePort: 42,
          },
        ],
        contacts: {
          A: {
            contacts: [
              {
                email: 'Test string',
              },
            ],
          },
        },
        containers: [
          {
            createTime: 'Test string',
            imageId: 'Test string',
            labels: [
              {
                name: 'Test string',
                value: 'Test string',
              },
            ],
            name: 'Test string',
            uri: 'Test string',
          },
        ],
        createTime: 'Test string',
        database: {
          displayName: 'Test string',
          grantees: ['Test string'],
          name: 'Test string',
          query: 'Test string',
          userName: 'Test string',
          version: 'Test string',
        },
        description: 'Test string',
        eventTime: 'Test string',
        exfiltration: {
          sources: [
            {
              components: ['Test string'],
              name: 'Test string',
            },
          ],
          targets: [
            {
              components: ['Test string'],
              name: 'Test string',
            },
          ],
          totalExfiltratedBytes: 'Test string',
        },
        externalSystems: {
          A: {
            assignees: ['Test string'],
            casePriority: 'Test string',
            caseSla: 'Test string',
            caseUri: 'Test string',
            externalSystemUpdateTime: 'Test string',
            externalUid: 'Test string',
            name: 'Test string',
            status: 'Test string',
            ticketInfo: {
              assignee: 'Test string',
              description: 'Test string',
              id: 'Test string',
              status: 'Test string',
              updateTime: 'Test string',
              uri: 'Test string',
            },
          },
        },
        externalUri: 'Test string',
        files: [
          {
            contents: 'Test string',
            diskPath: {
              partitionUuid: 'Test string',
              relativePath: 'Test string',
            },
            hashedSize: 'Test string',
            partiallyHashed: true,
            path: 'Test string',
            sha256: 'Test string',
            size: 'Test string',
          },
        ],
        findingClass: 'Test string',
        iamBindings: [
          {
            action: 'Test string',
            member: 'Test string',
            role: 'Test string',
          },
        ],
        indicator: {
          domains: ['Test string'],
          ipAddresses: ['Test string'],
          signatures: [
            {
              memoryHashSignature: {
                binaryFamily: 'Test string',
                detections: [
                  {
                    binary: 'Test string',
                    percentPagesMatched: 42,
                  },
                ],
              },
              signatureType: 'Test string',
              yaraRuleSignature: {
                yaraRule: 'Test string',
              },
            },
          ],
          uris: ['Test string'],
        },
        kernelRootkit: {
          name: 'Test string',
          unexpectedCodeModification: true,
          unexpectedFtraceHandler: true,
          unexpectedInterruptHandler: true,
          unexpectedKernelCodePages: true,
          unexpectedKprobeHandler: true,
          unexpectedProcessesInRunqueue: true,
          unexpectedReadOnlyDataModification: true,
          unexpectedSystemCallHandler: true,
        },
        kubernetes: {
          accessReviews: [
            {
              group: 'Test string',
              name: 'Test string',
              ns: 'Test string',
              resource: 'Test string',
              subresource: 'Test string',
              verb: 'Test string',
              version: 'Test string',
            },
          ],
          bindings: [
            {
              name: 'Test string',
              ns: 'Test string',
              role: {
                kind: 'Test string',
                name: 'Test string',
                ns: 'Test string',
              },
              subjects: [
                {
                  kind: 'Test string',
                  name: 'Test string',
                  ns: 'Test string',
                },
              ],
            },
          ],
          nodePools: [
            {
              name: 'Test string',
              nodes: [
                {
                  name: 'Test string',
                },
              ],
            },
          ],
          nodes: [
            {
              name: 'Test string',
            },
          ],
          objects: [
            {
              containers: [
                {
                  createTime: 'Test string',
                  imageId: 'Test string',
                  labels: [
                    {
                      name: 'Test string',
                      value: 'Test string',
                    },
                  ],
                  name: 'Test string',
                  uri: 'Test string',
                },
              ],
              group: 'Test string',
              kind: 'Test string',
              name: 'Test string',
              ns: 'Test string',
            },
          ],
          pods: [
            {
              containers: [
                {
                  createTime: 'Test string',
                  imageId: 'Test string',
                  labels: [
                    {
                      name: 'Test string',
                      value: 'Test string',
                    },
                  ],
                  name: 'Test string',
                  uri: 'Test string',
                },
              ],
              labels: [
                {
                  name: 'Test string',
                  value: 'Test string',
                },
              ],
              name: 'Test string',
              ns: 'Test string',
            },
          ],
          roles: [
            {
              kind: 'Test string',
              name: 'Test string',
              ns: 'Test string',
            },
          ],
        },
        loadBalancers: [
          {
            name: 'Test string',
          },
        ],
        logEntries: [
          {
            cloudLoggingEntry: {
              insertId: 'Test string',
              logId: 'Test string',
              resourceContainer: 'Test string',
              timestamp: 'Test string',
            },
          },
        ],
        mitreAttack: {
          additionalTactics: ['Test string'],
          additionalTechniques: ['Test string'],
          primaryTactic: 'Test string',
          primaryTechniques: ['Test string'],
          version: 'Test string',
        },
        moduleName: 'Test string',
        mute: 'Test string',
        muteInitiator: 'Test string',
        muteUpdateTime: 'Test string',
        name: 'Test string',
        nextSteps: 'Test string',
        orgPolicies: [
          {
            name: 'Test string',
          },
        ],
        parent: 'Test string',
        parentDisplayName: 'Test string',
        processes: [
          {
            args: ['Test string'],
            argumentsTruncated: true,
            binary: {
              contents: 'Test string',
              diskPath: {
                partitionUuid: 'Test string',
                relativePath: 'Test string',
              },
              hashedSize: 'Test string',
              partiallyHashed: true,
              path: 'Test string',
              sha256: 'Test string',
              size: 'Test string',
            },
            envVariables: [
              {
                name: 'Test string',
                val: 'Test string',
              },
            ],
            envVariablesTruncated: true,
            libraries: [
              {
                contents: 'Test string',
                diskPath: {
                  partitionUuid: 'Test string',
                  relativePath: 'Test string',
                },
                hashedSize: 'Test string',
                partiallyHashed: true,
                path: 'Test string',
                sha256: 'Test string',
                size: 'Test string',
              },
            ],
            name: 'Test string',
            parentPid: 'Test string',
            pid: 'Test string',
            script: {
              contents: 'Test string',
              diskPath: {
                partitionUuid: 'Test string',
                relativePath: 'Test string',
              },
              hashedSize: 'Test string',
              partiallyHashed: true,
              path: 'Test string',
              sha256: 'Test string',
              size: 'Test string',
            },
          },
        ],
        resourceName: 'Test string',
        securityMarks: {
          canonicalName: 'Test string',
          marks: {
            A: 'Test string',
          },
          name: 'Test string',
        },
        securityPosture: {
          changedPolicy: 'Test string',
          name: 'Test string',
          policy: 'Test string',
          policyDriftDetails: [
            {
              detectedValue: 'Test string',
              expectedValue: 'Test string',
              field: 'Test string',
            },
          ],
          policySet: 'Test string',
          postureDeployment: 'Test string',
          postureDeploymentResource: 'Test string',
          revisionId: 'Test string',
        },
        severity: 'Test string',
        sourceProperties: {
          A: 42,
        },
        state: 'Test string',
        vulnerability: {
          cve: {
            cvssv3: {
              attackComplexity: 'Test string',
              attackVector: 'Test string',
              availabilityImpact: 'Test string',
              baseScore: 42,
              confidentialityImpact: 'Test string',
              integrityImpact: 'Test string',
              privilegesRequired: 'Test string',
              scope: 'Test string',
              userInteraction: 'Test string',
            },
            exploitationActivity: 'Test string',
            id: 'Test string',
            impact: 'Test string',
            observedInTheWild: true,
            references: [
              {
                source: 'Test string',
                uri: 'Test string',
              },
            ],
            upstreamFixAvailable: true,
            zeroDay: true,
          },
          fixedPackage: {
            cpeUri: 'Test string',
            packageName: 'Test string',
            packageType: 'Test string',
            packageVersion: 'Test string',
          },
          offendingPackage: {
            cpeUri: 'Test string',
            packageName: 'Test string',
            packageType: 'Test string',
            packageVersion: 'Test string',
          },
          securityBulletin: {
            bulletinId: 'Test string',
            submissionTime: 'Test string',
            suggestedUpgradeVersion: 'Test string',
          },
        },
      }
    );
    /** Updates the mute state of a finding. */
    await gapi.client.securitycenter.projects.sources.findings.setMute(
      {
        name: 'Test string',
      },
      {
        mute: 'Test string',
      }
    );
    /** Updates the state of a finding. */
    await gapi.client.securitycenter.projects.sources.findings.setState(
      {
        name: 'Test string',
      },
      {
        startTime: 'Test string',
        state: 'Test string',
      }
    );
    /** Updates security marks. */
    await gapi.client.securitycenter.projects.sources.findings.updateSecurityMarks(
      {
        name: 'Test string',
        startTime: 'Test string',
        updateMask: 'Test string',
      },
      {
        canonicalName: 'Test string',
        marks: {
          A: 'Test string',
        },
        name: 'Test string',
      }
    );
    /** Updates external system. This is for a given finding. */
    await gapi.client.securitycenter.projects.sources.findings.externalSystems.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        assignees: ['Test string'],
        casePriority: 'Test string',
        caseSla: 'Test string',
        caseUri: 'Test string',
        externalSystemUpdateTime: 'Test string',
        externalUid: 'Test string',
        name: 'Test string',
        status: 'Test string',
        ticketInfo: {
          assignee: 'Test string',
          description: 'Test string',
          id: 'Test string',
          status: 'Test string',
          updateTime: 'Test string',
          uri: 'Test string',
        },
      }
    );
  }
});
