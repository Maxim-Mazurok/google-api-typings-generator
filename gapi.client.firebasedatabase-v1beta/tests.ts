/* This is stub file for gapi.client.firebasedatabase-v1beta definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20231123

gapi.load('client', async () => {
    /** now we can use gapi.client */

    await gapi.client.load('https://firebasedatabase.googleapis.com/$discovery/rest?version=v1beta');
    /** now we can use gapi.client.firebasedatabase */

    /** don't forget to authenticate your client before sending any request to resources: */
    /** declare client_id registered in Google Developers Console */
    const client_id = '<<PUT YOUR CLIENT ID HERE>>';
    const scope = [
        /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
        'https://www.googleapis.com/auth/cloud-platform',
        /** View your data across Google Cloud services and see the email address of your Google Account */
        'https://www.googleapis.com/auth/cloud-platform.read-only',
        /** View and administer all your Firebase data and settings */
        'https://www.googleapis.com/auth/firebase',
        /** View all your Firebase data and settings */
        'https://www.googleapis.com/auth/firebase.readonly',
    ];
    const immediate = false;
    gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
        if (authResult && !authResult.error) {
            /** handle successful authorization */
            run();
        } else {
            /** handle authorization error */
        }
    });

    async function run() {
        /**
         * Requests that a new DatabaseInstance be created. The state of a successfully created DatabaseInstance is ACTIVE. Only available for projects on the Blaze plan. Projects can be upgraded
         * using the Cloud Billing API https://cloud.google.com/billing/reference/rest/v1/projects/updateBillingInfo. Note that it might take a few minutes for billing enablement state to
         * propagate to Firebase systems.
         */
        await gapi.client.firebasedatabase.projects.locations.instances.create({
            databaseId: "Test string",
            parent: "Test string",
            validateOnly: true,
        }, {
            databaseUrl: "Test string",
            name: "Test string",
            project: "Test string",
            state: "Test string",
            type: "Test string",
        });
        /**
         * Marks a DatabaseInstance to be deleted. The DatabaseInstance will be set to the DELETED state for 20 days, and will be purged within 30 days. The default database cannot be deleted. IDs
         * for deleted database instances may never be recovered or re-used. The Database may only be deleted if it is already in a DISABLED state.
         */
        await gapi.client.firebasedatabase.projects.locations.instances.delete({
            name: "Test string",
        });
        /**
         * Disables a DatabaseInstance. The database can be re-enabled later using ReenableDatabaseInstance. When a database is disabled, all reads and writes are denied, including view access in
         * the Firebase console.
         */
        await gapi.client.firebasedatabase.projects.locations.instances.disable({
            name: "Test string",
        }, {
        });
        /** Gets the DatabaseInstance identified by the specified resource name. */
        await gapi.client.firebasedatabase.projects.locations.instances.get({
            name: "Test string",
        });
        /**
         * Lists each DatabaseInstance associated with the specified parent project. The list items are returned in no particular order, but will be a consistent view of the database instances
         * when additional requests are made with a `pageToken`. The resulting list contains instances in any STATE. The list results may be stale by a few seconds. Use GetDatabaseInstance for
         * consistent reads.
         */
        await gapi.client.firebasedatabase.projects.locations.instances.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
            showDeleted: true,
        });
        /** Enables a DatabaseInstance. The database must have been disabled previously using DisableDatabaseInstance. The state of a successfully reenabled DatabaseInstance is ACTIVE. */
        await gapi.client.firebasedatabase.projects.locations.instances.reenable({
            name: "Test string",
        }, {
        });
        /**
         * Restores a DatabaseInstance that was previously marked to be deleted. After the delete method is used, DatabaseInstances are set to the DELETED state for 20 days, and will be purged
         * within 30 days. Databases in the DELETED state can be undeleted without losing any data. This method may only be used on a DatabaseInstance in the DELETED state. Purged
         * DatabaseInstances may not be recovered.
         */
        await gapi.client.firebasedatabase.projects.locations.instances.undelete({
            name: "Test string",
        }, {
        });
    }
});
