/* This is stub file for gapi.client.notebooks-v1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20230613

gapi.load('client', async () => {
    /** now we can use gapi.client */

    await gapi.client.load('https://notebooks.googleapis.com/$discovery/rest?version=v1');
    /** now we can use gapi.client.notebooks */

    /** don't forget to authenticate your client before sending any request to resources: */
    /** declare client_id registered in Google Developers Console */
    const client_id = '<<PUT YOUR CLIENT ID HERE>>';
    const scope = [
        /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
        'https://www.googleapis.com/auth/cloud-platform',
    ];
    const immediate = false;
    gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
        if (authResult && !authResult.error) {
            /** handle successful authorization */
            run();
        } else {
            /** handle authorization error */
        }
    });

    async function run() {
        /** Gets information about a location. */
        await gapi.client.notebooks.projects.locations.get({
            name: "Test string",
        });
        /** Lists information about the supported locations for this service. */
        await gapi.client.notebooks.projects.locations.list({
            filter: "Test string",
            name: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Creates a new Environment. */
        await gapi.client.notebooks.projects.locations.environments.create({
            environmentId: "Test string",
            parent: "Test string",
        }, {
            containerImage: {
                repository: "Test string",
                tag: "Test string",
            },
            createTime: "Test string",
            description: "Test string",
            displayName: "Test string",
            name: "Test string",
            postStartupScript: "Test string",
            vmImage: {
                imageFamily: "Test string",
                imageName: "Test string",
                project: "Test string",
            },
        });
        /** Deletes a single Environment. */
        await gapi.client.notebooks.projects.locations.environments.delete({
            name: "Test string",
        });
        /** Gets details of a single Environment. */
        await gapi.client.notebooks.projects.locations.environments.get({
            name: "Test string",
        });
        /** Lists environments in a project. */
        await gapi.client.notebooks.projects.locations.environments.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Creates a new Execution in a given project and location. */
        await gapi.client.notebooks.projects.locations.executions.create({
            executionId: "Test string",
            parent: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            displayName: "Test string",
            executionTemplate: {
                acceleratorConfig: {
                    coreCount: "Test string",
                    type: "Test string",
                },
                containerImageUri: "Test string",
                dataprocParameters: {
                    cluster: "Test string",
                },
                inputNotebookFile: "Test string",
                jobType: "Test string",
                kernelSpec: "Test string",
                labels: {
                    A: "Test string"
                },
                masterType: "Test string",
                outputNotebookFolder: "Test string",
                parameters: "Test string",
                paramsYamlFile: "Test string",
                scaleTier: "Test string",
                serviceAccount: "Test string",
                tensorboard: "Test string",
                vertexAiParameters: {
                    env: {
                        A: "Test string"
                    },
                    network: "Test string",
                },
            },
            jobUri: "Test string",
            name: "Test string",
            outputNotebookFile: "Test string",
            state: "Test string",
            updateTime: "Test string",
        });
        /** Deletes execution */
        await gapi.client.notebooks.projects.locations.executions.delete({
            name: "Test string",
        });
        /** Gets details of executions */
        await gapi.client.notebooks.projects.locations.executions.get({
            name: "Test string",
        });
        /** Lists executions in a given project and location */
        await gapi.client.notebooks.projects.locations.executions.list({
            filter: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Creates a new Instance in a given project and location. */
        await gapi.client.notebooks.projects.locations.instances.create({
            instanceId: "Test string",
            parent: "Test string",
        }, {
            acceleratorConfig: {
                coreCount: "Test string",
                type: "Test string",
            },
            bootDiskSizeGb: "Test string",
            bootDiskType: "Test string",
            canIpForward: true,
            containerImage: {
                repository: "Test string",
                tag: "Test string",
            },
            createTime: "Test string",
            creator: "Test string",
            customGpuDriverPath: "Test string",
            dataDiskSizeGb: "Test string",
            dataDiskType: "Test string",
            diskEncryption: "Test string",
            disks: [
                {
                    autoDelete: true,
                    boot: true,
                    deviceName: "Test string",
                    diskSizeGb: "Test string",
                    guestOsFeatures: [
                        {
                            type: "Test string",
                        }
                    ],
                    index: "Test string",
                    interface: "Test string",
                    kind: "Test string",
                    licenses: [
                        "Test string"
                    ],
                    mode: "Test string",
                    source: "Test string",
                    type: "Test string",
                }
            ],
            installGpuDriver: true,
            instanceOwners: [
                "Test string"
            ],
            kmsKey: "Test string",
            labels: {
                A: "Test string"
            },
            machineType: "Test string",
            metadata: {
                A: "Test string"
            },
            name: "Test string",
            network: "Test string",
            nicType: "Test string",
            noProxyAccess: true,
            noPublicIp: true,
            noRemoveDataDisk: true,
            postStartupScript: "Test string",
            preMigrationCheck: {
                message: "Test string",
                result: "Test string",
            },
            proxyUri: "Test string",
            reservationAffinity: {
                consumeReservationType: "Test string",
                key: "Test string",
                values: [
                    "Test string"
                ],
            },
            serviceAccount: "Test string",
            serviceAccountScopes: [
                "Test string"
            ],
            shieldedInstanceConfig: {
                enableIntegrityMonitoring: true,
                enableSecureBoot: true,
                enableVtpm: true,
            },
            state: "Test string",
            subnet: "Test string",
            tags: [
                "Test string"
            ],
            updateTime: "Test string",
            upgradeHistory: [
                {
                    action: "Test string",
                    containerImage: "Test string",
                    createTime: "Test string",
                    framework: "Test string",
                    snapshot: "Test string",
                    state: "Test string",
                    targetImage: "Test string",
                    targetVersion: "Test string",
                    version: "Test string",
                    vmImage: "Test string",
                }
            ],
            vmImage: {
                imageFamily: "Test string",
                imageName: "Test string",
                project: "Test string",
            },
        });
        /** Deletes a single Instance. */
        await gapi.client.notebooks.projects.locations.instances.delete({
            name: "Test string",
        });
        /** Creates a Diagnostic File and runs Diagnostic Tool given an Instance. */
        await gapi.client.notebooks.projects.locations.instances.diagnose({
            name: "Test string",
        }, {
            diagnosticConfig: {
                copyHomeFilesFlagEnabled: true,
                gcsBucket: "Test string",
                packetCaptureFlagEnabled: true,
                relativePath: "Test string",
                repairFlagEnabled: true,
            },
        });
        /** Gets details of a single Instance. */
        await gapi.client.notebooks.projects.locations.instances.get({
            name: "Test string",
        });
        /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
        await gapi.client.notebooks.projects.locations.instances.getIamPolicy({
            "options.requestedPolicyVersion": 42,
            resource: "Test string",
        });
        /** Checks whether a notebook instance is healthy. */
        await gapi.client.notebooks.projects.locations.instances.getInstanceHealth({
            name: "Test string",
        });
        /** Checks whether a notebook instance is upgradable. */
        await gapi.client.notebooks.projects.locations.instances.isUpgradeable({
            notebookInstance: "Test string",
            type: "Test string",
        });
        /** Lists instances in a given project and location. */
        await gapi.client.notebooks.projects.locations.instances.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Registers an existing legacy notebook instance to the Notebooks API server. Legacy instances are instances created with the legacy Compute Engine calls. They are not manageable by the
         * Notebooks API out of the box. This call makes these instances manageable by the Notebooks API.
         */
        await gapi.client.notebooks.projects.locations.instances.register({
            parent: "Test string",
        }, {
            instanceId: "Test string",
        });
        /**
         * Allows notebook instances to report their latest instance information to the Notebooks API server. The server will merge the reported information to the instance metadata store. Do not
         * use this method directly.
         */
        await gapi.client.notebooks.projects.locations.instances.report({
            name: "Test string",
        }, {
            metadata: {
                A: "Test string"
            },
            vmId: "Test string",
        });
        /** Reports and processes an instance event. */
        await gapi.client.notebooks.projects.locations.instances.reportEvent({
            name: "Test string",
        }, {
            event: {
                details: {
                    A: "Test string"
                },
                reportTime: "Test string",
                type: "Test string",
            },
            vmId: "Test string",
        });
        /** Resets a notebook instance. */
        await gapi.client.notebooks.projects.locations.instances.reset({
            name: "Test string",
        }, {
        });
        /** Rollbacks a notebook instance to the previous version. */
        await gapi.client.notebooks.projects.locations.instances.rollback({
            name: "Test string",
        }, {
            targetSnapshot: "Test string",
        });
        /** Updates the guest accelerators of a single Instance. */
        await gapi.client.notebooks.projects.locations.instances.setAccelerator({
            name: "Test string",
        }, {
            coreCount: "Test string",
            type: "Test string",
        });
        /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
        await gapi.client.notebooks.projects.locations.instances.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"
                        ],
                        role: "Test string",
                    }
                ],
                etag: "Test string",
                version: 42,
            },
        });
        /** Replaces all the labels of an Instance. */
        await gapi.client.notebooks.projects.locations.instances.setLabels({
            name: "Test string",
        }, {
            labels: {
                A: "Test string"
            },
        });
        /** Updates the machine type of a single Instance. */
        await gapi.client.notebooks.projects.locations.instances.setMachineType({
            name: "Test string",
        }, {
            machineType: "Test string",
        });
        /** Starts a notebook instance. */
        await gapi.client.notebooks.projects.locations.instances.start({
            name: "Test string",
        }, {
        });
        /** Stops a notebook instance. */
        await gapi.client.notebooks.projects.locations.instances.stop({
            name: "Test string",
        }, {
        });
        /**
         * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This
         * operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
         */
        await gapi.client.notebooks.projects.locations.instances.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"
            ],
        });
        /** Update Notebook Instance configurations. */
        await gapi.client.notebooks.projects.locations.instances.updateConfig({
            name: "Test string",
        }, {
            config: {
                enableHealthMonitoring: true,
                notebookUpgradeSchedule: "Test string",
            },
        });
        /** Add/update metadata items for an instance. */
        await gapi.client.notebooks.projects.locations.instances.updateMetadataItems({
            name: "Test string",
        }, {
            items: {
                A: "Test string"
            },
        });
        /** Updates the Shielded instance configuration of a single Instance. */
        await gapi.client.notebooks.projects.locations.instances.updateShieldedInstanceConfig({
            name: "Test string",
        }, {
            shieldedInstanceConfig: {
                enableIntegrityMonitoring: true,
                enableSecureBoot: true,
                enableVtpm: true,
            },
        });
        /** Upgrades a notebook instance to the latest version. */
        await gapi.client.notebooks.projects.locations.instances.upgrade({
            name: "Test string",
        }, {
            type: "Test string",
        });
        /** Allows notebook instances to call this endpoint to upgrade themselves. Do not use this method directly. */
        await gapi.client.notebooks.projects.locations.instances.upgradeInternal({
            name: "Test string",
        }, {
            type: "Test string",
            vmId: "Test string",
        });
        /**
         * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this
         * method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation
         * completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of
         * 1, corresponding to `Code.CANCELLED`.
         */
        await gapi.client.notebooks.projects.locations.operations.cancel({
            name: "Test string",
        }, {
        });
        /**
         * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support
         * this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
         */
        await gapi.client.notebooks.projects.locations.operations.delete({
            name: "Test string",
        });
        /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
        await gapi.client.notebooks.projects.locations.operations.get({
            name: "Test string",
        });
        /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
        await gapi.client.notebooks.projects.locations.operations.list({
            filter: "Test string",
            name: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Creates a new Runtime in a given project and location. */
        await gapi.client.notebooks.projects.locations.runtimes.create({
            parent: "Test string",
            requestId: "Test string",
            runtimeId: "Test string",
        }, {
            accessConfig: {
                accessType: "Test string",
                proxyUri: "Test string",
                runtimeOwner: "Test string",
            },
            createTime: "Test string",
            healthState: "Test string",
            labels: {
                A: "Test string"
            },
            metrics: {
                systemMetrics: {
                    A: "Test string"
                },
            },
            name: "Test string",
            softwareConfig: {
                customGpuDriverPath: "Test string",
                disableTerminal: true,
                enableHealthMonitoring: true,
                idleShutdown: true,
                idleShutdownTimeout: 42,
                installGpuDriver: true,
                kernels: [
                    {
                        repository: "Test string",
                        tag: "Test string",
                    }
                ],
                mixerDisabled: true,
                notebookUpgradeSchedule: "Test string",
                postStartupScript: "Test string",
                postStartupScriptBehavior: "Test string",
                upgradeable: true,
                version: "Test string",
            },
            state: "Test string",
            updateTime: "Test string",
            virtualMachine: {
                instanceId: "Test string",
                instanceName: "Test string",
                virtualMachineConfig: {
                    acceleratorConfig: {
                        coreCount: "Test string",
                        type: "Test string",
                    },
                    bootImage: {
                    },
                    containerImages: [
                        {
                            repository: "Test string",
                            tag: "Test string",
                        }
                    ],
                    dataDisk: {
                        autoDelete: true,
                        boot: true,
                        deviceName: "Test string",
                        guestOsFeatures: [
                            {
                                type: "Test string",
                            }
                        ],
                        index: 42,
                        initializeParams: {
                            description: "Test string",
                            diskName: "Test string",
                            diskSizeGb: "Test string",
                            diskType: "Test string",
                            labels: {
                                A: "Test string"
                            },
                        },
                        interface: "Test string",
                        kind: "Test string",
                        licenses: [
                            "Test string"
                        ],
                        mode: "Test string",
                        source: "Test string",
                        type: "Test string",
                    },
                    encryptionConfig: {
                        kmsKey: "Test string",
                    },
                    guestAttributes: {
                        A: "Test string"
                    },
                    internalIpOnly: true,
                    labels: {
                        A: "Test string"
                    },
                    machineType: "Test string",
                    metadata: {
                        A: "Test string"
                    },
                    network: "Test string",
                    nicType: "Test string",
                    reservedIpRange: "Test string",
                    shieldedInstanceConfig: {
                        enableIntegrityMonitoring: true,
                        enableSecureBoot: true,
                        enableVtpm: true,
                    },
                    subnet: "Test string",
                    tags: [
                        "Test string"
                    ],
                    zone: "Test string",
                },
            },
        });
        /** Deletes a single Runtime. */
        await gapi.client.notebooks.projects.locations.runtimes.delete({
            name: "Test string",
            requestId: "Test string",
        });
        /** Creates a Diagnostic File and runs Diagnostic Tool given a Runtime. */
        await gapi.client.notebooks.projects.locations.runtimes.diagnose({
            name: "Test string",
        }, {
            diagnosticConfig: {
                copyHomeFilesFlagEnabled: true,
                gcsBucket: "Test string",
                packetCaptureFlagEnabled: true,
                relativePath: "Test string",
                repairFlagEnabled: true,
            },
        });
        /** Gets details of a single Runtime. The location must be a regional endpoint rather than zonal. */
        await gapi.client.notebooks.projects.locations.runtimes.get({
            name: "Test string",
        });
        /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
        await gapi.client.notebooks.projects.locations.runtimes.getIamPolicy({
            "options.requestedPolicyVersion": 42,
            resource: "Test string",
        });
        /** Lists Runtimes in a given project and location. */
        await gapi.client.notebooks.projects.locations.runtimes.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Update Notebook Runtime configuration. */
        await gapi.client.notebooks.projects.locations.runtimes.patch({
            name: "Test string",
            requestId: "Test string",
            updateMask: "Test string",
        }, {
            accessConfig: {
                accessType: "Test string",
                proxyUri: "Test string",
                runtimeOwner: "Test string",
            },
            createTime: "Test string",
            healthState: "Test string",
            labels: {
                A: "Test string"
            },
            metrics: {
                systemMetrics: {
                    A: "Test string"
                },
            },
            name: "Test string",
            softwareConfig: {
                customGpuDriverPath: "Test string",
                disableTerminal: true,
                enableHealthMonitoring: true,
                idleShutdown: true,
                idleShutdownTimeout: 42,
                installGpuDriver: true,
                kernels: [
                    {
                        repository: "Test string",
                        tag: "Test string",
                    }
                ],
                mixerDisabled: true,
                notebookUpgradeSchedule: "Test string",
                postStartupScript: "Test string",
                postStartupScriptBehavior: "Test string",
                upgradeable: true,
                version: "Test string",
            },
            state: "Test string",
            updateTime: "Test string",
            virtualMachine: {
                instanceId: "Test string",
                instanceName: "Test string",
                virtualMachineConfig: {
                    acceleratorConfig: {
                        coreCount: "Test string",
                        type: "Test string",
                    },
                    bootImage: {
                    },
                    containerImages: [
                        {
                            repository: "Test string",
                            tag: "Test string",
                        }
                    ],
                    dataDisk: {
                        autoDelete: true,
                        boot: true,
                        deviceName: "Test string",
                        guestOsFeatures: [
                            {
                                type: "Test string",
                            }
                        ],
                        index: 42,
                        initializeParams: {
                            description: "Test string",
                            diskName: "Test string",
                            diskSizeGb: "Test string",
                            diskType: "Test string",
                            labels: {
                                A: "Test string"
                            },
                        },
                        interface: "Test string",
                        kind: "Test string",
                        licenses: [
                            "Test string"
                        ],
                        mode: "Test string",
                        source: "Test string",
                        type: "Test string",
                    },
                    encryptionConfig: {
                        kmsKey: "Test string",
                    },
                    guestAttributes: {
                        A: "Test string"
                    },
                    internalIpOnly: true,
                    labels: {
                        A: "Test string"
                    },
                    machineType: "Test string",
                    metadata: {
                        A: "Test string"
                    },
                    network: "Test string",
                    nicType: "Test string",
                    reservedIpRange: "Test string",
                    shieldedInstanceConfig: {
                        enableIntegrityMonitoring: true,
                        enableSecureBoot: true,
                        enableVtpm: true,
                    },
                    subnet: "Test string",
                    tags: [
                        "Test string"
                    ],
                    zone: "Test string",
                },
            },
        });
        /** Gets an access token for the consumer service account that the customer attached to the runtime. Only accessible from the tenant instance. */
        await gapi.client.notebooks.projects.locations.runtimes.refreshRuntimeTokenInternal({
            name: "Test string",
        }, {
            vmId: "Test string",
        });
        /** Reports and processes a runtime event. */
        await gapi.client.notebooks.projects.locations.runtimes.reportEvent({
            name: "Test string",
        }, {
            event: {
                details: {
                    A: "Test string"
                },
                reportTime: "Test string",
                type: "Test string",
            },
            vmId: "Test string",
        });
        /** Resets a Managed Notebook Runtime. */
        await gapi.client.notebooks.projects.locations.runtimes.reset({
            name: "Test string",
        }, {
            requestId: "Test string",
        });
        /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
        await gapi.client.notebooks.projects.locations.runtimes.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"
                        ],
                        role: "Test string",
                    }
                ],
                etag: "Test string",
                version: 42,
            },
        });
        /**
         * Starts a Managed Notebook Runtime. Perform "Start" on GPU instances; "Resume" on CPU instances See: https://cloud.google.com/compute/docs/instances/stop-start-instance
         * https://cloud.google.com/compute/docs/instances/suspend-resume-instance
         */
        await gapi.client.notebooks.projects.locations.runtimes.start({
            name: "Test string",
        }, {
            requestId: "Test string",
        });
        /**
         * Stops a Managed Notebook Runtime. Perform "Stop" on GPU instances; "Suspend" on CPU instances See: https://cloud.google.com/compute/docs/instances/stop-start-instance
         * https://cloud.google.com/compute/docs/instances/suspend-resume-instance
         */
        await gapi.client.notebooks.projects.locations.runtimes.stop({
            name: "Test string",
        }, {
            requestId: "Test string",
        });
        /** Switch a Managed Notebook Runtime. */
        await gapi.client.notebooks.projects.locations.runtimes.switch({
            name: "Test string",
        }, {
            acceleratorConfig: {
                coreCount: "Test string",
                type: "Test string",
            },
            machineType: "Test string",
            requestId: "Test string",
        });
        /**
         * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This
         * operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
         */
        await gapi.client.notebooks.projects.locations.runtimes.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"
            ],
        });
        /** Upgrades a Managed Notebook Runtime to the latest version. */
        await gapi.client.notebooks.projects.locations.runtimes.upgrade({
            name: "Test string",
        }, {
            requestId: "Test string",
        });
        /** Creates a new Scheduled Notebook in a given project and location. */
        await gapi.client.notebooks.projects.locations.schedules.create({
            parent: "Test string",
            scheduleId: "Test string",
        }, {
            createTime: "Test string",
            cronSchedule: "Test string",
            description: "Test string",
            displayName: "Test string",
            executionTemplate: {
                acceleratorConfig: {
                    coreCount: "Test string",
                    type: "Test string",
                },
                containerImageUri: "Test string",
                dataprocParameters: {
                    cluster: "Test string",
                },
                inputNotebookFile: "Test string",
                jobType: "Test string",
                kernelSpec: "Test string",
                labels: {
                    A: "Test string"
                },
                masterType: "Test string",
                outputNotebookFolder: "Test string",
                parameters: "Test string",
                paramsYamlFile: "Test string",
                scaleTier: "Test string",
                serviceAccount: "Test string",
                tensorboard: "Test string",
                vertexAiParameters: {
                    env: {
                        A: "Test string"
                    },
                    network: "Test string",
                },
            },
            name: "Test string",
            recentExecutions: [
                {
                    createTime: "Test string",
                    description: "Test string",
                    displayName: "Test string",
                    executionTemplate: {
                        acceleratorConfig: {
                            coreCount: "Test string",
                            type: "Test string",
                        },
                        containerImageUri: "Test string",
                        dataprocParameters: {
                            cluster: "Test string",
                        },
                        inputNotebookFile: "Test string",
                        jobType: "Test string",
                        kernelSpec: "Test string",
                        labels: {
                            A: "Test string"
                        },
                        masterType: "Test string",
                        outputNotebookFolder: "Test string",
                        parameters: "Test string",
                        paramsYamlFile: "Test string",
                        scaleTier: "Test string",
                        serviceAccount: "Test string",
                        tensorboard: "Test string",
                        vertexAiParameters: {
                            env: {
                                A: "Test string"
                            },
                            network: "Test string",
                        },
                    },
                    jobUri: "Test string",
                    name: "Test string",
                    outputNotebookFile: "Test string",
                    state: "Test string",
                    updateTime: "Test string",
                }
            ],
            state: "Test string",
            timeZone: "Test string",
            updateTime: "Test string",
        });
        /** Deletes schedule and all underlying jobs */
        await gapi.client.notebooks.projects.locations.schedules.delete({
            name: "Test string",
        });
        /** Gets details of schedule */
        await gapi.client.notebooks.projects.locations.schedules.get({
            name: "Test string",
        });
        /** Lists schedules in a given project and location. */
        await gapi.client.notebooks.projects.locations.schedules.list({
            filter: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Triggers execution of an existing schedule. */
        await gapi.client.notebooks.projects.locations.schedules.trigger({
            name: "Test string",
        }, {
        });
    }
});
