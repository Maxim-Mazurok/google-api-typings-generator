/* Type definitions for non-npm package Bare Metal Solution API v2 2.0 */
// Project: https://cloud.google.com/bare-metal
// Definitions by: Maxim Mazurok <https://github.com/Maxim-Mazurok>
//                 Nick Amoscato <https://github.com/namoscato>
//                 Declan Vong <https://github.com/declanvong>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 2.8

// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
// Generated from: https://baremetalsolution.googleapis.com/$discovery/rest?version=v2
// Revision: 20211008

/// <reference types="gapi.client" />

declare namespace gapi.client {
    /** Load Bare Metal Solution API v2 */
    function load(name: "baremetalsolution", version: "v2"): PromiseLike<void>;
    function load(name: "baremetalsolution", version: "v2", callback: () => any): void;

    namespace baremetalsolution {
        interface Instance {
            /** Output only. Create a time stamp. */
            createTime?: string;
            /** True if you enable hyperthreading for the server, otherwise false. The default value is false. */
            hyperthreadingEnabled?: boolean;
            /** True if the interactive serial console feature is enabled for the instance, false otherwise. The default value is false. */
            interactiveSerialConsoleEnabled?: boolean;
            /** Labels as key value pairs. */
            labels?: { [P in string]: string };
            /** List of LUNs associated with this server. */
            luns?: Lun[];
            /** The server type. [Available server types](https://cloud.google.com/bare-metal/docs/bms-planning#server_configurations) */
            machineType?: string;
            /**
             * Output only. The resource name of this `Instance`. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. Format:
             * `projects/{project}/locations/{location}/instances/{instance}`
             */
            name?: string;
            /** List of networks associated with this server. */
            networks?: Network[];
            /** The state of the server. */
            state?: string;
            /** Output only. Update a time stamp. */
            updateTime?: string;
        }
        interface ListInstancesResponse {
            /** The list of servers. */
            instances?: Instance[];
            /** A token identifying a page of results from the server. */
            nextPageToken?: string;
            /** Locations that could not be reached. */
            unreachable?: string[];
        }
        interface ListLocationsResponse {
            /** A list of locations that matches the specified filter in the request. */
            locations?: Location[];
            /** The standard List next-page token. */
            nextPageToken?: string;
        }
        interface ListLunsResponse {
            /** The list of luns. */
            luns?: Lun[];
            /** A token identifying a page of results from the server. */
            nextPageToken?: string;
            /** Locations that could not be reached. */
            unreachable?: string[];
        }
        interface Location {
            /** The friendly name for this location, typically a nearby city name. For example, "Tokyo". */
            displayName?: string;
            /** Cross-service attributes for the location. For example {"cloud.googleapis.com/region": "us-east1"} */
            labels?: { [P in string]: string };
            /** The canonical id for this location. For example: `"us-east1"`. */
            locationId?: string;
            /** Service-specific metadata. For example the available capacity at the given location. */
            metadata?: { [P in string]: any };
            /** Resource name for the location, which may vary between implementations. For example: `"projects/example-project/locations/us-east1"` */
            name?: string;
        }
        interface Lun {
            /** Display if this LUN is a boot LUN. */
            bootLun?: boolean;
            /** The LUN multiprotocol type ensures the characteristics of the LUN are optimized for each operating system. */
            multiprotocolType?: string;
            /** Output only. The name of the LUN. */
            name?: string;
            /** Display if this LUN can be shared between multiple physical servers. */
            shareable?: boolean;
            /** The size of this LUN, in gigabytes. */
            sizeGb?: string;
            /** The state of this storage volume. */
            state?: string;
            /** The storage type for this LUN. */
            storageType?: string;
            /** Display the storage volume for this LUN. */
            storageVolume?: string;
            /** The WWID for this LUN. */
            wwid?: string;
        }
        interface Network {
            /** The cidr of the Network. */
            cidr?: string;
            /** IP address configured. */
            ipAddress?: string;
            /** List of physical interfaces. */
            macAddress?: string[];
            /**
             * Output only. The resource name of this `Network`. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. Format:
             * `projects/{project}/locations/{location}/networks/{network}` This field will contain the same value as field "network", which will soon be deprecated. Please use this field to
             * reference the name of the network resource.
             */
            name?: string;
            /** Name of the network. */
            network?: string;
            /** The Network state. */
            state?: string;
            /** The type of this network. */
            type?: string;
            /** The vlan id of the Network. */
            vlanId?: string;
            /** The vrf for the Network. */
            vrf?: VRF;
        }
        interface VRF {
            /** The autonomous system number of the VRF. */
            autonomousSystemNumber?: string;
            /** The Juniper alias of the VRF. */
            juniperAlias?: string;
            /** The name of the VRF. */
            name?: string;
            /** The route target of the VRF. */
            routeTarget?: string;
            /** The possible state of VRF. */
            state?: string;
        }
        interface InstancesResource {
            /** Get details about a single server. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Required. Name of the resource. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Instance>;
            /** List servers in a given project and location. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Filtering results. */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Hint for how to order the results. */
                orderBy?: string;
                /** Requested page size. Server may return fewer items than requested. If unspecified, the server will pick an appropriate default. */
                pageSize?: number;
                /** A token identifying a page of results from the server. */
                pageToken?: string;
                /** Required. Parent value for ListInstancesRequest. */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListInstancesResponse>;
        }
        interface LunsResource {
            /** Get details of a single storage lun. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Required. Name of the resource. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Lun>;
            /** List storage volume luns for given storage volume. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Filtering results. */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Hint for how to order the results. */
                orderBy?: string;
                /** Requested page size. The server might return fewer items than requested. If unspecified, server will pick an appropriate default. */
                pageSize?: number;
                /** A token identifying a page of results from the server. */
                pageToken?: string;
                /** Required. Parent value for ListLunsRequest. */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListLunsResponse>;
        }
        interface VolumesResource {
            luns: LunsResource;
        }
        interface LocationsResource {
            /** Gets information about a location. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Resource name for the location. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Location>;
            /** Lists information about the supported locations for this service. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter to narrow down results to a preferred subset. The filtering language accepts strings like "displayName=tokyo", and is documented in more detail in
                 * [AIP-160](https://google.aip.dev/160).
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The resource that owns the locations collection, if applicable. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The maximum number of results to return. If not set, the service selects a default. */
                pageSize?: number;
                /** A page token received from the `next_page_token` field in the response. Send that page token to receive the subsequent page. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListLocationsResponse>;
            instances: InstancesResource;
            volumes: VolumesResource;
        }
        interface ProjectsResource {
            locations: LocationsResource;
        }

        const projects: ProjectsResource;
    }
}
