/* This is stub file for gapi.client.firebaseappdistribution-v1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20230811

gapi.load('client', async () => {
    /** now we can use gapi.client */

    await gapi.client.load('https://firebaseappdistribution.googleapis.com/$discovery/rest?version=v1');
    /** now we can use gapi.client.firebaseappdistribution */

    /** don't forget to authenticate your client before sending any request to resources: */
    /** declare client_id registered in Google Developers Console */
    const client_id = '<<PUT YOUR CLIENT ID HERE>>';
    const scope = [
        /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
        'https://www.googleapis.com/auth/cloud-platform',
    ];
    const immediate = false;
    gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
        if (authResult && !authResult.error) {
            /** handle successful authorization */
            run();
        } else {
            /** handle authorization error */
        }
    });

    async function run() {
        /** Uploads a binary. Uploading a binary can result in a new release being created, an update to an existing release, or a no-op if a release with the same binary already exists. */
        await gapi.client.firebaseappdistribution.media.upload({
            app: "Test string",
        }, {
            blob: {
                algorithm: "Test string",
                bigstoreObjectRef: "Test string",
                blobRef: "Test string",
                blobstore2Info: {
                    blobGeneration: "Test string",
                    blobId: "Test string",
                    downloadReadHandle: "Test string",
                    readToken: "Test string",
                    uploadMetadataContainer: "Test string",
                },
                compositeMedia: [
                    {
                        blobRef: "Test string",
                        blobstore2Info: {
                            blobGeneration: "Test string",
                            blobId: "Test string",
                            downloadReadHandle: "Test string",
                            readToken: "Test string",
                            uploadMetadataContainer: "Test string",
                        },
                        cosmoBinaryReference: "Test string",
                        crc32cHash: 42,
                        inline: "Test string",
                        length: "Test string",
                        md5Hash: "Test string",
                        objectId: {
                            bucketName: "Test string",
                            generation: "Test string",
                            objectName: "Test string",
                        },
                        path: "Test string",
                        referenceType: "Test string",
                        sha1Hash: "Test string",
                    }
                ],
                contentType: "Test string",
                contentTypeInfo: {
                    bestGuess: "Test string",
                    fromBytes: "Test string",
                    fromFileName: "Test string",
                    fromHeader: "Test string",
                    fromUrlPath: "Test string",
                },
                cosmoBinaryReference: "Test string",
                crc32cHash: 42,
                diffChecksumsResponse: {
                    checksumsLocation: {
                        blobRef: "Test string",
                        blobstore2Info: {
                            blobGeneration: "Test string",
                            blobId: "Test string",
                            downloadReadHandle: "Test string",
                            readToken: "Test string",
                            uploadMetadataContainer: "Test string",
                        },
                        cosmoBinaryReference: "Test string",
                        crc32cHash: 42,
                        inline: "Test string",
                        length: "Test string",
                        md5Hash: "Test string",
                        objectId: {
                            bucketName: "Test string",
                            generation: "Test string",
                            objectName: "Test string",
                        },
                        path: "Test string",
                        referenceType: "Test string",
                        sha1Hash: "Test string",
                    },
                    chunkSizeBytes: "Test string",
                    objectLocation: {
                        blobRef: "Test string",
                        blobstore2Info: {
                            blobGeneration: "Test string",
                            blobId: "Test string",
                            downloadReadHandle: "Test string",
                            readToken: "Test string",
                            uploadMetadataContainer: "Test string",
                        },
                        cosmoBinaryReference: "Test string",
                        crc32cHash: 42,
                        inline: "Test string",
                        length: "Test string",
                        md5Hash: "Test string",
                        objectId: {
                            bucketName: "Test string",
                            generation: "Test string",
                            objectName: "Test string",
                        },
                        path: "Test string",
                        referenceType: "Test string",
                        sha1Hash: "Test string",
                    },
                    objectSizeBytes: "Test string",
                    objectVersion: "Test string",
                },
                diffDownloadResponse: {
                    objectLocation: {
                        blobRef: "Test string",
                        blobstore2Info: {
                            blobGeneration: "Test string",
                            blobId: "Test string",
                            downloadReadHandle: "Test string",
                            readToken: "Test string",
                            uploadMetadataContainer: "Test string",
                        },
                        cosmoBinaryReference: "Test string",
                        crc32cHash: 42,
                        inline: "Test string",
                        length: "Test string",
                        md5Hash: "Test string",
                        objectId: {
                            bucketName: "Test string",
                            generation: "Test string",
                            objectName: "Test string",
                        },
                        path: "Test string",
                        referenceType: "Test string",
                        sha1Hash: "Test string",
                    },
                },
                diffUploadRequest: {
                    checksumsInfo: {
                        blobRef: "Test string",
                        blobstore2Info: {
                            blobGeneration: "Test string",
                            blobId: "Test string",
                            downloadReadHandle: "Test string",
                            readToken: "Test string",
                            uploadMetadataContainer: "Test string",
                        },
                        cosmoBinaryReference: "Test string",
                        crc32cHash: 42,
                        inline: "Test string",
                        length: "Test string",
                        md5Hash: "Test string",
                        objectId: {
                            bucketName: "Test string",
                            generation: "Test string",
                            objectName: "Test string",
                        },
                        path: "Test string",
                        referenceType: "Test string",
                        sha1Hash: "Test string",
                    },
                    objectInfo: {
                        blobRef: "Test string",
                        blobstore2Info: {
                            blobGeneration: "Test string",
                            blobId: "Test string",
                            downloadReadHandle: "Test string",
                            readToken: "Test string",
                            uploadMetadataContainer: "Test string",
                        },
                        cosmoBinaryReference: "Test string",
                        crc32cHash: 42,
                        inline: "Test string",
                        length: "Test string",
                        md5Hash: "Test string",
                        objectId: {
                            bucketName: "Test string",
                            generation: "Test string",
                            objectName: "Test string",
                        },
                        path: "Test string",
                        referenceType: "Test string",
                        sha1Hash: "Test string",
                    },
                    objectVersion: "Test string",
                },
                diffUploadResponse: {
                    objectVersion: "Test string",
                    originalObject: {
                        blobRef: "Test string",
                        blobstore2Info: {
                            blobGeneration: "Test string",
                            blobId: "Test string",
                            downloadReadHandle: "Test string",
                            readToken: "Test string",
                            uploadMetadataContainer: "Test string",
                        },
                        cosmoBinaryReference: "Test string",
                        crc32cHash: 42,
                        inline: "Test string",
                        length: "Test string",
                        md5Hash: "Test string",
                        objectId: {
                            bucketName: "Test string",
                            generation: "Test string",
                            objectName: "Test string",
                        },
                        path: "Test string",
                        referenceType: "Test string",
                        sha1Hash: "Test string",
                    },
                },
                diffVersionResponse: {
                    objectSizeBytes: "Test string",
                    objectVersion: "Test string",
                },
                downloadParameters: {
                    allowGzipCompression: true,
                    ignoreRange: true,
                },
                filename: "Test string",
                hash: "Test string",
                hashVerified: true,
                inline: "Test string",
                isPotentialRetry: true,
                length: "Test string",
                md5Hash: "Test string",
                mediaId: "Test string",
                objectId: {
                    bucketName: "Test string",
                    generation: "Test string",
                    objectName: "Test string",
                },
                path: "Test string",
                referenceType: "Test string",
                sha1Hash: "Test string",
                sha256Hash: "Test string",
                timestamp: "Test string",
                token: "Test string",
            },
        });
        /** Gets Android App Bundle (AAB) information for a Firebase app. */
        await gapi.client.firebaseappdistribution.projects.apps.getAabInfo({
            name: "Test string",
        });
        /** Deletes releases. A maximum of 100 releases can be deleted per request. */
        await gapi.client.firebaseappdistribution.projects.apps.releases.batchDelete({
            parent: "Test string",
        }, {
            names: [
                "Test string"
            ],
        });
        /**
         * Distributes a release to testers. This call does the following: 1. Creates testers for the specified emails, if none exist. 2. Adds the testers and groups to the release. 3. Sends new
         * testers an invitation email. 4. Sends existing testers a new release email. The request will fail with a `INVALID_ARGUMENT` if it contains a group that doesn't exist.
         */
        await gapi.client.firebaseappdistribution.projects.apps.releases.distribute({
            name: "Test string",
        }, {
            groupAliases: [
                "Test string"
            ],
            testerEmails: [
                "Test string"
            ],
        });
        /** Gets a release. */
        await gapi.client.firebaseappdistribution.projects.apps.releases.get({
            name: "Test string",
        });
        /** Lists releases. By default, sorts by `createTime` in descending order. */
        await gapi.client.firebaseappdistribution.projects.apps.releases.list({
            filter: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a release. */
        await gapi.client.firebaseappdistribution.projects.apps.releases.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            binaryDownloadUri: "Test string",
            buildVersion: "Test string",
            createTime: "Test string",
            displayVersion: "Test string",
            firebaseConsoleUri: "Test string",
            name: "Test string",
            releaseNotes: {
                text: "Test string",
            },
            testingUri: "Test string",
        });
        /** Deletes a feedback report. */
        await gapi.client.firebaseappdistribution.projects.apps.releases.feedbackReports.delete({
            name: "Test string",
        });
        /** Gets a feedback report. */
        await gapi.client.firebaseappdistribution.projects.apps.releases.feedbackReports.get({
            name: "Test string",
        });
        /** Lists feedback reports. By default, sorts by `createTime` in descending order. */
        await gapi.client.firebaseappdistribution.projects.apps.releases.feedbackReports.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this
         * method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation
         * completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of
         * 1, corresponding to `Code.CANCELLED`.
         */
        await gapi.client.firebaseappdistribution.projects.apps.releases.operations.cancel({
            name: "Test string",
        }, {
        });
        /**
         * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support
         * this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
         */
        await gapi.client.firebaseappdistribution.projects.apps.releases.operations.delete({
            name: "Test string",
        });
        /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
        await gapi.client.firebaseappdistribution.projects.apps.releases.operations.get({
            name: "Test string",
        });
        /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
        await gapi.client.firebaseappdistribution.projects.apps.releases.operations.list({
            filter: "Test string",
            name: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /**
         * Waits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is
         * immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns
         * `google.rpc.Code.UNIMPLEMENTED`. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an
         * immediate response is no guarantee that the operation is done.
         */
        await gapi.client.firebaseappdistribution.projects.apps.releases.operations.wait({
            name: "Test string",
        }, {
            timeout: "Test string",
        });
        /** Batch adds members to a group. The testers will gain access to all releases that the groups have access to. */
        await gapi.client.firebaseappdistribution.projects.groups.batchJoin({
            group: "Test string",
        }, {
            createMissingTesters: true,
            emails: [
                "Test string"
            ],
        });
        /** Batch removed members from a group. The testers will lose access to all releases that the groups have access to. */
        await gapi.client.firebaseappdistribution.projects.groups.batchLeave({
            group: "Test string",
        }, {
            emails: [
                "Test string"
            ],
        });
        /** Create a group. */
        await gapi.client.firebaseappdistribution.projects.groups.create({
            groupId: "Test string",
            parent: "Test string",
        }, {
            displayName: "Test string",
            inviteLinkCount: 42,
            name: "Test string",
            releaseCount: 42,
            testerCount: 42,
        });
        /** Delete a group. */
        await gapi.client.firebaseappdistribution.projects.groups.delete({
            name: "Test string",
        });
        /** Get a group. */
        await gapi.client.firebaseappdistribution.projects.groups.get({
            name: "Test string",
        });
        /** List groups. */
        await gapi.client.firebaseappdistribution.projects.groups.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Update a group. */
        await gapi.client.firebaseappdistribution.projects.groups.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            displayName: "Test string",
            inviteLinkCount: 42,
            name: "Test string",
            releaseCount: 42,
            testerCount: 42,
        });
        /**
         * Batch adds testers. This call adds testers for the specified emails if they don't already exist. Returns all testers specified in the request, including newly created and previously
         * existing testers. This action is idempotent.
         */
        await gapi.client.firebaseappdistribution.projects.testers.batchAdd({
            project: "Test string",
        }, {
            emails: [
                "Test string"
            ],
        });
        /** Batch removes testers. If found, this call deletes testers for the specified emails. Returns all deleted testers. */
        await gapi.client.firebaseappdistribution.projects.testers.batchRemove({
            project: "Test string",
        }, {
            emails: [
                "Test string"
            ],
        });
        /** Lists testers and their resource ids. */
        await gapi.client.firebaseappdistribution.projects.testers.list({
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Update a tester. If the testers joins a group they gain access to all releases that the group has access to. */
        await gapi.client.firebaseappdistribution.projects.testers.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            displayName: "Test string",
            groups: [
                "Test string"
            ],
            lastActivityTime: "Test string",
            name: "Test string",
        });
    }
});
