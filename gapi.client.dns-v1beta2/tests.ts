/* This is stub file for gapi.client.dns-v1beta2 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20231218

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://dns.googleapis.com/$discovery/rest?version=v1beta2'
  );
  /** now we can use gapi.client.dns */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
    'https://www.googleapis.com/auth/cloud-platform',
    /** View your data across Google Cloud services and see the email address of your Google Account */
    'https://www.googleapis.com/auth/cloud-platform.read-only',
    /** View your DNS records hosted by Google Cloud DNS */
    'https://www.googleapis.com/auth/ndev.clouddns.readonly',
    /** View and manage your DNS records hosted by Google Cloud DNS */
    'https://www.googleapis.com/auth/ndev.clouddns.readwrite',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Atomically updates the ResourceRecordSet collection. */
    await gapi.client.dns.changes.create(
      {
        clientOperationId: 'Test string',
        managedZone: 'Test string',
        project: 'Test string',
      },
      {
        additions: [
          {
            kind: 'Test string',
            name: 'Test string',
            routingPolicy: {
              geo: {
                enableFencing: true,
                items: [
                  {
                    healthCheckedTargets: {
                      externalEndpoints: ['Test string'],
                      internalLoadBalancers: [
                        {
                          ipAddress: 'Test string',
                          ipProtocol: 'Test string',
                          kind: 'Test string',
                          loadBalancerType: 'Test string',
                          networkUrl: 'Test string',
                          port: 'Test string',
                          project: 'Test string',
                          region: 'Test string',
                        },
                      ],
                    },
                    kind: 'Test string',
                    location: 'Test string',
                    rrdatas: ['Test string'],
                    signatureRrdatas: ['Test string'],
                  },
                ],
                kind: 'Test string',
              },
              geoPolicy: {
                enableFencing: true,
                items: [
                  {
                    healthCheckedTargets: {
                      externalEndpoints: ['Test string'],
                      internalLoadBalancers: [
                        {
                          ipAddress: 'Test string',
                          ipProtocol: 'Test string',
                          kind: 'Test string',
                          loadBalancerType: 'Test string',
                          networkUrl: 'Test string',
                          port: 'Test string',
                          project: 'Test string',
                          region: 'Test string',
                        },
                      ],
                    },
                    kind: 'Test string',
                    location: 'Test string',
                    rrdatas: ['Test string'],
                    signatureRrdatas: ['Test string'],
                  },
                ],
                kind: 'Test string',
              },
              healthCheck: 'Test string',
              kind: 'Test string',
              primaryBackup: {
                backupGeoTargets: {
                  enableFencing: true,
                  items: [
                    {
                      healthCheckedTargets: {
                        externalEndpoints: ['Test string'],
                        internalLoadBalancers: [
                          {
                            ipAddress: 'Test string',
                            ipProtocol: 'Test string',
                            kind: 'Test string',
                            loadBalancerType: 'Test string',
                            networkUrl: 'Test string',
                            port: 'Test string',
                            project: 'Test string',
                            region: 'Test string',
                          },
                        ],
                      },
                      kind: 'Test string',
                      location: 'Test string',
                      rrdatas: ['Test string'],
                      signatureRrdatas: ['Test string'],
                    },
                  ],
                  kind: 'Test string',
                },
                kind: 'Test string',
                primaryTargets: {
                  externalEndpoints: ['Test string'],
                  internalLoadBalancers: [
                    {
                      ipAddress: 'Test string',
                      ipProtocol: 'Test string',
                      kind: 'Test string',
                      loadBalancerType: 'Test string',
                      networkUrl: 'Test string',
                      port: 'Test string',
                      project: 'Test string',
                      region: 'Test string',
                    },
                  ],
                },
                trickleTraffic: 42,
              },
              wrr: {
                items: [
                  {
                    healthCheckedTargets: {
                      externalEndpoints: ['Test string'],
                      internalLoadBalancers: [
                        {
                          ipAddress: 'Test string',
                          ipProtocol: 'Test string',
                          kind: 'Test string',
                          loadBalancerType: 'Test string',
                          networkUrl: 'Test string',
                          port: 'Test string',
                          project: 'Test string',
                          region: 'Test string',
                        },
                      ],
                    },
                    kind: 'Test string',
                    rrdatas: ['Test string'],
                    signatureRrdatas: ['Test string'],
                    weight: 42,
                  },
                ],
                kind: 'Test string',
              },
              wrrPolicy: {
                items: [
                  {
                    healthCheckedTargets: {
                      externalEndpoints: ['Test string'],
                      internalLoadBalancers: [
                        {
                          ipAddress: 'Test string',
                          ipProtocol: 'Test string',
                          kind: 'Test string',
                          loadBalancerType: 'Test string',
                          networkUrl: 'Test string',
                          port: 'Test string',
                          project: 'Test string',
                          region: 'Test string',
                        },
                      ],
                    },
                    kind: 'Test string',
                    rrdatas: ['Test string'],
                    signatureRrdatas: ['Test string'],
                    weight: 42,
                  },
                ],
                kind: 'Test string',
              },
            },
            rrdatas: ['Test string'],
            signatureRrdatas: ['Test string'],
            ttl: 42,
            type: 'Test string',
          },
        ],
        deletions: [
          {
            kind: 'Test string',
            name: 'Test string',
            routingPolicy: {
              geo: {
                enableFencing: true,
                items: [
                  {
                    healthCheckedTargets: {
                      externalEndpoints: ['Test string'],
                      internalLoadBalancers: [
                        {
                          ipAddress: 'Test string',
                          ipProtocol: 'Test string',
                          kind: 'Test string',
                          loadBalancerType: 'Test string',
                          networkUrl: 'Test string',
                          port: 'Test string',
                          project: 'Test string',
                          region: 'Test string',
                        },
                      ],
                    },
                    kind: 'Test string',
                    location: 'Test string',
                    rrdatas: ['Test string'],
                    signatureRrdatas: ['Test string'],
                  },
                ],
                kind: 'Test string',
              },
              geoPolicy: {
                enableFencing: true,
                items: [
                  {
                    healthCheckedTargets: {
                      externalEndpoints: ['Test string'],
                      internalLoadBalancers: [
                        {
                          ipAddress: 'Test string',
                          ipProtocol: 'Test string',
                          kind: 'Test string',
                          loadBalancerType: 'Test string',
                          networkUrl: 'Test string',
                          port: 'Test string',
                          project: 'Test string',
                          region: 'Test string',
                        },
                      ],
                    },
                    kind: 'Test string',
                    location: 'Test string',
                    rrdatas: ['Test string'],
                    signatureRrdatas: ['Test string'],
                  },
                ],
                kind: 'Test string',
              },
              healthCheck: 'Test string',
              kind: 'Test string',
              primaryBackup: {
                backupGeoTargets: {
                  enableFencing: true,
                  items: [
                    {
                      healthCheckedTargets: {
                        externalEndpoints: ['Test string'],
                        internalLoadBalancers: [
                          {
                            ipAddress: 'Test string',
                            ipProtocol: 'Test string',
                            kind: 'Test string',
                            loadBalancerType: 'Test string',
                            networkUrl: 'Test string',
                            port: 'Test string',
                            project: 'Test string',
                            region: 'Test string',
                          },
                        ],
                      },
                      kind: 'Test string',
                      location: 'Test string',
                      rrdatas: ['Test string'],
                      signatureRrdatas: ['Test string'],
                    },
                  ],
                  kind: 'Test string',
                },
                kind: 'Test string',
                primaryTargets: {
                  externalEndpoints: ['Test string'],
                  internalLoadBalancers: [
                    {
                      ipAddress: 'Test string',
                      ipProtocol: 'Test string',
                      kind: 'Test string',
                      loadBalancerType: 'Test string',
                      networkUrl: 'Test string',
                      port: 'Test string',
                      project: 'Test string',
                      region: 'Test string',
                    },
                  ],
                },
                trickleTraffic: 42,
              },
              wrr: {
                items: [
                  {
                    healthCheckedTargets: {
                      externalEndpoints: ['Test string'],
                      internalLoadBalancers: [
                        {
                          ipAddress: 'Test string',
                          ipProtocol: 'Test string',
                          kind: 'Test string',
                          loadBalancerType: 'Test string',
                          networkUrl: 'Test string',
                          port: 'Test string',
                          project: 'Test string',
                          region: 'Test string',
                        },
                      ],
                    },
                    kind: 'Test string',
                    rrdatas: ['Test string'],
                    signatureRrdatas: ['Test string'],
                    weight: 42,
                  },
                ],
                kind: 'Test string',
              },
              wrrPolicy: {
                items: [
                  {
                    healthCheckedTargets: {
                      externalEndpoints: ['Test string'],
                      internalLoadBalancers: [
                        {
                          ipAddress: 'Test string',
                          ipProtocol: 'Test string',
                          kind: 'Test string',
                          loadBalancerType: 'Test string',
                          networkUrl: 'Test string',
                          port: 'Test string',
                          project: 'Test string',
                          region: 'Test string',
                        },
                      ],
                    },
                    kind: 'Test string',
                    rrdatas: ['Test string'],
                    signatureRrdatas: ['Test string'],
                    weight: 42,
                  },
                ],
                kind: 'Test string',
              },
            },
            rrdatas: ['Test string'],
            signatureRrdatas: ['Test string'],
            ttl: 42,
            type: 'Test string',
          },
        ],
        id: 'Test string',
        isServing: true,
        kind: 'Test string',
        startTime: 'Test string',
        status: 'Test string',
      }
    );
    /** Fetches the representation of an existing Change. */
    await gapi.client.dns.changes.get({
      changeId: 'Test string',
      clientOperationId: 'Test string',
      managedZone: 'Test string',
      project: 'Test string',
    });
    /** Enumerates Changes to a ResourceRecordSet collection. */
    await gapi.client.dns.changes.list({
      managedZone: 'Test string',
      maxResults: 42,
      pageToken: 'Test string',
      project: 'Test string',
      sortBy: 'Test string',
      sortOrder: 'Test string',
    });
    /** Fetches the representation of an existing DnsKey. */
    await gapi.client.dns.dnsKeys.get({
      clientOperationId: 'Test string',
      digestType: 'Test string',
      dnsKeyId: 'Test string',
      managedZone: 'Test string',
      project: 'Test string',
    });
    /** Enumerates DnsKeys to a ResourceRecordSet collection. */
    await gapi.client.dns.dnsKeys.list({
      digestType: 'Test string',
      managedZone: 'Test string',
      maxResults: 42,
      pageToken: 'Test string',
      project: 'Test string',
    });
    /** Fetches the representation of an existing Operation. */
    await gapi.client.dns.managedZoneOperations.get({
      clientOperationId: 'Test string',
      managedZone: 'Test string',
      operation: 'Test string',
      project: 'Test string',
    });
    /** Enumerates Operations for the given ManagedZone. */
    await gapi.client.dns.managedZoneOperations.list({
      managedZone: 'Test string',
      maxResults: 42,
      pageToken: 'Test string',
      project: 'Test string',
      sortBy: 'Test string',
    });
    /** Creates a new ManagedZone. */
    await gapi.client.dns.managedZones.create(
      {
        clientOperationId: 'Test string',
        project: 'Test string',
      },
      {
        cloudLoggingConfig: {
          enableLogging: true,
          kind: 'Test string',
        },
        creationTime: 'Test string',
        description: 'Test string',
        dnsName: 'Test string',
        dnssecConfig: {
          defaultKeySpecs: [
            {
              algorithm: 'Test string',
              keyLength: 42,
              keyType: 'Test string',
              kind: 'Test string',
            },
          ],
          kind: 'Test string',
          nonExistence: 'Test string',
          state: 'Test string',
        },
        forwardingConfig: {
          kind: 'Test string',
          targetNameServers: [
            {
              forwardingPath: 'Test string',
              ipv4Address: 'Test string',
              ipv6Address: 'Test string',
              kind: 'Test string',
            },
          ],
        },
        id: 'Test string',
        kind: 'Test string',
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        nameServers: ['Test string'],
        nameServerSet: 'Test string',
        peeringConfig: {
          kind: 'Test string',
          targetNetwork: {
            deactivateTime: 'Test string',
            kind: 'Test string',
            networkUrl: 'Test string',
          },
        },
        privateVisibilityConfig: {
          gkeClusters: [
            {
              gkeClusterName: 'Test string',
              kind: 'Test string',
            },
          ],
          kind: 'Test string',
          networks: [
            {
              kind: 'Test string',
              networkUrl: 'Test string',
            },
          ],
        },
        reverseLookupConfig: {
          kind: 'Test string',
        },
        serviceDirectoryConfig: {
          kind: 'Test string',
          namespace: {
            deletionTime: 'Test string',
            kind: 'Test string',
            namespaceUrl: 'Test string',
          },
        },
        visibility: 'Test string',
      }
    );
    /** Deletes a previously created ManagedZone. */
    await gapi.client.dns.managedZones.delete({
      clientOperationId: 'Test string',
      managedZone: 'Test string',
      project: 'Test string',
    });
    /** Fetches the representation of an existing ManagedZone. */
    await gapi.client.dns.managedZones.get({
      clientOperationId: 'Test string',
      managedZone: 'Test string',
      project: 'Test string',
    });
    /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
    await gapi.client.dns.managedZones.getIamPolicy(
      {
        resource: 'Test string',
      },
      {
        options: {
          requestedPolicyVersion: 42,
        },
      }
    );
    /** Enumerates ManagedZones that have been created but not yet deleted. */
    await gapi.client.dns.managedZones.list({
      dnsName: 'Test string',
      maxResults: 42,
      pageToken: 'Test string',
      project: 'Test string',
    });
    /** Applies a partial update to an existing ManagedZone. */
    await gapi.client.dns.managedZones.patch(
      {
        clientOperationId: 'Test string',
        managedZone: 'Test string',
        project: 'Test string',
      },
      {
        cloudLoggingConfig: {
          enableLogging: true,
          kind: 'Test string',
        },
        creationTime: 'Test string',
        description: 'Test string',
        dnsName: 'Test string',
        dnssecConfig: {
          defaultKeySpecs: [
            {
              algorithm: 'Test string',
              keyLength: 42,
              keyType: 'Test string',
              kind: 'Test string',
            },
          ],
          kind: 'Test string',
          nonExistence: 'Test string',
          state: 'Test string',
        },
        forwardingConfig: {
          kind: 'Test string',
          targetNameServers: [
            {
              forwardingPath: 'Test string',
              ipv4Address: 'Test string',
              ipv6Address: 'Test string',
              kind: 'Test string',
            },
          ],
        },
        id: 'Test string',
        kind: 'Test string',
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        nameServers: ['Test string'],
        nameServerSet: 'Test string',
        peeringConfig: {
          kind: 'Test string',
          targetNetwork: {
            deactivateTime: 'Test string',
            kind: 'Test string',
            networkUrl: 'Test string',
          },
        },
        privateVisibilityConfig: {
          gkeClusters: [
            {
              gkeClusterName: 'Test string',
              kind: 'Test string',
            },
          ],
          kind: 'Test string',
          networks: [
            {
              kind: 'Test string',
              networkUrl: 'Test string',
            },
          ],
        },
        reverseLookupConfig: {
          kind: 'Test string',
        },
        serviceDirectoryConfig: {
          kind: 'Test string',
          namespace: {
            deletionTime: 'Test string',
            kind: 'Test string',
            namespaceUrl: 'Test string',
          },
        },
        visibility: 'Test string',
      }
    );
    /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
    await gapi.client.dns.managedZones.setIamPolicy(
      {
        resource: 'Test string',
      },
      {
        policy: {
          auditConfigs: [
            {
              auditLogConfigs: [
                {
                  exemptedMembers: ['Test string'],
                  logType: 'Test string',
                },
              ],
              service: 'Test string',
            },
          ],
          bindings: [
            {
              condition: {
                description: 'Test string',
                expression: 'Test string',
                location: 'Test string',
                title: 'Test string',
              },
              members: ['Test string'],
              role: 'Test string',
            },
          ],
          etag: 'Test string',
          version: 42,
        },
        updateMask: 'Test string',
      }
    );
    /** Returns permissions that a caller has on the specified resource. If the resource does not exist, this returns an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning. */
    await gapi.client.dns.managedZones.testIamPermissions(
      {
        resource: 'Test string',
      },
      {
        permissions: ['Test string'],
      }
    );
    /** Updates an existing ManagedZone. */
    await gapi.client.dns.managedZones.update(
      {
        clientOperationId: 'Test string',
        managedZone: 'Test string',
        project: 'Test string',
      },
      {
        cloudLoggingConfig: {
          enableLogging: true,
          kind: 'Test string',
        },
        creationTime: 'Test string',
        description: 'Test string',
        dnsName: 'Test string',
        dnssecConfig: {
          defaultKeySpecs: [
            {
              algorithm: 'Test string',
              keyLength: 42,
              keyType: 'Test string',
              kind: 'Test string',
            },
          ],
          kind: 'Test string',
          nonExistence: 'Test string',
          state: 'Test string',
        },
        forwardingConfig: {
          kind: 'Test string',
          targetNameServers: [
            {
              forwardingPath: 'Test string',
              ipv4Address: 'Test string',
              ipv6Address: 'Test string',
              kind: 'Test string',
            },
          ],
        },
        id: 'Test string',
        kind: 'Test string',
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        nameServers: ['Test string'],
        nameServerSet: 'Test string',
        peeringConfig: {
          kind: 'Test string',
          targetNetwork: {
            deactivateTime: 'Test string',
            kind: 'Test string',
            networkUrl: 'Test string',
          },
        },
        privateVisibilityConfig: {
          gkeClusters: [
            {
              gkeClusterName: 'Test string',
              kind: 'Test string',
            },
          ],
          kind: 'Test string',
          networks: [
            {
              kind: 'Test string',
              networkUrl: 'Test string',
            },
          ],
        },
        reverseLookupConfig: {
          kind: 'Test string',
        },
        serviceDirectoryConfig: {
          kind: 'Test string',
          namespace: {
            deletionTime: 'Test string',
            kind: 'Test string',
            namespaceUrl: 'Test string',
          },
        },
        visibility: 'Test string',
      }
    );
    /** Creates a new Policy. */
    await gapi.client.dns.policies.create(
      {
        clientOperationId: 'Test string',
        project: 'Test string',
      },
      {
        alternativeNameServerConfig: {
          kind: 'Test string',
          targetNameServers: [
            {
              forwardingPath: 'Test string',
              ipv4Address: 'Test string',
              ipv6Address: 'Test string',
              kind: 'Test string',
            },
          ],
        },
        description: 'Test string',
        enableInboundForwarding: true,
        enableLogging: true,
        id: 'Test string',
        kind: 'Test string',
        name: 'Test string',
        networks: [
          {
            kind: 'Test string',
            networkUrl: 'Test string',
          },
        ],
      }
    );
    /** Deletes a previously created Policy. Fails if the policy is still being referenced by a network. */
    await gapi.client.dns.policies.delete({
      clientOperationId: 'Test string',
      policy: 'Test string',
      project: 'Test string',
    });
    /** Fetches the representation of an existing Policy. */
    await gapi.client.dns.policies.get({
      clientOperationId: 'Test string',
      policy: 'Test string',
      project: 'Test string',
    });
    /** Enumerates all Policies associated with a project. */
    await gapi.client.dns.policies.list({
      maxResults: 42,
      pageToken: 'Test string',
      project: 'Test string',
    });
    /** Applies a partial update to an existing Policy. */
    await gapi.client.dns.policies.patch(
      {
        clientOperationId: 'Test string',
        policy: 'Test string',
        project: 'Test string',
      },
      {
        alternativeNameServerConfig: {
          kind: 'Test string',
          targetNameServers: [
            {
              forwardingPath: 'Test string',
              ipv4Address: 'Test string',
              ipv6Address: 'Test string',
              kind: 'Test string',
            },
          ],
        },
        description: 'Test string',
        enableInboundForwarding: true,
        enableLogging: true,
        id: 'Test string',
        kind: 'Test string',
        name: 'Test string',
        networks: [
          {
            kind: 'Test string',
            networkUrl: 'Test string',
          },
        ],
      }
    );
    /** Updates an existing Policy. */
    await gapi.client.dns.policies.update(
      {
        clientOperationId: 'Test string',
        policy: 'Test string',
        project: 'Test string',
      },
      {
        alternativeNameServerConfig: {
          kind: 'Test string',
          targetNameServers: [
            {
              forwardingPath: 'Test string',
              ipv4Address: 'Test string',
              ipv6Address: 'Test string',
              kind: 'Test string',
            },
          ],
        },
        description: 'Test string',
        enableInboundForwarding: true,
        enableLogging: true,
        id: 'Test string',
        kind: 'Test string',
        name: 'Test string',
        networks: [
          {
            kind: 'Test string',
            networkUrl: 'Test string',
          },
        ],
      }
    );
    /** Fetches the representation of an existing Project. */
    await gapi.client.dns.projects.get({
      clientOperationId: 'Test string',
      project: 'Test string',
    });
    /** Creates a new ResourceRecordSet. */
    await gapi.client.dns.resourceRecordSets.create(
      {
        clientOperationId: 'Test string',
        managedZone: 'Test string',
        project: 'Test string',
      },
      {
        kind: 'Test string',
        name: 'Test string',
        routingPolicy: {
          geo: {
            enableFencing: true,
            items: [
              {
                healthCheckedTargets: {
                  externalEndpoints: ['Test string'],
                  internalLoadBalancers: [
                    {
                      ipAddress: 'Test string',
                      ipProtocol: 'Test string',
                      kind: 'Test string',
                      loadBalancerType: 'Test string',
                      networkUrl: 'Test string',
                      port: 'Test string',
                      project: 'Test string',
                      region: 'Test string',
                    },
                  ],
                },
                kind: 'Test string',
                location: 'Test string',
                rrdatas: ['Test string'],
                signatureRrdatas: ['Test string'],
              },
            ],
            kind: 'Test string',
          },
          geoPolicy: {
            enableFencing: true,
            items: [
              {
                healthCheckedTargets: {
                  externalEndpoints: ['Test string'],
                  internalLoadBalancers: [
                    {
                      ipAddress: 'Test string',
                      ipProtocol: 'Test string',
                      kind: 'Test string',
                      loadBalancerType: 'Test string',
                      networkUrl: 'Test string',
                      port: 'Test string',
                      project: 'Test string',
                      region: 'Test string',
                    },
                  ],
                },
                kind: 'Test string',
                location: 'Test string',
                rrdatas: ['Test string'],
                signatureRrdatas: ['Test string'],
              },
            ],
            kind: 'Test string',
          },
          healthCheck: 'Test string',
          kind: 'Test string',
          primaryBackup: {
            backupGeoTargets: {
              enableFencing: true,
              items: [
                {
                  healthCheckedTargets: {
                    externalEndpoints: ['Test string'],
                    internalLoadBalancers: [
                      {
                        ipAddress: 'Test string',
                        ipProtocol: 'Test string',
                        kind: 'Test string',
                        loadBalancerType: 'Test string',
                        networkUrl: 'Test string',
                        port: 'Test string',
                        project: 'Test string',
                        region: 'Test string',
                      },
                    ],
                  },
                  kind: 'Test string',
                  location: 'Test string',
                  rrdatas: ['Test string'],
                  signatureRrdatas: ['Test string'],
                },
              ],
              kind: 'Test string',
            },
            kind: 'Test string',
            primaryTargets: {
              externalEndpoints: ['Test string'],
              internalLoadBalancers: [
                {
                  ipAddress: 'Test string',
                  ipProtocol: 'Test string',
                  kind: 'Test string',
                  loadBalancerType: 'Test string',
                  networkUrl: 'Test string',
                  port: 'Test string',
                  project: 'Test string',
                  region: 'Test string',
                },
              ],
            },
            trickleTraffic: 42,
          },
          wrr: {
            items: [
              {
                healthCheckedTargets: {
                  externalEndpoints: ['Test string'],
                  internalLoadBalancers: [
                    {
                      ipAddress: 'Test string',
                      ipProtocol: 'Test string',
                      kind: 'Test string',
                      loadBalancerType: 'Test string',
                      networkUrl: 'Test string',
                      port: 'Test string',
                      project: 'Test string',
                      region: 'Test string',
                    },
                  ],
                },
                kind: 'Test string',
                rrdatas: ['Test string'],
                signatureRrdatas: ['Test string'],
                weight: 42,
              },
            ],
            kind: 'Test string',
          },
          wrrPolicy: {
            items: [
              {
                healthCheckedTargets: {
                  externalEndpoints: ['Test string'],
                  internalLoadBalancers: [
                    {
                      ipAddress: 'Test string',
                      ipProtocol: 'Test string',
                      kind: 'Test string',
                      loadBalancerType: 'Test string',
                      networkUrl: 'Test string',
                      port: 'Test string',
                      project: 'Test string',
                      region: 'Test string',
                    },
                  ],
                },
                kind: 'Test string',
                rrdatas: ['Test string'],
                signatureRrdatas: ['Test string'],
                weight: 42,
              },
            ],
            kind: 'Test string',
          },
        },
        rrdatas: ['Test string'],
        signatureRrdatas: ['Test string'],
        ttl: 42,
        type: 'Test string',
      }
    );
    /** Deletes a previously created ResourceRecordSet. */
    await gapi.client.dns.resourceRecordSets.delete({
      clientOperationId: 'Test string',
      managedZone: 'Test string',
      name: 'Test string',
      project: 'Test string',
      type: 'Test string',
    });
    /** Fetches the representation of an existing ResourceRecordSet. */
    await gapi.client.dns.resourceRecordSets.get({
      clientOperationId: 'Test string',
      managedZone: 'Test string',
      name: 'Test string',
      project: 'Test string',
      type: 'Test string',
    });
    /** Enumerates ResourceRecordSets that you have created but not yet deleted. */
    await gapi.client.dns.resourceRecordSets.list({
      managedZone: 'Test string',
      maxResults: 42,
      name: 'Test string',
      pageToken: 'Test string',
      project: 'Test string',
      type: 'Test string',
    });
    /** Applies a partial update to an existing ResourceRecordSet. */
    await gapi.client.dns.resourceRecordSets.patch(
      {
        clientOperationId: 'Test string',
        managedZone: 'Test string',
        name: 'Test string',
        project: 'Test string',
        type: 'Test string',
      },
      {
        kind: 'Test string',
        name: 'Test string',
        routingPolicy: {
          geo: {
            enableFencing: true,
            items: [
              {
                healthCheckedTargets: {
                  externalEndpoints: ['Test string'],
                  internalLoadBalancers: [
                    {
                      ipAddress: 'Test string',
                      ipProtocol: 'Test string',
                      kind: 'Test string',
                      loadBalancerType: 'Test string',
                      networkUrl: 'Test string',
                      port: 'Test string',
                      project: 'Test string',
                      region: 'Test string',
                    },
                  ],
                },
                kind: 'Test string',
                location: 'Test string',
                rrdatas: ['Test string'],
                signatureRrdatas: ['Test string'],
              },
            ],
            kind: 'Test string',
          },
          geoPolicy: {
            enableFencing: true,
            items: [
              {
                healthCheckedTargets: {
                  externalEndpoints: ['Test string'],
                  internalLoadBalancers: [
                    {
                      ipAddress: 'Test string',
                      ipProtocol: 'Test string',
                      kind: 'Test string',
                      loadBalancerType: 'Test string',
                      networkUrl: 'Test string',
                      port: 'Test string',
                      project: 'Test string',
                      region: 'Test string',
                    },
                  ],
                },
                kind: 'Test string',
                location: 'Test string',
                rrdatas: ['Test string'],
                signatureRrdatas: ['Test string'],
              },
            ],
            kind: 'Test string',
          },
          healthCheck: 'Test string',
          kind: 'Test string',
          primaryBackup: {
            backupGeoTargets: {
              enableFencing: true,
              items: [
                {
                  healthCheckedTargets: {
                    externalEndpoints: ['Test string'],
                    internalLoadBalancers: [
                      {
                        ipAddress: 'Test string',
                        ipProtocol: 'Test string',
                        kind: 'Test string',
                        loadBalancerType: 'Test string',
                        networkUrl: 'Test string',
                        port: 'Test string',
                        project: 'Test string',
                        region: 'Test string',
                      },
                    ],
                  },
                  kind: 'Test string',
                  location: 'Test string',
                  rrdatas: ['Test string'],
                  signatureRrdatas: ['Test string'],
                },
              ],
              kind: 'Test string',
            },
            kind: 'Test string',
            primaryTargets: {
              externalEndpoints: ['Test string'],
              internalLoadBalancers: [
                {
                  ipAddress: 'Test string',
                  ipProtocol: 'Test string',
                  kind: 'Test string',
                  loadBalancerType: 'Test string',
                  networkUrl: 'Test string',
                  port: 'Test string',
                  project: 'Test string',
                  region: 'Test string',
                },
              ],
            },
            trickleTraffic: 42,
          },
          wrr: {
            items: [
              {
                healthCheckedTargets: {
                  externalEndpoints: ['Test string'],
                  internalLoadBalancers: [
                    {
                      ipAddress: 'Test string',
                      ipProtocol: 'Test string',
                      kind: 'Test string',
                      loadBalancerType: 'Test string',
                      networkUrl: 'Test string',
                      port: 'Test string',
                      project: 'Test string',
                      region: 'Test string',
                    },
                  ],
                },
                kind: 'Test string',
                rrdatas: ['Test string'],
                signatureRrdatas: ['Test string'],
                weight: 42,
              },
            ],
            kind: 'Test string',
          },
          wrrPolicy: {
            items: [
              {
                healthCheckedTargets: {
                  externalEndpoints: ['Test string'],
                  internalLoadBalancers: [
                    {
                      ipAddress: 'Test string',
                      ipProtocol: 'Test string',
                      kind: 'Test string',
                      loadBalancerType: 'Test string',
                      networkUrl: 'Test string',
                      port: 'Test string',
                      project: 'Test string',
                      region: 'Test string',
                    },
                  ],
                },
                kind: 'Test string',
                rrdatas: ['Test string'],
                signatureRrdatas: ['Test string'],
                weight: 42,
              },
            ],
            kind: 'Test string',
          },
        },
        rrdatas: ['Test string'],
        signatureRrdatas: ['Test string'],
        ttl: 42,
        type: 'Test string',
      }
    );
    /** Creates a new Response Policy */
    await gapi.client.dns.responsePolicies.create(
      {
        clientOperationId: 'Test string',
        project: 'Test string',
      },
      {
        description: 'Test string',
        gkeClusters: [
          {
            gkeClusterName: 'Test string',
            kind: 'Test string',
          },
        ],
        id: 'Test string',
        kind: 'Test string',
        labels: {
          A: 'Test string',
        },
        networks: [
          {
            kind: 'Test string',
            networkUrl: 'Test string',
          },
        ],
        responsePolicyName: 'Test string',
      }
    );
    /** Deletes a previously created Response Policy. Fails if the response policy is non-empty or still being referenced by a network. */
    await gapi.client.dns.responsePolicies.delete({
      clientOperationId: 'Test string',
      project: 'Test string',
      responsePolicy: 'Test string',
    });
    /** Fetches the representation of an existing Response Policy. */
    await gapi.client.dns.responsePolicies.get({
      clientOperationId: 'Test string',
      project: 'Test string',
      responsePolicy: 'Test string',
    });
    /** Enumerates all Response Policies associated with a project. */
    await gapi.client.dns.responsePolicies.list({
      maxResults: 42,
      pageToken: 'Test string',
      project: 'Test string',
    });
    /** Applies a partial update to an existing Response Policy. */
    await gapi.client.dns.responsePolicies.patch(
      {
        clientOperationId: 'Test string',
        project: 'Test string',
        responsePolicy: 'Test string',
      },
      {
        description: 'Test string',
        gkeClusters: [
          {
            gkeClusterName: 'Test string',
            kind: 'Test string',
          },
        ],
        id: 'Test string',
        kind: 'Test string',
        labels: {
          A: 'Test string',
        },
        networks: [
          {
            kind: 'Test string',
            networkUrl: 'Test string',
          },
        ],
        responsePolicyName: 'Test string',
      }
    );
    /** Updates an existing Response Policy. */
    await gapi.client.dns.responsePolicies.update(
      {
        clientOperationId: 'Test string',
        project: 'Test string',
        responsePolicy: 'Test string',
      },
      {
        description: 'Test string',
        gkeClusters: [
          {
            gkeClusterName: 'Test string',
            kind: 'Test string',
          },
        ],
        id: 'Test string',
        kind: 'Test string',
        labels: {
          A: 'Test string',
        },
        networks: [
          {
            kind: 'Test string',
            networkUrl: 'Test string',
          },
        ],
        responsePolicyName: 'Test string',
      }
    );
    /** Creates a new Response Policy Rule. */
    await gapi.client.dns.responsePolicyRules.create(
      {
        clientOperationId: 'Test string',
        project: 'Test string',
        responsePolicy: 'Test string',
      },
      {
        behavior: 'Test string',
        dnsName: 'Test string',
        kind: 'Test string',
        localData: {
          localDatas: [
            {
              kind: 'Test string',
              name: 'Test string',
              routingPolicy: {
                geo: {
                  enableFencing: true,
                  items: [
                    {
                      healthCheckedTargets: {
                        externalEndpoints: ['Test string'],
                        internalLoadBalancers: [
                          {
                            ipAddress: 'Test string',
                            ipProtocol: 'Test string',
                            kind: 'Test string',
                            loadBalancerType: 'Test string',
                            networkUrl: 'Test string',
                            port: 'Test string',
                            project: 'Test string',
                            region: 'Test string',
                          },
                        ],
                      },
                      kind: 'Test string',
                      location: 'Test string',
                      rrdatas: ['Test string'],
                      signatureRrdatas: ['Test string'],
                    },
                  ],
                  kind: 'Test string',
                },
                geoPolicy: {
                  enableFencing: true,
                  items: [
                    {
                      healthCheckedTargets: {
                        externalEndpoints: ['Test string'],
                        internalLoadBalancers: [
                          {
                            ipAddress: 'Test string',
                            ipProtocol: 'Test string',
                            kind: 'Test string',
                            loadBalancerType: 'Test string',
                            networkUrl: 'Test string',
                            port: 'Test string',
                            project: 'Test string',
                            region: 'Test string',
                          },
                        ],
                      },
                      kind: 'Test string',
                      location: 'Test string',
                      rrdatas: ['Test string'],
                      signatureRrdatas: ['Test string'],
                    },
                  ],
                  kind: 'Test string',
                },
                healthCheck: 'Test string',
                kind: 'Test string',
                primaryBackup: {
                  backupGeoTargets: {
                    enableFencing: true,
                    items: [
                      {
                        healthCheckedTargets: {
                          externalEndpoints: ['Test string'],
                          internalLoadBalancers: [
                            {
                              ipAddress: 'Test string',
                              ipProtocol: 'Test string',
                              kind: 'Test string',
                              loadBalancerType: 'Test string',
                              networkUrl: 'Test string',
                              port: 'Test string',
                              project: 'Test string',
                              region: 'Test string',
                            },
                          ],
                        },
                        kind: 'Test string',
                        location: 'Test string',
                        rrdatas: ['Test string'],
                        signatureRrdatas: ['Test string'],
                      },
                    ],
                    kind: 'Test string',
                  },
                  kind: 'Test string',
                  primaryTargets: {
                    externalEndpoints: ['Test string'],
                    internalLoadBalancers: [
                      {
                        ipAddress: 'Test string',
                        ipProtocol: 'Test string',
                        kind: 'Test string',
                        loadBalancerType: 'Test string',
                        networkUrl: 'Test string',
                        port: 'Test string',
                        project: 'Test string',
                        region: 'Test string',
                      },
                    ],
                  },
                  trickleTraffic: 42,
                },
                wrr: {
                  items: [
                    {
                      healthCheckedTargets: {
                        externalEndpoints: ['Test string'],
                        internalLoadBalancers: [
                          {
                            ipAddress: 'Test string',
                            ipProtocol: 'Test string',
                            kind: 'Test string',
                            loadBalancerType: 'Test string',
                            networkUrl: 'Test string',
                            port: 'Test string',
                            project: 'Test string',
                            region: 'Test string',
                          },
                        ],
                      },
                      kind: 'Test string',
                      rrdatas: ['Test string'],
                      signatureRrdatas: ['Test string'],
                      weight: 42,
                    },
                  ],
                  kind: 'Test string',
                },
                wrrPolicy: {
                  items: [
                    {
                      healthCheckedTargets: {
                        externalEndpoints: ['Test string'],
                        internalLoadBalancers: [
                          {
                            ipAddress: 'Test string',
                            ipProtocol: 'Test string',
                            kind: 'Test string',
                            loadBalancerType: 'Test string',
                            networkUrl: 'Test string',
                            port: 'Test string',
                            project: 'Test string',
                            region: 'Test string',
                          },
                        ],
                      },
                      kind: 'Test string',
                      rrdatas: ['Test string'],
                      signatureRrdatas: ['Test string'],
                      weight: 42,
                    },
                  ],
                  kind: 'Test string',
                },
              },
              rrdatas: ['Test string'],
              signatureRrdatas: ['Test string'],
              ttl: 42,
              type: 'Test string',
            },
          ],
        },
        ruleName: 'Test string',
      }
    );
    /** Deletes a previously created Response Policy Rule. */
    await gapi.client.dns.responsePolicyRules.delete({
      clientOperationId: 'Test string',
      project: 'Test string',
      responsePolicy: 'Test string',
      responsePolicyRule: 'Test string',
    });
    /** Fetches the representation of an existing Response Policy Rule. */
    await gapi.client.dns.responsePolicyRules.get({
      clientOperationId: 'Test string',
      project: 'Test string',
      responsePolicy: 'Test string',
      responsePolicyRule: 'Test string',
    });
    /** Enumerates all Response Policy Rules associated with a project. */
    await gapi.client.dns.responsePolicyRules.list({
      maxResults: 42,
      pageToken: 'Test string',
      project: 'Test string',
      responsePolicy: 'Test string',
    });
    /** Applies a partial update to an existing Response Policy Rule. */
    await gapi.client.dns.responsePolicyRules.patch(
      {
        clientOperationId: 'Test string',
        project: 'Test string',
        responsePolicy: 'Test string',
        responsePolicyRule: 'Test string',
      },
      {
        behavior: 'Test string',
        dnsName: 'Test string',
        kind: 'Test string',
        localData: {
          localDatas: [
            {
              kind: 'Test string',
              name: 'Test string',
              routingPolicy: {
                geo: {
                  enableFencing: true,
                  items: [
                    {
                      healthCheckedTargets: {
                        externalEndpoints: ['Test string'],
                        internalLoadBalancers: [
                          {
                            ipAddress: 'Test string',
                            ipProtocol: 'Test string',
                            kind: 'Test string',
                            loadBalancerType: 'Test string',
                            networkUrl: 'Test string',
                            port: 'Test string',
                            project: 'Test string',
                            region: 'Test string',
                          },
                        ],
                      },
                      kind: 'Test string',
                      location: 'Test string',
                      rrdatas: ['Test string'],
                      signatureRrdatas: ['Test string'],
                    },
                  ],
                  kind: 'Test string',
                },
                geoPolicy: {
                  enableFencing: true,
                  items: [
                    {
                      healthCheckedTargets: {
                        externalEndpoints: ['Test string'],
                        internalLoadBalancers: [
                          {
                            ipAddress: 'Test string',
                            ipProtocol: 'Test string',
                            kind: 'Test string',
                            loadBalancerType: 'Test string',
                            networkUrl: 'Test string',
                            port: 'Test string',
                            project: 'Test string',
                            region: 'Test string',
                          },
                        ],
                      },
                      kind: 'Test string',
                      location: 'Test string',
                      rrdatas: ['Test string'],
                      signatureRrdatas: ['Test string'],
                    },
                  ],
                  kind: 'Test string',
                },
                healthCheck: 'Test string',
                kind: 'Test string',
                primaryBackup: {
                  backupGeoTargets: {
                    enableFencing: true,
                    items: [
                      {
                        healthCheckedTargets: {
                          externalEndpoints: ['Test string'],
                          internalLoadBalancers: [
                            {
                              ipAddress: 'Test string',
                              ipProtocol: 'Test string',
                              kind: 'Test string',
                              loadBalancerType: 'Test string',
                              networkUrl: 'Test string',
                              port: 'Test string',
                              project: 'Test string',
                              region: 'Test string',
                            },
                          ],
                        },
                        kind: 'Test string',
                        location: 'Test string',
                        rrdatas: ['Test string'],
                        signatureRrdatas: ['Test string'],
                      },
                    ],
                    kind: 'Test string',
                  },
                  kind: 'Test string',
                  primaryTargets: {
                    externalEndpoints: ['Test string'],
                    internalLoadBalancers: [
                      {
                        ipAddress: 'Test string',
                        ipProtocol: 'Test string',
                        kind: 'Test string',
                        loadBalancerType: 'Test string',
                        networkUrl: 'Test string',
                        port: 'Test string',
                        project: 'Test string',
                        region: 'Test string',
                      },
                    ],
                  },
                  trickleTraffic: 42,
                },
                wrr: {
                  items: [
                    {
                      healthCheckedTargets: {
                        externalEndpoints: ['Test string'],
                        internalLoadBalancers: [
                          {
                            ipAddress: 'Test string',
                            ipProtocol: 'Test string',
                            kind: 'Test string',
                            loadBalancerType: 'Test string',
                            networkUrl: 'Test string',
                            port: 'Test string',
                            project: 'Test string',
                            region: 'Test string',
                          },
                        ],
                      },
                      kind: 'Test string',
                      rrdatas: ['Test string'],
                      signatureRrdatas: ['Test string'],
                      weight: 42,
                    },
                  ],
                  kind: 'Test string',
                },
                wrrPolicy: {
                  items: [
                    {
                      healthCheckedTargets: {
                        externalEndpoints: ['Test string'],
                        internalLoadBalancers: [
                          {
                            ipAddress: 'Test string',
                            ipProtocol: 'Test string',
                            kind: 'Test string',
                            loadBalancerType: 'Test string',
                            networkUrl: 'Test string',
                            port: 'Test string',
                            project: 'Test string',
                            region: 'Test string',
                          },
                        ],
                      },
                      kind: 'Test string',
                      rrdatas: ['Test string'],
                      signatureRrdatas: ['Test string'],
                      weight: 42,
                    },
                  ],
                  kind: 'Test string',
                },
              },
              rrdatas: ['Test string'],
              signatureRrdatas: ['Test string'],
              ttl: 42,
              type: 'Test string',
            },
          ],
        },
        ruleName: 'Test string',
      }
    );
    /** Updates an existing Response Policy Rule. */
    await gapi.client.dns.responsePolicyRules.update(
      {
        clientOperationId: 'Test string',
        project: 'Test string',
        responsePolicy: 'Test string',
        responsePolicyRule: 'Test string',
      },
      {
        behavior: 'Test string',
        dnsName: 'Test string',
        kind: 'Test string',
        localData: {
          localDatas: [
            {
              kind: 'Test string',
              name: 'Test string',
              routingPolicy: {
                geo: {
                  enableFencing: true,
                  items: [
                    {
                      healthCheckedTargets: {
                        externalEndpoints: ['Test string'],
                        internalLoadBalancers: [
                          {
                            ipAddress: 'Test string',
                            ipProtocol: 'Test string',
                            kind: 'Test string',
                            loadBalancerType: 'Test string',
                            networkUrl: 'Test string',
                            port: 'Test string',
                            project: 'Test string',
                            region: 'Test string',
                          },
                        ],
                      },
                      kind: 'Test string',
                      location: 'Test string',
                      rrdatas: ['Test string'],
                      signatureRrdatas: ['Test string'],
                    },
                  ],
                  kind: 'Test string',
                },
                geoPolicy: {
                  enableFencing: true,
                  items: [
                    {
                      healthCheckedTargets: {
                        externalEndpoints: ['Test string'],
                        internalLoadBalancers: [
                          {
                            ipAddress: 'Test string',
                            ipProtocol: 'Test string',
                            kind: 'Test string',
                            loadBalancerType: 'Test string',
                            networkUrl: 'Test string',
                            port: 'Test string',
                            project: 'Test string',
                            region: 'Test string',
                          },
                        ],
                      },
                      kind: 'Test string',
                      location: 'Test string',
                      rrdatas: ['Test string'],
                      signatureRrdatas: ['Test string'],
                    },
                  ],
                  kind: 'Test string',
                },
                healthCheck: 'Test string',
                kind: 'Test string',
                primaryBackup: {
                  backupGeoTargets: {
                    enableFencing: true,
                    items: [
                      {
                        healthCheckedTargets: {
                          externalEndpoints: ['Test string'],
                          internalLoadBalancers: [
                            {
                              ipAddress: 'Test string',
                              ipProtocol: 'Test string',
                              kind: 'Test string',
                              loadBalancerType: 'Test string',
                              networkUrl: 'Test string',
                              port: 'Test string',
                              project: 'Test string',
                              region: 'Test string',
                            },
                          ],
                        },
                        kind: 'Test string',
                        location: 'Test string',
                        rrdatas: ['Test string'],
                        signatureRrdatas: ['Test string'],
                      },
                    ],
                    kind: 'Test string',
                  },
                  kind: 'Test string',
                  primaryTargets: {
                    externalEndpoints: ['Test string'],
                    internalLoadBalancers: [
                      {
                        ipAddress: 'Test string',
                        ipProtocol: 'Test string',
                        kind: 'Test string',
                        loadBalancerType: 'Test string',
                        networkUrl: 'Test string',
                        port: 'Test string',
                        project: 'Test string',
                        region: 'Test string',
                      },
                    ],
                  },
                  trickleTraffic: 42,
                },
                wrr: {
                  items: [
                    {
                      healthCheckedTargets: {
                        externalEndpoints: ['Test string'],
                        internalLoadBalancers: [
                          {
                            ipAddress: 'Test string',
                            ipProtocol: 'Test string',
                            kind: 'Test string',
                            loadBalancerType: 'Test string',
                            networkUrl: 'Test string',
                            port: 'Test string',
                            project: 'Test string',
                            region: 'Test string',
                          },
                        ],
                      },
                      kind: 'Test string',
                      rrdatas: ['Test string'],
                      signatureRrdatas: ['Test string'],
                      weight: 42,
                    },
                  ],
                  kind: 'Test string',
                },
                wrrPolicy: {
                  items: [
                    {
                      healthCheckedTargets: {
                        externalEndpoints: ['Test string'],
                        internalLoadBalancers: [
                          {
                            ipAddress: 'Test string',
                            ipProtocol: 'Test string',
                            kind: 'Test string',
                            loadBalancerType: 'Test string',
                            networkUrl: 'Test string',
                            port: 'Test string',
                            project: 'Test string',
                            region: 'Test string',
                          },
                        ],
                      },
                      kind: 'Test string',
                      rrdatas: ['Test string'],
                      signatureRrdatas: ['Test string'],
                      weight: 42,
                    },
                  ],
                  kind: 'Test string',
                },
              },
              rrdatas: ['Test string'],
              signatureRrdatas: ['Test string'],
              ttl: 42,
              type: 'Test string',
            },
          ],
        },
        ruleName: 'Test string',
      }
    );
  }
});
