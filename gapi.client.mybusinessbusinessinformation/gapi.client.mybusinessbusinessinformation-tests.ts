/* This is stub file for gapi.client.mybusinessbusinessinformation definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20220518

gapi.load('client', () => {
    /** now we can use gapi.client */
    gapi.client.load('mybusinessbusinessinformation', 'v1', () => {
        /** now we can use gapi.client.mybusinessbusinessinformation */

        run();
    });

    async function run() {
        /** Returns the list of attributes that would be available for a location with the given primary category and country. */
        await gapi.client.mybusinessbusinessinformation.attributes.list({
            categoryName: "Test string",
            languageCode: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
            regionCode: "Test string",
            showAll: true,
        });
        /** Returns a list of business categories for the provided language and GConcept ids. */
        await gapi.client.mybusinessbusinessinformation.categories.batchGet({
            languageCode: "Test string",
            names: "Test string",
            regionCode: "Test string",
            view: "Test string",
        });
        /**
         * Returns a list of business categories. Search will match the category name but not the category ID. Search only matches the front of a category name (that is, 'food' may return 'Food
         * Court' but not 'Fast Food Restaurant').
         */
        await gapi.client.mybusinessbusinessinformation.categories.list({
            filter: "Test string",
            languageCode: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            regionCode: "Test string",
            view: "Test string",
        });
        /** Gets the specified chain. Returns `NOT_FOUND` if the chain does not exist. */
        await gapi.client.mybusinessbusinessinformation.chains.get({
            name: "Test string",
        });
        /** Searches the chain based on chain name. */
        await gapi.client.mybusinessbusinessinformation.chains.search({
            chainName: "Test string",
            pageSize: 42,
        });
        /** Search all of the possible locations that are a match to the specified request. */
        await gapi.client.mybusinessbusinessinformation.googleLocations.search({
        }, {
            location: {
                adWordsLocationExtensions: {
                    adPhone: "Test string",
                },
                categories: {
                    additionalCategories: [
                        {
                            displayName: "Test string",
                            moreHoursTypes: [
                                {
                                    displayName: "Test string",
                                    hoursTypeId: "Test string",
                                    localizedDisplayName: "Test string",
                                }                            ],
                            name: "Test string",
                            serviceTypes: [
                                {
                                    displayName: "Test string",
                                    serviceTypeId: "Test string",
                                }                            ],
                        }                    ],
                    primaryCategory: {
                        displayName: "Test string",
                        moreHoursTypes: [
                            {
                                displayName: "Test string",
                                hoursTypeId: "Test string",
                                localizedDisplayName: "Test string",
                            }                        ],
                        name: "Test string",
                        serviceTypes: [
                            {
                                displayName: "Test string",
                                serviceTypeId: "Test string",
                            }                        ],
                    },
                },
                labels: [
                    "Test string"                ],
                languageCode: "Test string",
                latlng: {
                    latitude: 42,
                    longitude: 42,
                },
                metadata: {
                    canDelete: true,
                    canHaveBusinessCalls: true,
                    canHaveFoodMenus: true,
                    canModifyServiceList: true,
                    canOperateHealthData: true,
                    canOperateLocalPost: true,
                    canOperateLodgingData: true,
                    duplicateLocation: "Test string",
                    hasGoogleUpdated: true,
                    hasPendingEdits: true,
                    hasVoiceOfMerchant: true,
                    mapsUri: "Test string",
                    newReviewUri: "Test string",
                    placeId: "Test string",
                },
                moreHours: [
                    {
                        hoursTypeId: "Test string",
                        periods: [
                            {
                                closeDay: "Test string",
                                closeTime: {
                                    hours: 42,
                                    minutes: 42,
                                    nanos: 42,
                                    seconds: 42,
                                },
                                openDay: "Test string",
                                openTime: {
                                    hours: 42,
                                    minutes: 42,
                                    nanos: 42,
                                    seconds: 42,
                                },
                            }                        ],
                    }                ],
                name: "Test string",
                openInfo: {
                    canReopen: true,
                    openingDate: {
                        day: 42,
                        month: 42,
                        year: 42,
                    },
                    status: "Test string",
                },
                phoneNumbers: {
                    additionalPhones: [
                        "Test string"                    ],
                    primaryPhone: "Test string",
                },
                profile: {
                    description: "Test string",
                },
                regularHours: {
                    periods: [
                        {
                            closeDay: "Test string",
                            closeTime: {
                                hours: 42,
                                minutes: 42,
                                nanos: 42,
                                seconds: 42,
                            },
                            openDay: "Test string",
                            openTime: {
                                hours: 42,
                                minutes: 42,
                                nanos: 42,
                                seconds: 42,
                            },
                        }                    ],
                },
                relationshipData: {
                    childrenLocations: [
                        {
                            placeId: "Test string",
                            relationType: "Test string",
                        }                    ],
                    parentChain: "Test string",
                    parentLocation: {
                        placeId: "Test string",
                        relationType: "Test string",
                    },
                },
                serviceArea: {
                    businessType: "Test string",
                    places: {
                        placeInfos: [
                            {
                                placeId: "Test string",
                                placeName: "Test string",
                            }                        ],
                    },
                    regionCode: "Test string",
                },
                serviceItems: [
                    {
                        freeFormServiceItem: {
                            category: "Test string",
                            label: {
                                description: "Test string",
                                displayName: "Test string",
                                languageCode: "Test string",
                            },
                        },
                        price: {
                            currencyCode: "Test string",
                            nanos: 42,
                            units: "Test string",
                        },
                        structuredServiceItem: {
                            description: "Test string",
                            serviceTypeId: "Test string",
                        },
                    }                ],
                specialHours: {
                    specialHourPeriods: [
                        {
                            closed: true,
                            closeTime: {
                                hours: 42,
                                minutes: 42,
                                nanos: 42,
                                seconds: 42,
                            },
                            endDate: {
                                day: 42,
                                month: 42,
                                year: 42,
                            },
                            openTime: {
                                hours: 42,
                                minutes: 42,
                                nanos: 42,
                                seconds: 42,
                            },
                            startDate: {
                                day: 42,
                                month: 42,
                                year: 42,
                            },
                        }                    ],
                },
                storeCode: "Test string",
                storefrontAddress: {
                    addressLines: [
                        "Test string"                    ],
                    administrativeArea: "Test string",
                    languageCode: "Test string",
                    locality: "Test string",
                    organization: "Test string",
                    postalCode: "Test string",
                    recipients: [
                        "Test string"                    ],
                    regionCode: "Test string",
                    revision: 42,
                    sortingCode: "Test string",
                    sublocality: "Test string",
                },
                title: "Test string",
                websiteUri: "Test string",
            },
            pageSize: 42,
            query: "Test string",
        });
        /**
         * Associates a location to a place ID. Any previous association is overwritten. This operation is only valid if the location is unverified. The association must be valid, that is, it
         * appears in the list of `SearchGoogleLocations`.
         */
        await gapi.client.mybusinessbusinessinformation.locations.associate({
            name: "Test string",
        }, {
            placeId: "Test string",
        });
        /** Gets the Google-updated version of the specified location. */
        await gapi.client.mybusinessbusinessinformation.locations.attributes.getGoogleUpdated({
            name: "Test string",
        });
        /** Clears an association between a location and its place ID. This operation is only valid if the location is unverified. */
        await gapi.client.mybusinessbusinessinformation.locations.clearLocationAssociation({
            name: "Test string",
        }, {
        });
        /** Gets the Google-updated version of the specified location. */
        await gapi.client.mybusinessbusinessinformation.locations.attributes.getGoogleUpdated({
            name: "Test string",
        });
        /**
         * Deletes a location. If this location cannot be deleted using the API and it is marked so in the `google.mybusiness.businessinformation.v1.LocationState`, use the [Google Business
         * Profile](https://business.google.com/manage/) website.
         */
        await gapi.client.mybusinessbusinessinformation.locations.delete({
            name: "Test string",
        });
        /** Gets the Google-updated version of the specified location. */
        await gapi.client.mybusinessbusinessinformation.locations.attributes.getGoogleUpdated({
            name: "Test string",
        });
        /** Returns the specified location. */
        await gapi.client.mybusinessbusinessinformation.locations.get({
            name: "Test string",
            readMask: "Test string",
        });
        /** Gets the Google-updated version of the specified location. */
        await gapi.client.mybusinessbusinessinformation.locations.attributes.getGoogleUpdated({
            name: "Test string",
        });
        /** Looks up all the attributes set for a given location. */
        await gapi.client.mybusinessbusinessinformation.locations.getAttributes({
            name: "Test string",
        });
        /** Gets the Google-updated version of the specified location. */
        await gapi.client.mybusinessbusinessinformation.locations.attributes.getGoogleUpdated({
            name: "Test string",
        });
        /** Gets the Google-updated version of the specified location. */
        await gapi.client.mybusinessbusinessinformation.locations.getGoogleUpdated({
            name: "Test string",
            readMask: "Test string",
        });
        /** Gets the Google-updated version of the specified location. */
        await gapi.client.mybusinessbusinessinformation.locations.attributes.getGoogleUpdated({
            name: "Test string",
        });
        /** Updates the specified location. */
        await gapi.client.mybusinessbusinessinformation.locations.patch({
            name: "Test string",
            updateMask: "Test string",
            validateOnly: true,
        }, {
            adWordsLocationExtensions: {
                adPhone: "Test string",
            },
            categories: {
                additionalCategories: [
                    {
                        displayName: "Test string",
                        moreHoursTypes: [
                            {
                                displayName: "Test string",
                                hoursTypeId: "Test string",
                                localizedDisplayName: "Test string",
                            }                        ],
                        name: "Test string",
                        serviceTypes: [
                            {
                                displayName: "Test string",
                                serviceTypeId: "Test string",
                            }                        ],
                    }                ],
                primaryCategory: {
                    displayName: "Test string",
                    moreHoursTypes: [
                        {
                            displayName: "Test string",
                            hoursTypeId: "Test string",
                            localizedDisplayName: "Test string",
                        }                    ],
                    name: "Test string",
                    serviceTypes: [
                        {
                            displayName: "Test string",
                            serviceTypeId: "Test string",
                        }                    ],
                },
            },
            labels: [
                "Test string"            ],
            languageCode: "Test string",
            latlng: {
                latitude: 42,
                longitude: 42,
            },
            metadata: {
                canDelete: true,
                canHaveBusinessCalls: true,
                canHaveFoodMenus: true,
                canModifyServiceList: true,
                canOperateHealthData: true,
                canOperateLocalPost: true,
                canOperateLodgingData: true,
                duplicateLocation: "Test string",
                hasGoogleUpdated: true,
                hasPendingEdits: true,
                hasVoiceOfMerchant: true,
                mapsUri: "Test string",
                newReviewUri: "Test string",
                placeId: "Test string",
            },
            moreHours: [
                {
                    hoursTypeId: "Test string",
                    periods: [
                        {
                            closeDay: "Test string",
                            closeTime: {
                                hours: 42,
                                minutes: 42,
                                nanos: 42,
                                seconds: 42,
                            },
                            openDay: "Test string",
                            openTime: {
                                hours: 42,
                                minutes: 42,
                                nanos: 42,
                                seconds: 42,
                            },
                        }                    ],
                }            ],
            name: "Test string",
            openInfo: {
                canReopen: true,
                openingDate: {
                    day: 42,
                    month: 42,
                    year: 42,
                },
                status: "Test string",
            },
            phoneNumbers: {
                additionalPhones: [
                    "Test string"                ],
                primaryPhone: "Test string",
            },
            profile: {
                description: "Test string",
            },
            regularHours: {
                periods: [
                    {
                        closeDay: "Test string",
                        closeTime: {
                            hours: 42,
                            minutes: 42,
                            nanos: 42,
                            seconds: 42,
                        },
                        openDay: "Test string",
                        openTime: {
                            hours: 42,
                            minutes: 42,
                            nanos: 42,
                            seconds: 42,
                        },
                    }                ],
            },
            relationshipData: {
                childrenLocations: [
                    {
                        placeId: "Test string",
                        relationType: "Test string",
                    }                ],
                parentChain: "Test string",
                parentLocation: {
                    placeId: "Test string",
                    relationType: "Test string",
                },
            },
            serviceArea: {
                businessType: "Test string",
                places: {
                    placeInfos: [
                        {
                            placeId: "Test string",
                            placeName: "Test string",
                        }                    ],
                },
                regionCode: "Test string",
            },
            serviceItems: [
                {
                    freeFormServiceItem: {
                        category: "Test string",
                        label: {
                            description: "Test string",
                            displayName: "Test string",
                            languageCode: "Test string",
                        },
                    },
                    price: {
                        currencyCode: "Test string",
                        nanos: 42,
                        units: "Test string",
                    },
                    structuredServiceItem: {
                        description: "Test string",
                        serviceTypeId: "Test string",
                    },
                }            ],
            specialHours: {
                specialHourPeriods: [
                    {
                        closed: true,
                        closeTime: {
                            hours: 42,
                            minutes: 42,
                            nanos: 42,
                            seconds: 42,
                        },
                        endDate: {
                            day: 42,
                            month: 42,
                            year: 42,
                        },
                        openTime: {
                            hours: 42,
                            minutes: 42,
                            nanos: 42,
                            seconds: 42,
                        },
                        startDate: {
                            day: 42,
                            month: 42,
                            year: 42,
                        },
                    }                ],
            },
            storeCode: "Test string",
            storefrontAddress: {
                addressLines: [
                    "Test string"                ],
                administrativeArea: "Test string",
                languageCode: "Test string",
                locality: "Test string",
                organization: "Test string",
                postalCode: "Test string",
                recipients: [
                    "Test string"                ],
                regionCode: "Test string",
                revision: 42,
                sortingCode: "Test string",
                sublocality: "Test string",
            },
            title: "Test string",
            websiteUri: "Test string",
        });
        /** Gets the Google-updated version of the specified location. */
        await gapi.client.mybusinessbusinessinformation.locations.attributes.getGoogleUpdated({
            name: "Test string",
        });
        /** Update attributes for a given location. */
        await gapi.client.mybusinessbusinessinformation.locations.updateAttributes({
            attributeMask: "Test string",
            name: "Test string",
        }, {
            attributes: [
                {
                    name: "Test string",
                    repeatedEnumValue: {
                        setValues: [
                            "Test string"                        ],
                        unsetValues: [
                            "Test string"                        ],
                    },
                    uriValues: [
                        {
                            uri: "Test string",
                        }                    ],
                    values: [
                        42                    ],
                    valueType: "Test string",
                }            ],
            name: "Test string",
        });
        /** Gets the Google-updated version of the specified location. */
        await gapi.client.mybusinessbusinessinformation.locations.attributes.getGoogleUpdated({
            name: "Test string",
        });
    }
});
