/* This is stub file for gapi.client.androidmanagement-v1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20240925

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://androidmanagement.googleapis.com/$discovery/rest?version=v1'
  );
  /** now we can use gapi.client.androidmanagement */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** Manage Android devices and apps for your customers */
    'https://www.googleapis.com/auth/androidmanagement',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Creates an enterprise. This is the last step in the enterprise signup flow. See also: SigninDetail */
    await gapi.client.androidmanagement.enterprises.create(
      {
        agreementAccepted: true,
        enterpriseToken: 'Test string',
        projectId: 'Test string',
        signupUrlName: 'Test string',
      },
      {
        appAutoApprovalEnabled: true,
        contactInfo: {
          contactEmail: 'Test string',
          dataProtectionOfficerEmail: 'Test string',
          dataProtectionOfficerName: 'Test string',
          dataProtectionOfficerPhone: 'Test string',
          euRepresentativeEmail: 'Test string',
          euRepresentativeName: 'Test string',
          euRepresentativePhone: 'Test string',
        },
        enabledNotificationTypes: ['Test string'],
        enterpriseDisplayName: 'Test string',
        googleAuthenticationSettings: {
          googleAuthenticationRequired: 'Test string',
        },
        logo: {
          sha256Hash: 'Test string',
          url: 'Test string',
        },
        name: 'Test string',
        primaryColor: 42,
        pubsubTopic: 'Test string',
        signinDetails: [
          {
            allowPersonalUsage: 'Test string',
            defaultStatus: 'Test string',
            qrCode: 'Test string',
            signinEnrollmentToken: 'Test string',
            signinUrl: 'Test string',
            tokenTag: 'Test string',
          },
        ],
        termsAndConditions: [
          {
            content: {
              defaultMessage: 'Test string',
              localizedMessages: {
                A: 'Test string',
              },
            },
            header: {
              defaultMessage: 'Test string',
              localizedMessages: {
                A: 'Test string',
              },
            },
          },
        ],
      }
    );
    /** Permanently deletes an enterprise and all accounts and data associated with it. Warning: this will result in a cascaded deletion of all AM API devices associated with the deleted enterprise. Only available for EMM-managed enterprises. */
    await gapi.client.androidmanagement.enterprises.delete({
      name: 'Test string',
    });
    /** Gets an enterprise. */
    await gapi.client.androidmanagement.enterprises.get({
      name: 'Test string',
    });
    /** Lists EMM-managed enterprises. Only BASIC fields are returned. */
    await gapi.client.androidmanagement.enterprises.list({
      pageSize: 42,
      pageToken: 'Test string',
      projectId: 'Test string',
      view: 'Test string',
    });
    /** Updates an enterprise. See also: SigninDetail */
    await gapi.client.androidmanagement.enterprises.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        appAutoApprovalEnabled: true,
        contactInfo: {
          contactEmail: 'Test string',
          dataProtectionOfficerEmail: 'Test string',
          dataProtectionOfficerName: 'Test string',
          dataProtectionOfficerPhone: 'Test string',
          euRepresentativeEmail: 'Test string',
          euRepresentativeName: 'Test string',
          euRepresentativePhone: 'Test string',
        },
        enabledNotificationTypes: ['Test string'],
        enterpriseDisplayName: 'Test string',
        googleAuthenticationSettings: {
          googleAuthenticationRequired: 'Test string',
        },
        logo: {
          sha256Hash: 'Test string',
          url: 'Test string',
        },
        name: 'Test string',
        primaryColor: 42,
        pubsubTopic: 'Test string',
        signinDetails: [
          {
            allowPersonalUsage: 'Test string',
            defaultStatus: 'Test string',
            qrCode: 'Test string',
            signinEnrollmentToken: 'Test string',
            signinUrl: 'Test string',
            tokenTag: 'Test string',
          },
        ],
        termsAndConditions: [
          {
            content: {
              defaultMessage: 'Test string',
              localizedMessages: {
                A: 'Test string',
              },
            },
            header: {
              defaultMessage: 'Test string',
              localizedMessages: {
                A: 'Test string',
              },
            },
          },
        ],
      }
    );
    /** Gets info about an application. */
    await gapi.client.androidmanagement.enterprises.applications.get({
      languageCode: 'Test string',
      name: 'Test string',
    });
    /** Deletes a device. This operation wipes the device. Deleted devices do not show up in enterprises.devices.list calls and a 404 is returned from enterprises.devices.get. */
    await gapi.client.androidmanagement.enterprises.devices.delete({
      name: 'Test string',
      wipeDataFlags: 'Test string',
      wipeReasonMessage: 'Test string',
    });
    /** Gets a device. Deleted devices will respond with a 404 error. */
    await gapi.client.androidmanagement.enterprises.devices.get({
      name: 'Test string',
    });
    /** Issues a command to a device. The Operation resource returned contains a Command in its metadata field. Use the get operation method to get the status of the command. */
    await gapi.client.androidmanagement.enterprises.devices.issueCommand(
      {
        name: 'Test string',
      },
      {
        clearAppsDataParams: {
          packageNames: ['Test string'],
        },
        clearAppsDataStatus: {
          results: {
            A: {
              clearingResult: 'Test string',
            },
          },
        },
        createTime: 'Test string',
        duration: 'Test string',
        errorCode: 'Test string',
        newPassword: 'Test string',
        resetPasswordFlags: ['Test string'],
        startLostModeParams: {
          lostEmailAddress: 'Test string',
          lostMessage: {
            defaultMessage: 'Test string',
            localizedMessages: {
              A: 'Test string',
            },
          },
          lostOrganization: {
            defaultMessage: 'Test string',
            localizedMessages: {
              A: 'Test string',
            },
          },
          lostPhoneNumber: {
            defaultMessage: 'Test string',
            localizedMessages: {
              A: 'Test string',
            },
          },
          lostStreetAddress: {
            defaultMessage: 'Test string',
            localizedMessages: {
              A: 'Test string',
            },
          },
        },
        startLostModeStatus: {
          status: 'Test string',
        },
        stopLostModeParams: {},
        stopLostModeStatus: {
          status: 'Test string',
        },
        type: 'Test string',
        userName: 'Test string',
      }
    );
    /** Lists devices for a given enterprise. Deleted devices are not returned in the response. */
    await gapi.client.androidmanagement.enterprises.devices.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates a device. */
    await gapi.client.androidmanagement.enterprises.devices.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        apiLevel: 42,
        applicationReports: [
          {
            applicationSource: 'Test string',
            displayName: 'Test string',
            events: [
              {
                createTime: 'Test string',
                eventType: 'Test string',
              },
            ],
            installerPackageName: 'Test string',
            keyedAppStates: [
              {
                createTime: 'Test string',
                data: 'Test string',
                key: 'Test string',
                lastUpdateTime: 'Test string',
                message: 'Test string',
                severity: 'Test string',
              },
            ],
            packageName: 'Test string',
            packageSha256Hash: 'Test string',
            signingKeyCertFingerprints: ['Test string'],
            state: 'Test string',
            userFacingType: 'Test string',
            versionCode: 42,
            versionName: 'Test string',
          },
        ],
        appliedPasswordPolicies: [
          {
            maximumFailedPasswordsForWipe: 42,
            passwordExpirationTimeout: 'Test string',
            passwordHistoryLength: 42,
            passwordMinimumLength: 42,
            passwordMinimumLetters: 42,
            passwordMinimumLowerCase: 42,
            passwordMinimumNonLetter: 42,
            passwordMinimumNumeric: 42,
            passwordMinimumSymbols: 42,
            passwordMinimumUpperCase: 42,
            passwordQuality: 'Test string',
            passwordScope: 'Test string',
            requirePasswordUnlock: 'Test string',
            unifiedLockSettings: 'Test string',
          },
        ],
        appliedPolicyName: 'Test string',
        appliedPolicyVersion: 'Test string',
        appliedState: 'Test string',
        commonCriteriaModeInfo: {
          commonCriteriaModeStatus: 'Test string',
          policySignatureVerificationStatus: 'Test string',
        },
        deviceSettings: {
          adbEnabled: true,
          developmentSettingsEnabled: true,
          encryptionStatus: 'Test string',
          isDeviceSecure: true,
          isEncrypted: true,
          unknownSourcesEnabled: true,
          verifyAppsEnabled: true,
        },
        disabledReason: {
          defaultMessage: 'Test string',
          localizedMessages: {
            A: 'Test string',
          },
        },
        displays: [
          {
            density: 42,
            displayId: 42,
            height: 42,
            name: 'Test string',
            refreshRate: 42,
            state: 'Test string',
            width: 42,
          },
        ],
        dpcMigrationInfo: {
          additionalData: 'Test string',
          previousDpc: 'Test string',
        },
        enrollmentTime: 'Test string',
        enrollmentTokenData: 'Test string',
        enrollmentTokenName: 'Test string',
        hardwareInfo: {
          batteryShutdownTemperatures: [42],
          batteryThrottlingTemperatures: [42],
          brand: 'Test string',
          cpuShutdownTemperatures: [42],
          cpuThrottlingTemperatures: [42],
          deviceBasebandVersion: 'Test string',
          enterpriseSpecificId: 'Test string',
          gpuShutdownTemperatures: [42],
          gpuThrottlingTemperatures: [42],
          hardware: 'Test string',
          manufacturer: 'Test string',
          model: 'Test string',
          serialNumber: 'Test string',
          skinShutdownTemperatures: [42],
          skinThrottlingTemperatures: [42],
        },
        hardwareStatusSamples: [
          {
            batteryTemperatures: [42],
            cpuTemperatures: [42],
            cpuUsages: [42],
            createTime: 'Test string',
            fanSpeeds: [42],
            gpuTemperatures: [42],
            skinTemperatures: [42],
          },
        ],
        lastPolicyComplianceReportTime: 'Test string',
        lastPolicySyncTime: 'Test string',
        lastStatusReportTime: 'Test string',
        managementMode: 'Test string',
        memoryEvents: [
          {
            byteCount: 'Test string',
            createTime: 'Test string',
            eventType: 'Test string',
          },
        ],
        memoryInfo: {
          totalInternalStorage: 'Test string',
          totalRam: 'Test string',
        },
        name: 'Test string',
        networkInfo: {
          imei: 'Test string',
          meid: 'Test string',
          networkOperatorName: 'Test string',
          telephonyInfos: [
            {
              carrierName: 'Test string',
              iccId: 'Test string',
              phoneNumber: 'Test string',
            },
          ],
          wifiMacAddress: 'Test string',
        },
        nonComplianceDetails: [
          {
            currentValue: 42,
            fieldPath: 'Test string',
            installationFailureReason: 'Test string',
            nonComplianceReason: 'Test string',
            packageName: 'Test string',
            settingName: 'Test string',
            specificNonComplianceContext: {
              oncWifiContext: {
                wifiGuid: 'Test string',
              },
              passwordPoliciesContext: {
                passwordPolicyScope: 'Test string',
              },
            },
            specificNonComplianceReason: 'Test string',
          },
        ],
        ownership: 'Test string',
        policyCompliant: true,
        policyName: 'Test string',
        powerManagementEvents: [
          {
            batteryLevel: 42,
            createTime: 'Test string',
            eventType: 'Test string',
          },
        ],
        previousDeviceNames: ['Test string'],
        securityPosture: {
          devicePosture: 'Test string',
          postureDetails: [
            {
              advice: [
                {
                  defaultMessage: 'Test string',
                  localizedMessages: {
                    A: 'Test string',
                  },
                },
              ],
              securityRisk: 'Test string',
            },
          ],
        },
        softwareInfo: {
          androidBuildNumber: 'Test string',
          androidBuildTime: 'Test string',
          androidDevicePolicyVersionCode: 42,
          androidDevicePolicyVersionName: 'Test string',
          androidVersion: 'Test string',
          bootloaderVersion: 'Test string',
          deviceBuildSignature: 'Test string',
          deviceKernelVersion: 'Test string',
          primaryLanguageCode: 'Test string',
          securityPatchLevel: 'Test string',
          systemUpdateInfo: {
            updateReceivedTime: 'Test string',
            updateStatus: 'Test string',
          },
        },
        state: 'Test string',
        systemProperties: {
          A: 'Test string',
        },
        user: {
          accountIdentifier: 'Test string',
        },
        userName: 'Test string',
      }
    );
    /** Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns google.rpc.Code.UNIMPLEMENTED. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to Code.CANCELLED. */
    await gapi.client.androidmanagement.enterprises.devices.operations.cancel({
      name: 'Test string',
    });
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.androidmanagement.enterprises.devices.operations.get({
      name: 'Test string',
    });
    /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns UNIMPLEMENTED. */
    await gapi.client.androidmanagement.enterprises.devices.operations.list({
      filter: 'Test string',
      name: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Creates an enrollment token for a given enterprise. It's up to the caller's responsibility to manage the lifecycle of newly created tokens and deleting them when they're not intended to be used anymore. */
    await gapi.client.androidmanagement.enterprises.enrollmentTokens.create(
      {
        parent: 'Test string',
      },
      {
        additionalData: 'Test string',
        allowPersonalUsage: 'Test string',
        duration: 'Test string',
        expirationTimestamp: 'Test string',
        name: 'Test string',
        oneTimeOnly: true,
        policyName: 'Test string',
        qrCode: 'Test string',
        user: {
          accountIdentifier: 'Test string',
        },
        value: 'Test string',
      }
    );
    /** Deletes an enrollment token. This operation invalidates the token, preventing its future use. */
    await gapi.client.androidmanagement.enterprises.enrollmentTokens.delete({
      name: 'Test string',
    });
    /** Gets an active, unexpired enrollment token. A partial view of the enrollment token is returned. Only the following fields are populated: name, expirationTimestamp, allowPersonalUsage, value, qrCode. This method is meant to help manage active enrollment tokens lifecycle. For security reasons, it's recommended to delete active enrollment tokens as soon as they're not intended to be used anymore. */
    await gapi.client.androidmanagement.enterprises.enrollmentTokens.get({
      name: 'Test string',
    });
    /** Lists active, unexpired enrollment tokens for a given enterprise. The list items contain only a partial view of EnrollmentToken object. Only the following fields are populated: name, expirationTimestamp, allowPersonalUsage, value, qrCode. This method is meant to help manage active enrollment tokens lifecycle. For security reasons, it's recommended to delete active enrollment tokens as soon as they're not intended to be used anymore. */
    await gapi.client.androidmanagement.enterprises.enrollmentTokens.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Creates a migration token, to migrate an existing device from being managed by the EMM's Device Policy Controller (DPC) to being managed by the Android Management API. See the guide (https://developers.google.com/android/management/dpc-migration) for more details. */
    await gapi.client.androidmanagement.enterprises.migrationTokens.create(
      {
        parent: 'Test string',
      },
      {
        additionalData: 'Test string',
        createTime: 'Test string',
        device: 'Test string',
        deviceId: 'Test string',
        expireTime: 'Test string',
        managementMode: 'Test string',
        name: 'Test string',
        policy: 'Test string',
        ttl: 'Test string',
        userId: 'Test string',
        value: 'Test string',
      }
    );
    /** Gets a migration token. */
    await gapi.client.androidmanagement.enterprises.migrationTokens.get({
      name: 'Test string',
    });
    /** Lists migration tokens. */
    await gapi.client.androidmanagement.enterprises.migrationTokens.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Deletes a policy. This operation is only permitted if no devices are currently referencing the policy. */
    await gapi.client.androidmanagement.enterprises.policies.delete({
      name: 'Test string',
    });
    /** Gets a policy. */
    await gapi.client.androidmanagement.enterprises.policies.get({
      name: 'Test string',
    });
    /** Lists policies for a given enterprise. */
    await gapi.client.androidmanagement.enterprises.policies.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates or creates a policy. */
    await gapi.client.androidmanagement.enterprises.policies.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        accountTypesWithManagementDisabled: ['Test string'],
        addUserDisabled: true,
        adjustVolumeDisabled: true,
        advancedSecurityOverrides: {
          commonCriteriaMode: 'Test string',
          contentProtectionPolicy: 'Test string',
          developerSettings: 'Test string',
          googlePlayProtectVerifyApps: 'Test string',
          mtePolicy: 'Test string',
          personalAppsThatCanReadWorkNotifications: ['Test string'],
          untrustedAppsPolicy: 'Test string',
        },
        alwaysOnVpnPackage: {
          lockdownEnabled: true,
          packageName: 'Test string',
        },
        androidDevicePolicyTracks: ['Test string'],
        appAutoUpdatePolicy: 'Test string',
        applications: [
          {
            accessibleTrackIds: ['Test string'],
            alwaysOnVpnLockdownExemption: 'Test string',
            autoUpdateMode: 'Test string',
            connectedWorkAndPersonalApp: 'Test string',
            credentialProviderPolicy: 'Test string',
            defaultPermissionPolicy: 'Test string',
            delegatedScopes: ['Test string'],
            disabled: true,
            extensionConfig: {
              notificationReceiver: 'Test string',
              signingKeyFingerprintsSha256: ['Test string'],
            },
            installConstraint: [
              {
                chargingConstraint: 'Test string',
                deviceIdleConstraint: 'Test string',
                networkTypeConstraint: 'Test string',
              },
            ],
            installPriority: 42,
            installType: 'Test string',
            lockTaskAllowed: true,
            managedConfiguration: {
              A: 42,
            },
            managedConfigurationTemplate: {
              configurationVariables: {
                A: 'Test string',
              },
              templateId: 'Test string',
            },
            minimumVersionCode: 42,
            packageName: 'Test string',
            permissionGrants: [
              {
                permission: 'Test string',
                policy: 'Test string',
              },
            ],
            userControlSettings: 'Test string',
            workProfileWidgets: 'Test string',
          },
        ],
        assistContentPolicy: 'Test string',
        autoDateAndTimeZone: 'Test string',
        autoTimeRequired: true,
        blockApplicationsEnabled: true,
        bluetoothConfigDisabled: true,
        bluetoothContactSharingDisabled: true,
        bluetoothDisabled: true,
        cameraAccess: 'Test string',
        cameraDisabled: true,
        cellBroadcastsConfigDisabled: true,
        choosePrivateKeyRules: [
          {
            packageNames: ['Test string'],
            privateKeyAlias: 'Test string',
            urlPattern: 'Test string',
          },
        ],
        complianceRules: [
          {
            apiLevelCondition: {
              minApiLevel: 42,
            },
            disableApps: true,
            nonComplianceDetailCondition: {
              nonComplianceReason: 'Test string',
              packageName: 'Test string',
              settingName: 'Test string',
            },
            packageNamesToDisable: ['Test string'],
          },
        ],
        createWindowsDisabled: true,
        credentialProviderPolicyDefault: 'Test string',
        credentialsConfigDisabled: true,
        crossProfilePolicies: {
          crossProfileCopyPaste: 'Test string',
          crossProfileDataSharing: 'Test string',
          exemptionsToShowWorkContactsInPersonalProfile: {
            packageNames: ['Test string'],
          },
          showWorkContactsInPersonalProfile: 'Test string',
          workProfileWidgetsDefault: 'Test string',
        },
        dataRoamingDisabled: true,
        debuggingFeaturesAllowed: true,
        defaultPermissionPolicy: 'Test string',
        deviceConnectivityManagement: {
          configureWifi: 'Test string',
          tetheringSettings: 'Test string',
          usbDataAccess: 'Test string',
          wifiDirectSettings: 'Test string',
          wifiRoamingPolicy: {
            wifiRoamingSettings: [
              {
                wifiRoamingMode: 'Test string',
                wifiSsid: 'Test string',
              },
            ],
          },
          wifiSsidPolicy: {
            wifiSsidPolicyType: 'Test string',
            wifiSsids: [
              {
                wifiSsid: 'Test string',
              },
            ],
          },
        },
        deviceOwnerLockScreenInfo: {
          defaultMessage: 'Test string',
          localizedMessages: {
            A: 'Test string',
          },
        },
        deviceRadioState: {
          airplaneModeState: 'Test string',
          cellularTwoGState: 'Test string',
          minimumWifiSecurityLevel: 'Test string',
          ultraWidebandState: 'Test string',
          wifiState: 'Test string',
        },
        displaySettings: {
          screenBrightnessSettings: {
            screenBrightness: 42,
            screenBrightnessMode: 'Test string',
          },
          screenTimeoutSettings: {
            screenTimeout: 'Test string',
            screenTimeoutMode: 'Test string',
          },
        },
        encryptionPolicy: 'Test string',
        ensureVerifyAppsEnabled: true,
        factoryResetDisabled: true,
        frpAdminEmails: ['Test string'],
        funDisabled: true,
        installAppsDisabled: true,
        installUnknownSourcesAllowed: true,
        keyguardDisabled: true,
        keyguardDisabledFeatures: ['Test string'],
        kioskCustomization: {
          deviceSettings: 'Test string',
          powerButtonActions: 'Test string',
          statusBar: 'Test string',
          systemErrorWarnings: 'Test string',
          systemNavigation: 'Test string',
        },
        kioskCustomLauncherEnabled: true,
        locationMode: 'Test string',
        longSupportMessage: {
          defaultMessage: 'Test string',
          localizedMessages: {
            A: 'Test string',
          },
        },
        maximumTimeToLock: 'Test string',
        microphoneAccess: 'Test string',
        minimumApiLevel: 42,
        mobileNetworksConfigDisabled: true,
        modifyAccountsDisabled: true,
        mountPhysicalMediaDisabled: true,
        name: 'Test string',
        networkEscapeHatchEnabled: true,
        networkResetDisabled: true,
        oncCertificateProviders: [
          {
            certificateReferences: ['Test string'],
            contentProviderEndpoint: {
              packageName: 'Test string',
              signingCertsSha256: ['Test string'],
              uri: 'Test string',
            },
          },
        ],
        openNetworkConfiguration: {
          A: 42,
        },
        outgoingBeamDisabled: true,
        outgoingCallsDisabled: true,
        passwordPolicies: [
          {
            maximumFailedPasswordsForWipe: 42,
            passwordExpirationTimeout: 'Test string',
            passwordHistoryLength: 42,
            passwordMinimumLength: 42,
            passwordMinimumLetters: 42,
            passwordMinimumLowerCase: 42,
            passwordMinimumNonLetter: 42,
            passwordMinimumNumeric: 42,
            passwordMinimumSymbols: 42,
            passwordMinimumUpperCase: 42,
            passwordQuality: 'Test string',
            passwordScope: 'Test string',
            requirePasswordUnlock: 'Test string',
            unifiedLockSettings: 'Test string',
          },
        ],
        passwordRequirements: {
          maximumFailedPasswordsForWipe: 42,
          passwordExpirationTimeout: 'Test string',
          passwordHistoryLength: 42,
          passwordMinimumLength: 42,
          passwordMinimumLetters: 42,
          passwordMinimumLowerCase: 42,
          passwordMinimumNonLetter: 42,
          passwordMinimumNumeric: 42,
          passwordMinimumSymbols: 42,
          passwordMinimumUpperCase: 42,
          passwordQuality: 'Test string',
          passwordScope: 'Test string',
          requirePasswordUnlock: 'Test string',
          unifiedLockSettings: 'Test string',
        },
        permissionGrants: [
          {
            permission: 'Test string',
            policy: 'Test string',
          },
        ],
        permittedAccessibilityServices: {
          packageNames: ['Test string'],
        },
        permittedInputMethods: {
          packageNames: ['Test string'],
        },
        persistentPreferredActivities: [
          {
            actions: ['Test string'],
            categories: ['Test string'],
            receiverActivity: 'Test string',
          },
        ],
        personalUsagePolicies: {
          accountTypesWithManagementDisabled: ['Test string'],
          cameraDisabled: true,
          maxDaysWithWorkOff: 42,
          personalApplications: [
            {
              installType: 'Test string',
              packageName: 'Test string',
            },
          ],
          personalPlayStoreMode: 'Test string',
          screenCaptureDisabled: true,
        },
        playStoreMode: 'Test string',
        policyEnforcementRules: [
          {
            blockAction: {
              blockAfterDays: 42,
              blockScope: 'Test string',
            },
            settingName: 'Test string',
            wipeAction: {
              preserveFrp: true,
              wipeAfterDays: 42,
            },
          },
        ],
        preferentialNetworkService: 'Test string',
        printingPolicy: 'Test string',
        privateKeySelectionEnabled: true,
        recommendedGlobalProxy: {
          excludedHosts: ['Test string'],
          host: 'Test string',
          pacUri: 'Test string',
          port: 42,
        },
        removeUserDisabled: true,
        safeBootDisabled: true,
        screenCaptureDisabled: true,
        setupActions: [
          {
            description: {
              defaultMessage: 'Test string',
              localizedMessages: {
                A: 'Test string',
              },
            },
            launchApp: {
              packageName: 'Test string',
            },
            title: {
              defaultMessage: 'Test string',
              localizedMessages: {
                A: 'Test string',
              },
            },
          },
        ],
        setUserIconDisabled: true,
        setWallpaperDisabled: true,
        shareLocationDisabled: true,
        shortSupportMessage: {
          defaultMessage: 'Test string',
          localizedMessages: {
            A: 'Test string',
          },
        },
        skipFirstUseHintsEnabled: true,
        smsDisabled: true,
        statusBarDisabled: true,
        statusReportingSettings: {
          applicationReportingSettings: {
            includeRemovedApps: true,
          },
          applicationReportsEnabled: true,
          commonCriteriaModeEnabled: true,
          deviceSettingsEnabled: true,
          displayInfoEnabled: true,
          hardwareStatusEnabled: true,
          memoryInfoEnabled: true,
          networkInfoEnabled: true,
          powerManagementEventsEnabled: true,
          softwareInfoEnabled: true,
          systemPropertiesEnabled: true,
        },
        stayOnPluggedModes: ['Test string'],
        systemUpdate: {
          endMinutes: 42,
          freezePeriods: [
            {
              endDate: {
                day: 42,
                month: 42,
                year: 42,
              },
              startDate: {
                day: 42,
                month: 42,
                year: 42,
              },
            },
          ],
          startMinutes: 42,
          type: 'Test string',
        },
        tetheringConfigDisabled: true,
        uninstallAppsDisabled: true,
        unmuteMicrophoneDisabled: true,
        usageLog: {
          enabledLogTypes: ['Test string'],
          uploadOnCellularAllowed: ['Test string'],
        },
        usbFileTransferDisabled: true,
        usbMassStorageEnabled: true,
        version: 'Test string',
        vpnConfigDisabled: true,
        wifiConfigDisabled: true,
        wifiConfigsLockdownEnabled: true,
      }
    );
    /** Creates a web app. */
    await gapi.client.androidmanagement.enterprises.webApps.create(
      {
        parent: 'Test string',
      },
      {
        displayMode: 'Test string',
        icons: [
          {
            imageData: 'Test string',
          },
        ],
        name: 'Test string',
        startUrl: 'Test string',
        title: 'Test string',
        versionCode: 'Test string',
      }
    );
    /** Deletes a web app. */
    await gapi.client.androidmanagement.enterprises.webApps.delete({
      name: 'Test string',
    });
    /** Gets a web app. */
    await gapi.client.androidmanagement.enterprises.webApps.get({
      name: 'Test string',
    });
    /** Lists web apps for a given enterprise. */
    await gapi.client.androidmanagement.enterprises.webApps.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates a web app. */
    await gapi.client.androidmanagement.enterprises.webApps.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        displayMode: 'Test string',
        icons: [
          {
            imageData: 'Test string',
          },
        ],
        name: 'Test string',
        startUrl: 'Test string',
        title: 'Test string',
        versionCode: 'Test string',
      }
    );
    /** Creates a web token to access an embeddable managed Google Play web UI for a given enterprise. */
    await gapi.client.androidmanagement.enterprises.webTokens.create(
      {
        parent: 'Test string',
      },
      {
        enabledFeatures: ['Test string'],
        name: 'Test string',
        parentFrameUrl: 'Test string',
        permissions: ['Test string'],
        value: 'Test string',
      }
    );
    /** Get the device provisioning information by the identifier provided in the sign-in url. */
    await gapi.client.androidmanagement.provisioningInfo.get({
      name: 'Test string',
    });
    /** Creates an enterprise signup URL. */
    await gapi.client.androidmanagement.signupUrls.create({
      adminEmail: 'Test string',
      callbackUrl: 'Test string',
      projectId: 'Test string',
    });
  }
});
