/* Type definitions for non-npm package Android Management API v1 0.0 */
// Project: https://developers.google.com/android/management
// Definitions by: Maxim Mazurok <https://github.com/Maxim-Mazurok>
//                 Nick Amoscato <https://github.com/namoscato>
//                 Declan Vong <https://github.com/declanvong>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped

// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
// Generated from: https://androidmanagement.googleapis.com/$discovery/rest?version=v1
// Revision: 20230724

/// <reference types="gapi.client" />

declare namespace gapi.client {
    /** Load Android Management API v1 */
    function load(urlOrObject: "https://androidmanagement.googleapis.com/$discovery/rest?version=v1"): Promise<void>;
    /** @deprecated Please load APIs with discovery documents. */
    function load(name: "androidmanagement", version: "v1"): Promise<void>;
    /** @deprecated Please load APIs with discovery documents. */
    function load(name: "androidmanagement", version: "v1", callback: () => any): void;

    namespace androidmanagement {
        interface AdbShellCommandEvent {
            /** Shell command that was issued over ADB via "adb shell command". Redacted to empty string on organization-owned managed profile devices. */
            shellCmd?:
                string;
        }
        // tslint:disable-next-line:no-empty-interface
        interface AdbShellInteractiveEvent {
        }
        interface AdvancedSecurityOverrides {
            /**
             * Controls Common Criteria Mode—security standards defined in the Common Criteria for Information Technology Security Evaluation (https://www.commoncriteriaportal.org/) (CC). Enabling
             * Common Criteria Mode increases certain security components on a device, including AES-GCM encryption of Bluetooth Long Term Keys, and Wi-Fi configuration stores.Warning: Common
             * Criteria Mode enforces a strict security model typically only required for IT products used in national security systems and other highly sensitive organizations. Standard device
             * use may be affected. Only enabled if required.
             */
            commonCriteriaMode?:
                string;
            /** Controls access to developer settings: developer options and safe boot. Replaces safeBootDisabled (deprecated) and debuggingFeaturesAllowed (deprecated). */
            developerSettings?:
                string;
            /** Whether Google Play Protect verification (https://support.google.com/accounts/answer/2812853) is enforced. Replaces ensureVerifyAppsEnabled (deprecated). */
            googlePlayProtectVerifyApps?:
                string;
            /**
             * Personal apps that can read work profile notifications using a NotificationListenerService
             * (https://developer.android.com/reference/android/service/notification/NotificationListenerService). By default, no personal apps (aside from system apps) can read work
             * notifications. Each value in the list must be a package name.
             */
            personalAppsThatCanReadWorkNotifications?:
                string[];
            /** The policy for untrusted apps (apps from unknown sources) enforced on the device. Replaces install_unknown_sources_allowed (deprecated). */
            untrustedAppsPolicy?:
                string;
        }
        interface AlwaysOnVpnPackage {
            /** Disallows networking when the VPN is not connected. */
            lockdownEnabled?:
                boolean;
            /** The package name of the VPN app. */
            packageName?:
                string;
        }
        interface ApiLevelCondition {
            /** The minimum desired Android Framework API level. If the device doesn't meet the minimum requirement, this condition is satisfied. Must be greater than zero. */
            minApiLevel?:
                number;
        }
        interface Application {
            /**
             * Whether this app is free, free with in-app purchases, or paid. If the pricing is unspecified, this means the app is not generally available anymore (even though it might still be
             * available to people who own it).
             */
            appPricing?:
                string;
            /** Application tracks visible to the enterprise. */
            appTracks?:
                AppTrackInfo[];
            /** Versions currently available for this app. */
            appVersions?:
                AppVersion[];
            /** The name of the author of the apps (for example, the app developer). */
            author?:
                string;
            /** The countries which this app is available in as per ISO 3166-1 alpha-2. */
            availableCountries?:
                string[];
            /** The app category (e.g. RACING, SOCIAL, etc.) */
            category?:
                string;
            /** The content rating for this app. */
            contentRating?:
                string;
            /** The localized promotional description, if available. */
            description?:
                string;
            /** How and to whom the package is made available. */
            distributionChannel?:
                string;
            /** Noteworthy features (if any) of this app. */
            features?:
                string[];
            /** Full app description, if available. */
            fullDescription?:
                string;
            /** A link to an image that can be used as an icon for the app. This image is suitable for use up to a pixel size of 512 x 512. */
            iconUrl?:
                string;
            /** The set of managed properties available to be pre-configured for the app. */
            managedProperties?:
                ManagedProperty[];
            /** The minimum Android SDK necessary to run the app. */
            minAndroidSdkVersion?:
                number;
            /** The name of the app in the form enterprises/{enterprise}/applications/{package_name}. */
            name?:
                string;
            /** The permissions required by the app. */
            permissions?:
                ApplicationPermission[];
            /** A link to the (consumer) Google Play details page for the app. */
            playStoreUrl?:
                string;
            /** A localised description of the recent changes made to the app. */
            recentChanges?:
                string;
            /** A list of screenshot links representing the app. */
            screenshotUrls?:
                string[];
            /** A link to a smaller image that can be used as an icon for the app. This image is suitable for use up to a pixel size of 128 x 128. */
            smallIconUrl?:
                string;
            /** The title of the app. Localized. */
            title?:
                string;
            /** Output only. The approximate time (within 7 days) the app was last published. */
            updateTime?:
                string;
        }
        interface ApplicationEvent {
            /** The creation time of the event. */
            createTime?:
                string;
            /** App event type. */
            eventType?:
                string;
        }
        interface ApplicationPermission {
            /** A longer description of the permission, providing more detail on what it affects. Localized. */
            description?:
                string;
            /** The name of the permission. Localized. */
            name?:
                string;
            /** An opaque string uniquely identifying the permission. Not localized. */
            permissionId?:
                string;
        }
        interface ApplicationPolicy {
            /**
             * List of the app’s track IDs that a device belonging to the enterprise can access. If the list contains multiple track IDs, devices receive the latest version among all accessible
             * tracks. If the list contains no track IDs, devices only have access to the app’s production track. More details about each track are available in AppTrackInfo.
             */
            accessibleTrackIds?:
                string[];
            /**
             * Specifies whether the app is allowed networking when the VPN is not connected and alwaysOnVpnPackage.lockdownEnabled is enabled. If set to VPN_LOCKDOWN_ENFORCED, the app is not
             * allowed networking, and if set to VPN_LOCKDOWN_EXEMPTION, the app is allowed networking. Only supported on devices running Android 10 and above. If this is not supported by the
             * device, the device will contain a NonComplianceDetail with non_compliance_reason set to API_LEVEL and a fieldPath. If this is not applicable to the app, the device will contain a
             * NonComplianceDetail with non_compliance_reason set to UNSUPPORTED and a fieldPath. The fieldPath is set to applications[i].alwaysOnVpnLockdownExemption, where i is the index of the
             * package in the applications policy.
             */
            alwaysOnVpnLockdownExemption?:
                string;
            /** Controls the auto-update mode for the app. */
            autoUpdateMode?:
                string;
            /** Controls whether the app can communicate with itself across a device’s work and personal profiles, subject to user consent. */
            connectedWorkAndPersonalApp?:
                string;
            /**
             * The default policy for all permissions requested by the app. If specified, this overrides the policy-level default_permission_policy which applies to all apps. It does not override
             * the permission_grants which applies to all apps.
             */
            defaultPermissionPolicy?:
                string;
            /** The scopes delegated to the app from Android Device Policy. */
            delegatedScopes?:
                string[];
            /** Whether the app is disabled. When disabled, the app data is still preserved. */
            disabled?:
                boolean;
            /** Configuration to enable this app as an extension app, with the capability of interacting with Android Device Policy offline.This field can be set for at most one app. */
            extensionConfig?:
                ExtensionConfig;
            /** The type of installation to perform. */
            installType?:
                string;
            /** Whether the app is allowed to lock itself in full-screen mode. DEPRECATED. Use InstallType KIOSK or kioskCustomLauncherEnabled to configure a dedicated device. */
            lockTaskAllowed?:
                boolean;
            /**
             * Managed configuration applied to the app. The format for the configuration is dictated by the ManagedProperty values supported by the app. Each field name in the managed
             * configuration must match the key field of the ManagedProperty. The field value must be compatible with the type of the ManagedProperty: *type* *JSON value* BOOL true or false STRING
             * string INTEGER number CHOICE string MULTISELECT array of strings HIDDEN string BUNDLE_ARRAY array of objects
             */
            managedConfiguration?:
                { [P in string]: any };
            /** The managed configurations template for the app, saved from the managed configurations iframe. This field is ignored if managed_configuration is set. */
            managedConfigurationTemplate?:
                ManagedConfigurationTemplate;
            /**
             * The minimum version of the app that runs on the device. If set, the device attempts to update the app to at least this version code. If the app is not up-to-date, the device will
             * contain a NonComplianceDetail with non_compliance_reason set to APP_NOT_UPDATED. The app must already be published to Google Play with a version code greater than or equal to this
             * value. At most 20 apps may specify a minimum version code per policy.
             */
            minimumVersionCode?:
                number;
            /** The package name of the app. For example, com.google.android.youtube for the YouTube app. */
            packageName?:
                string;
            /** Explicit permission grants or denials for the app. These values override the default_permission_policy and permission_grants which apply to all apps. */
            permissionGrants?:
                PermissionGrant[];
            /** Specifies whether the app installed in the work profile is allowed to add widgets to the home screen. */
            workProfileWidgets?:
                string;
        }
        interface ApplicationReport {
            /** The source of the package. */
            applicationSource?:
                string;
            /** The display name of the app. */
            displayName?:
                string;
            /** The list of app events which have occurred in the last 30 hours. */
            events?:
                ApplicationEvent[];
            /** The package name of the app that installed this app. */
            installerPackageName?:
                string;
            /** List of keyed app states reported by the app. */
            keyedAppStates?:
                KeyedAppState[];
            /** Package name of the app. */
            packageName?:
                string;
            /** The SHA-256 hash of the app's APK file, which can be used to verify the app hasn't been modified. Each byte of the hash value is represented as a two-digit hexadecimal number. */
            packageSha256Hash?:
                string;
            /**
             * The SHA-1 hash of each android.content.pm.Signature (https://developer.android.com/reference/android/content/pm/Signature.html) associated with the app package. Each byte of each
             * hash value is represented as a two-digit hexadecimal number.
             */
            signingKeyCertFingerprints?:
                string[];
            /** Application state. */
            state?:
                string;
            /** Whether the app is user facing. */
            userFacingType?:
                string;
            /** The app version code, which can be used to determine whether one version is more recent than another. */
            versionCode?:
                number;
            /** The app version as displayed to the user. */
            versionName?:
                string;
        }
        interface ApplicationReportingSettings {
            /** Whether removed apps are included in application reports. */
            includeRemovedApps?:
                boolean;
        }
        interface AppProcessInfo {
            /** SHA-256 hash of the base APK, in hexadecimal format. */
            apkSha256Hash?:
                string;
            /**
             * Package names of all packages that are associated with the particular user ID. In most cases, this will be a single package name, the package that has been assigned that user ID. If
             * multiple application share a UID then all packages sharing UID will be included.
             */
            packageNames?:
                string[];
            /** Process ID. */
            pid?:
                number;
            /** Process name. */
            processName?:
                string;
            /** SELinux policy info. */
            seinfo?:
                string;
            /** Process start time. */
            startTime?:
                string;
            /** UID of the package. */
            uid?:
                number;
        }
        interface AppProcessStartEvent {
            /** Information about a process. */
            processInfo?:
                AppProcessInfo;
        }
        interface AppTrackInfo {
            /** The track name associated with the trackId, set in the Play Console. The name is modifiable from Play Console. */
            trackAlias?:
                string;
            /** The unmodifiable unique track identifier, taken from the releaseTrackId in the URL of the Play Console page that displays the app’s track information. */
            trackId?:
                string;
        }
        interface AppVersion {
            /** If the value is True, it indicates that this version is a production track. */
            production?:
                boolean;
            /** Track identifiers that the app version is published in. This does not include the production track (see production instead). */
            trackIds?:
                string[];
            /** Unique increasing identifier for the app version. */
            versionCode?:
                number;
            /** The string used in the Play store by the app developer to identify the version. The string is not necessarily unique or localized (for example, the string could be "1.4"). */
            versionString?:
                string;
        }
        interface BatchUsageLogEvents {
            /** The name of the device in the form ‘enterprises/{enterpriseId}/devices/{deviceId}’ */
            device?:
                string;
            /** The device timestamp when the batch of events were collected from the device. */
            retrievalTime?:
                string;
            /** The list of UsageLogEvent that were reported by the device, sorted chronologically by the event time. */
            usageLogEvents?:
                UsageLogEvent[];
            /** The resource name of the user that owns this device in the form ‘enterprises/{enterpriseId}/users/{userId}’. */
            user?:
                string;
        }
        interface BlockAction {
            /** Number of days the policy is non-compliant before the device or work profile is blocked. To block access immediately, set to 0. blockAfterDays must be less than wipeAfterDays. */
            blockAfterDays?:
                number;
            /** Specifies the scope of this BlockAction. Only applicable to devices that are company-owned. */
            blockScope?:
                string;
        }
        interface CertAuthorityInstalledEvent {
            /** Subject of the certificate. */
            certificate?:
                string;
            /** Whether the installation event succeeded. */
            success?:
                boolean;
            /** The user in which the certificate install event happened. Only available for devices running Android 11 and above. */
            userId?:
                number;
        }
        interface CertAuthorityRemovedEvent {
            /** Subject of the certificate. */
            certificate?:
                string;
            /** Whether the removal succeeded. */
            success?:
                boolean;
            /** The user in which the certificate removal event occurred. Only available for devices running Android 11 and above. */
            userId?:
                number;
        }
        interface CertValidationFailureEvent {
            /** The reason why certification validation failed. */
            failureReason?:
                string;
        }
        interface ChoosePrivateKeyRule {
            // tslint:disable:max-line-length
            /**
             * The package names to which this rule applies. The hash of the signing certificate for each app is verified against the hash provided by Play. If no package names are specified, then
             * the alias is provided to all apps that call KeyChain.choosePrivateKeyAlias
             * (https://developer.android.com/reference/android/security/KeyChain#choosePrivateKeyAlias%28android.app.Activity,%20android.security.KeyChainAliasCallback,%20java.lang.String[],%20java.security.Principal[],%20java.lang.String,%20int,%20java.lang.String%29)
             * or any overloads (but not without calling KeyChain.choosePrivateKeyAlias, even on Android 11 and above). Any app with the same Android UID as a package specified here will have
             * access when they call KeyChain.choosePrivateKeyAlias.
             */
            // tslint:enable:max-line-length
            packageNames?:
                string[];
            /** The alias of the private key to be used. */
            privateKeyAlias?:
                string;
            /** The URL pattern to match against the URL of the request. If not set or empty, it matches all URLs. This uses the regular expression syntax of java.util.regex.Pattern. */
            urlPattern?:
                string;
        }
        interface ClearAppsDataParams {
            /** The package names of the apps whose data will be cleared when the command is executed. */
            packageNames?:
                string[];
        }
        interface ClearAppsDataStatus {
            /** The per-app results, a mapping from package names to the respective clearing result. */
            results?:
                { [P in string]: PerAppResult };
        }
        interface Command {
            /**
             * Parameters for the CLEAR_APP_DATA command to clear the data of specified apps from the device. See ClearAppsDataParams. If this is set, then it is suggested that type should not be
             * set. In this case, the server automatically sets it to CLEAR_APP_DATA. It is also acceptable to explicitly set type to CLEAR_APP_DATA.
             */
            clearAppsDataParams?:
                ClearAppsDataParams;
            /** Output only. Status of the CLEAR_APP_DATA command to clear the data of specified apps from the device. See ClearAppsDataStatus. */
            clearAppsDataStatus?:
                ClearAppsDataStatus;
            /** The timestamp at which the command was created. The timestamp is automatically generated by the server. */
            createTime?:
                string;
            /**
             * The duration for which the command is valid. The command will expire if not executed by the device during this time. The default duration if unspecified is ten minutes. There is no
             * maximum duration.
             */
            duration?:
                string;
            /** If the command failed, an error code explaining the failure. This is not set when the command is cancelled by the caller. */
            errorCode?:
                string;
            /** For commands of type RESET_PASSWORD, optionally specifies the new password. */
            newPassword?:
                string;
            /** For commands of type RESET_PASSWORD, optionally specifies flags. */
            resetPasswordFlags?:
                string[];
            /**
             * Parameters for the START_LOST_MODE command to put the device into lost mode. See StartLostModeParams. If this is set, then it is suggested that type should not be set. In this case,
             * the server automatically sets it to START_LOST_MODE. It is also acceptable to explicitly set type to START_LOST_MODE.
             */
            startLostModeParams?:
                StartLostModeParams;
            /** Output only. Status of the START_LOST_MODE command to put the device into lost mode. See StartLostModeStatus. */
            startLostModeStatus?:
                StartLostModeStatus;
            /**
             * Parameters for the STOP_LOST_MODE command to take the device out of lost mode. See StopLostModeParams. If this is set, then it is suggested that type should not be set. In this
             * case, the server automatically sets it to STOP_LOST_MODE. It is also acceptable to explicitly set type to STOP_LOST_MODE.
             */
            stopLostModeParams?:
                any;
            /** Output only. Status of the STOP_LOST_MODE command to take the device out of lost mode. See StopLostModeStatus. */
            stopLostModeStatus?:
                StopLostModeStatus;
            /** The type of the command. */
            type?:
                string;
            /**
             * The resource name of the user that owns the device in the form enterprises/{enterpriseId}/users/{userId}. This is automatically generated by the server based on the device the
             * command is sent to.
             */
            userName?:
                string;
        }
        interface CommonCriteriaModeInfo {
            /** Whether Common Criteria Mode is enabled. */
            commonCriteriaModeStatus?:
                string;
        }
        interface ComplianceRule {
            /** A condition which is satisfied if the Android Framework API level on the device doesn't meet a minimum requirement. */
            apiLevelCondition?:
                ApiLevelCondition;
            /**
             * If set to true, the rule includes a mitigating action to disable apps so that the device is effectively disabled, but app data is preserved. If the device is running an app in
             * locked task mode, the app will be closed and a UI showing the reason for non-compliance will be displayed.
             */
            disableApps?:
                boolean;
            /** A condition which is satisfied if there exists any matching NonComplianceDetail for the device. */
            nonComplianceDetailCondition?:
                NonComplianceDetailCondition;
            /** If set, the rule includes a mitigating action to disable apps specified in the list, but app data is preserved. */
            packageNamesToDisable?:
                string[];
        }
        interface ConnectEvent {
            /** The destination IP address of the connect call. */
            destinationIpAddress?:
                string;
            /** The destination port of the connect call. */
            destinationPort?:
                number;
            /** The package name of the UID that performed the connect call. */
            packageName?:
                string;
        }
        interface ContactInfo {
            /** Email address for a point of contact, which will be used to send important announcements related to managed Google Play. */
            contactEmail?:
                string;
            /** The email of the data protection officer. The email is validated but not verified. */
            dataProtectionOfficerEmail?:
                string;
            /** The name of the data protection officer. */
            dataProtectionOfficerName?:
                string;
            /** The phone number of the data protection officer The phone number is validated but not verified. */
            dataProtectionOfficerPhone?:
                string;
            /** The email of the EU representative. The email is validated but not verified. */
            euRepresentativeEmail?:
                string;
            /** The name of the EU representative. */
            euRepresentativeName?:
                string;
            /** The phone number of the EU representative. The phone number is validated but not verified. */
            euRepresentativePhone?:
                string;
        }
        interface ContentProviderEndpoint {
            /** This feature is not generally available. */
            packageName?:
                string;
            /** Required. This feature is not generally available. */
            signingCertsSha256?:
                string[];
            /** This feature is not generally available. */
            uri?:
                string;
        }
        interface CrossProfilePolicies {
            /** Whether text copied from one profile (personal or work) can be pasted in the other profile. */
            crossProfileCopyPaste?:
                string;
            /**
             * Whether data from one profile (personal or work) can be shared with apps in the other profile. Specifically controls simple data sharing via intents. Management of other
             * cross-profile communication channels, such as contact search, copy/paste, or connected work & personal apps, are configured separately.
             */
            crossProfileDataSharing?:
                string;
            /** Whether contacts stored in the work profile can be shown in personal profile contact searches and incoming calls. */
            showWorkContactsInPersonalProfile?:
                string;
            /**
             * Specifies the default behaviour for work profile widgets. If the policy does not specify work_profile_widgets for a specific application, it will behave according to the value
             * specified here.
             */
            workProfileWidgetsDefault?:
                string;
        }
        interface CryptoSelfTestCompletedEvent {
            /** Whether the test succeeded. */
            success?:
                boolean;
        }
        interface Date {
            /** Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant. */
            day?:
                number;
            /** Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day. */
            month?:
                number;
            /** Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year. */
            year?:
                number;
        }
        interface Device {
            /** The API level of the Android platform version running on the device. */
            apiLevel?:
                number;
            /** Reports for apps installed on the device. This information is only available when application_reports_enabled is true in the device's policy. */
            applicationReports?:
                ApplicationReport[];
            /**
             * The password requirements currently applied to the device. The applied requirements may be slightly different from those specified in passwordPolicies in some cases. fieldPath is
             * set based on passwordPolicies.
             */
            appliedPasswordPolicies?:
                PasswordRequirements[];
            /** The name of the policy currently applied to the device. */
            appliedPolicyName?:
                string;
            /** The version of the policy currently applied to the device. */
            appliedPolicyVersion?:
                string;
            /** The state currently applied to the device. */
            appliedState?:
                string;
            /**
             * Information about Common Criteria Mode—security standards defined in the Common Criteria for Information Technology Security Evaluation (https://www.commoncriteriaportal.org/)
             * (CC).This information is only available if statusReportingSettings.commonCriteriaModeEnabled is true in the device's policy.
             */
            commonCriteriaModeInfo?:
                CommonCriteriaModeInfo;
            /** Device settings information. This information is only available if deviceSettingsEnabled is true in the device's policy. */
            deviceSettings?:
                DeviceSettings;
            /** If the device state is DISABLED, an optional message that is displayed on the device indicating the reason the device is disabled. This field can be modified by a patch request. */
            disabledReason?:
                UserFacingMessage;
            /** Detailed information about displays on the device. This information is only available if displayInfoEnabled is true in the device's policy. */
            displays?:
                Display[];
            /** The time of device enrollment. */
            enrollmentTime?:
                string;
            /** If the device was enrolled with an enrollment token with additional data provided, this field contains that data. */
            enrollmentTokenData?:
                string;
            /** If the device was enrolled with an enrollment token, this field contains the name of the token. */
            enrollmentTokenName?:
                string;
            /** Detailed information about the device hardware. */
            hardwareInfo?:
                HardwareInfo;
            /** Hardware status samples in chronological order. This information is only available if hardwareStatusEnabled is true in the device's policy. */
            hardwareStatusSamples?:
                HardwareStatus[];
            /** Deprecated. */
            lastPolicyComplianceReportTime?:
                string;
            /** The last time the device fetched its policy. */
            lastPolicySyncTime?:
                string;
            /** The last time the device sent a status report. */
            lastStatusReportTime?:
                string;
            /** The type of management mode Android Device Policy takes on the device. This influences which policy settings are supported. */
            managementMode?:
                string;
            /** Events related to memory and storage measurements in chronological order. This information is only available if memoryInfoEnabled is true in the device's policy. */
            memoryEvents?:
                MemoryEvent[];
            /** Memory information: contains information about device memory and storage. */
            memoryInfo?:
                MemoryInfo;
            /** The name of the device in the form enterprises/{enterpriseId}/devices/{deviceId}. */
            name?:
                string;
            /** Device network information. This information is only available if networkInfoEnabled is true in the device's policy. */
            networkInfo?:
                NetworkInfo;
            /** Details about policy settings that the device is not compliant with. */
            nonComplianceDetails?:
                NonComplianceDetail[];
            /** Ownership of the managed device. */
            ownership?:
                string;
            /** Whether the device is compliant with its policy. */
            policyCompliant?:
                boolean;
            /**
             * The name of the policy applied to the device, in the form enterprises/{enterpriseId}/policies/{policyId}. If not specified, the policy_name for the device's user is applied. This
             * field can be modified by a patch request. You can specify only the policyId when calling enterprises.devices.patch, as long as the policyId doesn’t contain any slashes. The rest of
             * the policy name is inferred.
             */
            policyName?:
                string;
            /** Power management events on the device in chronological order. This information is only available if powerManagementEventsEnabled is true in the device's policy. */
            powerManagementEvents?:
                PowerManagementEvent[];
            /**
             * If the same physical device has been enrolled multiple times, this field contains its previous device names. The serial number is used as the unique identifier to determine if the
             * same physical device has enrolled previously. The names are in chronological order.
             */
            previousDeviceNames?:
                string[];
            /** Device's security posture value that reflects how secure the device is. */
            securityPosture?:
                SecurityPosture;
            /** Detailed information about the device software. This information is only available if softwareInfoEnabled is true in the device's policy. */
            softwareInfo?:
                SoftwareInfo;
            /**
             * The state to be applied to the device. This field can be modified by a patch request. Note that when calling enterprises.devices.patch, ACTIVE and DISABLED are the only allowable
             * values. To enter the device into a DELETED state, call enterprises.devices.delete.
             */
            state?:
                string;
            /** Map of selected system properties name and value related to the device. This information is only available if systemPropertiesEnabled is true in the device's policy. */
            systemProperties?:
                { [P in string]: string };
            /** The user who owns the device. */
            user?:
                User;
            /** The resource name of the user that owns this device in the form enterprises/{enterpriseId}/users/{userId}. */
            userName?:
                string;
        }
        interface DeviceConnectivityManagement {
            /** Controls Wi-Fi configuring privileges. Based on the option set, user will have either full or limited or no control in configuring Wi-Fi networks. */
            configureWifi?:
                string;
            /** Controls tethering settings. Based on the value set, the user is partially or fully disallowed from using different forms of tethering. */
            tetheringSettings?:
                string;
            /** Controls what files and/or data can be transferred via USB. Supported only on company-owned devices. */
            usbDataAccess?:
                string;
            /** Controls configuring and using Wi-Fi direct settings. Supported on company-owned devices running Android 13 and above. */
            wifiDirectSettings?:
                string;
        }
        interface DeviceRadioState {
            /** Controls whether airplane mode can be toggled by the user or not */
            airplaneModeState?:
                string;
            /** Controls current state of Wi-Fi and if user can change its state. */
            wifiState?:
                string;
        }
        interface DeviceSettings {
            /** Whether ADB (https://developer.android.com/studio/command-line/adb.html) is enabled on the device. */
            adbEnabled?:
                boolean;
            /** Whether developer mode is enabled on the device. */
            developmentSettingsEnabled?:
                boolean;
            /** Encryption status from DevicePolicyManager. */
            encryptionStatus?:
                string;
            /** Whether the device is secured with PIN/password. */
            isDeviceSecure?:
                boolean;
            /** Whether the storage encryption is enabled. */
            isEncrypted?:
                boolean;
            /** Whether installing apps from unknown sources is enabled. */
            unknownSourcesEnabled?:
                boolean;
            /** Whether Google Play Protect verification (https://support.google.com/accounts/answer/2812853) is enforced on the device. */
            verifyAppsEnabled?:
                boolean;
        }
        interface Display {
            /** Display density expressed as dots-per-inch. */
            density?:
                number;
            /** Unique display id. */
            displayId?:
                number;
            /** Display height in pixels. */
            height?:
                number;
            /** Name of the display. */
            name?:
                string;
            /** Refresh rate of the display in frames per second. */
            refreshRate?:
                number;
            /** State of the display. */
            state?:
                string;
            /** Display width in pixels. */
            width?:
                number;
        }
        interface DnsEvent {
            /** The hostname that was looked up. */
            hostname?:
                string;
            /** The (possibly truncated) list of the IP addresses returned for DNS lookup (max 10 IPv4 or IPv6 addresses). */
            ipAddresses?:
                string[];
            /** The package name of the UID that performed the DNS lookup. */
            packageName?:
                string;
            /** The number of IP addresses returned from the DNS lookup event. May be higher than the amount of ip_addresses if there were too many addresses to log. */
            totalIpAddressesReturned?:
                string;
        }
        // tslint:disable-next-line:no-empty-interface
        interface Empty {
        }
        interface EnrollmentToken {
            /**
             * Optional, arbitrary data associated with the enrollment token. This could contain, for example, the ID of an org unit the device is assigned to after enrollment. After a device
             * enrolls with the token, this data will be exposed in the enrollment_token_data field of the Device resource. The data must be 1024 characters or less; otherwise, the creation
             * request will fail.
             */
            additionalData?:
                string;
            /**
             * Controls whether personal usage is allowed on a device provisioned with this enrollment token.For company-owned devices: Enabling personal usage allows the user to set up a work
             * profile on the device. Disabling personal usage requires the user provision the device as a fully managed device.For personally-owned devices: Enabling personal usage allows the
             * user to set up a work profile on the device. Disabling personal usage will prevent the device from provisioning. Personal usage cannot be disabled on personally-owned device.
             */
            allowPersonalUsage?:
                string;
            /**
             * The length of time the enrollment token is valid, ranging from 1 minute to Durations.MAX_VALUE
             * (https://developers.google.com/protocol-buffers/docs/reference/java/com/google/protobuf/util/Durations.html#MAX_VALUE), approximately 10,000 years. If not specified, the default
             * duration is 1 hour. Please note that if requested duration causes the resulting expiration_timestamp to exceed Timestamps.MAX_VALUE
             * (https://developers.google.com/protocol-buffers/docs/reference/java/com/google/protobuf/util/Timestamps.html#MAX_VALUE), then expiration_timestamp is coerced to
             * Timestamps.MAX_VALUE.
             */
            duration?:
                string;
            /** The expiration time of the token. This is a read-only field generated by the server. */
            expirationTimestamp?:
                string;
            /** The name of the enrollment token, which is generated by the server during creation, in the form enterprises/{enterpriseId}/enrollmentTokens/{enrollmentTokenId}. */
            name?:
                string;
            /** Whether the enrollment token is for one time use only. If the flag is set to true, only one device can use it for registration. */
            oneTimeOnly?:
                boolean;
            /**
             * The name of the policy initially applied to the enrolled device, in the form enterprises/{enterpriseId}/policies/{policyId}. If not specified, the policy_name for the device’s user
             * is applied. If user_name is also not specified, enterprises/{enterpriseId}/policies/default is applied by default. When updating this field, you can specify only the policyId as
             * long as the policyId doesn’t contain any slashes. The rest of the policy name will be inferred.
             */
            policyName?:
                string;
            /**
             * A JSON string whose UTF-8 representation can be used to generate a QR code to enroll a device with this enrollment token. To enroll a device using NFC, the NFC record must contain a
             * serialized java.util.Properties representation of the properties in the JSON.
             */
            qrCode?:
                string;
            /**
             * The user associated with this enrollment token. If it's specified when the enrollment token is created and the user does not exist, the user will be created. This field must not
             * contain personally identifiable information. Only the account_identifier field needs to be set.
             */
            user?:
                User;
            /** The token value that's passed to the device and authorizes the device to enroll. This is a read-only field generated by the server. */
            value?:
                string;
        }
        interface Enterprise {
            /** Deprecated and unused. */
            appAutoApprovalEnabled?:
                boolean;
            /** The enterprise contact info of an EMM-managed enterprise. */
            contactInfo?:
                ContactInfo;
            /** The types of Google Pub/Sub notifications enabled for the enterprise. */
            enabledNotificationTypes?:
                string[];
            /** The name of the enterprise displayed to users. This field has a maximum length of 100 characters. */
            enterpriseDisplayName?:
                string;
            /**
             * An image displayed as a logo during device provisioning. Supported types are: image/bmp, image/gif, image/x-ico, image/jpeg, image/png, image/webp, image/vnd.wap.wbmp,
             * image/x-adobe-dng.
             */
            logo?:
                ExternalData;
            /** The name of the enterprise which is generated by the server during creation, in the form enterprises/{enterpriseId}. */
            name?:
                string;
            /**
             * A color in RGB format that indicates the predominant color to display in the device management app UI. The color components are stored as follows: (red << 16) | (green << 8) | blue,
             * where the value of each component is between 0 and 255, inclusive.
             */
            primaryColor?:
                number;
            /** The topic which Pub/Sub notifications are published to, in the form projects/{project}/topics/{topic}. This field is only required if Pub/Sub notifications are enabled. */
            pubsubTopic?:
                string;
            /** Sign-in details of the enterprise. */
            signinDetails?:
                SigninDetail[];
            /** Terms and conditions that must be accepted when provisioning a device for this enterprise. A page of terms is generated for each value in this list. */
            termsAndConditions?:
                TermsAndConditions[];
        }
        interface ExtensionConfig {
            /** Fully qualified class name of the receiver service class for Android Device Policy to notify the extension app of any local command status updates. */
            notificationReceiver?:
                string;
            /**
             * Hex-encoded SHA-256 hash of the signing certificate of the extension app. Only hexadecimal string representations of 64 characters are valid.If not specified, the signature for the
             * corresponding package name is obtained from the Play Store instead.If this list is empty, the signature of the extension app on the device must match the signature obtained from the
             * Play Store for the app to be able to communicate with Android Device Policy.If this list is not empty, the signature of the extension app on the device must match one of the entries
             * in this list for the app to be able to communicate with Android Device Policy.In production use cases, it is recommended to leave this empty.
             */
            signingKeyFingerprintsSha256?:
                string[];
        }
        interface ExternalData {
            /** The base-64 encoded SHA-256 hash of the content hosted at url. If the content doesn't match this hash, Android Device Policy won't use the data. */
            sha256Hash?:
                string;
            /**
             * The absolute URL to the data, which must use either the http or https scheme. Android Device Policy doesn't provide any credentials in the GET request, so the URL must be publicly
             * accessible. Including a long, random component in the URL may be used to prevent attackers from discovering the URL.
             */
            url?:
                string;
        }
        interface FilePulledEvent {
            /** The path of the file being pulled. */
            filePath?:
                string;
        }
        interface FilePushedEvent {
            /** The path of the file being pushed. */
            filePath?:
                string;
        }
        interface FreezePeriod {
            /**
             * The end date (inclusive) of the freeze period. Must be no later than 90 days from the start date. If the end date is earlier than the start date, the freeze period is considered
             * wrapping year-end. Note: year must not be set. For example, {"month": 1,"date": 30}.
             */
            endDate?:
                Date;
            /** The start date (inclusive) of the freeze period. Note: year must not be set. For example, {"month": 1,"date": 30}. */
            startDate?:
                Date;
        }
        interface HardwareInfo {
            /** Battery shutdown temperature thresholds in Celsius for each battery on the device. */
            batteryShutdownTemperatures?:
                number[];
            /** Battery throttling temperature thresholds in Celsius for each battery on the device. */
            batteryThrottlingTemperatures?:
                number[];
            /** Brand of the device. For example, Google. */
            brand?:
                string;
            /** CPU shutdown temperature thresholds in Celsius for each CPU on the device. */
            cpuShutdownTemperatures?:
                number[];
            /** CPU throttling temperature thresholds in Celsius for each CPU on the device. */
            cpuThrottlingTemperatures?:
                number[];
            /** Baseband version. For example, MDM9625_104662.22.05.34p. */
            deviceBasebandVersion?:
                string;
            /**
             * Output only. ID that uniquely identifies a personally-owned device in a particular organization. On the same physical device when enrolled with the same organization, this ID
             * persists across setups and even factory resets. This ID is available on personally-owned devices with a work profile on devices running Android 12 and above.
             */
            enterpriseSpecificId?:
                string;
            /** GPU shutdown temperature thresholds in Celsius for each GPU on the device. */
            gpuShutdownTemperatures?:
                number[];
            /** GPU throttling temperature thresholds in Celsius for each GPU on the device. */
            gpuThrottlingTemperatures?:
                number[];
            /** Name of the hardware. For example, Angler. */
            hardware?:
                string;
            /** Manufacturer. For example, Motorola. */
            manufacturer?:
                string;
            /** The model of the device. For example, Asus Nexus 7. */
            model?:
                string;
            /** The device serial number. */
            serialNumber?:
                string;
            /** Device skin shutdown temperature thresholds in Celsius. */
            skinShutdownTemperatures?:
                number[];
            /** Device skin throttling temperature thresholds in Celsius. */
            skinThrottlingTemperatures?:
                number[];
        }
        interface HardwareStatus {
            /** Current battery temperatures in Celsius for each battery on the device. */
            batteryTemperatures?:
                number[];
            /** Current CPU temperatures in Celsius for each CPU on the device. */
            cpuTemperatures?:
                number[];
            /** CPU usages in percentage for each core available on the device. Usage is 0 for each unplugged core. Empty array implies that CPU usage is not supported in the system. */
            cpuUsages?:
                number[];
            /** The time the measurements were taken. */
            createTime?:
                string;
            /** Fan speeds in RPM for each fan on the device. Empty array means that there are no fans or fan speed is not supported on the system. */
            fanSpeeds?:
                number[];
            /** Current GPU temperatures in Celsius for each GPU on the device. */
            gpuTemperatures?:
                number[];
            /** Current device skin temperatures in Celsius. */
            skinTemperatures?:
                number[];
        }
        // tslint:disable-next-line:no-empty-interface
        interface IssueCommandResponse {
        }
        interface KeyDestructionEvent {
            /** UID of the application which owns the key. */
            applicationUid?:
                number;
            /** Alias of the key. */
            keyAlias?:
                string;
            /** Whether the operation was successful. */
            success?:
                boolean;
        }
        interface KeyedAppState {
            /** The creation time of the app state on the device. */
            createTime?:
                string;
            /**
             * Optionally, a machine-readable value to be read by the EMM. For example, setting values that the admin can choose to query against in the EMM console (e.g. “notify me if the
             * battery_warning data < 10”).
             */
            data?:
                string;
            /**
             * The key for the app state. Acts as a point of reference for what the app is providing state for. For example, when providing managed configuration feedback, this key could be the
             * managed configuration key.
             */
            key?:
                string;
            /** The time the app state was most recently updated. */
            lastUpdateTime?:
                string;
            /**
             * Optionally, a free-form message string to explain the app state. If the state was triggered by a particular value (e.g. a managed configuration value), it should be included in the
             * message.
             */
            message?:
                string;
            /** The severity of the app state. */
            severity?:
                string;
        }
        interface KeyGeneratedEvent {
            /** UID of the application which generated the key. */
            applicationUid?:
                number;
            /** Alias of the key. */
            keyAlias?:
                string;
            /** Whether the operation was successful. */
            success?:
                boolean;
        }
        interface KeyguardDismissAuthAttemptEvent {
            /** Whether a strong form of authentication (password, PIN, or pattern) was used to unlock device. */
            strongAuthMethodUsed?:
                boolean;
            /** Whether the unlock attempt was successful. */
            success?:
                boolean;
        }
        // tslint:disable-next-line:no-empty-interface
        interface KeyguardDismissedEvent {
        }
        // tslint:disable-next-line:no-empty-interface
        interface KeyguardSecuredEvent {
        }
        interface KeyImportEvent {
            /** UID of the application which imported the key */
            applicationUid?:
                number;
            /** Alias of the key. */
            keyAlias?:
                string;
            /** Whether the operation was successful. */
            success?:
                boolean;
        }
        interface KeyIntegrityViolationEvent {
            /** UID of the application which owns the key */
            applicationUid?:
                number;
            /** Alias of the key. */
            keyAlias?:
                string;
        }
        interface KioskCustomization {
            /** Specifies whether the Settings app is allowed in kiosk mode. */
            deviceSettings?:
                string;
            /** Sets the behavior of a device in kiosk mode when a user presses and holds (long-presses) the Power button. */
            powerButtonActions?:
                string;
            /** Specifies whether system info and notifications are disabled in kiosk mode. */
            statusBar?:
                string;
            /**
             * Specifies whether system error dialogs for crashed or unresponsive apps are blocked in kiosk mode. When blocked, the system will force-stop the app as if the user chooses the "close
             * app" option on the UI.
             */
            systemErrorWarnings?:
                string;
            /** Specifies which navigation features are enabled (e.g. Home, Overview buttons) in kiosk mode. */
            systemNavigation?:
                string;
        }
        interface LaunchAppAction {
            /** Package name of app to be launched */
            packageName?:
                string;
        }
        interface ListDevicesResponse {
            /** The list of devices. */
            devices?:
                Device[];
            /** If there are more results, a token to retrieve next page of results. */
            nextPageToken?:
                string;
        }
        interface ListEnrollmentTokensResponse {
            /** The list of enrollment tokens. */
            enrollmentTokens?:
                EnrollmentToken[];
            /** If there are more results, a token to retrieve next page of results. */
            nextPageToken?:
                string;
        }
        interface ListEnterprisesResponse {
            /** The list of enterprises. */
            enterprises?:
                Enterprise[];
            /** If there are more results, a token to retrieve next page of results. */
            nextPageToken?:
                string;
        }
        interface ListOperationsResponse {
            /** The standard List next-page token. */
            nextPageToken?:
                string;
            /** A list of operations that matches the specified filter in the request. */
            operations?:
                Operation[];
        }
        interface ListPoliciesResponse {
            /** If there are more results, a token to retrieve next page of results. */
            nextPageToken?:
                string;
            /** The list of policies. */
            policies?:
                Policy[];
        }
        interface ListWebAppsResponse {
            /** If there are more results, a token to retrieve next page of results. */
            nextPageToken?:
                string;
            /** The list of web apps. */
            webApps?:
                WebApp[];
        }
        interface Location {
            /** The latitude position of the location */
            latitude?:
                number;
            /** The longitude position of the location */
            longitude?:
                number;
        }
        // tslint:disable-next-line:no-empty-interface
        interface LogBufferSizeCriticalEvent {
        }
        // tslint:disable-next-line:no-empty-interface
        interface LoggingStartedEvent {
        }
        // tslint:disable-next-line:no-empty-interface
        interface LoggingStoppedEvent {
        }
        interface LostModeLocationEvent {
            /** The battery level as a number between 0 and 100 inclusive */
            batteryLevel?:
                number;
            /** The device location */
            location?:
                Location;
        }
        // tslint:disable-next-line:no-empty-interface
        interface LostModeOutgoingPhoneCallEvent {
        }
        interface ManagedConfigurationTemplate {
            /** Optional, a map containing configuration variables defined for the configuration. */
            configurationVariables?:
                { [P in string]: string };
            /** The ID of the managed configurations template. */
            templateId?:
                string;
        }
        interface ManagedProperty {
            /** The default value of the property. BUNDLE_ARRAY properties don't have a default value. */
            defaultValue?:
                any;
            /** A longer description of the property, providing more detail of what it affects. Localized. */
            description?:
                string;
            /** For CHOICE or MULTISELECT properties, the list of possible entries. */
            entries?:
                ManagedPropertyEntry[];
            /** The unique key that the app uses to identify the property, e.g. "com.google.android.gm.fieldname". */
            key?:
                string;
            /** For BUNDLE_ARRAY properties, the list of nested properties. A BUNDLE_ARRAY property is at most two levels deep. */
            nestedProperties?:
                ManagedProperty[];
            /** The name of the property. Localized. */
            title?:
                string;
            /** The type of the property. */
            type?:
                string;
        }
        interface ManagedPropertyEntry {
            /** The human-readable name of the value. Localized. */
            name?:
                string;
            /** The machine-readable value of the entry, which should be used in the configuration. Not localized. */
            value?:
                string;
        }
        interface MediaMountEvent {
            /** Mount point. */
            mountPoint?:
                string;
            /** Volume label. Redacted to empty string on organization-owned managed profile devices. */
            volumeLabel?:
                string;
        }
        interface MediaUnmountEvent {
            /** Mount point. */
            mountPoint?:
                string;
            /** Volume label. Redacted to empty string on organization-owned managed profile devices. */
            volumeLabel?:
                string;
        }
        interface MemoryEvent {
            /** The number of free bytes in the medium, or for EXTERNAL_STORAGE_DETECTED, the total capacity in bytes of the storage medium. */
            byteCount?:
                string;
            /** The creation time of the event. */
            createTime?:
                string;
            /** Event type. */
            eventType?:
                string;
        }
        interface MemoryInfo {
            /** Total internal storage on device in bytes. */
            totalInternalStorage?:
                string;
            /** Total RAM on device in bytes. */
            totalRam?:
                string;
        }
        interface NetworkInfo {
            /** IMEI number of the GSM device. For example, A1000031212. */
            imei?:
                string;
            /** MEID number of the CDMA device. For example, A00000292788E1. */
            meid?:
                string;
            /** Alphabetic name of current registered operator. For example, Vodafone. */
            networkOperatorName?:
                string;
            /** Provides telephony information associated with each SIM card on the device. Only supported on fully managed devices starting from Android API level 23. */
            telephonyInfos?:
                TelephonyInfo[];
            /** Wi-Fi MAC address of the device. For example, 7c:11:11:11:11:11. */
            wifiMacAddress?:
                string;
        }
        interface NonComplianceDetail {
            /** If the policy setting could not be applied, the current value of the setting on the device. */
            currentValue?:
                any;
            /**
             * For settings with nested fields, if a particular nested field is out of compliance, this specifies the full path to the offending field. The path is formatted in the same way the
             * policy JSON field would be referenced in JavaScript, that is: 1) For object-typed fields, the field name is followed by a dot then by a subfield name. 2) For array-typed fields, the
             * field name is followed by the array index enclosed in brackets. For example, to indicate a problem with the url field in the externalData field in the 3rd application, the path
             * would be applications[2].externalData.url
             */
            fieldPath?:
                string;
            /** If package_name is set and the non-compliance reason is APP_NOT_INSTALLED or APP_NOT_UPDATED, the detailed reason the app can't be installed or updated. */
            installationFailureReason?:
                string;
            /** The reason the device is not in compliance with the setting. */
            nonComplianceReason?:
                string;
            /** The package name indicating which app is out of compliance, if applicable. */
            packageName?:
                string;
            /** The name of the policy setting. This is the JSON field name of a top-level Policy field. */
            settingName?:
                string;
            /** Additional context for specific_non_compliance_reason. */
            specificNonComplianceContext?:
                SpecificNonComplianceContext;
            /** The policy-specific reason the device is not in compliance with the setting. */
            specificNonComplianceReason?:
                string;
        }
        interface NonComplianceDetailCondition {
            /** The reason the device is not in compliance with the setting. If not set, then this condition matches any reason. */
            nonComplianceReason?:
                string;
            /** The package name of the app that's out of compliance. If not set, then this condition matches any package name. */
            packageName?:
                string;
            /** The name of the policy setting. This is the JSON field name of a top-level Policy field. If not set, then this condition matches any setting name. */
            settingName?:
                string;
        }
        interface OncCertificateProvider {
            /** This feature is not generally available. */
            certificateReferences?:
                string[];
            /** This feature is not generally available. */
            contentProviderEndpoint?:
                ContentProviderEndpoint;
        }
        interface OncWifiContext {
            /** The GUID of non-compliant Wi-Fi configuration. */
            wifiGuid?:
                string;
        }
        interface Operation {
            /** If the value is false, it means the operation is still in progress. If true, the operation is completed, and either error or response is available. */
            done?:
                boolean;
            /** The error result of the operation in case of failure or cancellation. */
            error?:
                Status;
            /**
             * Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such
             * metadata. Any method that returns a long-running operation should document the metadata type, if any.
             */
            metadata?:
                { [P in string]: any };
            /**
             * The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the name should be a resource name ending
             * with operations/{unique_id}.
             */
            name?:
                string;
            /**
             * The normal response of the operation in case of success. If the original method returns no data on success, such as Delete, the response is google.protobuf.Empty. If the original
             * method is standard Get/Create/Update, the response should be the resource. For other methods, the response should have the type XxxResponse, where Xxx is the original method name.
             * For example, if the original method name is TakeSnapshot(), the inferred response type is TakeSnapshotResponse.
             */
            response?:
                { [P in string]: any };
        }
        // tslint:disable-next-line:no-empty-interface
        interface OsShutdownEvent {
        }
        interface OsStartupEvent {
            /** Verified Boot state. */
            verifiedBootState?:
                string;
            /** dm-verity mode. */
            verityMode?:
                string;
        }
        interface PackageNameList {
            /** A list of package names. */
            packageNames?:
                string[];
        }
        interface PasswordPoliciesContext {
            /** The scope of non-compliant password. */
            passwordPolicyScope?:
                string;
        }
        interface PasswordRequirements {
            /** Number of incorrect device-unlock passwords that can be entered before a device is wiped. A value of 0 means there is no restriction. */
            maximumFailedPasswordsForWipe?:
                number;
            /** Password expiration timeout. */
            passwordExpirationTimeout?:
                string;
            /**
             * The length of the password history. After setting this field, the user won't be able to enter a new password that is the same as any password in the history. A value of 0 means
             * there is no restriction.
             */
            passwordHistoryLength?:
                number;
            /**
             * The minimum allowed password length. A value of 0 means there is no restriction. Only enforced when password_quality is NUMERIC, NUMERIC_COMPLEX, ALPHABETIC, ALPHANUMERIC, or
             * COMPLEX.
             */
            passwordMinimumLength?:
                number;
            /** Minimum number of letters required in the password. Only enforced when password_quality is COMPLEX. */
            passwordMinimumLetters?:
                number;
            /** Minimum number of lower case letters required in the password. Only enforced when password_quality is COMPLEX. */
            passwordMinimumLowerCase?:
                number;
            /** Minimum number of non-letter characters (numerical digits or symbols) required in the password. Only enforced when password_quality is COMPLEX. */
            passwordMinimumNonLetter?:
                number;
            /** Minimum number of numerical digits required in the password. Only enforced when password_quality is COMPLEX. */
            passwordMinimumNumeric?:
                number;
            /** Minimum number of symbols required in the password. Only enforced when password_quality is COMPLEX. */
            passwordMinimumSymbols?:
                number;
            /** Minimum number of upper case letters required in the password. Only enforced when password_quality is COMPLEX. */
            passwordMinimumUpperCase?:
                number;
            /** The required password quality. */
            passwordQuality?:
                string;
            /** The scope that the password requirement applies to. */
            passwordScope?:
                string;
            /**
             * The length of time after a device or work profile is unlocked using a strong form of authentication (password, PIN, pattern) that it can be unlocked using any other authentication
             * method (e.g. fingerprint, trust agents, face). After the specified time period elapses, only strong forms of authentication can be used to unlock the device or work profile.
             */
            requirePasswordUnlock?:
                string;
            /**
             * Controls whether a unified lock is allowed for the device and the work profile, on devices running Android 9 and above with a work profile. This can be set only if password_scope is
             * set to SCOPE_PROFILE, the policy will be rejected otherwise. If user has not set a separate work lock and this field is set to REQUIRE_SEPARATE_WORK_LOCK, a NonComplianceDetail is
             * reported with nonComplianceReason set to USER_ACTION.
             */
            unifiedLockSettings?:
                string;
        }
        interface PerAppResult {
            /** The result of an attempt to clear the data of a single app. */
            clearingResult?:
                string;
        }
        interface PermissionGrant {
            /** The Android permission or group, e.g. android.permission.READ_CALENDAR or android.permission_group.CALENDAR. */
            permission?:
                string;
            /** The policy for granting the permission. */
            policy?:
                string;
        }
        interface PersistentPreferredActivity {
            /**
             * The intent actions to match in the filter. If any actions are included in the filter, then an intent's action must be one of those values for it to match. If no actions are
             * included, the intent action is ignored.
             */
            actions?:
                string[];
            /**
             * The intent categories to match in the filter. An intent includes the categories that it requires, all of which must be included in the filter in order to match. In other words,
             * adding a category to the filter has no impact on matching unless that category is specified in the intent.
             */
            categories?:
                string[];
            /**
             * The activity that should be the default intent handler. This should be an Android component name, e.g. com.android.enterprise.app/.MainActivity. Alternatively, the value may be the
             * package name of an app, which causes Android Device Policy to choose an appropriate activity from the app to handle the intent.
             */
            receiverActivity?:
                string;
        }
        interface PersonalApplicationPolicy {
            /** The type of installation to perform. */
            installType?:
                string;
            /** The package name of the application. */
            packageName?:
                string;
        }
        interface PersonalUsagePolicies {
            /** Account types that can't be managed by the user. */
            accountTypesWithManagementDisabled?:
                string[];
            /** If true, the camera is disabled on the personal profile. */
            cameraDisabled?:
                boolean;
            /** Controls how long the work profile can stay off. The duration must be at least 3 days. */
            maxDaysWithWorkOff?:
                number;
            /** Policy applied to applications in the personal profile. */
            personalApplications?:
                PersonalApplicationPolicy[];
            /** Used together with personalApplications to control how apps in the personal profile are allowed or blocked. */
            personalPlayStoreMode?:
                string;
            /** If true, screen capture is disabled for all users. */
            screenCaptureDisabled?:
                boolean;
        }
        interface Policy {
            /** Account types that can't be managed by the user. */
            accountTypesWithManagementDisabled?:
                string[];
            /** Whether adding new users and profiles is disabled. */
            addUserDisabled?:
                boolean;
            /** Whether adjusting the master volume is disabled. Also mutes the device. */
            adjustVolumeDisabled?:
                boolean;
            /** Security policies set to secure values by default. To maintain the security posture of a device, we don't recommend overriding any of the default values. */
            advancedSecurityOverrides?:
                AdvancedSecurityOverrides;
            /** Configuration for an always-on VPN connection. Use with vpn_config_disabled to prevent modification of this setting. */
            alwaysOnVpnPackage?:
                AlwaysOnVpnPackage;
            /**
             * The app tracks for Android Device Policy the device can access. The device receives the latest version among all accessible tracks. If no tracks are specified, then the device only
             * uses the production track.
             */
            androidDevicePolicyTracks?:
                string[];
            /**
             * Recommended alternative: autoUpdateMode which is set per app, provides greater flexibility around update frequency.When autoUpdateMode is set to AUTO_UPDATE_POSTPONED or
             * AUTO_UPDATE_HIGH_PRIORITY, this field has no effect.The app auto update policy, which controls when automatic app updates can be applied.
             */
            appAutoUpdatePolicy?:
                string;
            /** Policy applied to apps. */
            applications?:
                ApplicationPolicy[];
            /** Whether auto date, time, and time zone are enabled on a company-owned device. If this is set, then autoTimeRequired is ignored. */
            autoDateAndTimeZone?:
                string;
            /** Whether auto time is required, which prevents the user from manually setting the date and time. If autoDateAndTimeZone is set, this field is ignored. */
            autoTimeRequired?:
                boolean;
            /**
             * Whether applications other than the ones configured in applications are blocked from being installed. When set, applications that were installed under a previous policy but no
             * longer appear in the policy are automatically uninstalled.
             */
            blockApplicationsEnabled?:
                boolean;
            /** Whether configuring bluetooth is disabled. */
            bluetoothConfigDisabled?:
                boolean;
            /** Whether bluetooth contact sharing is disabled. */
            bluetoothContactSharingDisabled?:
                boolean;
            /** Whether bluetooth is disabled. Prefer this setting over bluetooth_config_disabled because bluetooth_config_disabled can be bypassed by the user. */
            bluetoothDisabled?:
                boolean;
            /** Controls the use of the camera and whether the user has access to the camera access toggle. */
            cameraAccess?:
                string;
            /**
             * If camera_access is set to any value other than CAMERA_ACCESS_UNSPECIFIED, this has no effect. Otherwise this field controls whether cameras are disabled: If true, all cameras are
             * disabled, otherwise they are available. For fully managed devices this field applies for all apps on the device. For work profiles, this field applies only to apps in the work
             * profile, and the camera access of apps outside the work profile is unaffected.
             */
            cameraDisabled?:
                boolean;
            /** Whether configuring cell broadcast is disabled. */
            cellBroadcastsConfigDisabled?:
                boolean;
            /** Rules for determining apps' access to private keys. See ChoosePrivateKeyRule for details. */
            choosePrivateKeyRules?:
                ChoosePrivateKeyRule[];
            /**
             * Rules declaring which mitigating actions to take when a device is not compliant with its policy. When the conditions for multiple rules are satisfied, all of the mitigating actions
             * for the rules are taken. There is a maximum limit of 100 rules. Use policy enforcement rules instead.
             */
            complianceRules?:
                ComplianceRule[];
            /** Whether creating windows besides app windows is disabled. */
            createWindowsDisabled?:
                boolean;
            /** Whether configuring user credentials is disabled. */
            credentialsConfigDisabled?:
                boolean;
            /** Cross-profile policies applied on the device. */
            crossProfilePolicies?:
                CrossProfilePolicies;
            /** Whether roaming data services are disabled. */
            dataRoamingDisabled?:
                boolean;
            /** Whether the user is allowed to enable debugging features. */
            debuggingFeaturesAllowed?:
                boolean;
            /** The default permission policy for runtime permission requests. */
            defaultPermissionPolicy?:
                string;
            /** Covers controls for device connectivity such as Wi-Fi, USB data access, keyboard/mouse connections, and more. */
            deviceConnectivityManagement?:
                DeviceConnectivityManagement;
            /** The device owner information to be shown on the lock screen. */
            deviceOwnerLockScreenInfo?:
                UserFacingMessage;
            /** Covers controls for radio state such as Wi-Fi, bluetooth, and more. */
            deviceRadioState?:
                DeviceRadioState;
            /** Whether encryption is enabled */
            encryptionPolicy?:
                string;
            /** Whether app verification is force-enabled. */
            ensureVerifyAppsEnabled?:
                boolean;
            /** Whether factory resetting from settings is disabled. */
            factoryResetDisabled?:
                boolean;
            /**
             * Email addresses of device administrators for factory reset protection. When the device is factory reset, it will require one of these admins to log in with the Google account email
             * and password to unlock the device. If no admins are specified, the device won't provide factory reset protection.
             */
            frpAdminEmails?:
                string[];
            /** Whether the user is allowed to have fun. Controls whether the Easter egg game in Settings is disabled. */
            funDisabled?:
                boolean;
            /** Whether user installation of apps is disabled. */
            installAppsDisabled?:
                boolean;
            /** This field has no effect. */
            installUnknownSourcesAllowed?:
                boolean;
            /** If true, this disables the Lock Screen (https://source.android.com/docs/core/display/multi_display/lock-screen) for primary and/or secondary displays. */
            keyguardDisabled?:
                boolean;
            /** Disabled keyguard customizations, such as widgets. */
            keyguardDisabledFeatures?:
                string[];
            /** Settings controlling the behavior of a device in kiosk mode. To enable kiosk mode, set kioskCustomLauncherEnabled to true or specify an app in the policy with installType KIOSK. */
            kioskCustomization?:
                KioskCustomization;
            /**
             * Whether the kiosk custom launcher is enabled. This replaces the home screen with a launcher that locks down the device to the apps installed via the applications setting. Apps
             * appear on a single page in alphabetical order. Use kioskCustomization to further configure the kiosk device behavior.
             */
            kioskCustomLauncherEnabled?:
                boolean;
            /** The degree of location detection enabled. */
            locationMode?:
                string;
            /** A message displayed to the user in the device administators settings screen. */
            longSupportMessage?:
                UserFacingMessage;
            /** Maximum time in milliseconds for user activity until the device locks. A value of 0 means there is no restriction. */
            maximumTimeToLock?:
                string;
            /** Controls the use of the microphone and whether the user has access to the microphone access toggle. This applies only on fully managed devices. */
            microphoneAccess?:
                string;
            /** The minimum allowed Android API level. */
            minimumApiLevel?:
                number;
            /** Whether configuring mobile networks is disabled. */
            mobileNetworksConfigDisabled?:
                boolean;
            /** Whether adding or removing accounts is disabled. */
            modifyAccountsDisabled?:
                boolean;
            /** Whether the user mounting physical external media is disabled. */
            mountPhysicalMediaDisabled?:
                boolean;
            /** The name of the policy in the form enterprises/{enterpriseId}/policies/{policyId}. */
            name?:
                string;
            /**
             * Whether the network escape hatch is enabled. If a network connection can't be made at boot time, the escape hatch prompts the user to temporarily connect to a network in order to
             * refresh the device policy. After applying policy, the temporary network will be forgotten and the device will continue booting. This prevents being unable to connect to a network if
             * there is no suitable network in the last policy and the device boots into an app in lock task mode, or the user is otherwise unable to reach device settings.Note: Setting
             * wifiConfigDisabled to true will override this setting under specific circumstances. Please see wifiConfigDisabled for further details. Setting configureWifi to
             * DISALLOW_CONFIGURING_WIFI will override this setting under specific circumstances. Please see DISALLOW_CONFIGURING_WIFI for further details.
             */
            networkEscapeHatchEnabled?:
                boolean;
            /** Whether resetting network settings is disabled. */
            networkResetDisabled?:
                boolean;
            /** This feature is not generally available. */
            oncCertificateProviders?:
                OncCertificateProvider[];
            /** Network configuration for the device. See configure networks for more information. */
            openNetworkConfiguration?:
                { [P in string]: any };
            /** Whether using NFC to beam data from apps is disabled. */
            outgoingBeamDisabled?:
                boolean;
            /** Whether outgoing calls are disabled. */
            outgoingCallsDisabled?:
                boolean;
            /** Password requirement policies. Different policies can be set for work profile or fully managed devices by setting the password_scope field in the policy. */
            passwordPolicies?:
                PasswordRequirements[];
            /**
             * Password requirements. The field password_requirements.require_password_unlock must not be set. DEPRECATED - Use passwordPolicies.Note:Complexity-based values of PasswordQuality,
             * that is, COMPLEXITY_LOW, COMPLEXITY_MEDIUM, and COMPLEXITY_HIGH, cannot be used here. unified_lock_settings cannot be used here.
             */
            passwordRequirements?:
                PasswordRequirements;
            /** Explicit permission or group grants or denials for all apps. These values override the default_permission_policy. */
            permissionGrants?:
                PermissionGrant[];
            /**
             * Specifies permitted accessibility services. If the field is not set, any accessibility service can be used. If the field is set, only the accessibility services in this list and the
             * system's built-in accessibility service can be used. In particular, if the field is set to empty, only the system's built-in accessibility servicess can be used. This can be set on
             * fully managed devices and on work profiles. When applied to a work profile, this affects both the personal profile and the work profile.
             */
            permittedAccessibilityServices?:
                PackageNameList;
            /** If present, only the input methods provided by packages in this list are permitted. If this field is present, but the list is empty, then only system input methods are permitted. */
            permittedInputMethods?:
                PackageNameList;
            /** Default intent handler activities. */
            persistentPreferredActivities?:
                PersistentPreferredActivity[];
            /** Policies managing personal usage on a company-owned device. */
            personalUsagePolicies?:
                PersonalUsagePolicies;
            /** This mode controls which apps are available to the user in the Play Store and the behavior on the device when apps are removed from the policy. */
            playStoreMode?:
                string;
            /** Rules that define the behavior when a particular policy can not be applied on device */
            policyEnforcementRules?:
                PolicyEnforcementRule[];
            /**
             * Controls whether preferential network service is enabled on the work profile. For example, an organization may have an agreement with a carrier that all of the work data from its
             * employees' devices will be sent via a network service dedicated for enterprise use. An example of a supported preferential network service is the enterprise slice on 5G networks.
             * This has no effect on fully managed devices.
             */
            preferentialNetworkService?:
                string;
            /**
             * Allows showing UI on a device for a user to choose a private key alias if there are no matching rules in ChoosePrivateKeyRules. For devices below Android P, setting this may leave
             * enterprise keys vulnerable.
             */
            privateKeySelectionEnabled?:
                boolean;
            /**
             * The network-independent global HTTP proxy. Typically proxies should be configured per-network in open_network_configuration. However for unusual configurations like general internal
             * filtering a global HTTP proxy may be useful. If the proxy is not accessible, network access may break. The global proxy is only a recommendation and some apps may ignore it.
             */
            recommendedGlobalProxy?:
                ProxyInfo;
            /** Whether removing other users is disabled. */
            removeUserDisabled?:
                boolean;
            /** Whether rebooting the device into safe boot is disabled. */
            safeBootDisabled?:
                boolean;
            /** Whether screen capture is disabled. */
            screenCaptureDisabled?:
                boolean;
            /** Action to take during the setup process. At most one action may be specified. */
            setupActions?:
                SetupAction[];
            /** Whether changing the user icon is disabled. */
            setUserIconDisabled?:
                boolean;
            /** Whether changing the wallpaper is disabled. */
            setWallpaperDisabled?:
                boolean;
            /** Whether location sharing is disabled. share_location_disabled is supported for both fully managed devices and personally owned work profiles. */
            shareLocationDisabled?:
                boolean;
            /** A message displayed to the user in the settings screen wherever functionality has been disabled by the admin. If the message is longer than 200 characters it may be truncated. */
            shortSupportMessage?:
                UserFacingMessage;
            /** Flag to skip hints on the first use. Enterprise admin can enable the system recommendation for apps to skip their user tutorial and other introductory hints on first start-up. */
            skipFirstUseHintsEnabled?:
                boolean;
            /** Whether sending and receiving SMS messages is disabled. */
            smsDisabled?:
                boolean;
            /**
             * Whether the status bar is disabled. This disables notifications, quick settings, and other screen overlays that allow escape from full-screen mode. DEPRECATED. To disable the status
             * bar on a kiosk device, use InstallType KIOSK or kioskCustomLauncherEnabled.
             */
            statusBarDisabled?:
                boolean;
            /** Status reporting settings */
            statusReportingSettings?:
                StatusReportingSettings;
            /**
             * The battery plugged in modes for which the device stays on. When using this setting, it is recommended to clear maximum_time_to_lock so that the device doesn't lock itself while it
             * stays on.
             */
            stayOnPluggedModes?:
                string[];
            /** The system update policy, which controls how OS updates are applied. If the update type is WINDOWED, the update window will automatically apply to Play app updates as well. */
            systemUpdate?:
                SystemUpdate;
            /** Whether configuring tethering and portable hotspots is disabled. If tetheringSettings is set to anything other than TETHERING_SETTINGS_UNSPECIFIED, this setting is ignored. */
            tetheringConfigDisabled?:
                boolean;
            /** Whether user uninstallation of applications is disabled. This prevents apps from being uninstalled, even those removed using applications */
            uninstallAppsDisabled?:
                boolean;
            /**
             * If microphone_access is set to any value other than MICROPHONE_ACCESS_UNSPECIFIED, this has no effect. Otherwise this field controls whether microphones are disabled: If true, all
             * microphones are disabled, otherwise they are available. This is available only on fully managed devices.
             */
            unmuteMicrophoneDisabled?:
                boolean;
            /** Configuration of device activity logging. */
            usageLog?:
                UsageLog;
            /** Whether transferring files over USB is disabled. This is supported only on company-owned devices. */
            usbFileTransferDisabled?:
                boolean;
            /** Whether USB storage is enabled. Deprecated. */
            usbMassStorageEnabled?:
                boolean;
            /** The version of the policy. This is a read-only field. The version is incremented each time the policy is updated. */
            version?:
                string;
            /** Whether configuring VPN is disabled. */
            vpnConfigDisabled?:
                boolean;
            /**
             * Whether configuring Wi-Fi networks is disabled. Supported on fully managed devices and work profiles on company-owned devices. For fully managed devices, setting this to true
             * removes all configured networks and retains only the networks configured using openNetworkConfiguration. For work profiles on company-owned devices, existing configured networks are
             * not affected and the user is not allowed to add, remove, or modify Wi-Fi networks. If configureWifi is set to anything other than CONFIGURE_WIFI_UNSPECIFIED, this setting is
             * ignored. Note: If a network connection can't be made at boot time and configuring Wi-Fi is disabled then network escape hatch will be shown in order to refresh the device policy
             * (see networkEscapeHatchEnabled).
             */
            wifiConfigDisabled?:
                boolean;
            /** DEPRECATED - Use wifi_config_disabled. */
            wifiConfigsLockdownEnabled?:
                boolean;
        }
        interface PolicyEnforcementRule {
            /**
             * An action to block access to apps and data on a company owned device or in a work profile. This action also triggers a user-facing notification with information (where possible) on
             * how to correct the compliance issue. Note: wipeAction must also be specified.
             */
            blockAction?:
                BlockAction;
            /** The top-level policy to enforce. For example, applications or passwordPolicies. */
            settingName?:
                string;
            /** An action to reset a company owned device or delete a work profile. Note: blockAction must also be specified. */
            wipeAction?:
                WipeAction;
        }
        interface PostureDetail {
            /** Corresponding admin-facing advice to mitigate this security risk and improve the security posture of the device. */
            advice?:
                UserFacingMessage[];
            /** A specific security risk that negatively affects the security posture of the device. */
            securityRisk?:
                string;
        }
        interface PowerManagementEvent {
            /** For BATTERY_LEVEL_COLLECTED events, the battery level as a percentage. */
            batteryLevel?:
                number;
            /** The creation time of the event. */
            createTime?:
                string;
            /** Event type. */
            eventType?:
                string;
        }
        interface ProvisioningInfo {
            /** The API level of the Android platform version running on the device. */
            apiLevel?:
                number;
            /** Brand of the device. For example, Google. */
            brand?:
                string;
            /** The name of the enterprise in the form enterprises/{enterprise}. */
            enterprise?:
                string;
            /** The management mode of the device or profile. */
            managementMode?:
                string;
            /** The model of the device. For example, Asus Nexus 7. */
            model?:
                string;
            /** The name of this resource in the form provisioningInfo/{provisioning_info}. */
            name?:
                string;
            /** Ownership of the managed device. */
            ownership?:
                string;
        }
        interface ProxyInfo {
            /** For a direct proxy, the hosts for which the proxy is bypassed. The host names may contain wildcards such as *.example.com. */
            excludedHosts?:
                string[];
            /** The host of the direct proxy. */
            host?:
                string;
            /** The URI of the PAC script used to configure the proxy. */
            pacUri?:
                string;
            /** The port of the direct proxy. */
            port?:
                number;
        }
        interface RemoteLockEvent {
            /** Package name of the admin app requesting the change. */
            adminPackageName?:
                string;
            /** User ID of the admin app from the which the change was requested. */
            adminUserId?:
                number;
            /** User ID in which the change was requested in. */
            targetUserId?:
                number;
        }
        interface SecurityPosture {
            /** Device's security posture value. */
            devicePosture?:
                string;
            /** Additional details regarding the security posture of the device. */
            postureDetails?:
                PostureDetail[];
        }
        interface SetupAction {
            /** Description of this action. */
            description?:
                UserFacingMessage;
            /**
             * An action to launch an app. The app will be launched with an intent containing an extra with key com.google.android.apps.work.clouddpc.EXTRA_LAUNCHED_AS_SETUP_ACTION set to the
             * boolean value true to indicate that this is a setup action flow. If SetupAction references an app, the corresponding installType in the application policy must be set as
             * REQUIRED_FOR_SETUP or said setup will fail.
             */
            launchApp?:
                LaunchAppAction;
            /** Title of this action. */
            title?:
                UserFacingMessage;
        }
        interface SigninDetail {
            /**
             * Controls whether personal usage is allowed on a device provisioned with this enrollment token.For company-owned devices: Enabling personal usage allows the user to set up a work
             * profile on the device. Disabling personal usage requires the user provision the device as a fully managed device.For personally-owned devices: Enabling personal usage allows the
             * user to set up a work profile on the device. Disabling personal usage will prevent the device from provisioning. Personal usage cannot be disabled on personally-owned device.
             */
            allowPersonalUsage?:
                string;
            /**
             * A JSON string whose UTF-8 representation can be used to generate a QR code to enroll a device with this enrollment token. To enroll a device using NFC, the NFC record must contain a
             * serialized java.util.Properties representation of the properties in the JSON. This is a read-only field generated by the server.
             */
            qrCode?:
                string;
            /** An enterprise wide enrollment token used to trigger custom sign-in flow. This is a read-only field generated by the server. */
            signinEnrollmentToken?:
                string;
            /**
             * Sign-in URL for authentication when device is provisioned with a sign-in enrollment token. The sign-in endpoint should finish authentication flow with a URL in the form of
             * https://enterprise.google.com/android/enroll?et= for a successful login, or https://enterprise.google.com/android/enroll/invalid for a failed login.
             */
            signinUrl?:
                string;
        }
        interface SignupUrl {
            /** The name of the resource. Use this value in the signupUrl field when calling enterprises.create to complete the enterprise signup flow. */
            name?:
                string;
            /** A URL where an enterprise admin can register their enterprise. The page can't be rendered in an iframe. */
            url?:
                string;
        }
        interface SoftwareInfo {
            /** Android build ID string meant for displaying to the user. For example, shamu-userdebug 6.0.1 MOB30I 2756745 dev-keys. */
            androidBuildNumber?:
                string;
            /** Build time. */
            androidBuildTime?:
                string;
            /** The Android Device Policy app version code. */
            androidDevicePolicyVersionCode?:
                number;
            /** The Android Device Policy app version as displayed to the user. */
            androidDevicePolicyVersionName?:
                string;
            /** The user-visible Android version string. For example, 6.0.1. */
            androidVersion?:
                string;
            /** The system bootloader version number, e.g. 0.6.7. */
            bootloaderVersion?:
                string;
            /**
             * SHA-256 hash of android.content.pm.Signature (https://developer.android.com/reference/android/content/pm/Signature.html) associated with the system package, which can be used to
             * verify that the system build hasn't been modified.
             */
            deviceBuildSignature?:
                string;
            /** Kernel version, for example, 2.6.32.9-g103d848. */
            deviceKernelVersion?:
                string;
            /** An IETF BCP 47 language code for the primary locale on the device. */
            primaryLanguageCode?:
                string;
            /** Security patch level, e.g. 2016-05-01. */
            securityPatchLevel?:
                string;
            /** Information about a potential pending system update. */
            systemUpdateInfo?:
                SystemUpdateInfo;
        }
        interface SpecificNonComplianceContext {
            /** Additional context for non-compliance related to Wi-Fi configuration. See ONC_WIFI_INVALID_VALUE and ONC_WIFI_API_LEVEL */
            oncWifiContext?:
                OncWifiContext;
            /** Additional context for non-compliance related to password policies. See PASSWORD_POLICIES_PASSWORD_EXPIRED and PASSWORD_POLICIES_PASSWORD_NOT_SUFFICIENT. */
            passwordPoliciesContext?:
                PasswordPoliciesContext;
        }
        interface StartLostModeParams {
            /** The email address displayed to the user when the device is in lost mode. */
            lostEmailAddress?:
                string;
            /** The message displayed to the user when the device is in lost mode. */
            lostMessage?:
                UserFacingMessage;
            /** The organization name displayed to the user when the device is in lost mode. */
            lostOrganization?:
                UserFacingMessage;
            /** The phone number displayed to the user when the device is in lost mode. */
            lostPhoneNumber?:
                UserFacingMessage;
            /** The street address displayed to the user when the device is in lost mode. */
            lostStreetAddress?:
                UserFacingMessage;
        }
        interface StartLostModeStatus {
            /** The status. See StartLostModeStatus. */
            status?:
                string;
        }
        interface Status {
            /** The status code, which should be an enum value of google.rpc.Code. */
            code?:
                number;
            /** A list of messages that carry the error details. There is a common set of message types for APIs to use. */
            details?:
                Array<{ [P in string]: any }>;
            /**
             * A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the
             * client.
             */
            message?:
                string;
        }
        interface StatusReportingSettings {
            /** Application reporting settings. Only applicable if application_reports_enabled is true. */
            applicationReportingSettings?:
                ApplicationReportingSettings;
            /** Whether app reports are enabled. */
            applicationReportsEnabled?:
                boolean;
            /** Whether Common Criteria Mode reporting is enabled. */
            commonCriteriaModeEnabled?:
                boolean;
            /** Whether device settings reporting is enabled. */
            deviceSettingsEnabled?:
                boolean;
            /** Whether displays reporting is enabled. Report data is not available for personally owned devices with work profiles. */
            displayInfoEnabled?:
                boolean;
            /** Whether hardware status reporting is enabled. Report data is not available for personally owned devices with work profiles. */
            hardwareStatusEnabled?:
                boolean;
            /** Whether memory event reporting is enabled. */
            memoryInfoEnabled?:
                boolean;
            /** Whether network info reporting is enabled. */
            networkInfoEnabled?:
                boolean;
            /** Whether power management event reporting is enabled. Report data is not available for personally owned devices with work profiles. */
            powerManagementEventsEnabled?:
                boolean;
            /** Whether software info reporting is enabled. */
            softwareInfoEnabled?:
                boolean;
            /** Whether system properties reporting is enabled. */
            systemPropertiesEnabled?:
                boolean;
        }
        // tslint:disable-next-line:no-empty-interface
        interface StopLostModeParams {
        }
        interface StopLostModeStatus {
            /** The status. See StopLostModeStatus. */
            status?:
                string;
        }
        interface StopLostModeUserAttemptEvent {
            /** The status of the attempt to stop lost mode. */
            status?:
                string;
        }
        interface SystemUpdate {
            /**
             * If the type is WINDOWED, the end of the maintenance window, measured as the number of minutes after midnight in device's local time. This value must be between 0 and 1439,
             * inclusive. If this value is less than start_minutes, then the maintenance window spans midnight. If the maintenance window specified is smaller than 30 minutes, the actual window is
             * extended to 30 minutes beyond the start time.
             */
            endMinutes?:
                number;
            /**
             * An annually repeating time period in which over-the-air (OTA) system updates are postponed to freeze the OS version running on a device. To prevent freezing the device indefinitely,
             * each freeze period must be separated by at least 60 days.
             */
            freezePeriods?:
                FreezePeriod[];
            /**
             * If the type is WINDOWED, the start of the maintenance window, measured as the number of minutes after midnight in the device's local time. This value must be between 0 and 1439,
             * inclusive.
             */
            startMinutes?:
                number;
            /** The type of system update to configure. */
            type?:
                string;
        }
        interface SystemUpdateInfo {
            /**
             * The time when the update was first available. A zero value indicates that this field is not set. This field is set only if an update is available (that is, updateStatus is neither
             * UPDATE_STATUS_UNKNOWN nor UP_TO_DATE).
             */
            updateReceivedTime?:
                string;
            /** The status of an update: whether an update exists and what type it is. */
            updateStatus?:
                string;
        }
        interface TelephonyInfo {
            /** The carrier name associated with this SIM card. */
            carrierName?:
                string;
            /** The phone number associated with this SIM card. */
            phoneNumber?:
                string;
        }
        interface TermsAndConditions {
            /** A well-formatted HTML string. It will be parsed on the client with android.text.Html#fromHtml. */
            content?:
                UserFacingMessage;
            /** A short header which appears above the HTML content. */
            header?:
                UserFacingMessage;
        }
        interface UsageLog {
            /** Specifies which log types are enabled. Note that users will receive on-device messaging when usage logging is enabled. */
            enabledLogTypes?:
                string[];
            /** Specifies which of the enabled log types can be uploaded over mobile data. By default logs are queued for upload when the device connects to WiFi. */
            uploadOnCellularAllowed?:
                string[];
        }
        interface UsageLogEvent {
            /** A shell command was issued over ADB via “adb shell command”. Part of SECURITY_LOGS. */
            adbShellCommandEvent?:
                AdbShellCommandEvent;
            /** An ADB interactive shell was opened via “adb shell”. Part of SECURITY_LOGS. */
            adbShellInteractiveEvent?:
                any;
            /** An app process was started. Part of SECURITY_LOGS. */
            appProcessStartEvent?:
                AppProcessStartEvent;
            /** A new root certificate was installed into the system's trusted credential storage. Part of SECURITY_LOGS. */
            certAuthorityInstalledEvent?:
                CertAuthorityInstalledEvent;
            /** A root certificate was removed from the system's trusted credential storage. Part of SECURITY_LOGS. */
            certAuthorityRemovedEvent?:
                CertAuthorityRemovedEvent;
            /**
             * An X.509v3 certificate failed to validate, currently this validation is performed on the Wi-FI access point and failure may be due to a mismatch upon server certificate validation.
             * However it may in the future include other validation events of an X.509v3 certificate. Part of SECURITY_LOGS.
             */
            certValidationFailureEvent?:
                CertValidationFailureEvent;
            /** A TCP connect event was initiated through the standard network stack. Part of NETWORK_ACTIVITY_LOGS. */
            connectEvent?:
                ConnectEvent;
            /**
             * Validates whether Android’s built-in cryptographic library (BoringSSL) is valid. Should always succeed on device boot, if it fails, the device should be considered untrusted. Part
             * of SECURITY_LOGS.
             */
            cryptoSelfTestCompletedEvent?:
                CryptoSelfTestCompletedEvent;
            /** A DNS lookup event was initiated through the standard network stack. Part of NETWORK_ACTIVITY_LOGS. */
            dnsEvent?:
                DnsEvent;
            /** Unique id of the event. */
            eventId?:
                string;
            /** Device timestamp when the event was logged. */
            eventTime?:
                string;
            /** The particular usage log event type that was reported on the device. Use this to determine which event field to access. */
            eventType?:
                string;
            /** A file was downloaded from the device. Part of SECURITY_LOGS. */
            filePulledEvent?:
                FilePulledEvent;
            /** A file was uploaded onto the device. Part of SECURITY_LOGS. */
            filePushedEvent?:
                FilePushedEvent;
            /** A cryptographic key including user installed, admin installed and system maintained private key is removed from the device either by the user or management. Part of SECURITY_LOGS. */
            keyDestructionEvent?:
                KeyDestructionEvent;
            /** A cryptographic key including user installed, admin installed and system maintained private key is installed on the device either by the user or management. Part of SECURITY_LOGS. */
            keyGeneratedEvent?:
                KeyGeneratedEvent;
            /** An attempt was made to unlock the device. Part of SECURITY_LOGS. */
            keyguardDismissAuthAttemptEvent?:
                KeyguardDismissAuthAttemptEvent;
            /** The keyguard was dismissed. Part of SECURITY_LOGS. */
            keyguardDismissedEvent?:
                any;
            /** The device was locked either by user or timeout. Part of SECURITY_LOGS. */
            keyguardSecuredEvent?:
                any;
            /** A cryptographic key including user installed, admin installed and system maintained private key is imported on the device either by the user or management. Part of SECURITY_LOGS. */
            keyImportEvent?:
                KeyImportEvent;
            /**
             * A cryptographic key including user installed, admin installed and system maintained private key is determined to be corrupted due to storage corruption, hardware failure or some OS
             * issue. Part of SECURITY_LOGS.
             */
            keyIntegrityViolationEvent?:
                KeyIntegrityViolationEvent;
            /** The audit log buffer has reached 90% of its capacity, therefore older events may be dropped. Part of SECURITY_LOGS. */
            logBufferSizeCriticalEvent?:
                any;
            /** usageLog policy has been enabled. Part of SECURITY_LOGS. */
            loggingStartedEvent?:
                any;
            /** usageLog policy has been disabled. Part of SECURITY_LOGS. */
            loggingStoppedEvent?:
                any;
            /** A lost mode location update when a device in lost mode. */
            lostModeLocationEvent?:
                LostModeLocationEvent;
            /** An outgoing phone call has been made when a device in lost mode. */
            lostModeOutgoingPhoneCallEvent?:
                any;
            /** Removable media was mounted. Part of SECURITY_LOGS. */
            mediaMountEvent?:
                MediaMountEvent;
            /** Removable media was unmounted. Part of SECURITY_LOGS. */
            mediaUnmountEvent?:
                MediaUnmountEvent;
            /** Device was shutdown. Part of SECURITY_LOGS. */
            osShutdownEvent?:
                any;
            /** Device was started. Part of SECURITY_LOGS. */
            osStartupEvent?:
                OsStartupEvent;
            /** The device or profile has been remotely locked via the LOCK command. Part of SECURITY_LOGS. */
            remoteLockEvent?:
                RemoteLockEvent;
            /** An attempt to take a device out of lost mode. */
            stopLostModeUserAttemptEvent?:
                StopLostModeUserAttemptEvent;
            /** The work profile or company-owned device failed to wipe when requested. This could be user initiated or admin initiated e.g. delete was received. Part of SECURITY_LOGS. */
            wipeFailureEvent?:
                any;
        }
        interface User {
            /**
             * A unique identifier you create for this user, such as user342 or asset#44418. This field must be set when the user is created and can't be updated. This field must not contain
             * personally identifiable information (PII). This identifier must be 1024 characters or less; otherwise, the update policy request will fail.
             */
            accountIdentifier?:
                string;
        }
        interface UserFacingMessage {
            /**
             * The default message displayed if no localized message is specified or the user's locale doesn't match with any of the localized messages. A default message must be provided if any
             * localized messages are provided.
             */
            defaultMessage?:
                string;
            /** A map containing pairs, where locale is a well-formed BCP 47 language (https://www.w3.org/International/articles/language-tags/) code, such as en-US, es-ES, or fr. */
            localizedMessages?:
                { [P in string]: string };
        }
        interface WebApp {
            /** The display mode of the web app. */
            displayMode?:
                string;
            /** A list of icons for the web app. Must have at least one element. */
            icons?:
                WebAppIcon[];
            /** The name of the web app, which is generated by the server during creation in the form enterprises/{enterpriseId}/webApps/{packageName}. */
            name?:
                string;
            /** The start URL, i.e. the URL that should load when the user opens the application. */
            startUrl?:
                string;
            /** The title of the web app as displayed to the user (e.g., amongst a list of other applications, or as a label for an icon). */
            title?:
                string;
            /**
             * The current version of the app.Note that the version can automatically increase during the lifetime of the web app, while Google does internal housekeeping to keep the web app
             * up-to-date.
             */
            versionCode?:
                string;
        }
        interface WebAppIcon {
            /**
             * The actual bytes of the image in a base64url encoded string (c.f. RFC4648, section 5 "Base 64 Encoding with URL and Filename Safe Alphabet"). - The image type can be png or jpg. -
             * The image should ideally be square. - The image should ideally have a size of 512x512.
             */
            imageData?:
                string;
        }
        interface WebToken {
            /**
             * The features to enable. Use this if you want to control exactly which feature(s) will be activated; leave empty to allow all features.Restrictions / things to note: - If no features
             * are listed here, all features are enabled — this is the default behavior where you give access to all features to your admins. - This must not contain any FEATURE_UNSPECIFIED
             * values. - Repeated values are ignored
             */
            enabledFeatures?:
                string[];
            /** The name of the web token, which is generated by the server during creation in the form enterprises/{enterpriseId}/webTokens/{webTokenId}. */
            name?:
                string;
            /** The URL of the parent frame hosting the iframe with the embedded UI. To prevent XSS, the iframe may not be hosted at other URLs. The URL must use the https scheme. */
            parentFrameUrl?:
                string;
            /** Permissions available to an admin in the embedded UI. An admin must have all of these permissions in order to view the UI. This field is deprecated. */
            permissions?:
                string[];
            /** The token value which is used in the hosting page to generate the iframe with the embedded UI. This is a read-only field generated by the server. */
            value?:
                string;
        }
        interface WipeAction {
            /** Whether the factory-reset protection data is preserved on the device. This setting doesn’t apply to work profiles. */
            preserveFrp?:
                boolean;
            /** Number of days the policy is non-compliant before the device or work profile is wiped. wipeAfterDays must be greater than blockAfterDays. */
            wipeAfterDays?:
                number;
        }
        // tslint:disable-next-line:no-empty-interface
        interface WipeFailureEvent {
        }
        interface ApplicationsResource {
            /** Gets info about an application. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** The preferred language for localized application info, as a BCP47 tag (e.g. "en-US", "de"). If not specified the default language of the application will be used. */
                languageCode?:
                    string;
                /** The name of the application in the form enterprises/{enterpriseId}/applications/{package_name}. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<Application>;
        }
        interface OperationsResource {
            /**
             * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support
             * this method, it returns google.rpc.Code.UNIMPLEMENTED. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation
             * completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a
             * google.rpc.Status.code of 1, corresponding to Code.CANCELLED.
             */
            cancel(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** The name of the operation resource to be cancelled. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<{}>;
            /**
             * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't
             * support this method, it returns google.rpc.Code.UNIMPLEMENTED.
             */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** The name of the operation resource to be deleted. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<{}>;
            /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** The name of the operation resource. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<Operation>;
            /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns UNIMPLEMENTED. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** The standard list filter. */
                filter?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** The name of the operation's parent resource. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** The standard list page size. */
                pageSize?:
                    number;
                /** The standard list page token. */
                pageToken?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<ListOperationsResponse>;
        }
        interface DevicesResource {
            /** Deletes a device. This operation wipes the device. Deleted devices do not show up in enterprises.devices.list calls and a 404 is returned from enterprises.devices.get. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** The name of the device in the form enterprises/{enterpriseId}/devices/{deviceId}. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Optional flags that control the device wiping behavior. */
                wipeDataFlags?:
                    string | string[];
                /**
                 * Optional. A short message displayed to the user before wiping the work profile on personal devices. This has no effect on company owned devices. The maximum message length is
                 * 200 characters.
                 */
                wipeReasonMessage?:
                    string;
            }): Request<{}>;
            /** Gets a device. Deleted devices will respond with a 404 error. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** The name of the device in the form enterprises/{enterpriseId}/devices/{deviceId}. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<Device>;
            /** Issues a command to a device. The Operation resource returned contains a Command in its metadata field. Use the get operation method to get the status of the command. */
            issueCommand(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** The name of the device in the form enterprises/{enterpriseId}/devices/{deviceId}. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    Command;
            }): Request<Operation>;
            issueCommand(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** The name of the device in the form enterprises/{enterpriseId}/devices/{deviceId}. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: Command): Request<Operation>;
            /** Lists devices for a given enterprise. Deleted devices are not returned in the response. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** The requested page size. The actual page size may be fixed to a min or max value. */
                pageSize?:
                    number;
                /** A token identifying a page of results returned by the server. */
                pageToken?:
                    string;
                /** The name of the enterprise in the form enterprises/{enterpriseId}. */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<ListDevicesResponse>;
            /** Updates a device. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** The name of the device in the form enterprises/{enterpriseId}/devices/{deviceId}. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** The field mask indicating the fields to update. If not set, all modifiable fields will be modified. */
                updateMask?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    Device;
            }): Request<Device>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** The name of the device in the form enterprises/{enterpriseId}/devices/{deviceId}. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** The field mask indicating the fields to update. If not set, all modifiable fields will be modified. */
                updateMask?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: Device): Request<Device>;
            operations:
                OperationsResource;
        }
        interface EnrollmentTokensResource {
            /**
             * Creates an enrollment token for a given enterprise. It's up to the caller's responsibility to manage the lifecycle of newly created tokens and deleting them when they're not
             * intended to be used anymore. Once an enrollment token has been created, it's not possible to retrieve the token's content anymore using AM API. It is recommended for EMMs to
             * securely store the token if it's intended to be reused.
             */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** The name of the enterprise in the form enterprises/{enterpriseId}. */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    EnrollmentToken;
            }): Request<EnrollmentToken>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** The name of the enterprise in the form enterprises/{enterpriseId}. */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: EnrollmentToken): Request<EnrollmentToken>;
            /** Deletes an enrollment token. This operation invalidates the token, preventing its future use. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** The name of the enrollment token in the form enterprises/{enterpriseId}/enrollmentTokens/{enrollmentTokenId}. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<{}>;
            /**
             * Gets an active, unexpired enrollment token. Only a partial view of EnrollmentToken is returned: all the fields but name and expiration_timestamp are empty. This method is meant to
             * help manage active enrollment tokens lifecycle. For security reasons, it's recommended to delete active enrollment tokens as soon as they're not intended to be used anymore.
             */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. The name of the enrollment token in the form enterprises/{enterpriseId}/enrollmentTokens/{enrollmentTokenId}. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<EnrollmentToken>;
            /**
             * Lists active, unexpired enrollment tokens for a given enterprise. The list items contain only a partial view of EnrollmentToken: all the fields but name and expiration_timestamp are
             * empty. This method is meant to help manage active enrollment tokens lifecycle. For security reasons, it's recommended to delete active enrollment tokens as soon as they're not
             * intended to be used anymore.
             */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /**
                 * The requested page size. The service may return fewer than this value. If unspecified, at most 10 items will be returned. The maximum value is 100; values above 100 will be
                 * coerced to 100.
                 */
                pageSize?:
                    number;
                /** A token identifying a page of results returned by the server. */
                pageToken?:
                    string;
                /** Required. The name of the enterprise in the form enterprises/{enterpriseId}. */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<ListEnrollmentTokensResponse>;
        }
        interface PoliciesResource {
            /** Deletes a policy. This operation is only permitted if no devices are currently referencing the policy. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** The name of the policy in the form enterprises/{enterpriseId}/policies/{policyId}. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<{}>;
            /** Gets a policy. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** The name of the policy in the form enterprises/{enterpriseId}/policies/{policyId}. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<Policy>;
            /** Lists policies for a given enterprise. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** The requested page size. The actual page size may be fixed to a min or max value. */
                pageSize?:
                    number;
                /** A token identifying a page of results returned by the server. */
                pageToken?:
                    string;
                /** The name of the enterprise in the form enterprises/{enterpriseId}. */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<ListPoliciesResponse>;
            /** Updates or creates a policy. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** The name of the policy in the form enterprises/{enterpriseId}/policies/{policyId}. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** The field mask indicating the fields to update. If not set, all modifiable fields will be modified. */
                updateMask?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    Policy;
            }): Request<Policy>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** The name of the policy in the form enterprises/{enterpriseId}/policies/{policyId}. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** The field mask indicating the fields to update. If not set, all modifiable fields will be modified. */
                updateMask?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: Policy): Request<Policy>;
        }
        interface WebAppsResource {
            /** Creates a web app. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** The name of the enterprise in the form enterprises/{enterpriseId}. */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    WebApp;
            }): Request<WebApp>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** The name of the enterprise in the form enterprises/{enterpriseId}. */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: WebApp): Request<WebApp>;
            /** Deletes a web app. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** The name of the web app in the form enterprises/{enterpriseId}/webApps/{packageName}. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<{}>;
            /** Gets a web app. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** The name of the web app in the form enterprises/{enterpriseId}/webApp/{packageName}. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<WebApp>;
            /** Lists web apps for a given enterprise. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** The requested page size. This is a hint and the actual page size in the response may be different. */
                pageSize?:
                    number;
                /** A token identifying a page of results returned by the server. */
                pageToken?:
                    string;
                /** The name of the enterprise in the form enterprises/{enterpriseId}. */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<ListWebAppsResponse>;
            /** Updates a web app. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** The name of the web app in the form enterprises/{enterpriseId}/webApps/{packageName}. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** The field mask indicating the fields to update. If not set, all modifiable fields will be modified. */
                updateMask?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    WebApp;
            }): Request<WebApp>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** The name of the web app in the form enterprises/{enterpriseId}/webApps/{packageName}. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** The field mask indicating the fields to update. If not set, all modifiable fields will be modified. */
                updateMask?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: WebApp): Request<WebApp>;
        }
        interface WebTokensResource {
            /** Creates a web token to access an embeddable managed Google Play web UI for a given enterprise. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** The name of the enterprise in the form enterprises/{enterpriseId}. */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    WebToken;
            }): Request<WebToken>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** The name of the enterprise in the form enterprises/{enterpriseId}. */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: WebToken): Request<WebToken>;
        }
        interface EnterprisesResource {
            /** Creates an enterprise. This is the last step in the enterprise signup flow. See also: SigninDetail */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /**
                 * Whether the enterprise admin has seen and agreed to the managed Google Play Agreement (https://www.android.com/enterprise/terms/). Do not set this field for any customer-managed
                 * enterprise (https://developers.google.com/android/management/create-enterprise#customer-managed_enterprises). Set this to field to true for all EMM-managed enterprises
                 * (https://developers.google.com/android/management/create-enterprise#emm-managed_enterprises).
                 */
                agreementAccepted?:
                    boolean;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /**
                 * The enterprise token appended to the callback URL. Set this when creating a customer-managed enterprise
                 * (https://developers.google.com/android/management/create-enterprise#customer-managed_enterprises) and not when creating a deprecated EMM-managed enterprise
                 * (https://developers.google.com/android/management/create-enterprise#emm-managed_enterprises).
                 */
                enterpriseToken?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** The ID of the Google Cloud Platform project which will own the enterprise. */
                projectId?:
                    string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /**
                 * The name of the SignupUrl used to sign up for the enterprise. Set this when creating a customer-managed enterprise
                 * (https://developers.google.com/android/management/create-enterprise#customer-managed_enterprises) and not when creating a deprecated EMM-managed enterprise
                 * (https://developers.google.com/android/management/create-enterprise#emm-managed_enterprises).
                 */
                signupUrlName?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    Enterprise;
            }): Request<Enterprise>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /**
                 * Whether the enterprise admin has seen and agreed to the managed Google Play Agreement (https://www.android.com/enterprise/terms/). Do not set this field for any customer-managed
                 * enterprise (https://developers.google.com/android/management/create-enterprise#customer-managed_enterprises). Set this to field to true for all EMM-managed enterprises
                 * (https://developers.google.com/android/management/create-enterprise#emm-managed_enterprises).
                 */
                agreementAccepted?:
                    boolean;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /**
                 * The enterprise token appended to the callback URL. Set this when creating a customer-managed enterprise
                 * (https://developers.google.com/android/management/create-enterprise#customer-managed_enterprises) and not when creating a deprecated EMM-managed enterprise
                 * (https://developers.google.com/android/management/create-enterprise#emm-managed_enterprises).
                 */
                enterpriseToken?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** The ID of the Google Cloud Platform project which will own the enterprise. */
                projectId?:
                    string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /**
                 * The name of the SignupUrl used to sign up for the enterprise. Set this when creating a customer-managed enterprise
                 * (https://developers.google.com/android/management/create-enterprise#customer-managed_enterprises) and not when creating a deprecated EMM-managed enterprise
                 * (https://developers.google.com/android/management/create-enterprise#emm-managed_enterprises).
                 */
                signupUrlName?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: Enterprise): Request<Enterprise>;
            /** Deletes an enterprise. Only available for EMM-managed enterprises. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** The name of the enterprise in the form enterprises/{enterpriseId}. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<{}>;
            /** Gets an enterprise. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** The name of the enterprise in the form enterprises/{enterpriseId}. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<Enterprise>;
            /** Lists EMM-managed enterprises. Only BASIC fields are returned. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** The requested page size. The actual page size may be fixed to a min or max value. */
                pageSize?:
                    number;
                /** A token identifying a page of results returned by the server. */
                pageToken?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Required. The Cloud project ID of the EMM managing the enterprises. */
                projectId?:
                    string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Specifies which Enterprise fields to return. This method only supports BASIC. */
                view?:
                    string;
            }): Request<ListEnterprisesResponse>;
            /** Updates an enterprise. See also: SigninDetail */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** The name of the enterprise in the form enterprises/{enterpriseId}. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** The field mask indicating the fields to update. If not set, all modifiable fields will be modified. */
                updateMask?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    Enterprise;
            }): Request<Enterprise>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** The name of the enterprise in the form enterprises/{enterpriseId}. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** The field mask indicating the fields to update. If not set, all modifiable fields will be modified. */
                updateMask?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: Enterprise): Request<Enterprise>;
            applications:
                ApplicationsResource;
            devices:
                DevicesResource;
            enrollmentTokens:
                EnrollmentTokensResource;
            policies:
                PoliciesResource;
            webApps:
                WebAppsResource;
            webTokens:
                WebTokensResource;
        }
        interface ProvisioningInfoResource {
            /** Get the device provisioning info by the identifier provided via the sign-in url. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. The identifier that Android Device Policy passes to the 3P sign-in page in the form of provisioningInfo/{provisioning_info}. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<ProvisioningInfo>;
        }
        interface SignupUrlsResource {
            /** Creates an enterprise signup URL. */
            create(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /**
                 * The callback URL that the admin will be redirected to after successfully creating an enterprise. Before redirecting there the system will add a query parameter to this URL named
                 * enterpriseToken which will contain an opaque token to be used for the create enterprise request. The URL will be parsed then reformatted in order to add the enterpriseToken
                 * parameter, so there may be some minor formatting changes.
                 */
                callbackUrl?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** The ID of the Google Cloud Platform project which will own the enterprise. */
                projectId?:
                    string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<SignupUrl>;
        }

        const enterprises: EnterprisesResource;

        const provisioningInfo: ProvisioningInfoResource;

        const signupUrls: SignupUrlsResource;
    }
}
