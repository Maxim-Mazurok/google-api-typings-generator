/* This is stub file for gapi.client.composer-v1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20220926

gapi.load('client', async () => {
    /** now we can use gapi.client */

    await gapi.client.load('https://composer.googleapis.com/$discovery/rest?version=v1');
    /** now we can use gapi.client.composer */

    /** don't forget to authenticate your client before sending any request to resources: */
    /** declare client_id registered in Google Developers Console */
    const client_id = '<<PUT YOUR CLIENT ID HERE>>';
    const scope = [
        /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
        'https://www.googleapis.com/auth/cloud-platform',
    ];
    const immediate = false;
    gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
        if (authResult && !authResult.error) {
            /** handle successful authorization */
            run();
        } else {
            /** handle authorization error */
        }
    });

    async function run() {
        /** Create a new environment. */
        await gapi.client.composer.projects.locations.environments.create({
            parent: "Test string",
        }, {
            config: {
                airflowUri: "Test string",
                dagGcsPrefix: "Test string",
                databaseConfig: {
                    machineType: "Test string",
                },
                encryptionConfig: {
                    kmsKeyName: "Test string",
                },
                environmentSize: "Test string",
                gkeCluster: "Test string",
                maintenanceWindow: {
                    endTime: "Test string",
                    recurrence: "Test string",
                    startTime: "Test string",
                },
                masterAuthorizedNetworksConfig: {
                    cidrBlocks: [
                        {
                            cidrBlock: "Test string",
                            displayName: "Test string",
                        }
                    ],
                    enabled: true,
                },
                nodeConfig: {
                    diskSizeGb: 42,
                    enableIpMasqAgent: true,
                    ipAllocationPolicy: {
                        clusterIpv4CidrBlock: "Test string",
                        clusterSecondaryRangeName: "Test string",
                        servicesIpv4CidrBlock: "Test string",
                        servicesSecondaryRangeName: "Test string",
                        useIpAliases: true,
                    },
                    location: "Test string",
                    machineType: "Test string",
                    network: "Test string",
                    oauthScopes: [
                        "Test string"
                    ],
                    serviceAccount: "Test string",
                    subnetwork: "Test string",
                    tags: [
                        "Test string"
                    ],
                },
                nodeCount: 42,
                privateEnvironmentConfig: {
                    cloudComposerConnectionSubnetwork: "Test string",
                    cloudComposerNetworkIpv4CidrBlock: "Test string",
                    cloudComposerNetworkIpv4ReservedRange: "Test string",
                    cloudSqlIpv4CidrBlock: "Test string",
                    enablePrivateEnvironment: true,
                    enablePrivatelyUsedPublicIps: true,
                    privateClusterConfig: {
                        enablePrivateEndpoint: true,
                        masterIpv4CidrBlock: "Test string",
                        masterIpv4ReservedRange: "Test string",
                    },
                    webServerIpv4CidrBlock: "Test string",
                    webServerIpv4ReservedRange: "Test string",
                },
                softwareConfig: {
                    airflowConfigOverrides: {
                        A: "Test string"
                    },
                    envVariables: {
                        A: "Test string"
                    },
                    imageVersion: "Test string",
                    pypiPackages: {
                        A: "Test string"
                    },
                    pythonVersion: "Test string",
                    schedulerCount: 42,
                },
                webServerConfig: {
                    machineType: "Test string",
                },
                webServerNetworkAccessControl: {
                    allowedIpRanges: [
                        {
                            description: "Test string",
                            value: "Test string",
                        }
                    ],
                },
                workloadsConfig: {
                    scheduler: {
                        count: 42,
                        cpu: 42,
                        memoryGb: 42,
                        storageGb: 42,
                    },
                    webServer: {
                        cpu: 42,
                        memoryGb: 42,
                        storageGb: 42,
                    },
                    worker: {
                        cpu: 42,
                        maxCount: 42,
                        memoryGb: 42,
                        minCount: 42,
                        storageGb: 42,
                    },
                },
            },
            createTime: "Test string",
            labels: {
                A: "Test string"
            },
            name: "Test string",
            state: "Test string",
            updateTime: "Test string",
            uuid: "Test string",
        });
        /** Delete an environment. */
        await gapi.client.composer.projects.locations.environments.delete({
            name: "Test string",
        });
        /** Get an existing environment. */
        await gapi.client.composer.projects.locations.environments.get({
            name: "Test string",
        });
        /** List environments. */
        await gapi.client.composer.projects.locations.environments.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Update an environment. */
        await gapi.client.composer.projects.locations.environments.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            config: {
                airflowUri: "Test string",
                dagGcsPrefix: "Test string",
                databaseConfig: {
                    machineType: "Test string",
                },
                encryptionConfig: {
                    kmsKeyName: "Test string",
                },
                environmentSize: "Test string",
                gkeCluster: "Test string",
                maintenanceWindow: {
                    endTime: "Test string",
                    recurrence: "Test string",
                    startTime: "Test string",
                },
                masterAuthorizedNetworksConfig: {
                    cidrBlocks: [
                        {
                            cidrBlock: "Test string",
                            displayName: "Test string",
                        }
                    ],
                    enabled: true,
                },
                nodeConfig: {
                    diskSizeGb: 42,
                    enableIpMasqAgent: true,
                    ipAllocationPolicy: {
                        clusterIpv4CidrBlock: "Test string",
                        clusterSecondaryRangeName: "Test string",
                        servicesIpv4CidrBlock: "Test string",
                        servicesSecondaryRangeName: "Test string",
                        useIpAliases: true,
                    },
                    location: "Test string",
                    machineType: "Test string",
                    network: "Test string",
                    oauthScopes: [
                        "Test string"
                    ],
                    serviceAccount: "Test string",
                    subnetwork: "Test string",
                    tags: [
                        "Test string"
                    ],
                },
                nodeCount: 42,
                privateEnvironmentConfig: {
                    cloudComposerConnectionSubnetwork: "Test string",
                    cloudComposerNetworkIpv4CidrBlock: "Test string",
                    cloudComposerNetworkIpv4ReservedRange: "Test string",
                    cloudSqlIpv4CidrBlock: "Test string",
                    enablePrivateEnvironment: true,
                    enablePrivatelyUsedPublicIps: true,
                    privateClusterConfig: {
                        enablePrivateEndpoint: true,
                        masterIpv4CidrBlock: "Test string",
                        masterIpv4ReservedRange: "Test string",
                    },
                    webServerIpv4CidrBlock: "Test string",
                    webServerIpv4ReservedRange: "Test string",
                },
                softwareConfig: {
                    airflowConfigOverrides: {
                        A: "Test string"
                    },
                    envVariables: {
                        A: "Test string"
                    },
                    imageVersion: "Test string",
                    pypiPackages: {
                        A: "Test string"
                    },
                    pythonVersion: "Test string",
                    schedulerCount: 42,
                },
                webServerConfig: {
                    machineType: "Test string",
                },
                webServerNetworkAccessControl: {
                    allowedIpRanges: [
                        {
                            description: "Test string",
                            value: "Test string",
                        }
                    ],
                },
                workloadsConfig: {
                    scheduler: {
                        count: 42,
                        cpu: 42,
                        memoryGb: 42,
                        storageGb: 42,
                    },
                    webServer: {
                        cpu: 42,
                        memoryGb: 42,
                        storageGb: 42,
                    },
                    worker: {
                        cpu: 42,
                        maxCount: 42,
                        memoryGb: 42,
                        minCount: 42,
                        storageGb: 42,
                    },
                },
            },
            createTime: "Test string",
            labels: {
                A: "Test string"
            },
            name: "Test string",
            state: "Test string",
            updateTime: "Test string",
            uuid: "Test string",
        });
        /** List ImageVersions for provided location. */
        await gapi.client.composer.projects.locations.imageVersions.list({
            includePastReleases: true,
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support
         * this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
         */
        await gapi.client.composer.projects.locations.operations.delete({
            name: "Test string",
        });
        /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
        await gapi.client.composer.projects.locations.operations.get({
            name: "Test string",
        });
        /**
         * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to
         * override the binding to use different resource name schemes, such as `users/*‍/operations`. To override the binding, API services can add a binding such as
         * `"/v1/{name=users/*}/operations"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must
         * ensure the name binding is the parent resource, without the operations collection id.
         */
        await gapi.client.composer.projects.locations.operations.list({
            filter: "Test string",
            name: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
    }
});
