/* Type definitions for non-npm package Migration Center API v1alpha1 0.0 */
// Project: https://cloud.google.com/migration-center
// Definitions by: Maxim Mazurok <https://github.com/Maxim-Mazurok>
//                 Nick Amoscato <https://github.com/namoscato>
//                 Declan Vong <https://github.com/declanvong>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped

// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
// Generated from: https://migrationcenter.googleapis.com/$discovery/rest?version=v1alpha1
// Revision: 20230301

/// <reference types="gapi.client" />

declare namespace gapi.client {
    /** Load Migration Center API v1alpha1 */
    function load(urlOrObject: "https://migrationcenter.googleapis.com/$discovery/rest?version=v1alpha1"): Promise<void>;
    /** @deprecated Please load APIs with discovery documents. */
    function load(name: "migrationcenter", version: "v1alpha1"): Promise<void>;
    /** @deprecated Please load APIs with discovery documents. */
    function load(name: "migrationcenter", version: "v1alpha1", callback: () => any): void;

    namespace migrationcenter {
        interface AggregateAssetsValuesRequest {
            /** Array of aggregations to perform. Up to 25 aggregations can be defined. */
            aggregations?: Aggregation[];
            /** The aggregation will be performed on assets that match the provided filter. */
            filter?: string;
        }
        interface AggregateAssetsValuesResponse {
            /** The aggregation results. */
            results?: AggregationResult[];
        }
        interface Aggregation {
            /** Count the number of matching objects. */
            count?: any;
            /** The name of the field on which to aggregate. */
            field?: string;
            /** Creates a frequency distribution of all field values. */
            frequency?: any;
            /** Creates a bucketed histogram of field values. */
            histogram?: AggregationHistogram;
            /** Sum over a numeric field. */
            sum?: any;
        }
        // tslint:disable-next-line:no-empty-interface
        interface AggregationCount {
        }
        // tslint:disable-next-line:no-empty-interface
        interface AggregationFrequency {
        }
        interface AggregationHistogram {
            /**
             * Lower bounds of buckets. The response will contain `n+1` buckets for `n` bounds. The first bucket will count all assets for which the field value is smaller than the first bound.
             * Subsequent buckets will count assets for which the field value is greater or equal to a lower bound and smaller than the next one. The last bucket will count assets for which the
             * field value is greater or equal to the final lower bound. You can define up to 20 lower bounds.
             */
            lowerBounds?: number[];
        }
        interface AggregationResult {
            count?: AggregationResultCount;
            field?: string;
            frequency?: AggregationResultFrequency;
            histogram?: AggregationResultHistogram;
            sum?: AggregationResultSum;
        }
        interface AggregationResultCount {
            value?: string;
        }
        interface AggregationResultFrequency {
            values?: { [P in string]: string };
        }
        interface AggregationResultHistogram {
            /**
             * Buckets in the histogram. There will be `n+1` buckets matching `n` lower bounds in the request. The first bucket will be from -infinity to the first bound. Subsequent buckets will
             * be between one bound and the next. The final bucket will be from the final bound to infinity.
             */
            buckets?: AggregationResultHistogramBucket[];
        }
        interface AggregationResultHistogramBucket {
            /** Count of items in the bucket. */
            count?: string;
            /** Lower bound - inclusive. */
            lowerBound?: number;
            /** Upper bound - exclusive. */
            upperBound?: number;
        }
        interface AggregationResultSum {
            value?: number;
        }
        // tslint:disable-next-line:no-empty-interface
        interface AggregationSum {
        }
        interface Asset {
            /** Generic asset attributes. */
            attributes?: { [P in string]: string };
            /** Output only. The timestamp when the asset was created. */
            createTime?: string;
            /** Labels as key value pairs. */
            labels?: { [P in string]: string };
            /** Output only. The full name of the asset. */
            name?: string;
            /** Output only. The list of sources contributing to the asset. */
            sources?: string[];
            /** Output only. The timestamp when the asset was last updated. */
            updateTime?: string;
            /** Output only. Asset information specific for virtual machines. */
            virtualMachineDetails?: VirtualMachineDetails;
        }
        interface AssetFrame {
            /** Generic asset attributes. */
            attributes?: { [P in string]: string };
            /** Labels as key value pairs. */
            labels?: { [P in string]: string };
            /** Asset performance data samples. */
            performanceSamples?: PerformanceSample[];
            /** The time the data was reported. */
            reportTime?: string;
            /** Optional. Trace token is optionally provided to assist with debugging and traceability. */
            traceToken?: string;
            /** Asset information specific for virtual machines. */
            virtualMachineDetails?: VirtualMachineDetails;
        }
        interface BatchUpdateAssetsRequest {
            /** Required. The request message specifying the resources to update. A maximum of 1000 assets can be modified in a batch. */
            requests?: UpdateAssetRequest[];
        }
        interface BatchUpdateAssetsResponse {
            /** Update asset content. The content only includes values after field mask being applied. */
            assets?: Asset[];
        }
        interface BiosDetails {
            /** Bios manufacturer. */
            biosManufacturer?: string;
            /** Bios name. */
            biosName?: string;
            /** Bios release date. */
            biosReleaseDate?: string;
            /** Bios version. */
            biosVersion?: string;
            /** SMBios UUID. */
            smbiosUuid?: string;
        }
        // tslint:disable-next-line:no-empty-interface
        interface CancelOperationRequest {
        }
        interface CpuUsageSample {
            /** Percentage of total CPU capacity utilized. Must be in the interval [0, 100]. On most systems can be calculated using 100 - idle percentage. */
            utilizedPercentage?: number;
        }
        interface Date {
            /** Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant. */
            day?: number;
            /** Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day. */
            month?: number;
            /** Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year. */
            year?: number;
        }
        interface DateTime {
            /** Optional. Day of month. Must be from 1 to 31 and valid for the year and month, or 0 if specifying a datetime without a day. */
            day?: number;
            /** Optional. Hours of day in 24 hour format. Should be from 0 to 23, defaults to 0 (midnight). An API may choose to allow the value "24:00:00" for scenarios like business closing time. */
            hours?: number;
            /** Optional. Minutes of hour of day. Must be from 0 to 59, defaults to 0. */
            minutes?: number;
            /** Optional. Month of year. Must be from 1 to 12, or 0 if specifying a datetime without a month. */
            month?: number;
            /** Optional. Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999, defaults to 0. */
            nanos?: number;
            /** Optional. Seconds of minutes of the time. Must normally be from 0 to 59, defaults to 0. An API may allow the value 60 if it allows leap-seconds. */
            seconds?: number;
            /** Time zone. */
            timeZone?: TimeZone;
            /** UTC offset. Must be whole seconds, between -18 hours and +18 hours. For example, a UTC offset of -4:00 would be represented as { seconds: -14400 }. */
            utcOffset?: string;
            /** Optional. Year of date. Must be from 1 to 9999, or 0 if specifying a datetime without a year. */
            year?: number;
        }
        interface DiskEntry {
            /** Disk label. */
            diskLabel?: string;
            /** Disk label type (e.g. BIOS/GPT) */
            diskLabelType?: string;
            /** Disk hardware address (e.g. 0:1 for SCSI). */
            hwAddress?: string;
            /** Disks interface type (e.g. SATA/SCSI) */
            interfaceType?: string;
            /** Partition layout. */
            partitions?: DiskPartitionList;
            /** Disk status (e.g. online). */
            status?: string;
            /** Disk Capacity (required). */
            totalCapacityBytes?: string;
            /** Disk Free Space. */
            totalFreeBytes?: string;
            /** Optional. Optional disk VMware details. */
            vmwareConfig?: VmwareDiskConfig;
        }
        interface DiskEntryList {
            /** Disk entries. */
            entries?: DiskEntry[];
        }
        interface DiskPartition {
            /** Partition capacity. */
            capacityBytes?: string;
            /** Partition file system. */
            fileSystem?: string;
            /** Partition free space. */
            freeBytes?: string;
            /** Mount pount (Linux/Windows) or drive letter (Windows). */
            mountPoint?: string;
            /** Sub-partitions. */
            subPartitions?: DiskPartitionList;
            /** Partition type (e.g. BIOS boot). */
            type?: string;
            /** Partition UUID. */
            uuid?: string;
        }
        interface DiskPartitionList {
            /** Partition entries. */
            entries?: DiskPartition[];
        }
        interface DiskUsageSample {
            /** Average IOPS sampled over a short window. Must be non-negative. */
            averageIops?: number;
        }
        // tslint:disable-next-line:no-empty-interface
        interface Empty {
        }
        interface ExecutionReport {
            /** Validation errors encountered during the execution of the import job. */
            executionErrors?: ValidationReport;
            /** Total number of asset frames reported for the import job. */
            framesReported?: number;
            /** List of job-level errors. Deprecated, use the job errors under execution_errors instead. */
            jobErrors?: ImportError[];
            /** Total number of rows in the import job. */
            totalRowsCount?: number;
        }
        interface FileValidationReport {
            /** List of file level errors. */
            fileErrors?: ImportError[];
            /** The name of the file. */
            fileName?: string;
            /** Flag indicating that processing was aborted due to maximum number of errors. */
            partialReport?: boolean;
            /** Partial list of rows that encountered validation error. */
            rowErrors?: ImportRowError[];
        }
        interface Frames {
            /** A repeated field of asset data. */
            framesData?: AssetFrame[];
        }
        interface FstabEntry {
            /** The mount point for the filesystem. */
            file?: string;
            /** Used by dump to determine which filesystems need to be dumped. */
            freq?: number;
            /** Mount options associated with the filesystem. */
            mntops?: string;
            /** Used by the fsck(8) program to determine the order in which filesystem checks are done at reboot time. */
            passno?: number;
            /** The block special device or remote filesystem to be mounted. */
            spec?: string;
            /** The type of the filesystem. */
            vfstype?: string;
        }
        interface FstabEntryList {
            /** Fstab entries. */
            entries?: FstabEntry[];
        }
        interface GCSPayloadInfo {
            /** The import job format. */
            format?: string;
            /** The payload path in Google Cloud Storage. */
            path?: string;
        }
        interface GuestConfigDetails {
            /** Mount list (Linux fstab). */
            fstab?: FstabEntryList;
            /** Hosts file (/etc/hosts). */
            hosts?: HostsEntryList;
            /** OS issue (typically /etc/issue in Linux). */
            issue?: string;
            /** NFS exports. */
            nfsExports?: NfsExportList;
            /** SELinux details. */
            selinux?: Selinux;
        }
        interface GuestInstalledApplication {
            /** Installed application name . */
            name?: string;
            /** Source path. */
            path?: string;
            /** Date application was installed. */
            time?: string;
            /** Installed application vendor. */
            vendor?: string;
            /** Installed application version. */
            version?: string;
        }
        interface GuestInstalledApplicationList {
            entries?: GuestInstalledApplication[];
        }
        interface GuestOsDetails {
            /** OS and app configuration. */
            config?: GuestConfigDetails;
            /** Runtime information. */
            runtime?: GuestRuntimeDetails;
        }
        interface GuestRuntimeDetails {
            /** Domain, e.g. c.stratozone-development.internal. */
            domain?: string;
            /** Installed applications information. */
            installedApps?: GuestInstalledApplicationList;
            /** Date since last booted (last uptime date). */
            lastUptime?: Date;
            /** Machine name. */
            machineName?: string;
            /** Runtime network information (connections ports). */
            networkInfo?: RuntimeNetworkInfo;
            /** Open files information. */
            openFileList?: OpenFileList;
            /** Running processes. */
            processes?: RunningProcessList;
            /** Running background services. */
            services?: RunningServiceList;
        }
        interface HostsEntry {
            /** List of host names / aliases. */
            hostNames?: string[];
            /** IP (raw, IPv4/6 agnostic). */
            ip?: string;
        }
        interface HostsEntryList {
            /** Hosts entries. */
            entries?: HostsEntry[];
        }
        interface ImportError {
            /** The error information. */
            errorDetails?: string;
            /** The severity of the error. */
            severity?: string;
        }
        interface ImportJob {
            /** Required. Reference to a source. */
            assetSource?: string;
            /** Output only. The timestamp when the import job was completed. */
            completeTime?: string;
            /** Output only. The timestamp when the import job was created. */
            createTime?: string;
            /** Output only. The report with the results of running the import job. */
            executionReport?: ExecutionReport;
            /** The payload is in Google Cloud Storage. */
            gcsPayload?: GCSPayloadInfo;
            /** The payload is included in the request, mainly used for small import jobs. */
            inlinePayload?: InlinePayloadInfo;
            /** Labels as key value pairs. */
            labels?: { [P in string]: string };
            /** Output only. The full name of the import job. */
            name?: string;
            /** Output only. The state of the import job. */
            state?: string;
            /** Output only. The timestamp when the import job was last updated. */
            updateTime?: string;
            /** Output only. The report with the validation results of the import job. */
            validationReport?: ValidationReport;
        }
        interface ImportRowError {
            /** The list of errors detected in the row. */
            errors?: ImportError[];
            /** The row number where the error was detected. */
            rowNumber?: number;
            /** The name of the VM in the row. */
            vmName?: string;
            /** The VM UUID. */
            vmUuid?: string;
        }
        interface InlinePayloadInfo {
            /** The import job format. */
            format?: string;
            /** List of payload files. */
            payload?: PayloadFile[];
        }
        interface ListAssetsResponse {
            /** A list of assets. */
            assets?: Asset[];
            /** A token identifying a page of results the server should return. */
            nextPageToken?: string;
            /** Locations that could not be reached. */
            unreachable?: string[];
        }
        interface ListImportJobsResponse {
            /** The list of import jobs. */
            importJobs?: ImportJob[];
            /** A token identifying a page of results the server should return. */
            nextPageToken?: string;
            /** Locations that could not be reached. */
            unreachable?: string[];
        }
        interface ListLocationsResponse {
            /** A list of locations that matches the specified filter in the request. */
            locations?: Location[];
            /** The standard List next-page token. */
            nextPageToken?: string;
        }
        interface ListOperationsResponse {
            /** The standard List next-page token. */
            nextPageToken?: string;
            /** A list of operations that matches the specified filter in the request. */
            operations?: Operation[];
        }
        interface ListSourcesResponse {
            /** A token identifying a page of results the server should return. */
            nextPageToken?: string;
            /** The list of sources. */
            sources?: Source[];
            /** Locations that could not be reached. */
            unreachable?: string[];
        }
        interface Location {
            /** The friendly name for this location, typically a nearby city name. For example, "Tokyo". */
            displayName?: string;
            /** Cross-service attributes for the location. For example {"cloud.googleapis.com/region": "us-east1"} */
            labels?: { [P in string]: string };
            /** The canonical id for this location. For example: `"us-east1"`. */
            locationId?: string;
            /** Service-specific metadata. For example the available capacity at the given location. */
            metadata?: { [P in string]: any };
            /** Resource name for the location, which may vary between implementations. For example: `"projects/example-project/locations/us-east1"` */
            name?: string;
        }
        interface MemoryUsageSample {
            /** Percentage of system memory utilized. Must be in the interval [0, 100]. */
            utilizedPercentage?: number;
        }
        interface NetworkAdapterDetails {
            /** Network adapter type (e.g. VMXNET3). */
            adapterType?: string;
            /** NetworkAddressList */
            addresses?: NetworkAddressList;
            /** MAC address. */
            macAddress?: string;
        }
        interface NetworkAdapterList {
            /** Network Adapter descriptions. */
            networkAdapters?: NetworkAdapterDetails[];
        }
        interface NetworkAddress {
            /** If DHCP is used to assign addresses. */
            assignment?: string;
            /** Broadcast address. */
            bcast?: string;
            /** Fully qualified domain name. */
            fqdn?: string;
            /** Assigned or configured IP Address. */
            ipAddress?: string;
            /** Subnet mask. */
            subnetMask?: string;
        }
        interface NetworkAddressList {
            addresses?: NetworkAddress[];
        }
        interface NetworkConnection {
            /** Local IP address. */
            localIpAddress?: string;
            /** Local port. */
            localPort?: number;
            /** Process ID. */
            pid?: string;
            /** Process or service name. */
            processName?: string;
            /** Connection protocol (e.g. TCP/UDP). */
            protocol?: string;
            /** Remote IP address. */
            remoteIpAddress?: string;
            /** Remote port. */
            remotePort?: number;
            /** Connection state (e.g. CONNECTED). */
            state?: string;
        }
        interface NetworkConnectionList {
            entries?: NetworkConnection[];
        }
        interface NetworkUsageSample {
            /** Average network egress in B/s sampled over a short window. Must be non-negative. */
            averageEgressBps?: number;
            /** Average network ingress in B/s sampled over a short window. Must be non-negative. */
            averageIngressBps?: number;
        }
        interface NfsExport {
            /** The directory being exported. */
            exportDirectory?: string;
            /** The hosts or networks to which the export is being shared. */
            hosts?: string[];
        }
        interface NfsExportList {
            /** NFS export entries. */
            entries?: NfsExport[];
        }
        interface OpenFileDetails {
            /** Opened file command. */
            command?: string;
            /** Opened file file path. */
            filePath?: string;
            /** Opened file file type. */
            fileType?: string;
            /** Opened file user. */
            user?: string;
        }
        interface OpenFileList {
            /** Open file details entries. */
            entries?: OpenFileDetails[];
        }
        interface Operation {
            /** If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available. */
            done?: boolean;
            /** The error result of the operation in case of failure or cancellation. */
            error?: Status;
            /**
             * Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such
             * metadata. Any method that returns a long-running operation should document the metadata type, if any.
             */
            metadata?: { [P in string]: any };
            /**
             * The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending
             * with `operations/{unique_id}`.
             */
            name?: string;
            /**
             * The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the
             * original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the
             * original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
             */
            response?: { [P in string]: any };
        }
        interface OperationMetadata {
            /** Output only. API version used to start the operation. */
            apiVersion?: string;
            /** Output only. The time the operation was created. */
            createTime?: string;
            /** Output only. The time the operation finished running. */
            endTime?: string;
            /**
             * Output only. Identifies whether the user has requested cancellation of the operation. Operations that have been cancelled successfully have Operation.error value with a
             * google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
             */
            requestedCancellation?: boolean;
            /** Output only. Human-readable status of the operation, if any. */
            statusMessage?: string;
            /** Output only. Server-defined resource path for the target of the operation. */
            target?: string;
            /** Output only. Name of the verb executed by the operation. */
            verb?: string;
        }
        interface PayloadFile {
            /** The file data. */
            data?: string;
            /** The file name. */
            name?: string;
        }
        interface PerformanceSample {
            /** CPU usage sample. */
            cpu?: CpuUsageSample;
            /** Disk usage sample. */
            disk?: DiskUsageSample;
            /** Memory usage sample. */
            memory?: MemoryUsageSample;
            /** Network usage sample. */
            network?: NetworkUsageSample;
            /** Time the sample was collected. */
            sampleTime?: string;
        }
        interface PlatformDetails {
            /** VMware specific details. */
            vmwareDetails?: VmwarePlatformDetails;
        }
        // tslint:disable-next-line:no-empty-interface
        interface ReportAssetFramesResponse {
        }
        interface RunImportJobRequest {
            /**
             * Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has
             * already been completed. The server will guarantee that for at least 60 minutes after the first request. For example, consider a situation where you make an initial request and the
             * request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore
             * the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported
             * (00000000-0000-0000-0000-000000000000).
             */
            requestId?: string;
        }
        interface RunningProcess {
            /** Process extended attributes. */
            attributes?: { [P in string]: string };
            /** Process full command line. */
            cmdline?: string;
            /** Process binary path. */
            exePath?: string;
            /** Process ID. */
            pid?: string;
            /** User running the process. */
            user?: string;
        }
        interface RunningProcessList {
            processes?: RunningProcess[];
        }
        interface RunningService {
            /** Service command line. */
            cmdline?: string;
            /** Service binary path. */
            exePath?: string;
            /** Service name. */
            name?: string;
            /** Service pid. */
            pid?: string;
            /** Service start mode (raw, OS-agnostic). */
            startMode?: string;
            /** Service state (raw, OS-agnostic). */
            state?: string;
            /** Service status. */
            status?: string;
        }
        interface RunningServiceList {
            services?: RunningService[];
        }
        interface RuntimeNetworkInfo {
            /** Network connections. */
            connections?: NetworkConnectionList;
            /** Netstat (raw, OS-agnostic). */
            netstat?: string;
            /** Netstat time collected. */
            netstatTime?: DateTime;
        }
        interface Selinux {
            /** Is SELinux enabled. */
            enabled?: boolean;
            /** SELinux mode enforcing / permissive. */
            mode?: string;
        }
        interface Source {
            /** Output only. The timestamp when the source was created. */
            createTime?: string;
            /** Free-text description. */
            description?: string;
            /** User-friendly display name. */
            displayName?: string;
            /** If `true`, the source is managed by other service(s). */
            isManaged?: boolean;
            /** Output only. The full name of the source. */
            name?: string;
            /** Output only. Number of frames that are still being processed. */
            pendingFrameCount?: number;
            /** The information confidence of the source. The higher the value, the higher the confidence. */
            priority?: number;
            /** Data source type. */
            type?: string;
            /** Output only. The timestamp when the source was last updated. */
            updateTime?: string;
        }
        interface Status {
            /** The status code, which should be an enum value of google.rpc.Code. */
            code?: number;
            /** A list of messages that carry the error details. There is a common set of message types for APIs to use. */
            details?: Array<{ [P in string]: any }>;
            /**
             * A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the
             * client.
             */
            message?: string;
        }
        interface TimeZone {
            /** IANA Time Zone Database time zone, e.g. "America/New_York". */
            id?: string;
            /** Optional. IANA Time Zone Database version number, e.g. "2019a". */
            version?: string;
        }
        interface UpdateAssetRequest {
            /** Required. The resource being updated. */
            asset?: Asset;
            /**
             * Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has
             * already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the
             * request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore
             * the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported
             * (00000000-0000-0000-0000-000000000000).
             */
            requestId?: string;
            /**
             * Required. Field mask is used to specify the fields to be overwritten in the `Asset` resource by the update. The values specified in the `update_mask` field are relative to the
             * resource, not the full request. A field will be overwritten if it is in the mask. A single * value in the mask lets you to overwrite all fields.
             */
            updateMask?: string;
        }
        interface ValidateImportJobRequest {
            /**
             * Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has
             * already been completed. The server will guarantee that for at least 60 minutes after the first request. For example, consider a situation where you make an initial request and the
             * request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore
             * the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported
             * (00000000-0000-0000-0000-000000000000).
             */
            requestId?: string;
        }
        interface ValidationReport {
            /** List of errors found in files. */
            fileValidations?: FileValidationReport[];
            /** List of job level errors. */
            jobErrors?: ImportError[];
        }
        interface VirtualMachineArchitectureDetails {
            /** Bios Details. */
            bios?: BiosDetails;
            /** CPU architecture e.g.: "x64-based PC", "x86_64", "i686" etc. */
            cpuArchitecture?: string;
            /** CPU manufacturer e.g.: "Intel", "AMD". */
            cpuManufacturer?: string;
            /** CPU name e.g. "Intel Xeon E5-2690", "AMD EPYC 7571" etc. */
            cpuName?: string;
            /** Number of processor sockets allocated to the machine. */
            cpuSocketCount?: number;
            /** Number of cpu threads allocated to the machine. */
            cpuThreadCount?: number;
            /** Firmware (BIOS/efi). */
            firmware?: string;
            /** CPU hyperthreading support (inner enum). */
            hyperthreading?: string;
            /** Hardware vendor. */
            vendor?: string;
        }
        interface VirtualMachineDetails {
            /** Number of CPU cores in the VirtualMachine. Must be non-negative. */
            coreCount?: number;
            /** Guest OS information. */
            guestOs?: GuestOsDetails;
            /** The amount of memory in the VirtualMachine. Must be non-negative. */
            memoryMb?: number;
            /** What family the OS belong to, if known. */
            osFamily?: string;
            /** The name of the operating system running on the VirtualMachine. */
            osName?: string;
            /** Platform information. */
            platform?: PlatformDetails;
            /** Power state of VM (poweredOn or poweredOff). */
            powerState?: string;
            /** Folder name in vCenter where asset resides. */
            vcenterFolder?: string;
            /** vCenter URL used in collection. */
            vcenterUrl?: string;
            /** vCenter VM ID. */
            vcenterVmId?: string;
            /** VM architecture details (vendor, cpu arch). */
            vmArchitecture?: VirtualMachineArchitectureDetails;
            /** VM disk details. */
            vmDisks?: VirtualMachineDiskDetails;
            /** Virtual Machine display name. */
            vmName?: string;
            /** VM network details. */
            vmNetwork?: VirtualMachineNetworkDetails;
            /** Virtual Machine uniqe identifier. */
            vmUuid?: string;
        }
        interface VirtualMachineDiskDetails {
            /** List of disks. */
            disks?: DiskEntryList;
            /** Disk total Capacity. */
            hddTotalCapacityBytes?: string;
            /** Total Disk Free Space. */
            hddTotalFreeBytes?: string;
            /** Raw lsblk output in json. */
            lsblkJson?: string;
        }
        interface VirtualMachineNetworkDetails {
            /** Default GW address. Top-level object, will be later encriched by full RouteInfo. */
            defaultGw?: string;
            /** List of Network Adapters. */
            networkAdapters?: NetworkAdapterList;
            /** IP Address of the machine. */
            primaryIpAddress?: string;
            /** MAC Address of the machine. This property is used to uniqly identify the machine. */
            primaryMacAddress?: string;
        }
        interface VmwareDiskConfig {
            /** VMDK backing type. */
            backingType?: string;
            /** RDM compatibility mode. */
            rdmCompatibilityMode?: string;
            /** Is VMDK shared with other VMs. */
            shared?: boolean;
            /** VMDK disk mode. */
            vmdkDiskMode?: string;
        }
        interface VmwarePlatformDetails {
            /** ESX version. */
            esxVersion?: string;
            /**
             * VMware os enum -
             * https://vdc-repo.vmware.com/vmwb-repository/dcr-public/da47f910-60ac-438b-8b9b-6122f4d14524/16b7274a-bf8b-4b4c-a05e-746f2aa93c8c/doc/vim.vm.GuestOsDescriptor.GuestOsIdentifier.html.
             */
            osid?: string;
            /** vCenter version. */
            vcenterVersion?: string;
        }
        interface AssetsResource {
            /** Aggregates the requested fields based on provided function. */
            aggregateValues(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. Parent value for `AggregateAssetsValuesRequest`. */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: AggregateAssetsValuesRequest;
            }): Request<AggregateAssetsValuesResponse>;
            aggregateValues(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. Parent value for `AggregateAssetsValuesRequest`. */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: AggregateAssetsValuesRequest): Request<AggregateAssetsValuesResponse>;
            /** Updates the parameters of a list of assets. */
            batchUpdate(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. Parent value for batch asset update. */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: BatchUpdateAssetsRequest;
            }): Request<BatchUpdateAssetsResponse>;
            batchUpdate(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. Parent value for batch asset update. */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: BatchUpdateAssetsRequest): Request<BatchUpdateAssetsResponse>;
            /** Creates a new asset in a given project and location. Deprecated: Use ReportAssetFrames instead. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                assetId?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. Value for parent. */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has
                 * already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and
                 * the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will
                 * ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not
                 * supported (00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Asset;
            }): Request<Operation>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                assetId?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. Value for parent. */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has
                 * already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and
                 * the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will
                 * ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not
                 * supported (00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Asset): Request<Operation>;
            /** Deletes an asset. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Required. Name of the resource. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has
                 * already been completed. The server will guarantee that for at least 60 minutes after the first request. For example, consider a situation where you make an initial request and
                 * the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will
                 * ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not
                 * supported (00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Operation>;
            /** Gets the details of an asset. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Required. Name of the resource. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** View of the assets. Defaults to BASIC. */
                view?: string;
            }): Request<Asset>;
            /** Lists all the assets in a given project and location. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Filtering results. */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Field to sort by. See https://google.aip.dev/132#ordering for more details. */
                orderBy?: string;
                /** Requested page size. Server may return fewer items than requested. If unspecified, server will pick an appropriate default. */
                pageSize?: number;
                /** A token identifying a page of results the server should return. */
                pageToken?: string;
                /** Required. Parent value for `ListAssetsRequest`. */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** View of the assets. Defaults to BASIC. */
                view?: string;
            }): Request<ListAssetsResponse>;
            /** Updates the parameters of an asset. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Output only. The full name of the asset. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has
                 * already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and
                 * the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will
                 * ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not
                 * supported (00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /**
                 * Required. Field mask is used to specify the fields to be overwritten in the `Asset` resource by the update. The values specified in the `update_mask` field are relative to the
                 * resource, not the full request. A field will be overwritten if it is in the mask. A single * value in the mask lets you to overwrite all fields.
                 */
                updateMask?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Asset;
            }): Request<Operation>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Output only. The full name of the asset. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has
                 * already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and
                 * the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will
                 * ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not
                 * supported (00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /**
                 * Required. Field mask is used to specify the fields to be overwritten in the `Asset` resource by the update. The values specified in the `update_mask` field are relative to the
                 * resource, not the full request. A field will be overwritten if it is in the mask. A single * value in the mask lets you to overwrite all fields.
                 */
                updateMask?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Asset): Request<Operation>;
            /** Reports a set of frames. */
            reportAssetFrames(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. Parent of the resource. */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Required. Reference to a source. */
                source?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Frames;
            }): Request<{}>;
            reportAssetFrames(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. Parent of the resource. */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Required. Reference to a source. */
                source?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Frames): Request<{}>;
        }
        interface ImportJobsResource {
            /** Creates an import job. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Required. ID of the import job. */
                importJobId?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. Value for parent. */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has
                 * already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and
                 * the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will
                 * ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not
                 * supported (00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: ImportJob;
            }): Request<Operation>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Required. ID of the import job. */
                importJobId?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. Value for parent. */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has
                 * already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and
                 * the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will
                 * ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not
                 * supported (00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: ImportJob): Request<Operation>;
            /** Deletes an import job. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Required. Name of the resource. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has
                 * already been completed. The server will guarantee that for at least 60 minutes after the first request. For example, consider a situation where you make an initial request and
                 * the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will
                 * ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not
                 * supported (00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Operation>;
            /** Gets the details of an import job. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Required. Name of the resource. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Optional. The level of details of the import job. Default value is FULL. */
                view?: string;
            }): Request<ImportJob>;
            /** Lists all import jobs. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Filtering results. */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Field to sort by. See https://google.aip.dev/132#ordering for more details. */
                orderBy?: string;
                /** Requested page size. Server may return fewer items than requested. If unspecified, server will pick an appropriate default. */
                pageSize?: number;
                /** A token identifying a page of results the server should return. */
                pageToken?: string;
                /** Required. Parent value for `ListImportJobsRequest`. */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Optional. The level of details of each import job. Default value is BASIC. */
                view?: string;
            }): Request<ListImportJobsResponse>;
            /** Updates an import job. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Output only. The full name of the import job. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has
                 * already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and
                 * the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will
                 * ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not
                 * supported (00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /**
                 * Required. Field mask is used to specify the fields to be overwritten in the `Asset` resource by the update. The values specified in the `update_mask` field are relative to the
                 * resource, not the full request. A field will be overwritten if it is in the mask. A single * value in the mask lets you to overwrite all fields.
                 */
                updateMask?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: ImportJob;
            }): Request<Operation>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Output only. The full name of the import job. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has
                 * already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and
                 * the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will
                 * ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not
                 * supported (00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /**
                 * Required. Field mask is used to specify the fields to be overwritten in the `Asset` resource by the update. The values specified in the `update_mask` field are relative to the
                 * resource, not the full request. A field will be overwritten if it is in the mask. A single * value in the mask lets you to overwrite all fields.
                 */
                updateMask?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: ImportJob): Request<Operation>;
            /** Runs an import job. */
            run(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Required. The name of the import job to run. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: RunImportJobRequest;
            }): Request<Operation>;
            run(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Required. The name of the import job to run. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: RunImportJobRequest): Request<Operation>;
            /** Validates an import job. */
            validate(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Required. The name of the import job to validate. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: ValidateImportJobRequest;
            }): Request<Operation>;
            validate(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Required. The name of the import job to validate. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: ValidateImportJobRequest): Request<Operation>;
        }
        interface OperationsResource {
            /**
             * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support
             * this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the
             * operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a
             * google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
             */
            cancel(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the operation resource to be cancelled. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: CancelOperationRequest;
            }): Request<{}>;
            cancel(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the operation resource to be cancelled. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: CancelOperationRequest): Request<{}>;
            /**
             * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't
             * support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
             */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the operation resource to be deleted. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<{}>;
            /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the operation resource. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Operation>;
            /**
             * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services
             * to override the binding to use different resource name schemes, such as `users/*‍/operations`. To override the binding, API services can add a binding such as
             * `"/v1/{name=users/*}/operations"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must
             * ensure the name binding is the parent resource, without the operations collection id.
             */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The standard list filter. */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the operation's parent resource. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The standard list page size. */
                pageSize?: number;
                /** The standard list page token. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListOperationsResponse>;
        }
        interface SourcesResource {
            /** Creates a new source in a given project and location. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. Value for parent. */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has
                 * already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and
                 * the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will
                 * ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not
                 * supported (00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /**
                 * Required. User specified ID for the source. It will become the last component of the source name. The ID must be unique within the project, must conform with RFC-1034, is
                 * restricted to lower-cased letters, and has a maximum length of 63 characters. The ID must match the regular expression: `[a-z]([a-z0-9-]{0,61}[a-z0-9])?`.
                 */
                sourceId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Source;
            }): Request<Operation>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. Value for parent. */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has
                 * already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and
                 * the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will
                 * ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not
                 * supported (00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /**
                 * Required. User specified ID for the source. It will become the last component of the source name. The ID must be unique within the project, must conform with RFC-1034, is
                 * restricted to lower-cased letters, and has a maximum length of 63 characters. The ID must match the regular expression: `[a-z]([a-z0-9-]{0,61}[a-z0-9])?`.
                 */
                sourceId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Source): Request<Operation>;
            /** Deletes a source. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Required. Name of the resource. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has
                 * already been completed. The server will guarantee that for at least 60 minutes after the first request. For example, consider a situation where you make an initial request and
                 * the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will
                 * ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not
                 * supported (00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Operation>;
            /** Gets the details of a source. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Required. Name of the resource. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Source>;
            /** Lists all the sources in a given project and location. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Filtering results. */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Field to sort by. See https://google.aip.dev/132#ordering for more details. */
                orderBy?: string;
                /** Requested page size. The server may return fewer items than requested. If unspecified, the server will pick an appropriate default value. */
                pageSize?: number;
                /** A token identifying a page of results that the server should return. */
                pageToken?: string;
                /** Required. Parent value for `ListSourcesRequest`. */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListSourcesResponse>;
            /** Updates the parameters of a source. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Output only. The full name of the source. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has
                 * already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and
                 * the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will
                 * ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not
                 * supported (00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /**
                 * Required. Field mask is used to specify the fields to be overwritten in the `Source` resource by the update. The values specified in the `update_mask` field are relative to the
                 * resource, not the full request. A field will be overwritten if it is in the mask. A single * value in the mask lets you to overwrite all fields.
                 */
                updateMask?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Source;
            }): Request<Operation>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Output only. The full name of the source. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has
                 * already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and
                 * the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will
                 * ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not
                 * supported (00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /**
                 * Required. Field mask is used to specify the fields to be overwritten in the `Source` resource by the update. The values specified in the `update_mask` field are relative to the
                 * resource, not the full request. A field will be overwritten if it is in the mask. A single * value in the mask lets you to overwrite all fields.
                 */
                updateMask?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Source): Request<Operation>;
        }
        interface LocationsResource {
            /** Gets information about a location. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Resource name for the location. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Location>;
            /** Lists information about the supported locations for this service. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter to narrow down results to a preferred subset. The filtering language accepts strings like `"displayName=tokyo"`, and is documented in more detail in
                 * [AIP-160](https://google.aip.dev/160).
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The resource that owns the locations collection, if applicable. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The maximum number of results to return. If not set, the service selects a default. */
                pageSize?: number;
                /** A page token received from the `next_page_token` field in the response. Send that page token to receive the subsequent page. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListLocationsResponse>;
            assets: AssetsResource;
            importJobs: ImportJobsResource;
            operations: OperationsResource;
            sources: SourcesResource;
        }
        interface ProjectsResource {
            locations: LocationsResource;
        }

        const projects: ProjectsResource;
    }
}
