/* This is stub file for gapi.client.migrationcenter-v1alpha1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20230301

gapi.load('client', async () => {
    /** now we can use gapi.client */

    await gapi.client.load('https://migrationcenter.googleapis.com/$discovery/rest?version=v1alpha1');
    /** now we can use gapi.client.migrationcenter */

    /** don't forget to authenticate your client before sending any request to resources: */
    /** declare client_id registered in Google Developers Console */
    const client_id = '<<PUT YOUR CLIENT ID HERE>>';
    const scope = [
        /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
        'https://www.googleapis.com/auth/cloud-platform',
    ];
    const immediate = false;
    gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
        if (authResult && !authResult.error) {
            /** handle successful authorization */
            run();
        } else {
            /** handle authorization error */
        }
    });

    async function run() {
        /** Gets information about a location. */
        await gapi.client.migrationcenter.projects.locations.get({
            name: "Test string",
        });
        /** Lists information about the supported locations for this service. */
        await gapi.client.migrationcenter.projects.locations.list({
            filter: "Test string",
            name: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Aggregates the requested fields based on provided function. */
        await gapi.client.migrationcenter.projects.locations.assets.aggregateValues({
            parent: "Test string",
        }, {
            aggregations: [
                {
                    count: {
                    },
                    field: "Test string",
                    frequency: {
                    },
                    histogram: {
                        lowerBounds: [
                            42
                        ],
                    },
                    sum: {
                    },
                }
            ],
            filter: "Test string",
        });
        /** Updates the parameters of a list of assets. */
        await gapi.client.migrationcenter.projects.locations.assets.batchUpdate({
            parent: "Test string",
        }, {
            requests: [
                {
                    asset: {
                        attributes: {
                            A: "Test string"
                        },
                        createTime: "Test string",
                        labels: {
                            A: "Test string"
                        },
                        name: "Test string",
                        sources: [
                            "Test string"
                        ],
                        updateTime: "Test string",
                        virtualMachineDetails: {
                            coreCount: 42,
                            guestOs: {
                                config: {
                                    fstab: {
                                        entries: [
                                            {
                                                file: "Test string",
                                                freq: 42,
                                                mntops: "Test string",
                                                passno: 42,
                                                spec: "Test string",
                                                vfstype: "Test string",
                                            }
                                        ],
                                    },
                                    hosts: {
                                        entries: [
                                            {
                                                hostNames: [
                                                    "Test string"
                                                ],
                                                ip: "Test string",
                                            }
                                        ],
                                    },
                                    issue: "Test string",
                                    nfsExports: {
                                        entries: [
                                            {
                                                exportDirectory: "Test string",
                                                hosts: [
                                                    "Test string"
                                                ],
                                            }
                                        ],
                                    },
                                    selinux: {
                                        enabled: true,
                                        mode: "Test string",
                                    },
                                },
                                runtime: {
                                    domain: "Test string",
                                    installedApps: {
                                        entries: [
                                            {
                                                name: "Test string",
                                                path: "Test string",
                                                time: "Test string",
                                                vendor: "Test string",
                                                version: "Test string",
                                            }
                                        ],
                                    },
                                    lastUptime: {
                                        day: 42,
                                        month: 42,
                                        year: 42,
                                    },
                                    machineName: "Test string",
                                    networkInfo: {
                                        connections: {
                                            entries: [
                                                {
                                                    localIpAddress: "Test string",
                                                    localPort: 42,
                                                    pid: "Test string",
                                                    processName: "Test string",
                                                    protocol: "Test string",
                                                    remoteIpAddress: "Test string",
                                                    remotePort: 42,
                                                    state: "Test string",
                                                }
                                            ],
                                        },
                                        netstat: "Test string",
                                        netstatTime: {
                                            day: 42,
                                            hours: 42,
                                            minutes: 42,
                                            month: 42,
                                            nanos: 42,
                                            seconds: 42,
                                            timeZone: {
                                                id: "Test string",
                                                version: "Test string",
                                            },
                                            utcOffset: "Test string",
                                            year: 42,
                                        },
                                    },
                                    openFileList: {
                                        entries: [
                                            {
                                                command: "Test string",
                                                filePath: "Test string",
                                                fileType: "Test string",
                                                user: "Test string",
                                            }
                                        ],
                                    },
                                    processes: {
                                        processes: [
                                            {
                                                attributes: {
                                                    A: "Test string"
                                                },
                                                cmdline: "Test string",
                                                exePath: "Test string",
                                                pid: "Test string",
                                                user: "Test string",
                                            }
                                        ],
                                    },
                                    services: {
                                        services: [
                                            {
                                                cmdline: "Test string",
                                                exePath: "Test string",
                                                name: "Test string",
                                                pid: "Test string",
                                                startMode: "Test string",
                                                state: "Test string",
                                                status: "Test string",
                                            }
                                        ],
                                    },
                                },
                            },
                            memoryMb: 42,
                            osFamily: "Test string",
                            osName: "Test string",
                            platform: {
                                vmwareDetails: {
                                    esxVersion: "Test string",
                                    osid: "Test string",
                                    vcenterVersion: "Test string",
                                },
                            },
                            powerState: "Test string",
                            vcenterFolder: "Test string",
                            vcenterUrl: "Test string",
                            vcenterVmId: "Test string",
                            vmArchitecture: {
                                bios: {
                                    biosManufacturer: "Test string",
                                    biosName: "Test string",
                                    biosReleaseDate: "Test string",
                                    biosVersion: "Test string",
                                    smbiosUuid: "Test string",
                                },
                                cpuArchitecture: "Test string",
                                cpuManufacturer: "Test string",
                                cpuName: "Test string",
                                cpuSocketCount: 42,
                                cpuThreadCount: 42,
                                firmware: "Test string",
                                hyperthreading: "Test string",
                                vendor: "Test string",
                            },
                            vmDisks: {
                                disks: {
                                    entries: [
                                        {
                                            diskLabel: "Test string",
                                            diskLabelType: "Test string",
                                            hwAddress: "Test string",
                                            interfaceType: "Test string",
                                            partitions: {
                                                entries: [
                                                    {
                                                        capacityBytes: "Test string",
                                                        fileSystem: "Test string",
                                                        freeBytes: "Test string",
                                                        mountPoint: "Test string",
                                                        subPartitions: undefined,
                                                        type: "Test string",
                                                        uuid: "Test string",
                                                    }
                                                ],
                                            },
                                            status: "Test string",
                                            totalCapacityBytes: "Test string",
                                            totalFreeBytes: "Test string",
                                            vmwareConfig: {
                                                backingType: "Test string",
                                                rdmCompatibilityMode: "Test string",
                                                shared: true,
                                                vmdkDiskMode: "Test string",
                                            },
                                        }
                                    ],
                                },
                                hddTotalCapacityBytes: "Test string",
                                hddTotalFreeBytes: "Test string",
                                lsblkJson: "Test string",
                            },
                            vmName: "Test string",
                            vmNetwork: {
                                defaultGw: "Test string",
                                networkAdapters: {
                                    networkAdapters: [
                                        {
                                            adapterType: "Test string",
                                            addresses: {
                                                addresses: [
                                                    {
                                                        assignment: "Test string",
                                                        bcast: "Test string",
                                                        fqdn: "Test string",
                                                        ipAddress: "Test string",
                                                        subnetMask: "Test string",
                                                    }
                                                ],
                                            },
                                            macAddress: "Test string",
                                        }
                                    ],
                                },
                                primaryIpAddress: "Test string",
                                primaryMacAddress: "Test string",
                            },
                            vmUuid: "Test string",
                        },
                    },
                    requestId: "Test string",
                    updateMask: "Test string",
                }
            ],
        });
        /** Creates a new asset in a given project and location. Deprecated: Use ReportAssetFrames instead. */
        await gapi.client.migrationcenter.projects.locations.assets.create({
            assetId: "Test string",
            parent: "Test string",
            requestId: "Test string",
        }, {
            attributes: {
                A: "Test string"
            },
            createTime: "Test string",
            labels: {
                A: "Test string"
            },
            name: "Test string",
            sources: [
                "Test string"
            ],
            updateTime: "Test string",
            virtualMachineDetails: {
                coreCount: 42,
                guestOs: {
                    config: {
                        fstab: {
                            entries: [
                                {
                                    file: "Test string",
                                    freq: 42,
                                    mntops: "Test string",
                                    passno: 42,
                                    spec: "Test string",
                                    vfstype: "Test string",
                                }
                            ],
                        },
                        hosts: {
                            entries: [
                                {
                                    hostNames: [
                                        "Test string"
                                    ],
                                    ip: "Test string",
                                }
                            ],
                        },
                        issue: "Test string",
                        nfsExports: {
                            entries: [
                                {
                                    exportDirectory: "Test string",
                                    hosts: [
                                        "Test string"
                                    ],
                                }
                            ],
                        },
                        selinux: {
                            enabled: true,
                            mode: "Test string",
                        },
                    },
                    runtime: {
                        domain: "Test string",
                        installedApps: {
                            entries: [
                                {
                                    name: "Test string",
                                    path: "Test string",
                                    time: "Test string",
                                    vendor: "Test string",
                                    version: "Test string",
                                }
                            ],
                        },
                        lastUptime: {
                            day: 42,
                            month: 42,
                            year: 42,
                        },
                        machineName: "Test string",
                        networkInfo: {
                            connections: {
                                entries: [
                                    {
                                        localIpAddress: "Test string",
                                        localPort: 42,
                                        pid: "Test string",
                                        processName: "Test string",
                                        protocol: "Test string",
                                        remoteIpAddress: "Test string",
                                        remotePort: 42,
                                        state: "Test string",
                                    }
                                ],
                            },
                            netstat: "Test string",
                            netstatTime: {
                                day: 42,
                                hours: 42,
                                minutes: 42,
                                month: 42,
                                nanos: 42,
                                seconds: 42,
                                timeZone: {
                                    id: "Test string",
                                    version: "Test string",
                                },
                                utcOffset: "Test string",
                                year: 42,
                            },
                        },
                        openFileList: {
                            entries: [
                                {
                                    command: "Test string",
                                    filePath: "Test string",
                                    fileType: "Test string",
                                    user: "Test string",
                                }
                            ],
                        },
                        processes: {
                            processes: [
                                {
                                    attributes: {
                                        A: "Test string"
                                    },
                                    cmdline: "Test string",
                                    exePath: "Test string",
                                    pid: "Test string",
                                    user: "Test string",
                                }
                            ],
                        },
                        services: {
                            services: [
                                {
                                    cmdline: "Test string",
                                    exePath: "Test string",
                                    name: "Test string",
                                    pid: "Test string",
                                    startMode: "Test string",
                                    state: "Test string",
                                    status: "Test string",
                                }
                            ],
                        },
                    },
                },
                memoryMb: 42,
                osFamily: "Test string",
                osName: "Test string",
                platform: {
                    vmwareDetails: {
                        esxVersion: "Test string",
                        osid: "Test string",
                        vcenterVersion: "Test string",
                    },
                },
                powerState: "Test string",
                vcenterFolder: "Test string",
                vcenterUrl: "Test string",
                vcenterVmId: "Test string",
                vmArchitecture: {
                    bios: {
                        biosManufacturer: "Test string",
                        biosName: "Test string",
                        biosReleaseDate: "Test string",
                        biosVersion: "Test string",
                        smbiosUuid: "Test string",
                    },
                    cpuArchitecture: "Test string",
                    cpuManufacturer: "Test string",
                    cpuName: "Test string",
                    cpuSocketCount: 42,
                    cpuThreadCount: 42,
                    firmware: "Test string",
                    hyperthreading: "Test string",
                    vendor: "Test string",
                },
                vmDisks: {
                    disks: {
                        entries: [
                            {
                                diskLabel: "Test string",
                                diskLabelType: "Test string",
                                hwAddress: "Test string",
                                interfaceType: "Test string",
                                partitions: {
                                    entries: [
                                        {
                                            capacityBytes: "Test string",
                                            fileSystem: "Test string",
                                            freeBytes: "Test string",
                                            mountPoint: "Test string",
                                            subPartitions: undefined,
                                            type: "Test string",
                                            uuid: "Test string",
                                        }
                                    ],
                                },
                                status: "Test string",
                                totalCapacityBytes: "Test string",
                                totalFreeBytes: "Test string",
                                vmwareConfig: {
                                    backingType: "Test string",
                                    rdmCompatibilityMode: "Test string",
                                    shared: true,
                                    vmdkDiskMode: "Test string",
                                },
                            }
                        ],
                    },
                    hddTotalCapacityBytes: "Test string",
                    hddTotalFreeBytes: "Test string",
                    lsblkJson: "Test string",
                },
                vmName: "Test string",
                vmNetwork: {
                    defaultGw: "Test string",
                    networkAdapters: {
                        networkAdapters: [
                            {
                                adapterType: "Test string",
                                addresses: {
                                    addresses: [
                                        {
                                            assignment: "Test string",
                                            bcast: "Test string",
                                            fqdn: "Test string",
                                            ipAddress: "Test string",
                                            subnetMask: "Test string",
                                        }
                                    ],
                                },
                                macAddress: "Test string",
                            }
                        ],
                    },
                    primaryIpAddress: "Test string",
                    primaryMacAddress: "Test string",
                },
                vmUuid: "Test string",
            },
        });
        /** Deletes an asset. */
        await gapi.client.migrationcenter.projects.locations.assets.delete({
            name: "Test string",
            requestId: "Test string",
        });
        /** Gets the details of an asset. */
        await gapi.client.migrationcenter.projects.locations.assets.get({
            name: "Test string",
            view: "Test string",
        });
        /** Lists all the assets in a given project and location. */
        await gapi.client.migrationcenter.projects.locations.assets.list({
            filter: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
            view: "Test string",
        });
        /** Updates the parameters of an asset. */
        await gapi.client.migrationcenter.projects.locations.assets.patch({
            name: "Test string",
            requestId: "Test string",
            updateMask: "Test string",
        }, {
            attributes: {
                A: "Test string"
            },
            createTime: "Test string",
            labels: {
                A: "Test string"
            },
            name: "Test string",
            sources: [
                "Test string"
            ],
            updateTime: "Test string",
            virtualMachineDetails: {
                coreCount: 42,
                guestOs: {
                    config: {
                        fstab: {
                            entries: [
                                {
                                    file: "Test string",
                                    freq: 42,
                                    mntops: "Test string",
                                    passno: 42,
                                    spec: "Test string",
                                    vfstype: "Test string",
                                }
                            ],
                        },
                        hosts: {
                            entries: [
                                {
                                    hostNames: [
                                        "Test string"
                                    ],
                                    ip: "Test string",
                                }
                            ],
                        },
                        issue: "Test string",
                        nfsExports: {
                            entries: [
                                {
                                    exportDirectory: "Test string",
                                    hosts: [
                                        "Test string"
                                    ],
                                }
                            ],
                        },
                        selinux: {
                            enabled: true,
                            mode: "Test string",
                        },
                    },
                    runtime: {
                        domain: "Test string",
                        installedApps: {
                            entries: [
                                {
                                    name: "Test string",
                                    path: "Test string",
                                    time: "Test string",
                                    vendor: "Test string",
                                    version: "Test string",
                                }
                            ],
                        },
                        lastUptime: {
                            day: 42,
                            month: 42,
                            year: 42,
                        },
                        machineName: "Test string",
                        networkInfo: {
                            connections: {
                                entries: [
                                    {
                                        localIpAddress: "Test string",
                                        localPort: 42,
                                        pid: "Test string",
                                        processName: "Test string",
                                        protocol: "Test string",
                                        remoteIpAddress: "Test string",
                                        remotePort: 42,
                                        state: "Test string",
                                    }
                                ],
                            },
                            netstat: "Test string",
                            netstatTime: {
                                day: 42,
                                hours: 42,
                                minutes: 42,
                                month: 42,
                                nanos: 42,
                                seconds: 42,
                                timeZone: {
                                    id: "Test string",
                                    version: "Test string",
                                },
                                utcOffset: "Test string",
                                year: 42,
                            },
                        },
                        openFileList: {
                            entries: [
                                {
                                    command: "Test string",
                                    filePath: "Test string",
                                    fileType: "Test string",
                                    user: "Test string",
                                }
                            ],
                        },
                        processes: {
                            processes: [
                                {
                                    attributes: {
                                        A: "Test string"
                                    },
                                    cmdline: "Test string",
                                    exePath: "Test string",
                                    pid: "Test string",
                                    user: "Test string",
                                }
                            ],
                        },
                        services: {
                            services: [
                                {
                                    cmdline: "Test string",
                                    exePath: "Test string",
                                    name: "Test string",
                                    pid: "Test string",
                                    startMode: "Test string",
                                    state: "Test string",
                                    status: "Test string",
                                }
                            ],
                        },
                    },
                },
                memoryMb: 42,
                osFamily: "Test string",
                osName: "Test string",
                platform: {
                    vmwareDetails: {
                        esxVersion: "Test string",
                        osid: "Test string",
                        vcenterVersion: "Test string",
                    },
                },
                powerState: "Test string",
                vcenterFolder: "Test string",
                vcenterUrl: "Test string",
                vcenterVmId: "Test string",
                vmArchitecture: {
                    bios: {
                        biosManufacturer: "Test string",
                        biosName: "Test string",
                        biosReleaseDate: "Test string",
                        biosVersion: "Test string",
                        smbiosUuid: "Test string",
                    },
                    cpuArchitecture: "Test string",
                    cpuManufacturer: "Test string",
                    cpuName: "Test string",
                    cpuSocketCount: 42,
                    cpuThreadCount: 42,
                    firmware: "Test string",
                    hyperthreading: "Test string",
                    vendor: "Test string",
                },
                vmDisks: {
                    disks: {
                        entries: [
                            {
                                diskLabel: "Test string",
                                diskLabelType: "Test string",
                                hwAddress: "Test string",
                                interfaceType: "Test string",
                                partitions: {
                                    entries: [
                                        {
                                            capacityBytes: "Test string",
                                            fileSystem: "Test string",
                                            freeBytes: "Test string",
                                            mountPoint: "Test string",
                                            subPartitions: undefined,
                                            type: "Test string",
                                            uuid: "Test string",
                                        }
                                    ],
                                },
                                status: "Test string",
                                totalCapacityBytes: "Test string",
                                totalFreeBytes: "Test string",
                                vmwareConfig: {
                                    backingType: "Test string",
                                    rdmCompatibilityMode: "Test string",
                                    shared: true,
                                    vmdkDiskMode: "Test string",
                                },
                            }
                        ],
                    },
                    hddTotalCapacityBytes: "Test string",
                    hddTotalFreeBytes: "Test string",
                    lsblkJson: "Test string",
                },
                vmName: "Test string",
                vmNetwork: {
                    defaultGw: "Test string",
                    networkAdapters: {
                        networkAdapters: [
                            {
                                adapterType: "Test string",
                                addresses: {
                                    addresses: [
                                        {
                                            assignment: "Test string",
                                            bcast: "Test string",
                                            fqdn: "Test string",
                                            ipAddress: "Test string",
                                            subnetMask: "Test string",
                                        }
                                    ],
                                },
                                macAddress: "Test string",
                            }
                        ],
                    },
                    primaryIpAddress: "Test string",
                    primaryMacAddress: "Test string",
                },
                vmUuid: "Test string",
            },
        });
        /** Reports a set of frames. */
        await gapi.client.migrationcenter.projects.locations.assets.reportAssetFrames({
            parent: "Test string",
            source: "Test string",
        }, {
            framesData: [
                {
                    attributes: {
                        A: "Test string"
                    },
                    labels: {
                        A: "Test string"
                    },
                    performanceSamples: [
                        {
                            cpu: {
                                utilizedPercentage: 42,
                            },
                            disk: {
                                averageIops: 42,
                            },
                            memory: {
                                utilizedPercentage: 42,
                            },
                            network: {
                                averageEgressBps: 42,
                                averageIngressBps: 42,
                            },
                            sampleTime: "Test string",
                        }
                    ],
                    reportTime: "Test string",
                    traceToken: "Test string",
                    virtualMachineDetails: {
                        coreCount: 42,
                        guestOs: {
                            config: {
                                fstab: {
                                    entries: [
                                        {
                                            file: "Test string",
                                            freq: 42,
                                            mntops: "Test string",
                                            passno: 42,
                                            spec: "Test string",
                                            vfstype: "Test string",
                                        }
                                    ],
                                },
                                hosts: {
                                    entries: [
                                        {
                                            hostNames: [
                                                "Test string"
                                            ],
                                            ip: "Test string",
                                        }
                                    ],
                                },
                                issue: "Test string",
                                nfsExports: {
                                    entries: [
                                        {
                                            exportDirectory: "Test string",
                                            hosts: [
                                                "Test string"
                                            ],
                                        }
                                    ],
                                },
                                selinux: {
                                    enabled: true,
                                    mode: "Test string",
                                },
                            },
                            runtime: {
                                domain: "Test string",
                                installedApps: {
                                    entries: [
                                        {
                                            name: "Test string",
                                            path: "Test string",
                                            time: "Test string",
                                            vendor: "Test string",
                                            version: "Test string",
                                        }
                                    ],
                                },
                                lastUptime: {
                                    day: 42,
                                    month: 42,
                                    year: 42,
                                },
                                machineName: "Test string",
                                networkInfo: {
                                    connections: {
                                        entries: [
                                            {
                                                localIpAddress: "Test string",
                                                localPort: 42,
                                                pid: "Test string",
                                                processName: "Test string",
                                                protocol: "Test string",
                                                remoteIpAddress: "Test string",
                                                remotePort: 42,
                                                state: "Test string",
                                            }
                                        ],
                                    },
                                    netstat: "Test string",
                                    netstatTime: {
                                        day: 42,
                                        hours: 42,
                                        minutes: 42,
                                        month: 42,
                                        nanos: 42,
                                        seconds: 42,
                                        timeZone: {
                                            id: "Test string",
                                            version: "Test string",
                                        },
                                        utcOffset: "Test string",
                                        year: 42,
                                    },
                                },
                                openFileList: {
                                    entries: [
                                        {
                                            command: "Test string",
                                            filePath: "Test string",
                                            fileType: "Test string",
                                            user: "Test string",
                                        }
                                    ],
                                },
                                processes: {
                                    processes: [
                                        {
                                            attributes: {
                                                A: "Test string"
                                            },
                                            cmdline: "Test string",
                                            exePath: "Test string",
                                            pid: "Test string",
                                            user: "Test string",
                                        }
                                    ],
                                },
                                services: {
                                    services: [
                                        {
                                            cmdline: "Test string",
                                            exePath: "Test string",
                                            name: "Test string",
                                            pid: "Test string",
                                            startMode: "Test string",
                                            state: "Test string",
                                            status: "Test string",
                                        }
                                    ],
                                },
                            },
                        },
                        memoryMb: 42,
                        osFamily: "Test string",
                        osName: "Test string",
                        platform: {
                            vmwareDetails: {
                                esxVersion: "Test string",
                                osid: "Test string",
                                vcenterVersion: "Test string",
                            },
                        },
                        powerState: "Test string",
                        vcenterFolder: "Test string",
                        vcenterUrl: "Test string",
                        vcenterVmId: "Test string",
                        vmArchitecture: {
                            bios: {
                                biosManufacturer: "Test string",
                                biosName: "Test string",
                                biosReleaseDate: "Test string",
                                biosVersion: "Test string",
                                smbiosUuid: "Test string",
                            },
                            cpuArchitecture: "Test string",
                            cpuManufacturer: "Test string",
                            cpuName: "Test string",
                            cpuSocketCount: 42,
                            cpuThreadCount: 42,
                            firmware: "Test string",
                            hyperthreading: "Test string",
                            vendor: "Test string",
                        },
                        vmDisks: {
                            disks: {
                                entries: [
                                    {
                                        diskLabel: "Test string",
                                        diskLabelType: "Test string",
                                        hwAddress: "Test string",
                                        interfaceType: "Test string",
                                        partitions: {
                                            entries: [
                                                {
                                                    capacityBytes: "Test string",
                                                    fileSystem: "Test string",
                                                    freeBytes: "Test string",
                                                    mountPoint: "Test string",
                                                    subPartitions: undefined,
                                                    type: "Test string",
                                                    uuid: "Test string",
                                                }
                                            ],
                                        },
                                        status: "Test string",
                                        totalCapacityBytes: "Test string",
                                        totalFreeBytes: "Test string",
                                        vmwareConfig: {
                                            backingType: "Test string",
                                            rdmCompatibilityMode: "Test string",
                                            shared: true,
                                            vmdkDiskMode: "Test string",
                                        },
                                    }
                                ],
                            },
                            hddTotalCapacityBytes: "Test string",
                            hddTotalFreeBytes: "Test string",
                            lsblkJson: "Test string",
                        },
                        vmName: "Test string",
                        vmNetwork: {
                            defaultGw: "Test string",
                            networkAdapters: {
                                networkAdapters: [
                                    {
                                        adapterType: "Test string",
                                        addresses: {
                                            addresses: [
                                                {
                                                    assignment: "Test string",
                                                    bcast: "Test string",
                                                    fqdn: "Test string",
                                                    ipAddress: "Test string",
                                                    subnetMask: "Test string",
                                                }
                                            ],
                                        },
                                        macAddress: "Test string",
                                    }
                                ],
                            },
                            primaryIpAddress: "Test string",
                            primaryMacAddress: "Test string",
                        },
                        vmUuid: "Test string",
                    },
                }
            ],
        });
        /** Creates an import job. */
        await gapi.client.migrationcenter.projects.locations.importJobs.create({
            importJobId: "Test string",
            parent: "Test string",
            requestId: "Test string",
        }, {
            assetSource: "Test string",
            completeTime: "Test string",
            createTime: "Test string",
            executionReport: {
                executionErrors: {
                    fileValidations: [
                        {
                            fileErrors: [
                                {
                                    errorDetails: "Test string",
                                    severity: "Test string",
                                }
                            ],
                            fileName: "Test string",
                            partialReport: true,
                            rowErrors: [
                                {
                                    errors: [
                                        {
                                            errorDetails: "Test string",
                                            severity: "Test string",
                                        }
                                    ],
                                    rowNumber: 42,
                                    vmName: "Test string",
                                    vmUuid: "Test string",
                                }
                            ],
                        }
                    ],
                    jobErrors: [
                        {
                            errorDetails: "Test string",
                            severity: "Test string",
                        }
                    ],
                },
                framesReported: 42,
                jobErrors: [
                    {
                        errorDetails: "Test string",
                        severity: "Test string",
                    }
                ],
                totalRowsCount: 42,
            },
            gcsPayload: {
                format: "Test string",
                path: "Test string",
            },
            inlinePayload: {
                format: "Test string",
                payload: [
                    {
                        data: "Test string",
                        name: "Test string",
                    }
                ],
            },
            labels: {
                A: "Test string"
            },
            name: "Test string",
            state: "Test string",
            updateTime: "Test string",
            validationReport: {
                fileValidations: [
                    {
                        fileErrors: [
                            {
                                errorDetails: "Test string",
                                severity: "Test string",
                            }
                        ],
                        fileName: "Test string",
                        partialReport: true,
                        rowErrors: [
                            {
                                errors: [
                                    {
                                        errorDetails: "Test string",
                                        severity: "Test string",
                                    }
                                ],
                                rowNumber: 42,
                                vmName: "Test string",
                                vmUuid: "Test string",
                            }
                        ],
                    }
                ],
                jobErrors: [
                    {
                        errorDetails: "Test string",
                        severity: "Test string",
                    }
                ],
            },
        });
        /** Deletes an import job. */
        await gapi.client.migrationcenter.projects.locations.importJobs.delete({
            name: "Test string",
            requestId: "Test string",
        });
        /** Gets the details of an import job. */
        await gapi.client.migrationcenter.projects.locations.importJobs.get({
            name: "Test string",
            view: "Test string",
        });
        /** Lists all import jobs. */
        await gapi.client.migrationcenter.projects.locations.importJobs.list({
            filter: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
            view: "Test string",
        });
        /** Updates an import job. */
        await gapi.client.migrationcenter.projects.locations.importJobs.patch({
            name: "Test string",
            requestId: "Test string",
            updateMask: "Test string",
        }, {
            assetSource: "Test string",
            completeTime: "Test string",
            createTime: "Test string",
            executionReport: {
                executionErrors: {
                    fileValidations: [
                        {
                            fileErrors: [
                                {
                                    errorDetails: "Test string",
                                    severity: "Test string",
                                }
                            ],
                            fileName: "Test string",
                            partialReport: true,
                            rowErrors: [
                                {
                                    errors: [
                                        {
                                            errorDetails: "Test string",
                                            severity: "Test string",
                                        }
                                    ],
                                    rowNumber: 42,
                                    vmName: "Test string",
                                    vmUuid: "Test string",
                                }
                            ],
                        }
                    ],
                    jobErrors: [
                        {
                            errorDetails: "Test string",
                            severity: "Test string",
                        }
                    ],
                },
                framesReported: 42,
                jobErrors: [
                    {
                        errorDetails: "Test string",
                        severity: "Test string",
                    }
                ],
                totalRowsCount: 42,
            },
            gcsPayload: {
                format: "Test string",
                path: "Test string",
            },
            inlinePayload: {
                format: "Test string",
                payload: [
                    {
                        data: "Test string",
                        name: "Test string",
                    }
                ],
            },
            labels: {
                A: "Test string"
            },
            name: "Test string",
            state: "Test string",
            updateTime: "Test string",
            validationReport: {
                fileValidations: [
                    {
                        fileErrors: [
                            {
                                errorDetails: "Test string",
                                severity: "Test string",
                            }
                        ],
                        fileName: "Test string",
                        partialReport: true,
                        rowErrors: [
                            {
                                errors: [
                                    {
                                        errorDetails: "Test string",
                                        severity: "Test string",
                                    }
                                ],
                                rowNumber: 42,
                                vmName: "Test string",
                                vmUuid: "Test string",
                            }
                        ],
                    }
                ],
                jobErrors: [
                    {
                        errorDetails: "Test string",
                        severity: "Test string",
                    }
                ],
            },
        });
        /** Runs an import job. */
        await gapi.client.migrationcenter.projects.locations.importJobs.run({
            name: "Test string",
        }, {
            requestId: "Test string",
        });
        /** Validates an import job. */
        await gapi.client.migrationcenter.projects.locations.importJobs.validate({
            name: "Test string",
        }, {
            requestId: "Test string",
        });
        /**
         * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this
         * method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation
         * completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of
         * 1, corresponding to `Code.CANCELLED`.
         */
        await gapi.client.migrationcenter.projects.locations.operations.cancel({
            name: "Test string",
        }, {
        });
        /**
         * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support
         * this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
         */
        await gapi.client.migrationcenter.projects.locations.operations.delete({
            name: "Test string",
        });
        /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
        await gapi.client.migrationcenter.projects.locations.operations.get({
            name: "Test string",
        });
        /**
         * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to
         * override the binding to use different resource name schemes, such as `users/*‍/operations`. To override the binding, API services can add a binding such as
         * `"/v1/{name=users/*}/operations"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must
         * ensure the name binding is the parent resource, without the operations collection id.
         */
        await gapi.client.migrationcenter.projects.locations.operations.list({
            filter: "Test string",
            name: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Creates a new source in a given project and location. */
        await gapi.client.migrationcenter.projects.locations.sources.create({
            parent: "Test string",
            requestId: "Test string",
            sourceId: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            displayName: "Test string",
            isManaged: true,
            name: "Test string",
            pendingFrameCount: 42,
            priority: 42,
            type: "Test string",
            updateTime: "Test string",
        });
        /** Deletes a source. */
        await gapi.client.migrationcenter.projects.locations.sources.delete({
            name: "Test string",
            requestId: "Test string",
        });
        /** Gets the details of a source. */
        await gapi.client.migrationcenter.projects.locations.sources.get({
            name: "Test string",
        });
        /** Lists all the sources in a given project and location. */
        await gapi.client.migrationcenter.projects.locations.sources.list({
            filter: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates the parameters of a source. */
        await gapi.client.migrationcenter.projects.locations.sources.patch({
            name: "Test string",
            requestId: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            description: "Test string",
            displayName: "Test string",
            isManaged: true,
            name: "Test string",
            pendingFrameCount: 42,
            priority: 42,
            type: "Test string",
            updateTime: "Test string",
        });
    }
});
