/* Type definitions for non-npm package DoubleClick Bid Manager API v2 0.0 */
// Project: https://developers.google.com/bid-manager/
// Definitions by: Maxim Mazurok <https://github.com/Maxim-Mazurok>
//                 Nick Amoscato <https://github.com/namoscato>
//                 Declan Vong <https://github.com/declanvong>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped

// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
// Generated from: https://doubleclickbidmanager.googleapis.com/$discovery/rest?version=v2
// Revision: 20231219

/// <reference types="gapi.client" />

declare namespace gapi.client {
  /** Load DoubleClick Bid Manager API v2 */
  function load(
    urlOrObject: 'https://doubleclickbidmanager.googleapis.com/$discovery/rest?version=v2'
  ): Promise<void>;
  /** @deprecated Please load APIs with discovery documents. */
  function load(name: 'doubleclickbidmanager', version: 'v2'): Promise<void>;
  /** @deprecated Please load APIs with discovery documents. */
  function load(
    name: 'doubleclickbidmanager',
    version: 'v2',
    callback: () => any
  ): void;

  namespace doubleclickbidmanager {
    interface ChannelGrouping {
      /** The name to apply to an event that does not match any of the rules in the channel grouping. */
      fallbackName?: string;
      /** Channel Grouping name. */
      name?: string;
      /** Rules within Channel Grouping. There is a limit of 100 rules that can be set per channel grouping. */
      rules?: Rule[];
    }
    interface DataRange {
      /** The ending date for the data that is shown in the report. Note, `customEndDate` is required if `range` is `CUSTOM_DATES` and ignored otherwise. */
      customEndDate?: Date;
      /** The starting data for the data that is shown in the report. Note, `customStartDate` is required if `range` is `CUSTOM_DATES` and ignored otherwise. */
      customStartDate?: Date;
      /** Report data range used to generate the report. */
      range?: string;
    }
    interface Date {
      /** Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant. */
      day?: number;
      /** Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day. */
      month?: number;
      /** Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year. */
      year?: number;
    }
    interface DisjunctiveMatchStatement {
      /** Filters. There is a limit of 100 filters that can be set per disjunctive match statement. */
      eventFilters?: EventFilter[];
    }
    interface EventFilter {
      /** Filter on a dimension. */
      dimensionFilter?: PathQueryOptionsFilter;
    }
    interface FilterPair {
      /** Filter type. */
      type?: string;
      /** Filter value. */
      value?: string;
    }
    interface ListQueriesResponse {
      /** A token, which can be sent as page_token to retrieve the next page of queries. If this field is omitted, there are no subsequent pages. */
      nextPageToken?: string;
      /** The list of queries. */
      queries?: Query[];
    }
    interface ListReportsResponse {
      /** A token, which can be sent as page_token to retrieve the next page of reports. If this field is omitted, there are no subsequent pages. */
      nextPageToken?: string;
      /** Retrieved reports. */
      reports?: Report[];
    }
    interface Options {
      /** Set to true and filter your report by `FILTER_INSERTION_ORDER` or `FILTER_LINE_ITEM` to include data for audience lists specifically targeted by those items. */
      includeOnlyTargetedUserLists?: boolean;
      /** Options that contain Path Filters and Custom Channel Groupings. */
      pathQueryOptions?: PathQueryOptions;
    }
    interface Parameters {
      /** Filters used to match traffic data in your report. */
      filters?: FilterPair[];
      /** Data is grouped by the filters listed in this field. */
      groupBys?: string[];
      /** Metrics to include as columns in your report. */
      metrics?: string[];
      /** Additional query options. */
      options?: Options;
      /** The type of the report. The type of the report will dictate what dimesions, filters, and metrics can be used. */
      type?: string;
    }
    interface PathFilter {
      /** Filter on an event to be applied to some part of the path. */
      eventFilters?: EventFilter[];
      /** The position of the path the filter should match to (first, last, or any event in path). */
      pathMatchPosition?: string;
    }
    interface PathQueryOptions {
      /** Custom Channel Groupings. */
      channelGrouping?: ChannelGrouping;
      /** Path Filters. There is a limit of 100 path filters that can be set per report. */
      pathFilters?: PathFilter[];
    }
    interface PathQueryOptionsFilter {
      /** Dimension the filter is applied to. */
      filter?: string;
      /** Match logic of the filter. */
      match?: string;
      /** Values to filter on. */
      values?: string[];
    }
    interface Query {
      /** Query metadata. */
      metadata?: QueryMetadata;
      /** Query parameters. */
      params?: Parameters;
      /** Output only. Query ID. */
      queryId?: string;
      /** Information on how often and when to run a query. If `ONE_TIME` is set to the frequency field, the query will only be run at the time of creation. */
      schedule?: QuerySchedule;
    }
    interface QueryMetadata {
      /** Range of report data. All reports will be based on the same time zone as used by the advertiser. */
      dataRange?: DataRange;
      /** Format of the generated report. */
      format?: string;
      /** Whether to send an email notification when a report is ready. Defaults to false. */
      sendNotification?: boolean;
      /** List of email addresses which are sent email notifications when the report is finished. Separate from send_notification. */
      shareEmailAddress?: string[];
      /** Query title. It is used to name the reports generated from this query. */
      title?: string;
    }
    interface QuerySchedule {
      /** Date to periodically run the query until. Not applicable to `ONE_TIME` frequency. */
      endDate?: Date;
      /** How often the query is run. */
      frequency?: string;
      /** Canonical timezone code for report generation time. Defaults to `America/New_York`. */
      nextRunTimezoneCode?: string;
      /** When to start running the query. Not applicable to `ONE_TIME` frequency. */
      startDate?: Date;
    }
    interface Report {
      /** Key used to identify a report. */
      key?: ReportKey;
      /** Report metadata. */
      metadata?: ReportMetadata;
      /** Report parameters. */
      params?: Parameters;
    }
    interface ReportKey {
      /** Output only. Query ID. */
      queryId?: string;
      /** Output only. Report ID. */
      reportId?: string;
    }
    interface ReportMetadata {
      /** Output only. The path to the location in Google Cloud Storage where the report is stored. */
      googleCloudStoragePath?: string;
      /** The ending time for the data that is shown in the report. */
      reportDataEndDate?: Date;
      /** The starting time for the data that is shown in the report. */
      reportDataStartDate?: Date;
      /** Report status. */
      status?: ReportStatus;
    }
    interface ReportStatus {
      /** Output only. The time when this report either completed successfully or failed. */
      finishTime?: string;
      /** The file type of the report. */
      format?: string;
      /** Output only. The state of the report. */
      state?: string;
    }
    interface Rule {
      /** DisjunctiveMatchStatements within a Rule. DisjunctiveMatchStatement OR's all contained filters. */
      disjunctiveMatchStatements?: DisjunctiveMatchStatement[];
      /** Rule name. */
      name?: string;
    }
    interface RunQueryRequest {
      /** Report data range used to generate the report. If unspecified, the original parent query's data range is used. */
      dataRange?: DataRange;
    }
    interface ReportsResource {
      /** Retrieves a report. */
      get(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Required. ID of the query the report is associated with. */
        queryId: string;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Required. ID of the report to retrieve. */
        reportId: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<Report>;
      /** Lists reports associated with a query. */
      list(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Name of a field used to order results. The default sorting order is ascending. To specify descending order for a field, append a " desc" suffix. For example "key.reportId desc". Sorting is only supported for the following fields: * `key.reportId` */
        orderBy?: string;
        /** Maximum number of results per page. Must be between `1` and `100`. Defaults to `100` if unspecified. */
        pageSize?: number;
        /** A page token, received from a previous list call. Provide this to retrieve the subsequent page of reports. */
        pageToken?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Required. ID of the query with which the reports are associated. */
        queryId: string;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<ListReportsResponse>;
    }
    interface QueriesResource {
      /** Creates a query. */
      create(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: Query;
      }): Request<Query>;
      create(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: Query
      ): Request<Query>;
      /** Deletes a query as well as the associated reports. */
      delete(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Required. ID of query to delete. */
        queryId: string;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<void>;
      /** Retrieves a query. */
      get(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Required. ID of query to retrieve. */
        queryId: string;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<Query>;
      /** Lists queries created by the current user. */
      list(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Name of a field used to order results. The default sorting order is ascending. To specify descending order for a field, append a " desc" suffix. For example "metadata.title desc". Sorting is only supported for the following fields: * `queryId` * `metadata.title` */
        orderBy?: string;
        /** Maximum number of results per page. Must be between `1` and `100`. Defaults to `100` if unspecified. */
        pageSize?: number;
        /** A page token, received from a previous list call. Provide this to retrieve the subsequent page of queries. */
        pageToken?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<ListQueriesResponse>;
      /** Runs a stored query to generate a report. */
      run(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Required. ID of query to run. */
        queryId: string;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Whether the query should be run synchronously. When true, this method will not return until the query has finished running. When false or not specified, this method will return immediately. */
        synchronous?: boolean;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: RunQueryRequest;
      }): Request<Report>;
      run(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Required. ID of query to run. */
          queryId: string;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Whether the query should be run synchronously. When true, this method will not return until the query has finished running. When false or not specified, this method will return immediately. */
          synchronous?: boolean;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: RunQueryRequest
      ): Request<Report>;
      reports: ReportsResource;
    }

    const queries: QueriesResource;
  }
}
