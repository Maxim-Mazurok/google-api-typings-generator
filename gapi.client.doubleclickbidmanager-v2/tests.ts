/* This is stub file for gapi.client.doubleclickbidmanager-v2 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20250604

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://doubleclickbidmanager.googleapis.com/$discovery/rest?version=v2',
  );
  /** now we can use gapi.client.doubleclickbidmanager */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** View and manage your reports in DoubleClick Bid Manager */
    'https://www.googleapis.com/auth/doubleclickbidmanager',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Creates a new query. */
    await gapi.client.doubleclickbidmanager.queries.create(
      {},
      {
        metadata: {
          dataRange: {
            customEndDate: {
              day: 42,
              month: 42,
              year: 42,
            },
            customStartDate: {
              day: 42,
              month: 42,
              year: 42,
            },
            range: 'Test string',
          },
          format: 'Test string',
          sendNotification: true,
          shareEmailAddress: ['Test string'],
          title: 'Test string',
        },
        params: {
          filters: [
            {
              type: 'Test string',
              value: 'Test string',
            },
          ],
          groupBys: ['Test string'],
          metrics: ['Test string'],
          options: {
            includeOnlyTargetedUserLists: true,
          },
          type: 'Test string',
        },
        queryId: 'Test string',
        schedule: {
          endDate: {
            day: 42,
            month: 42,
            year: 42,
          },
          frequency: 'Test string',
          nextRunTimezoneCode: 'Test string',
          startDate: {
            day: 42,
            month: 42,
            year: 42,
          },
        },
      },
    );
    /** Deletes an existing query as well as its generated reports. */
    await gapi.client.doubleclickbidmanager.queries.delete({
      queryId: 'Test string',
    });
    /** Retrieves a query. */
    await gapi.client.doubleclickbidmanager.queries.get({
      queryId: 'Test string',
    });
    /** Lists queries created by the current user. */
    await gapi.client.doubleclickbidmanager.queries.list({
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Runs an existing query to generate a report. */
    await gapi.client.doubleclickbidmanager.queries.run(
      {
        queryId: 'Test string',
        synchronous: true,
      },
      {
        dataRange: {
          customEndDate: {
            day: 42,
            month: 42,
            year: 42,
          },
          customStartDate: {
            day: 42,
            month: 42,
            year: 42,
          },
          range: 'Test string',
        },
      },
    );
    /** Retrieves a report. */
    await gapi.client.doubleclickbidmanager.queries.reports.get({
      queryId: 'Test string',
      reportId: 'Test string',
    });
    /** Lists reports generated by the provided query. */
    await gapi.client.doubleclickbidmanager.queries.reports.list({
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      queryId: 'Test string',
    });
  }
});
