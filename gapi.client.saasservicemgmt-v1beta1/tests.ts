/* This is stub file for gapi.client.saasservicemgmt-v1beta1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20250924

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://saasservicemgmt.googleapis.com/$discovery/rest?version=v1beta1',
  );
  /** now we can use gapi.client.saasservicemgmt */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
    'https://www.googleapis.com/auth/cloud-platform',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Gets information about a location. */
    await gapi.client.saasservicemgmt.projects.locations.get({
      name: 'Test string',
    });
    /** Lists information about the supported locations for this service. */
    await gapi.client.saasservicemgmt.projects.locations.list({
      extraLocationTypes: 'Test string',
      filter: 'Test string',
      name: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Create a new release. */
    await gapi.client.saasservicemgmt.projects.locations.releases.create(
      {
        parent: 'Test string',
        releaseId: 'Test string',
        requestId: 'Test string',
        validateOnly: true,
      },
      {
        annotations: {
          A: 'Test string',
        },
        blueprint: {
          engine: 'Test string',
          package: 'Test string',
          version: 'Test string',
        },
        createTime: 'Test string',
        etag: 'Test string',
        inputVariableDefaults: [
          {
            type: 'Test string',
            value: 'Test string',
            variable: 'Test string',
          },
        ],
        inputVariables: [
          {
            type: 'Test string',
            value: 'Test string',
            variable: 'Test string',
          },
        ],
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        outputVariables: [
          {
            type: 'Test string',
            value: 'Test string',
            variable: 'Test string',
          },
        ],
        releaseRequirements: {
          upgradeableFromReleases: ['Test string'],
        },
        uid: 'Test string',
        unitKind: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Delete a single release. */
    await gapi.client.saasservicemgmt.projects.locations.releases.delete({
      etag: 'Test string',
      name: 'Test string',
      requestId: 'Test string',
      validateOnly: true,
    });
    /** Retrieve a single release. */
    await gapi.client.saasservicemgmt.projects.locations.releases.get({
      name: 'Test string',
    });
    /** Retrieve a collection of releases. */
    await gapi.client.saasservicemgmt.projects.locations.releases.list({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Update a single release. */
    await gapi.client.saasservicemgmt.projects.locations.releases.patch(
      {
        name: 'Test string',
        requestId: 'Test string',
        updateMask: 'Test string',
        validateOnly: true,
      },
      {
        annotations: {
          A: 'Test string',
        },
        blueprint: {
          engine: 'Test string',
          package: 'Test string',
          version: 'Test string',
        },
        createTime: 'Test string',
        etag: 'Test string',
        inputVariableDefaults: [
          {
            type: 'Test string',
            value: 'Test string',
            variable: 'Test string',
          },
        ],
        inputVariables: [
          {
            type: 'Test string',
            value: 'Test string',
            variable: 'Test string',
          },
        ],
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        outputVariables: [
          {
            type: 'Test string',
            value: 'Test string',
            variable: 'Test string',
          },
        ],
        releaseRequirements: {
          upgradeableFromReleases: ['Test string'],
        },
        uid: 'Test string',
        unitKind: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Create a new replication internal. */
    await gapi.client.saasservicemgmt.projects.locations.replicationsInternal.create(
      {
        parent: 'Test string',
        replicationInternalId: 'Test string',
        requestId: 'Test string',
        validateOnly: true,
      },
      {
        annotations: {
          A: 'Test string',
        },
        createTime: 'Test string',
        etag: 'Test string',
        labels: {
          A: 'Test string',
        },
        maxRetryCount: 42,
        name: 'Test string',
        payload: {
          A: 42,
        },
        state: 'Test string',
        stats: {
          A: {
            errors: [
              {
                code: 42,
                details: [
                  {
                    A: 42,
                  },
                ],
                message: 'Test string',
              },
            ],
            failedResources: ['Test string'],
            finishedResources: ['Test string'],
            pendingResources: ['Test string'],
            retryCount: [42],
          },
        },
        targetLocations: ['Test string'],
        uid: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Delete a single replication internal. */
    await gapi.client.saasservicemgmt.projects.locations.replicationsInternal.delete(
      {
        etag: 'Test string',
        name: 'Test string',
        requestId: 'Test string',
        validateOnly: true,
      },
    );
    /** Retrieve a single replication internal. */
    await gapi.client.saasservicemgmt.projects.locations.replicationsInternal.get(
      {
        name: 'Test string',
      },
    );
    /** Retrieve a collection of replication internals. */
    await gapi.client.saasservicemgmt.projects.locations.replicationsInternal.list(
      {
        filter: 'Test string',
        orderBy: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
    /** Update a single replication internal. */
    await gapi.client.saasservicemgmt.projects.locations.replicationsInternal.patch(
      {
        etag: 'Test string',
        name: 'Test string',
        requestId: 'Test string',
        updateMask: 'Test string',
        validateOnly: true,
      },
      {
        annotations: {
          A: 'Test string',
        },
        createTime: 'Test string',
        etag: 'Test string',
        labels: {
          A: 'Test string',
        },
        maxRetryCount: 42,
        name: 'Test string',
        payload: {
          A: 42,
        },
        state: 'Test string',
        stats: {
          A: {
            errors: [
              {
                code: 42,
                details: [
                  {
                    A: 42,
                  },
                ],
                message: 'Test string',
              },
            ],
            failedResources: ['Test string'],
            finishedResources: ['Test string'],
            pendingResources: ['Test string'],
            retryCount: [42],
          },
        },
        targetLocations: ['Test string'],
        uid: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Create a new rollout kind. */
    await gapi.client.saasservicemgmt.projects.locations.rolloutKinds.create(
      {
        parent: 'Test string',
        requestId: 'Test string',
        rolloutKindId: 'Test string',
        validateOnly: true,
      },
      {
        annotations: {
          A: 'Test string',
        },
        createTime: 'Test string',
        errorBudget: {
          allowedCount: 42,
          allowedPercentage: 42,
        },
        etag: 'Test string',
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        rolloutOrchestrationStrategy: 'Test string',
        uid: 'Test string',
        unitFilter: 'Test string',
        unitKind: 'Test string',
        updateTime: 'Test string',
        updateUnitKindStrategy: 'Test string',
      },
    );
    /** Delete a single rollout kind. */
    await gapi.client.saasservicemgmt.projects.locations.rolloutKinds.delete({
      etag: 'Test string',
      name: 'Test string',
      requestId: 'Test string',
      validateOnly: true,
    });
    /** Retrieve a single rollout kind. */
    await gapi.client.saasservicemgmt.projects.locations.rolloutKinds.get({
      name: 'Test string',
    });
    /** Retrieve a collection of rollout kinds. */
    await gapi.client.saasservicemgmt.projects.locations.rolloutKinds.list({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Update a single rollout kind. */
    await gapi.client.saasservicemgmt.projects.locations.rolloutKinds.patch(
      {
        name: 'Test string',
        requestId: 'Test string',
        updateMask: 'Test string',
        validateOnly: true,
      },
      {
        annotations: {
          A: 'Test string',
        },
        createTime: 'Test string',
        errorBudget: {
          allowedCount: 42,
          allowedPercentage: 42,
        },
        etag: 'Test string',
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        rolloutOrchestrationStrategy: 'Test string',
        uid: 'Test string',
        unitFilter: 'Test string',
        unitKind: 'Test string',
        updateTime: 'Test string',
        updateUnitKindStrategy: 'Test string',
      },
    );
    /** Create a new rollout. */
    await gapi.client.saasservicemgmt.projects.locations.rollouts.create(
      {
        parent: 'Test string',
        requestId: 'Test string',
        rolloutId: 'Test string',
        validateOnly: true,
      },
      {
        annotations: {
          A: 'Test string',
        },
        control: {
          action: 'Test string',
          runParams: {
            retryFailedOperations: true,
          },
        },
        createTime: 'Test string',
        endTime: 'Test string',
        etag: 'Test string',
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        parentRollout: 'Test string',
        release: 'Test string',
        rolloutKind: 'Test string',
        rolloutOrchestrationStrategy: 'Test string',
        rootRollout: 'Test string',
        startTime: 'Test string',
        state: 'Test string',
        stateMessage: 'Test string',
        stateTransitionTime: 'Test string',
        stats: {
          operationsByState: [
            {
              count: 42,
              group: 'Test string',
            },
          ],
        },
        uid: 'Test string',
        unitFilter: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Delete a single rollout. */
    await gapi.client.saasservicemgmt.projects.locations.rollouts.delete({
      etag: 'Test string',
      name: 'Test string',
      requestId: 'Test string',
      validateOnly: true,
    });
    /** Retrieve a single rollout. */
    await gapi.client.saasservicemgmt.projects.locations.rollouts.get({
      name: 'Test string',
    });
    /** Retrieve a collection of rollouts. */
    await gapi.client.saasservicemgmt.projects.locations.rollouts.list({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Update a single rollout. */
    await gapi.client.saasservicemgmt.projects.locations.rollouts.patch(
      {
        name: 'Test string',
        requestId: 'Test string',
        updateMask: 'Test string',
        validateOnly: true,
      },
      {
        annotations: {
          A: 'Test string',
        },
        control: {
          action: 'Test string',
          runParams: {
            retryFailedOperations: true,
          },
        },
        createTime: 'Test string',
        endTime: 'Test string',
        etag: 'Test string',
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        parentRollout: 'Test string',
        release: 'Test string',
        rolloutKind: 'Test string',
        rolloutOrchestrationStrategy: 'Test string',
        rootRollout: 'Test string',
        startTime: 'Test string',
        state: 'Test string',
        stateMessage: 'Test string',
        stateTransitionTime: 'Test string',
        stats: {
          operationsByState: [
            {
              count: 42,
              group: 'Test string',
            },
          ],
        },
        uid: 'Test string',
        unitFilter: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Create a new saas. */
    await gapi.client.saasservicemgmt.projects.locations.saas.create(
      {
        parent: 'Test string',
        requestId: 'Test string',
        saasId: 'Test string',
        validateOnly: true,
      },
      {
        annotations: {
          A: 'Test string',
        },
        createTime: 'Test string',
        etag: 'Test string',
        labels: {
          A: 'Test string',
        },
        locations: [
          {
            name: 'Test string',
          },
        ],
        name: 'Test string',
        uid: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Delete a single saas. */
    await gapi.client.saasservicemgmt.projects.locations.saas.delete({
      etag: 'Test string',
      name: 'Test string',
      requestId: 'Test string',
      validateOnly: true,
    });
    /** Retrieve a single saas. */
    await gapi.client.saasservicemgmt.projects.locations.saas.get({
      name: 'Test string',
    });
    /** Retrieve a collection of saas. */
    await gapi.client.saasservicemgmt.projects.locations.saas.list({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Update a single saas. */
    await gapi.client.saasservicemgmt.projects.locations.saas.patch(
      {
        name: 'Test string',
        requestId: 'Test string',
        updateMask: 'Test string',
        validateOnly: true,
      },
      {
        annotations: {
          A: 'Test string',
        },
        createTime: 'Test string',
        etag: 'Test string',
        labels: {
          A: 'Test string',
        },
        locations: [
          {
            name: 'Test string',
          },
        ],
        name: 'Test string',
        uid: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Create a new tenant. */
    await gapi.client.saasservicemgmt.projects.locations.tenants.create(
      {
        parent: 'Test string',
        requestId: 'Test string',
        tenantId: 'Test string',
        validateOnly: true,
      },
      {
        annotations: {
          A: 'Test string',
        },
        consumerResource: 'Test string',
        createTime: 'Test string',
        etag: 'Test string',
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        saas: 'Test string',
        uid: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Delete a single tenant. */
    await gapi.client.saasservicemgmt.projects.locations.tenants.delete({
      etag: 'Test string',
      name: 'Test string',
      requestId: 'Test string',
      validateOnly: true,
    });
    /** Retrieve a single tenant. */
    await gapi.client.saasservicemgmt.projects.locations.tenants.get({
      name: 'Test string',
    });
    /** Retrieve a collection of tenants. */
    await gapi.client.saasservicemgmt.projects.locations.tenants.list({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Update a single tenant. */
    await gapi.client.saasservicemgmt.projects.locations.tenants.patch(
      {
        name: 'Test string',
        requestId: 'Test string',
        updateMask: 'Test string',
        validateOnly: true,
      },
      {
        annotations: {
          A: 'Test string',
        },
        consumerResource: 'Test string',
        createTime: 'Test string',
        etag: 'Test string',
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        saas: 'Test string',
        uid: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Create a new unit kind. */
    await gapi.client.saasservicemgmt.projects.locations.unitKinds.create(
      {
        parent: 'Test string',
        requestId: 'Test string',
        unitKindId: 'Test string',
        validateOnly: true,
      },
      {
        annotations: {
          A: 'Test string',
        },
        createTime: 'Test string',
        defaultRelease: 'Test string',
        dependencies: [
          {
            alias: 'Test string',
            unitKind: 'Test string',
          },
        ],
        etag: 'Test string',
        inputVariableMappings: [
          {
            from: {
              dependency: 'Test string',
              outputVariable: 'Test string',
            },
            to: {
              dependency: 'Test string',
              ignoreForLookup: true,
              inputVariable: 'Test string',
            },
            variable: 'Test string',
          },
        ],
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        outputVariableMappings: [
          {
            from: {
              dependency: 'Test string',
              outputVariable: 'Test string',
            },
            to: {
              dependency: 'Test string',
              ignoreForLookup: true,
              inputVariable: 'Test string',
            },
            variable: 'Test string',
          },
        ],
        saas: 'Test string',
        uid: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Delete a single unit kind. */
    await gapi.client.saasservicemgmt.projects.locations.unitKinds.delete({
      etag: 'Test string',
      name: 'Test string',
      requestId: 'Test string',
      validateOnly: true,
    });
    /** Retrieve a single unit kind. */
    await gapi.client.saasservicemgmt.projects.locations.unitKinds.get({
      name: 'Test string',
    });
    /** Retrieve a collection of unit kinds. */
    await gapi.client.saasservicemgmt.projects.locations.unitKinds.list({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Update a single unit kind. */
    await gapi.client.saasservicemgmt.projects.locations.unitKinds.patch(
      {
        name: 'Test string',
        requestId: 'Test string',
        updateMask: 'Test string',
        validateOnly: true,
      },
      {
        annotations: {
          A: 'Test string',
        },
        createTime: 'Test string',
        defaultRelease: 'Test string',
        dependencies: [
          {
            alias: 'Test string',
            unitKind: 'Test string',
          },
        ],
        etag: 'Test string',
        inputVariableMappings: [
          {
            from: {
              dependency: 'Test string',
              outputVariable: 'Test string',
            },
            to: {
              dependency: 'Test string',
              ignoreForLookup: true,
              inputVariable: 'Test string',
            },
            variable: 'Test string',
          },
        ],
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        outputVariableMappings: [
          {
            from: {
              dependency: 'Test string',
              outputVariable: 'Test string',
            },
            to: {
              dependency: 'Test string',
              ignoreForLookup: true,
              inputVariable: 'Test string',
            },
            variable: 'Test string',
          },
        ],
        saas: 'Test string',
        uid: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Create a new unit operation. */
    await gapi.client.saasservicemgmt.projects.locations.unitOperations.create(
      {
        parent: 'Test string',
        requestId: 'Test string',
        unitOperationId: 'Test string',
        validateOnly: true,
      },
      {
        annotations: {
          A: 'Test string',
        },
        cancel: true,
        conditions: [
          {
            lastTransitionTime: 'Test string',
            message: 'Test string',
            reason: 'Test string',
            status: 'Test string',
            type: 'Test string',
          },
        ],
        createTime: 'Test string',
        deprovision: {},
        engineState: 'Test string',
        errorCategory: 'Test string',
        etag: 'Test string',
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        parentUnitOperation: 'Test string',
        provision: {
          inputVariables: [
            {
              type: 'Test string',
              value: 'Test string',
              variable: 'Test string',
            },
          ],
          release: 'Test string',
        },
        rollout: 'Test string',
        schedule: {
          startTime: 'Test string',
        },
        state: 'Test string',
        uid: 'Test string',
        unit: 'Test string',
        updateTime: 'Test string',
        upgrade: {
          inputVariables: [
            {
              type: 'Test string',
              value: 'Test string',
              variable: 'Test string',
            },
          ],
          release: 'Test string',
        },
      },
    );
    /** Delete a single unit operation. */
    await gapi.client.saasservicemgmt.projects.locations.unitOperations.delete({
      etag: 'Test string',
      name: 'Test string',
      requestId: 'Test string',
      validateOnly: true,
    });
    /** Retrieve a single unit operation. */
    await gapi.client.saasservicemgmt.projects.locations.unitOperations.get({
      name: 'Test string',
    });
    /** Retrieve a collection of unit operations. */
    await gapi.client.saasservicemgmt.projects.locations.unitOperations.list({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Update a single unit operation. */
    await gapi.client.saasservicemgmt.projects.locations.unitOperations.patch(
      {
        name: 'Test string',
        requestId: 'Test string',
        updateMask: 'Test string',
        validateOnly: true,
      },
      {
        annotations: {
          A: 'Test string',
        },
        cancel: true,
        conditions: [
          {
            lastTransitionTime: 'Test string',
            message: 'Test string',
            reason: 'Test string',
            status: 'Test string',
            type: 'Test string',
          },
        ],
        createTime: 'Test string',
        deprovision: {},
        engineState: 'Test string',
        errorCategory: 'Test string',
        etag: 'Test string',
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        parentUnitOperation: 'Test string',
        provision: {
          inputVariables: [
            {
              type: 'Test string',
              value: 'Test string',
              variable: 'Test string',
            },
          ],
          release: 'Test string',
        },
        rollout: 'Test string',
        schedule: {
          startTime: 'Test string',
        },
        state: 'Test string',
        uid: 'Test string',
        unit: 'Test string',
        updateTime: 'Test string',
        upgrade: {
          inputVariables: [
            {
              type: 'Test string',
              value: 'Test string',
              variable: 'Test string',
            },
          ],
          release: 'Test string',
        },
      },
    );
    /** Create a new unit. */
    await gapi.client.saasservicemgmt.projects.locations.units.create(
      {
        parent: 'Test string',
        requestId: 'Test string',
        unitId: 'Test string',
        validateOnly: true,
      },
      {
        annotations: {
          A: 'Test string',
        },
        conditions: [
          {
            lastTransitionTime: 'Test string',
            message: 'Test string',
            reason: 'Test string',
            status: 'Test string',
            type: 'Test string',
          },
        ],
        createTime: 'Test string',
        dependencies: [
          {
            alias: 'Test string',
            unit: 'Test string',
          },
        ],
        dependents: [
          {
            alias: 'Test string',
            unit: 'Test string',
          },
        ],
        etag: 'Test string',
        inputVariables: [
          {
            type: 'Test string',
            value: 'Test string',
            variable: 'Test string',
          },
        ],
        labels: {
          A: 'Test string',
        },
        maintenance: {
          pinnedUntilTime: 'Test string',
        },
        managementMode: 'Test string',
        name: 'Test string',
        ongoingOperations: ['Test string'],
        outputVariables: [
          {
            type: 'Test string',
            value: 'Test string',
            variable: 'Test string',
          },
        ],
        pendingOperations: ['Test string'],
        release: 'Test string',
        scheduledOperations: ['Test string'],
        state: 'Test string',
        systemCleanupAt: 'Test string',
        systemManagedState: 'Test string',
        tenant: 'Test string',
        uid: 'Test string',
        unitKind: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Delete a single unit. */
    await gapi.client.saasservicemgmt.projects.locations.units.delete({
      etag: 'Test string',
      name: 'Test string',
      requestId: 'Test string',
      validateOnly: true,
    });
    /** Retrieve a single unit. */
    await gapi.client.saasservicemgmt.projects.locations.units.get({
      name: 'Test string',
    });
    /** Retrieve a collection of units. */
    await gapi.client.saasservicemgmt.projects.locations.units.list({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Update a single unit. */
    await gapi.client.saasservicemgmt.projects.locations.units.patch(
      {
        name: 'Test string',
        requestId: 'Test string',
        updateMask: 'Test string',
        validateOnly: true,
      },
      {
        annotations: {
          A: 'Test string',
        },
        conditions: [
          {
            lastTransitionTime: 'Test string',
            message: 'Test string',
            reason: 'Test string',
            status: 'Test string',
            type: 'Test string',
          },
        ],
        createTime: 'Test string',
        dependencies: [
          {
            alias: 'Test string',
            unit: 'Test string',
          },
        ],
        dependents: [
          {
            alias: 'Test string',
            unit: 'Test string',
          },
        ],
        etag: 'Test string',
        inputVariables: [
          {
            type: 'Test string',
            value: 'Test string',
            variable: 'Test string',
          },
        ],
        labels: {
          A: 'Test string',
        },
        maintenance: {
          pinnedUntilTime: 'Test string',
        },
        managementMode: 'Test string',
        name: 'Test string',
        ongoingOperations: ['Test string'],
        outputVariables: [
          {
            type: 'Test string',
            value: 'Test string',
            variable: 'Test string',
          },
        ],
        pendingOperations: ['Test string'],
        release: 'Test string',
        scheduledOperations: ['Test string'],
        state: 'Test string',
        systemCleanupAt: 'Test string',
        systemManagedState: 'Test string',
        tenant: 'Test string',
        uid: 'Test string',
        unitKind: 'Test string',
        updateTime: 'Test string',
      },
    );
  }
});
