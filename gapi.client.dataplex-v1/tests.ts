/* This is stub file for gapi.client.dataplex-v1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20250116

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://dataplex.googleapis.com/$discovery/rest?version=v1',
  );
  /** now we can use gapi.client.dataplex */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
    'https://www.googleapis.com/auth/cloud-platform',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
    await gapi.client.dataplex.organizations.locations.encryptionConfigs.getIamPolicy(
      {
        'options.requestedPolicyVersion': 42,
        resource: 'Test string',
      },
    );
    /** Sets the access control policy on the specified resource. Replaces any existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and PERMISSION_DENIED errors. */
    await gapi.client.dataplex.organizations.locations.encryptionConfigs.setIamPolicy(
      {
        resource: 'Test string',
      },
      {
        policy: {
          auditConfigs: [
            {
              auditLogConfigs: [
                {
                  exemptedMembers: ['Test string'],
                  logType: 'Test string',
                },
              ],
              service: 'Test string',
            },
          ],
          bindings: [
            {
              condition: {
                description: 'Test string',
                expression: 'Test string',
                location: 'Test string',
                title: 'Test string',
              },
              members: ['Test string'],
              role: 'Test string',
            },
          ],
          etag: 'Test string',
          version: 42,
        },
        updateMask: 'Test string',
      },
    );
    /** Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error.Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning. */
    await gapi.client.dataplex.organizations.locations.encryptionConfigs.testIamPermissions(
      {
        resource: 'Test string',
      },
      {
        permissions: ['Test string'],
      },
    );
    /** Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns google.rpc.Code.UNIMPLEMENTED. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to Code.CANCELLED. */
    await gapi.client.dataplex.organizations.locations.operations.cancel(
      {
        name: 'Test string',
      },
      {},
    );
    /** Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns google.rpc.Code.UNIMPLEMENTED. */
    await gapi.client.dataplex.organizations.locations.operations.delete({
      name: 'Test string',
    });
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.dataplex.organizations.locations.operations.get({
      name: 'Test string',
    });
    /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns UNIMPLEMENTED. */
    await gapi.client.dataplex.organizations.locations.operations.listOperations(
      {
        filter: 'Test string',
        name: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
      },
    );
    /** Gets information about a location. */
    await gapi.client.dataplex.projects.locations.get({
      name: 'Test string',
    });
    /** Lists information about the supported locations for this service. */
    await gapi.client.dataplex.projects.locations.list({
      filter: 'Test string',
      name: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Looks up a single Entry by name using the permission on the source system.Caution: The BigQuery metadata that is stored in Dataplex Catalog is changing. For more information, see Changes to BigQuery metadata stored in Dataplex Catalog (https://cloud.google.com/dataplex/docs/biqquery-metadata-changes). */
    await gapi.client.dataplex.projects.locations.lookupEntry({
      aspectTypes: 'Test string',
      entry: 'Test string',
      name: 'Test string',
      paths: 'Test string',
      view: 'Test string',
    });
    /** Searches for Entries matching the given query and scope. */
    await gapi.client.dataplex.projects.locations.searchEntries({
      name: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      query: 'Test string',
      scope: 'Test string',
    });
    /** Creates an AspectType. */
    await gapi.client.dataplex.projects.locations.aspectTypes.create(
      {
        aspectTypeId: 'Test string',
        parent: 'Test string',
        validateOnly: true,
      },
      {
        authorization: {
          alternateUsePermission: 'Test string',
        },
        createTime: 'Test string',
        description: 'Test string',
        displayName: 'Test string',
        etag: 'Test string',
        labels: {
          A: 'Test string',
        },
        metadataTemplate: {
          annotations: {
            deprecated: 'Test string',
            description: 'Test string',
            displayName: 'Test string',
            displayOrder: 42,
            stringType: 'Test string',
            stringValues: ['Test string'],
          },
          arrayItems: undefined,
          constraints: {
            required: true,
          },
          enumValues: [
            {
              deprecated: 'Test string',
              index: 42,
              name: 'Test string',
            },
          ],
          index: 42,
          mapItems: undefined,
          name: 'Test string',
          recordFields: undefined,
          type: 'Test string',
          typeId: 'Test string',
          typeRef: 'Test string',
        },
        name: 'Test string',
        transferStatus: 'Test string',
        uid: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Deletes an AspectType. */
    await gapi.client.dataplex.projects.locations.aspectTypes.delete({
      etag: 'Test string',
      name: 'Test string',
    });
    /** Gets an AspectType. */
    await gapi.client.dataplex.projects.locations.aspectTypes.get({
      name: 'Test string',
    });
    /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
    await gapi.client.dataplex.projects.locations.aspectTypes.getIamPolicy({
      'options.requestedPolicyVersion': 42,
      resource: 'Test string',
    });
    /** Lists AspectType resources in a project and location. */
    await gapi.client.dataplex.projects.locations.aspectTypes.list({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates an AspectType. */
    await gapi.client.dataplex.projects.locations.aspectTypes.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
        validateOnly: true,
      },
      {
        authorization: {
          alternateUsePermission: 'Test string',
        },
        createTime: 'Test string',
        description: 'Test string',
        displayName: 'Test string',
        etag: 'Test string',
        labels: {
          A: 'Test string',
        },
        metadataTemplate: {
          annotations: {
            deprecated: 'Test string',
            description: 'Test string',
            displayName: 'Test string',
            displayOrder: 42,
            stringType: 'Test string',
            stringValues: ['Test string'],
          },
          arrayItems: undefined,
          constraints: {
            required: true,
          },
          enumValues: [
            {
              deprecated: 'Test string',
              index: 42,
              name: 'Test string',
            },
          ],
          index: 42,
          mapItems: undefined,
          name: 'Test string',
          recordFields: undefined,
          type: 'Test string',
          typeId: 'Test string',
          typeRef: 'Test string',
        },
        name: 'Test string',
        transferStatus: 'Test string',
        uid: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Sets the access control policy on the specified resource. Replaces any existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and PERMISSION_DENIED errors. */
    await gapi.client.dataplex.projects.locations.aspectTypes.setIamPolicy(
      {
        resource: 'Test string',
      },
      {
        policy: {
          auditConfigs: [
            {
              auditLogConfigs: [
                {
                  exemptedMembers: ['Test string'],
                  logType: 'Test string',
                },
              ],
              service: 'Test string',
            },
          ],
          bindings: [
            {
              condition: {
                description: 'Test string',
                expression: 'Test string',
                location: 'Test string',
                title: 'Test string',
              },
              members: ['Test string'],
              role: 'Test string',
            },
          ],
          etag: 'Test string',
          version: 42,
        },
        updateMask: 'Test string',
      },
    );
    /** Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error.Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning. */
    await gapi.client.dataplex.projects.locations.aspectTypes.testIamPermissions(
      {
        resource: 'Test string',
      },
      {
        permissions: ['Test string'],
      },
    );
    /** Create a DataAttributeBinding resource. */
    await gapi.client.dataplex.projects.locations.dataAttributeBindings.create(
      {
        dataAttributeBindingId: 'Test string',
        parent: 'Test string',
        validateOnly: true,
      },
      {
        attributes: ['Test string'],
        createTime: 'Test string',
        description: 'Test string',
        displayName: 'Test string',
        etag: 'Test string',
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        paths: [
          {
            attributes: ['Test string'],
            name: 'Test string',
          },
        ],
        resource: 'Test string',
        uid: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Deletes a DataAttributeBinding resource. All attributes within the DataAttributeBinding must be deleted before the DataAttributeBinding can be deleted. */
    await gapi.client.dataplex.projects.locations.dataAttributeBindings.delete({
      etag: 'Test string',
      name: 'Test string',
    });
    /** Retrieves a DataAttributeBinding resource. */
    await gapi.client.dataplex.projects.locations.dataAttributeBindings.get({
      name: 'Test string',
    });
    /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
    await gapi.client.dataplex.projects.locations.dataAttributeBindings.getIamPolicy(
      {
        'options.requestedPolicyVersion': 42,
        resource: 'Test string',
      },
    );
    /** Lists DataAttributeBinding resources in a project and location. */
    await gapi.client.dataplex.projects.locations.dataAttributeBindings.list({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates a DataAttributeBinding resource. */
    await gapi.client.dataplex.projects.locations.dataAttributeBindings.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
        validateOnly: true,
      },
      {
        attributes: ['Test string'],
        createTime: 'Test string',
        description: 'Test string',
        displayName: 'Test string',
        etag: 'Test string',
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        paths: [
          {
            attributes: ['Test string'],
            name: 'Test string',
          },
        ],
        resource: 'Test string',
        uid: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Sets the access control policy on the specified resource. Replaces any existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and PERMISSION_DENIED errors. */
    await gapi.client.dataplex.projects.locations.dataAttributeBindings.setIamPolicy(
      {
        resource: 'Test string',
      },
      {
        policy: {
          auditConfigs: [
            {
              auditLogConfigs: [
                {
                  exemptedMembers: ['Test string'],
                  logType: 'Test string',
                },
              ],
              service: 'Test string',
            },
          ],
          bindings: [
            {
              condition: {
                description: 'Test string',
                expression: 'Test string',
                location: 'Test string',
                title: 'Test string',
              },
              members: ['Test string'],
              role: 'Test string',
            },
          ],
          etag: 'Test string',
          version: 42,
        },
        updateMask: 'Test string',
      },
    );
    /** Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error.Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning. */
    await gapi.client.dataplex.projects.locations.dataAttributeBindings.testIamPermissions(
      {
        resource: 'Test string',
      },
      {
        permissions: ['Test string'],
      },
    );
    /** Creates a DataScan resource. */
    await gapi.client.dataplex.projects.locations.dataScans.create(
      {
        dataScanId: 'Test string',
        parent: 'Test string',
        validateOnly: true,
      },
      {
        createTime: 'Test string',
        data: {
          entity: 'Test string',
          resource: 'Test string',
        },
        dataDiscoveryResult: {
          bigqueryPublishing: {
            dataset: 'Test string',
          },
        },
        dataDiscoverySpec: {
          bigqueryPublishingConfig: {
            connection: 'Test string',
            tableType: 'Test string',
          },
          storageConfig: {
            csvOptions: {
              delimiter: 'Test string',
              encoding: 'Test string',
              headerRows: 42,
              quote: 'Test string',
              typeInferenceDisabled: true,
            },
            excludePatterns: ['Test string'],
            includePatterns: ['Test string'],
            jsonOptions: {
              encoding: 'Test string',
              typeInferenceDisabled: true,
            },
          },
        },
        dataProfileResult: {
          postScanActionsResult: {
            bigqueryExportResult: {
              message: 'Test string',
              state: 'Test string',
            },
          },
          profile: {
            fields: [
              {
                mode: 'Test string',
                name: 'Test string',
                profile: {
                  distinctRatio: 42,
                  doubleProfile: {
                    average: 42,
                    max: 42,
                    min: 42,
                    quartiles: [42],
                    standardDeviation: 42,
                  },
                  integerProfile: {
                    average: 42,
                    max: 'Test string',
                    min: 'Test string',
                    quartiles: ['Test string'],
                    standardDeviation: 42,
                  },
                  nullRatio: 42,
                  stringProfile: {
                    averageLength: 42,
                    maxLength: 'Test string',
                    minLength: 'Test string',
                  },
                  topNValues: [
                    {
                      count: 'Test string',
                      ratio: 42,
                      value: 'Test string',
                    },
                  ],
                },
                type: 'Test string',
              },
            ],
          },
          rowCount: 'Test string',
          scannedData: {
            incrementalField: {
              end: 'Test string',
              field: 'Test string',
              start: 'Test string',
            },
          },
        },
        dataProfileSpec: {
          excludeFields: {
            fieldNames: ['Test string'],
          },
          includeFields: {
            fieldNames: ['Test string'],
          },
          postScanActions: {
            bigqueryExport: {
              resultsTable: 'Test string',
            },
          },
          rowFilter: 'Test string',
          samplingPercent: 42,
        },
        dataQualityResult: {
          columns: [
            {
              column: 'Test string',
              score: 42,
            },
          ],
          dimensions: [
            {
              dimension: {
                name: 'Test string',
              },
              passed: true,
              score: 42,
            },
          ],
          passed: true,
          postScanActionsResult: {
            bigqueryExportResult: {
              message: 'Test string',
              state: 'Test string',
            },
          },
          rowCount: 'Test string',
          rules: [
            {
              assertionRowCount: 'Test string',
              evaluatedCount: 'Test string',
              failingRowsQuery: 'Test string',
              nullCount: 'Test string',
              passed: true,
              passedCount: 'Test string',
              passRatio: 42,
              rule: {
                column: 'Test string',
                description: 'Test string',
                dimension: 'Test string',
                ignoreNull: true,
                name: 'Test string',
                nonNullExpectation: {},
                rangeExpectation: {
                  maxValue: 'Test string',
                  minValue: 'Test string',
                  strictMaxEnabled: true,
                  strictMinEnabled: true,
                },
                regexExpectation: {
                  regex: 'Test string',
                },
                rowConditionExpectation: {
                  sqlExpression: 'Test string',
                },
                setExpectation: {
                  values: ['Test string'],
                },
                sqlAssertion: {
                  sqlStatement: 'Test string',
                },
                statisticRangeExpectation: {
                  maxValue: 'Test string',
                  minValue: 'Test string',
                  statistic: 'Test string',
                  strictMaxEnabled: true,
                  strictMinEnabled: true,
                },
                suspended: true,
                tableConditionExpectation: {
                  sqlExpression: 'Test string',
                },
                threshold: 42,
                uniquenessExpectation: {},
              },
            },
          ],
          scannedData: {
            incrementalField: {
              end: 'Test string',
              field: 'Test string',
              start: 'Test string',
            },
          },
          score: 42,
        },
        dataQualitySpec: {
          postScanActions: {
            bigqueryExport: {
              resultsTable: 'Test string',
            },
            notificationReport: {
              jobEndTrigger: {},
              jobFailureTrigger: {},
              recipients: {
                emails: ['Test string'],
              },
              scoreThresholdTrigger: {
                scoreThreshold: 42,
              },
            },
          },
          rowFilter: 'Test string',
          rules: [
            {
              column: 'Test string',
              description: 'Test string',
              dimension: 'Test string',
              ignoreNull: true,
              name: 'Test string',
              nonNullExpectation: {},
              rangeExpectation: {
                maxValue: 'Test string',
                minValue: 'Test string',
                strictMaxEnabled: true,
                strictMinEnabled: true,
              },
              regexExpectation: {
                regex: 'Test string',
              },
              rowConditionExpectation: {
                sqlExpression: 'Test string',
              },
              setExpectation: {
                values: ['Test string'],
              },
              sqlAssertion: {
                sqlStatement: 'Test string',
              },
              statisticRangeExpectation: {
                maxValue: 'Test string',
                minValue: 'Test string',
                statistic: 'Test string',
                strictMaxEnabled: true,
                strictMinEnabled: true,
              },
              suspended: true,
              tableConditionExpectation: {
                sqlExpression: 'Test string',
              },
              threshold: 42,
              uniquenessExpectation: {},
            },
          ],
          samplingPercent: 42,
        },
        description: 'Test string',
        displayName: 'Test string',
        executionSpec: {
          field: 'Test string',
          trigger: {
            onDemand: {},
            schedule: {
              cron: 'Test string',
            },
          },
        },
        executionStatus: {
          latestJobCreateTime: 'Test string',
          latestJobEndTime: 'Test string',
          latestJobStartTime: 'Test string',
        },
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        state: 'Test string',
        type: 'Test string',
        uid: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Deletes a DataScan resource. */
    await gapi.client.dataplex.projects.locations.dataScans.delete({
      force: true,
      name: 'Test string',
    });
    /** Generates recommended data quality rules based on the results of a data profiling scan.Use the recommendations to build rules for a data quality scan. */
    await gapi.client.dataplex.projects.locations.dataScans.generateDataQualityRules(
      {
        name: 'Test string',
      },
      {},
    );
    /** Gets a DataScan resource. */
    await gapi.client.dataplex.projects.locations.dataScans.get({
      name: 'Test string',
      view: 'Test string',
    });
    /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
    await gapi.client.dataplex.projects.locations.dataScans.getIamPolicy({
      'options.requestedPolicyVersion': 42,
      resource: 'Test string',
    });
    /** Lists DataScans. */
    await gapi.client.dataplex.projects.locations.dataScans.list({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates a DataScan resource. */
    await gapi.client.dataplex.projects.locations.dataScans.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
        validateOnly: true,
      },
      {
        createTime: 'Test string',
        data: {
          entity: 'Test string',
          resource: 'Test string',
        },
        dataDiscoveryResult: {
          bigqueryPublishing: {
            dataset: 'Test string',
          },
        },
        dataDiscoverySpec: {
          bigqueryPublishingConfig: {
            connection: 'Test string',
            tableType: 'Test string',
          },
          storageConfig: {
            csvOptions: {
              delimiter: 'Test string',
              encoding: 'Test string',
              headerRows: 42,
              quote: 'Test string',
              typeInferenceDisabled: true,
            },
            excludePatterns: ['Test string'],
            includePatterns: ['Test string'],
            jsonOptions: {
              encoding: 'Test string',
              typeInferenceDisabled: true,
            },
          },
        },
        dataProfileResult: {
          postScanActionsResult: {
            bigqueryExportResult: {
              message: 'Test string',
              state: 'Test string',
            },
          },
          profile: {
            fields: [
              {
                mode: 'Test string',
                name: 'Test string',
                profile: {
                  distinctRatio: 42,
                  doubleProfile: {
                    average: 42,
                    max: 42,
                    min: 42,
                    quartiles: [42],
                    standardDeviation: 42,
                  },
                  integerProfile: {
                    average: 42,
                    max: 'Test string',
                    min: 'Test string',
                    quartiles: ['Test string'],
                    standardDeviation: 42,
                  },
                  nullRatio: 42,
                  stringProfile: {
                    averageLength: 42,
                    maxLength: 'Test string',
                    minLength: 'Test string',
                  },
                  topNValues: [
                    {
                      count: 'Test string',
                      ratio: 42,
                      value: 'Test string',
                    },
                  ],
                },
                type: 'Test string',
              },
            ],
          },
          rowCount: 'Test string',
          scannedData: {
            incrementalField: {
              end: 'Test string',
              field: 'Test string',
              start: 'Test string',
            },
          },
        },
        dataProfileSpec: {
          excludeFields: {
            fieldNames: ['Test string'],
          },
          includeFields: {
            fieldNames: ['Test string'],
          },
          postScanActions: {
            bigqueryExport: {
              resultsTable: 'Test string',
            },
          },
          rowFilter: 'Test string',
          samplingPercent: 42,
        },
        dataQualityResult: {
          columns: [
            {
              column: 'Test string',
              score: 42,
            },
          ],
          dimensions: [
            {
              dimension: {
                name: 'Test string',
              },
              passed: true,
              score: 42,
            },
          ],
          passed: true,
          postScanActionsResult: {
            bigqueryExportResult: {
              message: 'Test string',
              state: 'Test string',
            },
          },
          rowCount: 'Test string',
          rules: [
            {
              assertionRowCount: 'Test string',
              evaluatedCount: 'Test string',
              failingRowsQuery: 'Test string',
              nullCount: 'Test string',
              passed: true,
              passedCount: 'Test string',
              passRatio: 42,
              rule: {
                column: 'Test string',
                description: 'Test string',
                dimension: 'Test string',
                ignoreNull: true,
                name: 'Test string',
                nonNullExpectation: {},
                rangeExpectation: {
                  maxValue: 'Test string',
                  minValue: 'Test string',
                  strictMaxEnabled: true,
                  strictMinEnabled: true,
                },
                regexExpectation: {
                  regex: 'Test string',
                },
                rowConditionExpectation: {
                  sqlExpression: 'Test string',
                },
                setExpectation: {
                  values: ['Test string'],
                },
                sqlAssertion: {
                  sqlStatement: 'Test string',
                },
                statisticRangeExpectation: {
                  maxValue: 'Test string',
                  minValue: 'Test string',
                  statistic: 'Test string',
                  strictMaxEnabled: true,
                  strictMinEnabled: true,
                },
                suspended: true,
                tableConditionExpectation: {
                  sqlExpression: 'Test string',
                },
                threshold: 42,
                uniquenessExpectation: {},
              },
            },
          ],
          scannedData: {
            incrementalField: {
              end: 'Test string',
              field: 'Test string',
              start: 'Test string',
            },
          },
          score: 42,
        },
        dataQualitySpec: {
          postScanActions: {
            bigqueryExport: {
              resultsTable: 'Test string',
            },
            notificationReport: {
              jobEndTrigger: {},
              jobFailureTrigger: {},
              recipients: {
                emails: ['Test string'],
              },
              scoreThresholdTrigger: {
                scoreThreshold: 42,
              },
            },
          },
          rowFilter: 'Test string',
          rules: [
            {
              column: 'Test string',
              description: 'Test string',
              dimension: 'Test string',
              ignoreNull: true,
              name: 'Test string',
              nonNullExpectation: {},
              rangeExpectation: {
                maxValue: 'Test string',
                minValue: 'Test string',
                strictMaxEnabled: true,
                strictMinEnabled: true,
              },
              regexExpectation: {
                regex: 'Test string',
              },
              rowConditionExpectation: {
                sqlExpression: 'Test string',
              },
              setExpectation: {
                values: ['Test string'],
              },
              sqlAssertion: {
                sqlStatement: 'Test string',
              },
              statisticRangeExpectation: {
                maxValue: 'Test string',
                minValue: 'Test string',
                statistic: 'Test string',
                strictMaxEnabled: true,
                strictMinEnabled: true,
              },
              suspended: true,
              tableConditionExpectation: {
                sqlExpression: 'Test string',
              },
              threshold: 42,
              uniquenessExpectation: {},
            },
          ],
          samplingPercent: 42,
        },
        description: 'Test string',
        displayName: 'Test string',
        executionSpec: {
          field: 'Test string',
          trigger: {
            onDemand: {},
            schedule: {
              cron: 'Test string',
            },
          },
        },
        executionStatus: {
          latestJobCreateTime: 'Test string',
          latestJobEndTime: 'Test string',
          latestJobStartTime: 'Test string',
        },
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        state: 'Test string',
        type: 'Test string',
        uid: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Runs an on-demand execution of a DataScan */
    await gapi.client.dataplex.projects.locations.dataScans.run(
      {
        name: 'Test string',
      },
      {},
    );
    /** Sets the access control policy on the specified resource. Replaces any existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and PERMISSION_DENIED errors. */
    await gapi.client.dataplex.projects.locations.dataScans.setIamPolicy(
      {
        resource: 'Test string',
      },
      {
        policy: {
          auditConfigs: [
            {
              auditLogConfigs: [
                {
                  exemptedMembers: ['Test string'],
                  logType: 'Test string',
                },
              ],
              service: 'Test string',
            },
          ],
          bindings: [
            {
              condition: {
                description: 'Test string',
                expression: 'Test string',
                location: 'Test string',
                title: 'Test string',
              },
              members: ['Test string'],
              role: 'Test string',
            },
          ],
          etag: 'Test string',
          version: 42,
        },
        updateMask: 'Test string',
      },
    );
    /** Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error.Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning. */
    await gapi.client.dataplex.projects.locations.dataScans.testIamPermissions(
      {
        resource: 'Test string',
      },
      {
        permissions: ['Test string'],
      },
    );
    /** Generates recommended data quality rules based on the results of a data profiling scan.Use the recommendations to build rules for a data quality scan. */
    await gapi.client.dataplex.projects.locations.dataScans.jobs.generateDataQualityRules(
      {
        name: 'Test string',
      },
      {},
    );
    /** Gets a DataScanJob resource. */
    await gapi.client.dataplex.projects.locations.dataScans.jobs.get({
      name: 'Test string',
      view: 'Test string',
    });
    /** Lists DataScanJobs under the given DataScan. */
    await gapi.client.dataplex.projects.locations.dataScans.jobs.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Create a DataTaxonomy resource. */
    await gapi.client.dataplex.projects.locations.dataTaxonomies.create(
      {
        dataTaxonomyId: 'Test string',
        parent: 'Test string',
        validateOnly: true,
      },
      {
        attributeCount: 42,
        classCount: 42,
        createTime: 'Test string',
        description: 'Test string',
        displayName: 'Test string',
        etag: 'Test string',
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        uid: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Deletes a DataTaxonomy resource. All attributes within the DataTaxonomy must be deleted before the DataTaxonomy can be deleted. */
    await gapi.client.dataplex.projects.locations.dataTaxonomies.delete({
      etag: 'Test string',
      name: 'Test string',
    });
    /** Retrieves a DataTaxonomy resource. */
    await gapi.client.dataplex.projects.locations.dataTaxonomies.get({
      name: 'Test string',
    });
    /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
    await gapi.client.dataplex.projects.locations.dataTaxonomies.getIamPolicy({
      'options.requestedPolicyVersion': 42,
      resource: 'Test string',
    });
    /** Lists DataTaxonomy resources in a project and location. */
    await gapi.client.dataplex.projects.locations.dataTaxonomies.list({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates a DataTaxonomy resource. */
    await gapi.client.dataplex.projects.locations.dataTaxonomies.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
        validateOnly: true,
      },
      {
        attributeCount: 42,
        classCount: 42,
        createTime: 'Test string',
        description: 'Test string',
        displayName: 'Test string',
        etag: 'Test string',
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        uid: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Sets the access control policy on the specified resource. Replaces any existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and PERMISSION_DENIED errors. */
    await gapi.client.dataplex.projects.locations.dataTaxonomies.setIamPolicy(
      {
        resource: 'Test string',
      },
      {
        policy: {
          auditConfigs: [
            {
              auditLogConfigs: [
                {
                  exemptedMembers: ['Test string'],
                  logType: 'Test string',
                },
              ],
              service: 'Test string',
            },
          ],
          bindings: [
            {
              condition: {
                description: 'Test string',
                expression: 'Test string',
                location: 'Test string',
                title: 'Test string',
              },
              members: ['Test string'],
              role: 'Test string',
            },
          ],
          etag: 'Test string',
          version: 42,
        },
        updateMask: 'Test string',
      },
    );
    /** Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error.Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning. */
    await gapi.client.dataplex.projects.locations.dataTaxonomies.testIamPermissions(
      {
        resource: 'Test string',
      },
      {
        permissions: ['Test string'],
      },
    );
    /** Create a DataAttribute resource. */
    await gapi.client.dataplex.projects.locations.dataTaxonomies.attributes.create(
      {
        dataAttributeId: 'Test string',
        parent: 'Test string',
        validateOnly: true,
      },
      {
        attributeCount: 42,
        createTime: 'Test string',
        dataAccessSpec: {
          readers: ['Test string'],
        },
        description: 'Test string',
        displayName: 'Test string',
        etag: 'Test string',
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        parentId: 'Test string',
        resourceAccessSpec: {
          owners: ['Test string'],
          readers: ['Test string'],
          writers: ['Test string'],
        },
        uid: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Deletes a Data Attribute resource. */
    await gapi.client.dataplex.projects.locations.dataTaxonomies.attributes.delete(
      {
        etag: 'Test string',
        name: 'Test string',
      },
    );
    /** Retrieves a Data Attribute resource. */
    await gapi.client.dataplex.projects.locations.dataTaxonomies.attributes.get(
      {
        name: 'Test string',
      },
    );
    /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
    await gapi.client.dataplex.projects.locations.dataTaxonomies.attributes.getIamPolicy(
      {
        'options.requestedPolicyVersion': 42,
        resource: 'Test string',
      },
    );
    /** Lists Data Attribute resources in a DataTaxonomy. */
    await gapi.client.dataplex.projects.locations.dataTaxonomies.attributes.list(
      {
        filter: 'Test string',
        orderBy: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
    /** Updates a DataAttribute resource. */
    await gapi.client.dataplex.projects.locations.dataTaxonomies.attributes.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
        validateOnly: true,
      },
      {
        attributeCount: 42,
        createTime: 'Test string',
        dataAccessSpec: {
          readers: ['Test string'],
        },
        description: 'Test string',
        displayName: 'Test string',
        etag: 'Test string',
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        parentId: 'Test string',
        resourceAccessSpec: {
          owners: ['Test string'],
          readers: ['Test string'],
          writers: ['Test string'],
        },
        uid: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Sets the access control policy on the specified resource. Replaces any existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and PERMISSION_DENIED errors. */
    await gapi.client.dataplex.projects.locations.dataTaxonomies.attributes.setIamPolicy(
      {
        resource: 'Test string',
      },
      {
        policy: {
          auditConfigs: [
            {
              auditLogConfigs: [
                {
                  exemptedMembers: ['Test string'],
                  logType: 'Test string',
                },
              ],
              service: 'Test string',
            },
          ],
          bindings: [
            {
              condition: {
                description: 'Test string',
                expression: 'Test string',
                location: 'Test string',
                title: 'Test string',
              },
              members: ['Test string'],
              role: 'Test string',
            },
          ],
          etag: 'Test string',
          version: 42,
        },
        updateMask: 'Test string',
      },
    );
    /** Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error.Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning. */
    await gapi.client.dataplex.projects.locations.dataTaxonomies.attributes.testIamPermissions(
      {
        resource: 'Test string',
      },
      {
        permissions: ['Test string'],
      },
    );
    /** Creates an EntryGroup. */
    await gapi.client.dataplex.projects.locations.entryGroups.create(
      {
        entryGroupId: 'Test string',
        parent: 'Test string',
        validateOnly: true,
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        displayName: 'Test string',
        etag: 'Test string',
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        transferStatus: 'Test string',
        uid: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Deletes an EntryGroup. */
    await gapi.client.dataplex.projects.locations.entryGroups.delete({
      etag: 'Test string',
      name: 'Test string',
    });
    /** Gets an EntryGroup. */
    await gapi.client.dataplex.projects.locations.entryGroups.get({
      name: 'Test string',
    });
    /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
    await gapi.client.dataplex.projects.locations.entryGroups.getIamPolicy({
      'options.requestedPolicyVersion': 42,
      resource: 'Test string',
    });
    /** Lists EntryGroup resources in a project and location. */
    await gapi.client.dataplex.projects.locations.entryGroups.list({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates an EntryGroup. */
    await gapi.client.dataplex.projects.locations.entryGroups.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
        validateOnly: true,
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        displayName: 'Test string',
        etag: 'Test string',
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        transferStatus: 'Test string',
        uid: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Sets the access control policy on the specified resource. Replaces any existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and PERMISSION_DENIED errors. */
    await gapi.client.dataplex.projects.locations.entryGroups.setIamPolicy(
      {
        resource: 'Test string',
      },
      {
        policy: {
          auditConfigs: [
            {
              auditLogConfigs: [
                {
                  exemptedMembers: ['Test string'],
                  logType: 'Test string',
                },
              ],
              service: 'Test string',
            },
          ],
          bindings: [
            {
              condition: {
                description: 'Test string',
                expression: 'Test string',
                location: 'Test string',
                title: 'Test string',
              },
              members: ['Test string'],
              role: 'Test string',
            },
          ],
          etag: 'Test string',
          version: 42,
        },
        updateMask: 'Test string',
      },
    );
    /** Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error.Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning. */
    await gapi.client.dataplex.projects.locations.entryGroups.testIamPermissions(
      {
        resource: 'Test string',
      },
      {
        permissions: ['Test string'],
      },
    );
    /** Creates an Entry. */
    await gapi.client.dataplex.projects.locations.entryGroups.entries.create(
      {
        entryId: 'Test string',
        parent: 'Test string',
      },
      {
        aspects: {
          A: {
            aspectSource: {
              createTime: 'Test string',
              dataVersion: 'Test string',
              updateTime: 'Test string',
            },
            aspectType: 'Test string',
            createTime: 'Test string',
            data: {
              A: 42,
            },
            path: 'Test string',
            updateTime: 'Test string',
          },
        },
        createTime: 'Test string',
        entrySource: {
          ancestors: [
            {
              name: 'Test string',
              type: 'Test string',
            },
          ],
          createTime: 'Test string',
          description: 'Test string',
          displayName: 'Test string',
          labels: {
            A: 'Test string',
          },
          location: 'Test string',
          platform: 'Test string',
          resource: 'Test string',
          system: 'Test string',
          updateTime: 'Test string',
        },
        entryType: 'Test string',
        fullyQualifiedName: 'Test string',
        name: 'Test string',
        parentEntry: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Deletes an Entry. */
    await gapi.client.dataplex.projects.locations.entryGroups.entries.delete({
      name: 'Test string',
    });
    /** Gets an Entry.Caution: The BigQuery metadata that is stored in Dataplex Catalog is changing. For more information, see Changes to BigQuery metadata stored in Dataplex Catalog (https://cloud.google.com/dataplex/docs/biqquery-metadata-changes). */
    await gapi.client.dataplex.projects.locations.entryGroups.entries.get({
      aspectTypes: 'Test string',
      name: 'Test string',
      paths: 'Test string',
      view: 'Test string',
    });
    /** Lists Entries within an EntryGroup. */
    await gapi.client.dataplex.projects.locations.entryGroups.entries.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates an Entry. */
    await gapi.client.dataplex.projects.locations.entryGroups.entries.patch(
      {
        allowMissing: true,
        aspectKeys: 'Test string',
        deleteMissingAspects: true,
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        aspects: {
          A: {
            aspectSource: {
              createTime: 'Test string',
              dataVersion: 'Test string',
              updateTime: 'Test string',
            },
            aspectType: 'Test string',
            createTime: 'Test string',
            data: {
              A: 42,
            },
            path: 'Test string',
            updateTime: 'Test string',
          },
        },
        createTime: 'Test string',
        entrySource: {
          ancestors: [
            {
              name: 'Test string',
              type: 'Test string',
            },
          ],
          createTime: 'Test string',
          description: 'Test string',
          displayName: 'Test string',
          labels: {
            A: 'Test string',
          },
          location: 'Test string',
          platform: 'Test string',
          resource: 'Test string',
          system: 'Test string',
          updateTime: 'Test string',
        },
        entryType: 'Test string',
        fullyQualifiedName: 'Test string',
        name: 'Test string',
        parentEntry: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
    await gapi.client.dataplex.projects.locations.entryLinkTypes.getIamPolicy({
      'options.requestedPolicyVersion': 42,
      resource: 'Test string',
    });
    /** Sets the access control policy on the specified resource. Replaces any existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and PERMISSION_DENIED errors. */
    await gapi.client.dataplex.projects.locations.entryLinkTypes.setIamPolicy(
      {
        resource: 'Test string',
      },
      {
        policy: {
          auditConfigs: [
            {
              auditLogConfigs: [
                {
                  exemptedMembers: ['Test string'],
                  logType: 'Test string',
                },
              ],
              service: 'Test string',
            },
          ],
          bindings: [
            {
              condition: {
                description: 'Test string',
                expression: 'Test string',
                location: 'Test string',
                title: 'Test string',
              },
              members: ['Test string'],
              role: 'Test string',
            },
          ],
          etag: 'Test string',
          version: 42,
        },
        updateMask: 'Test string',
      },
    );
    /** Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error.Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning. */
    await gapi.client.dataplex.projects.locations.entryLinkTypes.testIamPermissions(
      {
        resource: 'Test string',
      },
      {
        permissions: ['Test string'],
      },
    );
    /** Creates an EntryType. */
    await gapi.client.dataplex.projects.locations.entryTypes.create(
      {
        entryTypeId: 'Test string',
        parent: 'Test string',
        validateOnly: true,
      },
      {
        authorization: {
          alternateUsePermission: 'Test string',
        },
        createTime: 'Test string',
        description: 'Test string',
        displayName: 'Test string',
        etag: 'Test string',
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        platform: 'Test string',
        requiredAspects: [
          {
            type: 'Test string',
          },
        ],
        system: 'Test string',
        typeAliases: ['Test string'],
        uid: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Deletes an EntryType. */
    await gapi.client.dataplex.projects.locations.entryTypes.delete({
      etag: 'Test string',
      name: 'Test string',
    });
    /** Gets an EntryType. */
    await gapi.client.dataplex.projects.locations.entryTypes.get({
      name: 'Test string',
    });
    /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
    await gapi.client.dataplex.projects.locations.entryTypes.getIamPolicy({
      'options.requestedPolicyVersion': 42,
      resource: 'Test string',
    });
    /** Lists EntryType resources in a project and location. */
    await gapi.client.dataplex.projects.locations.entryTypes.list({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates an EntryType. */
    await gapi.client.dataplex.projects.locations.entryTypes.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
        validateOnly: true,
      },
      {
        authorization: {
          alternateUsePermission: 'Test string',
        },
        createTime: 'Test string',
        description: 'Test string',
        displayName: 'Test string',
        etag: 'Test string',
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        platform: 'Test string',
        requiredAspects: [
          {
            type: 'Test string',
          },
        ],
        system: 'Test string',
        typeAliases: ['Test string'],
        uid: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Sets the access control policy on the specified resource. Replaces any existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and PERMISSION_DENIED errors. */
    await gapi.client.dataplex.projects.locations.entryTypes.setIamPolicy(
      {
        resource: 'Test string',
      },
      {
        policy: {
          auditConfigs: [
            {
              auditLogConfigs: [
                {
                  exemptedMembers: ['Test string'],
                  logType: 'Test string',
                },
              ],
              service: 'Test string',
            },
          ],
          bindings: [
            {
              condition: {
                description: 'Test string',
                expression: 'Test string',
                location: 'Test string',
                title: 'Test string',
              },
              members: ['Test string'],
              role: 'Test string',
            },
          ],
          etag: 'Test string',
          version: 42,
        },
        updateMask: 'Test string',
      },
    );
    /** Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error.Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning. */
    await gapi.client.dataplex.projects.locations.entryTypes.testIamPermissions(
      {
        resource: 'Test string',
      },
      {
        permissions: ['Test string'],
      },
    );
    /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
    await gapi.client.dataplex.projects.locations.glossaries.getIamPolicy({
      'options.requestedPolicyVersion': 42,
      resource: 'Test string',
    });
    /** Sets the access control policy on the specified resource. Replaces any existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and PERMISSION_DENIED errors. */
    await gapi.client.dataplex.projects.locations.glossaries.setIamPolicy(
      {
        resource: 'Test string',
      },
      {
        policy: {
          auditConfigs: [
            {
              auditLogConfigs: [
                {
                  exemptedMembers: ['Test string'],
                  logType: 'Test string',
                },
              ],
              service: 'Test string',
            },
          ],
          bindings: [
            {
              condition: {
                description: 'Test string',
                expression: 'Test string',
                location: 'Test string',
                title: 'Test string',
              },
              members: ['Test string'],
              role: 'Test string',
            },
          ],
          etag: 'Test string',
          version: 42,
        },
        updateMask: 'Test string',
      },
    );
    /** Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error.Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning. */
    await gapi.client.dataplex.projects.locations.glossaries.testIamPermissions(
      {
        resource: 'Test string',
      },
      {
        permissions: ['Test string'],
      },
    );
    /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
    await gapi.client.dataplex.projects.locations.glossaries.categories.getIamPolicy(
      {
        'options.requestedPolicyVersion': 42,
        resource: 'Test string',
      },
    );
    /** Sets the access control policy on the specified resource. Replaces any existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and PERMISSION_DENIED errors. */
    await gapi.client.dataplex.projects.locations.glossaries.categories.setIamPolicy(
      {
        resource: 'Test string',
      },
      {
        policy: {
          auditConfigs: [
            {
              auditLogConfigs: [
                {
                  exemptedMembers: ['Test string'],
                  logType: 'Test string',
                },
              ],
              service: 'Test string',
            },
          ],
          bindings: [
            {
              condition: {
                description: 'Test string',
                expression: 'Test string',
                location: 'Test string',
                title: 'Test string',
              },
              members: ['Test string'],
              role: 'Test string',
            },
          ],
          etag: 'Test string',
          version: 42,
        },
        updateMask: 'Test string',
      },
    );
    /** Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error.Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning. */
    await gapi.client.dataplex.projects.locations.glossaries.categories.testIamPermissions(
      {
        resource: 'Test string',
      },
      {
        permissions: ['Test string'],
      },
    );
    /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
    await gapi.client.dataplex.projects.locations.glossaries.terms.getIamPolicy(
      {
        'options.requestedPolicyVersion': 42,
        resource: 'Test string',
      },
    );
    /** Sets the access control policy on the specified resource. Replaces any existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and PERMISSION_DENIED errors. */
    await gapi.client.dataplex.projects.locations.glossaries.terms.setIamPolicy(
      {
        resource: 'Test string',
      },
      {
        policy: {
          auditConfigs: [
            {
              auditLogConfigs: [
                {
                  exemptedMembers: ['Test string'],
                  logType: 'Test string',
                },
              ],
              service: 'Test string',
            },
          ],
          bindings: [
            {
              condition: {
                description: 'Test string',
                expression: 'Test string',
                location: 'Test string',
                title: 'Test string',
              },
              members: ['Test string'],
              role: 'Test string',
            },
          ],
          etag: 'Test string',
          version: 42,
        },
        updateMask: 'Test string',
      },
    );
    /** Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error.Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning. */
    await gapi.client.dataplex.projects.locations.glossaries.terms.testIamPermissions(
      {
        resource: 'Test string',
      },
      {
        permissions: ['Test string'],
      },
    );
    /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
    await gapi.client.dataplex.projects.locations.governanceRules.getIamPolicy({
      'options.requestedPolicyVersion': 42,
      resource: 'Test string',
    });
    /** Sets the access control policy on the specified resource. Replaces any existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and PERMISSION_DENIED errors. */
    await gapi.client.dataplex.projects.locations.governanceRules.setIamPolicy(
      {
        resource: 'Test string',
      },
      {
        policy: {
          auditConfigs: [
            {
              auditLogConfigs: [
                {
                  exemptedMembers: ['Test string'],
                  logType: 'Test string',
                },
              ],
              service: 'Test string',
            },
          ],
          bindings: [
            {
              condition: {
                description: 'Test string',
                expression: 'Test string',
                location: 'Test string',
                title: 'Test string',
              },
              members: ['Test string'],
              role: 'Test string',
            },
          ],
          etag: 'Test string',
          version: 42,
        },
        updateMask: 'Test string',
      },
    );
    /** Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error.Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning. */
    await gapi.client.dataplex.projects.locations.governanceRules.testIamPermissions(
      {
        resource: 'Test string',
      },
      {
        permissions: ['Test string'],
      },
    );
    /** Creates a lake resource. */
    await gapi.client.dataplex.projects.locations.lakes.create(
      {
        lakeId: 'Test string',
        parent: 'Test string',
        validateOnly: true,
      },
      {
        assetStatus: {
          activeAssets: 42,
          securityPolicyApplyingAssets: 42,
          updateTime: 'Test string',
        },
        createTime: 'Test string',
        description: 'Test string',
        displayName: 'Test string',
        labels: {
          A: 'Test string',
        },
        metastore: {
          service: 'Test string',
        },
        metastoreStatus: {
          endpoint: 'Test string',
          message: 'Test string',
          state: 'Test string',
          updateTime: 'Test string',
        },
        name: 'Test string',
        serviceAccount: 'Test string',
        state: 'Test string',
        uid: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Deletes a lake resource. All zones within the lake must be deleted before the lake can be deleted. */
    await gapi.client.dataplex.projects.locations.lakes.delete({
      name: 'Test string',
    });
    /** Retrieves a lake resource. */
    await gapi.client.dataplex.projects.locations.lakes.get({
      name: 'Test string',
    });
    /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
    await gapi.client.dataplex.projects.locations.lakes.getIamPolicy({
      'options.requestedPolicyVersion': 42,
      resource: 'Test string',
    });
    /** Lists lake resources in a project and location. */
    await gapi.client.dataplex.projects.locations.lakes.list({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates a lake resource. */
    await gapi.client.dataplex.projects.locations.lakes.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
        validateOnly: true,
      },
      {
        assetStatus: {
          activeAssets: 42,
          securityPolicyApplyingAssets: 42,
          updateTime: 'Test string',
        },
        createTime: 'Test string',
        description: 'Test string',
        displayName: 'Test string',
        labels: {
          A: 'Test string',
        },
        metastore: {
          service: 'Test string',
        },
        metastoreStatus: {
          endpoint: 'Test string',
          message: 'Test string',
          state: 'Test string',
          updateTime: 'Test string',
        },
        name: 'Test string',
        serviceAccount: 'Test string',
        state: 'Test string',
        uid: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Sets the access control policy on the specified resource. Replaces any existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and PERMISSION_DENIED errors. */
    await gapi.client.dataplex.projects.locations.lakes.setIamPolicy(
      {
        resource: 'Test string',
      },
      {
        policy: {
          auditConfigs: [
            {
              auditLogConfigs: [
                {
                  exemptedMembers: ['Test string'],
                  logType: 'Test string',
                },
              ],
              service: 'Test string',
            },
          ],
          bindings: [
            {
              condition: {
                description: 'Test string',
                expression: 'Test string',
                location: 'Test string',
                title: 'Test string',
              },
              members: ['Test string'],
              role: 'Test string',
            },
          ],
          etag: 'Test string',
          version: 42,
        },
        updateMask: 'Test string',
      },
    );
    /** Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error.Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning. */
    await gapi.client.dataplex.projects.locations.lakes.testIamPermissions(
      {
        resource: 'Test string',
      },
      {
        permissions: ['Test string'],
      },
    );
    /** Lists action resources in a lake. */
    await gapi.client.dataplex.projects.locations.lakes.actions.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Create a content. */
    await gapi.client.dataplex.projects.locations.lakes.content.create(
      {
        parent: 'Test string',
        validateOnly: true,
      },
      {
        createTime: 'Test string',
        dataText: 'Test string',
        description: 'Test string',
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        notebook: {
          kernelType: 'Test string',
        },
        path: 'Test string',
        sqlScript: {
          engine: 'Test string',
        },
        uid: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Delete a content. */
    await gapi.client.dataplex.projects.locations.lakes.content.delete({
      name: 'Test string',
    });
    /** Get a content resource. */
    await gapi.client.dataplex.projects.locations.lakes.content.get({
      name: 'Test string',
      view: 'Test string',
    });
    /** Gets the access control policy for a contentitem resource. A NOT_FOUND error is returned if the resource does not exist. An empty policy is returned if the resource exists but does not have a policy set on it.Caller must have Google IAM dataplex.content.getIamPolicy permission on the resource. */
    await gapi.client.dataplex.projects.locations.lakes.content.getIamPolicy({
      'options.requestedPolicyVersion': 42,
      resource: 'Test string',
    });
    /** List content. */
    await gapi.client.dataplex.projects.locations.lakes.content.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Update a content. Only supports full resource update. */
    await gapi.client.dataplex.projects.locations.lakes.content.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
        validateOnly: true,
      },
      {
        createTime: 'Test string',
        dataText: 'Test string',
        description: 'Test string',
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        notebook: {
          kernelType: 'Test string',
        },
        path: 'Test string',
        sqlScript: {
          engine: 'Test string',
        },
        uid: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Sets the access control policy on the specified contentitem resource. Replaces any existing policy.Caller must have Google IAM dataplex.content.setIamPolicy permission on the resource. */
    await gapi.client.dataplex.projects.locations.lakes.content.setIamPolicy(
      {
        resource: 'Test string',
      },
      {
        policy: {
          auditConfigs: [
            {
              auditLogConfigs: [
                {
                  exemptedMembers: ['Test string'],
                  logType: 'Test string',
                },
              ],
              service: 'Test string',
            },
          ],
          bindings: [
            {
              condition: {
                description: 'Test string',
                expression: 'Test string',
                location: 'Test string',
                title: 'Test string',
              },
              members: ['Test string'],
              role: 'Test string',
            },
          ],
          etag: 'Test string',
          version: 42,
        },
        updateMask: 'Test string',
      },
    );
    /** Returns the caller's permissions on a resource. If the resource does not exist, an empty set of permissions is returned (a NOT_FOUND error is not returned).A caller is not required to have Google IAM permission to make this request.Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning. */
    await gapi.client.dataplex.projects.locations.lakes.content.testIamPermissions(
      {
        resource: 'Test string',
      },
      {
        permissions: ['Test string'],
      },
    );
    /** Create a content. */
    await gapi.client.dataplex.projects.locations.lakes.contentitems.create(
      {
        parent: 'Test string',
        validateOnly: true,
      },
      {
        createTime: 'Test string',
        dataText: 'Test string',
        description: 'Test string',
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        notebook: {
          kernelType: 'Test string',
        },
        path: 'Test string',
        sqlScript: {
          engine: 'Test string',
        },
        uid: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Delete a content. */
    await gapi.client.dataplex.projects.locations.lakes.contentitems.delete({
      name: 'Test string',
    });
    /** Get a content resource. */
    await gapi.client.dataplex.projects.locations.lakes.contentitems.get({
      name: 'Test string',
      view: 'Test string',
    });
    /** Gets the access control policy for a contentitem resource. A NOT_FOUND error is returned if the resource does not exist. An empty policy is returned if the resource exists but does not have a policy set on it.Caller must have Google IAM dataplex.content.getIamPolicy permission on the resource. */
    await gapi.client.dataplex.projects.locations.lakes.contentitems.getIamPolicy(
      {
        'options.requestedPolicyVersion': 42,
        resource: 'Test string',
      },
    );
    /** List content. */
    await gapi.client.dataplex.projects.locations.lakes.contentitems.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Update a content. Only supports full resource update. */
    await gapi.client.dataplex.projects.locations.lakes.contentitems.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
        validateOnly: true,
      },
      {
        createTime: 'Test string',
        dataText: 'Test string',
        description: 'Test string',
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        notebook: {
          kernelType: 'Test string',
        },
        path: 'Test string',
        sqlScript: {
          engine: 'Test string',
        },
        uid: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Sets the access control policy on the specified contentitem resource. Replaces any existing policy.Caller must have Google IAM dataplex.content.setIamPolicy permission on the resource. */
    await gapi.client.dataplex.projects.locations.lakes.contentitems.setIamPolicy(
      {
        resource: 'Test string',
      },
      {
        policy: {
          auditConfigs: [
            {
              auditLogConfigs: [
                {
                  exemptedMembers: ['Test string'],
                  logType: 'Test string',
                },
              ],
              service: 'Test string',
            },
          ],
          bindings: [
            {
              condition: {
                description: 'Test string',
                expression: 'Test string',
                location: 'Test string',
                title: 'Test string',
              },
              members: ['Test string'],
              role: 'Test string',
            },
          ],
          etag: 'Test string',
          version: 42,
        },
        updateMask: 'Test string',
      },
    );
    /** Returns the caller's permissions on a resource. If the resource does not exist, an empty set of permissions is returned (a NOT_FOUND error is not returned).A caller is not required to have Google IAM permission to make this request.Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning. */
    await gapi.client.dataplex.projects.locations.lakes.contentitems.testIamPermissions(
      {
        resource: 'Test string',
      },
      {
        permissions: ['Test string'],
      },
    );
    /** Create an environment resource. */
    await gapi.client.dataplex.projects.locations.lakes.environments.create(
      {
        environmentId: 'Test string',
        parent: 'Test string',
        validateOnly: true,
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        displayName: 'Test string',
        endpoints: {
          notebooks: 'Test string',
          sql: 'Test string',
        },
        infrastructureSpec: {
          compute: {
            diskSizeGb: 42,
            maxNodeCount: 42,
            nodeCount: 42,
          },
          osImage: {
            imageVersion: 'Test string',
            javaLibraries: ['Test string'],
            properties: {
              A: 'Test string',
            },
            pythonPackages: ['Test string'],
          },
        },
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        sessionSpec: {
          enableFastStartup: true,
          maxIdleDuration: 'Test string',
        },
        sessionStatus: {
          active: true,
        },
        state: 'Test string',
        uid: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Delete the environment resource. All the child resources must have been deleted before environment deletion can be initiated. */
    await gapi.client.dataplex.projects.locations.lakes.environments.delete({
      name: 'Test string',
    });
    /** Get environment resource. */
    await gapi.client.dataplex.projects.locations.lakes.environments.get({
      name: 'Test string',
    });
    /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
    await gapi.client.dataplex.projects.locations.lakes.environments.getIamPolicy(
      {
        'options.requestedPolicyVersion': 42,
        resource: 'Test string',
      },
    );
    /** Lists environments under the given lake. */
    await gapi.client.dataplex.projects.locations.lakes.environments.list({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Update the environment resource. */
    await gapi.client.dataplex.projects.locations.lakes.environments.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
        validateOnly: true,
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        displayName: 'Test string',
        endpoints: {
          notebooks: 'Test string',
          sql: 'Test string',
        },
        infrastructureSpec: {
          compute: {
            diskSizeGb: 42,
            maxNodeCount: 42,
            nodeCount: 42,
          },
          osImage: {
            imageVersion: 'Test string',
            javaLibraries: ['Test string'],
            properties: {
              A: 'Test string',
            },
            pythonPackages: ['Test string'],
          },
        },
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        sessionSpec: {
          enableFastStartup: true,
          maxIdleDuration: 'Test string',
        },
        sessionStatus: {
          active: true,
        },
        state: 'Test string',
        uid: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Sets the access control policy on the specified resource. Replaces any existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and PERMISSION_DENIED errors. */
    await gapi.client.dataplex.projects.locations.lakes.environments.setIamPolicy(
      {
        resource: 'Test string',
      },
      {
        policy: {
          auditConfigs: [
            {
              auditLogConfigs: [
                {
                  exemptedMembers: ['Test string'],
                  logType: 'Test string',
                },
              ],
              service: 'Test string',
            },
          ],
          bindings: [
            {
              condition: {
                description: 'Test string',
                expression: 'Test string',
                location: 'Test string',
                title: 'Test string',
              },
              members: ['Test string'],
              role: 'Test string',
            },
          ],
          etag: 'Test string',
          version: 42,
        },
        updateMask: 'Test string',
      },
    );
    /** Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error.Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning. */
    await gapi.client.dataplex.projects.locations.lakes.environments.testIamPermissions(
      {
        resource: 'Test string',
      },
      {
        permissions: ['Test string'],
      },
    );
    /** Lists session resources in an environment. */
    await gapi.client.dataplex.projects.locations.lakes.environments.sessions.list(
      {
        filter: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
    /** Creates a task resource within a lake. */
    await gapi.client.dataplex.projects.locations.lakes.tasks.create(
      {
        parent: 'Test string',
        taskId: 'Test string',
        validateOnly: true,
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        displayName: 'Test string',
        executionSpec: {
          args: {
            A: 'Test string',
          },
          kmsKey: 'Test string',
          maxJobExecutionLifetime: 'Test string',
          project: 'Test string',
          serviceAccount: 'Test string',
        },
        executionStatus: {
          latestJob: {
            endTime: 'Test string',
            executionSpec: {
              args: {
                A: 'Test string',
              },
              kmsKey: 'Test string',
              maxJobExecutionLifetime: 'Test string',
              project: 'Test string',
              serviceAccount: 'Test string',
            },
            labels: {
              A: 'Test string',
            },
            message: 'Test string',
            name: 'Test string',
            retryCount: 42,
            service: 'Test string',
            serviceJob: 'Test string',
            startTime: 'Test string',
            state: 'Test string',
            trigger: 'Test string',
            uid: 'Test string',
          },
          updateTime: 'Test string',
        },
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        notebook: {
          archiveUris: ['Test string'],
          fileUris: ['Test string'],
          infrastructureSpec: {
            batch: {
              executorsCount: 42,
              maxExecutorsCount: 42,
            },
            containerImage: {
              image: 'Test string',
              javaJars: ['Test string'],
              properties: {
                A: 'Test string',
              },
              pythonPackages: ['Test string'],
            },
            vpcNetwork: {
              network: 'Test string',
              networkTags: ['Test string'],
              subNetwork: 'Test string',
            },
          },
          notebook: 'Test string',
        },
        spark: {
          archiveUris: ['Test string'],
          fileUris: ['Test string'],
          infrastructureSpec: {
            batch: {
              executorsCount: 42,
              maxExecutorsCount: 42,
            },
            containerImage: {
              image: 'Test string',
              javaJars: ['Test string'],
              properties: {
                A: 'Test string',
              },
              pythonPackages: ['Test string'],
            },
            vpcNetwork: {
              network: 'Test string',
              networkTags: ['Test string'],
              subNetwork: 'Test string',
            },
          },
          mainClass: 'Test string',
          mainJarFileUri: 'Test string',
          pythonScriptFile: 'Test string',
          sqlScript: 'Test string',
          sqlScriptFile: 'Test string',
        },
        state: 'Test string',
        triggerSpec: {
          disabled: true,
          maxRetries: 42,
          schedule: 'Test string',
          startTime: 'Test string',
          type: 'Test string',
        },
        uid: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Delete the task resource. */
    await gapi.client.dataplex.projects.locations.lakes.tasks.delete({
      name: 'Test string',
    });
    /** Get task resource. */
    await gapi.client.dataplex.projects.locations.lakes.tasks.get({
      name: 'Test string',
    });
    /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
    await gapi.client.dataplex.projects.locations.lakes.tasks.getIamPolicy({
      'options.requestedPolicyVersion': 42,
      resource: 'Test string',
    });
    /** Lists tasks under the given lake. */
    await gapi.client.dataplex.projects.locations.lakes.tasks.list({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Update the task resource. */
    await gapi.client.dataplex.projects.locations.lakes.tasks.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
        validateOnly: true,
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        displayName: 'Test string',
        executionSpec: {
          args: {
            A: 'Test string',
          },
          kmsKey: 'Test string',
          maxJobExecutionLifetime: 'Test string',
          project: 'Test string',
          serviceAccount: 'Test string',
        },
        executionStatus: {
          latestJob: {
            endTime: 'Test string',
            executionSpec: {
              args: {
                A: 'Test string',
              },
              kmsKey: 'Test string',
              maxJobExecutionLifetime: 'Test string',
              project: 'Test string',
              serviceAccount: 'Test string',
            },
            labels: {
              A: 'Test string',
            },
            message: 'Test string',
            name: 'Test string',
            retryCount: 42,
            service: 'Test string',
            serviceJob: 'Test string',
            startTime: 'Test string',
            state: 'Test string',
            trigger: 'Test string',
            uid: 'Test string',
          },
          updateTime: 'Test string',
        },
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        notebook: {
          archiveUris: ['Test string'],
          fileUris: ['Test string'],
          infrastructureSpec: {
            batch: {
              executorsCount: 42,
              maxExecutorsCount: 42,
            },
            containerImage: {
              image: 'Test string',
              javaJars: ['Test string'],
              properties: {
                A: 'Test string',
              },
              pythonPackages: ['Test string'],
            },
            vpcNetwork: {
              network: 'Test string',
              networkTags: ['Test string'],
              subNetwork: 'Test string',
            },
          },
          notebook: 'Test string',
        },
        spark: {
          archiveUris: ['Test string'],
          fileUris: ['Test string'],
          infrastructureSpec: {
            batch: {
              executorsCount: 42,
              maxExecutorsCount: 42,
            },
            containerImage: {
              image: 'Test string',
              javaJars: ['Test string'],
              properties: {
                A: 'Test string',
              },
              pythonPackages: ['Test string'],
            },
            vpcNetwork: {
              network: 'Test string',
              networkTags: ['Test string'],
              subNetwork: 'Test string',
            },
          },
          mainClass: 'Test string',
          mainJarFileUri: 'Test string',
          pythonScriptFile: 'Test string',
          sqlScript: 'Test string',
          sqlScriptFile: 'Test string',
        },
        state: 'Test string',
        triggerSpec: {
          disabled: true,
          maxRetries: 42,
          schedule: 'Test string',
          startTime: 'Test string',
          type: 'Test string',
        },
        uid: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Run an on demand execution of a Task. */
    await gapi.client.dataplex.projects.locations.lakes.tasks.run(
      {
        name: 'Test string',
      },
      {
        args: {
          A: 'Test string',
        },
        labels: {
          A: 'Test string',
        },
      },
    );
    /** Sets the access control policy on the specified resource. Replaces any existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and PERMISSION_DENIED errors. */
    await gapi.client.dataplex.projects.locations.lakes.tasks.setIamPolicy(
      {
        resource: 'Test string',
      },
      {
        policy: {
          auditConfigs: [
            {
              auditLogConfigs: [
                {
                  exemptedMembers: ['Test string'],
                  logType: 'Test string',
                },
              ],
              service: 'Test string',
            },
          ],
          bindings: [
            {
              condition: {
                description: 'Test string',
                expression: 'Test string',
                location: 'Test string',
                title: 'Test string',
              },
              members: ['Test string'],
              role: 'Test string',
            },
          ],
          etag: 'Test string',
          version: 42,
        },
        updateMask: 'Test string',
      },
    );
    /** Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error.Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning. */
    await gapi.client.dataplex.projects.locations.lakes.tasks.testIamPermissions(
      {
        resource: 'Test string',
      },
      {
        permissions: ['Test string'],
      },
    );
    /** Cancel jobs running for the task resource. */
    await gapi.client.dataplex.projects.locations.lakes.tasks.jobs.cancel(
      {
        name: 'Test string',
      },
      {},
    );
    /** Get job resource. */
    await gapi.client.dataplex.projects.locations.lakes.tasks.jobs.get({
      name: 'Test string',
    });
    /** Lists Jobs under the given task. */
    await gapi.client.dataplex.projects.locations.lakes.tasks.jobs.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Creates a zone resource within a lake. */
    await gapi.client.dataplex.projects.locations.lakes.zones.create(
      {
        parent: 'Test string',
        validateOnly: true,
        zoneId: 'Test string',
      },
      {
        assetStatus: {
          activeAssets: 42,
          securityPolicyApplyingAssets: 42,
          updateTime: 'Test string',
        },
        createTime: 'Test string',
        description: 'Test string',
        discoverySpec: {
          csvOptions: {
            delimiter: 'Test string',
            disableTypeInference: true,
            encoding: 'Test string',
            headerRows: 42,
          },
          enabled: true,
          excludePatterns: ['Test string'],
          includePatterns: ['Test string'],
          jsonOptions: {
            disableTypeInference: true,
            encoding: 'Test string',
          },
          schedule: 'Test string',
        },
        displayName: 'Test string',
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        resourceSpec: {
          locationType: 'Test string',
        },
        state: 'Test string',
        type: 'Test string',
        uid: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Deletes a zone resource. All assets within a zone must be deleted before the zone can be deleted. */
    await gapi.client.dataplex.projects.locations.lakes.zones.delete({
      name: 'Test string',
    });
    /** Retrieves a zone resource. */
    await gapi.client.dataplex.projects.locations.lakes.zones.get({
      name: 'Test string',
    });
    /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
    await gapi.client.dataplex.projects.locations.lakes.zones.getIamPolicy({
      'options.requestedPolicyVersion': 42,
      resource: 'Test string',
    });
    /** Lists zone resources in a lake. */
    await gapi.client.dataplex.projects.locations.lakes.zones.list({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates a zone resource. */
    await gapi.client.dataplex.projects.locations.lakes.zones.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
        validateOnly: true,
      },
      {
        assetStatus: {
          activeAssets: 42,
          securityPolicyApplyingAssets: 42,
          updateTime: 'Test string',
        },
        createTime: 'Test string',
        description: 'Test string',
        discoverySpec: {
          csvOptions: {
            delimiter: 'Test string',
            disableTypeInference: true,
            encoding: 'Test string',
            headerRows: 42,
          },
          enabled: true,
          excludePatterns: ['Test string'],
          includePatterns: ['Test string'],
          jsonOptions: {
            disableTypeInference: true,
            encoding: 'Test string',
          },
          schedule: 'Test string',
        },
        displayName: 'Test string',
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        resourceSpec: {
          locationType: 'Test string',
        },
        state: 'Test string',
        type: 'Test string',
        uid: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Sets the access control policy on the specified resource. Replaces any existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and PERMISSION_DENIED errors. */
    await gapi.client.dataplex.projects.locations.lakes.zones.setIamPolicy(
      {
        resource: 'Test string',
      },
      {
        policy: {
          auditConfigs: [
            {
              auditLogConfigs: [
                {
                  exemptedMembers: ['Test string'],
                  logType: 'Test string',
                },
              ],
              service: 'Test string',
            },
          ],
          bindings: [
            {
              condition: {
                description: 'Test string',
                expression: 'Test string',
                location: 'Test string',
                title: 'Test string',
              },
              members: ['Test string'],
              role: 'Test string',
            },
          ],
          etag: 'Test string',
          version: 42,
        },
        updateMask: 'Test string',
      },
    );
    /** Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error.Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning. */
    await gapi.client.dataplex.projects.locations.lakes.zones.testIamPermissions(
      {
        resource: 'Test string',
      },
      {
        permissions: ['Test string'],
      },
    );
    /** Lists action resources in a zone. */
    await gapi.client.dataplex.projects.locations.lakes.zones.actions.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Creates an asset resource. */
    await gapi.client.dataplex.projects.locations.lakes.zones.assets.create(
      {
        assetId: 'Test string',
        parent: 'Test string',
        validateOnly: true,
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        discoverySpec: {
          csvOptions: {
            delimiter: 'Test string',
            disableTypeInference: true,
            encoding: 'Test string',
            headerRows: 42,
          },
          enabled: true,
          excludePatterns: ['Test string'],
          includePatterns: ['Test string'],
          jsonOptions: {
            disableTypeInference: true,
            encoding: 'Test string',
          },
          schedule: 'Test string',
        },
        discoveryStatus: {
          lastRunDuration: 'Test string',
          lastRunTime: 'Test string',
          message: 'Test string',
          state: 'Test string',
          stats: {
            dataItems: 'Test string',
            dataSize: 'Test string',
            filesets: 'Test string',
            tables: 'Test string',
          },
          updateTime: 'Test string',
        },
        displayName: 'Test string',
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        resourceSpec: {
          name: 'Test string',
          readAccessMode: 'Test string',
          type: 'Test string',
        },
        resourceStatus: {
          managedAccessIdentity: 'Test string',
          message: 'Test string',
          state: 'Test string',
          updateTime: 'Test string',
        },
        securityStatus: {
          message: 'Test string',
          state: 'Test string',
          updateTime: 'Test string',
        },
        state: 'Test string',
        uid: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Deletes an asset resource. The referenced storage resource is detached (default) or deleted based on the associated Lifecycle policy. */
    await gapi.client.dataplex.projects.locations.lakes.zones.assets.delete({
      name: 'Test string',
    });
    /** Retrieves an asset resource. */
    await gapi.client.dataplex.projects.locations.lakes.zones.assets.get({
      name: 'Test string',
    });
    /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
    await gapi.client.dataplex.projects.locations.lakes.zones.assets.getIamPolicy(
      {
        'options.requestedPolicyVersion': 42,
        resource: 'Test string',
      },
    );
    /** Lists asset resources in a zone. */
    await gapi.client.dataplex.projects.locations.lakes.zones.assets.list({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates an asset resource. */
    await gapi.client.dataplex.projects.locations.lakes.zones.assets.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
        validateOnly: true,
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        discoverySpec: {
          csvOptions: {
            delimiter: 'Test string',
            disableTypeInference: true,
            encoding: 'Test string',
            headerRows: 42,
          },
          enabled: true,
          excludePatterns: ['Test string'],
          includePatterns: ['Test string'],
          jsonOptions: {
            disableTypeInference: true,
            encoding: 'Test string',
          },
          schedule: 'Test string',
        },
        discoveryStatus: {
          lastRunDuration: 'Test string',
          lastRunTime: 'Test string',
          message: 'Test string',
          state: 'Test string',
          stats: {
            dataItems: 'Test string',
            dataSize: 'Test string',
            filesets: 'Test string',
            tables: 'Test string',
          },
          updateTime: 'Test string',
        },
        displayName: 'Test string',
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        resourceSpec: {
          name: 'Test string',
          readAccessMode: 'Test string',
          type: 'Test string',
        },
        resourceStatus: {
          managedAccessIdentity: 'Test string',
          message: 'Test string',
          state: 'Test string',
          updateTime: 'Test string',
        },
        securityStatus: {
          message: 'Test string',
          state: 'Test string',
          updateTime: 'Test string',
        },
        state: 'Test string',
        uid: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Sets the access control policy on the specified resource. Replaces any existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and PERMISSION_DENIED errors. */
    await gapi.client.dataplex.projects.locations.lakes.zones.assets.setIamPolicy(
      {
        resource: 'Test string',
      },
      {
        policy: {
          auditConfigs: [
            {
              auditLogConfigs: [
                {
                  exemptedMembers: ['Test string'],
                  logType: 'Test string',
                },
              ],
              service: 'Test string',
            },
          ],
          bindings: [
            {
              condition: {
                description: 'Test string',
                expression: 'Test string',
                location: 'Test string',
                title: 'Test string',
              },
              members: ['Test string'],
              role: 'Test string',
            },
          ],
          etag: 'Test string',
          version: 42,
        },
        updateMask: 'Test string',
      },
    );
    /** Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error.Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning. */
    await gapi.client.dataplex.projects.locations.lakes.zones.assets.testIamPermissions(
      {
        resource: 'Test string',
      },
      {
        permissions: ['Test string'],
      },
    );
    /** Lists action resources in an asset. */
    await gapi.client.dataplex.projects.locations.lakes.zones.assets.actions.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
    /** Create a metadata entity. */
    await gapi.client.dataplex.projects.locations.lakes.zones.entities.create(
      {
        parent: 'Test string',
        validateOnly: true,
      },
      {
        access: {
          read: 'Test string',
        },
        asset: 'Test string',
        catalogEntry: 'Test string',
        compatibility: {
          bigquery: {
            compatible: true,
            reason: 'Test string',
          },
          hiveMetastore: {
            compatible: true,
            reason: 'Test string',
          },
        },
        createTime: 'Test string',
        dataPath: 'Test string',
        dataPathPattern: 'Test string',
        description: 'Test string',
        displayName: 'Test string',
        etag: 'Test string',
        format: {
          compressionFormat: 'Test string',
          csv: {
            delimiter: 'Test string',
            encoding: 'Test string',
            headerRows: 42,
            quote: 'Test string',
          },
          format: 'Test string',
          iceberg: {
            metadataLocation: 'Test string',
          },
          json: {
            encoding: 'Test string',
          },
          mimeType: 'Test string',
        },
        id: 'Test string',
        name: 'Test string',
        schema: {
          fields: [
            {
              description: 'Test string',
              fields: undefined,
              mode: 'Test string',
              name: 'Test string',
              type: 'Test string',
            },
          ],
          partitionFields: [
            {
              name: 'Test string',
              type: 'Test string',
            },
          ],
          partitionStyle: 'Test string',
          userManaged: true,
        },
        system: 'Test string',
        type: 'Test string',
        uid: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Delete a metadata entity. */
    await gapi.client.dataplex.projects.locations.lakes.zones.entities.delete({
      etag: 'Test string',
      name: 'Test string',
    });
    /** Get a metadata entity. */
    await gapi.client.dataplex.projects.locations.lakes.zones.entities.get({
      name: 'Test string',
      view: 'Test string',
    });
    /** List metadata entities in a zone. */
    await gapi.client.dataplex.projects.locations.lakes.zones.entities.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
      view: 'Test string',
    });
    /** Update a metadata entity. Only supports full resource update. */
    await gapi.client.dataplex.projects.locations.lakes.zones.entities.update(
      {
        name: 'Test string',
        validateOnly: true,
      },
      {
        access: {
          read: 'Test string',
        },
        asset: 'Test string',
        catalogEntry: 'Test string',
        compatibility: {
          bigquery: {
            compatible: true,
            reason: 'Test string',
          },
          hiveMetastore: {
            compatible: true,
            reason: 'Test string',
          },
        },
        createTime: 'Test string',
        dataPath: 'Test string',
        dataPathPattern: 'Test string',
        description: 'Test string',
        displayName: 'Test string',
        etag: 'Test string',
        format: {
          compressionFormat: 'Test string',
          csv: {
            delimiter: 'Test string',
            encoding: 'Test string',
            headerRows: 42,
            quote: 'Test string',
          },
          format: 'Test string',
          iceberg: {
            metadataLocation: 'Test string',
          },
          json: {
            encoding: 'Test string',
          },
          mimeType: 'Test string',
        },
        id: 'Test string',
        name: 'Test string',
        schema: {
          fields: [
            {
              description: 'Test string',
              fields: undefined,
              mode: 'Test string',
              name: 'Test string',
              type: 'Test string',
            },
          ],
          partitionFields: [
            {
              name: 'Test string',
              type: 'Test string',
            },
          ],
          partitionStyle: 'Test string',
          userManaged: true,
        },
        system: 'Test string',
        type: 'Test string',
        uid: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Create a metadata partition. */
    await gapi.client.dataplex.projects.locations.lakes.zones.entities.partitions.create(
      {
        parent: 'Test string',
        validateOnly: true,
      },
      {
        etag: 'Test string',
        location: 'Test string',
        name: 'Test string',
        values: ['Test string'],
      },
    );
    /** Delete a metadata partition. */
    await gapi.client.dataplex.projects.locations.lakes.zones.entities.partitions.delete(
      {
        etag: 'Test string',
        name: 'Test string',
      },
    );
    /** Get a metadata partition of an entity. */
    await gapi.client.dataplex.projects.locations.lakes.zones.entities.partitions.get(
      {
        name: 'Test string',
      },
    );
    /** List metadata partitions of an entity. */
    await gapi.client.dataplex.projects.locations.lakes.zones.entities.partitions.list(
      {
        filter: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
    /** Cancels a metadata job.If you cancel a metadata import job that is in progress, the changes in the job might be partially applied. We recommend that you reset the state of the entry groups in your project by running another metadata job that reverts the changes from the canceled job. */
    await gapi.client.dataplex.projects.locations.metadataJobs.cancel(
      {
        name: 'Test string',
      },
      {},
    );
    /** Creates a metadata job. For example, use a metadata job to import Dataplex Catalog entries and aspects from a third-party system into Dataplex. */
    await gapi.client.dataplex.projects.locations.metadataJobs.create(
      {
        metadataJobId: 'Test string',
        parent: 'Test string',
        validateOnly: true,
      },
      {
        createTime: 'Test string',
        importResult: {
          createdEntries: 'Test string',
          deletedEntries: 'Test string',
          recreatedEntries: 'Test string',
          unchangedEntries: 'Test string',
          updatedEntries: 'Test string',
          updateTime: 'Test string',
        },
        importSpec: {
          aspectSyncMode: 'Test string',
          entrySyncMode: 'Test string',
          logLevel: 'Test string',
          scope: {
            aspectTypes: ['Test string'],
            entryGroups: ['Test string'],
            entryTypes: ['Test string'],
          },
          sourceCreateTime: 'Test string',
          sourceStorageUri: 'Test string',
        },
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        status: {
          completionPercent: 42,
          message: 'Test string',
          state: 'Test string',
          updateTime: 'Test string',
        },
        type: 'Test string',
        uid: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Gets a metadata job. */
    await gapi.client.dataplex.projects.locations.metadataJobs.get({
      name: 'Test string',
    });
    /** Lists metadata jobs. */
    await gapi.client.dataplex.projects.locations.metadataJobs.list({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns google.rpc.Code.UNIMPLEMENTED. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to Code.CANCELLED. */
    await gapi.client.dataplex.projects.locations.operations.cancel(
      {
        name: 'Test string',
      },
      {},
    );
    /** Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns google.rpc.Code.UNIMPLEMENTED. */
    await gapi.client.dataplex.projects.locations.operations.delete({
      name: 'Test string',
    });
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.dataplex.projects.locations.operations.get({
      name: 'Test string',
    });
    /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns UNIMPLEMENTED. */
    await gapi.client.dataplex.projects.locations.operations.list({
      filter: 'Test string',
      name: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
  }
});
