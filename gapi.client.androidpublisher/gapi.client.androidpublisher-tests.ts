/* This is stub file for gapi.client.androidpublisher definition tests */
/* IMPORTANT.
* This file was automatically generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
* In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
**/
gapi.load('client', () => {
    /** now we can use gapi.client */
    gapi.client.load('androidpublisher', 'v3', () => {
        /** now we can use gapi.client.androidpublisher */

        /** don't forget to authenticate your client before sending any request to resources: */
        /** declare client_id registered in Google Developers Console */
        const client_id = '<<PUT YOUR CLIENT ID HERE>>';
        const scope = [
            /** View and manage your Google Play Developer account */
            'https://www.googleapis.com/auth/androidpublisher',
        ];
        const immediate = false;
        gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
            if (authResult && !authResult.error) {
                /** handle successful authorization */
                run();
            } else {
                /** handle authorization error */
            }
        });
    });

    async function run() {
        /** Commits an app edit. */
        await gapi.client.androidpublisher.edits.commit({
            editId: "Test string",
            packageName: "Test string",
        });
        /**
         * Creates a new APK without uploading the APK itself to Google Play, instead hosting the APK at a specified URL. This function is only available to organizations using Managed Play whose
         * application is configured to restrict distribution to the organizations.
         */
        await gapi.client.androidpublisher.edits.apks.addexternallyhosted({
            editId: "Test string",
            packageName: "Test string",
        }, {
            externallyHostedApk: {
                applicationLabel: "Test string",
                certificateBase64s: [
                    "Test string"                ],
                externallyHostedUrl: "Test string",
                fileSha1Base64: "Test string",
                fileSha256Base64: "Test string",
                fileSize: "Test string",
                iconBase64: "Test string",
                maximumSdk: 42,
                minimumSdk: 42,
                nativeCodes: [
                    "Test string"                ],
                packageName: "Test string",
                usesFeatures: [
                    "Test string"                ],
                usesPermissions: [
                    {
                        maxSdkVersion: 42,
                        name: "Test string",
                    }                ],
                versionCode: 42,
                versionName: "Test string",
            },
        });
        /** Lists all current APKs of the app and edit. */
        await gapi.client.androidpublisher.edits.apks.list({
            editId: "Test string",
            packageName: "Test string",
        });
        /** Uploads an APK and adds to the current edit. */
        await gapi.client.androidpublisher.edits.apks.upload({
            editId: "Test string",
            packageName: "Test string",
        });
        /** Lists all current Android App Bundles of the app and edit. */
        await gapi.client.androidpublisher.edits.bundles.list({
            editId: "Test string",
            packageName: "Test string",
        });
        /**
         * Uploads a new Android App Bundle to this edit. If you are using the Google API client libraries, please increase the timeout of the http request before calling this endpoint (a timeout
         * of 2 minutes is recommended). See [Timeouts and Errors](https://developers.google.com/api-client-library/java/google-api-java-client/errors) for an example in java.
         */
        await gapi.client.androidpublisher.edits.bundles.upload({
            ackBundleInstallationWarning: true,
            editId: "Test string",
            packageName: "Test string",
        });
        /** Uploads a new deobfuscation file and attaches to the specified APK. */
        await gapi.client.androidpublisher.edits.deobfuscationfiles.upload({
            apkVersionCode: 42,
            deobfuscationFileType: "Test string",
            editId: "Test string",
            packageName: "Test string",
        });
        /** Gets details of an app. */
        await gapi.client.androidpublisher.edits.details.get({
            editId: "Test string",
            packageName: "Test string",
        });
        /** Patches details of an app. */
        await gapi.client.androidpublisher.edits.details.patch({
            editId: "Test string",
            packageName: "Test string",
        }, {
            contactEmail: "Test string",
            contactPhone: "Test string",
            contactWebsite: "Test string",
            defaultLanguage: "Test string",
        });
        /** Updates details of an app. */
        await gapi.client.androidpublisher.edits.details.update({
            editId: "Test string",
            packageName: "Test string",
        }, {
            contactEmail: "Test string",
            contactPhone: "Test string",
            contactWebsite: "Test string",
            defaultLanguage: "Test string",
        });
        /** Fetches the expansion file configuration for the specified APK. */
        await gapi.client.androidpublisher.edits.expansionfiles.get({
            apkVersionCode: 42,
            editId: "Test string",
            expansionFileType: "Test string",
            packageName: "Test string",
        });
        /** Patches the APK's expansion file configuration to reference another APK's expansion file. To add a new expansion file use the Upload method. */
        await gapi.client.androidpublisher.edits.expansionfiles.patch({
            apkVersionCode: 42,
            editId: "Test string",
            expansionFileType: "Test string",
            packageName: "Test string",
        }, {
            fileSize: "Test string",
            referencesVersion: 42,
        });
        /** Updates the APK's expansion file configuration to reference another APK's expansion file. To add a new expansion file use the Upload method. */
        await gapi.client.androidpublisher.edits.expansionfiles.update({
            apkVersionCode: 42,
            editId: "Test string",
            expansionFileType: "Test string",
            packageName: "Test string",
        }, {
            fileSize: "Test string",
            referencesVersion: 42,
        });
        /** Uploads a new expansion file and attaches to the specified APK. */
        await gapi.client.androidpublisher.edits.expansionfiles.upload({
            apkVersionCode: 42,
            editId: "Test string",
            expansionFileType: "Test string",
            packageName: "Test string",
        });
        /** Deletes the image (specified by id) from the edit. */
        await gapi.client.androidpublisher.edits.images.delete({
            editId: "Test string",
            imageId: "Test string",
            imageType: "Test string",
            language: "Test string",
            packageName: "Test string",
        });
        /** Deletes all images for the specified language and image type. Returns an empty response if no images are found. */
        await gapi.client.androidpublisher.edits.images.deleteall({
            editId: "Test string",
            imageType: "Test string",
            language: "Test string",
            packageName: "Test string",
        });
        /** Lists all images. The response may be empty. */
        await gapi.client.androidpublisher.edits.images.list({
            editId: "Test string",
            imageType: "Test string",
            language: "Test string",
            packageName: "Test string",
        });
        /** Uploads an image of the specified language and image type, and adds to the edit. */
        await gapi.client.androidpublisher.edits.images.upload({
            editId: "Test string",
            imageType: "Test string",
            language: "Test string",
            packageName: "Test string",
        });
        /** Deletes a localized store listing. */
        await gapi.client.androidpublisher.edits.listings.delete({
            editId: "Test string",
            language: "Test string",
            packageName: "Test string",
        });
        /** Deletes all store listings. */
        await gapi.client.androidpublisher.edits.listings.deleteall({
            editId: "Test string",
            packageName: "Test string",
        });
        /** Gets a localized store listing. */
        await gapi.client.androidpublisher.edits.listings.get({
            editId: "Test string",
            language: "Test string",
            packageName: "Test string",
        });
        /** Lists all localized store listings. */
        await gapi.client.androidpublisher.edits.listings.list({
            editId: "Test string",
            packageName: "Test string",
        });
        /** Patches a localized store listing. */
        await gapi.client.androidpublisher.edits.listings.patch({
            editId: "Test string",
            language: "Test string",
            packageName: "Test string",
        }, {
            fullDescription: "Test string",
            language: "Test string",
            shortDescription: "Test string",
            title: "Test string",
            video: "Test string",
        });
        /** Creates or updates a localized store listing. */
        await gapi.client.androidpublisher.edits.listings.update({
            editId: "Test string",
            language: "Test string",
            packageName: "Test string",
        }, {
            fullDescription: "Test string",
            language: "Test string",
            shortDescription: "Test string",
            title: "Test string",
            video: "Test string",
        });
        /** Gets testers. */
        await gapi.client.androidpublisher.edits.testers.get({
            editId: "Test string",
            packageName: "Test string",
            track: "Test string",
        });
        /** Patches testers. */
        await gapi.client.androidpublisher.edits.testers.patch({
            editId: "Test string",
            packageName: "Test string",
            track: "Test string",
        }, {
            googleGroups: [
                "Test string"            ],
        });
        /** Updates testers. */
        await gapi.client.androidpublisher.edits.testers.update({
            editId: "Test string",
            packageName: "Test string",
            track: "Test string",
        }, {
            googleGroups: [
                "Test string"            ],
        });
        /** Gets a track. */
        await gapi.client.androidpublisher.edits.tracks.get({
            editId: "Test string",
            packageName: "Test string",
            track: "Test string",
        });
        /** Lists all tracks. */
        await gapi.client.androidpublisher.edits.tracks.list({
            editId: "Test string",
            packageName: "Test string",
        });
        /** Patches a track. */
        await gapi.client.androidpublisher.edits.tracks.patch({
            editId: "Test string",
            packageName: "Test string",
            track: "Test string",
        }, {
            releases: [
                {
                    countryTargeting: {
                        countries: [
                            "Test string"                        ],
                        includeRestOfWorld: true,
                    },
                    inAppUpdatePriority: 42,
                    name: "Test string",
                    releaseNotes: [
                        {
                            language: "Test string",
                            text: "Test string",
                        }                    ],
                    status: "Test string",
                    userFraction: 42,
                    versionCodes: [
                        "Test string"                    ],
                }            ],
            track: "Test string",
        });
        /** Updates a track. */
        await gapi.client.androidpublisher.edits.tracks.update({
            editId: "Test string",
            packageName: "Test string",
            track: "Test string",
        }, {
            releases: [
                {
                    countryTargeting: {
                        countries: [
                            "Test string"                        ],
                        includeRestOfWorld: true,
                    },
                    inAppUpdatePriority: 42,
                    name: "Test string",
                    releaseNotes: [
                        {
                            language: "Test string",
                            text: "Test string",
                        }                    ],
                    status: "Test string",
                    userFraction: 42,
                    versionCodes: [
                        "Test string"                    ],
                }            ],
            track: "Test string",
        });
        /** Deletes an app edit. */
        await gapi.client.androidpublisher.edits.delete({
            editId: "Test string",
            packageName: "Test string",
        });
        /**
         * Creates a new APK without uploading the APK itself to Google Play, instead hosting the APK at a specified URL. This function is only available to organizations using Managed Play whose
         * application is configured to restrict distribution to the organizations.
         */
        await gapi.client.androidpublisher.edits.apks.addexternallyhosted({
            editId: "Test string",
            packageName: "Test string",
        }, {
            externallyHostedApk: {
                applicationLabel: "Test string",
                certificateBase64s: [
                    "Test string"                ],
                externallyHostedUrl: "Test string",
                fileSha1Base64: "Test string",
                fileSha256Base64: "Test string",
                fileSize: "Test string",
                iconBase64: "Test string",
                maximumSdk: 42,
                minimumSdk: 42,
                nativeCodes: [
                    "Test string"                ],
                packageName: "Test string",
                usesFeatures: [
                    "Test string"                ],
                usesPermissions: [
                    {
                        maxSdkVersion: 42,
                        name: "Test string",
                    }                ],
                versionCode: 42,
                versionName: "Test string",
            },
        });
        /** Lists all current APKs of the app and edit. */
        await gapi.client.androidpublisher.edits.apks.list({
            editId: "Test string",
            packageName: "Test string",
        });
        /** Uploads an APK and adds to the current edit. */
        await gapi.client.androidpublisher.edits.apks.upload({
            editId: "Test string",
            packageName: "Test string",
        });
        /** Lists all current Android App Bundles of the app and edit. */
        await gapi.client.androidpublisher.edits.bundles.list({
            editId: "Test string",
            packageName: "Test string",
        });
        /**
         * Uploads a new Android App Bundle to this edit. If you are using the Google API client libraries, please increase the timeout of the http request before calling this endpoint (a timeout
         * of 2 minutes is recommended). See [Timeouts and Errors](https://developers.google.com/api-client-library/java/google-api-java-client/errors) for an example in java.
         */
        await gapi.client.androidpublisher.edits.bundles.upload({
            ackBundleInstallationWarning: true,
            editId: "Test string",
            packageName: "Test string",
        });
        /** Uploads a new deobfuscation file and attaches to the specified APK. */
        await gapi.client.androidpublisher.edits.deobfuscationfiles.upload({
            apkVersionCode: 42,
            deobfuscationFileType: "Test string",
            editId: "Test string",
            packageName: "Test string",
        });
        /** Gets details of an app. */
        await gapi.client.androidpublisher.edits.details.get({
            editId: "Test string",
            packageName: "Test string",
        });
        /** Patches details of an app. */
        await gapi.client.androidpublisher.edits.details.patch({
            editId: "Test string",
            packageName: "Test string",
        }, {
            contactEmail: "Test string",
            contactPhone: "Test string",
            contactWebsite: "Test string",
            defaultLanguage: "Test string",
        });
        /** Updates details of an app. */
        await gapi.client.androidpublisher.edits.details.update({
            editId: "Test string",
            packageName: "Test string",
        }, {
            contactEmail: "Test string",
            contactPhone: "Test string",
            contactWebsite: "Test string",
            defaultLanguage: "Test string",
        });
        /** Fetches the expansion file configuration for the specified APK. */
        await gapi.client.androidpublisher.edits.expansionfiles.get({
            apkVersionCode: 42,
            editId: "Test string",
            expansionFileType: "Test string",
            packageName: "Test string",
        });
        /** Patches the APK's expansion file configuration to reference another APK's expansion file. To add a new expansion file use the Upload method. */
        await gapi.client.androidpublisher.edits.expansionfiles.patch({
            apkVersionCode: 42,
            editId: "Test string",
            expansionFileType: "Test string",
            packageName: "Test string",
        }, {
            fileSize: "Test string",
            referencesVersion: 42,
        });
        /** Updates the APK's expansion file configuration to reference another APK's expansion file. To add a new expansion file use the Upload method. */
        await gapi.client.androidpublisher.edits.expansionfiles.update({
            apkVersionCode: 42,
            editId: "Test string",
            expansionFileType: "Test string",
            packageName: "Test string",
        }, {
            fileSize: "Test string",
            referencesVersion: 42,
        });
        /** Uploads a new expansion file and attaches to the specified APK. */
        await gapi.client.androidpublisher.edits.expansionfiles.upload({
            apkVersionCode: 42,
            editId: "Test string",
            expansionFileType: "Test string",
            packageName: "Test string",
        });
        /** Deletes the image (specified by id) from the edit. */
        await gapi.client.androidpublisher.edits.images.delete({
            editId: "Test string",
            imageId: "Test string",
            imageType: "Test string",
            language: "Test string",
            packageName: "Test string",
        });
        /** Deletes all images for the specified language and image type. Returns an empty response if no images are found. */
        await gapi.client.androidpublisher.edits.images.deleteall({
            editId: "Test string",
            imageType: "Test string",
            language: "Test string",
            packageName: "Test string",
        });
        /** Lists all images. The response may be empty. */
        await gapi.client.androidpublisher.edits.images.list({
            editId: "Test string",
            imageType: "Test string",
            language: "Test string",
            packageName: "Test string",
        });
        /** Uploads an image of the specified language and image type, and adds to the edit. */
        await gapi.client.androidpublisher.edits.images.upload({
            editId: "Test string",
            imageType: "Test string",
            language: "Test string",
            packageName: "Test string",
        });
        /** Deletes a localized store listing. */
        await gapi.client.androidpublisher.edits.listings.delete({
            editId: "Test string",
            language: "Test string",
            packageName: "Test string",
        });
        /** Deletes all store listings. */
        await gapi.client.androidpublisher.edits.listings.deleteall({
            editId: "Test string",
            packageName: "Test string",
        });
        /** Gets a localized store listing. */
        await gapi.client.androidpublisher.edits.listings.get({
            editId: "Test string",
            language: "Test string",
            packageName: "Test string",
        });
        /** Lists all localized store listings. */
        await gapi.client.androidpublisher.edits.listings.list({
            editId: "Test string",
            packageName: "Test string",
        });
        /** Patches a localized store listing. */
        await gapi.client.androidpublisher.edits.listings.patch({
            editId: "Test string",
            language: "Test string",
            packageName: "Test string",
        }, {
            fullDescription: "Test string",
            language: "Test string",
            shortDescription: "Test string",
            title: "Test string",
            video: "Test string",
        });
        /** Creates or updates a localized store listing. */
        await gapi.client.androidpublisher.edits.listings.update({
            editId: "Test string",
            language: "Test string",
            packageName: "Test string",
        }, {
            fullDescription: "Test string",
            language: "Test string",
            shortDescription: "Test string",
            title: "Test string",
            video: "Test string",
        });
        /** Gets testers. */
        await gapi.client.androidpublisher.edits.testers.get({
            editId: "Test string",
            packageName: "Test string",
            track: "Test string",
        });
        /** Patches testers. */
        await gapi.client.androidpublisher.edits.testers.patch({
            editId: "Test string",
            packageName: "Test string",
            track: "Test string",
        }, {
            googleGroups: [
                "Test string"            ],
        });
        /** Updates testers. */
        await gapi.client.androidpublisher.edits.testers.update({
            editId: "Test string",
            packageName: "Test string",
            track: "Test string",
        }, {
            googleGroups: [
                "Test string"            ],
        });
        /** Gets a track. */
        await gapi.client.androidpublisher.edits.tracks.get({
            editId: "Test string",
            packageName: "Test string",
            track: "Test string",
        });
        /** Lists all tracks. */
        await gapi.client.androidpublisher.edits.tracks.list({
            editId: "Test string",
            packageName: "Test string",
        });
        /** Patches a track. */
        await gapi.client.androidpublisher.edits.tracks.patch({
            editId: "Test string",
            packageName: "Test string",
            track: "Test string",
        }, {
            releases: [
                {
                    countryTargeting: {
                        countries: [
                            "Test string"                        ],
                        includeRestOfWorld: true,
                    },
                    inAppUpdatePriority: 42,
                    name: "Test string",
                    releaseNotes: [
                        {
                            language: "Test string",
                            text: "Test string",
                        }                    ],
                    status: "Test string",
                    userFraction: 42,
                    versionCodes: [
                        "Test string"                    ],
                }            ],
            track: "Test string",
        });
        /** Updates a track. */
        await gapi.client.androidpublisher.edits.tracks.update({
            editId: "Test string",
            packageName: "Test string",
            track: "Test string",
        }, {
            releases: [
                {
                    countryTargeting: {
                        countries: [
                            "Test string"                        ],
                        includeRestOfWorld: true,
                    },
                    inAppUpdatePriority: 42,
                    name: "Test string",
                    releaseNotes: [
                        {
                            language: "Test string",
                            text: "Test string",
                        }                    ],
                    status: "Test string",
                    userFraction: 42,
                    versionCodes: [
                        "Test string"                    ],
                }            ],
            track: "Test string",
        });
        /** Gets an app edit. */
        await gapi.client.androidpublisher.edits.get({
            editId: "Test string",
            packageName: "Test string",
        });
        /**
         * Creates a new APK without uploading the APK itself to Google Play, instead hosting the APK at a specified URL. This function is only available to organizations using Managed Play whose
         * application is configured to restrict distribution to the organizations.
         */
        await gapi.client.androidpublisher.edits.apks.addexternallyhosted({
            editId: "Test string",
            packageName: "Test string",
        }, {
            externallyHostedApk: {
                applicationLabel: "Test string",
                certificateBase64s: [
                    "Test string"                ],
                externallyHostedUrl: "Test string",
                fileSha1Base64: "Test string",
                fileSha256Base64: "Test string",
                fileSize: "Test string",
                iconBase64: "Test string",
                maximumSdk: 42,
                minimumSdk: 42,
                nativeCodes: [
                    "Test string"                ],
                packageName: "Test string",
                usesFeatures: [
                    "Test string"                ],
                usesPermissions: [
                    {
                        maxSdkVersion: 42,
                        name: "Test string",
                    }                ],
                versionCode: 42,
                versionName: "Test string",
            },
        });
        /** Lists all current APKs of the app and edit. */
        await gapi.client.androidpublisher.edits.apks.list({
            editId: "Test string",
            packageName: "Test string",
        });
        /** Uploads an APK and adds to the current edit. */
        await gapi.client.androidpublisher.edits.apks.upload({
            editId: "Test string",
            packageName: "Test string",
        });
        /** Lists all current Android App Bundles of the app and edit. */
        await gapi.client.androidpublisher.edits.bundles.list({
            editId: "Test string",
            packageName: "Test string",
        });
        /**
         * Uploads a new Android App Bundle to this edit. If you are using the Google API client libraries, please increase the timeout of the http request before calling this endpoint (a timeout
         * of 2 minutes is recommended). See [Timeouts and Errors](https://developers.google.com/api-client-library/java/google-api-java-client/errors) for an example in java.
         */
        await gapi.client.androidpublisher.edits.bundles.upload({
            ackBundleInstallationWarning: true,
            editId: "Test string",
            packageName: "Test string",
        });
        /** Uploads a new deobfuscation file and attaches to the specified APK. */
        await gapi.client.androidpublisher.edits.deobfuscationfiles.upload({
            apkVersionCode: 42,
            deobfuscationFileType: "Test string",
            editId: "Test string",
            packageName: "Test string",
        });
        /** Gets details of an app. */
        await gapi.client.androidpublisher.edits.details.get({
            editId: "Test string",
            packageName: "Test string",
        });
        /** Patches details of an app. */
        await gapi.client.androidpublisher.edits.details.patch({
            editId: "Test string",
            packageName: "Test string",
        }, {
            contactEmail: "Test string",
            contactPhone: "Test string",
            contactWebsite: "Test string",
            defaultLanguage: "Test string",
        });
        /** Updates details of an app. */
        await gapi.client.androidpublisher.edits.details.update({
            editId: "Test string",
            packageName: "Test string",
        }, {
            contactEmail: "Test string",
            contactPhone: "Test string",
            contactWebsite: "Test string",
            defaultLanguage: "Test string",
        });
        /** Fetches the expansion file configuration for the specified APK. */
        await gapi.client.androidpublisher.edits.expansionfiles.get({
            apkVersionCode: 42,
            editId: "Test string",
            expansionFileType: "Test string",
            packageName: "Test string",
        });
        /** Patches the APK's expansion file configuration to reference another APK's expansion file. To add a new expansion file use the Upload method. */
        await gapi.client.androidpublisher.edits.expansionfiles.patch({
            apkVersionCode: 42,
            editId: "Test string",
            expansionFileType: "Test string",
            packageName: "Test string",
        }, {
            fileSize: "Test string",
            referencesVersion: 42,
        });
        /** Updates the APK's expansion file configuration to reference another APK's expansion file. To add a new expansion file use the Upload method. */
        await gapi.client.androidpublisher.edits.expansionfiles.update({
            apkVersionCode: 42,
            editId: "Test string",
            expansionFileType: "Test string",
            packageName: "Test string",
        }, {
            fileSize: "Test string",
            referencesVersion: 42,
        });
        /** Uploads a new expansion file and attaches to the specified APK. */
        await gapi.client.androidpublisher.edits.expansionfiles.upload({
            apkVersionCode: 42,
            editId: "Test string",
            expansionFileType: "Test string",
            packageName: "Test string",
        });
        /** Deletes the image (specified by id) from the edit. */
        await gapi.client.androidpublisher.edits.images.delete({
            editId: "Test string",
            imageId: "Test string",
            imageType: "Test string",
            language: "Test string",
            packageName: "Test string",
        });
        /** Deletes all images for the specified language and image type. Returns an empty response if no images are found. */
        await gapi.client.androidpublisher.edits.images.deleteall({
            editId: "Test string",
            imageType: "Test string",
            language: "Test string",
            packageName: "Test string",
        });
        /** Lists all images. The response may be empty. */
        await gapi.client.androidpublisher.edits.images.list({
            editId: "Test string",
            imageType: "Test string",
            language: "Test string",
            packageName: "Test string",
        });
        /** Uploads an image of the specified language and image type, and adds to the edit. */
        await gapi.client.androidpublisher.edits.images.upload({
            editId: "Test string",
            imageType: "Test string",
            language: "Test string",
            packageName: "Test string",
        });
        /** Deletes a localized store listing. */
        await gapi.client.androidpublisher.edits.listings.delete({
            editId: "Test string",
            language: "Test string",
            packageName: "Test string",
        });
        /** Deletes all store listings. */
        await gapi.client.androidpublisher.edits.listings.deleteall({
            editId: "Test string",
            packageName: "Test string",
        });
        /** Gets a localized store listing. */
        await gapi.client.androidpublisher.edits.listings.get({
            editId: "Test string",
            language: "Test string",
            packageName: "Test string",
        });
        /** Lists all localized store listings. */
        await gapi.client.androidpublisher.edits.listings.list({
            editId: "Test string",
            packageName: "Test string",
        });
        /** Patches a localized store listing. */
        await gapi.client.androidpublisher.edits.listings.patch({
            editId: "Test string",
            language: "Test string",
            packageName: "Test string",
        }, {
            fullDescription: "Test string",
            language: "Test string",
            shortDescription: "Test string",
            title: "Test string",
            video: "Test string",
        });
        /** Creates or updates a localized store listing. */
        await gapi.client.androidpublisher.edits.listings.update({
            editId: "Test string",
            language: "Test string",
            packageName: "Test string",
        }, {
            fullDescription: "Test string",
            language: "Test string",
            shortDescription: "Test string",
            title: "Test string",
            video: "Test string",
        });
        /** Gets testers. */
        await gapi.client.androidpublisher.edits.testers.get({
            editId: "Test string",
            packageName: "Test string",
            track: "Test string",
        });
        /** Patches testers. */
        await gapi.client.androidpublisher.edits.testers.patch({
            editId: "Test string",
            packageName: "Test string",
            track: "Test string",
        }, {
            googleGroups: [
                "Test string"            ],
        });
        /** Updates testers. */
        await gapi.client.androidpublisher.edits.testers.update({
            editId: "Test string",
            packageName: "Test string",
            track: "Test string",
        }, {
            googleGroups: [
                "Test string"            ],
        });
        /** Gets a track. */
        await gapi.client.androidpublisher.edits.tracks.get({
            editId: "Test string",
            packageName: "Test string",
            track: "Test string",
        });
        /** Lists all tracks. */
        await gapi.client.androidpublisher.edits.tracks.list({
            editId: "Test string",
            packageName: "Test string",
        });
        /** Patches a track. */
        await gapi.client.androidpublisher.edits.tracks.patch({
            editId: "Test string",
            packageName: "Test string",
            track: "Test string",
        }, {
            releases: [
                {
                    countryTargeting: {
                        countries: [
                            "Test string"                        ],
                        includeRestOfWorld: true,
                    },
                    inAppUpdatePriority: 42,
                    name: "Test string",
                    releaseNotes: [
                        {
                            language: "Test string",
                            text: "Test string",
                        }                    ],
                    status: "Test string",
                    userFraction: 42,
                    versionCodes: [
                        "Test string"                    ],
                }            ],
            track: "Test string",
        });
        /** Updates a track. */
        await gapi.client.androidpublisher.edits.tracks.update({
            editId: "Test string",
            packageName: "Test string",
            track: "Test string",
        }, {
            releases: [
                {
                    countryTargeting: {
                        countries: [
                            "Test string"                        ],
                        includeRestOfWorld: true,
                    },
                    inAppUpdatePriority: 42,
                    name: "Test string",
                    releaseNotes: [
                        {
                            language: "Test string",
                            text: "Test string",
                        }                    ],
                    status: "Test string",
                    userFraction: 42,
                    versionCodes: [
                        "Test string"                    ],
                }            ],
            track: "Test string",
        });
        /** Creates a new edit for an app. */
        await gapi.client.androidpublisher.edits.insert({
            packageName: "Test string",
        }, {
            expiryTimeSeconds: "Test string",
            id: "Test string",
        });
        /**
         * Creates a new APK without uploading the APK itself to Google Play, instead hosting the APK at a specified URL. This function is only available to organizations using Managed Play whose
         * application is configured to restrict distribution to the organizations.
         */
        await gapi.client.androidpublisher.edits.apks.addexternallyhosted({
            editId: "Test string",
            packageName: "Test string",
        }, {
            externallyHostedApk: {
                applicationLabel: "Test string",
                certificateBase64s: [
                    "Test string"                ],
                externallyHostedUrl: "Test string",
                fileSha1Base64: "Test string",
                fileSha256Base64: "Test string",
                fileSize: "Test string",
                iconBase64: "Test string",
                maximumSdk: 42,
                minimumSdk: 42,
                nativeCodes: [
                    "Test string"                ],
                packageName: "Test string",
                usesFeatures: [
                    "Test string"                ],
                usesPermissions: [
                    {
                        maxSdkVersion: 42,
                        name: "Test string",
                    }                ],
                versionCode: 42,
                versionName: "Test string",
            },
        });
        /** Lists all current APKs of the app and edit. */
        await gapi.client.androidpublisher.edits.apks.list({
            editId: "Test string",
            packageName: "Test string",
        });
        /** Uploads an APK and adds to the current edit. */
        await gapi.client.androidpublisher.edits.apks.upload({
            editId: "Test string",
            packageName: "Test string",
        });
        /** Lists all current Android App Bundles of the app and edit. */
        await gapi.client.androidpublisher.edits.bundles.list({
            editId: "Test string",
            packageName: "Test string",
        });
        /**
         * Uploads a new Android App Bundle to this edit. If you are using the Google API client libraries, please increase the timeout of the http request before calling this endpoint (a timeout
         * of 2 minutes is recommended). See [Timeouts and Errors](https://developers.google.com/api-client-library/java/google-api-java-client/errors) for an example in java.
         */
        await gapi.client.androidpublisher.edits.bundles.upload({
            ackBundleInstallationWarning: true,
            editId: "Test string",
            packageName: "Test string",
        });
        /** Uploads a new deobfuscation file and attaches to the specified APK. */
        await gapi.client.androidpublisher.edits.deobfuscationfiles.upload({
            apkVersionCode: 42,
            deobfuscationFileType: "Test string",
            editId: "Test string",
            packageName: "Test string",
        });
        /** Gets details of an app. */
        await gapi.client.androidpublisher.edits.details.get({
            editId: "Test string",
            packageName: "Test string",
        });
        /** Patches details of an app. */
        await gapi.client.androidpublisher.edits.details.patch({
            editId: "Test string",
            packageName: "Test string",
        }, {
            contactEmail: "Test string",
            contactPhone: "Test string",
            contactWebsite: "Test string",
            defaultLanguage: "Test string",
        });
        /** Updates details of an app. */
        await gapi.client.androidpublisher.edits.details.update({
            editId: "Test string",
            packageName: "Test string",
        }, {
            contactEmail: "Test string",
            contactPhone: "Test string",
            contactWebsite: "Test string",
            defaultLanguage: "Test string",
        });
        /** Fetches the expansion file configuration for the specified APK. */
        await gapi.client.androidpublisher.edits.expansionfiles.get({
            apkVersionCode: 42,
            editId: "Test string",
            expansionFileType: "Test string",
            packageName: "Test string",
        });
        /** Patches the APK's expansion file configuration to reference another APK's expansion file. To add a new expansion file use the Upload method. */
        await gapi.client.androidpublisher.edits.expansionfiles.patch({
            apkVersionCode: 42,
            editId: "Test string",
            expansionFileType: "Test string",
            packageName: "Test string",
        }, {
            fileSize: "Test string",
            referencesVersion: 42,
        });
        /** Updates the APK's expansion file configuration to reference another APK's expansion file. To add a new expansion file use the Upload method. */
        await gapi.client.androidpublisher.edits.expansionfiles.update({
            apkVersionCode: 42,
            editId: "Test string",
            expansionFileType: "Test string",
            packageName: "Test string",
        }, {
            fileSize: "Test string",
            referencesVersion: 42,
        });
        /** Uploads a new expansion file and attaches to the specified APK. */
        await gapi.client.androidpublisher.edits.expansionfiles.upload({
            apkVersionCode: 42,
            editId: "Test string",
            expansionFileType: "Test string",
            packageName: "Test string",
        });
        /** Deletes the image (specified by id) from the edit. */
        await gapi.client.androidpublisher.edits.images.delete({
            editId: "Test string",
            imageId: "Test string",
            imageType: "Test string",
            language: "Test string",
            packageName: "Test string",
        });
        /** Deletes all images for the specified language and image type. Returns an empty response if no images are found. */
        await gapi.client.androidpublisher.edits.images.deleteall({
            editId: "Test string",
            imageType: "Test string",
            language: "Test string",
            packageName: "Test string",
        });
        /** Lists all images. The response may be empty. */
        await gapi.client.androidpublisher.edits.images.list({
            editId: "Test string",
            imageType: "Test string",
            language: "Test string",
            packageName: "Test string",
        });
        /** Uploads an image of the specified language and image type, and adds to the edit. */
        await gapi.client.androidpublisher.edits.images.upload({
            editId: "Test string",
            imageType: "Test string",
            language: "Test string",
            packageName: "Test string",
        });
        /** Deletes a localized store listing. */
        await gapi.client.androidpublisher.edits.listings.delete({
            editId: "Test string",
            language: "Test string",
            packageName: "Test string",
        });
        /** Deletes all store listings. */
        await gapi.client.androidpublisher.edits.listings.deleteall({
            editId: "Test string",
            packageName: "Test string",
        });
        /** Gets a localized store listing. */
        await gapi.client.androidpublisher.edits.listings.get({
            editId: "Test string",
            language: "Test string",
            packageName: "Test string",
        });
        /** Lists all localized store listings. */
        await gapi.client.androidpublisher.edits.listings.list({
            editId: "Test string",
            packageName: "Test string",
        });
        /** Patches a localized store listing. */
        await gapi.client.androidpublisher.edits.listings.patch({
            editId: "Test string",
            language: "Test string",
            packageName: "Test string",
        }, {
            fullDescription: "Test string",
            language: "Test string",
            shortDescription: "Test string",
            title: "Test string",
            video: "Test string",
        });
        /** Creates or updates a localized store listing. */
        await gapi.client.androidpublisher.edits.listings.update({
            editId: "Test string",
            language: "Test string",
            packageName: "Test string",
        }, {
            fullDescription: "Test string",
            language: "Test string",
            shortDescription: "Test string",
            title: "Test string",
            video: "Test string",
        });
        /** Gets testers. */
        await gapi.client.androidpublisher.edits.testers.get({
            editId: "Test string",
            packageName: "Test string",
            track: "Test string",
        });
        /** Patches testers. */
        await gapi.client.androidpublisher.edits.testers.patch({
            editId: "Test string",
            packageName: "Test string",
            track: "Test string",
        }, {
            googleGroups: [
                "Test string"            ],
        });
        /** Updates testers. */
        await gapi.client.androidpublisher.edits.testers.update({
            editId: "Test string",
            packageName: "Test string",
            track: "Test string",
        }, {
            googleGroups: [
                "Test string"            ],
        });
        /** Gets a track. */
        await gapi.client.androidpublisher.edits.tracks.get({
            editId: "Test string",
            packageName: "Test string",
            track: "Test string",
        });
        /** Lists all tracks. */
        await gapi.client.androidpublisher.edits.tracks.list({
            editId: "Test string",
            packageName: "Test string",
        });
        /** Patches a track. */
        await gapi.client.androidpublisher.edits.tracks.patch({
            editId: "Test string",
            packageName: "Test string",
            track: "Test string",
        }, {
            releases: [
                {
                    countryTargeting: {
                        countries: [
                            "Test string"                        ],
                        includeRestOfWorld: true,
                    },
                    inAppUpdatePriority: 42,
                    name: "Test string",
                    releaseNotes: [
                        {
                            language: "Test string",
                            text: "Test string",
                        }                    ],
                    status: "Test string",
                    userFraction: 42,
                    versionCodes: [
                        "Test string"                    ],
                }            ],
            track: "Test string",
        });
        /** Updates a track. */
        await gapi.client.androidpublisher.edits.tracks.update({
            editId: "Test string",
            packageName: "Test string",
            track: "Test string",
        }, {
            releases: [
                {
                    countryTargeting: {
                        countries: [
                            "Test string"                        ],
                        includeRestOfWorld: true,
                    },
                    inAppUpdatePriority: 42,
                    name: "Test string",
                    releaseNotes: [
                        {
                            language: "Test string",
                            text: "Test string",
                        }                    ],
                    status: "Test string",
                    userFraction: 42,
                    versionCodes: [
                        "Test string"                    ],
                }            ],
            track: "Test string",
        });
        /** Validates an app edit. */
        await gapi.client.androidpublisher.edits.validate({
            editId: "Test string",
            packageName: "Test string",
        });
        /**
         * Creates a new APK without uploading the APK itself to Google Play, instead hosting the APK at a specified URL. This function is only available to organizations using Managed Play whose
         * application is configured to restrict distribution to the organizations.
         */
        await gapi.client.androidpublisher.edits.apks.addexternallyhosted({
            editId: "Test string",
            packageName: "Test string",
        }, {
            externallyHostedApk: {
                applicationLabel: "Test string",
                certificateBase64s: [
                    "Test string"                ],
                externallyHostedUrl: "Test string",
                fileSha1Base64: "Test string",
                fileSha256Base64: "Test string",
                fileSize: "Test string",
                iconBase64: "Test string",
                maximumSdk: 42,
                minimumSdk: 42,
                nativeCodes: [
                    "Test string"                ],
                packageName: "Test string",
                usesFeatures: [
                    "Test string"                ],
                usesPermissions: [
                    {
                        maxSdkVersion: 42,
                        name: "Test string",
                    }                ],
                versionCode: 42,
                versionName: "Test string",
            },
        });
        /** Lists all current APKs of the app and edit. */
        await gapi.client.androidpublisher.edits.apks.list({
            editId: "Test string",
            packageName: "Test string",
        });
        /** Uploads an APK and adds to the current edit. */
        await gapi.client.androidpublisher.edits.apks.upload({
            editId: "Test string",
            packageName: "Test string",
        });
        /** Lists all current Android App Bundles of the app and edit. */
        await gapi.client.androidpublisher.edits.bundles.list({
            editId: "Test string",
            packageName: "Test string",
        });
        /**
         * Uploads a new Android App Bundle to this edit. If you are using the Google API client libraries, please increase the timeout of the http request before calling this endpoint (a timeout
         * of 2 minutes is recommended). See [Timeouts and Errors](https://developers.google.com/api-client-library/java/google-api-java-client/errors) for an example in java.
         */
        await gapi.client.androidpublisher.edits.bundles.upload({
            ackBundleInstallationWarning: true,
            editId: "Test string",
            packageName: "Test string",
        });
        /** Uploads a new deobfuscation file and attaches to the specified APK. */
        await gapi.client.androidpublisher.edits.deobfuscationfiles.upload({
            apkVersionCode: 42,
            deobfuscationFileType: "Test string",
            editId: "Test string",
            packageName: "Test string",
        });
        /** Gets details of an app. */
        await gapi.client.androidpublisher.edits.details.get({
            editId: "Test string",
            packageName: "Test string",
        });
        /** Patches details of an app. */
        await gapi.client.androidpublisher.edits.details.patch({
            editId: "Test string",
            packageName: "Test string",
        }, {
            contactEmail: "Test string",
            contactPhone: "Test string",
            contactWebsite: "Test string",
            defaultLanguage: "Test string",
        });
        /** Updates details of an app. */
        await gapi.client.androidpublisher.edits.details.update({
            editId: "Test string",
            packageName: "Test string",
        }, {
            contactEmail: "Test string",
            contactPhone: "Test string",
            contactWebsite: "Test string",
            defaultLanguage: "Test string",
        });
        /** Fetches the expansion file configuration for the specified APK. */
        await gapi.client.androidpublisher.edits.expansionfiles.get({
            apkVersionCode: 42,
            editId: "Test string",
            expansionFileType: "Test string",
            packageName: "Test string",
        });
        /** Patches the APK's expansion file configuration to reference another APK's expansion file. To add a new expansion file use the Upload method. */
        await gapi.client.androidpublisher.edits.expansionfiles.patch({
            apkVersionCode: 42,
            editId: "Test string",
            expansionFileType: "Test string",
            packageName: "Test string",
        }, {
            fileSize: "Test string",
            referencesVersion: 42,
        });
        /** Updates the APK's expansion file configuration to reference another APK's expansion file. To add a new expansion file use the Upload method. */
        await gapi.client.androidpublisher.edits.expansionfiles.update({
            apkVersionCode: 42,
            editId: "Test string",
            expansionFileType: "Test string",
            packageName: "Test string",
        }, {
            fileSize: "Test string",
            referencesVersion: 42,
        });
        /** Uploads a new expansion file and attaches to the specified APK. */
        await gapi.client.androidpublisher.edits.expansionfiles.upload({
            apkVersionCode: 42,
            editId: "Test string",
            expansionFileType: "Test string",
            packageName: "Test string",
        });
        /** Deletes the image (specified by id) from the edit. */
        await gapi.client.androidpublisher.edits.images.delete({
            editId: "Test string",
            imageId: "Test string",
            imageType: "Test string",
            language: "Test string",
            packageName: "Test string",
        });
        /** Deletes all images for the specified language and image type. Returns an empty response if no images are found. */
        await gapi.client.androidpublisher.edits.images.deleteall({
            editId: "Test string",
            imageType: "Test string",
            language: "Test string",
            packageName: "Test string",
        });
        /** Lists all images. The response may be empty. */
        await gapi.client.androidpublisher.edits.images.list({
            editId: "Test string",
            imageType: "Test string",
            language: "Test string",
            packageName: "Test string",
        });
        /** Uploads an image of the specified language and image type, and adds to the edit. */
        await gapi.client.androidpublisher.edits.images.upload({
            editId: "Test string",
            imageType: "Test string",
            language: "Test string",
            packageName: "Test string",
        });
        /** Deletes a localized store listing. */
        await gapi.client.androidpublisher.edits.listings.delete({
            editId: "Test string",
            language: "Test string",
            packageName: "Test string",
        });
        /** Deletes all store listings. */
        await gapi.client.androidpublisher.edits.listings.deleteall({
            editId: "Test string",
            packageName: "Test string",
        });
        /** Gets a localized store listing. */
        await gapi.client.androidpublisher.edits.listings.get({
            editId: "Test string",
            language: "Test string",
            packageName: "Test string",
        });
        /** Lists all localized store listings. */
        await gapi.client.androidpublisher.edits.listings.list({
            editId: "Test string",
            packageName: "Test string",
        });
        /** Patches a localized store listing. */
        await gapi.client.androidpublisher.edits.listings.patch({
            editId: "Test string",
            language: "Test string",
            packageName: "Test string",
        }, {
            fullDescription: "Test string",
            language: "Test string",
            shortDescription: "Test string",
            title: "Test string",
            video: "Test string",
        });
        /** Creates or updates a localized store listing. */
        await gapi.client.androidpublisher.edits.listings.update({
            editId: "Test string",
            language: "Test string",
            packageName: "Test string",
        }, {
            fullDescription: "Test string",
            language: "Test string",
            shortDescription: "Test string",
            title: "Test string",
            video: "Test string",
        });
        /** Gets testers. */
        await gapi.client.androidpublisher.edits.testers.get({
            editId: "Test string",
            packageName: "Test string",
            track: "Test string",
        });
        /** Patches testers. */
        await gapi.client.androidpublisher.edits.testers.patch({
            editId: "Test string",
            packageName: "Test string",
            track: "Test string",
        }, {
            googleGroups: [
                "Test string"            ],
        });
        /** Updates testers. */
        await gapi.client.androidpublisher.edits.testers.update({
            editId: "Test string",
            packageName: "Test string",
            track: "Test string",
        }, {
            googleGroups: [
                "Test string"            ],
        });
        /** Gets a track. */
        await gapi.client.androidpublisher.edits.tracks.get({
            editId: "Test string",
            packageName: "Test string",
            track: "Test string",
        });
        /** Lists all tracks. */
        await gapi.client.androidpublisher.edits.tracks.list({
            editId: "Test string",
            packageName: "Test string",
        });
        /** Patches a track. */
        await gapi.client.androidpublisher.edits.tracks.patch({
            editId: "Test string",
            packageName: "Test string",
            track: "Test string",
        }, {
            releases: [
                {
                    countryTargeting: {
                        countries: [
                            "Test string"                        ],
                        includeRestOfWorld: true,
                    },
                    inAppUpdatePriority: 42,
                    name: "Test string",
                    releaseNotes: [
                        {
                            language: "Test string",
                            text: "Test string",
                        }                    ],
                    status: "Test string",
                    userFraction: 42,
                    versionCodes: [
                        "Test string"                    ],
                }            ],
            track: "Test string",
        });
        /** Updates a track. */
        await gapi.client.androidpublisher.edits.tracks.update({
            editId: "Test string",
            packageName: "Test string",
            track: "Test string",
        }, {
            releases: [
                {
                    countryTargeting: {
                        countries: [
                            "Test string"                        ],
                        includeRestOfWorld: true,
                    },
                    inAppUpdatePriority: 42,
                    name: "Test string",
                    releaseNotes: [
                        {
                            language: "Test string",
                            text: "Test string",
                        }                    ],
                    status: "Test string",
                    userFraction: 42,
                    versionCodes: [
                        "Test string"                    ],
                }            ],
            track: "Test string",
        });
        /** Deletes an in-app product (i.e. a managed product or a subscriptions). */
        await gapi.client.androidpublisher.inappproducts.delete({
            packageName: "Test string",
            sku: "Test string",
        });
        /** Gets an in-app product, which can be a managed product or a subscription. */
        await gapi.client.androidpublisher.inappproducts.get({
            packageName: "Test string",
            sku: "Test string",
        });
        /** Creates an in-app product (i.e. a managed product or a subscriptions). */
        await gapi.client.androidpublisher.inappproducts.insert({
            autoConvertMissingPrices: true,
            packageName: "Test string",
        }, {
            defaultLanguage: "Test string",
            defaultPrice: {
                currency: "Test string",
                priceMicros: "Test string",
            },
            gracePeriod: "Test string",
            listings: {
                A: {
                    benefits: [
                        "Test string"                    ],
                    description: "Test string",
                    title: "Test string",
                }            },
            packageName: "Test string",
            prices: {
                A: {
                    currency: "Test string",
                    priceMicros: "Test string",
                }            },
            purchaseType: "Test string",
            sku: "Test string",
            status: "Test string",
            subscriptionPeriod: "Test string",
            trialPeriod: "Test string",
        });
        /** Lists all in-app products - both managed products and subscriptions. */
        await gapi.client.androidpublisher.inappproducts.list({
            maxResults: 42,
            packageName: "Test string",
            startIndex: 42,
            token: "Test string",
        });
        /** Patches an in-app product (i.e. a managed product or a subscriptions). */
        await gapi.client.androidpublisher.inappproducts.patch({
            autoConvertMissingPrices: true,
            packageName: "Test string",
            sku: "Test string",
        }, {
            defaultLanguage: "Test string",
            defaultPrice: {
                currency: "Test string",
                priceMicros: "Test string",
            },
            gracePeriod: "Test string",
            listings: {
                A: {
                    benefits: [
                        "Test string"                    ],
                    description: "Test string",
                    title: "Test string",
                }            },
            packageName: "Test string",
            prices: {
                A: {
                    currency: "Test string",
                    priceMicros: "Test string",
                }            },
            purchaseType: "Test string",
            sku: "Test string",
            status: "Test string",
            subscriptionPeriod: "Test string",
            trialPeriod: "Test string",
        });
        /** Updates an in-app product (i.e. a managed product or a subscriptions). */
        await gapi.client.androidpublisher.inappproducts.update({
            autoConvertMissingPrices: true,
            packageName: "Test string",
            sku: "Test string",
        }, {
            defaultLanguage: "Test string",
            defaultPrice: {
                currency: "Test string",
                priceMicros: "Test string",
            },
            gracePeriod: "Test string",
            listings: {
                A: {
                    benefits: [
                        "Test string"                    ],
                    description: "Test string",
                    title: "Test string",
                }            },
            packageName: "Test string",
            prices: {
                A: {
                    currency: "Test string",
                    priceMicros: "Test string",
                }            },
            purchaseType: "Test string",
            sku: "Test string",
            status: "Test string",
            subscriptionPeriod: "Test string",
            trialPeriod: "Test string",
        });
        /**
         * Uploads an APK to internal app sharing. If you are using the Google API client libraries, please increase the timeout of the http request before calling this endpoint (a timeout of 2
         * minutes is recommended). See [Timeouts and Errors](https://developers.google.com/api-client-library/java/google-api-java-client/errors) for an example in java.
         */
        await gapi.client.androidpublisher.internalappsharingartifacts.uploadapk({
            packageName: "Test string",
        });
        /**
         * Uploads an app bundle to internal app sharing. If you are using the Google API client libraries, please increase the timeout of the http request before calling this endpoint (a timeout
         * of 2 minutes is recommended). See [Timeouts and Errors](https://developers.google.com/api-client-library/java/google-api-java-client/errors) for an example in java.
         */
        await gapi.client.androidpublisher.internalappsharingartifacts.uploadbundle({
            packageName: "Test string",
        });
        /** Refund a user's subscription or in-app purchase order. */
        await gapi.client.androidpublisher.orders.refund({
            orderId: "Test string",
            packageName: "Test string",
            revoke: true,
        });
        /** Gets a single review. */
        await gapi.client.androidpublisher.reviews.get({
            packageName: "Test string",
            reviewId: "Test string",
            translationLanguage: "Test string",
        });
        /** Lists all reviews. */
        await gapi.client.androidpublisher.reviews.list({
            maxResults: 42,
            packageName: "Test string",
            startIndex: 42,
            token: "Test string",
            translationLanguage: "Test string",
        });
        /** Replies to a single review, or updates an existing reply. */
        await gapi.client.androidpublisher.reviews.reply({
            packageName: "Test string",
            reviewId: "Test string",
        }, {
            replyText: "Test string",
        });
    }
});
