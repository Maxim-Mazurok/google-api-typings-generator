/* This is stub file for gapi.client.analyticsadmin-v1beta definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20250513

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://analyticsadmin.googleapis.com/$discovery/rest?version=v1beta',
  );
  /** now we can use gapi.client.analyticsadmin */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** Edit Google Analytics management entities */
    'https://www.googleapis.com/auth/analytics.edit',
    /** See and download your Google Analytics data */
    'https://www.googleapis.com/auth/analytics.readonly',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Marks target Account as soft-deleted (ie: "trashed") and returns it. This API does not have a method to restore soft-deleted accounts. However, they can be restored using the Trash Can UI. If the accounts are not restored before the expiration time, the account and all child resources (eg: Properties, GoogleAdsLinks, Streams, AccessBindings) will be permanently purged. https://support.google.com/analytics/answer/6154772 Returns an error if the target is not found. */
    await gapi.client.analyticsadmin.accounts.delete({
      name: 'Test string',
    });
    /** Lookup for a single Account. */
    await gapi.client.analyticsadmin.accounts.get({
      name: 'Test string',
    });
    /** Get data sharing settings on an account. Data sharing settings are singletons. */
    await gapi.client.analyticsadmin.accounts.getDataSharingSettings({
      name: 'Test string',
    });
    /** Returns all accounts accessible by the caller. Note that these accounts might not currently have GA properties. Soft-deleted (ie: "trashed") accounts are excluded by default. Returns an empty list if no relevant accounts are found. */
    await gapi.client.analyticsadmin.accounts.list({
      pageSize: 42,
      pageToken: 'Test string',
      showDeleted: true,
    });
    /** Updates an account. */
    await gapi.client.analyticsadmin.accounts.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        createTime: 'Test string',
        deleted: true,
        displayName: 'Test string',
        gmpOrganization: 'Test string',
        name: 'Test string',
        regionCode: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Requests a ticket for creating an account. */
    await gapi.client.analyticsadmin.accounts.provisionAccountTicket(
      {},
      {
        account: {
          createTime: 'Test string',
          deleted: true,
          displayName: 'Test string',
          gmpOrganization: 'Test string',
          name: 'Test string',
          regionCode: 'Test string',
          updateTime: 'Test string',
        },
        redirectUri: 'Test string',
      },
    );
    /** Returns a customized report of data access records. The report provides records of each time a user reads Google Analytics reporting data. Access records are retained for up to 2 years. Data Access Reports can be requested for a property. Reports may be requested for any property, but dimensions that aren't related to quota can only be requested on Google Analytics 360 properties. This method is only available to Administrators. These data access records include GA UI Reporting, GA UI Explorations, GA Data API, and other products like Firebase & Admob that can retrieve data from Google Analytics through a linkage. These records don't include property configuration changes like adding a stream or changing a property's time zone. For configuration change history, see [searchChangeHistoryEvents](https://developers.google.com/analytics/devguides/config/admin/v1/rest/v1alpha/accounts/searchChangeHistoryEvents). To give your feedback on this API, complete the [Google Analytics Access Reports feedback](https://docs.google.com/forms/d/e/1FAIpQLSdmEBUrMzAEdiEKk5TV5dEHvDUZDRlgWYdQdAeSdtR4hVjEhw/viewform) form. */
    await gapi.client.analyticsadmin.accounts.runAccessReport(
      {
        entity: 'Test string',
      },
      {
        dateRanges: [
          {
            endDate: 'Test string',
            startDate: 'Test string',
          },
        ],
        dimensionFilter: {
          accessFilter: {
            betweenFilter: {
              fromValue: {
                doubleValue: 42,
                int64Value: 'Test string',
              },
              toValue: {
                doubleValue: 42,
                int64Value: 'Test string',
              },
            },
            fieldName: 'Test string',
            inListFilter: {
              caseSensitive: true,
              values: ['Test string'],
            },
            numericFilter: {
              operation: 'Test string',
              value: {
                doubleValue: 42,
                int64Value: 'Test string',
              },
            },
            stringFilter: {
              caseSensitive: true,
              matchType: 'Test string',
              value: 'Test string',
            },
          },
          andGroup: {
            expressions: undefined,
          },
          notExpression: undefined,
          orGroup: {
            expressions: undefined,
          },
        },
        dimensions: [
          {
            dimensionName: 'Test string',
          },
        ],
        expandGroups: true,
        includeAllUsers: true,
        limit: 'Test string',
        metricFilter: {
          accessFilter: {
            betweenFilter: {
              fromValue: {
                doubleValue: 42,
                int64Value: 'Test string',
              },
              toValue: {
                doubleValue: 42,
                int64Value: 'Test string',
              },
            },
            fieldName: 'Test string',
            inListFilter: {
              caseSensitive: true,
              values: ['Test string'],
            },
            numericFilter: {
              operation: 'Test string',
              value: {
                doubleValue: 42,
                int64Value: 'Test string',
              },
            },
            stringFilter: {
              caseSensitive: true,
              matchType: 'Test string',
              value: 'Test string',
            },
          },
          andGroup: {
            expressions: undefined,
          },
          notExpression: undefined,
          orGroup: {
            expressions: undefined,
          },
        },
        metrics: [
          {
            metricName: 'Test string',
          },
        ],
        offset: 'Test string',
        orderBys: [
          {
            desc: true,
            dimension: {
              dimensionName: 'Test string',
              orderType: 'Test string',
            },
            metric: {
              metricName: 'Test string',
            },
          },
        ],
        returnEntityQuota: true,
        timeZone: 'Test string',
      },
    );
    /** Searches through all changes to an account or its children given the specified set of filters. Only returns the subset of changes supported by the API. The UI may return additional changes. */
    await gapi.client.analyticsadmin.accounts.searchChangeHistoryEvents(
      {
        account: 'Test string',
      },
      {
        action: ['Test string'],
        actorEmail: ['Test string'],
        earliestChangeTime: 'Test string',
        latestChangeTime: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        property: 'Test string',
        resourceType: ['Test string'],
      },
    );
    /** Returns summaries of all accounts accessible by the caller. */
    await gapi.client.analyticsadmin.accountSummaries.list({
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Acknowledges the terms of user data collection for the specified property. This acknowledgement must be completed (either in the Google Analytics UI or through this API) before MeasurementProtocolSecret resources may be created. */
    await gapi.client.analyticsadmin.properties.acknowledgeUserDataCollection(
      {
        property: 'Test string',
      },
      {
        acknowledgement: 'Test string',
      },
    );
    /** Creates a Google Analytics property with the specified location and attributes. */
    await gapi.client.analyticsadmin.properties.create(
      {},
      {
        account: 'Test string',
        createTime: 'Test string',
        currencyCode: 'Test string',
        deleteTime: 'Test string',
        displayName: 'Test string',
        expireTime: 'Test string',
        industryCategory: 'Test string',
        name: 'Test string',
        parent: 'Test string',
        propertyType: 'Test string',
        serviceLevel: 'Test string',
        timeZone: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Marks target Property as soft-deleted (ie: "trashed") and returns it. This API does not have a method to restore soft-deleted properties. However, they can be restored using the Trash Can UI. If the properties are not restored before the expiration time, the Property and all child resources (eg: GoogleAdsLinks, Streams, AccessBindings) will be permanently purged. https://support.google.com/analytics/answer/6154772 Returns an error if the target is not found. */
    await gapi.client.analyticsadmin.properties.delete({
      name: 'Test string',
    });
    /** Lookup for a single GA Property. */
    await gapi.client.analyticsadmin.properties.get({
      name: 'Test string',
    });
    /** Returns the singleton data retention settings for this property. */
    await gapi.client.analyticsadmin.properties.getDataRetentionSettings({
      name: 'Test string',
    });
    /** Returns child Properties under the specified parent Account. Properties will be excluded if the caller does not have access. Soft-deleted (ie: "trashed") properties are excluded by default. Returns an empty list if no relevant properties are found. */
    await gapi.client.analyticsadmin.properties.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      showDeleted: true,
    });
    /** Updates a property. */
    await gapi.client.analyticsadmin.properties.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        account: 'Test string',
        createTime: 'Test string',
        currencyCode: 'Test string',
        deleteTime: 'Test string',
        displayName: 'Test string',
        expireTime: 'Test string',
        industryCategory: 'Test string',
        name: 'Test string',
        parent: 'Test string',
        propertyType: 'Test string',
        serviceLevel: 'Test string',
        timeZone: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Returns a customized report of data access records. The report provides records of each time a user reads Google Analytics reporting data. Access records are retained for up to 2 years. Data Access Reports can be requested for a property. Reports may be requested for any property, but dimensions that aren't related to quota can only be requested on Google Analytics 360 properties. This method is only available to Administrators. These data access records include GA UI Reporting, GA UI Explorations, GA Data API, and other products like Firebase & Admob that can retrieve data from Google Analytics through a linkage. These records don't include property configuration changes like adding a stream or changing a property's time zone. For configuration change history, see [searchChangeHistoryEvents](https://developers.google.com/analytics/devguides/config/admin/v1/rest/v1alpha/accounts/searchChangeHistoryEvents). To give your feedback on this API, complete the [Google Analytics Access Reports feedback](https://docs.google.com/forms/d/e/1FAIpQLSdmEBUrMzAEdiEKk5TV5dEHvDUZDRlgWYdQdAeSdtR4hVjEhw/viewform) form. */
    await gapi.client.analyticsadmin.properties.runAccessReport(
      {
        entity: 'Test string',
      },
      {
        dateRanges: [
          {
            endDate: 'Test string',
            startDate: 'Test string',
          },
        ],
        dimensionFilter: {
          accessFilter: {
            betweenFilter: {
              fromValue: {
                doubleValue: 42,
                int64Value: 'Test string',
              },
              toValue: {
                doubleValue: 42,
                int64Value: 'Test string',
              },
            },
            fieldName: 'Test string',
            inListFilter: {
              caseSensitive: true,
              values: ['Test string'],
            },
            numericFilter: {
              operation: 'Test string',
              value: {
                doubleValue: 42,
                int64Value: 'Test string',
              },
            },
            stringFilter: {
              caseSensitive: true,
              matchType: 'Test string',
              value: 'Test string',
            },
          },
          andGroup: {
            expressions: undefined,
          },
          notExpression: undefined,
          orGroup: {
            expressions: undefined,
          },
        },
        dimensions: [
          {
            dimensionName: 'Test string',
          },
        ],
        expandGroups: true,
        includeAllUsers: true,
        limit: 'Test string',
        metricFilter: {
          accessFilter: {
            betweenFilter: {
              fromValue: {
                doubleValue: 42,
                int64Value: 'Test string',
              },
              toValue: {
                doubleValue: 42,
                int64Value: 'Test string',
              },
            },
            fieldName: 'Test string',
            inListFilter: {
              caseSensitive: true,
              values: ['Test string'],
            },
            numericFilter: {
              operation: 'Test string',
              value: {
                doubleValue: 42,
                int64Value: 'Test string',
              },
            },
            stringFilter: {
              caseSensitive: true,
              matchType: 'Test string',
              value: 'Test string',
            },
          },
          andGroup: {
            expressions: undefined,
          },
          notExpression: undefined,
          orGroup: {
            expressions: undefined,
          },
        },
        metrics: [
          {
            metricName: 'Test string',
          },
        ],
        offset: 'Test string',
        orderBys: [
          {
            desc: true,
            dimension: {
              dimensionName: 'Test string',
              orderType: 'Test string',
            },
            metric: {
              metricName: 'Test string',
            },
          },
        ],
        returnEntityQuota: true,
        timeZone: 'Test string',
      },
    );
    /** Updates the singleton data retention settings for this property. */
    await gapi.client.analyticsadmin.properties.updateDataRetentionSettings(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        eventDataRetention: 'Test string',
        name: 'Test string',
        resetUserDataOnNewActivity: true,
        userDataRetention: 'Test string',
      },
    );
    /** Deprecated: Use `CreateKeyEvent` instead. Creates a conversion event with the specified attributes. */
    await gapi.client.analyticsadmin.properties.conversionEvents.create(
      {
        parent: 'Test string',
      },
      {
        countingMethod: 'Test string',
        createTime: 'Test string',
        custom: true,
        defaultConversionValue: {
          currencyCode: 'Test string',
          value: 42,
        },
        deletable: true,
        eventName: 'Test string',
        name: 'Test string',
      },
    );
    /** Deprecated: Use `DeleteKeyEvent` instead. Deletes a conversion event in a property. */
    await gapi.client.analyticsadmin.properties.conversionEvents.delete({
      name: 'Test string',
    });
    /** Deprecated: Use `GetKeyEvent` instead. Retrieve a single conversion event. */
    await gapi.client.analyticsadmin.properties.conversionEvents.get({
      name: 'Test string',
    });
    /** Deprecated: Use `ListKeyEvents` instead. Returns a list of conversion events in the specified parent property. Returns an empty list if no conversion events are found. */
    await gapi.client.analyticsadmin.properties.conversionEvents.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Deprecated: Use `UpdateKeyEvent` instead. Updates a conversion event with the specified attributes. */
    await gapi.client.analyticsadmin.properties.conversionEvents.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        countingMethod: 'Test string',
        createTime: 'Test string',
        custom: true,
        defaultConversionValue: {
          currencyCode: 'Test string',
          value: 42,
        },
        deletable: true,
        eventName: 'Test string',
        name: 'Test string',
      },
    );
    /** Archives a CustomDimension on a property. */
    await gapi.client.analyticsadmin.properties.customDimensions.archive(
      {
        name: 'Test string',
      },
      {},
    );
    /** Creates a CustomDimension. */
    await gapi.client.analyticsadmin.properties.customDimensions.create(
      {
        parent: 'Test string',
      },
      {
        description: 'Test string',
        disallowAdsPersonalization: true,
        displayName: 'Test string',
        name: 'Test string',
        parameterName: 'Test string',
        scope: 'Test string',
      },
    );
    /** Lookup for a single CustomDimension. */
    await gapi.client.analyticsadmin.properties.customDimensions.get({
      name: 'Test string',
    });
    /** Lists CustomDimensions on a property. */
    await gapi.client.analyticsadmin.properties.customDimensions.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates a CustomDimension on a property. */
    await gapi.client.analyticsadmin.properties.customDimensions.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        description: 'Test string',
        disallowAdsPersonalization: true,
        displayName: 'Test string',
        name: 'Test string',
        parameterName: 'Test string',
        scope: 'Test string',
      },
    );
    /** Archives a CustomMetric on a property. */
    await gapi.client.analyticsadmin.properties.customMetrics.archive(
      {
        name: 'Test string',
      },
      {},
    );
    /** Creates a CustomMetric. */
    await gapi.client.analyticsadmin.properties.customMetrics.create(
      {
        parent: 'Test string',
      },
      {
        description: 'Test string',
        displayName: 'Test string',
        measurementUnit: 'Test string',
        name: 'Test string',
        parameterName: 'Test string',
        restrictedMetricType: ['Test string'],
        scope: 'Test string',
      },
    );
    /** Lookup for a single CustomMetric. */
    await gapi.client.analyticsadmin.properties.customMetrics.get({
      name: 'Test string',
    });
    /** Lists CustomMetrics on a property. */
    await gapi.client.analyticsadmin.properties.customMetrics.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates a CustomMetric on a property. */
    await gapi.client.analyticsadmin.properties.customMetrics.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        description: 'Test string',
        displayName: 'Test string',
        measurementUnit: 'Test string',
        name: 'Test string',
        parameterName: 'Test string',
        restrictedMetricType: ['Test string'],
        scope: 'Test string',
      },
    );
    /** Creates a DataStream. */
    await gapi.client.analyticsadmin.properties.dataStreams.create(
      {
        parent: 'Test string',
      },
      {
        androidAppStreamData: {
          firebaseAppId: 'Test string',
          packageName: 'Test string',
        },
        createTime: 'Test string',
        displayName: 'Test string',
        iosAppStreamData: {
          bundleId: 'Test string',
          firebaseAppId: 'Test string',
        },
        name: 'Test string',
        type: 'Test string',
        updateTime: 'Test string',
        webStreamData: {
          defaultUri: 'Test string',
          firebaseAppId: 'Test string',
          measurementId: 'Test string',
        },
      },
    );
    /** Deletes a DataStream on a property. */
    await gapi.client.analyticsadmin.properties.dataStreams.delete({
      name: 'Test string',
    });
    /** Lookup for a single DataStream. */
    await gapi.client.analyticsadmin.properties.dataStreams.get({
      name: 'Test string',
    });
    /** Lists DataStreams on a property. */
    await gapi.client.analyticsadmin.properties.dataStreams.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates a DataStream on a property. */
    await gapi.client.analyticsadmin.properties.dataStreams.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        androidAppStreamData: {
          firebaseAppId: 'Test string',
          packageName: 'Test string',
        },
        createTime: 'Test string',
        displayName: 'Test string',
        iosAppStreamData: {
          bundleId: 'Test string',
          firebaseAppId: 'Test string',
        },
        name: 'Test string',
        type: 'Test string',
        updateTime: 'Test string',
        webStreamData: {
          defaultUri: 'Test string',
          firebaseAppId: 'Test string',
          measurementId: 'Test string',
        },
      },
    );
    /** Creates a measurement protocol secret. */
    await gapi.client.analyticsadmin.properties.dataStreams.measurementProtocolSecrets.create(
      {
        parent: 'Test string',
      },
      {
        displayName: 'Test string',
        name: 'Test string',
        secretValue: 'Test string',
      },
    );
    /** Deletes target MeasurementProtocolSecret. */
    await gapi.client.analyticsadmin.properties.dataStreams.measurementProtocolSecrets.delete(
      {
        name: 'Test string',
      },
    );
    /** Lookup for a single MeasurementProtocolSecret. */
    await gapi.client.analyticsadmin.properties.dataStreams.measurementProtocolSecrets.get(
      {
        name: 'Test string',
      },
    );
    /** Returns child MeasurementProtocolSecrets under the specified parent Property. */
    await gapi.client.analyticsadmin.properties.dataStreams.measurementProtocolSecrets.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
    /** Updates a measurement protocol secret. */
    await gapi.client.analyticsadmin.properties.dataStreams.measurementProtocolSecrets.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        displayName: 'Test string',
        name: 'Test string',
        secretValue: 'Test string',
      },
    );
    /** Creates a FirebaseLink. Properties can have at most one FirebaseLink. */
    await gapi.client.analyticsadmin.properties.firebaseLinks.create(
      {
        parent: 'Test string',
      },
      {
        createTime: 'Test string',
        name: 'Test string',
        project: 'Test string',
      },
    );
    /** Deletes a FirebaseLink on a property */
    await gapi.client.analyticsadmin.properties.firebaseLinks.delete({
      name: 'Test string',
    });
    /** Lists FirebaseLinks on a property. Properties can have at most one FirebaseLink. */
    await gapi.client.analyticsadmin.properties.firebaseLinks.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Creates a GoogleAdsLink. */
    await gapi.client.analyticsadmin.properties.googleAdsLinks.create(
      {
        parent: 'Test string',
      },
      {
        adsPersonalizationEnabled: true,
        canManageClients: true,
        createTime: 'Test string',
        creatorEmailAddress: 'Test string',
        customerId: 'Test string',
        name: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Deletes a GoogleAdsLink on a property */
    await gapi.client.analyticsadmin.properties.googleAdsLinks.delete({
      name: 'Test string',
    });
    /** Lists GoogleAdsLinks on a property. */
    await gapi.client.analyticsadmin.properties.googleAdsLinks.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates a GoogleAdsLink on a property */
    await gapi.client.analyticsadmin.properties.googleAdsLinks.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        adsPersonalizationEnabled: true,
        canManageClients: true,
        createTime: 'Test string',
        creatorEmailAddress: 'Test string',
        customerId: 'Test string',
        name: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Creates a Key Event. */
    await gapi.client.analyticsadmin.properties.keyEvents.create(
      {
        parent: 'Test string',
      },
      {
        countingMethod: 'Test string',
        createTime: 'Test string',
        custom: true,
        defaultValue: {
          currencyCode: 'Test string',
          numericValue: 42,
        },
        deletable: true,
        eventName: 'Test string',
        name: 'Test string',
      },
    );
    /** Deletes a Key Event. */
    await gapi.client.analyticsadmin.properties.keyEvents.delete({
      name: 'Test string',
    });
    /** Retrieve a single Key Event. */
    await gapi.client.analyticsadmin.properties.keyEvents.get({
      name: 'Test string',
    });
    /** Returns a list of Key Events in the specified parent property. Returns an empty list if no Key Events are found. */
    await gapi.client.analyticsadmin.properties.keyEvents.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates a Key Event. */
    await gapi.client.analyticsadmin.properties.keyEvents.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        countingMethod: 'Test string',
        createTime: 'Test string',
        custom: true,
        defaultValue: {
          currencyCode: 'Test string',
          numericValue: 42,
        },
        deletable: true,
        eventName: 'Test string',
        name: 'Test string',
      },
    );
  }
});
