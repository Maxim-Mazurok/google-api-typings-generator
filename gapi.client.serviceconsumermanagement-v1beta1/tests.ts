/* This is stub file for gapi.client.serviceconsumermanagement-v1beta1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20230209

gapi.load('client', async () => {
    /** now we can use gapi.client */

    await gapi.client.load('https://serviceconsumermanagement.googleapis.com/$discovery/rest?version=v1beta1');
    /** now we can use gapi.client.serviceconsumermanagement */

    /** don't forget to authenticate your client before sending any request to resources: */
    /** declare client_id registered in Google Developers Console */
    const client_id = '<<PUT YOUR CLIENT ID HERE>>';
    const scope = [
        /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
        'https://www.googleapis.com/auth/cloud-platform',
    ];
    const immediate = false;
    gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
        if (authResult && !authResult.error) {
            /** handle successful authorization */
            run();
        } else {
            /** handle authorization error */
        }
    });

    async function run() {
        /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
        await gapi.client.serviceconsumermanagement.operations.get({
            name: "Test string",
        });
        /** Retrieves a summary of quota information for a specific quota metric. */
        await gapi.client.serviceconsumermanagement.services.consumerQuotaMetrics.get({
            name: "Test string",
            view: "Test string",
        });
        /**
         * Create or update multiple producer overrides atomically, all on the same consumer, but on many different metrics or limits. The name field in the quota override message should not be
         * set.
         */
        await gapi.client.serviceconsumermanagement.services.consumerQuotaMetrics.importProducerOverrides({
            parent: "Test string",
        }, {
            force: true,
            forceOnly: [
                "Test string"
            ],
            inlineSource: {
                overrides: [
                    {
                        adminOverrideAncestor: "Test string",
                        dimensions: {
                            A: "Test string"
                        },
                        metric: "Test string",
                        name: "Test string",
                        overrideValue: "Test string",
                        unit: "Test string",
                    }
                ],
            },
        });
        /**
         * Retrieves a summary of all quota information about this consumer that is visible to the service producer, for each quota metric defined by the service. Each metric includes information
         * about all of its defined limits. Each limit includes the limit configuration (quota unit, preciseness, default value), the current effective limit value, and all of the overrides
         * applied to the limit.
         */
        await gapi.client.serviceconsumermanagement.services.consumerQuotaMetrics.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
            view: "Test string",
        });
        /** Retrieves a summary of quota information for a specific quota limit. */
        await gapi.client.serviceconsumermanagement.services.consumerQuotaMetrics.limits.get({
            name: "Test string",
            view: "Test string",
        });
        /**
         * Creates a producer override. A producer override is applied by the owner or administrator of a service to increase or decrease the amount of quota a consumer of the service is allowed
         * to use. To create multiple overrides at once, use ImportProducerOverrides instead. If an override with the specified dimensions already exists, this call will fail. To overwrite an
         * existing override if one is already present ("upsert" semantics), use ImportProducerOverrides instead.
         */
        await gapi.client.serviceconsumermanagement.services.consumerQuotaMetrics.limits.producerOverrides.create({
            force: true,
            forceOnly: "Test string",
            parent: "Test string",
        }, {
            adminOverrideAncestor: "Test string",
            dimensions: {
                A: "Test string"
            },
            metric: "Test string",
            name: "Test string",
            overrideValue: "Test string",
            unit: "Test string",
        });
        /** Deletes a producer override. */
        await gapi.client.serviceconsumermanagement.services.consumerQuotaMetrics.limits.producerOverrides.delete({
            force: true,
            forceOnly: "Test string",
            name: "Test string",
        });
        /** Lists all producer overrides on this limit. */
        await gapi.client.serviceconsumermanagement.services.consumerQuotaMetrics.limits.producerOverrides.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a producer override. */
        await gapi.client.serviceconsumermanagement.services.consumerQuotaMetrics.limits.producerOverrides.patch({
            force: true,
            forceOnly: "Test string",
            name: "Test string",
            updateMask: "Test string",
        }, {
            adminOverrideAncestor: "Test string",
            dimensions: {
                A: "Test string"
            },
            metric: "Test string",
            name: "Test string",
            overrideValue: "Test string",
            unit: "Test string",
        });
    }
});
