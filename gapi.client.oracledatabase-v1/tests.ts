/* This is stub file for gapi.client.oracledatabase-v1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20250929

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://oracledatabase.googleapis.com/$discovery/rest?version=v1',
  );
  /** now we can use gapi.client.oracledatabase */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
    'https://www.googleapis.com/auth/cloud-platform',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Gets information about a location. */
    await gapi.client.oracledatabase.projects.locations.get({
      name: 'Test string',
    });
    /** Lists information about the supported locations for this service. */
    await gapi.client.oracledatabase.projects.locations.list({
      extraLocationTypes: 'Test string',
      filter: 'Test string',
      name: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Lists the long-term and automatic backups of an Autonomous Database. */
    await gapi.client.oracledatabase.projects.locations.autonomousDatabaseBackups.list(
      {
        filter: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
    /** Lists Autonomous Database Character Sets in a given project and location. */
    await gapi.client.oracledatabase.projects.locations.autonomousDatabaseCharacterSets.list(
      {
        filter: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
    /** Creates a new Autonomous Database in a given project and location. */
    await gapi.client.oracledatabase.projects.locations.autonomousDatabases.create(
      {
        autonomousDatabaseId: 'Test string',
        parent: 'Test string',
        requestId: 'Test string',
      },
      {
        adminPassword: 'Test string',
        cidr: 'Test string',
        createTime: 'Test string',
        database: 'Test string',
        disasterRecoverySupportedLocations: ['Test string'],
        displayName: 'Test string',
        entitlementId: 'Test string',
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        network: 'Test string',
        odbNetwork: 'Test string',
        odbSubnet: 'Test string',
        peerAutonomousDatabases: ['Test string'],
        properties: {
          actualUsedDataStorageSizeTb: 42,
          allocatedStorageSizeTb: 42,
          allowlistedIps: ['Test string'],
          apexDetails: {
            apexVersion: 'Test string',
            ordsVersion: 'Test string',
          },
          arePrimaryAllowlistedIpsUsed: true,
          autonomousContainerDatabaseId: 'Test string',
          availableUpgradeVersions: ['Test string'],
          backupRetentionPeriodDays: 42,
          characterSet: 'Test string',
          computeCount: 42,
          connectionStrings: {
            allConnectionStrings: {
              high: 'Test string',
              low: 'Test string',
              medium: 'Test string',
            },
            dedicated: 'Test string',
            high: 'Test string',
            low: 'Test string',
            medium: 'Test string',
            profiles: [
              {
                consumerGroup: 'Test string',
                displayName: 'Test string',
                hostFormat: 'Test string',
                isRegional: true,
                protocol: 'Test string',
                sessionMode: 'Test string',
                syntaxFormat: 'Test string',
                tlsAuthentication: 'Test string',
                value: 'Test string',
              },
            ],
          },
          connectionUrls: {
            apexUri: 'Test string',
            databaseTransformsUri: 'Test string',
            graphStudioUri: 'Test string',
            machineLearningNotebookUri: 'Test string',
            machineLearningUserManagementUri: 'Test string',
            mongoDbUri: 'Test string',
            ordsUri: 'Test string',
            sqlDevWebUri: 'Test string',
          },
          cpuCoreCount: 42,
          customerContacts: [
            {
              email: 'Test string',
            },
          ],
          databaseManagementState: 'Test string',
          dataGuardRoleChangedTime: 'Test string',
          dataSafeState: 'Test string',
          dataStorageSizeGb: 42,
          dataStorageSizeTb: 42,
          dbEdition: 'Test string',
          dbVersion: 'Test string',
          dbWorkload: 'Test string',
          disasterRecoveryRoleChangedTime: 'Test string',
          encryptionKey: {
            kmsKey: 'Test string',
            provider: 'Test string',
          },
          encryptionKeyHistoryEntries: [
            {
              activationTime: 'Test string',
              encryptionKey: {
                kmsKey: 'Test string',
                provider: 'Test string',
              },
            },
          ],
          failedDataRecoveryDuration: 'Test string',
          isAutoScalingEnabled: true,
          isLocalDataGuardEnabled: true,
          isStorageAutoScalingEnabled: true,
          licenseType: 'Test string',
          lifecycleDetails: 'Test string',
          localAdgAutoFailoverMaxDataLossLimit: 42,
          localDisasterRecoveryType: 'Test string',
          localStandbyDb: {
            dataGuardRoleChangedTime: 'Test string',
            disasterRecoveryRoleChangedTime: 'Test string',
            lagTimeDuration: 'Test string',
            lifecycleDetails: 'Test string',
            state: 'Test string',
          },
          maintenanceBeginTime: 'Test string',
          maintenanceEndTime: 'Test string',
          maintenanceScheduleType: 'Test string',
          memoryPerOracleComputeUnitGbs: 42,
          memoryTableGbs: 42,
          mtlsConnectionRequired: true,
          nCharacterSet: 'Test string',
          nextLongTermBackupTime: 'Test string',
          ocid: 'Test string',
          ociUrl: 'Test string',
          openMode: 'Test string',
          operationsInsightsState: 'Test string',
          peerDbIds: ['Test string'],
          permissionLevel: 'Test string',
          privateEndpoint: 'Test string',
          privateEndpointIp: 'Test string',
          privateEndpointLabel: 'Test string',
          refreshableMode: 'Test string',
          refreshableState: 'Test string',
          role: 'Test string',
          scheduledOperationDetails: [
            {
              dayOfWeek: 'Test string',
              startTime: {
                hours: 42,
                minutes: 42,
                nanos: 42,
                seconds: 42,
              },
              stopTime: {
                hours: 42,
                minutes: 42,
                nanos: 42,
                seconds: 42,
              },
            },
          ],
          secretId: 'Test string',
          serviceAgentEmail: 'Test string',
          sqlWebDeveloperUrl: 'Test string',
          state: 'Test string',
          supportedCloneRegions: ['Test string'],
          totalAutoBackupStorageSizeGbs: 42,
          usedDataStorageSizeTbs: 42,
          vaultId: 'Test string',
        },
        sourceConfig: {
          automaticBackupsReplicationEnabled: true,
          autonomousDatabase: 'Test string',
        },
      },
    );
    /** Deletes a single Autonomous Database. */
    await gapi.client.oracledatabase.projects.locations.autonomousDatabases.delete(
      {
        name: 'Test string',
        requestId: 'Test string',
      },
    );
    /** Initiates a failover to target autonomous database from the associated primary database. */
    await gapi.client.oracledatabase.projects.locations.autonomousDatabases.failover(
      {
        name: 'Test string',
      },
      {
        peerAutonomousDatabase: 'Test string',
      },
    );
    /** Generates a wallet for an Autonomous Database. */
    await gapi.client.oracledatabase.projects.locations.autonomousDatabases.generateWallet(
      {
        name: 'Test string',
      },
      {
        isRegional: true,
        password: 'Test string',
        type: 'Test string',
      },
    );
    /** Gets the details of a single Autonomous Database. */
    await gapi.client.oracledatabase.projects.locations.autonomousDatabases.get(
      {
        name: 'Test string',
      },
    );
    /** Lists the Autonomous Databases in a given project and location. */
    await gapi.client.oracledatabase.projects.locations.autonomousDatabases.list(
      {
        filter: 'Test string',
        orderBy: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
    /** Updates the parameters of a single Autonomous Database. */
    await gapi.client.oracledatabase.projects.locations.autonomousDatabases.patch(
      {
        name: 'Test string',
        requestId: 'Test string',
        updateMask: 'Test string',
      },
      {
        adminPassword: 'Test string',
        cidr: 'Test string',
        createTime: 'Test string',
        database: 'Test string',
        disasterRecoverySupportedLocations: ['Test string'],
        displayName: 'Test string',
        entitlementId: 'Test string',
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        network: 'Test string',
        odbNetwork: 'Test string',
        odbSubnet: 'Test string',
        peerAutonomousDatabases: ['Test string'],
        properties: {
          actualUsedDataStorageSizeTb: 42,
          allocatedStorageSizeTb: 42,
          allowlistedIps: ['Test string'],
          apexDetails: {
            apexVersion: 'Test string',
            ordsVersion: 'Test string',
          },
          arePrimaryAllowlistedIpsUsed: true,
          autonomousContainerDatabaseId: 'Test string',
          availableUpgradeVersions: ['Test string'],
          backupRetentionPeriodDays: 42,
          characterSet: 'Test string',
          computeCount: 42,
          connectionStrings: {
            allConnectionStrings: {
              high: 'Test string',
              low: 'Test string',
              medium: 'Test string',
            },
            dedicated: 'Test string',
            high: 'Test string',
            low: 'Test string',
            medium: 'Test string',
            profiles: [
              {
                consumerGroup: 'Test string',
                displayName: 'Test string',
                hostFormat: 'Test string',
                isRegional: true,
                protocol: 'Test string',
                sessionMode: 'Test string',
                syntaxFormat: 'Test string',
                tlsAuthentication: 'Test string',
                value: 'Test string',
              },
            ],
          },
          connectionUrls: {
            apexUri: 'Test string',
            databaseTransformsUri: 'Test string',
            graphStudioUri: 'Test string',
            machineLearningNotebookUri: 'Test string',
            machineLearningUserManagementUri: 'Test string',
            mongoDbUri: 'Test string',
            ordsUri: 'Test string',
            sqlDevWebUri: 'Test string',
          },
          cpuCoreCount: 42,
          customerContacts: [
            {
              email: 'Test string',
            },
          ],
          databaseManagementState: 'Test string',
          dataGuardRoleChangedTime: 'Test string',
          dataSafeState: 'Test string',
          dataStorageSizeGb: 42,
          dataStorageSizeTb: 42,
          dbEdition: 'Test string',
          dbVersion: 'Test string',
          dbWorkload: 'Test string',
          disasterRecoveryRoleChangedTime: 'Test string',
          encryptionKey: {
            kmsKey: 'Test string',
            provider: 'Test string',
          },
          encryptionKeyHistoryEntries: [
            {
              activationTime: 'Test string',
              encryptionKey: {
                kmsKey: 'Test string',
                provider: 'Test string',
              },
            },
          ],
          failedDataRecoveryDuration: 'Test string',
          isAutoScalingEnabled: true,
          isLocalDataGuardEnabled: true,
          isStorageAutoScalingEnabled: true,
          licenseType: 'Test string',
          lifecycleDetails: 'Test string',
          localAdgAutoFailoverMaxDataLossLimit: 42,
          localDisasterRecoveryType: 'Test string',
          localStandbyDb: {
            dataGuardRoleChangedTime: 'Test string',
            disasterRecoveryRoleChangedTime: 'Test string',
            lagTimeDuration: 'Test string',
            lifecycleDetails: 'Test string',
            state: 'Test string',
          },
          maintenanceBeginTime: 'Test string',
          maintenanceEndTime: 'Test string',
          maintenanceScheduleType: 'Test string',
          memoryPerOracleComputeUnitGbs: 42,
          memoryTableGbs: 42,
          mtlsConnectionRequired: true,
          nCharacterSet: 'Test string',
          nextLongTermBackupTime: 'Test string',
          ocid: 'Test string',
          ociUrl: 'Test string',
          openMode: 'Test string',
          operationsInsightsState: 'Test string',
          peerDbIds: ['Test string'],
          permissionLevel: 'Test string',
          privateEndpoint: 'Test string',
          privateEndpointIp: 'Test string',
          privateEndpointLabel: 'Test string',
          refreshableMode: 'Test string',
          refreshableState: 'Test string',
          role: 'Test string',
          scheduledOperationDetails: [
            {
              dayOfWeek: 'Test string',
              startTime: {
                hours: 42,
                minutes: 42,
                nanos: 42,
                seconds: 42,
              },
              stopTime: {
                hours: 42,
                minutes: 42,
                nanos: 42,
                seconds: 42,
              },
            },
          ],
          secretId: 'Test string',
          serviceAgentEmail: 'Test string',
          sqlWebDeveloperUrl: 'Test string',
          state: 'Test string',
          supportedCloneRegions: ['Test string'],
          totalAutoBackupStorageSizeGbs: 42,
          usedDataStorageSizeTbs: 42,
          vaultId: 'Test string',
        },
        sourceConfig: {
          automaticBackupsReplicationEnabled: true,
          autonomousDatabase: 'Test string',
        },
      },
    );
    /** Restarts an Autonomous Database. */
    await gapi.client.oracledatabase.projects.locations.autonomousDatabases.restart(
      {
        name: 'Test string',
      },
      {},
    );
    /** Restores a single Autonomous Database. */
    await gapi.client.oracledatabase.projects.locations.autonomousDatabases.restore(
      {
        name: 'Test string',
      },
      {
        restoreTime: 'Test string',
      },
    );
    /** Starts an Autonomous Database. */
    await gapi.client.oracledatabase.projects.locations.autonomousDatabases.start(
      {
        name: 'Test string',
      },
      {},
    );
    /** Stops an Autonomous Database. */
    await gapi.client.oracledatabase.projects.locations.autonomousDatabases.stop(
      {
        name: 'Test string',
      },
      {},
    );
    /** Initiates a switchover of specified autonomous database to the associated peer database. */
    await gapi.client.oracledatabase.projects.locations.autonomousDatabases.switchover(
      {
        name: 'Test string',
      },
      {
        peerAutonomousDatabase: 'Test string',
      },
    );
    /** Lists all the available Autonomous Database versions for a project and location. */
    await gapi.client.oracledatabase.projects.locations.autonomousDbVersions.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
    /** Creates a new Exadata Infrastructure in a given project and location. */
    await gapi.client.oracledatabase.projects.locations.cloudExadataInfrastructures.create(
      {
        cloudExadataInfrastructureId: 'Test string',
        parent: 'Test string',
        requestId: 'Test string',
      },
      {
        createTime: 'Test string',
        displayName: 'Test string',
        entitlementId: 'Test string',
        gcpOracleZone: 'Test string',
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        properties: {
          activatedStorageCount: 42,
          additionalStorageCount: 42,
          availableStorageSizeGb: 42,
          computeCount: 42,
          computeModel: 'Test string',
          cpuCount: 42,
          customerContacts: [
            {
              email: 'Test string',
            },
          ],
          databaseServerType: 'Test string',
          dataStorageSizeTb: 42,
          dbNodeStorageSizeGb: 42,
          dbServerVersion: 'Test string',
          maintenanceWindow: {
            customActionTimeoutMins: 42,
            daysOfWeek: ['Test string'],
            hoursOfDay: [42],
            isCustomActionTimeoutEnabled: true,
            leadTimeWeek: 42,
            months: ['Test string'],
            patchingMode: 'Test string',
            preference: 'Test string',
            weeksOfMonth: [42],
          },
          maxCpuCount: 42,
          maxDataStorageTb: 42,
          maxDbNodeStorageSizeGb: 42,
          maxMemoryGb: 42,
          memorySizeGb: 42,
          monthlyDbServerVersion: 'Test string',
          monthlyStorageServerVersion: 'Test string',
          nextMaintenanceRunId: 'Test string',
          nextMaintenanceRunTime: 'Test string',
          nextSecurityMaintenanceRunTime: 'Test string',
          ocid: 'Test string',
          ociUrl: 'Test string',
          shape: 'Test string',
          state: 'Test string',
          storageCount: 42,
          storageServerType: 'Test string',
          storageServerVersion: 'Test string',
          totalStorageSizeGb: 42,
        },
      },
    );
    /** Deletes a single Exadata Infrastructure. */
    await gapi.client.oracledatabase.projects.locations.cloudExadataInfrastructures.delete(
      {
        force: true,
        name: 'Test string',
        requestId: 'Test string',
      },
    );
    /** Gets details of a single Exadata Infrastructure. */
    await gapi.client.oracledatabase.projects.locations.cloudExadataInfrastructures.get(
      {
        name: 'Test string',
      },
    );
    /** Lists Exadata Infrastructures in a given project and location. */
    await gapi.client.oracledatabase.projects.locations.cloudExadataInfrastructures.list(
      {
        filter: 'Test string',
        orderBy: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
    /** Lists the database servers of an Exadata Infrastructure instance. */
    await gapi.client.oracledatabase.projects.locations.cloudExadataInfrastructures.dbServers.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
    /** Creates a new VM Cluster in a given project and location. */
    await gapi.client.oracledatabase.projects.locations.cloudVmClusters.create(
      {
        cloudVmClusterId: 'Test string',
        parent: 'Test string',
        requestId: 'Test string',
      },
      {
        backupOdbSubnet: 'Test string',
        backupSubnetCidr: 'Test string',
        cidr: 'Test string',
        createTime: 'Test string',
        displayName: 'Test string',
        exadataInfrastructure: 'Test string',
        gcpOracleZone: 'Test string',
        identityConnector: {
          connectionState: 'Test string',
          serviceAgentEmail: 'Test string',
        },
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        network: 'Test string',
        odbNetwork: 'Test string',
        odbSubnet: 'Test string',
        properties: {
          clusterName: 'Test string',
          compartmentId: 'Test string',
          computeModel: 'Test string',
          cpuCoreCount: 42,
          dataStorageSizeTb: 42,
          dbNodeStorageSizeGb: 42,
          dbServerOcids: ['Test string'],
          diagnosticsDataCollectionOptions: {
            diagnosticsEventsEnabled: true,
            healthMonitoringEnabled: true,
            incidentLogsEnabled: true,
          },
          diskRedundancy: 'Test string',
          dnsListenerIp: 'Test string',
          domain: 'Test string',
          giVersion: 'Test string',
          hostname: 'Test string',
          hostnamePrefix: 'Test string',
          licenseType: 'Test string',
          localBackupEnabled: true,
          memorySizeGb: 42,
          nodeCount: 42,
          ocid: 'Test string',
          ociUrl: 'Test string',
          ocpuCount: 42,
          scanDns: 'Test string',
          scanDnsRecordId: 'Test string',
          scanIpIds: ['Test string'],
          scanListenerPortTcp: 42,
          scanListenerPortTcpSsl: 42,
          shape: 'Test string',
          sparseDiskgroupEnabled: true,
          sshPublicKeys: ['Test string'],
          state: 'Test string',
          storageSizeGb: 42,
          systemVersion: 'Test string',
          timeZone: {
            id: 'Test string',
            version: 'Test string',
          },
        },
      },
    );
    /** Deletes a single VM Cluster. */
    await gapi.client.oracledatabase.projects.locations.cloudVmClusters.delete({
      force: true,
      name: 'Test string',
      requestId: 'Test string',
    });
    /** Gets details of a single VM Cluster. */
    await gapi.client.oracledatabase.projects.locations.cloudVmClusters.get({
      name: 'Test string',
    });
    /** Lists the VM Clusters in a given project and location. */
    await gapi.client.oracledatabase.projects.locations.cloudVmClusters.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Lists the database nodes of a VM Cluster. */
    await gapi.client.oracledatabase.projects.locations.cloudVmClusters.dbNodes.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
    /** List DatabaseCharacterSets for the given project and location. */
    await gapi.client.oracledatabase.projects.locations.databaseCharacterSets.list(
      {
        filter: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
    /** Gets details of a single Database. */
    await gapi.client.oracledatabase.projects.locations.databases.get({
      name: 'Test string',
    });
    /** Lists all the Databases for the given project, location and DbSystem. */
    await gapi.client.oracledatabase.projects.locations.databases.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Lists all the DbSystemInitialStorageSizes for the given project and location. */
    await gapi.client.oracledatabase.projects.locations.dbSystemInitialStorageSizes.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
    /** Creates a new DbSystem in a given project and location. */
    await gapi.client.oracledatabase.projects.locations.dbSystems.create(
      {
        dbSystemId: 'Test string',
        parent: 'Test string',
        requestId: 'Test string',
      },
      {
        createTime: 'Test string',
        displayName: 'Test string',
        entitlementId: 'Test string',
        gcpOracleZone: 'Test string',
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        ociUrl: 'Test string',
        odbNetwork: 'Test string',
        odbSubnet: 'Test string',
        properties: {
          computeCount: 42,
          computeModel: 'Test string',
          databaseEdition: 'Test string',
          dataCollectionOptions: {
            isDiagnosticsEventsEnabled: true,
            isIncidentLogsEnabled: true,
          },
          dataStorageSizeGb: 42,
          dbHome: {
            database: {
              adminPassword: 'Test string',
              characterSet: 'Test string',
              createTime: 'Test string',
              databaseId: 'Test string',
              dbHomeName: 'Test string',
              dbName: 'Test string',
              dbUniqueName: 'Test string',
              gcpOracleZone: 'Test string',
              name: 'Test string',
              ncharacterSet: 'Test string',
              ociUrl: 'Test string',
              opsInsightsStatus: 'Test string',
              properties: {
                databaseManagementConfig: {
                  managementState: 'Test string',
                  managementType: 'Test string',
                },
                dbBackupConfig: {
                  autoBackupEnabled: true,
                  autoFullBackupDay: 'Test string',
                  autoFullBackupWindow: 'Test string',
                  autoIncrementalBackupWindow: 'Test string',
                  backupDeletionPolicy: 'Test string',
                  backupDestinationDetails: [
                    {
                      type: 'Test string',
                    },
                  ],
                  retentionPeriodDays: 42,
                },
                dbVersion: 'Test string',
                state: 'Test string',
              },
              tdeWalletPassword: 'Test string',
            },
            dbVersion: 'Test string',
            displayName: 'Test string',
            isUnifiedAuditingEnabled: true,
          },
          dbSystemOptions: {
            storageManagement: 'Test string',
          },
          domain: 'Test string',
          hostname: 'Test string',
          hostnamePrefix: 'Test string',
          initialDataStorageSizeGb: 42,
          licenseModel: 'Test string',
          lifecycleState: 'Test string',
          memorySizeGb: 42,
          nodeCount: 42,
          ocid: 'Test string',
          privateIp: 'Test string',
          recoStorageSizeGb: 42,
          shape: 'Test string',
          sshPublicKeys: ['Test string'],
          timeZone: {
            id: 'Test string',
            version: 'Test string',
          },
        },
      },
    );
    /** Deletes a single DbSystem. */
    await gapi.client.oracledatabase.projects.locations.dbSystems.delete({
      name: 'Test string',
      requestId: 'Test string',
    });
    /** Gets details of a single DbSystem. */
    await gapi.client.oracledatabase.projects.locations.dbSystems.get({
      name: 'Test string',
    });
    /** Lists all the DbSystems for the given project and location. */
    await gapi.client.oracledatabase.projects.locations.dbSystems.list({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Lists the database system shapes available for the project and location. */
    await gapi.client.oracledatabase.projects.locations.dbSystemShapes.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** List DbVersions for the given project and location. */
    await gapi.client.oracledatabase.projects.locations.dbVersions.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Lists the entitlements in a given project. */
    await gapi.client.oracledatabase.projects.locations.entitlements.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Creates a new Exadb (Exascale) VM Cluster resource. */
    await gapi.client.oracledatabase.projects.locations.exadbVmClusters.create(
      {
        exadbVmClusterId: 'Test string',
        parent: 'Test string',
        requestId: 'Test string',
      },
      {
        backupOdbSubnet: 'Test string',
        createTime: 'Test string',
        displayName: 'Test string',
        entitlementId: 'Test string',
        gcpOracleZone: 'Test string',
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        odbNetwork: 'Test string',
        odbSubnet: 'Test string',
        properties: {
          additionalEcpuCountPerNode: 42,
          clusterName: 'Test string',
          dataCollectionOptions: {
            isDiagnosticsEventsEnabled: true,
            isHealthMonitoringEnabled: true,
            isIncidentLogsEnabled: true,
          },
          enabledEcpuCountPerNode: 42,
          exascaleDbStorageVault: 'Test string',
          giVersion: 'Test string',
          gridImageId: 'Test string',
          hostname: 'Test string',
          hostnamePrefix: 'Test string',
          licenseModel: 'Test string',
          lifecycleState: 'Test string',
          memorySizeGb: 42,
          nodeCount: 42,
          ociUri: 'Test string',
          scanListenerPortTcp: 42,
          shapeAttribute: 'Test string',
          sshPublicKeys: ['Test string'],
          timeZone: {
            id: 'Test string',
            version: 'Test string',
          },
          vmFileSystemStorage: {
            sizeInGbsPerNode: 42,
          },
        },
      },
    );
    /** Deletes a single Exadb (Exascale) VM Cluster. */
    await gapi.client.oracledatabase.projects.locations.exadbVmClusters.delete({
      name: 'Test string',
      requestId: 'Test string',
    });
    /** Gets details of a single Exadb (Exascale) VM Cluster. */
    await gapi.client.oracledatabase.projects.locations.exadbVmClusters.get({
      name: 'Test string',
    });
    /** Lists all the Exadb (Exascale) VM Clusters for the given project and location. */
    await gapi.client.oracledatabase.projects.locations.exadbVmClusters.list({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates a single Exadb (Exascale) VM Cluster. To add virtual machines to existing exadb vm cluster, only pass the node count. */
    await gapi.client.oracledatabase.projects.locations.exadbVmClusters.patch(
      {
        name: 'Test string',
        requestId: 'Test string',
        updateMask: 'Test string',
      },
      {
        backupOdbSubnet: 'Test string',
        createTime: 'Test string',
        displayName: 'Test string',
        entitlementId: 'Test string',
        gcpOracleZone: 'Test string',
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        odbNetwork: 'Test string',
        odbSubnet: 'Test string',
        properties: {
          additionalEcpuCountPerNode: 42,
          clusterName: 'Test string',
          dataCollectionOptions: {
            isDiagnosticsEventsEnabled: true,
            isHealthMonitoringEnabled: true,
            isIncidentLogsEnabled: true,
          },
          enabledEcpuCountPerNode: 42,
          exascaleDbStorageVault: 'Test string',
          giVersion: 'Test string',
          gridImageId: 'Test string',
          hostname: 'Test string',
          hostnamePrefix: 'Test string',
          licenseModel: 'Test string',
          lifecycleState: 'Test string',
          memorySizeGb: 42,
          nodeCount: 42,
          ociUri: 'Test string',
          scanListenerPortTcp: 42,
          shapeAttribute: 'Test string',
          sshPublicKeys: ['Test string'],
          timeZone: {
            id: 'Test string',
            version: 'Test string',
          },
          vmFileSystemStorage: {
            sizeInGbsPerNode: 42,
          },
        },
      },
    );
    /** Removes virtual machines from an existing exadb vm cluster. */
    await gapi.client.oracledatabase.projects.locations.exadbVmClusters.removeVirtualMachine(
      {
        name: 'Test string',
      },
      {
        hostnames: ['Test string'],
        requestId: 'Test string',
      },
    );
    /** Creates a new ExascaleDB Storage Vault resource. */
    await gapi.client.oracledatabase.projects.locations.exascaleDbStorageVaults.create(
      {
        exascaleDbStorageVaultId: 'Test string',
        parent: 'Test string',
        requestId: 'Test string',
      },
      {
        createTime: 'Test string',
        displayName: 'Test string',
        entitlementId: 'Test string',
        gcpOracleZone: 'Test string',
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        properties: {
          additionalFlashCachePercent: 42,
          attachedShapeAttributes: ['Test string'],
          availableShapeAttributes: ['Test string'],
          description: 'Test string',
          exascaleDbStorageDetails: {
            availableSizeGbs: 42,
            totalSizeGbs: 42,
          },
          ocid: 'Test string',
          ociUri: 'Test string',
          state: 'Test string',
          timeZone: {
            id: 'Test string',
            version: 'Test string',
          },
          vmClusterCount: 42,
          vmClusterIds: ['Test string'],
        },
      },
    );
    /** Deletes a single ExascaleDB Storage Vault. */
    await gapi.client.oracledatabase.projects.locations.exascaleDbStorageVaults.delete(
      {
        name: 'Test string',
        requestId: 'Test string',
      },
    );
    /** Gets details of a single ExascaleDB Storage Vault. */
    await gapi.client.oracledatabase.projects.locations.exascaleDbStorageVaults.get(
      {
        name: 'Test string',
      },
    );
    /** Lists all the ExascaleDB Storage Vaults for the given project and location. */
    await gapi.client.oracledatabase.projects.locations.exascaleDbStorageVaults.list(
      {
        filter: 'Test string',
        orderBy: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
    /** Lists all the valid Oracle Grid Infrastructure (GI) versions for the given project and location. */
    await gapi.client.oracledatabase.projects.locations.giVersions.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Lists all the valid minor versions for the given project, location, gi version and shape family. */
    await gapi.client.oracledatabase.projects.locations.giVersions.minorVersions.list(
      {
        filter: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
    /** Creates a new ODB Network in a given project and location. */
    await gapi.client.oracledatabase.projects.locations.odbNetworks.create(
      {
        odbNetworkId: 'Test string',
        parent: 'Test string',
        requestId: 'Test string',
      },
      {
        createTime: 'Test string',
        entitlementId: 'Test string',
        gcpOracleZone: 'Test string',
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        network: 'Test string',
        state: 'Test string',
      },
    );
    /** Deletes a single ODB Network. */
    await gapi.client.oracledatabase.projects.locations.odbNetworks.delete({
      name: 'Test string',
      requestId: 'Test string',
    });
    /** Gets details of a single ODB Network. */
    await gapi.client.oracledatabase.projects.locations.odbNetworks.get({
      name: 'Test string',
    });
    /** Lists the ODB Networks in a given project and location. */
    await gapi.client.oracledatabase.projects.locations.odbNetworks.list({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Creates a new ODB Subnet in a given ODB Network. */
    await gapi.client.oracledatabase.projects.locations.odbNetworks.odbSubnets.create(
      {
        odbSubnetId: 'Test string',
        parent: 'Test string',
        requestId: 'Test string',
      },
      {
        cidrRange: 'Test string',
        createTime: 'Test string',
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        purpose: 'Test string',
        state: 'Test string',
      },
    );
    /** Deletes a single ODB Subnet. */
    await gapi.client.oracledatabase.projects.locations.odbNetworks.odbSubnets.delete(
      {
        name: 'Test string',
        requestId: 'Test string',
      },
    );
    /** Gets details of a single ODB Subnet. */
    await gapi.client.oracledatabase.projects.locations.odbNetworks.odbSubnets.get(
      {
        name: 'Test string',
      },
    );
    /** Lists all the ODB Subnets in a given ODB Network. */
    await gapi.client.oracledatabase.projects.locations.odbNetworks.odbSubnets.list(
      {
        filter: 'Test string',
        orderBy: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
    /** Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of `1`, corresponding to `Code.CANCELLED`. */
    await gapi.client.oracledatabase.projects.locations.operations.cancel(
      {
        name: 'Test string',
      },
      {},
    );
    /** Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. */
    await gapi.client.oracledatabase.projects.locations.operations.delete({
      name: 'Test string',
    });
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.oracledatabase.projects.locations.operations.get({
      name: 'Test string',
    });
    /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
    await gapi.client.oracledatabase.projects.locations.operations.list({
      filter: 'Test string',
      name: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      returnPartialSuccess: true,
    });
    /** Gets details of a single PluggableDatabase. */
    await gapi.client.oracledatabase.projects.locations.pluggableDatabases.get({
      name: 'Test string',
    });
    /** Lists all the PluggableDatabases for the given project, location and Container Database. */
    await gapi.client.oracledatabase.projects.locations.pluggableDatabases.list(
      {
        filter: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
  }
});
