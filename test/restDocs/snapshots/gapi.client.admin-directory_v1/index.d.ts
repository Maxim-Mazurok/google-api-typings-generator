/* Type definitions for non-npm package Admin SDK API directory_v1 0.0 */
// Project: https://developers.google.com/admin-sdk/
// Definitions by: Maxim Mazurok <https://github.com/Maxim-Mazurok>
//                 Nick Amoscato <https://github.com/namoscato>
//                 Declan Vong <https://github.com/declanvong>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 2.8

// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
// Generated from: http://localhost:3000/admin.json
// Revision: 20220628

/// <reference types="gapi.client" />

declare namespace gapi.client {
    /** Load Admin SDK API directory_v1 */
    function load(urlOrObject: "http://localhost:3000/admin.json"): Promise<void>;
    /** @deprecated Please load APIs with discovery documents. */
    function load(name: "admin", version: "directory_v1"): Promise<void>;
    /** @deprecated Please load APIs with discovery documents. */
    function load(name: "admin", version: "directory_v1", callback: () => any): void;

    namespace admin {
        interface Alias {
            alias?: string;
            etag?: string;
            id?: string;
            kind?: string;
            primaryEmail?: string;
        }
        interface Aliases {
            aliases?: any[];
            etag?: string;
            kind?: string;
        }
        interface Asp {
            /** The unique ID of the ASP. */
            codeId?: number;
            /** The time when the ASP was created. Expressed in [Unix time](https://en.wikipedia.org/wiki/Epoch_time) format. */
            creationTime?: string;
            /** ETag of the ASP. */
            etag?: string;
            /** The type of the API resource. This is always `admin#directory#asp`. */
            kind?: string;
            /** The time when the ASP was last used. Expressed in [Unix time](https://en.wikipedia.org/wiki/Epoch_time) format. */
            lastTimeUsed?: string;
            /** The name of the application that the user, represented by their `userId`, entered when the ASP was created. */
            name?: string;
            /** The unique ID of the user who issued the ASP. */
            userKey?: string;
        }
        interface Asps {
            /** ETag of the resource. */
            etag?: string;
            /** A list of ASP resources. */
            items?: Asp[];
            /** The type of the API resource. This is always `admin#directory#aspList`. */
            kind?: string;
        }
        interface AuxiliaryMessage {
            /** Human readable message in English. Example: "Given printer is invalid or no longer supported." */
            auxiliaryMessage?: string;
            /** Field that this message concerns. */
            fieldMask?: string;
            /** Message severity */
            severity?: string;
        }
        interface BatchCreatePrintersRequest {
            /** A list of Printers to be created. Max 50 at a time. */
            requests?: CreatePrinterRequest[];
        }
        interface BatchCreatePrintersResponse {
            /** A list of create failures. Printer IDs are not populated, as printer were not created. */
            failures?: FailureInfo[];
            /** A list of successfully created printers with their IDs populated. */
            printers?: Printer[];
        }
        interface BatchDeletePrintersRequest {
            /** A list of Printer.id that should be deleted. Max 100 at a time. */
            printerIds?: string[];
        }
        interface BatchDeletePrintersResponse {
            /** A list of update failures. */
            failedPrinters?: FailureInfo[];
            /** A list of Printer.id that were successfully deleted. */
            printerIds?: string[];
        }
        interface Building {
            /**
             * The postal address of the building. See [`PostalAddress`](/my-business/reference/rest/v4/PostalAddress) for details. Note that only a single address line and region code are
             * required.
             */
            address?: BuildingAddress;
            /** Unique identifier for the building. The maximum length is 100 characters. */
            buildingId?: string;
            /** The building name as seen by users in Calendar. Must be unique for the customer. For example, "NYC-CHEL". The maximum length is 100 characters. */
            buildingName?: string;
            /** The geographic coordinates of the center of the building, expressed as latitude and longitude in decimal degrees. */
            coordinates?: BuildingCoordinates;
            /** A brief description of the building. For example, "Chelsea Market". */
            description?: string;
            /** ETag of the resource. */
            etags?: string;
            /**
             * The display names for all floors in this building. The floors are expected to be sorted in ascending order, from lowest floor to highest floor. For example, ["B2", "B1", "L", "1",
             * "2", "2M", "3", "PH"] Must contain at least one entry.
             */
            floorNames?: string[];
            /** Kind of resource this is. */
            kind?: string;
        }
        interface BuildingAddress {
            /** Unstructured address lines describing the lower levels of an address. */
            addressLines?: string[];
            /** Optional. Highest administrative subdivision which is used for postal addresses of a country or region. */
            administrativeArea?: string;
            /** Optional. BCP-47 language code of the contents of this address (if known). */
            languageCode?: string;
            /**
             * Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do
             * not fit into this structure well, leave locality empty and use addressLines.
             */
            locality?: string;
            /** Optional. Postal code of the address. */
            postalCode?: string;
            /** Required. CLDR region code of the country/region of the address. */
            regionCode?: string;
            /** Optional. Sublocality of the address. */
            sublocality?: string;
        }
        interface BuildingCoordinates {
            /** Latitude in decimal degrees. */
            latitude?: number;
            /** Longitude in decimal degrees. */
            longitude?: number;
        }
        interface Buildings {
            /** The Buildings in this page of results. */
            buildings?: Building[];
            /** ETag of the resource. */
            etag?: string;
            /** Kind of resource this is. */
            kind?: string;
            /** The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results. */
            nextPageToken?: string;
        }
        interface CalendarResource {
            /** Unique ID for the building a resource is located in. */
            buildingId?: string;
            /** Capacity of a resource, number of seats in a room. */
            capacity?: number;
            /** ETag of the resource. */
            etags?: string;
            /** Instances of features for the calendar resource. */
            featureInstances?: any;
            /** Name of the floor a resource is located on. */
            floorName?: string;
            /** Name of the section within a floor a resource is located in. */
            floorSection?: string;
            /**
             * The read-only auto-generated name of the calendar resource which includes metadata about the resource such as building name, floor, capacity, etc. For example, "NYC-2-Training Room
             * 1A (16)".
             */
            generatedResourceName?: string;
            /** The type of the resource. For calendar resources, the value is `admin#directory#resources#calendars#CalendarResource`. */
            kind?: string;
            /** The category of the calendar resource. Either CONFERENCE_ROOM or OTHER. Legacy data is set to CATEGORY_UNKNOWN. */
            resourceCategory?: string;
            /** Description of the resource, visible only to admins. */
            resourceDescription?: string;
            /** The read-only email for the calendar resource. Generated as part of creating a new calendar resource. */
            resourceEmail?: string;
            /** The unique ID for the calendar resource. */
            resourceId?: string;
            /** The name of the calendar resource. For example, "Training Room 1A". */
            resourceName?: string;
            /** The type of the calendar resource, intended for non-room resources. */
            resourceType?: string;
            /** Description of the resource, visible to users and admins. */
            userVisibleDescription?: string;
        }
        interface CalendarResources {
            /** ETag of the resource. */
            etag?: string;
            /** The CalendarResources in this page of results. */
            items?: CalendarResource[];
            /** Identifies this as a collection of CalendarResources. This is always `admin#directory#resources#calendars#calendarResourcesList`. */
            kind?: string;
            /** The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results. */
            nextPageToken?: string;
        }
        interface Channel {
            /** The address where notifications are delivered for this channel. */
            address?: string;
            /** Date and time of notification channel expiration, expressed as a Unix timestamp, in milliseconds. Optional. */
            expiration?: string;
            /** A UUID or similar unique string that identifies this channel. */
            id?: string;
            /** Identifies this as a notification channel used to watch for changes to a resource, which is `api#channel`. */
            kind?: string;
            /** Additional parameters controlling delivery channel behavior. Optional. */
            params?: { [P in string]: string };
            /** A Boolean value to indicate whether payload is wanted. Optional. */
            payload?: boolean;
            /** An opaque ID that identifies the resource being watched on this channel. Stable across different API versions. */
            resourceId?: string;
            /** A version-specific identifier for the watched resource. */
            resourceUri?: string;
            /** An arbitrary string delivered to the target address with each notification delivered over this channel. Optional. */
            token?: string;
            /** The type of delivery mechanism used for this channel. */
            type?: string;
        }
        interface ChromeOsDevice {
            /** List of active time ranges (Read-only). */
            activeTimeRanges?: Array<{
                /** Duration of usage in milliseconds. */
                activeTime?: number;
                /** Date of usage */
                date?: string;
            }>;
            /** The asset identifier as noted by an administrator or specified during enrollment. */
            annotatedAssetId?: string;
            /** The address or location of the device as noted by the administrator. Maximum length is `200` characters. Empty values are allowed. */
            annotatedLocation?: string;
            /** The user of the device as noted by the administrator. Maximum length is 100 characters. Empty values are allowed. */
            annotatedUser?: string;
            /** (Read-only) The timestamp after which the device will stop receiving Chrome updates or support */
            autoUpdateExpiration?: string;
            /**
             * The boot mode for the device. The possible values are: * `Verified`: The device is running a valid version of the Chrome OS. * `Dev`: The devices's developer hardware switch is
             * enabled. When booted, the device has a command line shell. For an example of a developer switch, see the [Chromebook developer
             * information](https://www.chromium.org/chromium-os/developer-information-for-chrome-os-devices/samsung-series-5-chromebook#TOC-Developer-switch).
             */
            bootMode?: string;
            /** Information regarding CPU specs in the device. */
            cpuInfo?: Array<{
                /** The CPU architecture. */
                architecture?: string;
                /** Information for the Logical CPUs */
                logicalCpus?: Array<{
                    /** C-States indicate the power consumption state of the CPU. For more information look at documentation published by the CPU maker. */
                    cStates?: Array<{
                        /** Name of the state. */
                        displayName?: string;
                        /** Time spent in the state since the last reboot. */
                        sessionDuration?: string;
                    }>;
                    /** Current frequency the CPU is running at. */
                    currentScalingFrequencyKhz?: number;
                    /** Idle time since last boot. */
                    idleDuration?: string;
                    /** Maximum frequency the CPU is allowed to run at, by policy. */
                    maxScalingFrequencyKhz?: number;
                }>;
                /** The max CPU clock speed in kHz. */
                maxClockSpeedKhz?: number;
                /** The CPU model name. */
                model?: string;
            }>;
            /** Reports of CPU utilization and temperature (Read-only) */
            cpuStatusReports?: Array<{
                /** List of CPU temperature samples. */
                cpuTemperatureInfo?: Array<{
                    /** CPU label */
                    label?: string;
                    /** Temperature in Celsius degrees. */
                    temperature?: number;
                }>;
                cpuUtilizationPercentageInfo?: number[];
                /** Date and time the report was received. */
                reportTime?: string;
            }>;
            /** List of device files to download (Read-only) */
            deviceFiles?: Array<{
                /** Date and time the file was created */
                createTime?: string;
                /** File download URL */
                downloadUrl?: string;
                /** File name */
                name?: string;
                /** File type */
                type?: string;
            }>;
            /** The unique ID of the Chrome device. */
            deviceId?: string;
            /** Reports of disk space and other info about mounted/connected volumes. */
            diskVolumeReports?: Array<{
                /** Disk volumes */
                volumeInfo?: Array<{
                    /** Free disk space [in bytes] */
                    storageFree?: string;
                    /** Total disk space [in bytes] */
                    storageTotal?: string;
                    /** Volume id */
                    volumeId?: string;
                }>;
            }>;
            /**
             * (Read-only) Built-in MAC address for the docking station that the device connected to. Factory sets Media access control address (MAC address) assigned for use by a dock. It is
             * reserved specifically for MAC pass through device policy. The format is twelve (12) hexadecimal digits without any delimiter (uppercase letters). This is only relevant for some
             * devices.
             */
            dockMacAddress?: string;
            /** ETag of the resource. */
            etag?: string;
            /** The device's MAC address on the ethernet network interface. */
            ethernetMacAddress?: string;
            /**
             * (Read-only) MAC address used by the Chromebook’s internal ethernet port, and for onboard network (ethernet) interface. The format is twelve (12) hexadecimal digits without any
             * delimiter (uppercase letters). This is only relevant for some devices.
             */
            ethernetMacAddress0?: string;
            /** The Chrome device's firmware version. */
            firmwareVersion?: string;
            /** The type of resource. For the Chromeosdevices resource, the value is `admin#directory#chromeosdevice`. */
            kind?: string;
            /** Date and time the device was last enrolled (Read-only) */
            lastEnrollmentTime?: string;
            /** Contains last known network (Read-only) */
            lastKnownNetwork?: Array<{
                /** The IP address. */
                ipAddress?: string;
                /** The WAN IP address. */
                wanIpAddress?: string;
            }>;
            /** Date and time the device was last synchronized with the policy settings in the G Suite administrator control panel (Read-only) */
            lastSync?: string;
            /** The device's wireless MAC address. If the device does not have this information, it is not included in the response. */
            macAddress?: string;
            /** (Read-only) The date the device was manufactured in yyyy-mm-dd format. */
            manufactureDate?: string;
            /**
             * The Mobile Equipment Identifier (MEID) or the International Mobile Equipment Identity (IMEI) for the 3G mobile card in a mobile device. A MEID/IMEI is typically used when adding a
             * device to a wireless carrier's post-pay service plan. If the device does not have this information, this property is not included in the response. For more information on how to
             * export a MEID/IMEI list, see the [Developer's Guide](/admin-sdk/directory/v1/guides/manage-chrome-devices.html#export_meid).
             */
            meid?: string;
            /** The device's model information. If the device does not have this information, this property is not included in the response. */
            model?: string;
            /**
             * Notes about this device added by the administrator. This property can be [searched](https://support.google.com/chrome/a/answer/1698333) with the
             * [list](/admin-sdk/directory/v1/reference/chromeosdevices/list) method's `query` parameter. Maximum length is 500 characters. Empty values are allowed.
             */
            notes?: string;
            /** The device's order number. Only devices directly purchased from Google have an order number. */
            orderNumber?: string;
            /**
             * The unique ID of the organizational unit. orgUnitPath is the human readable version of orgUnitId. While orgUnitPath may change by renaming an organizational unit within the path,
             * orgUnitId is unchangeable for one organizational unit. This property can be [updated](/admin-sdk/directory/v1/guides/manage-chrome-devices#move_chrome_devices_to_ou) using the API.
             * For more information about how to create an organizational structure for your device, see the [administration help center](https://support.google.com/a/answer/182433).
             */
            orgUnitId?: string;
            /**
             * The full parent path with the organizational unit's name associated with the device. Path names are case insensitive. If the parent organizational unit is the top-level
             * organization, it is represented as a forward slash, `/`. This property can be [updated](/admin-sdk/directory/v1/guides/manage-chrome-devices#move_chrome_devices_to_ou) using the
             * API. For more information about how to create an organizational structure for your device, see the [administration help center](https://support.google.com/a/answer/182433).
             */
            orgUnitPath?: string;
            /** The Chrome device's operating system version. */
            osVersion?: string;
            /** The Chrome device's platform version. */
            platformVersion?: string;
            /** List of recent device users, in descending order, by last login time. */
            recentUsers?: Array<{
                /** The user's email address. This is only present if the user type is `USER_TYPE_MANAGED`. */
                email?: string;
                /** The type of the user. */
                type?: string;
            }>;
            /** List of screenshot files to download. Type is always "SCREENSHOT_FILE". (Read-only) */
            screenshotFiles?: Array<{
                /** Date and time the file was created */
                createTime?: string;
                /** File download URL */
                downloadUrl?: string;
                /** File name */
                name?: string;
                /** File type */
                type?: string;
            }>;
            /** The Chrome device serial number entered when the device was enabled. This value is the same as the Admin console's *Serial Number* in the *Chrome OS Devices* tab. */
            serialNumber?: string;
            /** The status of the device. */
            status?: string;
            /** Final date the device will be supported (Read-only) */
            supportEndDate?: string;
            /** Reports of amounts of available RAM memory (Read-only) */
            systemRamFreeReports?: Array<{
                /** Date and time the report was received. */
                reportTime?: string;
                systemRamFreeInfo?: string[];
            }>;
            /** Total RAM on the device [in bytes] (Read-only) */
            systemRamTotal?: string;
            /** Trusted Platform Module (TPM) (Read-only) */
            tpmVersionInfo?: {
                /** TPM family. We use the TPM 2.0 style encoding, e.g.: TPM 1.2: "1.2" -> 312e3200 TPM 2.0: "2.0" -> 322e3000 */
                family?: string;
                /** TPM firmware version. */
                firmwareVersion?: string;
                /** TPM manufacturer code. */
                manufacturer?: string;
                /** TPM specification level. See Library Specification for TPM 2.0 and Main Specification for TPM 1.2. */
                specLevel?: string;
                /** TPM model number. */
                tpmModel?: string;
                /** Vendor-specific information such as Vendor ID. */
                vendorSpecific?: string;
            };
            /** Determines if the device will auto renew its support after the support end date. This is a read-only property. */
            willAutoRenew?: boolean;
        }
        interface ChromeOsDeviceAction {
            /** Action to be taken on the Chrome OS device. */
            action?: string;
            /**
             * Only used when the action is `deprovision`. With the `deprovision` action, this field is required. *Note*: The deprovision reason is audited because it might have implications on
             * licenses for perpetual subscription customers.
             */
            deprovisionReason?: string;
        }
        interface ChromeOsDevices {
            /** List of Chrome OS Device objects. */
            chromeosdevices?: ChromeOsDevice[];
            /** ETag of the resource. */
            etag?: string;
            /** Kind of resource this is. */
            kind?: string;
            /** Token used to access the next page of this result. To access the next page, use this token's value in the `pageToken` query string of this request. */
            nextPageToken?: string;
        }
        interface ChromeOsMoveDevicesToOu {
            /** Chrome OS devices to be moved to OU */
            deviceIds?: string[];
        }
        interface CreatePrinterRequest {
            /** Required. The name of the customer. Format: customers/{customer_id} */
            parent?: string;
            /** Required. A printer to create. If you want to place the printer under particular OU then populate printer.org_unit_id filed. Otherwise the printer will be placed under root OU. */
            printer?: Printer;
        }
        interface Customer {
            /** The customer's secondary contact email address. This email address cannot be on the same domain as the `customerDomain` */
            alternateEmail?: string;
            /** The customer's creation time (Readonly) */
            customerCreationTime?: string;
            /** The customer's primary domain name string. Do not include the `www` prefix when creating a new customer. */
            customerDomain?: string;
            /** ETag of the resource. */
            etag?: string;
            /** The unique ID for the customer's Google Workspace account. (Readonly) */
            id?: string;
            /** Identifies the resource as a customer. Value: `admin#directory#customer` */
            kind?: string;
            /**
             * The customer's ISO 639-2 language code. See the [Language Codes](/admin-sdk/directory/v1/languages) page for the list of supported codes. Valid language codes outside the supported
             * set will be accepted by the API but may lead to unexpected behavior. The default value is `en`.
             */
            language?: string;
            /** The customer's contact phone number in [E.164](https://en.wikipedia.org/wiki/E.164) format. */
            phoneNumber?: string;
            /** The customer's postal address information. */
            postalAddress?: CustomerPostalAddress;
        }
        interface CustomerPostalAddress {
            /** A customer's physical address. The address can be composed of one to three lines. */
            addressLine1?: string;
            /** Address line 2 of the address. */
            addressLine2?: string;
            /** Address line 3 of the address. */
            addressLine3?: string;
            /** The customer contact's name. */
            contactName?: string;
            /** This is a required property. For `countryCode` information see the [ISO 3166 country code elements](https://www.iso.org/iso/country_codes.htm). */
            countryCode?: string;
            /** Name of the locality. An example of a locality value is the city of `San Francisco`. */
            locality?: string;
            /** The company or company division name. */
            organizationName?: string;
            /** The postal code. A postalCode example is a postal zip code such as `10009`. This is in accordance with - http: //portablecontacts.net/draft-spec.html#address_element. */
            postalCode?: string;
            /** Name of the region. An example of a region value is `NY` for the state of New York. */
            region?: string;
        }
        interface DirectoryChromeosdevicesCommand {
            /** The time at which the command will expire. If the device doesn't execute the command within this time the command will become expired. */
            commandExpireTime?: string;
            /** Unique ID of a device command. */
            commandId?: string;
            /** The result of the command execution. */
            commandResult?: DirectoryChromeosdevicesCommandResult;
            /** The timestamp when the command was issued by the admin. */
            issueTime?: string;
            /** The payload that the command specified, if any. */
            payload?: string;
            /** Indicates the command state. */
            state?: string;
            /** The type of the command. */
            type?: string;
        }
        interface DirectoryChromeosdevicesCommandResult {
            /** The error message with a short explanation as to why the command failed. Only present if the command failed. */
            errorMessage?: string;
            /** The time at which the command was executed or failed to execute. */
            executeTime?: string;
            /** The result of the command. */
            result?: string;
        }
        interface DirectoryChromeosdevicesIssueCommandRequest {
            /** The type of command. */
            commandType?: string;
            /**
             * The payload for the command, provide it only if command supports it. The following commands support adding payload: - SET_VOLUME: Payload is a stringified JSON object in the form: {
             * "volume": 50 }. The volume has to be an integer in the range [0,100].
             */
            payload?: string;
        }
        interface DirectoryChromeosdevicesIssueCommandResponse {
            /** The unique ID of the issued command, used to retrieve the command status. */
            commandId?: string;
        }
        interface DomainAlias {
            /** The creation time of the domain alias. (Read-only). */
            creationTime?: string;
            /** The domain alias name. */
            domainAliasName?: string;
            /** ETag of the resource. */
            etag?: string;
            /** Kind of resource this is. */
            kind?: string;
            /** The parent domain name that the domain alias is associated with. This can either be a primary or secondary domain name within a customer. */
            parentDomainName?: string;
            /** Indicates the verification state of a domain alias. (Read-only) */
            verified?: boolean;
        }
        interface DomainAliases {
            /** List of domain alias objects. */
            domainAliases?: DomainAlias[];
            /** ETag of the resource. */
            etag?: string;
            /** Kind of resource this is. */
            kind?: string;
        }
        interface Domains {
            /** Creation time of the domain. Expressed in [Unix time](https://en.wikipedia.org/wiki/Epoch_time) format. (Read-only). */
            creationTime?: string;
            /** List of domain alias objects. (Read-only) */
            domainAliases?: DomainAlias[];
            /** The domain name of the customer. */
            domainName?: string;
            /** ETag of the resource. */
            etag?: string;
            /** Indicates if the domain is a primary domain (Read-only). */
            isPrimary?: boolean;
            /** Kind of resource this is. */
            kind?: string;
            /** Indicates the verification state of a domain. (Read-only). */
            verified?: boolean;
        }
        interface Domains2 {
            /** List of domain objects. */
            domains?: Domains[];
            /** ETag of the resource. */
            etag?: string;
            /** Kind of resource this is. */
            kind?: string;
        }
        // tslint:disable-next-line:no-empty-interface
        interface Empty {
        }
        interface FailureInfo {
            /** Canonical code for why the update failed to apply. */
            errorCode?: string;
            /** Failure reason message. */
            errorMessage?: string;
            /** Failed printer. */
            printer?: Printer;
            /** Id of a failed printer. */
            printerId?: string;
        }
        interface Feature {
            /** ETag of the resource. */
            etags?: string;
            /** Kind of resource this is. */
            kind?: string;
            /** The name of the feature. */
            name?: string;
        }
        interface FeatureInstance {
            /** The feature that this is an instance of. A calendar resource may have multiple instances of a feature. */
            feature?: Feature;
        }
        interface FeatureRename {
            /** New name of the feature. */
            newName?: string;
        }
        interface Features {
            /** ETag of the resource. */
            etag?: string;
            /** The Features in this page of results. */
            features?: Feature[];
            /** Kind of resource this is. */
            kind?: string;
            /** The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results. */
            nextPageToken?: string;
        }
        interface Group {
            /** Read-only. Value is `true` if this group was created by an administrator rather than a user. */
            adminCreated?: boolean;
            /** Read-only. A list of a group's alias email addresses. */
            aliases?: string[];
            /**
             * An extended description to help users determine the purpose of a group. For example, you can include information about who should join the group, the types of messages to send to
             * the group, links to FAQs about the group, or related groups. Maximum length is `4,096` characters.
             */
            description?: string;
            /**
             * The number of users that are direct members of the group. If a group is a member (child) of this group (the parent), members of the child group are not counted in the
             * `directMembersCount` property of the parent group.
             */
            directMembersCount?: string;
            /**
             * The group's email address. If your account has multiple domains, select the appropriate domain for the email address. The `email` must be unique. This property is required when
             * creating a group. Group email addresses are subject to the same character usage rules as usernames, see the [help center](https://support.google.com/a/answer/9193374) for details.
             */
            email?: string;
            /** ETag of the resource. */
            etag?: string;
            /** Read-only. The unique ID of a group. A group `id` can be used as a group request URI's `groupKey`. */
            id?: string;
            /** The type of the API resource. For Groups resources, the value is `admin#directory#group`. */
            kind?: string;
            /** The group's display name. */
            name?: string;
            /**
             * Read-only. A list of the group's non-editable alias email addresses that are outside of the account's primary domain or subdomains. These are functioning email addresses used by the
             * group. This is a read-only property returned in the API's response for a group. If edited in a group's POST or PUT request, the edit is ignored by the API service.
             */
            nonEditableAliases?: string[];
        }
        interface Groups {
            /** ETag of the resource. */
            etag?: string;
            /** List of group objects. */
            groups?: Group[];
            /** Kind of resource this is. */
            kind?: string;
            /** Token used to access next page of this result. */
            nextPageToken?: string;
        }
        interface ListPrinterModelsResponse {
            /** A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages. */
            nextPageToken?: string;
            /** Printer models that are currently allowed to be configured for ChromeOs. Some printers may be added or removed over time. */
            printerModels?: PrinterModel[];
        }
        interface ListPrintersResponse {
            /** A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages. */
            nextPageToken?: string;
            /**
             * List of printers. If `org_unit_id` was given in the request, then only printers visible for this OU will be returned. If `org_unit_id` was not given in the request, then all
             * printers will be returned.
             */
            printers?: Printer[];
        }
        interface Member {
            /** Defines mail delivery preferences of member. This is only supported by create/update/get. */
            delivery_settings?: string;
            /**
             * The member's email address. A member can be a user or another group. This property is required when adding a member to a group. The `email` must be unique and cannot be an alias of
             * another group. If the email address is changed, the API automatically reflects the email address changes.
             */
            email?: string;
            /** ETag of the resource. */
            etag?: string;
            /** The unique ID of the group member. A member `id` can be used as a member request URI's `memberKey`. */
            id?: string;
            /** The type of the API resource. For Members resources, the value is `admin#directory#member`. */
            kind?: string;
            /**
             * The member's role in a group. The API returns an error for cycles in group memberships. For example, if `group1` is a member of `group2`, `group2` cannot be a member of `group1`.
             * For more information about a member's role, see the [administration help center](https://support.google.com/a/answer/167094).
             */
            role?: string;
            /** Status of member (Immutable) */
            status?: string;
            /** The type of group member. */
            type?: string;
        }
        interface Members {
            /** ETag of the resource. */
            etag?: string;
            /** Kind of resource this is. */
            kind?: string;
            /** List of member objects. */
            members?: Member[];
            /** Token used to access next page of this result. */
            nextPageToken?: string;
        }
        interface MembersHasMember {
            /** Output only. Identifies whether the given user is a member of the group. Membership can be direct or nested. */
            isMember?: boolean;
        }
        interface MobileDevice {
            /** Adb (USB debugging) enabled or disabled on device (Read-only) */
            adbStatus?: boolean;
            /**
             * The list of applications installed on an Android mobile device. It is not applicable to Google Sync and iOS devices. The list includes any Android applications that access Google
             * Workspace data. When updating an applications list, it is important to note that updates replace the existing list. If the Android device has two existing applications and the API
             * updates the list with five applications, the is now the updated list of five applications.
             */
            applications?: Array<{
                /** The application's display name. An example is `Browser`. */
                displayName?: string;
                /** The application's package name. An example is `com.android.browser`. */
                packageName?: string;
                /**
                 * The list of permissions of this application. These can be either a standard Android permission or one defined by the application, and are found in an application's [Android
                 * manifest](https://developer.android.com/guide/topics/manifest/uses-permission-element.html). Examples of a Calendar application's permissions are `READ_CALENDAR`, or
                 * `MANAGE_ACCOUNTS`.
                 */
                permission?: string[];
                /** The application's version code. An example is `13`. */
                versionCode?: number;
                /** The application's version name. An example is `3.2-140714`. */
                versionName?: string;
            }>;
            /** The device's baseband version. */
            basebandVersion?: string;
            /** Mobile Device Bootloader version (Read-only) */
            bootloaderVersion?: string;
            /** Mobile Device Brand (Read-only) */
            brand?: string;
            /** The device's operating system build number. */
            buildNumber?: string;
            /** The default locale used on the device. */
            defaultLanguage?: string;
            /** Developer options enabled or disabled on device (Read-only) */
            developerOptionsStatus?: boolean;
            /** The compromised device status. */
            deviceCompromisedStatus?: string;
            /** The serial number for a Google Sync mobile device. For Android and iOS devices, this is a software generated unique identifier. */
            deviceId?: string;
            /** DevicePasswordStatus (Read-only) */
            devicePasswordStatus?: string;
            /**
             * List of owner's email addresses. If your application needs the current list of user emails, use the [get](/admin-sdk/directory/v1/reference/mobiledevices/get.html) method. For
             * additional information, see the [retrieve a user](/admin-sdk/directory/v1/guides/manage-users#get_user) method.
             */
            email?: string[];
            /** Mobile Device Encryption Status (Read-only) */
            encryptionStatus?: string;
            /** ETag of the resource. */
            etag?: string;
            /** Date and time the device was first synchronized with the policy settings in the G Suite administrator control panel (Read-only) */
            firstSync?: string;
            /** Mobile Device Hardware (Read-only) */
            hardware?: string;
            /**
             * The IMEI/MEID unique identifier for Android hardware. It is not applicable to Google Sync devices. When adding an Android mobile device, this is an optional property. When updating
             * one of these devices, this is a read-only property.
             */
            hardwareId?: string;
            /** The device's IMEI number. */
            imei?: string;
            /** The device's kernel version. */
            kernelVersion?: string;
            /** The type of the API resource. For Mobiledevices resources, the value is `admin#directory#mobiledevice`. */
            kind?: string;
            /** Date and time the device was last synchronized with the policy settings in the G Suite administrator control panel (Read-only) */
            lastSync?: string;
            /** Boolean indicating if this account is on owner/primary profile or not. */
            managedAccountIsOnOwnerProfile?: boolean;
            /** Mobile Device manufacturer (Read-only) */
            manufacturer?: string;
            /** The device's MEID number. */
            meid?: string;
            /**
             * The mobile device's model name, for example Nexus S. This property can be [updated](/admin-sdk/directory/v1/reference/mobiledevices/update.html). For more information, see the
             * [Developer's Guide](/admin-sdk/directory/v1/guides/manage-mobile=devices#update_mobile_device).
             */
            model?: string;
            /**
             * List of the owner's user names. If your application needs the current list of device owner names, use the [get](/admin-sdk/directory/v1/reference/mobiledevices/get.html) method. For
             * more information about retrieving mobile device user information, see the [Developer's Guide](/admin-sdk/directory/v1/guides/manage-users#get_user).
             */
            name?: string[];
            /** Mobile Device mobile or network operator (if available) (Read-only) */
            networkOperator?: string;
            /**
             * The mobile device's operating system, for example IOS 4.3 or Android 2.3.5. This property can be [updated](/admin-sdk/directory/v1/reference/mobiledevices/update.html). For more
             * information, see the [Developer's Guide](/admin-sdk/directory/v1/guides/manage-mobile-devices#update_mobile_device).
             */
            os?: string;
            /** List of accounts added on device (Read-only) */
            otherAccountsInfo?: string[];
            /** DMAgentPermission (Read-only) */
            privilege?: string;
            /** Mobile Device release version version (Read-only) */
            releaseVersion?: string;
            /** The unique ID the API service uses to identify the mobile device. */
            resourceId?: string;
            /** Mobile Device Security patch level (Read-only) */
            securityPatchLevel?: string;
            /** The device's serial number. */
            serialNumber?: string;
            /** The device's status. */
            status?: string;
            /** Work profile supported on device (Read-only) */
            supportsWorkProfile?: boolean;
            /** The type of mobile device. */
            type?: string;
            /** Unknown sources enabled or disabled on device (Read-only) */
            unknownSourcesStatus?: boolean;
            /**
             * Gives information about the device such as `os` version. This property can be [updated](/admin-sdk/directory/v1/reference/mobiledevices/update.html). For more information, see the
             * [Developer's Guide](/admin-sdk/directory/v1/guides/manage-mobile-devices#update_mobile_device).
             */
            userAgent?: string;
            /** The device's MAC address on Wi-Fi networks. */
            wifiMacAddress?: string;
        }
        interface MobileDeviceAction {
            /** The action to be performed on the device. */
            action?: string;
        }
        interface MobileDevices {
            /** ETag of the resource. */
            etag?: string;
            /** Kind of resource this is. */
            kind?: string;
            /** List of Mobile Device objects. */
            mobiledevices?: MobileDevice[];
            /** Token used to access next page of this result. */
            nextPageToken?: string;
        }
        interface OrgUnit {
            /**
             * Determines if a sub-organizational unit can inherit the settings of the parent organization. The default value is `false`, meaning a sub-organizational unit inherits the settings of
             * the nearest parent organizational unit. For more information on inheritance and users in an organization structure, see the [administration help
             * center](https://support.google.com/a/answer/4352075).
             */
            blockInheritance?: boolean;
            /** Description of the organizational unit. */
            description?: string;
            /** ETag of the resource. */
            etag?: string;
            /** The type of the API resource. For Orgunits resources, the value is `admin#directory#orgUnit`. */
            kind?: string;
            /** The organizational unit's path name. For example, an organizational unit's name within the /corp/support/sales_support parent path is sales_support. Required. */
            name?: string;
            /** The unique ID of the organizational unit. */
            orgUnitId?: string;
            /**
             * The full path to the organizational unit. The `orgUnitPath` is a derived property. When listed, it is derived from `parentOrgunitPath` and organizational unit's `name`. For example,
             * for an organizational unit named 'apps' under parent organization '/engineering', the orgUnitPath is '/engineering/apps'. In order to edit an `orgUnitPath`, either update the name
             * of the organization or the `parentOrgunitPath`. A user's organizational unit determines which Google Workspace services the user has access to. If the user is moved to a new
             * organization, the user's access changes. For more information about organization structures, see the [administration help center](https://support.google.com/a/answer/4352075). For
             * more information about moving a user to a different organization, see [Update a user](/admin-sdk/directory/v1/guides/manage-users.html#update_user).
             */
            orgUnitPath?: string;
            /** The unique ID of the parent organizational unit. Required, unless `parentOrgUnitPath` is set. */
            parentOrgUnitId?: string;
            /** The organizational unit's parent path. For example, /corp/sales is the parent path for /corp/sales/sales_support organizational unit. Required, unless `parentOrgUnitId` is set. */
            parentOrgUnitPath?: string;
        }
        interface OrgUnits {
            /** ETag of the resource. */
            etag?: string;
            /** The type of the API resource. For Org Unit resources, the type is `admin#directory#orgUnits`. */
            kind?: string;
            /** List of organizational unit objects. */
            organizationUnits?: OrgUnit[];
        }
        interface Printer {
            /** Output only. Auxiliary messages about issues with the printer configuration if any. */
            auxiliaryMessages?: AuxiliaryMessage[];
            /** Output only. Time when printer was created. */
            createTime?: string;
            /** Editable. Description of printer. */
            description?: string;
            /** Editable. Name of printer. */
            displayName?: string;
            /** Id of the printer. (During printer creation leave empty) */
            id?: string;
            /** Editable. Make and model of printer. e.g. Lexmark MS610de Value must be in format as seen in ListPrinterModels response. */
            makeAndModel?: string;
            /** The resource name of the Printer object, in the format customers/{customer-id}/printers/{printer-id} (During printer creation leave empty) */
            name?: string;
            /** Organization Unit that owns this printer (Only can be set during Printer creation) */
            orgUnitId?: string;
            /** Editable. Printer URI. */
            uri?: string;
            /** Editable. flag to use driverless configuration or not. If it's set to be true, make_and_model can be ignored */
            useDriverlessConfig?: boolean;
        }
        interface PrinterModel {
            /** Display name. eq. "Brother MFC-8840D" */
            displayName?: string;
            /** Make and model as represented in "make_and_model" field in Printer object. eq. "brother mfc-8840d" */
            makeAndModel?: string;
            /** Manufacturer. eq. "Brother" */
            manufacturer?: string;
        }
        interface Privilege {
            /** A list of child privileges. Privileges for a service form a tree. Each privilege can have a list of child privileges; this list is empty for a leaf privilege. */
            childPrivileges?: Privilege[];
            /** ETag of the resource. */
            etag?: string;
            /** If the privilege can be restricted to an organization unit. */
            isOuScopable?: boolean;
            /** The type of the API resource. This is always `admin#directory#privilege`. */
            kind?: string;
            /** The name of the privilege. */
            privilegeName?: string;
            /** The obfuscated ID of the service this privilege is for. This value is returned with [`Privileges.list()`](/admin-sdk/directory/v1/reference/privileges/list). */
            serviceId?: string;
            /** The name of the service this privilege is for. */
            serviceName?: string;
        }
        interface Privileges {
            /** ETag of the resource. */
            etag?: string;
            /** A list of Privilege resources. */
            items?: Privilege[];
            /** The type of the API resource. This is always `admin#directory#privileges`. */
            kind?: string;
        }
        interface Role {
            /** ETag of the resource. */
            etag?: string;
            /** Returns `true` if the role is a super admin role. */
            isSuperAdminRole?: boolean;
            /** Returns `true` if this is a pre-defined system role. */
            isSystemRole?: boolean;
            /** The type of the API resource. This is always `admin#directory#role`. */
            kind?: string;
            /** A short description of the role. */
            roleDescription?: string;
            /** ID of the role. */
            roleId?: string;
            /** Name of the role. */
            roleName?: string;
            /** The set of privileges that are granted to this role. */
            rolePrivileges?: Array<{
                /** The name of the privilege. */
                privilegeName?: string;
                /** The obfuscated ID of the service this privilege is for. This value is returned with [`Privileges.list()`](/admin-sdk/directory/v1/reference/privileges/list). */
                serviceId?: string;
            }>;
        }
        interface RoleAssignment {
            /**
             * The unique ID of the entity this role is assigned to—either the `user_id` of a user or the `uniqueId` of a service account, as defined in [Identity and Access Management
             * (IAM)](https://cloud.google.com/iam/docs/reference/rest/v1/projects.serviceAccounts).
             */
            assignedTo?: string;
            /** ETag of the resource. */
            etag?: string;
            /** The type of the API resource. This is always `admin#directory#roleAssignment`. */
            kind?: string;
            /** If the role is restricted to an organization unit, this contains the ID for the organization unit the exercise of this role is restricted to. */
            orgUnitId?: string;
            /** ID of this roleAssignment. */
            roleAssignmentId?: string;
            /** The ID of the role that is assigned. */
            roleId?: string;
            /** The scope in which this role is assigned. */
            scopeType?: string;
        }
        interface RoleAssignments {
            /** ETag of the resource. */
            etag?: string;
            /** A list of RoleAssignment resources. */
            items?: RoleAssignment[];
            /** The type of the API resource. This is always `admin#directory#roleAssignments`. */
            kind?: string;
            nextPageToken?: string;
        }
        interface Roles {
            /** ETag of the resource. */
            etag?: string;
            /** A list of Role resources. */
            items?: Role[];
            /** The type of the API resource. This is always `admin#directory#roles`. */
            kind?: string;
            nextPageToken?: string;
        }
        interface Schema {
            /** Display name for the schema. */
            displayName?: string;
            /** The ETag of the resource. */
            etag?: string;
            /** A list of fields in the schema. */
            fields?: SchemaFieldSpec[];
            /** Kind of resource this is. */
            kind?: string;
            /** The unique identifier of the schema (Read-only) */
            schemaId?: string;
            /** The schema's name. Each `schema_name` must be unique within a customer. Reusing a name results in a `409: Entity already exists` error. */
            schemaName?: string;
        }
        interface SchemaFieldSpec {
            /** Display Name of the field. */
            displayName?: string;
            /** The ETag of the field. */
            etag?: string;
            /** The unique identifier of the field (Read-only) */
            fieldId?: string;
            /** The name of the field. */
            fieldName?: string;
            /** The type of the field. */
            fieldType?: string;
            /** Boolean specifying whether the field is indexed or not. Default: `true`. */
            indexed?: boolean;
            /** The kind of resource this is. For schema fields this is always `admin#directory#schema#fieldspec`. */
            kind?: string;
            /** A boolean specifying whether this is a multi-valued field or not. Default: `false`. */
            multiValued?: boolean;
            /** Indexing spec for a numeric field. By default, only exact match queries will be supported for numeric fields. Setting the `numericIndexingSpec` allows range queries to be supported. */
            numericIndexingSpec?: {
                /** Maximum value of this field. This is meant to be indicative rather than enforced. Values outside this range will still be indexed, but search may not be as performant. */
                maxValue?: number;
                /** Minimum value of this field. This is meant to be indicative rather than enforced. Values outside this range will still be indexed, but search may not be as performant. */
                minValue?: number;
            };
            /**
             * Specifies who can view values of this field. See [Retrieve users as a non-administrator](/admin-sdk/directory/v1/guides/manage-users#retrieve_users_non_admin) for more information.
             * Note: It may take up to 24 hours for changes to this field to be reflected.
             */
            readAccessType?: string;
        }
        interface Schemas {
            /** ETag of the resource. */
            etag?: string;
            /** Kind of resource this is. */
            kind?: string;
            /** List of UserSchema objects. */
            schemas?: Schema[];
        }
        interface Token {
            /** Whether the application is registered with Google. The value is `true` if the application has an anonymous Client ID. */
            anonymous?: boolean;
            /** The Client ID of the application the token is issued to. */
            clientId?: string;
            /** The displayable name of the application the token is issued to. */
            displayText?: string;
            /** ETag of the resource. */
            etag?: string;
            /** The type of the API resource. This is always `admin#directory#token`. */
            kind?: string;
            /** Whether the token is issued to an installed application. The value is `true` if the application is installed to a desktop or mobile device. */
            nativeApp?: boolean;
            /** A list of authorization scopes the application is granted. */
            scopes?: string[];
            /** The unique ID of the user that issued the token. */
            userKey?: string;
        }
        interface Tokens {
            /** ETag of the resource. */
            etag?: string;
            /** A list of Token resources. */
            items?: Token[];
            /** The type of the API resource. This is always `admin#directory#tokenList`. */
            kind?: string;
        }
        interface User {
            /** A list of the user's addresses. The maximum allowed data size for this field is 10Kb. */
            addresses?: any;
            /** Output only. This property is `true` if the user has completed an initial login and accepted the Terms of Service agreement. */
            agreedToTerms?: boolean;
            /** Output only. A list of the user's alias email addresses. */
            aliases?: string[];
            /** Indicates if user is archived. */
            archived?: boolean;
            /**
             * Indicates if the user is forced to change their password at next login. This setting doesn't apply when [the user signs in via a third-party identity
             * provider](https://support.google.com/a/answer/60224).
             */
            changePasswordAtNextLogin?: boolean;
            /** User's G Suite account creation time. (Read-only) */
            creationTime?: string;
            /**
             * Output only. The customer ID to [retrieve all account users](/admin-sdk/directory/v1/guides/manage-users.html#get_all_users). You can use the alias `my_customer` to represent your
             * account's `customerId`. As a reseller administrator, you can use the resold customer account's `customerId`. To get a `customerId`, use the account's primary domain in the `domain`
             * parameter of a [users.list](/admin-sdk/directory/v1/reference/users/list) request.
             */
            customerId?: string;
            /** Custom fields of the user. The key is a `schema_name` and its values are `'field_name': 'field_value'`. */
            customSchemas?: { [P in string]: UserCustomProperties };
            deletionTime?: string;
            /** A list of the user's email addresses. The maximum allowed data size for this field is 10Kb. */
            emails?: any;
            /** Output only. ETag of the resource. */
            etag?: string;
            /** A list of external IDs for the user, such as an employee or network ID. The maximum allowed data size for this field is 2Kb. */
            externalIds?: any;
            /** The user's gender. The maximum allowed data size for this field is 1Kb. */
            gender?: any;
            /**
             * Stores the hash format of the `password` property. The following `hashFunction` values are allowed: * `MD5` - Accepts simple hex-encoded values. * `SHA1` - Accepts simple
             * hex-encoded values. * `crypt` - Compliant with the [C crypt library](https://en.wikipedia.org/wiki/Crypt_%28C%29). Supports the DES, MD5 (hash prefix `$1$`), SHA-256 (hash prefix
             * `$5$`), and SHA-512 (hash prefix `$6$`) hash algorithms. If rounds are specified as part of the prefix, they must be 10,000 or fewer.
             */
            hashFunction?: string;
            /** The unique ID for the user. A user `id` can be used as a user request URI's `userKey`. */
            id?: string;
            /**
             * The user's Instant Messenger (IM) accounts. A user account can have multiple ims properties. But, only one of these ims properties can be the primary IM contact. The maximum allowed
             * data size for this field is 2Kb.
             */
            ims?: any;
            /**
             * Indicates if the user's profile is visible in the Google Workspace global address list when the contact sharing feature is enabled for the domain. For more information about
             * excluding user profiles, see the [administration help center](https://support.google.com/a/answer/1285988).
             */
            includeInGlobalAddressList?: boolean;
            /** If `true`, the user's IP address is [whitelisted](https://support.google.com/a/answer/60752). */
            ipWhitelisted?: boolean;
            /**
             * Output only. Indicates a user with super admininistrator privileges. The `isAdmin` property can only be edited in the [Make a user an
             * administrator](/admin-sdk/directory/v1/guides/manage-users.html#make_admin) operation ( [makeAdmin](/admin-sdk/directory/v1/reference/users/makeAdmin.html) method). If edited in the
             * user [insert](/admin-sdk/directory/v1/reference/users/insert.html) or [update](/admin-sdk/directory/v1/reference/users/update.html) methods, the edit is ignored by the API service.
             */
            isAdmin?: boolean;
            /**
             * Output only. Indicates if the user is a delegated administrator. Delegated administrators are supported by the API but cannot create or undelete users, or make users administrators.
             * These requests are ignored by the API service. Roles and privileges for administrators are assigned using the [Admin console](https://support.google.com/a/answer/33325).
             */
            isDelegatedAdmin?: boolean;
            /** Output only. Is 2-step verification enforced (Read-only) */
            isEnforcedIn2Sv?: boolean;
            /** Output only. Is enrolled in 2-step verification (Read-only) */
            isEnrolledIn2Sv?: boolean;
            /** Output only. Indicates if the user's Google mailbox is created. This property is only applicable if the user has been assigned a Gmail license. */
            isMailboxSetup?: boolean;
            /** The user's keywords. The maximum allowed data size for this field is 1Kb. */
            keywords?: any;
            /** Output only. The type of the API resource. For Users resources, the value is `admin#directory#user`. */
            kind?: string;
            /** The user's languages. The maximum allowed data size for this field is 1Kb. */
            languages?: any;
            /** User's last login time. (Read-only) */
            lastLoginTime?: string;
            /** The user's locations. The maximum allowed data size for this field is 10Kb. */
            locations?: any;
            /**
             * Holds the given and family names of the user, and the read-only `fullName` value. The maximum number of characters in the `givenName` and in the `familyName` values is 60. In
             * addition, name values support unicode/UTF-8 characters, and can contain spaces, letters (a-z), numbers (0-9), dashes (-), forward slashes (/), and periods (.). For more information
             * about character usage rules, see the [administration help center](https://support.google.com/a/answer/9193374). Maximum allowed data size for this field is 1Kb.
             */
            name?: UserName;
            /** Output only. List of the user's non-editable alias email addresses. These are typically outside the account's primary domain or sub-domain. */
            nonEditableAliases?: string[];
            /** Notes for the user. */
            notes?: any;
            /** A list of organizations the user belongs to. The maximum allowed data size for this field is 10Kb. */
            organizations?: any;
            /** The full path of the parent organization associated with the user. If the parent organization is the top-level, it is represented as a forward slash (`/`). */
            orgUnitPath?: string;
            /** User's password */
            password?: string;
            /** A list of the user's phone numbers. The maximum allowed data size for this field is 1Kb. */
            phones?: any;
            /** A list of [POSIX](https://www.opengroup.org/austin/papers/posix_faq.html) account information for the user. */
            posixAccounts?: any;
            /** The user's primary email address. This property is required in a request to create a user account. The `primaryEmail` must be unique and cannot be an alias of another user. */
            primaryEmail?: string;
            /** Recovery email of the user. */
            recoveryEmail?: string;
            /** Recovery phone of the user. The phone number must be in the E.164 format, starting with the plus sign (+). Example: *+16506661212*. */
            recoveryPhone?: string;
            /** A list of the user's relationships to other users. The maximum allowed data size for this field is 2Kb. */
            relations?: any;
            /** A list of SSH public keys. */
            sshPublicKeys?: any;
            /** Indicates if user is suspended. */
            suspended?: boolean;
            /**
             * Output only. Has the reason a user account is suspended either by the administrator or by Google at the time of suspension. The property is returned only if the `suspended` property
             * is `true`.
             */
            suspensionReason?: string;
            /** Output only. ETag of the user's photo (Read-only) */
            thumbnailPhotoEtag?: string;
            /** Output only. Photo Url of the user (Read-only) */
            thumbnailPhotoUrl?: string;
            /** The user's websites. The maximum allowed data size for this field is 2Kb. */
            websites?: any;
        }
        interface UserAbout {
            /** About entry can have a type which indicates the content type. It can either be plain or html. By default, notes contents are assumed to contain plain text. */
            contentType?: string;
            /** Actual value of notes. */
            value?: string;
        }
        interface UserAddress {
            /** Country. */
            country?: string;
            /** Country code. */
            countryCode?: string;
            /** Custom type. */
            customType?: string;
            /** Extended Address. */
            extendedAddress?: string;
            /** Formatted address. */
            formatted?: string;
            /** Locality. */
            locality?: string;
            /** Other parts of address. */
            poBox?: string;
            /** Postal code. */
            postalCode?: string;
            /** If this is user's primary address. Only one entry could be marked as primary. */
            primary?: boolean;
            /** Region. */
            region?: string;
            /**
             * User supplied address was structured. Structured addresses are NOT supported at this time. You might be able to write structured addresses but any values will eventually be
             * clobbered.
             */
            sourceIsStructured?: boolean;
            /** Street. */
            streetAddress?: string;
            /**
             * Each entry can have a type which indicates standard values of that entry. For example address could be of home work etc. In addition to the standard type an entry can have a custom
             * type and can take any value. Such type should have the CUSTOM value as type and also have a customType value.
             */
            type?: string;
        }
        interface UserCustomProperties {
            [key: string]: any;
        }
        interface UserEmail {
            /** Email id of the user. */
            address?: string;
            /** Custom Type. */
            customType?: string;
            /** If this is user's primary email. Only one entry could be marked as primary. */
            primary?: boolean;
            /**
             * Each entry can have a type which indicates standard types of that entry. For example email could be of home, work etc. In addition to the standard type, an entry can have a custom
             * type and can take any value Such types should have the CUSTOM value as type and also have a customType value.
             */
            type?: string;
        }
        interface UserExternalId {
            /** Custom type. */
            customType?: string;
            /** The type of the Id. */
            type?: string;
            /** The value of the id. */
            value?: string;
        }
        interface UserGender {
            /** AddressMeAs. A human-readable string containing the proper way to refer to the profile owner by humans for example he/him/his or they/them/their. */
            addressMeAs?: string;
            /** Custom gender. */
            customGender?: string;
            /** Gender. */
            type?: string;
        }
        interface UserIm {
            /** Custom protocol. */
            customProtocol?: string;
            /** Custom type. */
            customType?: string;
            /** Instant messenger id. */
            im?: string;
            /** If this is user's primary im. Only one entry could be marked as primary. */
            primary?: boolean;
            /**
             * Protocol used in the instant messenger. It should be one of the values from ImProtocolTypes map. Similar to type it can take a CUSTOM value and specify the custom name in
             * customProtocol field.
             */
            protocol?: string;
            /**
             * Each entry can have a type which indicates standard types of that entry. For example instant messengers could be of home work etc. In addition to the standard type an entry can have
             * a custom type and can take any value. Such types should have the CUSTOM value as type and also have a customType value.
             */
            type?: string;
        }
        interface UserKeyword {
            /** Custom Type. */
            customType?: string;
            /**
             * Each entry can have a type which indicates standard type of that entry. For example keyword could be of type occupation or outlook. In addition to the standard type an entry can
             * have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value.
             */
            type?: string;
            /** Keyword. */
            value?: string;
        }
        interface UserLanguage {
            /** Other language. User can provide their own language name if there is no corresponding ISO 639 language code. If this is set, `languageCode` can't be set. */
            customLanguage?: string;
            /**
             * ISO 639 string representation of a language. See [Language Codes](/admin-sdk/directory/v1/languages) for the list of supported codes. Valid language codes outside the supported set
             * will be accepted by the API but may lead to unexpected behavior. Illegal values cause `SchemaException`. If this is set, `customLanguage` can't be set.
             */
            languageCode?: string;
            /**
             * Optional. If present, controls whether the specified `languageCode` is the user's preferred language. If `customLanguage` is set, this can't be set. Allowed values are `preferred`
             * and `not_preferred`.
             */
            preference?: string;
        }
        interface UserLocation {
            /** Textual location. This is most useful for display purposes to concisely describe the location. For example 'Mountain View, CA', 'Near Seattle', 'US-NYC-9TH 9A209A.'' */
            area?: string;
            /** Building Identifier. */
            buildingId?: string;
            /** Custom Type. */
            customType?: string;
            /** Most specific textual code of individual desk location. */
            deskCode?: string;
            /** Floor name/number. */
            floorName?: string;
            /** Floor section. More specific location within the floor. For example if a floor is divided into sections 'A', 'B' and 'C' this field would identify one of those values. */
            floorSection?: string;
            /**
             * Each entry can have a type which indicates standard types of that entry. For example location could be of types default and desk. In addition to standard type an entry can have a
             * custom type and can give it any name. Such types should have 'custom' as type and also have a customType value.
             */
            type?: string;
        }
        interface UserMakeAdmin {
            /** Indicates the administrator status of the user. */
            status?: boolean;
        }
        interface UserName {
            /** The user's last name. Required when creating a user account. */
            familyName?: string;
            /** The user's full name formed by concatenating the first and last name values. */
            fullName?: string;
            /** The user's first name. Required when creating a user account. */
            givenName?: string;
        }
        interface UserOrganization {
            /** The cost center of the users department. */
            costCenter?: string;
            /** Custom type. */
            customType?: string;
            /** Department within the organization. */
            department?: string;
            /** Description of the organization. */
            description?: string;
            /** The domain to which the organization belongs to. */
            domain?: string;
            /** The full-time equivalent millipercent within the organization (100000 = 100%). */
            fullTimeEquivalent?: number;
            /** Location of the organization. This need not be fully qualified address. */
            location?: string;
            /** Name of the organization */
            name?: string;
            /** If it user's primary organization. */
            primary?: boolean;
            /** Symbol of the organization. */
            symbol?: string;
            /** Title (designation) of the user in the organization. */
            title?: string;
            /**
             * Each entry can have a type which indicates standard types of that entry. For example organization could be of school work etc. In addition to the standard type an entry can have a
             * custom type and can give it any name. Such types should have the CUSTOM value as type and also have a CustomType value.
             */
            type?: string;
        }
        interface UserPhone {
            /** Custom Type. */
            customType?: string;
            /** If this is user's primary phone or not. */
            primary?: boolean;
            /**
             * Each entry can have a type which indicates standard types of that entry. For example phone could be of home_fax work mobile etc. In addition to the standard type an entry can have a
             * custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value.
             */
            type?: string;
            /** Phone number. */
            value?: string;
        }
        interface UserPhoto {
            /** ETag of the resource. */
            etag?: string;
            /** Height of the photo in pixels. */
            height?: number;
            /** The ID the API uses to uniquely identify the user. */
            id?: string;
            /** The type of the API resource. For Photo resources, this is `admin#directory#user#photo`. */
            kind?: string;
            /** The MIME type of the photo. Allowed values are `JPEG`, `PNG`, `GIF`, `BMP`, `TIFF`, and web-safe base64 encoding. */
            mimeType?: string;
            /**
             * The user photo's upload data in [web-safe Base64](https://en.wikipedia.org/wiki/Base64#URL_applications) format in bytes. This means: * The slash (/) character is replaced with the
             * underscore (_) character. * The plus sign (+) character is replaced with the hyphen (-) character. * The equals sign (=) character is replaced with the asterisk (*). * For padding,
             * the period (.) character is used instead of the RFC-4648 baseURL definition which uses the equals sign (=) for padding. This is done to simplify URL-parsing. * Whatever the size of
             * the photo being uploaded, the API downsizes it to 96x96 pixels.
             */
            photoData?: string;
            /** The user's primary email address. */
            primaryEmail?: string;
            /** Width of the photo in pixels. */
            width?: number;
        }
        interface UserPosixAccount {
            /** A POSIX account field identifier. */
            accountId?: string;
            /** The GECOS (user information) for this account. */
            gecos?: string;
            /** The default group ID. */
            gid?: string;
            /** The path to the home directory for this account. */
            homeDirectory?: string;
            /** The operating system type for this account. */
            operatingSystemType?: string;
            /** If this is user's primary account within the SystemId. */
            primary?: boolean;
            /** The path to the login shell for this account. */
            shell?: string;
            /** System identifier for which account Username or Uid apply to. */
            systemId?: string;
            /** The POSIX compliant user ID. */
            uid?: string;
            /** The username of the account. */
            username?: string;
        }
        interface UserRelation {
            /** Custom Type. */
            customType?: string;
            /** The relation of the user. Some of the possible values are mother father sister brother manager assistant partner. */
            type?: string;
            /** The name of the relation. */
            value?: string;
        }
        interface Users {
            /** ETag of the resource. */
            etag?: string;
            /** Kind of resource this is. */
            kind?: string;
            /** Token used to access next page of this result. */
            nextPageToken?: string;
            /** Event that triggered this response (only used in case of Push Response) */
            trigger_event?: string;
            /** List of user objects. */
            users?: User[];
        }
        interface UserSshPublicKey {
            /** An expiration time in microseconds since epoch. */
            expirationTimeUsec?: string;
            /** A SHA-256 fingerprint of the SSH public key. (Read-only) */
            fingerprint?: string;
            /** An SSH public key. */
            key?: string;
        }
        interface UserUndelete {
            /** OrgUnit of User */
            orgUnitPath?: string;
        }
        interface UserWebsite {
            /** Custom Type. */
            customType?: string;
            /** If this is user's primary website or not. */
            primary?: boolean;
            /**
             * Each entry can have a type which indicates standard types of that entry. For example website could be of home work blog etc. In addition to the standard type an entry can have a
             * custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value.
             */
            type?: string;
            /** Website. */
            value?: string;
        }
        interface VerificationCode {
            /** ETag of the resource. */
            etag?: string;
            /** The type of the resource. This is always `admin#directory#verificationCode`. */
            kind?: string;
            /** The obfuscated unique ID of the user. */
            userId?: string;
            /** A current verification code for the user. Invalidated or used verification codes are not returned as part of the result. */
            verificationCode?: string;
        }
        interface VerificationCodes {
            /** ETag of the resource. */
            etag?: string;
            /** A list of verification code resources. */
            items?: VerificationCode[];
            /** The type of the resource. This is always `admin#directory#verificationCodesList`. */
            kind?: string;
        }
        interface ChannelsResource {
            /** Stops watching resources through this channel. */
            stop(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Channel;
            }): Request<void>;
            stop(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Channel): Request<void>;
        }
        interface CommandsResource {
            /** Gets command data a specific command issued to the device. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Immutable. Immutable ID of Chrome OS Device Command. */
                commandId: string;
                /** Immutable. Immutable ID of the Google Workspace account. */
                customerId: string;
                /** Immutable. Immutable ID of Chrome OS Device. */
                deviceId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<DirectoryChromeosdevicesCommand>;
        }
        interface ChromeosResource {
            /** Issues a command for the device to execute. */
            issueCommand(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Immutable. Immutable ID of the Google Workspace account. */
                customerId: string;
                /** Immutable. Immutable ID of Chrome OS Device. */
                deviceId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: DirectoryChromeosdevicesIssueCommandRequest;
            }): Request<DirectoryChromeosdevicesIssueCommandResponse>;
            issueCommand(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Immutable. Immutable ID of the Google Workspace account. */
                customerId: string;
                /** Immutable. Immutable ID of Chrome OS Device. */
                deviceId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: DirectoryChromeosdevicesIssueCommandRequest): Request<DirectoryChromeosdevicesIssueCommandResponse>;
            commands: CommandsResource;
        }
        interface DevicesResource {
            chromeos: ChromeosResource;
        }
        interface CustomerResource {
            devices: DevicesResource;
        }
        interface PrintersResource {
            /** Creates printers under given Organization Unit. */
            batchCreatePrinters(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. The name of the customer. Format: customers/{customer_id} */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: BatchCreatePrintersRequest;
            }): Request<BatchCreatePrintersResponse>;
            batchCreatePrinters(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. The name of the customer. Format: customers/{customer_id} */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: BatchCreatePrintersRequest): Request<BatchCreatePrintersResponse>;
            /** Deletes printers in batch. */
            batchDeletePrinters(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. The name of the customer. Format: customers/{customer_id} */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: BatchDeletePrintersRequest;
            }): Request<BatchDeletePrintersResponse>;
            batchDeletePrinters(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. The name of the customer. Format: customers/{customer_id} */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: BatchDeletePrintersRequest): Request<BatchDeletePrintersResponse>;
            /** Creates a printer under given Organization Unit. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. The name of the customer. Format: customers/{customer_id} */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Printer;
            }): Request<Printer>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. The name of the customer. Format: customers/{customer_id} */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Printer): Request<Printer>;
            /** Deletes a `Printer`. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Required. The name of the printer to be updated. Format: customers/{customer_id}/chrome/printers/{printer_id} */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<{}>;
            /** Returns a `Printer` resource (printer's config). */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Required. The name of the printer to retrieve. Format: customers/{customer_id}/chrome/printers/{printer_id} */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Printer>;
            /** List printers configs. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Search query. Search syntax is shared between this api and Admin Console printers pages. */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * The order to sort results by. Must be one of display_name, description, make_and_model, or create_time. Default order is ascending, but descending order can be returned by
                 * appending "desc" to the order_by field. For instance, "description desc" will return the printers sorted by description in descending order.
                 */
                orderBy?: string;
                /**
                 * Organization Unit that we want to list the printers for. When org_unit is not present in the request then all printers of the customer are returned (or filtered). When org_unit
                 * is present in the request then only printers available to this OU will be returned (owned or inherited). You may see if printer is owned or inherited for this OU by looking at
                 * Printer.org_unit_id.
                 */
                orgUnitId?: string;
                /** The maximum number of objects to return. The service may return fewer than this value. */
                pageSize?: number;
                /** A page token, received from a previous call. */
                pageToken?: string;
                /** Required. The name of the customer who owns this collection of printers. Format: customers/{customer_id} */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListPrintersResponse>;
            /** Lists the supported printer models. */
            listPrinterModels(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Filer to list only models by a given manufacturer in format: "manufacturer:Brother". Search syntax is shared between this api and Admin Console printers pages. */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The maximum number of objects to return. The service may return fewer than this value. */
                pageSize?: number;
                /** A page token, received from a previous call. */
                pageToken?: string;
                /** Required. The name of the customer who owns this collection of printers. Format: customers/{customer_id} */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListPrinterModelsResponse>;
            /** Updates a `Printer` resource. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** The list of fields to be cleared. Note, some of the fields are read only and cannot be updated. Values for not specified fields will be patched. */
                clearMask?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The resource name of the Printer object, in the format customers/{customer-id}/printers/{printer-id} (During printer creation leave empty) */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The list of fields to be updated. Note, some of the fields are read only and cannot be updated. Values for not specified fields will be patched. */
                updateMask?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Printer;
            }): Request<Printer>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** The list of fields to be cleared. Note, some of the fields are read only and cannot be updated. Values for not specified fields will be patched. */
                clearMask?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The resource name of the Printer object, in the format customers/{customer-id}/printers/{printer-id} (During printer creation leave empty) */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The list of fields to be updated. Note, some of the fields are read only and cannot be updated. Values for not specified fields will be patched. */
                updateMask?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Printer): Request<Printer>;
        }
        interface ChromeResource {
            printers: PrintersResource;
        }
        interface CustomersResource {
            chrome: ChromeResource;
        }

        const channels: ChannelsResource;

        const customer: CustomerResource;

        const customers: CustomersResource;
    }
    namespace directory {
        interface Alias {
            alias?: string;
            etag?: string;
            id?: string;
            kind?: string;
            primaryEmail?: string;
        }
        interface Aliases {
            aliases?: any[];
            etag?: string;
            kind?: string;
        }
        interface Asp {
            /** The unique ID of the ASP. */
            codeId?: number;
            /** The time when the ASP was created. Expressed in [Unix time](https://en.wikipedia.org/wiki/Epoch_time) format. */
            creationTime?: string;
            /** ETag of the ASP. */
            etag?: string;
            /** The type of the API resource. This is always `admin#directory#asp`. */
            kind?: string;
            /** The time when the ASP was last used. Expressed in [Unix time](https://en.wikipedia.org/wiki/Epoch_time) format. */
            lastTimeUsed?: string;
            /** The name of the application that the user, represented by their `userId`, entered when the ASP was created. */
            name?: string;
            /** The unique ID of the user who issued the ASP. */
            userKey?: string;
        }
        interface Asps {
            /** ETag of the resource. */
            etag?: string;
            /** A list of ASP resources. */
            items?: Asp[];
            /** The type of the API resource. This is always `admin#directory#aspList`. */
            kind?: string;
        }
        interface AuxiliaryMessage {
            /** Human readable message in English. Example: "Given printer is invalid or no longer supported." */
            auxiliaryMessage?: string;
            /** Field that this message concerns. */
            fieldMask?: string;
            /** Message severity */
            severity?: string;
        }
        interface BatchCreatePrintersRequest {
            /** A list of Printers to be created. Max 50 at a time. */
            requests?: CreatePrinterRequest[];
        }
        interface BatchCreatePrintersResponse {
            /** A list of create failures. Printer IDs are not populated, as printer were not created. */
            failures?: FailureInfo[];
            /** A list of successfully created printers with their IDs populated. */
            printers?: Printer[];
        }
        interface BatchDeletePrintersRequest {
            /** A list of Printer.id that should be deleted. Max 100 at a time. */
            printerIds?: string[];
        }
        interface BatchDeletePrintersResponse {
            /** A list of update failures. */
            failedPrinters?: FailureInfo[];
            /** A list of Printer.id that were successfully deleted. */
            printerIds?: string[];
        }
        interface Building {
            /**
             * The postal address of the building. See [`PostalAddress`](/my-business/reference/rest/v4/PostalAddress) for details. Note that only a single address line and region code are
             * required.
             */
            address?: BuildingAddress;
            /** Unique identifier for the building. The maximum length is 100 characters. */
            buildingId?: string;
            /** The building name as seen by users in Calendar. Must be unique for the customer. For example, "NYC-CHEL". The maximum length is 100 characters. */
            buildingName?: string;
            /** The geographic coordinates of the center of the building, expressed as latitude and longitude in decimal degrees. */
            coordinates?: BuildingCoordinates;
            /** A brief description of the building. For example, "Chelsea Market". */
            description?: string;
            /** ETag of the resource. */
            etags?: string;
            /**
             * The display names for all floors in this building. The floors are expected to be sorted in ascending order, from lowest floor to highest floor. For example, ["B2", "B1", "L", "1",
             * "2", "2M", "3", "PH"] Must contain at least one entry.
             */
            floorNames?: string[];
            /** Kind of resource this is. */
            kind?: string;
        }
        interface BuildingAddress {
            /** Unstructured address lines describing the lower levels of an address. */
            addressLines?: string[];
            /** Optional. Highest administrative subdivision which is used for postal addresses of a country or region. */
            administrativeArea?: string;
            /** Optional. BCP-47 language code of the contents of this address (if known). */
            languageCode?: string;
            /**
             * Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do
             * not fit into this structure well, leave locality empty and use addressLines.
             */
            locality?: string;
            /** Optional. Postal code of the address. */
            postalCode?: string;
            /** Required. CLDR region code of the country/region of the address. */
            regionCode?: string;
            /** Optional. Sublocality of the address. */
            sublocality?: string;
        }
        interface BuildingCoordinates {
            /** Latitude in decimal degrees. */
            latitude?: number;
            /** Longitude in decimal degrees. */
            longitude?: number;
        }
        interface Buildings {
            /** The Buildings in this page of results. */
            buildings?: Building[];
            /** ETag of the resource. */
            etag?: string;
            /** Kind of resource this is. */
            kind?: string;
            /** The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results. */
            nextPageToken?: string;
        }
        interface CalendarResource {
            /** Unique ID for the building a resource is located in. */
            buildingId?: string;
            /** Capacity of a resource, number of seats in a room. */
            capacity?: number;
            /** ETag of the resource. */
            etags?: string;
            /** Instances of features for the calendar resource. */
            featureInstances?: any;
            /** Name of the floor a resource is located on. */
            floorName?: string;
            /** Name of the section within a floor a resource is located in. */
            floorSection?: string;
            /**
             * The read-only auto-generated name of the calendar resource which includes metadata about the resource such as building name, floor, capacity, etc. For example, "NYC-2-Training Room
             * 1A (16)".
             */
            generatedResourceName?: string;
            /** The type of the resource. For calendar resources, the value is `admin#directory#resources#calendars#CalendarResource`. */
            kind?: string;
            /** The category of the calendar resource. Either CONFERENCE_ROOM or OTHER. Legacy data is set to CATEGORY_UNKNOWN. */
            resourceCategory?: string;
            /** Description of the resource, visible only to admins. */
            resourceDescription?: string;
            /** The read-only email for the calendar resource. Generated as part of creating a new calendar resource. */
            resourceEmail?: string;
            /** The unique ID for the calendar resource. */
            resourceId?: string;
            /** The name of the calendar resource. For example, "Training Room 1A". */
            resourceName?: string;
            /** The type of the calendar resource, intended for non-room resources. */
            resourceType?: string;
            /** Description of the resource, visible to users and admins. */
            userVisibleDescription?: string;
        }
        interface CalendarResources {
            /** ETag of the resource. */
            etag?: string;
            /** The CalendarResources in this page of results. */
            items?: CalendarResource[];
            /** Identifies this as a collection of CalendarResources. This is always `admin#directory#resources#calendars#calendarResourcesList`. */
            kind?: string;
            /** The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results. */
            nextPageToken?: string;
        }
        interface Channel {
            /** The address where notifications are delivered for this channel. */
            address?: string;
            /** Date and time of notification channel expiration, expressed as a Unix timestamp, in milliseconds. Optional. */
            expiration?: string;
            /** A UUID or similar unique string that identifies this channel. */
            id?: string;
            /** Identifies this as a notification channel used to watch for changes to a resource, which is `api#channel`. */
            kind?: string;
            /** Additional parameters controlling delivery channel behavior. Optional. */
            params?: { [P in string]: string };
            /** A Boolean value to indicate whether payload is wanted. Optional. */
            payload?: boolean;
            /** An opaque ID that identifies the resource being watched on this channel. Stable across different API versions. */
            resourceId?: string;
            /** A version-specific identifier for the watched resource. */
            resourceUri?: string;
            /** An arbitrary string delivered to the target address with each notification delivered over this channel. Optional. */
            token?: string;
            /** The type of delivery mechanism used for this channel. */
            type?: string;
        }
        interface ChromeOsDevice {
            /** List of active time ranges (Read-only). */
            activeTimeRanges?: Array<{
                /** Duration of usage in milliseconds. */
                activeTime?: number;
                /** Date of usage */
                date?: string;
            }>;
            /** The asset identifier as noted by an administrator or specified during enrollment. */
            annotatedAssetId?: string;
            /** The address or location of the device as noted by the administrator. Maximum length is `200` characters. Empty values are allowed. */
            annotatedLocation?: string;
            /** The user of the device as noted by the administrator. Maximum length is 100 characters. Empty values are allowed. */
            annotatedUser?: string;
            /** (Read-only) The timestamp after which the device will stop receiving Chrome updates or support */
            autoUpdateExpiration?: string;
            /**
             * The boot mode for the device. The possible values are: * `Verified`: The device is running a valid version of the Chrome OS. * `Dev`: The devices's developer hardware switch is
             * enabled. When booted, the device has a command line shell. For an example of a developer switch, see the [Chromebook developer
             * information](https://www.chromium.org/chromium-os/developer-information-for-chrome-os-devices/samsung-series-5-chromebook#TOC-Developer-switch).
             */
            bootMode?: string;
            /** Information regarding CPU specs in the device. */
            cpuInfo?: Array<{
                /** The CPU architecture. */
                architecture?: string;
                /** Information for the Logical CPUs */
                logicalCpus?: Array<{
                    /** C-States indicate the power consumption state of the CPU. For more information look at documentation published by the CPU maker. */
                    cStates?: Array<{
                        /** Name of the state. */
                        displayName?: string;
                        /** Time spent in the state since the last reboot. */
                        sessionDuration?: string;
                    }>;
                    /** Current frequency the CPU is running at. */
                    currentScalingFrequencyKhz?: number;
                    /** Idle time since last boot. */
                    idleDuration?: string;
                    /** Maximum frequency the CPU is allowed to run at, by policy. */
                    maxScalingFrequencyKhz?: number;
                }>;
                /** The max CPU clock speed in kHz. */
                maxClockSpeedKhz?: number;
                /** The CPU model name. */
                model?: string;
            }>;
            /** Reports of CPU utilization and temperature (Read-only) */
            cpuStatusReports?: Array<{
                /** List of CPU temperature samples. */
                cpuTemperatureInfo?: Array<{
                    /** CPU label */
                    label?: string;
                    /** Temperature in Celsius degrees. */
                    temperature?: number;
                }>;
                cpuUtilizationPercentageInfo?: number[];
                /** Date and time the report was received. */
                reportTime?: string;
            }>;
            /** List of device files to download (Read-only) */
            deviceFiles?: Array<{
                /** Date and time the file was created */
                createTime?: string;
                /** File download URL */
                downloadUrl?: string;
                /** File name */
                name?: string;
                /** File type */
                type?: string;
            }>;
            /** The unique ID of the Chrome device. */
            deviceId?: string;
            /** Reports of disk space and other info about mounted/connected volumes. */
            diskVolumeReports?: Array<{
                /** Disk volumes */
                volumeInfo?: Array<{
                    /** Free disk space [in bytes] */
                    storageFree?: string;
                    /** Total disk space [in bytes] */
                    storageTotal?: string;
                    /** Volume id */
                    volumeId?: string;
                }>;
            }>;
            /**
             * (Read-only) Built-in MAC address for the docking station that the device connected to. Factory sets Media access control address (MAC address) assigned for use by a dock. It is
             * reserved specifically for MAC pass through device policy. The format is twelve (12) hexadecimal digits without any delimiter (uppercase letters). This is only relevant for some
             * devices.
             */
            dockMacAddress?: string;
            /** ETag of the resource. */
            etag?: string;
            /** The device's MAC address on the ethernet network interface. */
            ethernetMacAddress?: string;
            /**
             * (Read-only) MAC address used by the Chromebook’s internal ethernet port, and for onboard network (ethernet) interface. The format is twelve (12) hexadecimal digits without any
             * delimiter (uppercase letters). This is only relevant for some devices.
             */
            ethernetMacAddress0?: string;
            /** The Chrome device's firmware version. */
            firmwareVersion?: string;
            /** The type of resource. For the Chromeosdevices resource, the value is `admin#directory#chromeosdevice`. */
            kind?: string;
            /** Date and time the device was last enrolled (Read-only) */
            lastEnrollmentTime?: string;
            /** Contains last known network (Read-only) */
            lastKnownNetwork?: Array<{
                /** The IP address. */
                ipAddress?: string;
                /** The WAN IP address. */
                wanIpAddress?: string;
            }>;
            /** Date and time the device was last synchronized with the policy settings in the G Suite administrator control panel (Read-only) */
            lastSync?: string;
            /** The device's wireless MAC address. If the device does not have this information, it is not included in the response. */
            macAddress?: string;
            /** (Read-only) The date the device was manufactured in yyyy-mm-dd format. */
            manufactureDate?: string;
            /**
             * The Mobile Equipment Identifier (MEID) or the International Mobile Equipment Identity (IMEI) for the 3G mobile card in a mobile device. A MEID/IMEI is typically used when adding a
             * device to a wireless carrier's post-pay service plan. If the device does not have this information, this property is not included in the response. For more information on how to
             * export a MEID/IMEI list, see the [Developer's Guide](/admin-sdk/directory/v1/guides/manage-chrome-devices.html#export_meid).
             */
            meid?: string;
            /** The device's model information. If the device does not have this information, this property is not included in the response. */
            model?: string;
            /**
             * Notes about this device added by the administrator. This property can be [searched](https://support.google.com/chrome/a/answer/1698333) with the
             * [list](/admin-sdk/directory/v1/reference/chromeosdevices/list) method's `query` parameter. Maximum length is 500 characters. Empty values are allowed.
             */
            notes?: string;
            /** The device's order number. Only devices directly purchased from Google have an order number. */
            orderNumber?: string;
            /**
             * The unique ID of the organizational unit. orgUnitPath is the human readable version of orgUnitId. While orgUnitPath may change by renaming an organizational unit within the path,
             * orgUnitId is unchangeable for one organizational unit. This property can be [updated](/admin-sdk/directory/v1/guides/manage-chrome-devices#move_chrome_devices_to_ou) using the API.
             * For more information about how to create an organizational structure for your device, see the [administration help center](https://support.google.com/a/answer/182433).
             */
            orgUnitId?: string;
            /**
             * The full parent path with the organizational unit's name associated with the device. Path names are case insensitive. If the parent organizational unit is the top-level
             * organization, it is represented as a forward slash, `/`. This property can be [updated](/admin-sdk/directory/v1/guides/manage-chrome-devices#move_chrome_devices_to_ou) using the
             * API. For more information about how to create an organizational structure for your device, see the [administration help center](https://support.google.com/a/answer/182433).
             */
            orgUnitPath?: string;
            /** The Chrome device's operating system version. */
            osVersion?: string;
            /** The Chrome device's platform version. */
            platformVersion?: string;
            /** List of recent device users, in descending order, by last login time. */
            recentUsers?: Array<{
                /** The user's email address. This is only present if the user type is `USER_TYPE_MANAGED`. */
                email?: string;
                /** The type of the user. */
                type?: string;
            }>;
            /** List of screenshot files to download. Type is always "SCREENSHOT_FILE". (Read-only) */
            screenshotFiles?: Array<{
                /** Date and time the file was created */
                createTime?: string;
                /** File download URL */
                downloadUrl?: string;
                /** File name */
                name?: string;
                /** File type */
                type?: string;
            }>;
            /** The Chrome device serial number entered when the device was enabled. This value is the same as the Admin console's *Serial Number* in the *Chrome OS Devices* tab. */
            serialNumber?: string;
            /** The status of the device. */
            status?: string;
            /** Final date the device will be supported (Read-only) */
            supportEndDate?: string;
            /** Reports of amounts of available RAM memory (Read-only) */
            systemRamFreeReports?: Array<{
                /** Date and time the report was received. */
                reportTime?: string;
                systemRamFreeInfo?: string[];
            }>;
            /** Total RAM on the device [in bytes] (Read-only) */
            systemRamTotal?: string;
            /** Trusted Platform Module (TPM) (Read-only) */
            tpmVersionInfo?: {
                /** TPM family. We use the TPM 2.0 style encoding, e.g.: TPM 1.2: "1.2" -> 312e3200 TPM 2.0: "2.0" -> 322e3000 */
                family?: string;
                /** TPM firmware version. */
                firmwareVersion?: string;
                /** TPM manufacturer code. */
                manufacturer?: string;
                /** TPM specification level. See Library Specification for TPM 2.0 and Main Specification for TPM 1.2. */
                specLevel?: string;
                /** TPM model number. */
                tpmModel?: string;
                /** Vendor-specific information such as Vendor ID. */
                vendorSpecific?: string;
            };
            /** Determines if the device will auto renew its support after the support end date. This is a read-only property. */
            willAutoRenew?: boolean;
        }
        interface ChromeOsDeviceAction {
            /** Action to be taken on the Chrome OS device. */
            action?: string;
            /**
             * Only used when the action is `deprovision`. With the `deprovision` action, this field is required. *Note*: The deprovision reason is audited because it might have implications on
             * licenses for perpetual subscription customers.
             */
            deprovisionReason?: string;
        }
        interface ChromeOsDevices {
            /** List of Chrome OS Device objects. */
            chromeosdevices?: ChromeOsDevice[];
            /** ETag of the resource. */
            etag?: string;
            /** Kind of resource this is. */
            kind?: string;
            /** Token used to access the next page of this result. To access the next page, use this token's value in the `pageToken` query string of this request. */
            nextPageToken?: string;
        }
        interface ChromeOsMoveDevicesToOu {
            /** Chrome OS devices to be moved to OU */
            deviceIds?: string[];
        }
        interface CreatePrinterRequest {
            /** Required. The name of the customer. Format: customers/{customer_id} */
            parent?: string;
            /** Required. A printer to create. If you want to place the printer under particular OU then populate printer.org_unit_id filed. Otherwise the printer will be placed under root OU. */
            printer?: Printer;
        }
        interface Customer {
            /** The customer's secondary contact email address. This email address cannot be on the same domain as the `customerDomain` */
            alternateEmail?: string;
            /** The customer's creation time (Readonly) */
            customerCreationTime?: string;
            /** The customer's primary domain name string. Do not include the `www` prefix when creating a new customer. */
            customerDomain?: string;
            /** ETag of the resource. */
            etag?: string;
            /** The unique ID for the customer's Google Workspace account. (Readonly) */
            id?: string;
            /** Identifies the resource as a customer. Value: `admin#directory#customer` */
            kind?: string;
            /**
             * The customer's ISO 639-2 language code. See the [Language Codes](/admin-sdk/directory/v1/languages) page for the list of supported codes. Valid language codes outside the supported
             * set will be accepted by the API but may lead to unexpected behavior. The default value is `en`.
             */
            language?: string;
            /** The customer's contact phone number in [E.164](https://en.wikipedia.org/wiki/E.164) format. */
            phoneNumber?: string;
            /** The customer's postal address information. */
            postalAddress?: CustomerPostalAddress;
        }
        interface CustomerPostalAddress {
            /** A customer's physical address. The address can be composed of one to three lines. */
            addressLine1?: string;
            /** Address line 2 of the address. */
            addressLine2?: string;
            /** Address line 3 of the address. */
            addressLine3?: string;
            /** The customer contact's name. */
            contactName?: string;
            /** This is a required property. For `countryCode` information see the [ISO 3166 country code elements](https://www.iso.org/iso/country_codes.htm). */
            countryCode?: string;
            /** Name of the locality. An example of a locality value is the city of `San Francisco`. */
            locality?: string;
            /** The company or company division name. */
            organizationName?: string;
            /** The postal code. A postalCode example is a postal zip code such as `10009`. This is in accordance with - http: //portablecontacts.net/draft-spec.html#address_element. */
            postalCode?: string;
            /** Name of the region. An example of a region value is `NY` for the state of New York. */
            region?: string;
        }
        interface DirectoryChromeosdevicesCommand {
            /** The time at which the command will expire. If the device doesn't execute the command within this time the command will become expired. */
            commandExpireTime?: string;
            /** Unique ID of a device command. */
            commandId?: string;
            /** The result of the command execution. */
            commandResult?: DirectoryChromeosdevicesCommandResult;
            /** The timestamp when the command was issued by the admin. */
            issueTime?: string;
            /** The payload that the command specified, if any. */
            payload?: string;
            /** Indicates the command state. */
            state?: string;
            /** The type of the command. */
            type?: string;
        }
        interface DirectoryChromeosdevicesCommandResult {
            /** The error message with a short explanation as to why the command failed. Only present if the command failed. */
            errorMessage?: string;
            /** The time at which the command was executed or failed to execute. */
            executeTime?: string;
            /** The result of the command. */
            result?: string;
        }
        interface DirectoryChromeosdevicesIssueCommandRequest {
            /** The type of command. */
            commandType?: string;
            /**
             * The payload for the command, provide it only if command supports it. The following commands support adding payload: - SET_VOLUME: Payload is a stringified JSON object in the form: {
             * "volume": 50 }. The volume has to be an integer in the range [0,100].
             */
            payload?: string;
        }
        interface DirectoryChromeosdevicesIssueCommandResponse {
            /** The unique ID of the issued command, used to retrieve the command status. */
            commandId?: string;
        }
        interface DomainAlias {
            /** The creation time of the domain alias. (Read-only). */
            creationTime?: string;
            /** The domain alias name. */
            domainAliasName?: string;
            /** ETag of the resource. */
            etag?: string;
            /** Kind of resource this is. */
            kind?: string;
            /** The parent domain name that the domain alias is associated with. This can either be a primary or secondary domain name within a customer. */
            parentDomainName?: string;
            /** Indicates the verification state of a domain alias. (Read-only) */
            verified?: boolean;
        }
        interface DomainAliases {
            /** List of domain alias objects. */
            domainAliases?: DomainAlias[];
            /** ETag of the resource. */
            etag?: string;
            /** Kind of resource this is. */
            kind?: string;
        }
        interface Domains {
            /** Creation time of the domain. Expressed in [Unix time](https://en.wikipedia.org/wiki/Epoch_time) format. (Read-only). */
            creationTime?: string;
            /** List of domain alias objects. (Read-only) */
            domainAliases?: DomainAlias[];
            /** The domain name of the customer. */
            domainName?: string;
            /** ETag of the resource. */
            etag?: string;
            /** Indicates if the domain is a primary domain (Read-only). */
            isPrimary?: boolean;
            /** Kind of resource this is. */
            kind?: string;
            /** Indicates the verification state of a domain. (Read-only). */
            verified?: boolean;
        }
        interface Domains2 {
            /** List of domain objects. */
            domains?: Domains[];
            /** ETag of the resource. */
            etag?: string;
            /** Kind of resource this is. */
            kind?: string;
        }
        // tslint:disable-next-line:no-empty-interface
        interface Empty {
        }
        interface FailureInfo {
            /** Canonical code for why the update failed to apply. */
            errorCode?: string;
            /** Failure reason message. */
            errorMessage?: string;
            /** Failed printer. */
            printer?: Printer;
            /** Id of a failed printer. */
            printerId?: string;
        }
        interface Feature {
            /** ETag of the resource. */
            etags?: string;
            /** Kind of resource this is. */
            kind?: string;
            /** The name of the feature. */
            name?: string;
        }
        interface FeatureInstance {
            /** The feature that this is an instance of. A calendar resource may have multiple instances of a feature. */
            feature?: Feature;
        }
        interface FeatureRename {
            /** New name of the feature. */
            newName?: string;
        }
        interface Features {
            /** ETag of the resource. */
            etag?: string;
            /** The Features in this page of results. */
            features?: Feature[];
            /** Kind of resource this is. */
            kind?: string;
            /** The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results. */
            nextPageToken?: string;
        }
        interface Group {
            /** Read-only. Value is `true` if this group was created by an administrator rather than a user. */
            adminCreated?: boolean;
            /** Read-only. A list of a group's alias email addresses. */
            aliases?: string[];
            /**
             * An extended description to help users determine the purpose of a group. For example, you can include information about who should join the group, the types of messages to send to
             * the group, links to FAQs about the group, or related groups. Maximum length is `4,096` characters.
             */
            description?: string;
            /**
             * The number of users that are direct members of the group. If a group is a member (child) of this group (the parent), members of the child group are not counted in the
             * `directMembersCount` property of the parent group.
             */
            directMembersCount?: string;
            /**
             * The group's email address. If your account has multiple domains, select the appropriate domain for the email address. The `email` must be unique. This property is required when
             * creating a group. Group email addresses are subject to the same character usage rules as usernames, see the [help center](https://support.google.com/a/answer/9193374) for details.
             */
            email?: string;
            /** ETag of the resource. */
            etag?: string;
            /** Read-only. The unique ID of a group. A group `id` can be used as a group request URI's `groupKey`. */
            id?: string;
            /** The type of the API resource. For Groups resources, the value is `admin#directory#group`. */
            kind?: string;
            /** The group's display name. */
            name?: string;
            /**
             * Read-only. A list of the group's non-editable alias email addresses that are outside of the account's primary domain or subdomains. These are functioning email addresses used by the
             * group. This is a read-only property returned in the API's response for a group. If edited in a group's POST or PUT request, the edit is ignored by the API service.
             */
            nonEditableAliases?: string[];
        }
        interface Groups {
            /** ETag of the resource. */
            etag?: string;
            /** List of group objects. */
            groups?: Group[];
            /** Kind of resource this is. */
            kind?: string;
            /** Token used to access next page of this result. */
            nextPageToken?: string;
        }
        interface ListPrinterModelsResponse {
            /** A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages. */
            nextPageToken?: string;
            /** Printer models that are currently allowed to be configured for ChromeOs. Some printers may be added or removed over time. */
            printerModels?: PrinterModel[];
        }
        interface ListPrintersResponse {
            /** A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages. */
            nextPageToken?: string;
            /**
             * List of printers. If `org_unit_id` was given in the request, then only printers visible for this OU will be returned. If `org_unit_id` was not given in the request, then all
             * printers will be returned.
             */
            printers?: Printer[];
        }
        interface Member {
            /** Defines mail delivery preferences of member. This is only supported by create/update/get. */
            delivery_settings?: string;
            /**
             * The member's email address. A member can be a user or another group. This property is required when adding a member to a group. The `email` must be unique and cannot be an alias of
             * another group. If the email address is changed, the API automatically reflects the email address changes.
             */
            email?: string;
            /** ETag of the resource. */
            etag?: string;
            /** The unique ID of the group member. A member `id` can be used as a member request URI's `memberKey`. */
            id?: string;
            /** The type of the API resource. For Members resources, the value is `admin#directory#member`. */
            kind?: string;
            /**
             * The member's role in a group. The API returns an error for cycles in group memberships. For example, if `group1` is a member of `group2`, `group2` cannot be a member of `group1`.
             * For more information about a member's role, see the [administration help center](https://support.google.com/a/answer/167094).
             */
            role?: string;
            /** Status of member (Immutable) */
            status?: string;
            /** The type of group member. */
            type?: string;
        }
        interface Members {
            /** ETag of the resource. */
            etag?: string;
            /** Kind of resource this is. */
            kind?: string;
            /** List of member objects. */
            members?: Member[];
            /** Token used to access next page of this result. */
            nextPageToken?: string;
        }
        interface MembersHasMember {
            /** Output only. Identifies whether the given user is a member of the group. Membership can be direct or nested. */
            isMember?: boolean;
        }
        interface MobileDevice {
            /** Adb (USB debugging) enabled or disabled on device (Read-only) */
            adbStatus?: boolean;
            /**
             * The list of applications installed on an Android mobile device. It is not applicable to Google Sync and iOS devices. The list includes any Android applications that access Google
             * Workspace data. When updating an applications list, it is important to note that updates replace the existing list. If the Android device has two existing applications and the API
             * updates the list with five applications, the is now the updated list of five applications.
             */
            applications?: Array<{
                /** The application's display name. An example is `Browser`. */
                displayName?: string;
                /** The application's package name. An example is `com.android.browser`. */
                packageName?: string;
                /**
                 * The list of permissions of this application. These can be either a standard Android permission or one defined by the application, and are found in an application's [Android
                 * manifest](https://developer.android.com/guide/topics/manifest/uses-permission-element.html). Examples of a Calendar application's permissions are `READ_CALENDAR`, or
                 * `MANAGE_ACCOUNTS`.
                 */
                permission?: string[];
                /** The application's version code. An example is `13`. */
                versionCode?: number;
                /** The application's version name. An example is `3.2-140714`. */
                versionName?: string;
            }>;
            /** The device's baseband version. */
            basebandVersion?: string;
            /** Mobile Device Bootloader version (Read-only) */
            bootloaderVersion?: string;
            /** Mobile Device Brand (Read-only) */
            brand?: string;
            /** The device's operating system build number. */
            buildNumber?: string;
            /** The default locale used on the device. */
            defaultLanguage?: string;
            /** Developer options enabled or disabled on device (Read-only) */
            developerOptionsStatus?: boolean;
            /** The compromised device status. */
            deviceCompromisedStatus?: string;
            /** The serial number for a Google Sync mobile device. For Android and iOS devices, this is a software generated unique identifier. */
            deviceId?: string;
            /** DevicePasswordStatus (Read-only) */
            devicePasswordStatus?: string;
            /**
             * List of owner's email addresses. If your application needs the current list of user emails, use the [get](/admin-sdk/directory/v1/reference/mobiledevices/get.html) method. For
             * additional information, see the [retrieve a user](/admin-sdk/directory/v1/guides/manage-users#get_user) method.
             */
            email?: string[];
            /** Mobile Device Encryption Status (Read-only) */
            encryptionStatus?: string;
            /** ETag of the resource. */
            etag?: string;
            /** Date and time the device was first synchronized with the policy settings in the G Suite administrator control panel (Read-only) */
            firstSync?: string;
            /** Mobile Device Hardware (Read-only) */
            hardware?: string;
            /**
             * The IMEI/MEID unique identifier for Android hardware. It is not applicable to Google Sync devices. When adding an Android mobile device, this is an optional property. When updating
             * one of these devices, this is a read-only property.
             */
            hardwareId?: string;
            /** The device's IMEI number. */
            imei?: string;
            /** The device's kernel version. */
            kernelVersion?: string;
            /** The type of the API resource. For Mobiledevices resources, the value is `admin#directory#mobiledevice`. */
            kind?: string;
            /** Date and time the device was last synchronized with the policy settings in the G Suite administrator control panel (Read-only) */
            lastSync?: string;
            /** Boolean indicating if this account is on owner/primary profile or not. */
            managedAccountIsOnOwnerProfile?: boolean;
            /** Mobile Device manufacturer (Read-only) */
            manufacturer?: string;
            /** The device's MEID number. */
            meid?: string;
            /**
             * The mobile device's model name, for example Nexus S. This property can be [updated](/admin-sdk/directory/v1/reference/mobiledevices/update.html). For more information, see the
             * [Developer's Guide](/admin-sdk/directory/v1/guides/manage-mobile=devices#update_mobile_device).
             */
            model?: string;
            /**
             * List of the owner's user names. If your application needs the current list of device owner names, use the [get](/admin-sdk/directory/v1/reference/mobiledevices/get.html) method. For
             * more information about retrieving mobile device user information, see the [Developer's Guide](/admin-sdk/directory/v1/guides/manage-users#get_user).
             */
            name?: string[];
            /** Mobile Device mobile or network operator (if available) (Read-only) */
            networkOperator?: string;
            /**
             * The mobile device's operating system, for example IOS 4.3 or Android 2.3.5. This property can be [updated](/admin-sdk/directory/v1/reference/mobiledevices/update.html). For more
             * information, see the [Developer's Guide](/admin-sdk/directory/v1/guides/manage-mobile-devices#update_mobile_device).
             */
            os?: string;
            /** List of accounts added on device (Read-only) */
            otherAccountsInfo?: string[];
            /** DMAgentPermission (Read-only) */
            privilege?: string;
            /** Mobile Device release version version (Read-only) */
            releaseVersion?: string;
            /** The unique ID the API service uses to identify the mobile device. */
            resourceId?: string;
            /** Mobile Device Security patch level (Read-only) */
            securityPatchLevel?: string;
            /** The device's serial number. */
            serialNumber?: string;
            /** The device's status. */
            status?: string;
            /** Work profile supported on device (Read-only) */
            supportsWorkProfile?: boolean;
            /** The type of mobile device. */
            type?: string;
            /** Unknown sources enabled or disabled on device (Read-only) */
            unknownSourcesStatus?: boolean;
            /**
             * Gives information about the device such as `os` version. This property can be [updated](/admin-sdk/directory/v1/reference/mobiledevices/update.html). For more information, see the
             * [Developer's Guide](/admin-sdk/directory/v1/guides/manage-mobile-devices#update_mobile_device).
             */
            userAgent?: string;
            /** The device's MAC address on Wi-Fi networks. */
            wifiMacAddress?: string;
        }
        interface MobileDeviceAction {
            /** The action to be performed on the device. */
            action?: string;
        }
        interface MobileDevices {
            /** ETag of the resource. */
            etag?: string;
            /** Kind of resource this is. */
            kind?: string;
            /** List of Mobile Device objects. */
            mobiledevices?: MobileDevice[];
            /** Token used to access next page of this result. */
            nextPageToken?: string;
        }
        interface OrgUnit {
            /**
             * Determines if a sub-organizational unit can inherit the settings of the parent organization. The default value is `false`, meaning a sub-organizational unit inherits the settings of
             * the nearest parent organizational unit. For more information on inheritance and users in an organization structure, see the [administration help
             * center](https://support.google.com/a/answer/4352075).
             */
            blockInheritance?: boolean;
            /** Description of the organizational unit. */
            description?: string;
            /** ETag of the resource. */
            etag?: string;
            /** The type of the API resource. For Orgunits resources, the value is `admin#directory#orgUnit`. */
            kind?: string;
            /** The organizational unit's path name. For example, an organizational unit's name within the /corp/support/sales_support parent path is sales_support. Required. */
            name?: string;
            /** The unique ID of the organizational unit. */
            orgUnitId?: string;
            /**
             * The full path to the organizational unit. The `orgUnitPath` is a derived property. When listed, it is derived from `parentOrgunitPath` and organizational unit's `name`. For example,
             * for an organizational unit named 'apps' under parent organization '/engineering', the orgUnitPath is '/engineering/apps'. In order to edit an `orgUnitPath`, either update the name
             * of the organization or the `parentOrgunitPath`. A user's organizational unit determines which Google Workspace services the user has access to. If the user is moved to a new
             * organization, the user's access changes. For more information about organization structures, see the [administration help center](https://support.google.com/a/answer/4352075). For
             * more information about moving a user to a different organization, see [Update a user](/admin-sdk/directory/v1/guides/manage-users.html#update_user).
             */
            orgUnitPath?: string;
            /** The unique ID of the parent organizational unit. Required, unless `parentOrgUnitPath` is set. */
            parentOrgUnitId?: string;
            /** The organizational unit's parent path. For example, /corp/sales is the parent path for /corp/sales/sales_support organizational unit. Required, unless `parentOrgUnitId` is set. */
            parentOrgUnitPath?: string;
        }
        interface OrgUnits {
            /** ETag of the resource. */
            etag?: string;
            /** The type of the API resource. For Org Unit resources, the type is `admin#directory#orgUnits`. */
            kind?: string;
            /** List of organizational unit objects. */
            organizationUnits?: OrgUnit[];
        }
        interface Printer {
            /** Output only. Auxiliary messages about issues with the printer configuration if any. */
            auxiliaryMessages?: AuxiliaryMessage[];
            /** Output only. Time when printer was created. */
            createTime?: string;
            /** Editable. Description of printer. */
            description?: string;
            /** Editable. Name of printer. */
            displayName?: string;
            /** Id of the printer. (During printer creation leave empty) */
            id?: string;
            /** Editable. Make and model of printer. e.g. Lexmark MS610de Value must be in format as seen in ListPrinterModels response. */
            makeAndModel?: string;
            /** The resource name of the Printer object, in the format customers/{customer-id}/printers/{printer-id} (During printer creation leave empty) */
            name?: string;
            /** Organization Unit that owns this printer (Only can be set during Printer creation) */
            orgUnitId?: string;
            /** Editable. Printer URI. */
            uri?: string;
            /** Editable. flag to use driverless configuration or not. If it's set to be true, make_and_model can be ignored */
            useDriverlessConfig?: boolean;
        }
        interface PrinterModel {
            /** Display name. eq. "Brother MFC-8840D" */
            displayName?: string;
            /** Make and model as represented in "make_and_model" field in Printer object. eq. "brother mfc-8840d" */
            makeAndModel?: string;
            /** Manufacturer. eq. "Brother" */
            manufacturer?: string;
        }
        interface Privilege {
            /** A list of child privileges. Privileges for a service form a tree. Each privilege can have a list of child privileges; this list is empty for a leaf privilege. */
            childPrivileges?: Privilege[];
            /** ETag of the resource. */
            etag?: string;
            /** If the privilege can be restricted to an organization unit. */
            isOuScopable?: boolean;
            /** The type of the API resource. This is always `admin#directory#privilege`. */
            kind?: string;
            /** The name of the privilege. */
            privilegeName?: string;
            /** The obfuscated ID of the service this privilege is for. This value is returned with [`Privileges.list()`](/admin-sdk/directory/v1/reference/privileges/list). */
            serviceId?: string;
            /** The name of the service this privilege is for. */
            serviceName?: string;
        }
        interface Privileges {
            /** ETag of the resource. */
            etag?: string;
            /** A list of Privilege resources. */
            items?: Privilege[];
            /** The type of the API resource. This is always `admin#directory#privileges`. */
            kind?: string;
        }
        interface Role {
            /** ETag of the resource. */
            etag?: string;
            /** Returns `true` if the role is a super admin role. */
            isSuperAdminRole?: boolean;
            /** Returns `true` if this is a pre-defined system role. */
            isSystemRole?: boolean;
            /** The type of the API resource. This is always `admin#directory#role`. */
            kind?: string;
            /** A short description of the role. */
            roleDescription?: string;
            /** ID of the role. */
            roleId?: string;
            /** Name of the role. */
            roleName?: string;
            /** The set of privileges that are granted to this role. */
            rolePrivileges?: Array<{
                /** The name of the privilege. */
                privilegeName?: string;
                /** The obfuscated ID of the service this privilege is for. This value is returned with [`Privileges.list()`](/admin-sdk/directory/v1/reference/privileges/list). */
                serviceId?: string;
            }>;
        }
        interface RoleAssignment {
            /**
             * The unique ID of the entity this role is assigned to—either the `user_id` of a user or the `uniqueId` of a service account, as defined in [Identity and Access Management
             * (IAM)](https://cloud.google.com/iam/docs/reference/rest/v1/projects.serviceAccounts).
             */
            assignedTo?: string;
            /** ETag of the resource. */
            etag?: string;
            /** The type of the API resource. This is always `admin#directory#roleAssignment`. */
            kind?: string;
            /** If the role is restricted to an organization unit, this contains the ID for the organization unit the exercise of this role is restricted to. */
            orgUnitId?: string;
            /** ID of this roleAssignment. */
            roleAssignmentId?: string;
            /** The ID of the role that is assigned. */
            roleId?: string;
            /** The scope in which this role is assigned. */
            scopeType?: string;
        }
        interface RoleAssignments {
            /** ETag of the resource. */
            etag?: string;
            /** A list of RoleAssignment resources. */
            items?: RoleAssignment[];
            /** The type of the API resource. This is always `admin#directory#roleAssignments`. */
            kind?: string;
            nextPageToken?: string;
        }
        interface Roles {
            /** ETag of the resource. */
            etag?: string;
            /** A list of Role resources. */
            items?: Role[];
            /** The type of the API resource. This is always `admin#directory#roles`. */
            kind?: string;
            nextPageToken?: string;
        }
        interface Schema {
            /** Display name for the schema. */
            displayName?: string;
            /** The ETag of the resource. */
            etag?: string;
            /** A list of fields in the schema. */
            fields?: SchemaFieldSpec[];
            /** Kind of resource this is. */
            kind?: string;
            /** The unique identifier of the schema (Read-only) */
            schemaId?: string;
            /** The schema's name. Each `schema_name` must be unique within a customer. Reusing a name results in a `409: Entity already exists` error. */
            schemaName?: string;
        }
        interface SchemaFieldSpec {
            /** Display Name of the field. */
            displayName?: string;
            /** The ETag of the field. */
            etag?: string;
            /** The unique identifier of the field (Read-only) */
            fieldId?: string;
            /** The name of the field. */
            fieldName?: string;
            /** The type of the field. */
            fieldType?: string;
            /** Boolean specifying whether the field is indexed or not. Default: `true`. */
            indexed?: boolean;
            /** The kind of resource this is. For schema fields this is always `admin#directory#schema#fieldspec`. */
            kind?: string;
            /** A boolean specifying whether this is a multi-valued field or not. Default: `false`. */
            multiValued?: boolean;
            /** Indexing spec for a numeric field. By default, only exact match queries will be supported for numeric fields. Setting the `numericIndexingSpec` allows range queries to be supported. */
            numericIndexingSpec?: {
                /** Maximum value of this field. This is meant to be indicative rather than enforced. Values outside this range will still be indexed, but search may not be as performant. */
                maxValue?: number;
                /** Minimum value of this field. This is meant to be indicative rather than enforced. Values outside this range will still be indexed, but search may not be as performant. */
                minValue?: number;
            };
            /**
             * Specifies who can view values of this field. See [Retrieve users as a non-administrator](/admin-sdk/directory/v1/guides/manage-users#retrieve_users_non_admin) for more information.
             * Note: It may take up to 24 hours for changes to this field to be reflected.
             */
            readAccessType?: string;
        }
        interface Schemas {
            /** ETag of the resource. */
            etag?: string;
            /** Kind of resource this is. */
            kind?: string;
            /** List of UserSchema objects. */
            schemas?: Schema[];
        }
        interface Token {
            /** Whether the application is registered with Google. The value is `true` if the application has an anonymous Client ID. */
            anonymous?: boolean;
            /** The Client ID of the application the token is issued to. */
            clientId?: string;
            /** The displayable name of the application the token is issued to. */
            displayText?: string;
            /** ETag of the resource. */
            etag?: string;
            /** The type of the API resource. This is always `admin#directory#token`. */
            kind?: string;
            /** Whether the token is issued to an installed application. The value is `true` if the application is installed to a desktop or mobile device. */
            nativeApp?: boolean;
            /** A list of authorization scopes the application is granted. */
            scopes?: string[];
            /** The unique ID of the user that issued the token. */
            userKey?: string;
        }
        interface Tokens {
            /** ETag of the resource. */
            etag?: string;
            /** A list of Token resources. */
            items?: Token[];
            /** The type of the API resource. This is always `admin#directory#tokenList`. */
            kind?: string;
        }
        interface User {
            /** A list of the user's addresses. The maximum allowed data size for this field is 10Kb. */
            addresses?: any;
            /** Output only. This property is `true` if the user has completed an initial login and accepted the Terms of Service agreement. */
            agreedToTerms?: boolean;
            /** Output only. A list of the user's alias email addresses. */
            aliases?: string[];
            /** Indicates if user is archived. */
            archived?: boolean;
            /**
             * Indicates if the user is forced to change their password at next login. This setting doesn't apply when [the user signs in via a third-party identity
             * provider](https://support.google.com/a/answer/60224).
             */
            changePasswordAtNextLogin?: boolean;
            /** User's G Suite account creation time. (Read-only) */
            creationTime?: string;
            /**
             * Output only. The customer ID to [retrieve all account users](/admin-sdk/directory/v1/guides/manage-users.html#get_all_users). You can use the alias `my_customer` to represent your
             * account's `customerId`. As a reseller administrator, you can use the resold customer account's `customerId`. To get a `customerId`, use the account's primary domain in the `domain`
             * parameter of a [users.list](/admin-sdk/directory/v1/reference/users/list) request.
             */
            customerId?: string;
            /** Custom fields of the user. The key is a `schema_name` and its values are `'field_name': 'field_value'`. */
            customSchemas?: { [P in string]: UserCustomProperties };
            deletionTime?: string;
            /** A list of the user's email addresses. The maximum allowed data size for this field is 10Kb. */
            emails?: any;
            /** Output only. ETag of the resource. */
            etag?: string;
            /** A list of external IDs for the user, such as an employee or network ID. The maximum allowed data size for this field is 2Kb. */
            externalIds?: any;
            /** The user's gender. The maximum allowed data size for this field is 1Kb. */
            gender?: any;
            /**
             * Stores the hash format of the `password` property. The following `hashFunction` values are allowed: * `MD5` - Accepts simple hex-encoded values. * `SHA1` - Accepts simple
             * hex-encoded values. * `crypt` - Compliant with the [C crypt library](https://en.wikipedia.org/wiki/Crypt_%28C%29). Supports the DES, MD5 (hash prefix `$1$`), SHA-256 (hash prefix
             * `$5$`), and SHA-512 (hash prefix `$6$`) hash algorithms. If rounds are specified as part of the prefix, they must be 10,000 or fewer.
             */
            hashFunction?: string;
            /** The unique ID for the user. A user `id` can be used as a user request URI's `userKey`. */
            id?: string;
            /**
             * The user's Instant Messenger (IM) accounts. A user account can have multiple ims properties. But, only one of these ims properties can be the primary IM contact. The maximum allowed
             * data size for this field is 2Kb.
             */
            ims?: any;
            /**
             * Indicates if the user's profile is visible in the Google Workspace global address list when the contact sharing feature is enabled for the domain. For more information about
             * excluding user profiles, see the [administration help center](https://support.google.com/a/answer/1285988).
             */
            includeInGlobalAddressList?: boolean;
            /** If `true`, the user's IP address is [whitelisted](https://support.google.com/a/answer/60752). */
            ipWhitelisted?: boolean;
            /**
             * Output only. Indicates a user with super admininistrator privileges. The `isAdmin` property can only be edited in the [Make a user an
             * administrator](/admin-sdk/directory/v1/guides/manage-users.html#make_admin) operation ( [makeAdmin](/admin-sdk/directory/v1/reference/users/makeAdmin.html) method). If edited in the
             * user [insert](/admin-sdk/directory/v1/reference/users/insert.html) or [update](/admin-sdk/directory/v1/reference/users/update.html) methods, the edit is ignored by the API service.
             */
            isAdmin?: boolean;
            /**
             * Output only. Indicates if the user is a delegated administrator. Delegated administrators are supported by the API but cannot create or undelete users, or make users administrators.
             * These requests are ignored by the API service. Roles and privileges for administrators are assigned using the [Admin console](https://support.google.com/a/answer/33325).
             */
            isDelegatedAdmin?: boolean;
            /** Output only. Is 2-step verification enforced (Read-only) */
            isEnforcedIn2Sv?: boolean;
            /** Output only. Is enrolled in 2-step verification (Read-only) */
            isEnrolledIn2Sv?: boolean;
            /** Output only. Indicates if the user's Google mailbox is created. This property is only applicable if the user has been assigned a Gmail license. */
            isMailboxSetup?: boolean;
            /** The user's keywords. The maximum allowed data size for this field is 1Kb. */
            keywords?: any;
            /** Output only. The type of the API resource. For Users resources, the value is `admin#directory#user`. */
            kind?: string;
            /** The user's languages. The maximum allowed data size for this field is 1Kb. */
            languages?: any;
            /** User's last login time. (Read-only) */
            lastLoginTime?: string;
            /** The user's locations. The maximum allowed data size for this field is 10Kb. */
            locations?: any;
            /**
             * Holds the given and family names of the user, and the read-only `fullName` value. The maximum number of characters in the `givenName` and in the `familyName` values is 60. In
             * addition, name values support unicode/UTF-8 characters, and can contain spaces, letters (a-z), numbers (0-9), dashes (-), forward slashes (/), and periods (.). For more information
             * about character usage rules, see the [administration help center](https://support.google.com/a/answer/9193374). Maximum allowed data size for this field is 1Kb.
             */
            name?: UserName;
            /** Output only. List of the user's non-editable alias email addresses. These are typically outside the account's primary domain or sub-domain. */
            nonEditableAliases?: string[];
            /** Notes for the user. */
            notes?: any;
            /** A list of organizations the user belongs to. The maximum allowed data size for this field is 10Kb. */
            organizations?: any;
            /** The full path of the parent organization associated with the user. If the parent organization is the top-level, it is represented as a forward slash (`/`). */
            orgUnitPath?: string;
            /** User's password */
            password?: string;
            /** A list of the user's phone numbers. The maximum allowed data size for this field is 1Kb. */
            phones?: any;
            /** A list of [POSIX](https://www.opengroup.org/austin/papers/posix_faq.html) account information for the user. */
            posixAccounts?: any;
            /** The user's primary email address. This property is required in a request to create a user account. The `primaryEmail` must be unique and cannot be an alias of another user. */
            primaryEmail?: string;
            /** Recovery email of the user. */
            recoveryEmail?: string;
            /** Recovery phone of the user. The phone number must be in the E.164 format, starting with the plus sign (+). Example: *+16506661212*. */
            recoveryPhone?: string;
            /** A list of the user's relationships to other users. The maximum allowed data size for this field is 2Kb. */
            relations?: any;
            /** A list of SSH public keys. */
            sshPublicKeys?: any;
            /** Indicates if user is suspended. */
            suspended?: boolean;
            /**
             * Output only. Has the reason a user account is suspended either by the administrator or by Google at the time of suspension. The property is returned only if the `suspended` property
             * is `true`.
             */
            suspensionReason?: string;
            /** Output only. ETag of the user's photo (Read-only) */
            thumbnailPhotoEtag?: string;
            /** Output only. Photo Url of the user (Read-only) */
            thumbnailPhotoUrl?: string;
            /** The user's websites. The maximum allowed data size for this field is 2Kb. */
            websites?: any;
        }
        interface UserAbout {
            /** About entry can have a type which indicates the content type. It can either be plain or html. By default, notes contents are assumed to contain plain text. */
            contentType?: string;
            /** Actual value of notes. */
            value?: string;
        }
        interface UserAddress {
            /** Country. */
            country?: string;
            /** Country code. */
            countryCode?: string;
            /** Custom type. */
            customType?: string;
            /** Extended Address. */
            extendedAddress?: string;
            /** Formatted address. */
            formatted?: string;
            /** Locality. */
            locality?: string;
            /** Other parts of address. */
            poBox?: string;
            /** Postal code. */
            postalCode?: string;
            /** If this is user's primary address. Only one entry could be marked as primary. */
            primary?: boolean;
            /** Region. */
            region?: string;
            /**
             * User supplied address was structured. Structured addresses are NOT supported at this time. You might be able to write structured addresses but any values will eventually be
             * clobbered.
             */
            sourceIsStructured?: boolean;
            /** Street. */
            streetAddress?: string;
            /**
             * Each entry can have a type which indicates standard values of that entry. For example address could be of home work etc. In addition to the standard type an entry can have a custom
             * type and can take any value. Such type should have the CUSTOM value as type and also have a customType value.
             */
            type?: string;
        }
        interface UserCustomProperties {
            [key: string]: any;
        }
        interface UserEmail {
            /** Email id of the user. */
            address?: string;
            /** Custom Type. */
            customType?: string;
            /** If this is user's primary email. Only one entry could be marked as primary. */
            primary?: boolean;
            /**
             * Each entry can have a type which indicates standard types of that entry. For example email could be of home, work etc. In addition to the standard type, an entry can have a custom
             * type and can take any value Such types should have the CUSTOM value as type and also have a customType value.
             */
            type?: string;
        }
        interface UserExternalId {
            /** Custom type. */
            customType?: string;
            /** The type of the Id. */
            type?: string;
            /** The value of the id. */
            value?: string;
        }
        interface UserGender {
            /** AddressMeAs. A human-readable string containing the proper way to refer to the profile owner by humans for example he/him/his or they/them/their. */
            addressMeAs?: string;
            /** Custom gender. */
            customGender?: string;
            /** Gender. */
            type?: string;
        }
        interface UserIm {
            /** Custom protocol. */
            customProtocol?: string;
            /** Custom type. */
            customType?: string;
            /** Instant messenger id. */
            im?: string;
            /** If this is user's primary im. Only one entry could be marked as primary. */
            primary?: boolean;
            /**
             * Protocol used in the instant messenger. It should be one of the values from ImProtocolTypes map. Similar to type it can take a CUSTOM value and specify the custom name in
             * customProtocol field.
             */
            protocol?: string;
            /**
             * Each entry can have a type which indicates standard types of that entry. For example instant messengers could be of home work etc. In addition to the standard type an entry can have
             * a custom type and can take any value. Such types should have the CUSTOM value as type and also have a customType value.
             */
            type?: string;
        }
        interface UserKeyword {
            /** Custom Type. */
            customType?: string;
            /**
             * Each entry can have a type which indicates standard type of that entry. For example keyword could be of type occupation or outlook. In addition to the standard type an entry can
             * have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value.
             */
            type?: string;
            /** Keyword. */
            value?: string;
        }
        interface UserLanguage {
            /** Other language. User can provide their own language name if there is no corresponding ISO 639 language code. If this is set, `languageCode` can't be set. */
            customLanguage?: string;
            /**
             * ISO 639 string representation of a language. See [Language Codes](/admin-sdk/directory/v1/languages) for the list of supported codes. Valid language codes outside the supported set
             * will be accepted by the API but may lead to unexpected behavior. Illegal values cause `SchemaException`. If this is set, `customLanguage` can't be set.
             */
            languageCode?: string;
            /**
             * Optional. If present, controls whether the specified `languageCode` is the user's preferred language. If `customLanguage` is set, this can't be set. Allowed values are `preferred`
             * and `not_preferred`.
             */
            preference?: string;
        }
        interface UserLocation {
            /** Textual location. This is most useful for display purposes to concisely describe the location. For example 'Mountain View, CA', 'Near Seattle', 'US-NYC-9TH 9A209A.'' */
            area?: string;
            /** Building Identifier. */
            buildingId?: string;
            /** Custom Type. */
            customType?: string;
            /** Most specific textual code of individual desk location. */
            deskCode?: string;
            /** Floor name/number. */
            floorName?: string;
            /** Floor section. More specific location within the floor. For example if a floor is divided into sections 'A', 'B' and 'C' this field would identify one of those values. */
            floorSection?: string;
            /**
             * Each entry can have a type which indicates standard types of that entry. For example location could be of types default and desk. In addition to standard type an entry can have a
             * custom type and can give it any name. Such types should have 'custom' as type and also have a customType value.
             */
            type?: string;
        }
        interface UserMakeAdmin {
            /** Indicates the administrator status of the user. */
            status?: boolean;
        }
        interface UserName {
            /** The user's last name. Required when creating a user account. */
            familyName?: string;
            /** The user's full name formed by concatenating the first and last name values. */
            fullName?: string;
            /** The user's first name. Required when creating a user account. */
            givenName?: string;
        }
        interface UserOrganization {
            /** The cost center of the users department. */
            costCenter?: string;
            /** Custom type. */
            customType?: string;
            /** Department within the organization. */
            department?: string;
            /** Description of the organization. */
            description?: string;
            /** The domain to which the organization belongs to. */
            domain?: string;
            /** The full-time equivalent millipercent within the organization (100000 = 100%). */
            fullTimeEquivalent?: number;
            /** Location of the organization. This need not be fully qualified address. */
            location?: string;
            /** Name of the organization */
            name?: string;
            /** If it user's primary organization. */
            primary?: boolean;
            /** Symbol of the organization. */
            symbol?: string;
            /** Title (designation) of the user in the organization. */
            title?: string;
            /**
             * Each entry can have a type which indicates standard types of that entry. For example organization could be of school work etc. In addition to the standard type an entry can have a
             * custom type and can give it any name. Such types should have the CUSTOM value as type and also have a CustomType value.
             */
            type?: string;
        }
        interface UserPhone {
            /** Custom Type. */
            customType?: string;
            /** If this is user's primary phone or not. */
            primary?: boolean;
            /**
             * Each entry can have a type which indicates standard types of that entry. For example phone could be of home_fax work mobile etc. In addition to the standard type an entry can have a
             * custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value.
             */
            type?: string;
            /** Phone number. */
            value?: string;
        }
        interface UserPhoto {
            /** ETag of the resource. */
            etag?: string;
            /** Height of the photo in pixels. */
            height?: number;
            /** The ID the API uses to uniquely identify the user. */
            id?: string;
            /** The type of the API resource. For Photo resources, this is `admin#directory#user#photo`. */
            kind?: string;
            /** The MIME type of the photo. Allowed values are `JPEG`, `PNG`, `GIF`, `BMP`, `TIFF`, and web-safe base64 encoding. */
            mimeType?: string;
            /**
             * The user photo's upload data in [web-safe Base64](https://en.wikipedia.org/wiki/Base64#URL_applications) format in bytes. This means: * The slash (/) character is replaced with the
             * underscore (_) character. * The plus sign (+) character is replaced with the hyphen (-) character. * The equals sign (=) character is replaced with the asterisk (*). * For padding,
             * the period (.) character is used instead of the RFC-4648 baseURL definition which uses the equals sign (=) for padding. This is done to simplify URL-parsing. * Whatever the size of
             * the photo being uploaded, the API downsizes it to 96x96 pixels.
             */
            photoData?: string;
            /** The user's primary email address. */
            primaryEmail?: string;
            /** Width of the photo in pixels. */
            width?: number;
        }
        interface UserPosixAccount {
            /** A POSIX account field identifier. */
            accountId?: string;
            /** The GECOS (user information) for this account. */
            gecos?: string;
            /** The default group ID. */
            gid?: string;
            /** The path to the home directory for this account. */
            homeDirectory?: string;
            /** The operating system type for this account. */
            operatingSystemType?: string;
            /** If this is user's primary account within the SystemId. */
            primary?: boolean;
            /** The path to the login shell for this account. */
            shell?: string;
            /** System identifier for which account Username or Uid apply to. */
            systemId?: string;
            /** The POSIX compliant user ID. */
            uid?: string;
            /** The username of the account. */
            username?: string;
        }
        interface UserRelation {
            /** Custom Type. */
            customType?: string;
            /** The relation of the user. Some of the possible values are mother father sister brother manager assistant partner. */
            type?: string;
            /** The name of the relation. */
            value?: string;
        }
        interface Users {
            /** ETag of the resource. */
            etag?: string;
            /** Kind of resource this is. */
            kind?: string;
            /** Token used to access next page of this result. */
            nextPageToken?: string;
            /** Event that triggered this response (only used in case of Push Response) */
            trigger_event?: string;
            /** List of user objects. */
            users?: User[];
        }
        interface UserSshPublicKey {
            /** An expiration time in microseconds since epoch. */
            expirationTimeUsec?: string;
            /** A SHA-256 fingerprint of the SSH public key. (Read-only) */
            fingerprint?: string;
            /** An SSH public key. */
            key?: string;
        }
        interface UserUndelete {
            /** OrgUnit of User */
            orgUnitPath?: string;
        }
        interface UserWebsite {
            /** Custom Type. */
            customType?: string;
            /** If this is user's primary website or not. */
            primary?: boolean;
            /**
             * Each entry can have a type which indicates standard types of that entry. For example website could be of home work blog etc. In addition to the standard type an entry can have a
             * custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value.
             */
            type?: string;
            /** Website. */
            value?: string;
        }
        interface VerificationCode {
            /** ETag of the resource. */
            etag?: string;
            /** The type of the resource. This is always `admin#directory#verificationCode`. */
            kind?: string;
            /** The obfuscated unique ID of the user. */
            userId?: string;
            /** A current verification code for the user. Invalidated or used verification codes are not returned as part of the result. */
            verificationCode?: string;
        }
        interface VerificationCodes {
            /** ETag of the resource. */
            etag?: string;
            /** A list of verification code resources. */
            items?: VerificationCode[];
            /** The type of the resource. This is always `admin#directory#verificationCodesList`. */
            kind?: string;
        }
        interface AspsResource {
            /** Deletes an ASP issued by a user. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** The unique ID of the ASP to be deleted. */
                codeId: number;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID. */
                userKey: string;
            }): Request<void>;
            /** Gets information about an ASP issued by a user. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** The unique ID of the ASP. */
                codeId: number;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID. */
                userKey: string;
            }): Request<Asp>;
            /** Lists the ASPs issued by a user. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID. */
                userKey: string;
            }): Request<Asps>;
        }
        interface ChromeosdevicesResource {
            /**
             * Takes an action that affects a Chrome OS Device. This includes deprovisioning, disabling, and re-enabling devices. *Warning:* * Deprovisioning a device will stop device policy
             * syncing and remove device-level printers. After a device is deprovisioned, it must be wiped before it can be re-enrolled. * Lost or stolen devices should use the disable action. *
             * Re-enabling a disabled device will consume a device license. If you do not have sufficient licenses available when completing the re-enable action, you will receive an error. For
             * more information about deprovisioning and disabling devices, visit the [help center](https://support.google.com/chrome/a/answer/3523633).
             */
            action(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /**
                 * The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The
                 * `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).
                 */
                customerId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The unique ID of the device. The `resourceId`s are returned in the response from the [chromeosdevices.list](/admin-sdk/directory/v1/reference/chromeosdevices/list) method. */
                resourceId: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: ChromeOsDeviceAction;
            }): Request<void>;
            action(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /**
                 * The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The
                 * `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).
                 */
                customerId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The unique ID of the device. The `resourceId`s are returned in the response from the [chromeosdevices.list](/admin-sdk/directory/v1/reference/chromeosdevices/list) method. */
                resourceId: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: ChromeOsDeviceAction): Request<void>;
            /** Retrieves a Chrome OS device's properties. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /**
                 * The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The
                 * `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).
                 */
                customerId: string;
                /** The unique ID of the device. The `deviceId`s are returned in the response from the [chromeosdevices.list](/admin-sdk/directory/v1/reference/chromeosdevices/list) method. */
                deviceId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Determines whether the response contains the full list of properties or only a subset. */
                projection?: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ChromeOsDevice>;
            /** Retrieves a paginated list of Chrome OS devices within an account. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /**
                 * The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The
                 * `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).
                 */
                customerId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Return devices from all child orgunits, as well as the specified org unit. If this is set to true 'orgUnitPath' must be provided. */
                includeChildOrgunits?: boolean;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Maximum number of results to return. */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Device property to use for sorting results. */
                orderBy?: string;
                /** The full path of the organizational unit (minus the leading `/`) or its unique ID. */
                orgUnitPath?: string;
                /**
                 * The `pageToken` query parameter is used to request the next page of query results. The follow-on request's `pageToken` query parameter is the `nextPageToken` from your previous
                 * response.
                 */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Restrict information returned to a set of selected fields. */
                projection?: string;
                /** Search string in the format given at https://developers.google.com/admin-sdk/directory/v1/list-query-operators */
                query?: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Whether to return results in ascending or descending order. Must be used with the `orderBy` parameter. */
                sortOrder?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ChromeOsDevices>;
            /** Moves or inserts multiple Chrome OS devices to an organizational unit. You can move up to 50 devices at once. */
            moveDevicesToOu(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Immutable ID of the Google Workspace account */
                customerId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Full path of the target organizational unit or its ID */
                orgUnitPath: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: ChromeOsMoveDevicesToOu;
            }): Request<void>;
            moveDevicesToOu(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Immutable ID of the Google Workspace account */
                customerId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Full path of the target organizational unit or its ID */
                orgUnitPath: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: ChromeOsMoveDevicesToOu): Request<void>;
            /**
             * Updates a device's updatable properties, such as `annotatedUser`, `annotatedLocation`, `notes`, `orgUnitPath`, or `annotatedAssetId`. This method supports [patch
             * semantics](/admin-sdk/directory/v1/guides/performance#patch).
             */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /**
                 * The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The
                 * `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).
                 */
                customerId: string;
                /** The unique ID of the device. The `deviceId`s are returned in the response from the [chromeosdevices.list](/admin-sdk/v1/reference/chromeosdevices/list) method. */
                deviceId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Restrict information returned to a set of selected fields. */
                projection?: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: ChromeOsDevice;
            }): Request<ChromeOsDevice>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /**
                 * The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The
                 * `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).
                 */
                customerId: string;
                /** The unique ID of the device. The `deviceId`s are returned in the response from the [chromeosdevices.list](/admin-sdk/v1/reference/chromeosdevices/list) method. */
                deviceId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Restrict information returned to a set of selected fields. */
                projection?: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: ChromeOsDevice): Request<ChromeOsDevice>;
            /** Updates a device's updatable properties, such as `annotatedUser`, `annotatedLocation`, `notes`, `orgUnitPath`, or `annotatedAssetId`. */
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /**
                 * The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The
                 * `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).
                 */
                customerId: string;
                /** The unique ID of the device. The `deviceId`s are returned in the response from the [chromeosdevices.list](/admin-sdk/v1/reference/chromeosdevices/list) method. */
                deviceId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Restrict information returned to a set of selected fields. */
                projection?: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: ChromeOsDevice;
            }): Request<ChromeOsDevice>;
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /**
                 * The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The
                 * `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).
                 */
                customerId: string;
                /** The unique ID of the device. The `deviceId`s are returned in the response from the [chromeosdevices.list](/admin-sdk/v1/reference/chromeosdevices/list) method. */
                deviceId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Restrict information returned to a set of selected fields. */
                projection?: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: ChromeOsDevice): Request<ChromeOsDevice>;
        }
        interface CustomersResource {
            /** Retrieves a customer. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Id of the customer to be retrieved */
                customerKey: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Customer>;
            /** Patches a customer. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Id of the customer to be updated */
                customerKey: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Customer;
            }): Request<Customer>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Id of the customer to be updated */
                customerKey: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Customer): Request<Customer>;
            /** Updates a customer. */
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Id of the customer to be updated */
                customerKey: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Customer;
            }): Request<Customer>;
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Id of the customer to be updated */
                customerKey: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Customer): Request<Customer>;
            chrome: ChromeResource;
        }
        interface DomainAliasesResource {
            /** Deletes a domain Alias of the customer. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Immutable ID of the Google Workspace account. */
                customer: string;
                /** Name of domain alias to be retrieved. */
                domainAliasName: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<void>;
            /** Retrieves a domain alias of the customer. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Immutable ID of the Google Workspace account. */
                customer: string;
                /** Name of domain alias to be retrieved. */
                domainAliasName: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<DomainAlias>;
            /** Inserts a domain alias of the customer. */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Immutable ID of the Google Workspace account. */
                customer: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: DomainAlias;
            }): Request<DomainAlias>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Immutable ID of the Google Workspace account. */
                customer: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: DomainAlias): Request<DomainAlias>;
            /** Lists the domain aliases of the customer. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Immutable ID of the Google Workspace account. */
                customer: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Name of the parent domain for which domain aliases are to be fetched. */
                parentDomainName?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<DomainAliases>;
        }
        interface DomainsResource {
            /** Deletes a domain of the customer. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Immutable ID of the Google Workspace account. */
                customer: string;
                /** Name of domain to be deleted */
                domainName: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<void>;
            /** Retrieves a domain of the customer. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Immutable ID of the Google Workspace account. */
                customer: string;
                /** Name of domain to be retrieved */
                domainName: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Domains>;
            /** Inserts a domain of the customer. */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Immutable ID of the Google Workspace account. */
                customer: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Domains;
            }): Request<Domains>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Immutable ID of the Google Workspace account. */
                customer: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Domains): Request<Domains>;
            /** Lists the domains of the customer. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Immutable ID of the Google Workspace account. */
                customer: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Domains2>;
        }
        interface AliasesResource {
            /** Removes an alias. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** The alias to be removed */
                alias: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID. */
                groupKey: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<void>;
            /** Adds an alias for the group. */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID. */
                groupKey: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Alias;
            }): Request<Alias>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID. */
                groupKey: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Alias): Request<Alias>;
            /** Lists all aliases for a group. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID. */
                groupKey: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Aliases>;
        }
        interface GroupsResource {
            /** Deletes a group. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID. */
                groupKey: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<void>;
            /** Retrieves a group's properties. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID. */
                groupKey: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Group>;
            /** Creates a group. */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Group;
            }): Request<Group>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Group): Request<Group>;
            /** Retrieves all groups of a domain or of a user given a userKey (paginated). */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /**
                 * The unique ID for the customer's Google Workspace account. In case of a multi-domain account, to fetch all groups for a customer, fill in this field instead of `domain`. You can
                 * also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users](/admin-sdk/directory/v1/reference/users)
                 * resource. Either the `customer` or the `domain` parameter must be provided.
                 */
                customer?: string;
                /** The domain name. Use this field to get groups from only one domain. To return all domains for a customer account, use the `customer` query parameter instead. */
                domain?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Maximum number of results to return. Max allowed value is 200. */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Column to use for sorting results */
                orderBy?: string;
                /** Token to specify next page in the list */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Query string search. Should be of the form "". Complete documentation is at https: //developers.google.com/admin-sdk/directory/v1/guides/search-groups */
                query?: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Whether to return results in ascending or descending order. Only of use when orderBy is also used */
                sortOrder?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Email or immutable ID of the user if only those groups are to be listed, the given user is a member of. If it's an ID, it should match with the ID of the user object. */
                userKey?: string;
            }): Request<Groups>;
            /** Updates a group's properties. This method supports [patch semantics](/admin-sdk/directory/v1/guides/performance#patch). */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID. */
                groupKey: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Group;
            }): Request<Group>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID. */
                groupKey: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Group): Request<Group>;
            /** Updates a group's properties. */
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID. */
                groupKey: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Group;
            }): Request<Group>;
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID. */
                groupKey: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Group): Request<Group>;
            aliases: AliasesResource;
        }
        interface MembersResource {
            /** Removes a member from a group. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID. */
                groupKey: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * Identifies the group member in the API request. A group member can be a user or another group. The value can be the member's (group or user) primary email address, alias, or
                 * unique ID.
                 */
                memberKey: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<void>;
            /** Retrieves a group member's properties. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID. */
                groupKey: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * Identifies the group member in the API request. A group member can be a user or another group. The value can be the member's (group or user) primary email address, alias, or
                 * unique ID.
                 */
                memberKey: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Member>;
            /** Checks whether the given user is a member of the group. Membership can be direct or nested. */
            hasMember(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID. */
                groupKey: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Identifies the user member in the API request. The value can be the user's primary email address, alias, or unique ID. */
                memberKey: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<MembersHasMember>;
            /** Adds a user to the specified group. */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID. */
                groupKey: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Member;
            }): Request<Member>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID. */
                groupKey: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Member): Request<Member>;
            /** Retrieves a paginated list of all members in a group. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID. */
                groupKey: string;
                /** Whether to list indirect memberships. Default: false. */
                includeDerivedMembership?: boolean;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Maximum number of results to return. Max allowed value is 200. */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Token to specify next page in the list. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The `roles` query parameter allows you to retrieve group members by role. Allowed values are `OWNER`, `MANAGER`, and `MEMBER`. */
                roles?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Members>;
            /** Updates the membership properties of a user in the specified group. This method supports [patch semantics](/admin-sdk/directory/v1/guides/performance#patch). */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID. */
                groupKey: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * Identifies the group member in the API request. A group member can be a user or another group. The value can be the member's (group or user) primary email address, alias, or
                 * unique ID.
                 */
                memberKey: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Member;
            }): Request<Member>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID. */
                groupKey: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * Identifies the group member in the API request. A group member can be a user or another group. The value can be the member's (group or user) primary email address, alias, or
                 * unique ID.
                 */
                memberKey: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Member): Request<Member>;
            /** Updates the membership of a user in the specified group. */
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID. */
                groupKey: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * Identifies the group member in the API request. A group member can be a user or another group. The value can be the member's (group or user) primary email address, alias, or
                 * unique ID.
                 */
                memberKey: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Member;
            }): Request<Member>;
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID. */
                groupKey: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * Identifies the group member in the API request. A group member can be a user or another group. The value can be the member's (group or user) primary email address, alias, or
                 * unique ID.
                 */
                memberKey: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Member): Request<Member>;
        }
        interface MobiledevicesResource {
            /** Takes an action that affects a mobile device. For example, remotely wiping a device. */
            action(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /**
                 * The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The
                 * `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).
                 */
                customerId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The unique ID the API service uses to identify the mobile device. */
                resourceId: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: MobileDeviceAction;
            }): Request<void>;
            action(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /**
                 * The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The
                 * `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).
                 */
                customerId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The unique ID the API service uses to identify the mobile device. */
                resourceId: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: MobileDeviceAction): Request<void>;
            /** Removes a mobile device. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /**
                 * The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The
                 * `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).
                 */
                customerId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The unique ID the API service uses to identify the mobile device. */
                resourceId: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<void>;
            /** Retrieves a mobile device's properties. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /**
                 * The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The
                 * `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).
                 */
                customerId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Restrict information returned to a set of selected fields. */
                projection?: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The unique ID the API service uses to identify the mobile device. */
                resourceId: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<MobileDevice>;
            /**
             * Retrieves a paginated list of all user-owned mobile devices for an account. To retrieve a list that includes company-owned devices, use the Cloud Identity [Devices
             * API](https://cloud.google.com/identity/docs/concepts/overview-devices) instead.
             */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /**
                 * The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The
                 * `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).
                 */
                customerId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Maximum number of results to return. Max allowed value is 100. */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Device property to use for sorting results. */
                orderBy?: string;
                /** Token to specify next page in the list */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Restrict information returned to a set of selected fields. */
                projection?: string;
                /** Search string in the format given at https://developers.google.com/admin-sdk/directory/v1/search-operators */
                query?: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Whether to return results in ascending or descending order. Must be used with the `orderBy` parameter. */
                sortOrder?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<MobileDevices>;
        }
        interface OrgunitsResource {
            /** Removes an organizational unit. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /**
                 * The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The
                 * `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).
                 */
                customerId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The full path of the organizational unit (minus the leading `/`) or its unique ID. */
                orgUnitPath: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<void>;
            /** Retrieves an organizational unit. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /**
                 * The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The
                 * `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).
                 */
                customerId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The full path of the organizational unit (minus the leading `/`) or its unique ID. */
                orgUnitPath: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<OrgUnit>;
            /** Adds an organizational unit. */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /**
                 * The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The
                 * `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).
                 */
                customerId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: OrgUnit;
            }): Request<OrgUnit>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /**
                 * The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The
                 * `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).
                 */
                customerId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: OrgUnit): Request<OrgUnit>;
            /** Retrieves a list of all organizational units for an account. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /**
                 * The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The
                 * `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).
                 */
                customerId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The full path to the organizational unit or its unique ID. Returns the children of the specified organizational unit. */
                orgUnitPath?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Whether to return all sub-organizations or just immediate children. */
                type?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<OrgUnits>;
            /** Updates an organizational unit. This method supports [patch semantics](/admin-sdk/directory/v1/guides/performance#patch) */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /**
                 * The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The
                 * `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).
                 */
                customerId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The full path of the organizational unit (minus the leading `/`) or its unique ID. */
                orgUnitPath: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: OrgUnit;
            }): Request<OrgUnit>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /**
                 * The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The
                 * `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).
                 */
                customerId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The full path of the organizational unit (minus the leading `/`) or its unique ID. */
                orgUnitPath: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: OrgUnit): Request<OrgUnit>;
            /** Updates an organizational unit. */
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /**
                 * The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The
                 * `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).
                 */
                customerId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The full path of the organizational unit (minus the leading `/`) or its unique ID. */
                orgUnitPath: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: OrgUnit;
            }): Request<OrgUnit>;
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /**
                 * The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The
                 * `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).
                 */
                customerId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The full path of the organizational unit (minus the leading `/`) or its unique ID. */
                orgUnitPath: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: OrgUnit): Request<OrgUnit>;
        }
        interface PrivilegesResource {
            /** Retrieves a paginated list of all privileges for a customer. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Immutable ID of the Google Workspace account. */
                customer: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Privileges>;
        }
        interface BuildingsResource {
            /** Deletes a building. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** The id of the building to delete. */
                buildingId: string;
                /** JSONP */
                callback?: string;
                /** The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID. */
                customer: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<void>;
            /** Retrieves a building. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** The unique ID of the building to retrieve. */
                buildingId: string;
                /** JSONP */
                callback?: string;
                /** The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID. */
                customer: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Building>;
            /** Inserts a building. */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Source from which Building.coordinates are derived. */
                coordinatesSource?: string;
                /** The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID. */
                customer: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Building;
            }): Request<Building>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Source from which Building.coordinates are derived. */
                coordinatesSource?: string;
                /** The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID. */
                customer: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Building): Request<Building>;
            /** Retrieves a list of buildings for an account. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID. */
                customer: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Maximum number of results to return. */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Token to specify the next page in the list. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Buildings>;
            /** Patches a building. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** The id of the building to update. */
                buildingId: string;
                /** JSONP */
                callback?: string;
                /** Source from which Building.coordinates are derived. */
                coordinatesSource?: string;
                /** The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID. */
                customer: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Building;
            }): Request<Building>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** The id of the building to update. */
                buildingId: string;
                /** JSONP */
                callback?: string;
                /** Source from which Building.coordinates are derived. */
                coordinatesSource?: string;
                /** The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID. */
                customer: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Building): Request<Building>;
            /** Updates a building. */
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** The id of the building to update. */
                buildingId: string;
                /** JSONP */
                callback?: string;
                /** Source from which Building.coordinates are derived. */
                coordinatesSource?: string;
                /** The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID. */
                customer: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Building;
            }): Request<Building>;
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** The id of the building to update. */
                buildingId: string;
                /** JSONP */
                callback?: string;
                /** Source from which Building.coordinates are derived. */
                coordinatesSource?: string;
                /** The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID. */
                customer: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Building): Request<Building>;
        }
        interface CalendarsResource {
            /** Deletes a calendar resource. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** The unique ID of the calendar resource to delete. */
                calendarResourceId: string;
                /** JSONP */
                callback?: string;
                /** The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID. */
                customer: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<void>;
            /** Retrieves a calendar resource. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** The unique ID of the calendar resource to retrieve. */
                calendarResourceId: string;
                /** JSONP */
                callback?: string;
                /** The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID. */
                customer: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<CalendarResource>;
            /** Inserts a calendar resource. */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID. */
                customer: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: CalendarResource;
            }): Request<CalendarResource>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID. */
                customer: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: CalendarResource): Request<CalendarResource>;
            /** Retrieves a list of calendar resources for an account. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID. */
                customer: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Maximum number of results to return. */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Field(s) to sort results by in either ascending or descending order. Supported fields include `resourceId`, `resourceName`, `capacity`, `buildingId`, and `floorName`. If no
                 * order is specified, defaults to ascending. Should be of the form "field [asc|desc], field [asc|desc], ...". For example `buildingId, capacity desc` would return results sorted
                 * first by `buildingId` in ascending order then by `capacity` in descending order.
                 */
                orderBy?: string;
                /** Token to specify the next page in the list. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /**
                 * String query used to filter results. Should be of the form "field operator value" where field can be any of supported fields and operators can be any of supported operations.
                 * Operators include '=' for exact match, '!=' for mismatch and ':' for prefix match or HAS match where applicable. For prefix match, the value should always be followed by a *.
                 * Logical operators NOT and AND are supported (in this order of precedence). Supported fields include `generatedResourceName`, `name`, `buildingId`, `floor_name`, `capacity`,
                 * `featureInstances.feature.name`, `resourceEmail`, `resourceCategory`. For example `buildingId=US-NYC-9TH AND featureInstances.feature.name:Phone`.
                 */
                query?: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<CalendarResources>;
            /** Patches a calendar resource. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** The unique ID of the calendar resource to update. */
                calendarResourceId: string;
                /** JSONP */
                callback?: string;
                /** The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID. */
                customer: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: CalendarResource;
            }): Request<CalendarResource>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** The unique ID of the calendar resource to update. */
                calendarResourceId: string;
                /** JSONP */
                callback?: string;
                /** The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID. */
                customer: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: CalendarResource): Request<CalendarResource>;
            /**
             * Updates a calendar resource. This method supports patch semantics, meaning you only need to include the fields you wish to update. Fields that are not present in the request will be
             * preserved.
             */
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** The unique ID of the calendar resource to update. */
                calendarResourceId: string;
                /** JSONP */
                callback?: string;
                /** The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID. */
                customer: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: CalendarResource;
            }): Request<CalendarResource>;
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** The unique ID of the calendar resource to update. */
                calendarResourceId: string;
                /** JSONP */
                callback?: string;
                /** The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID. */
                customer: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: CalendarResource): Request<CalendarResource>;
        }
        interface FeaturesResource {
            /** Deletes a feature. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID. */
                customer: string;
                /** The unique ID of the feature to delete. */
                featureKey: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<void>;
            /** Retrieves a feature. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID. */
                customer: string;
                /** The unique ID of the feature to retrieve. */
                featureKey: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Feature>;
            /** Inserts a feature. */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID. */
                customer: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Feature;
            }): Request<Feature>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID. */
                customer: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Feature): Request<Feature>;
            /** Retrieves a list of features for an account. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID. */
                customer: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Maximum number of results to return. */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Token to specify the next page in the list. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Features>;
            /** Patches a feature. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID. */
                customer: string;
                /** The unique ID of the feature to update. */
                featureKey: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Feature;
            }): Request<Feature>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID. */
                customer: string;
                /** The unique ID of the feature to update. */
                featureKey: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Feature): Request<Feature>;
            /** Renames a feature. */
            rename(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID. */
                customer: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The unique ID of the feature to rename. */
                oldName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: FeatureRename;
            }): Request<void>;
            rename(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID. */
                customer: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The unique ID of the feature to rename. */
                oldName: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: FeatureRename): Request<void>;
            /** Updates a feature. */
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID. */
                customer: string;
                /** The unique ID of the feature to update. */
                featureKey: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Feature;
            }): Request<Feature>;
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** The unique ID for the customer's Google Workspace account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID. */
                customer: string;
                /** The unique ID of the feature to update. */
                featureKey: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Feature): Request<Feature>;
        }
        interface ResourcesResource {
            buildings: BuildingsResource;
            calendars: CalendarsResource;
            features: FeaturesResource;
        }
        interface RoleAssignmentsResource {
            /** Deletes a role assignment. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Immutable ID of the Google Workspace account. */
                customer: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Immutable ID of the role assignment. */
                roleAssignmentId: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<void>;
            /** Retrieves a role assignment. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Immutable ID of the Google Workspace account. */
                customer: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Immutable ID of the role assignment. */
                roleAssignmentId: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<RoleAssignment>;
            /** Creates a role assignment. */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Immutable ID of the Google Workspace account. */
                customer: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: RoleAssignment;
            }): Request<RoleAssignment>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Immutable ID of the Google Workspace account. */
                customer: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: RoleAssignment): Request<RoleAssignment>;
            /** Retrieves a paginated list of all roleAssignments. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Immutable ID of the Google Workspace account. */
                customer: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Maximum number of results to return. */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Token to specify the next page in the list. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Immutable ID of a role. If included in the request, returns only role assignments containing this role ID. */
                roleId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** The user's primary email address, alias email address, or unique user ID. If included in the request, returns role assignments only for this user. */
                userKey?: string;
            }): Request<RoleAssignments>;
        }
        interface RolesResource {
            /** Deletes a role. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Immutable ID of the Google Workspace account. */
                customer: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Immutable ID of the role. */
                roleId: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<void>;
            /** Retrieves a role. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Immutable ID of the Google Workspace account. */
                customer: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Immutable ID of the role. */
                roleId: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Role>;
            /** Creates a role. */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Immutable ID of the Google Workspace account. */
                customer: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Role;
            }): Request<Role>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Immutable ID of the Google Workspace account. */
                customer: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Role): Request<Role>;
            /** Retrieves a paginated list of all the roles in a domain. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Immutable ID of the Google Workspace account. */
                customer: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Maximum number of results to return. */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Token to specify the next page in the list. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Roles>;
            /** Patches a role. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Immutable ID of the Google Workspace account. */
                customer: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Immutable ID of the role. */
                roleId: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Role;
            }): Request<Role>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Immutable ID of the Google Workspace account. */
                customer: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Immutable ID of the role. */
                roleId: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Role): Request<Role>;
            /** Updates a role. */
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Immutable ID of the Google Workspace account. */
                customer: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Immutable ID of the role. */
                roleId: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Role;
            }): Request<Role>;
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Immutable ID of the Google Workspace account. */
                customer: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Immutable ID of the role. */
                roleId: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Role): Request<Role>;
        }
        interface SchemasResource {
            /** Deletes a schema. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Immutable ID of the Google Workspace account. */
                customerId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name or immutable ID of the schema. */
                schemaKey: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<void>;
            /** Retrieves a schema. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Immutable ID of the Google Workspace account. */
                customerId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name or immutable ID of the schema. */
                schemaKey: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Schema>;
            /** Creates a schema. */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Immutable ID of the Google Workspace account. */
                customerId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Schema;
            }): Request<Schema>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Immutable ID of the Google Workspace account. */
                customerId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Schema): Request<Schema>;
            /** Retrieves all schemas for a customer. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Immutable ID of the Google Workspace account. */
                customerId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Schemas>;
            /** Patches a schema. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Immutable ID of the Google Workspace account. */
                customerId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name or immutable ID of the schema. */
                schemaKey: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Schema;
            }): Request<Schema>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Immutable ID of the Google Workspace account. */
                customerId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name or immutable ID of the schema. */
                schemaKey: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Schema): Request<Schema>;
            /** Updates a schema. */
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Immutable ID of the Google Workspace account. */
                customerId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name or immutable ID of the schema. */
                schemaKey: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Schema;
            }): Request<Schema>;
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Immutable ID of the Google Workspace account. */
                customerId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name or immutable ID of the schema. */
                schemaKey: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Schema): Request<Schema>;
        }
        interface TokensResource {
            /** Deletes all access tokens issued by a user for an application. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** The Client ID of the application the token is issued to. */
                clientId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID. */
                userKey: string;
            }): Request<void>;
            /** Gets information about an access token issued by a user. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** The Client ID of the application the token is issued to. */
                clientId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID. */
                userKey: string;
            }): Request<Token>;
            /** Returns the set of tokens specified user has issued to 3rd party applications. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID. */
                userKey: string;
            }): Request<Tokens>;
        }
        interface TwoStepVerificationResource {
            /** Turns off 2-Step Verification for user. */
            turnOff(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID. */
                userKey: string;
            }): Request<void>;
        }
        interface AliasesResource {
            /** Removes an alias. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** The alias to be removed. */
                alias: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID. */
                userKey: string;
            }): Request<void>;
            /** Adds an alias. */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID. */
                userKey: string;
                /** Request body */
                resource: Alias;
            }): Request<Alias>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID. */
                userKey: string;
            },
            body: Alias): Request<Alias>;
            /** Lists all aliases for a user. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Events to watch for. */
                event?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID. */
                userKey: string;
            }): Request<Aliases>;
            /** Watches for changes in users list. */
            watch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Events to watch for. */
                event?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Email or immutable ID of the user */
                userKey: string;
                /** Request body */
                resource: Channel;
            }): Request<Channel>;
            watch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Events to watch for. */
                event?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Email or immutable ID of the user */
                userKey: string;
            },
            body: Channel): Request<Channel>;
        }
        interface PhotosResource {
            /** Removes the user's photo. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID. */
                userKey: string;
            }): Request<void>;
            /** Retrieves the user's photo. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID. */
                userKey: string;
            }): Request<UserPhoto>;
            /** Adds a photo for the user. This method supports [patch semantics](/admin-sdk/directory/v1/guides/performance#patch). */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID. */
                userKey: string;
                /** Request body */
                resource: UserPhoto;
            }): Request<UserPhoto>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID. */
                userKey: string;
            },
            body: UserPhoto): Request<UserPhoto>;
            /** Adds a photo for the user. */
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID. */
                userKey: string;
                /** Request body */
                resource: UserPhoto;
            }): Request<UserPhoto>;
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID. */
                userKey: string;
            },
            body: UserPhoto): Request<UserPhoto>;
        }
        interface UsersResource {
            /** Deletes a user. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID. */
                userKey: string;
            }): Request<void>;
            /** Retrieves a user. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** A comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when `projection=custom`. */
                customFieldMask?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** What subset of fields to fetch for this user. */
                projection?: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID. */
                userKey: string;
                /**
                 * Whether to fetch the administrator-only or domain-wide public view of the user. For more information, see [Retrieve a user as a
                 * non-administrator](/admin-sdk/directory/v1/guides/manage-users#retrieve_users_non_admin).
                 */
                viewType?: string;
            }): Request<User>;
            /** Creates a user. */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: User;
            }): Request<User>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: User): Request<User>;
            /** Retrieves a paginated list of either deleted users or all users in a domain. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /**
                 * The unique ID for the customer's Google Workspace account. In case of a multi-domain account, to fetch all groups for a customer, fill this field instead of domain. You can also
                 * use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).
                 * Either the `customer` or the `domain` parameter must be provided.
                 */
                customer?: string;
                /** A comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when `projection=custom`. */
                customFieldMask?: string;
                /**
                 * The domain name. Use this field to get groups from only one domain. To return all domains for a customer account, use the `customer` query parameter instead. Either the
                 * `customer` or the `domain` parameter must be provided.
                 */
                domain?: string;
                /** Event on which subscription is intended (if subscribing) */
                event?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Maximum number of results to return. */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Property to use for sorting results. */
                orderBy?: string;
                /** Token to specify next page in the list */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** What subset of fields to fetch for this user. */
                projection?: string;
                /** Query string for searching user fields. For more information on constructing user queries, see [Search for Users](/admin-sdk/directory/v1/guides/search-users). */
                query?: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** If set to `true`, retrieves the list of deleted users. (Default: `false`) */
                showDeleted?: string;
                /** Whether to return results in ascending or descending order, ignoring case. */
                sortOrder?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /**
                 * Whether to fetch the administrator-only or domain-wide public view of the user. For more information, see [Retrieve a user as a
                 * non-administrator](/admin-sdk/directory/v1/guides/manage-users#retrieve_users_non_admin).
                 */
                viewType?: string;
            }): Request<Users>;
            /** Makes a user a super administrator. */
            makeAdmin(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID. */
                userKey: string;
                /** Request body */
                resource: UserMakeAdmin;
            }): Request<void>;
            makeAdmin(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID. */
                userKey: string;
            },
            body: UserMakeAdmin): Request<void>;
            /**
             * Updates a user using patch semantics. The update method should be used instead, since it also supports patch semantics and has better performance. This method is unable to clear
             * fields that contain repeated objects (`addresses`, `phones`, etc). Use the update method instead.
             */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID. */
                userKey: string;
                /** Request body */
                resource: User;
            }): Request<User>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID. */
                userKey: string;
            },
            body: User): Request<User>;
            /** Signs a user out of all web and device sessions and reset their sign-in cookies. User will have to sign in by authenticating again. */
            signOut(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Identifies the target user in the API request. The value can be the user's primary email address, alias email address, or unique user ID. */
                userKey: string;
            }): Request<void>;
            /** Undeletes a deleted user. */
            undelete(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** The immutable id of the user */
                userKey: string;
                /** Request body */
                resource: UserUndelete;
            }): Request<void>;
            undelete(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** The immutable id of the user */
                userKey: string;
            },
            body: UserUndelete): Request<void>;
            /**
             * Updates a user. This method supports patch semantics, meaning you only need to include the fields you wish to update. Fields that are not present in the request will be preserved,
             * and fields set to `null` will be cleared.
             */
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID. */
                userKey: string;
                /** Request body */
                resource: User;
            }): Request<User>;
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID. */
                userKey: string;
            },
            body: User): Request<User>;
            /** Watches for changes in users list. */
            watch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Immutable ID of the Google Workspace account. In case of multi-domain, to fetch all users for a customer, fill this field instead of domain. */
                customer?: string;
                /** Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection=custom. */
                customFieldMask?: string;
                /** Name of the domain. Fill this field to get users from only this domain. To return all users in a multi-domain fill customer field instead." */
                domain?: string;
                /** Events to watch for. */
                event?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Maximum number of results to return. */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Column to use for sorting results */
                orderBy?: string;
                /** Token to specify next page in the list */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** What subset of fields to fetch for this user. */
                projection?: string;
                /** Query string search. Should be of the form "". Complete documentation is at https: //developers.google.com/admin-sdk/directory/v1/guides/search-users */
                query?: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** If set to true, retrieves the list of deleted users. (Default: false) */
                showDeleted?: string;
                /** Whether to return results in ascending or descending order. */
                sortOrder?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /**
                 * Whether to fetch the administrator-only or domain-wide public view of the user. For more information, see [Retrieve a user as a
                 * non-administrator](/admin-sdk/directory/v1/guides/manage-users#retrieve_users_non_admin).
                 */
                viewType?: string;
                /** Request body */
                resource: Channel;
            }): Request<Channel>;
            watch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Immutable ID of the Google Workspace account. In case of multi-domain, to fetch all users for a customer, fill this field instead of domain. */
                customer?: string;
                /** Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection=custom. */
                customFieldMask?: string;
                /** Name of the domain. Fill this field to get users from only this domain. To return all users in a multi-domain fill customer field instead." */
                domain?: string;
                /** Events to watch for. */
                event?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Maximum number of results to return. */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Column to use for sorting results */
                orderBy?: string;
                /** Token to specify next page in the list */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** What subset of fields to fetch for this user. */
                projection?: string;
                /** Query string search. Should be of the form "". Complete documentation is at https: //developers.google.com/admin-sdk/directory/v1/guides/search-users */
                query?: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** If set to true, retrieves the list of deleted users. (Default: false) */
                showDeleted?: string;
                /** Whether to return results in ascending or descending order. */
                sortOrder?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /**
                 * Whether to fetch the administrator-only or domain-wide public view of the user. For more information, see [Retrieve a user as a
                 * non-administrator](/admin-sdk/directory/v1/guides/manage-users#retrieve_users_non_admin).
                 */
                viewType?: string;
            },
            body: Channel): Request<Channel>;
            aliases: AliasesResource;
            photos: PhotosResource;
        }
        interface VerificationCodesResource {
            /** Generates new backup verification codes for the user. */
            generate(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Email or immutable ID of the user */
                userKey: string;
            }): Request<void>;
            /** Invalidates the current backup verification codes for the user. */
            invalidate(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Email or immutable ID of the user */
                userKey: string;
            }): Request<void>;
            /** Returns the current set of valid backup verification codes for the specified user. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID. */
                userKey: string;
            }): Request<VerificationCodes>;
        }

        const asps: AspsResource;

        const chromeosdevices: ChromeosdevicesResource;

        const customers: CustomersResource;

        const domainAliases: DomainAliasesResource;

        const domains: DomainsResource;

        const groups: GroupsResource;

        const members: MembersResource;

        const mobiledevices: MobiledevicesResource;

        const orgunits: OrgunitsResource;

        const privileges: PrivilegesResource;

        const resources: ResourcesResource;

        const roleAssignments: RoleAssignmentsResource;

        const roles: RolesResource;

        const schemas: SchemasResource;

        const tokens: TokensResource;

        const twoStepVerification: TwoStepVerificationResource;

        const users: UsersResource;

        const verificationCodes: VerificationCodesResource;
    }
}
