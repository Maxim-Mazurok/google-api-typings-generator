/* This is stub file for gapi.client.admin definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20220628

gapi.load('client', () => {
    /** now we can use gapi.client */
    gapi.client.load('admin', 'directory_v1', () => {
        /** now we can use gapi.client.admin */

        /** don't forget to authenticate your client before sending any request to resources: */
        /** declare client_id registered in Google Developers Console */
        const client_id = '<<PUT YOUR CLIENT ID HERE>>';
        const scope = [
            /** See, add, edit, and permanently delete the printers that your organization can use with Chrome */
            'https://www.googleapis.com/auth/admin.chrome.printers',
            /** See the printers that your organization can use with Chrome */
            'https://www.googleapis.com/auth/admin.chrome.printers.readonly',
            /** View and manage customer related information */
            'https://www.googleapis.com/auth/admin.directory.customer',
            /** View customer related information */
            'https://www.googleapis.com/auth/admin.directory.customer.readonly',
            /** View and manage your Chrome OS devices' metadata */
            'https://www.googleapis.com/auth/admin.directory.device.chromeos',
            /** View your Chrome OS devices' metadata */
            'https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly',
            /** View and manage your mobile devices' metadata */
            'https://www.googleapis.com/auth/admin.directory.device.mobile',
            /** Manage your mobile devices by performing administrative tasks */
            'https://www.googleapis.com/auth/admin.directory.device.mobile.action',
            /** View your mobile devices' metadata */
            'https://www.googleapis.com/auth/admin.directory.device.mobile.readonly',
            /** View and manage the provisioning of domains for your customers */
            'https://www.googleapis.com/auth/admin.directory.domain',
            /** View domains related to your customers */
            'https://www.googleapis.com/auth/admin.directory.domain.readonly',
            /** View and manage the provisioning of groups on your domain */
            'https://www.googleapis.com/auth/admin.directory.group',
            /** View and manage group subscriptions on your domain */
            'https://www.googleapis.com/auth/admin.directory.group.member',
            /** View group subscriptions on your domain */
            'https://www.googleapis.com/auth/admin.directory.group.member.readonly',
            /** View groups on your domain */
            'https://www.googleapis.com/auth/admin.directory.group.readonly',
            /** View and manage organization units on your domain */
            'https://www.googleapis.com/auth/admin.directory.orgunit',
            /** View organization units on your domain */
            'https://www.googleapis.com/auth/admin.directory.orgunit.readonly',
            /** View and manage the provisioning of calendar resources on your domain */
            'https://www.googleapis.com/auth/admin.directory.resource.calendar',
            /** View calendar resources on your domain */
            'https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly',
            /** Manage delegated admin roles for your domain */
            'https://www.googleapis.com/auth/admin.directory.rolemanagement',
            /** View delegated admin roles for your domain */
            'https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly',
            /** View and manage the provisioning of users on your domain */
            'https://www.googleapis.com/auth/admin.directory.user',
            /** View and manage user aliases on your domain */
            'https://www.googleapis.com/auth/admin.directory.user.alias',
            /** View user aliases on your domain */
            'https://www.googleapis.com/auth/admin.directory.user.alias.readonly',
            /** See info about users on your domain */
            'https://www.googleapis.com/auth/admin.directory.user.readonly',
            /** Manage data access permissions for users on your domain */
            'https://www.googleapis.com/auth/admin.directory.user.security',
            /** View and manage the provisioning of user schemas on your domain */
            'https://www.googleapis.com/auth/admin.directory.userschema',
            /** View user schemas on your domain */
            'https://www.googleapis.com/auth/admin.directory.userschema.readonly',
            /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
            'https://www.googleapis.com/auth/cloud-platform',
        ];
        const immediate = false;
        gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
            if (authResult && !authResult.error) {
                /** handle successful authorization */
                run();
            } else {
                /** handle authorization error */
            }
        });
    });

    async function run() {
        /** Deletes an ASP issued by a user. */
        await gapi.client.admin.asps.delete({
            codeId: 42,
            userKey: "Test string",
        });
        /** Gets information about an ASP issued by a user. */
        await gapi.client.admin.asps.get({
            codeId: 42,
            userKey: "Test string",
        });
        /** Lists the ASPs issued by a user. */
        await gapi.client.admin.asps.list({
            userKey: "Test string",
        });
        /** Stops watching resources through this channel. */
        await gapi.client.admin.channels.stop({
        }, {
            address: "Test string",
            expiration: "Test string",
            id: "Test string",
            kind: "Test string",
            params: {
                A: "Test string"            },
            payload: true,
            resourceId: "Test string",
            resourceUri: "Test string",
            token: "Test string",
            type: "Test string",
        });
        /**
         * Takes an action that affects a Chrome OS Device. This includes deprovisioning, disabling, and re-enabling devices. *Warning:* * Deprovisioning a device will stop device policy syncing
         * and remove device-level printers. After a device is deprovisioned, it must be wiped before it can be re-enrolled. * Lost or stolen devices should use the disable action. * Re-enabling a
         * disabled device will consume a device license. If you do not have sufficient licenses available when completing the re-enable action, you will receive an error. For more information
         * about deprovisioning and disabling devices, visit the [help center](https://support.google.com/chrome/a/answer/3523633).
         */
        await gapi.client.admin.chromeosdevices.action({
            customerId: "Test string",
            resourceId: "Test string",
        }, {
            action: "Test string",
            deprovisionReason: "Test string",
        });
        /** Retrieves a Chrome OS device's properties. */
        await gapi.client.admin.chromeosdevices.get({
            customerId: "Test string",
            deviceId: "Test string",
            projection: "Test string",
        });
        /** Retrieves a paginated list of Chrome OS devices within an account. */
        await gapi.client.admin.chromeosdevices.list({
            customerId: "Test string",
            includeChildOrgunits: true,
            maxResults: 42,
            orderBy: "Test string",
            orgUnitPath: "Test string",
            pageToken: "Test string",
            projection: "Test string",
            query: "Test string",
            sortOrder: "Test string",
        });
        /** Moves or inserts multiple Chrome OS devices to an organizational unit. You can move up to 50 devices at once. */
        await gapi.client.admin.chromeosdevices.moveDevicesToOu({
            customerId: "Test string",
            orgUnitPath: "Test string",
        }, {
            deviceIds: [
                "Test string"            ],
        });
        /**
         * Updates a device's updatable properties, such as `annotatedUser`, `annotatedLocation`, `notes`, `orgUnitPath`, or `annotatedAssetId`. This method supports [patch
         * semantics](/admin-sdk/directory/v1/guides/performance#patch).
         */
        await gapi.client.admin.chromeosdevices.patch({
            customerId: "Test string",
            deviceId: "Test string",
            projection: "Test string",
        }, {
            activeTimeRanges: [
                {
                    activeTime: 42,
                    date: "Test string",
                }            ],
            annotatedAssetId: "Test string",
            annotatedLocation: "Test string",
            annotatedUser: "Test string",
            autoUpdateExpiration: "Test string",
            bootMode: "Test string",
            cpuInfo: [
                {
                    architecture: "Test string",
                    logicalCpus: [
                        {
                            cStates: [
                                {
                                    displayName: "Test string",
                                    sessionDuration: "Test string",
                                }                            ],
                            currentScalingFrequencyKhz: 42,
                            idleDuration: "Test string",
                            maxScalingFrequencyKhz: 42,
                        }                    ],
                    maxClockSpeedKhz: 42,
                    model: "Test string",
                }            ],
            cpuStatusReports: [
                {
                    cpuTemperatureInfo: [
                        {
                            label: "Test string",
                            temperature: 42,
                        }                    ],
                    cpuUtilizationPercentageInfo: [
                        42                    ],
                    reportTime: "Test string",
                }            ],
            deviceFiles: [
                {
                    createTime: "Test string",
                    downloadUrl: "Test string",
                    name: "Test string",
                    type: "Test string",
                }            ],
            deviceId: "Test string",
            diskVolumeReports: [
                {
                    volumeInfo: [
                        {
                            storageFree: "Test string",
                            storageTotal: "Test string",
                            volumeId: "Test string",
                        }                    ],
                }            ],
            dockMacAddress: "Test string",
            etag: "Test string",
            ethernetMacAddress: "Test string",
            ethernetMacAddress0: "Test string",
            firmwareVersion: "Test string",
            kind: "Test string",
            lastEnrollmentTime: "Test string",
            lastKnownNetwork: [
                {
                    ipAddress: "Test string",
                    wanIpAddress: "Test string",
                }            ],
            lastSync: "Test string",
            macAddress: "Test string",
            manufactureDate: "Test string",
            meid: "Test string",
            model: "Test string",
            notes: "Test string",
            orderNumber: "Test string",
            orgUnitId: "Test string",
            orgUnitPath: "Test string",
            osVersion: "Test string",
            platformVersion: "Test string",
            recentUsers: [
                {
                    email: "Test string",
                    type: "Test string",
                }            ],
            screenshotFiles: [
                {
                    createTime: "Test string",
                    downloadUrl: "Test string",
                    name: "Test string",
                    type: "Test string",
                }            ],
            serialNumber: "Test string",
            status: "Test string",
            supportEndDate: "Test string",
            systemRamFreeReports: [
                {
                    reportTime: "Test string",
                    systemRamFreeInfo: [
                        "Test string"                    ],
                }            ],
            systemRamTotal: "Test string",
            tpmVersionInfo: {
                family: "Test string",
                firmwareVersion: "Test string",
                manufacturer: "Test string",
                specLevel: "Test string",
                tpmModel: "Test string",
                vendorSpecific: "Test string",
            },
            willAutoRenew: true,
        });
        /** Updates a device's updatable properties, such as `annotatedUser`, `annotatedLocation`, `notes`, `orgUnitPath`, or `annotatedAssetId`. */
        await gapi.client.admin.chromeosdevices.update({
            customerId: "Test string",
            deviceId: "Test string",
            projection: "Test string",
        }, {
            activeTimeRanges: [
                {
                    activeTime: 42,
                    date: "Test string",
                }            ],
            annotatedAssetId: "Test string",
            annotatedLocation: "Test string",
            annotatedUser: "Test string",
            autoUpdateExpiration: "Test string",
            bootMode: "Test string",
            cpuInfo: [
                {
                    architecture: "Test string",
                    logicalCpus: [
                        {
                            cStates: [
                                {
                                    displayName: "Test string",
                                    sessionDuration: "Test string",
                                }                            ],
                            currentScalingFrequencyKhz: 42,
                            idleDuration: "Test string",
                            maxScalingFrequencyKhz: 42,
                        }                    ],
                    maxClockSpeedKhz: 42,
                    model: "Test string",
                }            ],
            cpuStatusReports: [
                {
                    cpuTemperatureInfo: [
                        {
                            label: "Test string",
                            temperature: 42,
                        }                    ],
                    cpuUtilizationPercentageInfo: [
                        42                    ],
                    reportTime: "Test string",
                }            ],
            deviceFiles: [
                {
                    createTime: "Test string",
                    downloadUrl: "Test string",
                    name: "Test string",
                    type: "Test string",
                }            ],
            deviceId: "Test string",
            diskVolumeReports: [
                {
                    volumeInfo: [
                        {
                            storageFree: "Test string",
                            storageTotal: "Test string",
                            volumeId: "Test string",
                        }                    ],
                }            ],
            dockMacAddress: "Test string",
            etag: "Test string",
            ethernetMacAddress: "Test string",
            ethernetMacAddress0: "Test string",
            firmwareVersion: "Test string",
            kind: "Test string",
            lastEnrollmentTime: "Test string",
            lastKnownNetwork: [
                {
                    ipAddress: "Test string",
                    wanIpAddress: "Test string",
                }            ],
            lastSync: "Test string",
            macAddress: "Test string",
            manufactureDate: "Test string",
            meid: "Test string",
            model: "Test string",
            notes: "Test string",
            orderNumber: "Test string",
            orgUnitId: "Test string",
            orgUnitPath: "Test string",
            osVersion: "Test string",
            platformVersion: "Test string",
            recentUsers: [
                {
                    email: "Test string",
                    type: "Test string",
                }            ],
            screenshotFiles: [
                {
                    createTime: "Test string",
                    downloadUrl: "Test string",
                    name: "Test string",
                    type: "Test string",
                }            ],
            serialNumber: "Test string",
            status: "Test string",
            supportEndDate: "Test string",
            systemRamFreeReports: [
                {
                    reportTime: "Test string",
                    systemRamFreeInfo: [
                        "Test string"                    ],
                }            ],
            systemRamTotal: "Test string",
            tpmVersionInfo: {
                family: "Test string",
                firmwareVersion: "Test string",
                manufacturer: "Test string",
                specLevel: "Test string",
                tpmModel: "Test string",
                vendorSpecific: "Test string",
            },
            willAutoRenew: true,
        });
        /** Retrieves a customer. */
        await gapi.client.admin.customers.get({
            customerKey: "Test string",
        });
        /** Patches a customer. */
        await gapi.client.admin.customers.patch({
            customerKey: "Test string",
        }, {
            alternateEmail: "Test string",
            customerCreationTime: "Test string",
            customerDomain: "Test string",
            etag: "Test string",
            id: "Test string",
            kind: "Test string",
            language: "Test string",
            phoneNumber: "Test string",
            postalAddress: {
                addressLine1: "Test string",
                addressLine2: "Test string",
                addressLine3: "Test string",
                contactName: "Test string",
                countryCode: "Test string",
                locality: "Test string",
                organizationName: "Test string",
                postalCode: "Test string",
                region: "Test string",
            },
        });
        /** Updates a customer. */
        await gapi.client.admin.customers.update({
            customerKey: "Test string",
        }, {
            alternateEmail: "Test string",
            customerCreationTime: "Test string",
            customerDomain: "Test string",
            etag: "Test string",
            id: "Test string",
            kind: "Test string",
            language: "Test string",
            phoneNumber: "Test string",
            postalAddress: {
                addressLine1: "Test string",
                addressLine2: "Test string",
                addressLine3: "Test string",
                contactName: "Test string",
                countryCode: "Test string",
                locality: "Test string",
                organizationName: "Test string",
                postalCode: "Test string",
                region: "Test string",
            },
        });
        /** Deletes a domain Alias of the customer. */
        await gapi.client.admin.domainAliases.delete({
            customer: "Test string",
            domainAliasName: "Test string",
        });
        /** Retrieves a domain alias of the customer. */
        await gapi.client.admin.domainAliases.get({
            customer: "Test string",
            domainAliasName: "Test string",
        });
        /** Inserts a domain alias of the customer. */
        await gapi.client.admin.domainAliases.insert({
            customer: "Test string",
        }, {
            creationTime: "Test string",
            domainAliasName: "Test string",
            etag: "Test string",
            kind: "Test string",
            parentDomainName: "Test string",
            verified: true,
        });
        /** Lists the domain aliases of the customer. */
        await gapi.client.admin.domainAliases.list({
            customer: "Test string",
            parentDomainName: "Test string",
        });
        /** Deletes a domain of the customer. */
        await gapi.client.admin.domains.delete({
            customer: "Test string",
            domainName: "Test string",
        });
        /** Retrieves a domain of the customer. */
        await gapi.client.admin.domains.get({
            customer: "Test string",
            domainName: "Test string",
        });
        /** Inserts a domain of the customer. */
        await gapi.client.admin.domains.insert({
            customer: "Test string",
        }, {
            creationTime: "Test string",
            domainAliases: [
                {
                    creationTime: "Test string",
                    domainAliasName: "Test string",
                    etag: "Test string",
                    kind: "Test string",
                    parentDomainName: "Test string",
                    verified: true,
                }            ],
            domainName: "Test string",
            etag: "Test string",
            isPrimary: true,
            kind: "Test string",
            verified: true,
        });
        /** Lists the domains of the customer. */
        await gapi.client.admin.domains.list({
            customer: "Test string",
        });
        /** Deletes a group. */
        await gapi.client.admin.groups.delete({
            groupKey: "Test string",
        });
        /** Removes an alias. */
        await gapi.client.admin.groups.aliases.delete({
            alias: "Test string",
            groupKey: "Test string",
        });
        /** Adds an alias for the group. */
        await gapi.client.admin.groups.aliases.insert({
            groupKey: "Test string",
        }, {
            alias: "Test string",
            etag: "Test string",
            id: "Test string",
            kind: "Test string",
            primaryEmail: "Test string",
        });
        /** Lists all aliases for a group. */
        await gapi.client.admin.groups.aliases.list({
            groupKey: "Test string",
        });
        /** Retrieves a group's properties. */
        await gapi.client.admin.groups.get({
            groupKey: "Test string",
        });
        /** Removes an alias. */
        await gapi.client.admin.groups.aliases.delete({
            alias: "Test string",
            groupKey: "Test string",
        });
        /** Adds an alias for the group. */
        await gapi.client.admin.groups.aliases.insert({
            groupKey: "Test string",
        }, {
            alias: "Test string",
            etag: "Test string",
            id: "Test string",
            kind: "Test string",
            primaryEmail: "Test string",
        });
        /** Lists all aliases for a group. */
        await gapi.client.admin.groups.aliases.list({
            groupKey: "Test string",
        });
        /** Creates a group. */
        await gapi.client.admin.groups.insert({
        }, {
            adminCreated: true,
            aliases: [
                "Test string"            ],
            description: "Test string",
            directMembersCount: "Test string",
            email: "Test string",
            etag: "Test string",
            id: "Test string",
            kind: "Test string",
            name: "Test string",
            nonEditableAliases: [
                "Test string"            ],
        });
        /** Removes an alias. */
        await gapi.client.admin.groups.aliases.delete({
            alias: "Test string",
            groupKey: "Test string",
        });
        /** Adds an alias for the group. */
        await gapi.client.admin.groups.aliases.insert({
            groupKey: "Test string",
        }, {
            alias: "Test string",
            etag: "Test string",
            id: "Test string",
            kind: "Test string",
            primaryEmail: "Test string",
        });
        /** Lists all aliases for a group. */
        await gapi.client.admin.groups.aliases.list({
            groupKey: "Test string",
        });
        /** Retrieves all groups of a domain or of a user given a userKey (paginated). */
        await gapi.client.admin.groups.list({
            customer: "Test string",
            domain: "Test string",
            maxResults: 42,
            orderBy: "Test string",
            pageToken: "Test string",
            query: "Test string",
            sortOrder: "Test string",
            userKey: "Test string",
        });
        /** Removes an alias. */
        await gapi.client.admin.groups.aliases.delete({
            alias: "Test string",
            groupKey: "Test string",
        });
        /** Adds an alias for the group. */
        await gapi.client.admin.groups.aliases.insert({
            groupKey: "Test string",
        }, {
            alias: "Test string",
            etag: "Test string",
            id: "Test string",
            kind: "Test string",
            primaryEmail: "Test string",
        });
        /** Lists all aliases for a group. */
        await gapi.client.admin.groups.aliases.list({
            groupKey: "Test string",
        });
        /** Updates a group's properties. This method supports [patch semantics](/admin-sdk/directory/v1/guides/performance#patch). */
        await gapi.client.admin.groups.patch({
            groupKey: "Test string",
        }, {
            adminCreated: true,
            aliases: [
                "Test string"            ],
            description: "Test string",
            directMembersCount: "Test string",
            email: "Test string",
            etag: "Test string",
            id: "Test string",
            kind: "Test string",
            name: "Test string",
            nonEditableAliases: [
                "Test string"            ],
        });
        /** Removes an alias. */
        await gapi.client.admin.groups.aliases.delete({
            alias: "Test string",
            groupKey: "Test string",
        });
        /** Adds an alias for the group. */
        await gapi.client.admin.groups.aliases.insert({
            groupKey: "Test string",
        }, {
            alias: "Test string",
            etag: "Test string",
            id: "Test string",
            kind: "Test string",
            primaryEmail: "Test string",
        });
        /** Lists all aliases for a group. */
        await gapi.client.admin.groups.aliases.list({
            groupKey: "Test string",
        });
        /** Updates a group's properties. */
        await gapi.client.admin.groups.update({
            groupKey: "Test string",
        }, {
            adminCreated: true,
            aliases: [
                "Test string"            ],
            description: "Test string",
            directMembersCount: "Test string",
            email: "Test string",
            etag: "Test string",
            id: "Test string",
            kind: "Test string",
            name: "Test string",
            nonEditableAliases: [
                "Test string"            ],
        });
        /** Removes an alias. */
        await gapi.client.admin.groups.aliases.delete({
            alias: "Test string",
            groupKey: "Test string",
        });
        /** Adds an alias for the group. */
        await gapi.client.admin.groups.aliases.insert({
            groupKey: "Test string",
        }, {
            alias: "Test string",
            etag: "Test string",
            id: "Test string",
            kind: "Test string",
            primaryEmail: "Test string",
        });
        /** Lists all aliases for a group. */
        await gapi.client.admin.groups.aliases.list({
            groupKey: "Test string",
        });
        /** Removes a member from a group. */
        await gapi.client.admin.members.delete({
            groupKey: "Test string",
            memberKey: "Test string",
        });
        /** Retrieves a group member's properties. */
        await gapi.client.admin.members.get({
            groupKey: "Test string",
            memberKey: "Test string",
        });
        /** Checks whether the given user is a member of the group. Membership can be direct or nested. */
        await gapi.client.admin.members.hasMember({
            groupKey: "Test string",
            memberKey: "Test string",
        });
        /** Adds a user to the specified group. */
        await gapi.client.admin.members.insert({
            groupKey: "Test string",
        }, {
            delivery_settings: "Test string",
            email: "Test string",
            etag: "Test string",
            id: "Test string",
            kind: "Test string",
            role: "Test string",
            status: "Test string",
            type: "Test string",
        });
        /** Retrieves a paginated list of all members in a group. */
        await gapi.client.admin.members.list({
            groupKey: "Test string",
            includeDerivedMembership: true,
            maxResults: 42,
            pageToken: "Test string",
            roles: "Test string",
        });
        /** Updates the membership properties of a user in the specified group. This method supports [patch semantics](/admin-sdk/directory/v1/guides/performance#patch). */
        await gapi.client.admin.members.patch({
            groupKey: "Test string",
            memberKey: "Test string",
        }, {
            delivery_settings: "Test string",
            email: "Test string",
            etag: "Test string",
            id: "Test string",
            kind: "Test string",
            role: "Test string",
            status: "Test string",
            type: "Test string",
        });
        /** Updates the membership of a user in the specified group. */
        await gapi.client.admin.members.update({
            groupKey: "Test string",
            memberKey: "Test string",
        }, {
            delivery_settings: "Test string",
            email: "Test string",
            etag: "Test string",
            id: "Test string",
            kind: "Test string",
            role: "Test string",
            status: "Test string",
            type: "Test string",
        });
        /** Takes an action that affects a mobile device. For example, remotely wiping a device. */
        await gapi.client.admin.mobiledevices.action({
            customerId: "Test string",
            resourceId: "Test string",
        }, {
            action: "Test string",
        });
        /** Removes a mobile device. */
        await gapi.client.admin.mobiledevices.delete({
            customerId: "Test string",
            resourceId: "Test string",
        });
        /** Retrieves a mobile device's properties. */
        await gapi.client.admin.mobiledevices.get({
            customerId: "Test string",
            projection: "Test string",
            resourceId: "Test string",
        });
        /**
         * Retrieves a paginated list of all user-owned mobile devices for an account. To retrieve a list that includes company-owned devices, use the Cloud Identity [Devices
         * API](https://cloud.google.com/identity/docs/concepts/overview-devices) instead.
         */
        await gapi.client.admin.mobiledevices.list({
            customerId: "Test string",
            maxResults: 42,
            orderBy: "Test string",
            pageToken: "Test string",
            projection: "Test string",
            query: "Test string",
            sortOrder: "Test string",
        });
        /** Removes an organizational unit. */
        await gapi.client.admin.orgunits.delete({
            customerId: "Test string",
            orgUnitPath: "Test string",
        });
        /** Retrieves an organizational unit. */
        await gapi.client.admin.orgunits.get({
            customerId: "Test string",
            orgUnitPath: "Test string",
        });
        /** Adds an organizational unit. */
        await gapi.client.admin.orgunits.insert({
            customerId: "Test string",
        }, {
            blockInheritance: true,
            description: "Test string",
            etag: "Test string",
            kind: "Test string",
            name: "Test string",
            orgUnitId: "Test string",
            orgUnitPath: "Test string",
            parentOrgUnitId: "Test string",
            parentOrgUnitPath: "Test string",
        });
        /** Retrieves a list of all organizational units for an account. */
        await gapi.client.admin.orgunits.list({
            customerId: "Test string",
            orgUnitPath: "Test string",
            type: "Test string",
        });
        /** Updates an organizational unit. This method supports [patch semantics](/admin-sdk/directory/v1/guides/performance#patch) */
        await gapi.client.admin.orgunits.patch({
            customerId: "Test string",
            orgUnitPath: "Test string",
        }, {
            blockInheritance: true,
            description: "Test string",
            etag: "Test string",
            kind: "Test string",
            name: "Test string",
            orgUnitId: "Test string",
            orgUnitPath: "Test string",
            parentOrgUnitId: "Test string",
            parentOrgUnitPath: "Test string",
        });
        /** Updates an organizational unit. */
        await gapi.client.admin.orgunits.update({
            customerId: "Test string",
            orgUnitPath: "Test string",
        }, {
            blockInheritance: true,
            description: "Test string",
            etag: "Test string",
            kind: "Test string",
            name: "Test string",
            orgUnitId: "Test string",
            orgUnitPath: "Test string",
            parentOrgUnitId: "Test string",
            parentOrgUnitPath: "Test string",
        });
        /** Retrieves a paginated list of all privileges for a customer. */
        await gapi.client.admin.privileges.list({
            customer: "Test string",
        });
        /** Deletes a role assignment. */
        await gapi.client.admin.roleAssignments.delete({
            customer: "Test string",
            roleAssignmentId: "Test string",
        });
        /** Retrieves a role assignment. */
        await gapi.client.admin.roleAssignments.get({
            customer: "Test string",
            roleAssignmentId: "Test string",
        });
        /** Creates a role assignment. */
        await gapi.client.admin.roleAssignments.insert({
            customer: "Test string",
        }, {
            assignedTo: "Test string",
            etag: "Test string",
            kind: "Test string",
            orgUnitId: "Test string",
            roleAssignmentId: "Test string",
            roleId: "Test string",
            scopeType: "Test string",
        });
        /** Retrieves a paginated list of all roleAssignments. */
        await gapi.client.admin.roleAssignments.list({
            customer: "Test string",
            maxResults: 42,
            pageToken: "Test string",
            roleId: "Test string",
            userKey: "Test string",
        });
        /** Deletes a role. */
        await gapi.client.admin.roles.delete({
            customer: "Test string",
            roleId: "Test string",
        });
        /** Retrieves a role. */
        await gapi.client.admin.roles.get({
            customer: "Test string",
            roleId: "Test string",
        });
        /** Creates a role. */
        await gapi.client.admin.roles.insert({
            customer: "Test string",
        }, {
            etag: "Test string",
            isSuperAdminRole: true,
            isSystemRole: true,
            kind: "Test string",
            roleDescription: "Test string",
            roleId: "Test string",
            roleName: "Test string",
            rolePrivileges: [
                {
                    privilegeName: "Test string",
                    serviceId: "Test string",
                }            ],
        });
        /** Retrieves a paginated list of all the roles in a domain. */
        await gapi.client.admin.roles.list({
            customer: "Test string",
            maxResults: 42,
            pageToken: "Test string",
        });
        /** Patches a role. */
        await gapi.client.admin.roles.patch({
            customer: "Test string",
            roleId: "Test string",
        }, {
            etag: "Test string",
            isSuperAdminRole: true,
            isSystemRole: true,
            kind: "Test string",
            roleDescription: "Test string",
            roleId: "Test string",
            roleName: "Test string",
            rolePrivileges: [
                {
                    privilegeName: "Test string",
                    serviceId: "Test string",
                }            ],
        });
        /** Updates a role. */
        await gapi.client.admin.roles.update({
            customer: "Test string",
            roleId: "Test string",
        }, {
            etag: "Test string",
            isSuperAdminRole: true,
            isSystemRole: true,
            kind: "Test string",
            roleDescription: "Test string",
            roleId: "Test string",
            roleName: "Test string",
            rolePrivileges: [
                {
                    privilegeName: "Test string",
                    serviceId: "Test string",
                }            ],
        });
        /** Deletes a schema. */
        await gapi.client.admin.schemas.delete({
            customerId: "Test string",
            schemaKey: "Test string",
        });
        /** Retrieves a schema. */
        await gapi.client.admin.schemas.get({
            customerId: "Test string",
            schemaKey: "Test string",
        });
        /** Creates a schema. */
        await gapi.client.admin.schemas.insert({
            customerId: "Test string",
        }, {
            displayName: "Test string",
            etag: "Test string",
            fields: [
                {
                    displayName: "Test string",
                    etag: "Test string",
                    fieldId: "Test string",
                    fieldName: "Test string",
                    fieldType: "Test string",
                    indexed: true,
                    kind: "Test string",
                    multiValued: true,
                    numericIndexingSpec: {
                        maxValue: 42,
                        minValue: 42,
                    },
                    readAccessType: "Test string",
                }            ],
            kind: "Test string",
            schemaId: "Test string",
            schemaName: "Test string",
        });
        /** Retrieves all schemas for a customer. */
        await gapi.client.admin.schemas.list({
            customerId: "Test string",
        });
        /** Patches a schema. */
        await gapi.client.admin.schemas.patch({
            customerId: "Test string",
            schemaKey: "Test string",
        }, {
            displayName: "Test string",
            etag: "Test string",
            fields: [
                {
                    displayName: "Test string",
                    etag: "Test string",
                    fieldId: "Test string",
                    fieldName: "Test string",
                    fieldType: "Test string",
                    indexed: true,
                    kind: "Test string",
                    multiValued: true,
                    numericIndexingSpec: {
                        maxValue: 42,
                        minValue: 42,
                    },
                    readAccessType: "Test string",
                }            ],
            kind: "Test string",
            schemaId: "Test string",
            schemaName: "Test string",
        });
        /** Updates a schema. */
        await gapi.client.admin.schemas.update({
            customerId: "Test string",
            schemaKey: "Test string",
        }, {
            displayName: "Test string",
            etag: "Test string",
            fields: [
                {
                    displayName: "Test string",
                    etag: "Test string",
                    fieldId: "Test string",
                    fieldName: "Test string",
                    fieldType: "Test string",
                    indexed: true,
                    kind: "Test string",
                    multiValued: true,
                    numericIndexingSpec: {
                        maxValue: 42,
                        minValue: 42,
                    },
                    readAccessType: "Test string",
                }            ],
            kind: "Test string",
            schemaId: "Test string",
            schemaName: "Test string",
        });
        /** Deletes all access tokens issued by a user for an application. */
        await gapi.client.admin.tokens.delete({
            clientId: "Test string",
            userKey: "Test string",
        });
        /** Gets information about an access token issued by a user. */
        await gapi.client.admin.tokens.get({
            clientId: "Test string",
            userKey: "Test string",
        });
        /** Returns the set of tokens specified user has issued to 3rd party applications. */
        await gapi.client.admin.tokens.list({
            userKey: "Test string",
        });
        /** Turns off 2-Step Verification for user. */
        await gapi.client.admin.twoStepVerification.turnOff({
            userKey: "Test string",
        });
        /** Deletes a user. */
        await gapi.client.admin.users.delete({
            userKey: "Test string",
        });
        /** Removes an alias. */
        await gapi.client.admin.users.aliases.delete({
            alias: "Test string",
            userKey: "Test string",
        });
        /** Adds an alias. */
        await gapi.client.admin.users.aliases.insert({
            userKey: "Test string",
        }, {
            alias: "Test string",
            etag: "Test string",
            id: "Test string",
            kind: "Test string",
            primaryEmail: "Test string",
        });
        /** Lists all aliases for a user. */
        await gapi.client.admin.users.aliases.list({
            event: "Test string",
            userKey: "Test string",
        });
        /** Watches for changes in users list. */
        await gapi.client.admin.users.aliases.watch({
            event: "Test string",
            userKey: "Test string",
        }, {
            address: "Test string",
            expiration: "Test string",
            id: "Test string",
            kind: "Test string",
            params: {
                A: "Test string"            },
            payload: true,
            resourceId: "Test string",
            resourceUri: "Test string",
            token: "Test string",
            type: "Test string",
        });
        /** Removes the user's photo. */
        await gapi.client.admin.users.photos.delete({
            userKey: "Test string",
        });
        /** Retrieves the user's photo. */
        await gapi.client.admin.users.photos.get({
            userKey: "Test string",
        });
        /** Adds a photo for the user. This method supports [patch semantics](/admin-sdk/directory/v1/guides/performance#patch). */
        await gapi.client.admin.users.photos.patch({
            userKey: "Test string",
        }, {
            etag: "Test string",
            height: 42,
            id: "Test string",
            kind: "Test string",
            mimeType: "Test string",
            photoData: "Test string",
            primaryEmail: "Test string",
            width: 42,
        });
        /** Adds a photo for the user. */
        await gapi.client.admin.users.photos.update({
            userKey: "Test string",
        }, {
            etag: "Test string",
            height: 42,
            id: "Test string",
            kind: "Test string",
            mimeType: "Test string",
            photoData: "Test string",
            primaryEmail: "Test string",
            width: 42,
        });
        /** Retrieves a user. */
        await gapi.client.admin.users.get({
            customFieldMask: "Test string",
            projection: "Test string",
            userKey: "Test string",
            viewType: "Test string",
        });
        /** Removes an alias. */
        await gapi.client.admin.users.aliases.delete({
            alias: "Test string",
            userKey: "Test string",
        });
        /** Adds an alias. */
        await gapi.client.admin.users.aliases.insert({
            userKey: "Test string",
        }, {
            alias: "Test string",
            etag: "Test string",
            id: "Test string",
            kind: "Test string",
            primaryEmail: "Test string",
        });
        /** Lists all aliases for a user. */
        await gapi.client.admin.users.aliases.list({
            event: "Test string",
            userKey: "Test string",
        });
        /** Watches for changes in users list. */
        await gapi.client.admin.users.aliases.watch({
            event: "Test string",
            userKey: "Test string",
        }, {
            address: "Test string",
            expiration: "Test string",
            id: "Test string",
            kind: "Test string",
            params: {
                A: "Test string"            },
            payload: true,
            resourceId: "Test string",
            resourceUri: "Test string",
            token: "Test string",
            type: "Test string",
        });
        /** Removes the user's photo. */
        await gapi.client.admin.users.photos.delete({
            userKey: "Test string",
        });
        /** Retrieves the user's photo. */
        await gapi.client.admin.users.photos.get({
            userKey: "Test string",
        });
        /** Adds a photo for the user. This method supports [patch semantics](/admin-sdk/directory/v1/guides/performance#patch). */
        await gapi.client.admin.users.photos.patch({
            userKey: "Test string",
        }, {
            etag: "Test string",
            height: 42,
            id: "Test string",
            kind: "Test string",
            mimeType: "Test string",
            photoData: "Test string",
            primaryEmail: "Test string",
            width: 42,
        });
        /** Adds a photo for the user. */
        await gapi.client.admin.users.photos.update({
            userKey: "Test string",
        }, {
            etag: "Test string",
            height: 42,
            id: "Test string",
            kind: "Test string",
            mimeType: "Test string",
            photoData: "Test string",
            primaryEmail: "Test string",
            width: 42,
        });
        /** Creates a user. */
        await gapi.client.admin.users.insert({
        }, {
            addresses: 42,
            agreedToTerms: true,
            aliases: [
                "Test string"            ],
            archived: true,
            changePasswordAtNextLogin: true,
            creationTime: "Test string",
            customerId: "Test string",
            customSchemas: {
                A: {
                    A: 42                }            },
            deletionTime: "Test string",
            emails: 42,
            etag: "Test string",
            externalIds: 42,
            gender: 42,
            hashFunction: "Test string",
            id: "Test string",
            ims: 42,
            includeInGlobalAddressList: true,
            ipWhitelisted: true,
            isAdmin: true,
            isDelegatedAdmin: true,
            isEnforcedIn2Sv: true,
            isEnrolledIn2Sv: true,
            isMailboxSetup: true,
            keywords: 42,
            kind: "Test string",
            languages: 42,
            lastLoginTime: "Test string",
            locations: 42,
            name: {
                familyName: "Test string",
                fullName: "Test string",
                givenName: "Test string",
            },
            nonEditableAliases: [
                "Test string"            ],
            notes: 42,
            organizations: 42,
            orgUnitPath: "Test string",
            password: "Test string",
            phones: 42,
            posixAccounts: 42,
            primaryEmail: "Test string",
            recoveryEmail: "Test string",
            recoveryPhone: "Test string",
            relations: 42,
            sshPublicKeys: 42,
            suspended: true,
            suspensionReason: "Test string",
            thumbnailPhotoEtag: "Test string",
            thumbnailPhotoUrl: "Test string",
            websites: 42,
        });
        /** Removes an alias. */
        await gapi.client.admin.users.aliases.delete({
            alias: "Test string",
            userKey: "Test string",
        });
        /** Adds an alias. */
        await gapi.client.admin.users.aliases.insert({
            userKey: "Test string",
        }, {
            alias: "Test string",
            etag: "Test string",
            id: "Test string",
            kind: "Test string",
            primaryEmail: "Test string",
        });
        /** Lists all aliases for a user. */
        await gapi.client.admin.users.aliases.list({
            event: "Test string",
            userKey: "Test string",
        });
        /** Watches for changes in users list. */
        await gapi.client.admin.users.aliases.watch({
            event: "Test string",
            userKey: "Test string",
        }, {
            address: "Test string",
            expiration: "Test string",
            id: "Test string",
            kind: "Test string",
            params: {
                A: "Test string"            },
            payload: true,
            resourceId: "Test string",
            resourceUri: "Test string",
            token: "Test string",
            type: "Test string",
        });
        /** Removes the user's photo. */
        await gapi.client.admin.users.photos.delete({
            userKey: "Test string",
        });
        /** Retrieves the user's photo. */
        await gapi.client.admin.users.photos.get({
            userKey: "Test string",
        });
        /** Adds a photo for the user. This method supports [patch semantics](/admin-sdk/directory/v1/guides/performance#patch). */
        await gapi.client.admin.users.photos.patch({
            userKey: "Test string",
        }, {
            etag: "Test string",
            height: 42,
            id: "Test string",
            kind: "Test string",
            mimeType: "Test string",
            photoData: "Test string",
            primaryEmail: "Test string",
            width: 42,
        });
        /** Adds a photo for the user. */
        await gapi.client.admin.users.photos.update({
            userKey: "Test string",
        }, {
            etag: "Test string",
            height: 42,
            id: "Test string",
            kind: "Test string",
            mimeType: "Test string",
            photoData: "Test string",
            primaryEmail: "Test string",
            width: 42,
        });
        /** Retrieves a paginated list of either deleted users or all users in a domain. */
        await gapi.client.admin.users.list({
            customer: "Test string",
            customFieldMask: "Test string",
            domain: "Test string",
            event: "Test string",
            maxResults: 42,
            orderBy: "Test string",
            pageToken: "Test string",
            projection: "Test string",
            query: "Test string",
            showDeleted: "Test string",
            sortOrder: "Test string",
            viewType: "Test string",
        });
        /** Removes an alias. */
        await gapi.client.admin.users.aliases.delete({
            alias: "Test string",
            userKey: "Test string",
        });
        /** Adds an alias. */
        await gapi.client.admin.users.aliases.insert({
            userKey: "Test string",
        }, {
            alias: "Test string",
            etag: "Test string",
            id: "Test string",
            kind: "Test string",
            primaryEmail: "Test string",
        });
        /** Lists all aliases for a user. */
        await gapi.client.admin.users.aliases.list({
            event: "Test string",
            userKey: "Test string",
        });
        /** Watches for changes in users list. */
        await gapi.client.admin.users.aliases.watch({
            event: "Test string",
            userKey: "Test string",
        }, {
            address: "Test string",
            expiration: "Test string",
            id: "Test string",
            kind: "Test string",
            params: {
                A: "Test string"            },
            payload: true,
            resourceId: "Test string",
            resourceUri: "Test string",
            token: "Test string",
            type: "Test string",
        });
        /** Removes the user's photo. */
        await gapi.client.admin.users.photos.delete({
            userKey: "Test string",
        });
        /** Retrieves the user's photo. */
        await gapi.client.admin.users.photos.get({
            userKey: "Test string",
        });
        /** Adds a photo for the user. This method supports [patch semantics](/admin-sdk/directory/v1/guides/performance#patch). */
        await gapi.client.admin.users.photos.patch({
            userKey: "Test string",
        }, {
            etag: "Test string",
            height: 42,
            id: "Test string",
            kind: "Test string",
            mimeType: "Test string",
            photoData: "Test string",
            primaryEmail: "Test string",
            width: 42,
        });
        /** Adds a photo for the user. */
        await gapi.client.admin.users.photos.update({
            userKey: "Test string",
        }, {
            etag: "Test string",
            height: 42,
            id: "Test string",
            kind: "Test string",
            mimeType: "Test string",
            photoData: "Test string",
            primaryEmail: "Test string",
            width: 42,
        });
        /** Makes a user a super administrator. */
        await gapi.client.admin.users.makeAdmin({
            userKey: "Test string",
        }, {
            status: true,
        });
        /** Removes an alias. */
        await gapi.client.admin.users.aliases.delete({
            alias: "Test string",
            userKey: "Test string",
        });
        /** Adds an alias. */
        await gapi.client.admin.users.aliases.insert({
            userKey: "Test string",
        }, {
            alias: "Test string",
            etag: "Test string",
            id: "Test string",
            kind: "Test string",
            primaryEmail: "Test string",
        });
        /** Lists all aliases for a user. */
        await gapi.client.admin.users.aliases.list({
            event: "Test string",
            userKey: "Test string",
        });
        /** Watches for changes in users list. */
        await gapi.client.admin.users.aliases.watch({
            event: "Test string",
            userKey: "Test string",
        }, {
            address: "Test string",
            expiration: "Test string",
            id: "Test string",
            kind: "Test string",
            params: {
                A: "Test string"            },
            payload: true,
            resourceId: "Test string",
            resourceUri: "Test string",
            token: "Test string",
            type: "Test string",
        });
        /** Removes the user's photo. */
        await gapi.client.admin.users.photos.delete({
            userKey: "Test string",
        });
        /** Retrieves the user's photo. */
        await gapi.client.admin.users.photos.get({
            userKey: "Test string",
        });
        /** Adds a photo for the user. This method supports [patch semantics](/admin-sdk/directory/v1/guides/performance#patch). */
        await gapi.client.admin.users.photos.patch({
            userKey: "Test string",
        }, {
            etag: "Test string",
            height: 42,
            id: "Test string",
            kind: "Test string",
            mimeType: "Test string",
            photoData: "Test string",
            primaryEmail: "Test string",
            width: 42,
        });
        /** Adds a photo for the user. */
        await gapi.client.admin.users.photos.update({
            userKey: "Test string",
        }, {
            etag: "Test string",
            height: 42,
            id: "Test string",
            kind: "Test string",
            mimeType: "Test string",
            photoData: "Test string",
            primaryEmail: "Test string",
            width: 42,
        });
        /**
         * Updates a user using patch semantics. The update method should be used instead, since it also supports patch semantics and has better performance. This method is unable to clear fields
         * that contain repeated objects (`addresses`, `phones`, etc). Use the update method instead.
         */
        await gapi.client.admin.users.patch({
            userKey: "Test string",
        }, {
            addresses: 42,
            agreedToTerms: true,
            aliases: [
                "Test string"            ],
            archived: true,
            changePasswordAtNextLogin: true,
            creationTime: "Test string",
            customerId: "Test string",
            customSchemas: {
                A: {
                    A: 42                }            },
            deletionTime: "Test string",
            emails: 42,
            etag: "Test string",
            externalIds: 42,
            gender: 42,
            hashFunction: "Test string",
            id: "Test string",
            ims: 42,
            includeInGlobalAddressList: true,
            ipWhitelisted: true,
            isAdmin: true,
            isDelegatedAdmin: true,
            isEnforcedIn2Sv: true,
            isEnrolledIn2Sv: true,
            isMailboxSetup: true,
            keywords: 42,
            kind: "Test string",
            languages: 42,
            lastLoginTime: "Test string",
            locations: 42,
            name: {
                familyName: "Test string",
                fullName: "Test string",
                givenName: "Test string",
            },
            nonEditableAliases: [
                "Test string"            ],
            notes: 42,
            organizations: 42,
            orgUnitPath: "Test string",
            password: "Test string",
            phones: 42,
            posixAccounts: 42,
            primaryEmail: "Test string",
            recoveryEmail: "Test string",
            recoveryPhone: "Test string",
            relations: 42,
            sshPublicKeys: 42,
            suspended: true,
            suspensionReason: "Test string",
            thumbnailPhotoEtag: "Test string",
            thumbnailPhotoUrl: "Test string",
            websites: 42,
        });
        /** Removes an alias. */
        await gapi.client.admin.users.aliases.delete({
            alias: "Test string",
            userKey: "Test string",
        });
        /** Adds an alias. */
        await gapi.client.admin.users.aliases.insert({
            userKey: "Test string",
        }, {
            alias: "Test string",
            etag: "Test string",
            id: "Test string",
            kind: "Test string",
            primaryEmail: "Test string",
        });
        /** Lists all aliases for a user. */
        await gapi.client.admin.users.aliases.list({
            event: "Test string",
            userKey: "Test string",
        });
        /** Watches for changes in users list. */
        await gapi.client.admin.users.aliases.watch({
            event: "Test string",
            userKey: "Test string",
        }, {
            address: "Test string",
            expiration: "Test string",
            id: "Test string",
            kind: "Test string",
            params: {
                A: "Test string"            },
            payload: true,
            resourceId: "Test string",
            resourceUri: "Test string",
            token: "Test string",
            type: "Test string",
        });
        /** Removes the user's photo. */
        await gapi.client.admin.users.photos.delete({
            userKey: "Test string",
        });
        /** Retrieves the user's photo. */
        await gapi.client.admin.users.photos.get({
            userKey: "Test string",
        });
        /** Adds a photo for the user. This method supports [patch semantics](/admin-sdk/directory/v1/guides/performance#patch). */
        await gapi.client.admin.users.photos.patch({
            userKey: "Test string",
        }, {
            etag: "Test string",
            height: 42,
            id: "Test string",
            kind: "Test string",
            mimeType: "Test string",
            photoData: "Test string",
            primaryEmail: "Test string",
            width: 42,
        });
        /** Adds a photo for the user. */
        await gapi.client.admin.users.photos.update({
            userKey: "Test string",
        }, {
            etag: "Test string",
            height: 42,
            id: "Test string",
            kind: "Test string",
            mimeType: "Test string",
            photoData: "Test string",
            primaryEmail: "Test string",
            width: 42,
        });
        /** Signs a user out of all web and device sessions and reset their sign-in cookies. User will have to sign in by authenticating again. */
        await gapi.client.admin.users.signOut({
            userKey: "Test string",
        });
        /** Removes an alias. */
        await gapi.client.admin.users.aliases.delete({
            alias: "Test string",
            userKey: "Test string",
        });
        /** Adds an alias. */
        await gapi.client.admin.users.aliases.insert({
            userKey: "Test string",
        }, {
            alias: "Test string",
            etag: "Test string",
            id: "Test string",
            kind: "Test string",
            primaryEmail: "Test string",
        });
        /** Lists all aliases for a user. */
        await gapi.client.admin.users.aliases.list({
            event: "Test string",
            userKey: "Test string",
        });
        /** Watches for changes in users list. */
        await gapi.client.admin.users.aliases.watch({
            event: "Test string",
            userKey: "Test string",
        }, {
            address: "Test string",
            expiration: "Test string",
            id: "Test string",
            kind: "Test string",
            params: {
                A: "Test string"            },
            payload: true,
            resourceId: "Test string",
            resourceUri: "Test string",
            token: "Test string",
            type: "Test string",
        });
        /** Removes the user's photo. */
        await gapi.client.admin.users.photos.delete({
            userKey: "Test string",
        });
        /** Retrieves the user's photo. */
        await gapi.client.admin.users.photos.get({
            userKey: "Test string",
        });
        /** Adds a photo for the user. This method supports [patch semantics](/admin-sdk/directory/v1/guides/performance#patch). */
        await gapi.client.admin.users.photos.patch({
            userKey: "Test string",
        }, {
            etag: "Test string",
            height: 42,
            id: "Test string",
            kind: "Test string",
            mimeType: "Test string",
            photoData: "Test string",
            primaryEmail: "Test string",
            width: 42,
        });
        /** Adds a photo for the user. */
        await gapi.client.admin.users.photos.update({
            userKey: "Test string",
        }, {
            etag: "Test string",
            height: 42,
            id: "Test string",
            kind: "Test string",
            mimeType: "Test string",
            photoData: "Test string",
            primaryEmail: "Test string",
            width: 42,
        });
        /** Undeletes a deleted user. */
        await gapi.client.admin.users.undelete({
            userKey: "Test string",
        }, {
            orgUnitPath: "Test string",
        });
        /** Removes an alias. */
        await gapi.client.admin.users.aliases.delete({
            alias: "Test string",
            userKey: "Test string",
        });
        /** Adds an alias. */
        await gapi.client.admin.users.aliases.insert({
            userKey: "Test string",
        }, {
            alias: "Test string",
            etag: "Test string",
            id: "Test string",
            kind: "Test string",
            primaryEmail: "Test string",
        });
        /** Lists all aliases for a user. */
        await gapi.client.admin.users.aliases.list({
            event: "Test string",
            userKey: "Test string",
        });
        /** Watches for changes in users list. */
        await gapi.client.admin.users.aliases.watch({
            event: "Test string",
            userKey: "Test string",
        }, {
            address: "Test string",
            expiration: "Test string",
            id: "Test string",
            kind: "Test string",
            params: {
                A: "Test string"            },
            payload: true,
            resourceId: "Test string",
            resourceUri: "Test string",
            token: "Test string",
            type: "Test string",
        });
        /** Removes the user's photo. */
        await gapi.client.admin.users.photos.delete({
            userKey: "Test string",
        });
        /** Retrieves the user's photo. */
        await gapi.client.admin.users.photos.get({
            userKey: "Test string",
        });
        /** Adds a photo for the user. This method supports [patch semantics](/admin-sdk/directory/v1/guides/performance#patch). */
        await gapi.client.admin.users.photos.patch({
            userKey: "Test string",
        }, {
            etag: "Test string",
            height: 42,
            id: "Test string",
            kind: "Test string",
            mimeType: "Test string",
            photoData: "Test string",
            primaryEmail: "Test string",
            width: 42,
        });
        /** Adds a photo for the user. */
        await gapi.client.admin.users.photos.update({
            userKey: "Test string",
        }, {
            etag: "Test string",
            height: 42,
            id: "Test string",
            kind: "Test string",
            mimeType: "Test string",
            photoData: "Test string",
            primaryEmail: "Test string",
            width: 42,
        });
        /**
         * Updates a user. This method supports patch semantics, meaning you only need to include the fields you wish to update. Fields that are not present in the request will be preserved, and
         * fields set to `null` will be cleared.
         */
        await gapi.client.admin.users.update({
            userKey: "Test string",
        }, {
            addresses: 42,
            agreedToTerms: true,
            aliases: [
                "Test string"            ],
            archived: true,
            changePasswordAtNextLogin: true,
            creationTime: "Test string",
            customerId: "Test string",
            customSchemas: {
                A: {
                    A: 42                }            },
            deletionTime: "Test string",
            emails: 42,
            etag: "Test string",
            externalIds: 42,
            gender: 42,
            hashFunction: "Test string",
            id: "Test string",
            ims: 42,
            includeInGlobalAddressList: true,
            ipWhitelisted: true,
            isAdmin: true,
            isDelegatedAdmin: true,
            isEnforcedIn2Sv: true,
            isEnrolledIn2Sv: true,
            isMailboxSetup: true,
            keywords: 42,
            kind: "Test string",
            languages: 42,
            lastLoginTime: "Test string",
            locations: 42,
            name: {
                familyName: "Test string",
                fullName: "Test string",
                givenName: "Test string",
            },
            nonEditableAliases: [
                "Test string"            ],
            notes: 42,
            organizations: 42,
            orgUnitPath: "Test string",
            password: "Test string",
            phones: 42,
            posixAccounts: 42,
            primaryEmail: "Test string",
            recoveryEmail: "Test string",
            recoveryPhone: "Test string",
            relations: 42,
            sshPublicKeys: 42,
            suspended: true,
            suspensionReason: "Test string",
            thumbnailPhotoEtag: "Test string",
            thumbnailPhotoUrl: "Test string",
            websites: 42,
        });
        /** Removes an alias. */
        await gapi.client.admin.users.aliases.delete({
            alias: "Test string",
            userKey: "Test string",
        });
        /** Adds an alias. */
        await gapi.client.admin.users.aliases.insert({
            userKey: "Test string",
        }, {
            alias: "Test string",
            etag: "Test string",
            id: "Test string",
            kind: "Test string",
            primaryEmail: "Test string",
        });
        /** Lists all aliases for a user. */
        await gapi.client.admin.users.aliases.list({
            event: "Test string",
            userKey: "Test string",
        });
        /** Watches for changes in users list. */
        await gapi.client.admin.users.aliases.watch({
            event: "Test string",
            userKey: "Test string",
        }, {
            address: "Test string",
            expiration: "Test string",
            id: "Test string",
            kind: "Test string",
            params: {
                A: "Test string"            },
            payload: true,
            resourceId: "Test string",
            resourceUri: "Test string",
            token: "Test string",
            type: "Test string",
        });
        /** Removes the user's photo. */
        await gapi.client.admin.users.photos.delete({
            userKey: "Test string",
        });
        /** Retrieves the user's photo. */
        await gapi.client.admin.users.photos.get({
            userKey: "Test string",
        });
        /** Adds a photo for the user. This method supports [patch semantics](/admin-sdk/directory/v1/guides/performance#patch). */
        await gapi.client.admin.users.photos.patch({
            userKey: "Test string",
        }, {
            etag: "Test string",
            height: 42,
            id: "Test string",
            kind: "Test string",
            mimeType: "Test string",
            photoData: "Test string",
            primaryEmail: "Test string",
            width: 42,
        });
        /** Adds a photo for the user. */
        await gapi.client.admin.users.photos.update({
            userKey: "Test string",
        }, {
            etag: "Test string",
            height: 42,
            id: "Test string",
            kind: "Test string",
            mimeType: "Test string",
            photoData: "Test string",
            primaryEmail: "Test string",
            width: 42,
        });
        /** Watches for changes in users list. */
        await gapi.client.admin.users.watch({
            customer: "Test string",
            customFieldMask: "Test string",
            domain: "Test string",
            event: "Test string",
            maxResults: 42,
            orderBy: "Test string",
            pageToken: "Test string",
            projection: "Test string",
            query: "Test string",
            showDeleted: "Test string",
            sortOrder: "Test string",
            viewType: "Test string",
        }, {
            address: "Test string",
            expiration: "Test string",
            id: "Test string",
            kind: "Test string",
            params: {
                A: "Test string"            },
            payload: true,
            resourceId: "Test string",
            resourceUri: "Test string",
            token: "Test string",
            type: "Test string",
        });
        /** Removes an alias. */
        await gapi.client.admin.users.aliases.delete({
            alias: "Test string",
            userKey: "Test string",
        });
        /** Adds an alias. */
        await gapi.client.admin.users.aliases.insert({
            userKey: "Test string",
        }, {
            alias: "Test string",
            etag: "Test string",
            id: "Test string",
            kind: "Test string",
            primaryEmail: "Test string",
        });
        /** Lists all aliases for a user. */
        await gapi.client.admin.users.aliases.list({
            event: "Test string",
            userKey: "Test string",
        });
        /** Watches for changes in users list. */
        await gapi.client.admin.users.aliases.watch({
            event: "Test string",
            userKey: "Test string",
        }, {
            address: "Test string",
            expiration: "Test string",
            id: "Test string",
            kind: "Test string",
            params: {
                A: "Test string"            },
            payload: true,
            resourceId: "Test string",
            resourceUri: "Test string",
            token: "Test string",
            type: "Test string",
        });
        /** Removes the user's photo. */
        await gapi.client.admin.users.photos.delete({
            userKey: "Test string",
        });
        /** Retrieves the user's photo. */
        await gapi.client.admin.users.photos.get({
            userKey: "Test string",
        });
        /** Adds a photo for the user. This method supports [patch semantics](/admin-sdk/directory/v1/guides/performance#patch). */
        await gapi.client.admin.users.photos.patch({
            userKey: "Test string",
        }, {
            etag: "Test string",
            height: 42,
            id: "Test string",
            kind: "Test string",
            mimeType: "Test string",
            photoData: "Test string",
            primaryEmail: "Test string",
            width: 42,
        });
        /** Adds a photo for the user. */
        await gapi.client.admin.users.photos.update({
            userKey: "Test string",
        }, {
            etag: "Test string",
            height: 42,
            id: "Test string",
            kind: "Test string",
            mimeType: "Test string",
            photoData: "Test string",
            primaryEmail: "Test string",
            width: 42,
        });
        /** Generates new backup verification codes for the user. */
        await gapi.client.admin.verificationCodes.generate({
            userKey: "Test string",
        });
        /** Invalidates the current backup verification codes for the user. */
        await gapi.client.admin.verificationCodes.invalidate({
            userKey: "Test string",
        });
        /** Returns the current set of valid backup verification codes for the specified user. */
        await gapi.client.admin.verificationCodes.list({
            userKey: "Test string",
        });
    }
});
