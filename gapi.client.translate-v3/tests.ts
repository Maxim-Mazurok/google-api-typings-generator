/* This is stub file for gapi.client.translate-v3 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20241218

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://translation.googleapis.com/$discovery/rest?version=v3'
  );
  /** now we can use gapi.client.translate */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
    'https://www.googleapis.com/auth/cloud-platform',
    /** Translate text from one language to another using Google Translate */
    'https://www.googleapis.com/auth/cloud-translation',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Detects the language of text within a request. */
    await gapi.client.translate.projects.detectLanguage(
      {
        parent: 'Test string',
      },
      {
        content: 'Test string',
        labels: {
          A: 'Test string',
        },
        mimeType: 'Test string',
        model: 'Test string',
      }
    );
    /** Returns a list of supported languages for translation. */
    await gapi.client.translate.projects.getSupportedLanguages({
      displayLanguageCode: 'Test string',
      model: 'Test string',
      parent: 'Test string',
    });
    /** Romanize input text written in non-Latin scripts to Latin text. */
    await gapi.client.translate.projects.romanizeText(
      {
        parent: 'Test string',
      },
      {
        contents: ['Test string'],
        sourceLanguageCode: 'Test string',
      }
    );
    /** Translates input text and returns translated text. */
    await gapi.client.translate.projects.translateText(
      {
        parent: 'Test string',
      },
      {
        contents: ['Test string'],
        glossaryConfig: {
          contextualTranslationEnabled: true,
          glossary: 'Test string',
          ignoreCase: true,
        },
        labels: {
          A: 'Test string',
        },
        mimeType: 'Test string',
        model: 'Test string',
        sourceLanguageCode: 'Test string',
        targetLanguageCode: 'Test string',
        transliterationConfig: {
          enableTransliteration: true,
        },
      }
    );
    /** Translate text using Adaptive MT. */
    await gapi.client.translate.projects.locations.adaptiveMtTranslate(
      {
        parent: 'Test string',
      },
      {
        content: ['Test string'],
        dataset: 'Test string',
        glossaryConfig: {
          contextualTranslationEnabled: true,
          glossary: 'Test string',
          ignoreCase: true,
        },
        referenceSentenceConfig: {
          referenceSentencePairLists: [
            {
              referenceSentencePairs: [
                {
                  sourceSentence: 'Test string',
                  targetSentence: 'Test string',
                },
              ],
            },
          ],
          sourceLanguageCode: 'Test string',
          targetLanguageCode: 'Test string',
        },
      }
    );
    /** Translates a large volume of document in asynchronous batch mode. This function provides real-time output as the inputs are being processed. If caller cancels a request, the partial results (for an input file, it's all or nothing) may still be available on the specified output location. This call returns immediately and you can use google.longrunning.Operation.name to poll the status of the call. */
    await gapi.client.translate.projects.locations.batchTranslateDocument(
      {
        parent: 'Test string',
      },
      {
        customizedAttribution: 'Test string',
        enableRotationCorrection: true,
        enableShadowRemovalNativePdf: true,
        formatConversions: {
          A: 'Test string',
        },
        glossaries: {
          A: {
            contextualTranslationEnabled: true,
            glossary: 'Test string',
            ignoreCase: true,
          },
        },
        inputConfigs: [
          {
            gcsSource: {
              inputUri: 'Test string',
            },
          },
        ],
        models: {
          A: 'Test string',
        },
        outputConfig: {
          gcsDestination: {
            outputUriPrefix: 'Test string',
          },
        },
        sourceLanguageCode: 'Test string',
        targetLanguageCodes: ['Test string'],
      }
    );
    /** Translates a large volume of text in asynchronous batch mode. This function provides real-time output as the inputs are being processed. If caller cancels a request, the partial results (for an input file, it's all or nothing) may still be available on the specified output location. This call returns immediately and you can use google.longrunning.Operation.name to poll the status of the call. */
    await gapi.client.translate.projects.locations.batchTranslateText(
      {
        parent: 'Test string',
      },
      {
        glossaries: {
          A: {
            contextualTranslationEnabled: true,
            glossary: 'Test string',
            ignoreCase: true,
          },
        },
        inputConfigs: [
          {
            gcsSource: {
              inputUri: 'Test string',
            },
            mimeType: 'Test string',
          },
        ],
        labels: {
          A: 'Test string',
        },
        models: {
          A: 'Test string',
        },
        outputConfig: {
          gcsDestination: {
            outputUriPrefix: 'Test string',
          },
        },
        sourceLanguageCode: 'Test string',
        targetLanguageCodes: ['Test string'],
      }
    );
    /** Detects the language of text within a request. */
    await gapi.client.translate.projects.locations.detectLanguage(
      {
        parent: 'Test string',
      },
      {
        content: 'Test string',
        labels: {
          A: 'Test string',
        },
        mimeType: 'Test string',
        model: 'Test string',
      }
    );
    /** Gets information about a location. */
    await gapi.client.translate.projects.locations.get({
      name: 'Test string',
    });
    /** Returns a list of supported languages for translation. */
    await gapi.client.translate.projects.locations.getSupportedLanguages({
      displayLanguageCode: 'Test string',
      model: 'Test string',
      parent: 'Test string',
    });
    /** Lists information about the supported locations for this service. */
    await gapi.client.translate.projects.locations.list({
      filter: 'Test string',
      name: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Romanize input text written in non-Latin scripts to Latin text. */
    await gapi.client.translate.projects.locations.romanizeText(
      {
        parent: 'Test string',
      },
      {
        contents: ['Test string'],
        sourceLanguageCode: 'Test string',
      }
    );
    /** Translates documents in synchronous mode. */
    await gapi.client.translate.projects.locations.translateDocument(
      {
        parent: 'Test string',
      },
      {
        customizedAttribution: 'Test string',
        documentInputConfig: {
          content: 'Test string',
          gcsSource: {
            inputUri: 'Test string',
          },
          mimeType: 'Test string',
        },
        documentOutputConfig: {
          gcsDestination: {
            outputUriPrefix: 'Test string',
          },
          mimeType: 'Test string',
        },
        enableRotationCorrection: true,
        enableShadowRemovalNativePdf: true,
        glossaryConfig: {
          contextualTranslationEnabled: true,
          glossary: 'Test string',
          ignoreCase: true,
        },
        isTranslateNativePdfOnly: true,
        labels: {
          A: 'Test string',
        },
        model: 'Test string',
        sourceLanguageCode: 'Test string',
        targetLanguageCode: 'Test string',
      }
    );
    /** Translates input text and returns translated text. */
    await gapi.client.translate.projects.locations.translateText(
      {
        parent: 'Test string',
      },
      {
        contents: ['Test string'],
        glossaryConfig: {
          contextualTranslationEnabled: true,
          glossary: 'Test string',
          ignoreCase: true,
        },
        labels: {
          A: 'Test string',
        },
        mimeType: 'Test string',
        model: 'Test string',
        sourceLanguageCode: 'Test string',
        targetLanguageCode: 'Test string',
        transliterationConfig: {
          enableTransliteration: true,
        },
      }
    );
    /** Creates an Adaptive MT dataset. */
    await gapi.client.translate.projects.locations.adaptiveMtDatasets.create(
      {
        parent: 'Test string',
      },
      {
        createTime: 'Test string',
        displayName: 'Test string',
        exampleCount: 42,
        name: 'Test string',
        sourceLanguageCode: 'Test string',
        targetLanguageCode: 'Test string',
        updateTime: 'Test string',
      }
    );
    /** Deletes an Adaptive MT dataset, including all its entries and associated metadata. */
    await gapi.client.translate.projects.locations.adaptiveMtDatasets.delete({
      name: 'Test string',
    });
    /** Gets the Adaptive MT dataset. */
    await gapi.client.translate.projects.locations.adaptiveMtDatasets.get({
      name: 'Test string',
    });
    /** Imports an AdaptiveMtFile and adds all of its sentences into the AdaptiveMtDataset. */
    await gapi.client.translate.projects.locations.adaptiveMtDatasets.importAdaptiveMtFile(
      {
        parent: 'Test string',
      },
      {
        fileInputSource: {
          content: 'Test string',
          displayName: 'Test string',
          mimeType: 'Test string',
        },
        gcsInputSource: {
          inputUri: 'Test string',
        },
      }
    );
    /** Lists all Adaptive MT datasets for which the caller has read permission. */
    await gapi.client.translate.projects.locations.adaptiveMtDatasets.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Deletes an AdaptiveMtFile along with its sentences. */
    await gapi.client.translate.projects.locations.adaptiveMtDatasets.adaptiveMtFiles.delete(
      {
        name: 'Test string',
      }
    );
    /** Gets and AdaptiveMtFile */
    await gapi.client.translate.projects.locations.adaptiveMtDatasets.adaptiveMtFiles.get(
      {
        name: 'Test string',
      }
    );
    /** Lists all AdaptiveMtFiles associated to an AdaptiveMtDataset. */
    await gapi.client.translate.projects.locations.adaptiveMtDatasets.adaptiveMtFiles.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Lists all AdaptiveMtSentences under a given file/dataset. */
    await gapi.client.translate.projects.locations.adaptiveMtDatasets.adaptiveMtFiles.adaptiveMtSentences.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Lists all AdaptiveMtSentences under a given file/dataset. */
    await gapi.client.translate.projects.locations.adaptiveMtDatasets.adaptiveMtSentences.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Creates a Dataset. */
    await gapi.client.translate.projects.locations.datasets.create(
      {
        parent: 'Test string',
      },
      {
        createTime: 'Test string',
        displayName: 'Test string',
        exampleCount: 42,
        name: 'Test string',
        sourceLanguageCode: 'Test string',
        targetLanguageCode: 'Test string',
        testExampleCount: 42,
        trainExampleCount: 42,
        updateTime: 'Test string',
        validateExampleCount: 42,
      }
    );
    /** Deletes a dataset and all of its contents. */
    await gapi.client.translate.projects.locations.datasets.delete({
      name: 'Test string',
    });
    /** Exports dataset's data to the provided output location. */
    await gapi.client.translate.projects.locations.datasets.exportData(
      {
        dataset: 'Test string',
      },
      {
        outputConfig: {
          gcsDestination: {
            outputUriPrefix: 'Test string',
          },
        },
      }
    );
    /** Gets a Dataset. */
    await gapi.client.translate.projects.locations.datasets.get({
      name: 'Test string',
    });
    /** Import sentence pairs into translation Dataset. */
    await gapi.client.translate.projects.locations.datasets.importData(
      {
        dataset: 'Test string',
      },
      {
        inputConfig: {
          inputFiles: [
            {
              gcsSource: {
                inputUri: 'Test string',
              },
              usage: 'Test string',
            },
          ],
        },
      }
    );
    /** Lists datasets. */
    await gapi.client.translate.projects.locations.datasets.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Lists sentence pairs in the dataset. */
    await gapi.client.translate.projects.locations.datasets.examples.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Creates a glossary and returns the long-running operation. Returns NOT_FOUND, if the project doesn't exist. */
    await gapi.client.translate.projects.locations.glossaries.create(
      {
        parent: 'Test string',
      },
      {
        displayName: 'Test string',
        endTime: 'Test string',
        entryCount: 42,
        inputConfig: {
          gcsSource: {
            inputUri: 'Test string',
          },
        },
        languageCodesSet: {
          languageCodes: ['Test string'],
        },
        languagePair: {
          sourceLanguageCode: 'Test string',
          targetLanguageCode: 'Test string',
        },
        name: 'Test string',
        submitTime: 'Test string',
      }
    );
    /** Deletes a glossary, or cancels glossary construction if the glossary isn't created yet. Returns NOT_FOUND, if the glossary doesn't exist. */
    await gapi.client.translate.projects.locations.glossaries.delete({
      name: 'Test string',
    });
    /** Gets a glossary. Returns NOT_FOUND, if the glossary doesn't exist. */
    await gapi.client.translate.projects.locations.glossaries.get({
      name: 'Test string',
    });
    /** Lists glossaries in a project. Returns NOT_FOUND, if the project doesn't exist. */
    await gapi.client.translate.projects.locations.glossaries.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates a glossary. A LRO is used since the update can be async if the glossary's entry file is updated. */
    await gapi.client.translate.projects.locations.glossaries.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        displayName: 'Test string',
        endTime: 'Test string',
        entryCount: 42,
        inputConfig: {
          gcsSource: {
            inputUri: 'Test string',
          },
        },
        languageCodesSet: {
          languageCodes: ['Test string'],
        },
        languagePair: {
          sourceLanguageCode: 'Test string',
          targetLanguageCode: 'Test string',
        },
        name: 'Test string',
        submitTime: 'Test string',
      }
    );
    /** Creates a glossary entry. */
    await gapi.client.translate.projects.locations.glossaries.glossaryEntries.create(
      {
        parent: 'Test string',
      },
      {
        description: 'Test string',
        name: 'Test string',
        termsPair: {
          sourceTerm: {
            languageCode: 'Test string',
            text: 'Test string',
          },
          targetTerm: {
            languageCode: 'Test string',
            text: 'Test string',
          },
        },
        termsSet: {
          terms: [
            {
              languageCode: 'Test string',
              text: 'Test string',
            },
          ],
        },
      }
    );
    /** Deletes a single entry from the glossary */
    await gapi.client.translate.projects.locations.glossaries.glossaryEntries.delete(
      {
        name: 'Test string',
      }
    );
    /** Gets a single glossary entry by the given id. */
    await gapi.client.translate.projects.locations.glossaries.glossaryEntries.get(
      {
        name: 'Test string',
      }
    );
    /** List the entries for the glossary. */
    await gapi.client.translate.projects.locations.glossaries.glossaryEntries.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Updates a glossary entry. */
    await gapi.client.translate.projects.locations.glossaries.glossaryEntries.patch(
      {
        name: 'Test string',
      },
      {
        description: 'Test string',
        name: 'Test string',
        termsPair: {
          sourceTerm: {
            languageCode: 'Test string',
            text: 'Test string',
          },
          targetTerm: {
            languageCode: 'Test string',
            text: 'Test string',
          },
        },
        termsSet: {
          terms: [
            {
              languageCode: 'Test string',
              text: 'Test string',
            },
          ],
        },
      }
    );
    /** Creates a Model. */
    await gapi.client.translate.projects.locations.models.create(
      {
        parent: 'Test string',
      },
      {
        createTime: 'Test string',
        dataset: 'Test string',
        displayName: 'Test string',
        name: 'Test string',
        sourceLanguageCode: 'Test string',
        targetLanguageCode: 'Test string',
        testExampleCount: 42,
        trainExampleCount: 42,
        updateTime: 'Test string',
        validateExampleCount: 42,
      }
    );
    /** Deletes a model. */
    await gapi.client.translate.projects.locations.models.delete({
      name: 'Test string',
    });
    /** Gets a model. */
    await gapi.client.translate.projects.locations.models.get({
      name: 'Test string',
    });
    /** Lists models. */
    await gapi.client.translate.projects.locations.models.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of `1`, corresponding to `Code.CANCELLED`. */
    await gapi.client.translate.projects.locations.operations.cancel(
      {
        name: 'Test string',
      },
      {}
    );
    /** Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. */
    await gapi.client.translate.projects.locations.operations.delete({
      name: 'Test string',
    });
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.translate.projects.locations.operations.get({
      name: 'Test string',
    });
    /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
    await gapi.client.translate.projects.locations.operations.list({
      filter: 'Test string',
      name: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Waits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done. */
    await gapi.client.translate.projects.locations.operations.wait(
      {
        name: 'Test string',
      },
      {
        timeout: 'Test string',
      }
    );
  }
});
