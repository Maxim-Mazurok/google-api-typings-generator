/* This is stub file for gapi.client.transcoder-v1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20240807

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://transcoder.googleapis.com/$discovery/rest?version=v1'
  );
  /** now we can use gapi.client.transcoder */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
    'https://www.googleapis.com/auth/cloud-platform',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Creates a job in the specified region. */
    await gapi.client.transcoder.projects.locations.jobs.create(
      {
        parent: 'Test string',
      },
      {
        batchModePriority: 42,
        config: {
          adBreaks: [
            {
              startTimeOffset: 'Test string',
            },
          ],
          editList: [
            {
              endTimeOffset: 'Test string',
              inputs: ['Test string'],
              key: 'Test string',
              startTimeOffset: 'Test string',
            },
          ],
          elementaryStreams: [
            {
              audioStream: {
                bitrateBps: 42,
                channelCount: 42,
                channelLayout: ['Test string'],
                codec: 'Test string',
                displayName: 'Test string',
                languageCode: 'Test string',
                mapping: [
                  {
                    atomKey: 'Test string',
                    gainDb: 42,
                    inputChannel: 42,
                    inputKey: 'Test string',
                    inputTrack: 42,
                    outputChannel: 42,
                  },
                ],
                sampleRateHertz: 42,
              },
              key: 'Test string',
              textStream: {
                codec: 'Test string',
                displayName: 'Test string',
                languageCode: 'Test string',
                mapping: [
                  {
                    atomKey: 'Test string',
                    inputKey: 'Test string',
                    inputTrack: 42,
                  },
                ],
              },
              videoStream: {
                h264: {
                  allowOpenGop: true,
                  aqStrength: 42,
                  bFrameCount: 42,
                  bitrateBps: 42,
                  bPyramid: true,
                  crfLevel: 42,
                  enableTwoPass: true,
                  entropyCoder: 'Test string',
                  frameRate: 42,
                  frameRateConversionStrategy: 'Test string',
                  gopDuration: 'Test string',
                  gopFrameCount: 42,
                  heightPixels: 42,
                  hlg: {},
                  pixelFormat: 'Test string',
                  preset: 'Test string',
                  profile: 'Test string',
                  rateControlMode: 'Test string',
                  sdr: {},
                  tune: 'Test string',
                  vbvFullnessBits: 42,
                  vbvSizeBits: 42,
                  widthPixels: 42,
                },
                h265: {
                  allowOpenGop: true,
                  aqStrength: 42,
                  bFrameCount: 42,
                  bitrateBps: 42,
                  bPyramid: true,
                  crfLevel: 42,
                  enableTwoPass: true,
                  frameRate: 42,
                  frameRateConversionStrategy: 'Test string',
                  gopDuration: 'Test string',
                  gopFrameCount: 42,
                  hdr10: {},
                  heightPixels: 42,
                  hlg: {},
                  pixelFormat: 'Test string',
                  preset: 'Test string',
                  profile: 'Test string',
                  rateControlMode: 'Test string',
                  sdr: {},
                  tune: 'Test string',
                  vbvFullnessBits: 42,
                  vbvSizeBits: 42,
                  widthPixels: 42,
                },
                vp9: {
                  bitrateBps: 42,
                  crfLevel: 42,
                  frameRate: 42,
                  frameRateConversionStrategy: 'Test string',
                  gopDuration: 'Test string',
                  gopFrameCount: 42,
                  heightPixels: 42,
                  hlg: {},
                  pixelFormat: 'Test string',
                  profile: 'Test string',
                  rateControlMode: 'Test string',
                  sdr: {},
                  widthPixels: 42,
                },
              },
            },
          ],
          encryptions: [
            {
              aes128: {},
              drmSystems: {
                clearkey: {},
                fairplay: {},
                playready: {},
                widevine: {},
              },
              id: 'Test string',
              mpegCenc: {
                scheme: 'Test string',
              },
              sampleAes: {},
              secretManagerKeySource: {
                secretVersion: 'Test string',
              },
            },
          ],
          inputs: [
            {
              key: 'Test string',
              preprocessingConfig: {
                audio: {
                  highBoost: true,
                  lowBoost: true,
                  lufs: 42,
                },
                color: {
                  brightness: 42,
                  contrast: 42,
                  saturation: 42,
                },
                crop: {
                  bottomPixels: 42,
                  leftPixels: 42,
                  rightPixels: 42,
                  topPixels: 42,
                },
                deblock: {
                  enabled: true,
                  strength: 42,
                },
                deinterlace: {
                  bwdif: {
                    deinterlaceAllFrames: true,
                    mode: 'Test string',
                    parity: 'Test string',
                  },
                  yadif: {
                    deinterlaceAllFrames: true,
                    disableSpatialInterlacing: true,
                    mode: 'Test string',
                    parity: 'Test string',
                  },
                },
                denoise: {
                  strength: 42,
                  tune: 'Test string',
                },
                pad: {
                  bottomPixels: 42,
                  leftPixels: 42,
                  rightPixels: 42,
                  topPixels: 42,
                },
              },
              uri: 'Test string',
            },
          ],
          manifests: [
            {
              dash: {
                segmentReferenceScheme: 'Test string',
              },
              fileName: 'Test string',
              muxStreams: ['Test string'],
              type: 'Test string',
            },
          ],
          muxStreams: [
            {
              container: 'Test string',
              elementaryStreams: ['Test string'],
              encryptionId: 'Test string',
              fileName: 'Test string',
              fmp4: {
                codecTag: 'Test string',
              },
              key: 'Test string',
              segmentSettings: {
                individualSegments: true,
                segmentDuration: 'Test string',
              },
            },
          ],
          output: {
            uri: 'Test string',
          },
          overlays: [
            {
              animations: [
                {
                  animationEnd: {
                    startTimeOffset: 'Test string',
                  },
                  animationFade: {
                    endTimeOffset: 'Test string',
                    fadeType: 'Test string',
                    startTimeOffset: 'Test string',
                    xy: {
                      x: 42,
                      y: 42,
                    },
                  },
                  animationStatic: {
                    startTimeOffset: 'Test string',
                    xy: {
                      x: 42,
                      y: 42,
                    },
                  },
                },
              ],
              image: {
                alpha: 42,
                resolution: {
                  x: 42,
                  y: 42,
                },
                uri: 'Test string',
              },
            },
          ],
          pubsubDestination: {
            topic: 'Test string',
          },
          spriteSheets: [
            {
              columnCount: 42,
              endTimeOffset: 'Test string',
              filePrefix: 'Test string',
              format: 'Test string',
              interval: 'Test string',
              quality: 42,
              rowCount: 42,
              spriteHeightPixels: 42,
              spriteWidthPixels: 42,
              startTimeOffset: 'Test string',
              totalCount: 42,
            },
          ],
        },
        createTime: 'Test string',
        endTime: 'Test string',
        error: {
          code: 42,
          details: [
            {
              A: 42,
            },
          ],
          message: 'Test string',
        },
        inputUri: 'Test string',
        labels: {
          A: 'Test string',
        },
        mode: 'Test string',
        name: 'Test string',
        optimization: 'Test string',
        outputUri: 'Test string',
        startTime: 'Test string',
        state: 'Test string',
        templateId: 'Test string',
        ttlAfterCompletionDays: 42,
      }
    );
    /** Deletes a job. */
    await gapi.client.transcoder.projects.locations.jobs.delete({
      allowMissing: true,
      name: 'Test string',
    });
    /** Returns the job data. */
    await gapi.client.transcoder.projects.locations.jobs.get({
      name: 'Test string',
    });
    /** Lists jobs in the specified region. */
    await gapi.client.transcoder.projects.locations.jobs.list({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Creates a job template in the specified region. */
    await gapi.client.transcoder.projects.locations.jobTemplates.create(
      {
        jobTemplateId: 'Test string',
        parent: 'Test string',
      },
      {
        config: {
          adBreaks: [
            {
              startTimeOffset: 'Test string',
            },
          ],
          editList: [
            {
              endTimeOffset: 'Test string',
              inputs: ['Test string'],
              key: 'Test string',
              startTimeOffset: 'Test string',
            },
          ],
          elementaryStreams: [
            {
              audioStream: {
                bitrateBps: 42,
                channelCount: 42,
                channelLayout: ['Test string'],
                codec: 'Test string',
                displayName: 'Test string',
                languageCode: 'Test string',
                mapping: [
                  {
                    atomKey: 'Test string',
                    gainDb: 42,
                    inputChannel: 42,
                    inputKey: 'Test string',
                    inputTrack: 42,
                    outputChannel: 42,
                  },
                ],
                sampleRateHertz: 42,
              },
              key: 'Test string',
              textStream: {
                codec: 'Test string',
                displayName: 'Test string',
                languageCode: 'Test string',
                mapping: [
                  {
                    atomKey: 'Test string',
                    inputKey: 'Test string',
                    inputTrack: 42,
                  },
                ],
              },
              videoStream: {
                h264: {
                  allowOpenGop: true,
                  aqStrength: 42,
                  bFrameCount: 42,
                  bitrateBps: 42,
                  bPyramid: true,
                  crfLevel: 42,
                  enableTwoPass: true,
                  entropyCoder: 'Test string',
                  frameRate: 42,
                  frameRateConversionStrategy: 'Test string',
                  gopDuration: 'Test string',
                  gopFrameCount: 42,
                  heightPixels: 42,
                  hlg: {},
                  pixelFormat: 'Test string',
                  preset: 'Test string',
                  profile: 'Test string',
                  rateControlMode: 'Test string',
                  sdr: {},
                  tune: 'Test string',
                  vbvFullnessBits: 42,
                  vbvSizeBits: 42,
                  widthPixels: 42,
                },
                h265: {
                  allowOpenGop: true,
                  aqStrength: 42,
                  bFrameCount: 42,
                  bitrateBps: 42,
                  bPyramid: true,
                  crfLevel: 42,
                  enableTwoPass: true,
                  frameRate: 42,
                  frameRateConversionStrategy: 'Test string',
                  gopDuration: 'Test string',
                  gopFrameCount: 42,
                  hdr10: {},
                  heightPixels: 42,
                  hlg: {},
                  pixelFormat: 'Test string',
                  preset: 'Test string',
                  profile: 'Test string',
                  rateControlMode: 'Test string',
                  sdr: {},
                  tune: 'Test string',
                  vbvFullnessBits: 42,
                  vbvSizeBits: 42,
                  widthPixels: 42,
                },
                vp9: {
                  bitrateBps: 42,
                  crfLevel: 42,
                  frameRate: 42,
                  frameRateConversionStrategy: 'Test string',
                  gopDuration: 'Test string',
                  gopFrameCount: 42,
                  heightPixels: 42,
                  hlg: {},
                  pixelFormat: 'Test string',
                  profile: 'Test string',
                  rateControlMode: 'Test string',
                  sdr: {},
                  widthPixels: 42,
                },
              },
            },
          ],
          encryptions: [
            {
              aes128: {},
              drmSystems: {
                clearkey: {},
                fairplay: {},
                playready: {},
                widevine: {},
              },
              id: 'Test string',
              mpegCenc: {
                scheme: 'Test string',
              },
              sampleAes: {},
              secretManagerKeySource: {
                secretVersion: 'Test string',
              },
            },
          ],
          inputs: [
            {
              key: 'Test string',
              preprocessingConfig: {
                audio: {
                  highBoost: true,
                  lowBoost: true,
                  lufs: 42,
                },
                color: {
                  brightness: 42,
                  contrast: 42,
                  saturation: 42,
                },
                crop: {
                  bottomPixels: 42,
                  leftPixels: 42,
                  rightPixels: 42,
                  topPixels: 42,
                },
                deblock: {
                  enabled: true,
                  strength: 42,
                },
                deinterlace: {
                  bwdif: {
                    deinterlaceAllFrames: true,
                    mode: 'Test string',
                    parity: 'Test string',
                  },
                  yadif: {
                    deinterlaceAllFrames: true,
                    disableSpatialInterlacing: true,
                    mode: 'Test string',
                    parity: 'Test string',
                  },
                },
                denoise: {
                  strength: 42,
                  tune: 'Test string',
                },
                pad: {
                  bottomPixels: 42,
                  leftPixels: 42,
                  rightPixels: 42,
                  topPixels: 42,
                },
              },
              uri: 'Test string',
            },
          ],
          manifests: [
            {
              dash: {
                segmentReferenceScheme: 'Test string',
              },
              fileName: 'Test string',
              muxStreams: ['Test string'],
              type: 'Test string',
            },
          ],
          muxStreams: [
            {
              container: 'Test string',
              elementaryStreams: ['Test string'],
              encryptionId: 'Test string',
              fileName: 'Test string',
              fmp4: {
                codecTag: 'Test string',
              },
              key: 'Test string',
              segmentSettings: {
                individualSegments: true,
                segmentDuration: 'Test string',
              },
            },
          ],
          output: {
            uri: 'Test string',
          },
          overlays: [
            {
              animations: [
                {
                  animationEnd: {
                    startTimeOffset: 'Test string',
                  },
                  animationFade: {
                    endTimeOffset: 'Test string',
                    fadeType: 'Test string',
                    startTimeOffset: 'Test string',
                    xy: {
                      x: 42,
                      y: 42,
                    },
                  },
                  animationStatic: {
                    startTimeOffset: 'Test string',
                    xy: {
                      x: 42,
                      y: 42,
                    },
                  },
                },
              ],
              image: {
                alpha: 42,
                resolution: {
                  x: 42,
                  y: 42,
                },
                uri: 'Test string',
              },
            },
          ],
          pubsubDestination: {
            topic: 'Test string',
          },
          spriteSheets: [
            {
              columnCount: 42,
              endTimeOffset: 'Test string',
              filePrefix: 'Test string',
              format: 'Test string',
              interval: 'Test string',
              quality: 42,
              rowCount: 42,
              spriteHeightPixels: 42,
              spriteWidthPixels: 42,
              startTimeOffset: 'Test string',
              totalCount: 42,
            },
          ],
        },
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
      }
    );
    /** Deletes a job template. */
    await gapi.client.transcoder.projects.locations.jobTemplates.delete({
      allowMissing: true,
      name: 'Test string',
    });
    /** Returns the job template data. */
    await gapi.client.transcoder.projects.locations.jobTemplates.get({
      name: 'Test string',
    });
    /** Lists job templates in the specified region. */
    await gapi.client.transcoder.projects.locations.jobTemplates.list({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
  }
});
