/* This is stub file for gapi.client.analyticsadmin definition tests */
/* IMPORTANT.
* This file was automatically generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
* In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
**/

// Revision: 20201023

gapi.load('client', () => {
    /** now we can use gapi.client */
    gapi.client.load('analyticsadmin', 'v1alpha', () => {
        /** now we can use gapi.client.analyticsadmin */

        /** don't forget to authenticate your client before sending any request to resources: */
        /** declare client_id registered in Google Developers Console */
        const client_id = '<<PUT YOUR CLIENT ID HERE>>';
        const scope = [
            /** Edit Google Analytics management entities */
            'https://www.googleapis.com/auth/analytics.edit',
            /** Manage Google Analytics Account users by email address */
            'https://www.googleapis.com/auth/analytics.manage.users',
            /** View Google Analytics user permissions */
            'https://www.googleapis.com/auth/analytics.manage.users.readonly',
            /** View your Google Analytics data */
            'https://www.googleapis.com/auth/analytics.readonly',
        ];
        const immediate = false;
        gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
            if (authResult && !authResult.error) {
                /** handle successful authorization */
                run();
            } else {
                /** handle authorization error */
            }
        });
    });

    async function run() {
        /**
         * Marks target Account as soft-deleted (ie: "trashed") and returns it. This API does not have a method to restore soft-deleted accounts. However, they can be restored using the Trash Can
         * UI. If the accounts are not restored before the expiration time, the account and all child resources (eg: Properties, GoogleAdsLinks, Streams, UserLinks) will be permanently purged.
         * https://support.google.com/analytics/answer/6154772 Returns an error if the target is not found.
         */
        await gapi.client.analyticsadmin.accounts.delete({
            name: "Test string",
        });
        /**
         * Lists all user links on an account or property, including implicit ones that come from effective permissions granted by groups or organization admin roles. If a returned user link does
         * not have direct permissions, they cannot be removed from the account or property directly with the DeleteUserLink command. They have to be removed from the group/etc that gives them
         * permissions, which is currently only usable/discoverable in the GA or GMP UIs.
         */
        await gapi.client.analyticsadmin.accounts.userLinks.audit({
            parent: "Test string",
        }, {
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Creates information about multiple users' links to an account or property. This method is transactional. If any UserLink cannot be created, none of the UserLinks will be created. */
        await gapi.client.analyticsadmin.accounts.userLinks.batchCreate({
            parent: "Test string",
        }, {
            notifyNewUsers: true,
            requests: [
                {
                    notifyNewUser: true,
                    parent: "Test string",
                    userLink: {
                        directRoles: [
                            "Test string"                        ],
                        emailAddress: "Test string",
                        name: "Test string",
                    },
                }            ],
        });
        /** Deletes information about multiple users' links to an account or property. */
        await gapi.client.analyticsadmin.accounts.userLinks.batchDelete({
            parent: "Test string",
        }, {
            requests: [
                {
                    name: "Test string",
                }            ],
        });
        /** Gets information about multiple users' links to an account or property. */
        await gapi.client.analyticsadmin.accounts.userLinks.batchGet({
            names: "Test string",
            parent: "Test string",
        });
        /** Updates information about multiple users' links to an account or property. */
        await gapi.client.analyticsadmin.accounts.userLinks.batchUpdate({
            parent: "Test string",
        }, {
            requests: [
                {
                    userLink: {
                        directRoles: [
                            "Test string"                        ],
                        emailAddress: "Test string",
                        name: "Test string",
                    },
                }            ],
        });
        /**
         * Creates a user link on an account or property. If the user with the specified email already has permissions on the account or property, then the user's existing permissions will be
         * unioned with the permissions specified in the new UserLink.
         */
        await gapi.client.analyticsadmin.accounts.userLinks.create({
            notifyNewUser: true,
            parent: "Test string",
        }, {
            directRoles: [
                "Test string"            ],
            emailAddress: "Test string",
            name: "Test string",
        });
        /** Deletes a user link on an account or property. */
        await gapi.client.analyticsadmin.accounts.userLinks.delete({
            name: "Test string",
        });
        /** Gets information about a user's link to an account or property. */
        await gapi.client.analyticsadmin.accounts.userLinks.get({
            name: "Test string",
        });
        /** Lists all user links on an account or property. */
        await gapi.client.analyticsadmin.accounts.userLinks.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a user link on an account or property. */
        await gapi.client.analyticsadmin.accounts.userLinks.patch({
            name: "Test string",
        }, {
            directRoles: [
                "Test string"            ],
            emailAddress: "Test string",
            name: "Test string",
        });
        /** Lookup for a single Account. Throws "Target not found" if no such account found, or if caller does not have permissions to access it. */
        await gapi.client.analyticsadmin.accounts.get({
            name: "Test string",
        });
        /**
         * Lists all user links on an account or property, including implicit ones that come from effective permissions granted by groups or organization admin roles. If a returned user link does
         * not have direct permissions, they cannot be removed from the account or property directly with the DeleteUserLink command. They have to be removed from the group/etc that gives them
         * permissions, which is currently only usable/discoverable in the GA or GMP UIs.
         */
        await gapi.client.analyticsadmin.accounts.userLinks.audit({
            parent: "Test string",
        }, {
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Creates information about multiple users' links to an account or property. This method is transactional. If any UserLink cannot be created, none of the UserLinks will be created. */
        await gapi.client.analyticsadmin.accounts.userLinks.batchCreate({
            parent: "Test string",
        }, {
            notifyNewUsers: true,
            requests: [
                {
                    notifyNewUser: true,
                    parent: "Test string",
                    userLink: {
                        directRoles: [
                            "Test string"                        ],
                        emailAddress: "Test string",
                        name: "Test string",
                    },
                }            ],
        });
        /** Deletes information about multiple users' links to an account or property. */
        await gapi.client.analyticsadmin.accounts.userLinks.batchDelete({
            parent: "Test string",
        }, {
            requests: [
                {
                    name: "Test string",
                }            ],
        });
        /** Gets information about multiple users' links to an account or property. */
        await gapi.client.analyticsadmin.accounts.userLinks.batchGet({
            names: "Test string",
            parent: "Test string",
        });
        /** Updates information about multiple users' links to an account or property. */
        await gapi.client.analyticsadmin.accounts.userLinks.batchUpdate({
            parent: "Test string",
        }, {
            requests: [
                {
                    userLink: {
                        directRoles: [
                            "Test string"                        ],
                        emailAddress: "Test string",
                        name: "Test string",
                    },
                }            ],
        });
        /**
         * Creates a user link on an account or property. If the user with the specified email already has permissions on the account or property, then the user's existing permissions will be
         * unioned with the permissions specified in the new UserLink.
         */
        await gapi.client.analyticsadmin.accounts.userLinks.create({
            notifyNewUser: true,
            parent: "Test string",
        }, {
            directRoles: [
                "Test string"            ],
            emailAddress: "Test string",
            name: "Test string",
        });
        /** Deletes a user link on an account or property. */
        await gapi.client.analyticsadmin.accounts.userLinks.delete({
            name: "Test string",
        });
        /** Gets information about a user's link to an account or property. */
        await gapi.client.analyticsadmin.accounts.userLinks.get({
            name: "Test string",
        });
        /** Lists all user links on an account or property. */
        await gapi.client.analyticsadmin.accounts.userLinks.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a user link on an account or property. */
        await gapi.client.analyticsadmin.accounts.userLinks.patch({
            name: "Test string",
        }, {
            directRoles: [
                "Test string"            ],
            emailAddress: "Test string",
            name: "Test string",
        });
        /** Get data sharing settings on an account. Data sharing settings are singletons. */
        await gapi.client.analyticsadmin.accounts.getDataSharingSettings({
            name: "Test string",
        });
        /**
         * Lists all user links on an account or property, including implicit ones that come from effective permissions granted by groups or organization admin roles. If a returned user link does
         * not have direct permissions, they cannot be removed from the account or property directly with the DeleteUserLink command. They have to be removed from the group/etc that gives them
         * permissions, which is currently only usable/discoverable in the GA or GMP UIs.
         */
        await gapi.client.analyticsadmin.accounts.userLinks.audit({
            parent: "Test string",
        }, {
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Creates information about multiple users' links to an account or property. This method is transactional. If any UserLink cannot be created, none of the UserLinks will be created. */
        await gapi.client.analyticsadmin.accounts.userLinks.batchCreate({
            parent: "Test string",
        }, {
            notifyNewUsers: true,
            requests: [
                {
                    notifyNewUser: true,
                    parent: "Test string",
                    userLink: {
                        directRoles: [
                            "Test string"                        ],
                        emailAddress: "Test string",
                        name: "Test string",
                    },
                }            ],
        });
        /** Deletes information about multiple users' links to an account or property. */
        await gapi.client.analyticsadmin.accounts.userLinks.batchDelete({
            parent: "Test string",
        }, {
            requests: [
                {
                    name: "Test string",
                }            ],
        });
        /** Gets information about multiple users' links to an account or property. */
        await gapi.client.analyticsadmin.accounts.userLinks.batchGet({
            names: "Test string",
            parent: "Test string",
        });
        /** Updates information about multiple users' links to an account or property. */
        await gapi.client.analyticsadmin.accounts.userLinks.batchUpdate({
            parent: "Test string",
        }, {
            requests: [
                {
                    userLink: {
                        directRoles: [
                            "Test string"                        ],
                        emailAddress: "Test string",
                        name: "Test string",
                    },
                }            ],
        });
        /**
         * Creates a user link on an account or property. If the user with the specified email already has permissions on the account or property, then the user's existing permissions will be
         * unioned with the permissions specified in the new UserLink.
         */
        await gapi.client.analyticsadmin.accounts.userLinks.create({
            notifyNewUser: true,
            parent: "Test string",
        }, {
            directRoles: [
                "Test string"            ],
            emailAddress: "Test string",
            name: "Test string",
        });
        /** Deletes a user link on an account or property. */
        await gapi.client.analyticsadmin.accounts.userLinks.delete({
            name: "Test string",
        });
        /** Gets information about a user's link to an account or property. */
        await gapi.client.analyticsadmin.accounts.userLinks.get({
            name: "Test string",
        });
        /** Lists all user links on an account or property. */
        await gapi.client.analyticsadmin.accounts.userLinks.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a user link on an account or property. */
        await gapi.client.analyticsadmin.accounts.userLinks.patch({
            name: "Test string",
        }, {
            directRoles: [
                "Test string"            ],
            emailAddress: "Test string",
            name: "Test string",
        });
        /**
         * Returns all accounts accessible by the caller. Note that these accounts might not currently have GA4 properties. Soft-deleted (ie: "trashed") accounts are excluded by default. Returns
         * an empty list if no relevant accounts are found.
         */
        await gapi.client.analyticsadmin.accounts.list({
            pageSize: 42,
            pageToken: "Test string",
            showDeleted: true,
        });
        /**
         * Lists all user links on an account or property, including implicit ones that come from effective permissions granted by groups or organization admin roles. If a returned user link does
         * not have direct permissions, they cannot be removed from the account or property directly with the DeleteUserLink command. They have to be removed from the group/etc that gives them
         * permissions, which is currently only usable/discoverable in the GA or GMP UIs.
         */
        await gapi.client.analyticsadmin.accounts.userLinks.audit({
            parent: "Test string",
        }, {
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Creates information about multiple users' links to an account or property. This method is transactional. If any UserLink cannot be created, none of the UserLinks will be created. */
        await gapi.client.analyticsadmin.accounts.userLinks.batchCreate({
            parent: "Test string",
        }, {
            notifyNewUsers: true,
            requests: [
                {
                    notifyNewUser: true,
                    parent: "Test string",
                    userLink: {
                        directRoles: [
                            "Test string"                        ],
                        emailAddress: "Test string",
                        name: "Test string",
                    },
                }            ],
        });
        /** Deletes information about multiple users' links to an account or property. */
        await gapi.client.analyticsadmin.accounts.userLinks.batchDelete({
            parent: "Test string",
        }, {
            requests: [
                {
                    name: "Test string",
                }            ],
        });
        /** Gets information about multiple users' links to an account or property. */
        await gapi.client.analyticsadmin.accounts.userLinks.batchGet({
            names: "Test string",
            parent: "Test string",
        });
        /** Updates information about multiple users' links to an account or property. */
        await gapi.client.analyticsadmin.accounts.userLinks.batchUpdate({
            parent: "Test string",
        }, {
            requests: [
                {
                    userLink: {
                        directRoles: [
                            "Test string"                        ],
                        emailAddress: "Test string",
                        name: "Test string",
                    },
                }            ],
        });
        /**
         * Creates a user link on an account or property. If the user with the specified email already has permissions on the account or property, then the user's existing permissions will be
         * unioned with the permissions specified in the new UserLink.
         */
        await gapi.client.analyticsadmin.accounts.userLinks.create({
            notifyNewUser: true,
            parent: "Test string",
        }, {
            directRoles: [
                "Test string"            ],
            emailAddress: "Test string",
            name: "Test string",
        });
        /** Deletes a user link on an account or property. */
        await gapi.client.analyticsadmin.accounts.userLinks.delete({
            name: "Test string",
        });
        /** Gets information about a user's link to an account or property. */
        await gapi.client.analyticsadmin.accounts.userLinks.get({
            name: "Test string",
        });
        /** Lists all user links on an account or property. */
        await gapi.client.analyticsadmin.accounts.userLinks.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a user link on an account or property. */
        await gapi.client.analyticsadmin.accounts.userLinks.patch({
            name: "Test string",
        }, {
            directRoles: [
                "Test string"            ],
            emailAddress: "Test string",
            name: "Test string",
        });
        /** Updates an account. */
        await gapi.client.analyticsadmin.accounts.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            countryCode: "Test string",
            createTime: "Test string",
            deleted: true,
            displayName: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /**
         * Lists all user links on an account or property, including implicit ones that come from effective permissions granted by groups or organization admin roles. If a returned user link does
         * not have direct permissions, they cannot be removed from the account or property directly with the DeleteUserLink command. They have to be removed from the group/etc that gives them
         * permissions, which is currently only usable/discoverable in the GA or GMP UIs.
         */
        await gapi.client.analyticsadmin.accounts.userLinks.audit({
            parent: "Test string",
        }, {
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Creates information about multiple users' links to an account or property. This method is transactional. If any UserLink cannot be created, none of the UserLinks will be created. */
        await gapi.client.analyticsadmin.accounts.userLinks.batchCreate({
            parent: "Test string",
        }, {
            notifyNewUsers: true,
            requests: [
                {
                    notifyNewUser: true,
                    parent: "Test string",
                    userLink: {
                        directRoles: [
                            "Test string"                        ],
                        emailAddress: "Test string",
                        name: "Test string",
                    },
                }            ],
        });
        /** Deletes information about multiple users' links to an account or property. */
        await gapi.client.analyticsadmin.accounts.userLinks.batchDelete({
            parent: "Test string",
        }, {
            requests: [
                {
                    name: "Test string",
                }            ],
        });
        /** Gets information about multiple users' links to an account or property. */
        await gapi.client.analyticsadmin.accounts.userLinks.batchGet({
            names: "Test string",
            parent: "Test string",
        });
        /** Updates information about multiple users' links to an account or property. */
        await gapi.client.analyticsadmin.accounts.userLinks.batchUpdate({
            parent: "Test string",
        }, {
            requests: [
                {
                    userLink: {
                        directRoles: [
                            "Test string"                        ],
                        emailAddress: "Test string",
                        name: "Test string",
                    },
                }            ],
        });
        /**
         * Creates a user link on an account or property. If the user with the specified email already has permissions on the account or property, then the user's existing permissions will be
         * unioned with the permissions specified in the new UserLink.
         */
        await gapi.client.analyticsadmin.accounts.userLinks.create({
            notifyNewUser: true,
            parent: "Test string",
        }, {
            directRoles: [
                "Test string"            ],
            emailAddress: "Test string",
            name: "Test string",
        });
        /** Deletes a user link on an account or property. */
        await gapi.client.analyticsadmin.accounts.userLinks.delete({
            name: "Test string",
        });
        /** Gets information about a user's link to an account or property. */
        await gapi.client.analyticsadmin.accounts.userLinks.get({
            name: "Test string",
        });
        /** Lists all user links on an account or property. */
        await gapi.client.analyticsadmin.accounts.userLinks.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a user link on an account or property. */
        await gapi.client.analyticsadmin.accounts.userLinks.patch({
            name: "Test string",
        }, {
            directRoles: [
                "Test string"            ],
            emailAddress: "Test string",
            name: "Test string",
        });
        /** Requests a ticket for creating an account. */
        await gapi.client.analyticsadmin.accounts.provisionAccountTicket({
        }, {
            account: {
                countryCode: "Test string",
                createTime: "Test string",
                deleted: true,
                displayName: "Test string",
                name: "Test string",
                updateTime: "Test string",
            },
            redirectUri: "Test string",
        });
        /**
         * Lists all user links on an account or property, including implicit ones that come from effective permissions granted by groups or organization admin roles. If a returned user link does
         * not have direct permissions, they cannot be removed from the account or property directly with the DeleteUserLink command. They have to be removed from the group/etc that gives them
         * permissions, which is currently only usable/discoverable in the GA or GMP UIs.
         */
        await gapi.client.analyticsadmin.accounts.userLinks.audit({
            parent: "Test string",
        }, {
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Creates information about multiple users' links to an account or property. This method is transactional. If any UserLink cannot be created, none of the UserLinks will be created. */
        await gapi.client.analyticsadmin.accounts.userLinks.batchCreate({
            parent: "Test string",
        }, {
            notifyNewUsers: true,
            requests: [
                {
                    notifyNewUser: true,
                    parent: "Test string",
                    userLink: {
                        directRoles: [
                            "Test string"                        ],
                        emailAddress: "Test string",
                        name: "Test string",
                    },
                }            ],
        });
        /** Deletes information about multiple users' links to an account or property. */
        await gapi.client.analyticsadmin.accounts.userLinks.batchDelete({
            parent: "Test string",
        }, {
            requests: [
                {
                    name: "Test string",
                }            ],
        });
        /** Gets information about multiple users' links to an account or property. */
        await gapi.client.analyticsadmin.accounts.userLinks.batchGet({
            names: "Test string",
            parent: "Test string",
        });
        /** Updates information about multiple users' links to an account or property. */
        await gapi.client.analyticsadmin.accounts.userLinks.batchUpdate({
            parent: "Test string",
        }, {
            requests: [
                {
                    userLink: {
                        directRoles: [
                            "Test string"                        ],
                        emailAddress: "Test string",
                        name: "Test string",
                    },
                }            ],
        });
        /**
         * Creates a user link on an account or property. If the user with the specified email already has permissions on the account or property, then the user's existing permissions will be
         * unioned with the permissions specified in the new UserLink.
         */
        await gapi.client.analyticsadmin.accounts.userLinks.create({
            notifyNewUser: true,
            parent: "Test string",
        }, {
            directRoles: [
                "Test string"            ],
            emailAddress: "Test string",
            name: "Test string",
        });
        /** Deletes a user link on an account or property. */
        await gapi.client.analyticsadmin.accounts.userLinks.delete({
            name: "Test string",
        });
        /** Gets information about a user's link to an account or property. */
        await gapi.client.analyticsadmin.accounts.userLinks.get({
            name: "Test string",
        });
        /** Lists all user links on an account or property. */
        await gapi.client.analyticsadmin.accounts.userLinks.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a user link on an account or property. */
        await gapi.client.analyticsadmin.accounts.userLinks.patch({
            name: "Test string",
        }, {
            directRoles: [
                "Test string"            ],
            emailAddress: "Test string",
            name: "Test string",
        });
        /** Returns summaries of all accounts accessible by the caller. */
        await gapi.client.analyticsadmin.accountSummaries.list({
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Creates an "GA4" property with the specified location and attributes. */
        await gapi.client.analyticsadmin.properties.create({
        }, {
            createTime: "Test string",
            currencyCode: "Test string",
            deleted: true,
            displayName: "Test string",
            industryCategory: "Test string",
            name: "Test string",
            parent: "Test string",
            timeZone: "Test string",
            updateTime: "Test string",
        });
        /** Creates an android app stream with the specified location and attributes. */
        await gapi.client.analyticsadmin.properties.androidAppDataStreams.create({
            parent: "Test string",
        }, {
            createTime: "Test string",
            displayName: "Test string",
            firebaseAppId: "Test string",
            name: "Test string",
            packageName: "Test string",
            updateTime: "Test string",
        });
        /** Deletes an android app stream on a property. */
        await gapi.client.analyticsadmin.properties.androidAppDataStreams.delete({
            name: "Test string",
        });
        /** Lookup for a single AndroidAppDataStream Throws "Target not found" if no such android app data stream found, or if the caller does not have permissions to access it. */
        await gapi.client.analyticsadmin.properties.androidAppDataStreams.get({
            name: "Test string",
        });
        /**
         * Returns child android app streams under the specified parent property. Android app streams will be excluded if the caller does not have access. Returns an empty list if no relevant
         * android app streams are found.
         */
        await gapi.client.analyticsadmin.properties.androidAppDataStreams.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates an android app stream on a property. */
        await gapi.client.analyticsadmin.properties.androidAppDataStreams.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            displayName: "Test string",
            firebaseAppId: "Test string",
            name: "Test string",
            packageName: "Test string",
            updateTime: "Test string",
        });
        /** Creates a FirebaseLink. Properties can have at most one FirebaseLink. */
        await gapi.client.analyticsadmin.properties.firebaseLinks.create({
            parent: "Test string",
        }, {
            createTime: "Test string",
            maximumUserAccess: "Test string",
            name: "Test string",
            project: "Test string",
        });
        /** Deletes a FirebaseLink on a property */
        await gapi.client.analyticsadmin.properties.firebaseLinks.delete({
            name: "Test string",
        });
        /** Lists FirebaseLinks on a property. Properties can have at most one FirebaseLink. */
        await gapi.client.analyticsadmin.properties.firebaseLinks.list({
            parent: "Test string",
        });
        /** Updates a FirebaseLink on a property */
        await gapi.client.analyticsadmin.properties.firebaseLinks.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            maximumUserAccess: "Test string",
            name: "Test string",
            project: "Test string",
        });
        /** Creates a GoogleAdsLink. */
        await gapi.client.analyticsadmin.properties.googleAdsLinks.create({
            parent: "Test string",
        }, {
            adsPersonalizationEnabled: true,
            canManageClients: true,
            createTime: "Test string",
            customerId: "Test string",
            emailAddress: "Test string",
            name: "Test string",
            parent: "Test string",
            updateTime: "Test string",
        });
        /** Deletes a GoogleAdsLink on a property */
        await gapi.client.analyticsadmin.properties.googleAdsLinks.delete({
            name: "Test string",
        });
        /** Lists GoogleAdsLinks on a property. */
        await gapi.client.analyticsadmin.properties.googleAdsLinks.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a GoogleAdsLink on a property */
        await gapi.client.analyticsadmin.properties.googleAdsLinks.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            adsPersonalizationEnabled: true,
            canManageClients: true,
            createTime: "Test string",
            customerId: "Test string",
            emailAddress: "Test string",
            name: "Test string",
            parent: "Test string",
            updateTime: "Test string",
        });
        /** Creates an iOS app data stream with the specified location and attributes. */
        await gapi.client.analyticsadmin.properties.iosAppDataStreams.create({
            parent: "Test string",
        }, {
            bundleId: "Test string",
            createTime: "Test string",
            displayName: "Test string",
            firebaseAppId: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Deletes an iOS app stream on a property. */
        await gapi.client.analyticsadmin.properties.iosAppDataStreams.delete({
            name: "Test string",
        });
        /** Lookup for a single IosAppDataStream Throws "Target not found" if no such iOS app data stream found, or if the caller does not have permissions to access it. */
        await gapi.client.analyticsadmin.properties.iosAppDataStreams.get({
            name: "Test string",
        });
        /**
         * Returns child iOS app data streams under the specified parent property. iOS app data streams will be excluded if the caller does not have access. Returns an empty list if no relevant
         * iOS app data streams are found.
         */
        await gapi.client.analyticsadmin.properties.iosAppDataStreams.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates an iOS app stream on a property. */
        await gapi.client.analyticsadmin.properties.iosAppDataStreams.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            bundleId: "Test string",
            createTime: "Test string",
            displayName: "Test string",
            firebaseAppId: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /**
         * Lists all user links on an account or property, including implicit ones that come from effective permissions granted by groups or organization admin roles. If a returned user link does
         * not have direct permissions, they cannot be removed from the account or property directly with the DeleteUserLink command. They have to be removed from the group/etc that gives them
         * permissions, which is currently only usable/discoverable in the GA or GMP UIs.
         */
        await gapi.client.analyticsadmin.properties.userLinks.audit({
            parent: "Test string",
        }, {
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Creates information about multiple users' links to an account or property. This method is transactional. If any UserLink cannot be created, none of the UserLinks will be created. */
        await gapi.client.analyticsadmin.properties.userLinks.batchCreate({
            parent: "Test string",
        }, {
            notifyNewUsers: true,
            requests: [
                {
                    notifyNewUser: true,
                    parent: "Test string",
                    userLink: {
                        directRoles: [
                            "Test string"                        ],
                        emailAddress: "Test string",
                        name: "Test string",
                    },
                }            ],
        });
        /** Deletes information about multiple users' links to an account or property. */
        await gapi.client.analyticsadmin.properties.userLinks.batchDelete({
            parent: "Test string",
        }, {
            requests: [
                {
                    name: "Test string",
                }            ],
        });
        /** Gets information about multiple users' links to an account or property. */
        await gapi.client.analyticsadmin.properties.userLinks.batchGet({
            names: "Test string",
            parent: "Test string",
        });
        /** Updates information about multiple users' links to an account or property. */
        await gapi.client.analyticsadmin.properties.userLinks.batchUpdate({
            parent: "Test string",
        }, {
            requests: [
                {
                    userLink: {
                        directRoles: [
                            "Test string"                        ],
                        emailAddress: "Test string",
                        name: "Test string",
                    },
                }            ],
        });
        /**
         * Creates a user link on an account or property. If the user with the specified email already has permissions on the account or property, then the user's existing permissions will be
         * unioned with the permissions specified in the new UserLink.
         */
        await gapi.client.analyticsadmin.properties.userLinks.create({
            notifyNewUser: true,
            parent: "Test string",
        }, {
            directRoles: [
                "Test string"            ],
            emailAddress: "Test string",
            name: "Test string",
        });
        /** Deletes a user link on an account or property. */
        await gapi.client.analyticsadmin.properties.userLinks.delete({
            name: "Test string",
        });
        /** Gets information about a user's link to an account or property. */
        await gapi.client.analyticsadmin.properties.userLinks.get({
            name: "Test string",
        });
        /** Lists all user links on an account or property. */
        await gapi.client.analyticsadmin.properties.userLinks.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a user link on an account or property. */
        await gapi.client.analyticsadmin.properties.userLinks.patch({
            name: "Test string",
        }, {
            directRoles: [
                "Test string"            ],
            emailAddress: "Test string",
            name: "Test string",
        });
        /** Creates a web stream with the specified location and attributes. */
        await gapi.client.analyticsadmin.properties.webDataStreams.create({
            parent: "Test string",
        }, {
            createTime: "Test string",
            defaultUri: "Test string",
            displayName: "Test string",
            firebaseAppId: "Test string",
            measurementId: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Deletes a web stream on a property. */
        await gapi.client.analyticsadmin.properties.webDataStreams.delete({
            name: "Test string",
        });
        /** Lookup for a single WebDataStream Throws "Target not found" if no such web data stream found, or if the caller does not have permissions to access it. */
        await gapi.client.analyticsadmin.properties.webDataStreams.get({
            name: "Test string",
        });
        /** Returns the singleton enhanced measurement settings for this web stream. Note that the stream must enable enhanced measurement for these settings to take effect. */
        await gapi.client.analyticsadmin.properties.webDataStreams.getEnhancedMeasurementSettings({
            name: "Test string",
        });
        /** Returns the Site Tag for the specified web stream. Site Tags are immutable singletons. */
        await gapi.client.analyticsadmin.properties.webDataStreams.getGlobalSiteTag({
            name: "Test string",
        });
        /**
         * Returns child web data streams under the specified parent property. Web data streams will be excluded if the caller does not have access. Returns an empty list if no relevant web data
         * streams are found.
         */
        await gapi.client.analyticsadmin.properties.webDataStreams.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a web stream on a property. */
        await gapi.client.analyticsadmin.properties.webDataStreams.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            defaultUri: "Test string",
            displayName: "Test string",
            firebaseAppId: "Test string",
            measurementId: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Updates the singleton enhanced measurement settings for this web stream. Note that the stream must enable enhanced measurement for these settings to take effect. */
        await gapi.client.analyticsadmin.properties.webDataStreams.updateEnhancedMeasurementSettings({
            name: "Test string",
            updateMask: "Test string",
        }, {
            articlesAndBlogsEnabled: true,
            contentViewsEnabled: true,
            dataTaggedElementClicksEnabled: true,
            excludedDomains: "Test string",
            fileDownloadsEnabled: true,
            formInteractionsEnabled: true,
            name: "Test string",
            outboundClicksEnabled: true,
            pageChangesEnabled: true,
            pageLoadsEnabled: true,
            pageViewsEnabled: true,
            productsAndEcommerceEnabled: true,
            scrollsEnabled: true,
            searchQueryParameter: "Test string",
            siteSearchEnabled: true,
            streamEnabled: true,
            urlQueryParameter: "Test string",
            videoEngagementEnabled: true,
        });
        /**
         * Marks target Property as soft-deleted (ie: "trashed") and returns it. This API does not have a method to restore soft-deleted properties. However, they can be restored using the Trash
         * Can UI. If the properties are not restored before the expiration time, the Property and all child resources (eg: GoogleAdsLinks, Streams, UserLinks) will be permanently purged.
         * https://support.google.com/analytics/answer/6154772 Returns an error if the target is not found, or is not an GA4 Property.
         */
        await gapi.client.analyticsadmin.properties.delete({
            name: "Test string",
        });
        /** Creates an android app stream with the specified location and attributes. */
        await gapi.client.analyticsadmin.properties.androidAppDataStreams.create({
            parent: "Test string",
        }, {
            createTime: "Test string",
            displayName: "Test string",
            firebaseAppId: "Test string",
            name: "Test string",
            packageName: "Test string",
            updateTime: "Test string",
        });
        /** Deletes an android app stream on a property. */
        await gapi.client.analyticsadmin.properties.androidAppDataStreams.delete({
            name: "Test string",
        });
        /** Lookup for a single AndroidAppDataStream Throws "Target not found" if no such android app data stream found, or if the caller does not have permissions to access it. */
        await gapi.client.analyticsadmin.properties.androidAppDataStreams.get({
            name: "Test string",
        });
        /**
         * Returns child android app streams under the specified parent property. Android app streams will be excluded if the caller does not have access. Returns an empty list if no relevant
         * android app streams are found.
         */
        await gapi.client.analyticsadmin.properties.androidAppDataStreams.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates an android app stream on a property. */
        await gapi.client.analyticsadmin.properties.androidAppDataStreams.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            displayName: "Test string",
            firebaseAppId: "Test string",
            name: "Test string",
            packageName: "Test string",
            updateTime: "Test string",
        });
        /** Creates a FirebaseLink. Properties can have at most one FirebaseLink. */
        await gapi.client.analyticsadmin.properties.firebaseLinks.create({
            parent: "Test string",
        }, {
            createTime: "Test string",
            maximumUserAccess: "Test string",
            name: "Test string",
            project: "Test string",
        });
        /** Deletes a FirebaseLink on a property */
        await gapi.client.analyticsadmin.properties.firebaseLinks.delete({
            name: "Test string",
        });
        /** Lists FirebaseLinks on a property. Properties can have at most one FirebaseLink. */
        await gapi.client.analyticsadmin.properties.firebaseLinks.list({
            parent: "Test string",
        });
        /** Updates a FirebaseLink on a property */
        await gapi.client.analyticsadmin.properties.firebaseLinks.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            maximumUserAccess: "Test string",
            name: "Test string",
            project: "Test string",
        });
        /** Creates a GoogleAdsLink. */
        await gapi.client.analyticsadmin.properties.googleAdsLinks.create({
            parent: "Test string",
        }, {
            adsPersonalizationEnabled: true,
            canManageClients: true,
            createTime: "Test string",
            customerId: "Test string",
            emailAddress: "Test string",
            name: "Test string",
            parent: "Test string",
            updateTime: "Test string",
        });
        /** Deletes a GoogleAdsLink on a property */
        await gapi.client.analyticsadmin.properties.googleAdsLinks.delete({
            name: "Test string",
        });
        /** Lists GoogleAdsLinks on a property. */
        await gapi.client.analyticsadmin.properties.googleAdsLinks.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a GoogleAdsLink on a property */
        await gapi.client.analyticsadmin.properties.googleAdsLinks.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            adsPersonalizationEnabled: true,
            canManageClients: true,
            createTime: "Test string",
            customerId: "Test string",
            emailAddress: "Test string",
            name: "Test string",
            parent: "Test string",
            updateTime: "Test string",
        });
        /** Creates an iOS app data stream with the specified location and attributes. */
        await gapi.client.analyticsadmin.properties.iosAppDataStreams.create({
            parent: "Test string",
        }, {
            bundleId: "Test string",
            createTime: "Test string",
            displayName: "Test string",
            firebaseAppId: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Deletes an iOS app stream on a property. */
        await gapi.client.analyticsadmin.properties.iosAppDataStreams.delete({
            name: "Test string",
        });
        /** Lookup for a single IosAppDataStream Throws "Target not found" if no such iOS app data stream found, or if the caller does not have permissions to access it. */
        await gapi.client.analyticsadmin.properties.iosAppDataStreams.get({
            name: "Test string",
        });
        /**
         * Returns child iOS app data streams under the specified parent property. iOS app data streams will be excluded if the caller does not have access. Returns an empty list if no relevant
         * iOS app data streams are found.
         */
        await gapi.client.analyticsadmin.properties.iosAppDataStreams.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates an iOS app stream on a property. */
        await gapi.client.analyticsadmin.properties.iosAppDataStreams.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            bundleId: "Test string",
            createTime: "Test string",
            displayName: "Test string",
            firebaseAppId: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /**
         * Lists all user links on an account or property, including implicit ones that come from effective permissions granted by groups or organization admin roles. If a returned user link does
         * not have direct permissions, they cannot be removed from the account or property directly with the DeleteUserLink command. They have to be removed from the group/etc that gives them
         * permissions, which is currently only usable/discoverable in the GA or GMP UIs.
         */
        await gapi.client.analyticsadmin.properties.userLinks.audit({
            parent: "Test string",
        }, {
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Creates information about multiple users' links to an account or property. This method is transactional. If any UserLink cannot be created, none of the UserLinks will be created. */
        await gapi.client.analyticsadmin.properties.userLinks.batchCreate({
            parent: "Test string",
        }, {
            notifyNewUsers: true,
            requests: [
                {
                    notifyNewUser: true,
                    parent: "Test string",
                    userLink: {
                        directRoles: [
                            "Test string"                        ],
                        emailAddress: "Test string",
                        name: "Test string",
                    },
                }            ],
        });
        /** Deletes information about multiple users' links to an account or property. */
        await gapi.client.analyticsadmin.properties.userLinks.batchDelete({
            parent: "Test string",
        }, {
            requests: [
                {
                    name: "Test string",
                }            ],
        });
        /** Gets information about multiple users' links to an account or property. */
        await gapi.client.analyticsadmin.properties.userLinks.batchGet({
            names: "Test string",
            parent: "Test string",
        });
        /** Updates information about multiple users' links to an account or property. */
        await gapi.client.analyticsadmin.properties.userLinks.batchUpdate({
            parent: "Test string",
        }, {
            requests: [
                {
                    userLink: {
                        directRoles: [
                            "Test string"                        ],
                        emailAddress: "Test string",
                        name: "Test string",
                    },
                }            ],
        });
        /**
         * Creates a user link on an account or property. If the user with the specified email already has permissions on the account or property, then the user's existing permissions will be
         * unioned with the permissions specified in the new UserLink.
         */
        await gapi.client.analyticsadmin.properties.userLinks.create({
            notifyNewUser: true,
            parent: "Test string",
        }, {
            directRoles: [
                "Test string"            ],
            emailAddress: "Test string",
            name: "Test string",
        });
        /** Deletes a user link on an account or property. */
        await gapi.client.analyticsadmin.properties.userLinks.delete({
            name: "Test string",
        });
        /** Gets information about a user's link to an account or property. */
        await gapi.client.analyticsadmin.properties.userLinks.get({
            name: "Test string",
        });
        /** Lists all user links on an account or property. */
        await gapi.client.analyticsadmin.properties.userLinks.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a user link on an account or property. */
        await gapi.client.analyticsadmin.properties.userLinks.patch({
            name: "Test string",
        }, {
            directRoles: [
                "Test string"            ],
            emailAddress: "Test string",
            name: "Test string",
        });
        /** Creates a web stream with the specified location and attributes. */
        await gapi.client.analyticsadmin.properties.webDataStreams.create({
            parent: "Test string",
        }, {
            createTime: "Test string",
            defaultUri: "Test string",
            displayName: "Test string",
            firebaseAppId: "Test string",
            measurementId: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Deletes a web stream on a property. */
        await gapi.client.analyticsadmin.properties.webDataStreams.delete({
            name: "Test string",
        });
        /** Lookup for a single WebDataStream Throws "Target not found" if no such web data stream found, or if the caller does not have permissions to access it. */
        await gapi.client.analyticsadmin.properties.webDataStreams.get({
            name: "Test string",
        });
        /** Returns the singleton enhanced measurement settings for this web stream. Note that the stream must enable enhanced measurement for these settings to take effect. */
        await gapi.client.analyticsadmin.properties.webDataStreams.getEnhancedMeasurementSettings({
            name: "Test string",
        });
        /** Returns the Site Tag for the specified web stream. Site Tags are immutable singletons. */
        await gapi.client.analyticsadmin.properties.webDataStreams.getGlobalSiteTag({
            name: "Test string",
        });
        /**
         * Returns child web data streams under the specified parent property. Web data streams will be excluded if the caller does not have access. Returns an empty list if no relevant web data
         * streams are found.
         */
        await gapi.client.analyticsadmin.properties.webDataStreams.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a web stream on a property. */
        await gapi.client.analyticsadmin.properties.webDataStreams.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            defaultUri: "Test string",
            displayName: "Test string",
            firebaseAppId: "Test string",
            measurementId: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Updates the singleton enhanced measurement settings for this web stream. Note that the stream must enable enhanced measurement for these settings to take effect. */
        await gapi.client.analyticsadmin.properties.webDataStreams.updateEnhancedMeasurementSettings({
            name: "Test string",
            updateMask: "Test string",
        }, {
            articlesAndBlogsEnabled: true,
            contentViewsEnabled: true,
            dataTaggedElementClicksEnabled: true,
            excludedDomains: "Test string",
            fileDownloadsEnabled: true,
            formInteractionsEnabled: true,
            name: "Test string",
            outboundClicksEnabled: true,
            pageChangesEnabled: true,
            pageLoadsEnabled: true,
            pageViewsEnabled: true,
            productsAndEcommerceEnabled: true,
            scrollsEnabled: true,
            searchQueryParameter: "Test string",
            siteSearchEnabled: true,
            streamEnabled: true,
            urlQueryParameter: "Test string",
            videoEngagementEnabled: true,
        });
        /** Lookup for a single "GA4" Property. Throws "Target not found" if no such property found, if property is not of the type "GA4", or if caller does not have permissions to access it. */
        await gapi.client.analyticsadmin.properties.get({
            name: "Test string",
        });
        /** Creates an android app stream with the specified location and attributes. */
        await gapi.client.analyticsadmin.properties.androidAppDataStreams.create({
            parent: "Test string",
        }, {
            createTime: "Test string",
            displayName: "Test string",
            firebaseAppId: "Test string",
            name: "Test string",
            packageName: "Test string",
            updateTime: "Test string",
        });
        /** Deletes an android app stream on a property. */
        await gapi.client.analyticsadmin.properties.androidAppDataStreams.delete({
            name: "Test string",
        });
        /** Lookup for a single AndroidAppDataStream Throws "Target not found" if no such android app data stream found, or if the caller does not have permissions to access it. */
        await gapi.client.analyticsadmin.properties.androidAppDataStreams.get({
            name: "Test string",
        });
        /**
         * Returns child android app streams under the specified parent property. Android app streams will be excluded if the caller does not have access. Returns an empty list if no relevant
         * android app streams are found.
         */
        await gapi.client.analyticsadmin.properties.androidAppDataStreams.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates an android app stream on a property. */
        await gapi.client.analyticsadmin.properties.androidAppDataStreams.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            displayName: "Test string",
            firebaseAppId: "Test string",
            name: "Test string",
            packageName: "Test string",
            updateTime: "Test string",
        });
        /** Creates a FirebaseLink. Properties can have at most one FirebaseLink. */
        await gapi.client.analyticsadmin.properties.firebaseLinks.create({
            parent: "Test string",
        }, {
            createTime: "Test string",
            maximumUserAccess: "Test string",
            name: "Test string",
            project: "Test string",
        });
        /** Deletes a FirebaseLink on a property */
        await gapi.client.analyticsadmin.properties.firebaseLinks.delete({
            name: "Test string",
        });
        /** Lists FirebaseLinks on a property. Properties can have at most one FirebaseLink. */
        await gapi.client.analyticsadmin.properties.firebaseLinks.list({
            parent: "Test string",
        });
        /** Updates a FirebaseLink on a property */
        await gapi.client.analyticsadmin.properties.firebaseLinks.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            maximumUserAccess: "Test string",
            name: "Test string",
            project: "Test string",
        });
        /** Creates a GoogleAdsLink. */
        await gapi.client.analyticsadmin.properties.googleAdsLinks.create({
            parent: "Test string",
        }, {
            adsPersonalizationEnabled: true,
            canManageClients: true,
            createTime: "Test string",
            customerId: "Test string",
            emailAddress: "Test string",
            name: "Test string",
            parent: "Test string",
            updateTime: "Test string",
        });
        /** Deletes a GoogleAdsLink on a property */
        await gapi.client.analyticsadmin.properties.googleAdsLinks.delete({
            name: "Test string",
        });
        /** Lists GoogleAdsLinks on a property. */
        await gapi.client.analyticsadmin.properties.googleAdsLinks.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a GoogleAdsLink on a property */
        await gapi.client.analyticsadmin.properties.googleAdsLinks.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            adsPersonalizationEnabled: true,
            canManageClients: true,
            createTime: "Test string",
            customerId: "Test string",
            emailAddress: "Test string",
            name: "Test string",
            parent: "Test string",
            updateTime: "Test string",
        });
        /** Creates an iOS app data stream with the specified location and attributes. */
        await gapi.client.analyticsadmin.properties.iosAppDataStreams.create({
            parent: "Test string",
        }, {
            bundleId: "Test string",
            createTime: "Test string",
            displayName: "Test string",
            firebaseAppId: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Deletes an iOS app stream on a property. */
        await gapi.client.analyticsadmin.properties.iosAppDataStreams.delete({
            name: "Test string",
        });
        /** Lookup for a single IosAppDataStream Throws "Target not found" if no such iOS app data stream found, or if the caller does not have permissions to access it. */
        await gapi.client.analyticsadmin.properties.iosAppDataStreams.get({
            name: "Test string",
        });
        /**
         * Returns child iOS app data streams under the specified parent property. iOS app data streams will be excluded if the caller does not have access. Returns an empty list if no relevant
         * iOS app data streams are found.
         */
        await gapi.client.analyticsadmin.properties.iosAppDataStreams.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates an iOS app stream on a property. */
        await gapi.client.analyticsadmin.properties.iosAppDataStreams.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            bundleId: "Test string",
            createTime: "Test string",
            displayName: "Test string",
            firebaseAppId: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /**
         * Lists all user links on an account or property, including implicit ones that come from effective permissions granted by groups or organization admin roles. If a returned user link does
         * not have direct permissions, they cannot be removed from the account or property directly with the DeleteUserLink command. They have to be removed from the group/etc that gives them
         * permissions, which is currently only usable/discoverable in the GA or GMP UIs.
         */
        await gapi.client.analyticsadmin.properties.userLinks.audit({
            parent: "Test string",
        }, {
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Creates information about multiple users' links to an account or property. This method is transactional. If any UserLink cannot be created, none of the UserLinks will be created. */
        await gapi.client.analyticsadmin.properties.userLinks.batchCreate({
            parent: "Test string",
        }, {
            notifyNewUsers: true,
            requests: [
                {
                    notifyNewUser: true,
                    parent: "Test string",
                    userLink: {
                        directRoles: [
                            "Test string"                        ],
                        emailAddress: "Test string",
                        name: "Test string",
                    },
                }            ],
        });
        /** Deletes information about multiple users' links to an account or property. */
        await gapi.client.analyticsadmin.properties.userLinks.batchDelete({
            parent: "Test string",
        }, {
            requests: [
                {
                    name: "Test string",
                }            ],
        });
        /** Gets information about multiple users' links to an account or property. */
        await gapi.client.analyticsadmin.properties.userLinks.batchGet({
            names: "Test string",
            parent: "Test string",
        });
        /** Updates information about multiple users' links to an account or property. */
        await gapi.client.analyticsadmin.properties.userLinks.batchUpdate({
            parent: "Test string",
        }, {
            requests: [
                {
                    userLink: {
                        directRoles: [
                            "Test string"                        ],
                        emailAddress: "Test string",
                        name: "Test string",
                    },
                }            ],
        });
        /**
         * Creates a user link on an account or property. If the user with the specified email already has permissions on the account or property, then the user's existing permissions will be
         * unioned with the permissions specified in the new UserLink.
         */
        await gapi.client.analyticsadmin.properties.userLinks.create({
            notifyNewUser: true,
            parent: "Test string",
        }, {
            directRoles: [
                "Test string"            ],
            emailAddress: "Test string",
            name: "Test string",
        });
        /** Deletes a user link on an account or property. */
        await gapi.client.analyticsadmin.properties.userLinks.delete({
            name: "Test string",
        });
        /** Gets information about a user's link to an account or property. */
        await gapi.client.analyticsadmin.properties.userLinks.get({
            name: "Test string",
        });
        /** Lists all user links on an account or property. */
        await gapi.client.analyticsadmin.properties.userLinks.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a user link on an account or property. */
        await gapi.client.analyticsadmin.properties.userLinks.patch({
            name: "Test string",
        }, {
            directRoles: [
                "Test string"            ],
            emailAddress: "Test string",
            name: "Test string",
        });
        /** Creates a web stream with the specified location and attributes. */
        await gapi.client.analyticsadmin.properties.webDataStreams.create({
            parent: "Test string",
        }, {
            createTime: "Test string",
            defaultUri: "Test string",
            displayName: "Test string",
            firebaseAppId: "Test string",
            measurementId: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Deletes a web stream on a property. */
        await gapi.client.analyticsadmin.properties.webDataStreams.delete({
            name: "Test string",
        });
        /** Lookup for a single WebDataStream Throws "Target not found" if no such web data stream found, or if the caller does not have permissions to access it. */
        await gapi.client.analyticsadmin.properties.webDataStreams.get({
            name: "Test string",
        });
        /** Returns the singleton enhanced measurement settings for this web stream. Note that the stream must enable enhanced measurement for these settings to take effect. */
        await gapi.client.analyticsadmin.properties.webDataStreams.getEnhancedMeasurementSettings({
            name: "Test string",
        });
        /** Returns the Site Tag for the specified web stream. Site Tags are immutable singletons. */
        await gapi.client.analyticsadmin.properties.webDataStreams.getGlobalSiteTag({
            name: "Test string",
        });
        /**
         * Returns child web data streams under the specified parent property. Web data streams will be excluded if the caller does not have access. Returns an empty list if no relevant web data
         * streams are found.
         */
        await gapi.client.analyticsadmin.properties.webDataStreams.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a web stream on a property. */
        await gapi.client.analyticsadmin.properties.webDataStreams.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            defaultUri: "Test string",
            displayName: "Test string",
            firebaseAppId: "Test string",
            measurementId: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Updates the singleton enhanced measurement settings for this web stream. Note that the stream must enable enhanced measurement for these settings to take effect. */
        await gapi.client.analyticsadmin.properties.webDataStreams.updateEnhancedMeasurementSettings({
            name: "Test string",
            updateMask: "Test string",
        }, {
            articlesAndBlogsEnabled: true,
            contentViewsEnabled: true,
            dataTaggedElementClicksEnabled: true,
            excludedDomains: "Test string",
            fileDownloadsEnabled: true,
            formInteractionsEnabled: true,
            name: "Test string",
            outboundClicksEnabled: true,
            pageChangesEnabled: true,
            pageLoadsEnabled: true,
            pageViewsEnabled: true,
            productsAndEcommerceEnabled: true,
            scrollsEnabled: true,
            searchQueryParameter: "Test string",
            siteSearchEnabled: true,
            streamEnabled: true,
            urlQueryParameter: "Test string",
            videoEngagementEnabled: true,
        });
        /**
         * Returns child Properties under the specified parent Account. Only "GA4" properties will be returned. Properties will be excluded if the caller does not have access. Soft-deleted (ie:
         * "trashed") properties are excluded by default. Returns an empty list if no relevant properties are found.
         */
        await gapi.client.analyticsadmin.properties.list({
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            showDeleted: true,
        });
        /** Creates an android app stream with the specified location and attributes. */
        await gapi.client.analyticsadmin.properties.androidAppDataStreams.create({
            parent: "Test string",
        }, {
            createTime: "Test string",
            displayName: "Test string",
            firebaseAppId: "Test string",
            name: "Test string",
            packageName: "Test string",
            updateTime: "Test string",
        });
        /** Deletes an android app stream on a property. */
        await gapi.client.analyticsadmin.properties.androidAppDataStreams.delete({
            name: "Test string",
        });
        /** Lookup for a single AndroidAppDataStream Throws "Target not found" if no such android app data stream found, or if the caller does not have permissions to access it. */
        await gapi.client.analyticsadmin.properties.androidAppDataStreams.get({
            name: "Test string",
        });
        /**
         * Returns child android app streams under the specified parent property. Android app streams will be excluded if the caller does not have access. Returns an empty list if no relevant
         * android app streams are found.
         */
        await gapi.client.analyticsadmin.properties.androidAppDataStreams.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates an android app stream on a property. */
        await gapi.client.analyticsadmin.properties.androidAppDataStreams.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            displayName: "Test string",
            firebaseAppId: "Test string",
            name: "Test string",
            packageName: "Test string",
            updateTime: "Test string",
        });
        /** Creates a FirebaseLink. Properties can have at most one FirebaseLink. */
        await gapi.client.analyticsadmin.properties.firebaseLinks.create({
            parent: "Test string",
        }, {
            createTime: "Test string",
            maximumUserAccess: "Test string",
            name: "Test string",
            project: "Test string",
        });
        /** Deletes a FirebaseLink on a property */
        await gapi.client.analyticsadmin.properties.firebaseLinks.delete({
            name: "Test string",
        });
        /** Lists FirebaseLinks on a property. Properties can have at most one FirebaseLink. */
        await gapi.client.analyticsadmin.properties.firebaseLinks.list({
            parent: "Test string",
        });
        /** Updates a FirebaseLink on a property */
        await gapi.client.analyticsadmin.properties.firebaseLinks.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            maximumUserAccess: "Test string",
            name: "Test string",
            project: "Test string",
        });
        /** Creates a GoogleAdsLink. */
        await gapi.client.analyticsadmin.properties.googleAdsLinks.create({
            parent: "Test string",
        }, {
            adsPersonalizationEnabled: true,
            canManageClients: true,
            createTime: "Test string",
            customerId: "Test string",
            emailAddress: "Test string",
            name: "Test string",
            parent: "Test string",
            updateTime: "Test string",
        });
        /** Deletes a GoogleAdsLink on a property */
        await gapi.client.analyticsadmin.properties.googleAdsLinks.delete({
            name: "Test string",
        });
        /** Lists GoogleAdsLinks on a property. */
        await gapi.client.analyticsadmin.properties.googleAdsLinks.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a GoogleAdsLink on a property */
        await gapi.client.analyticsadmin.properties.googleAdsLinks.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            adsPersonalizationEnabled: true,
            canManageClients: true,
            createTime: "Test string",
            customerId: "Test string",
            emailAddress: "Test string",
            name: "Test string",
            parent: "Test string",
            updateTime: "Test string",
        });
        /** Creates an iOS app data stream with the specified location and attributes. */
        await gapi.client.analyticsadmin.properties.iosAppDataStreams.create({
            parent: "Test string",
        }, {
            bundleId: "Test string",
            createTime: "Test string",
            displayName: "Test string",
            firebaseAppId: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Deletes an iOS app stream on a property. */
        await gapi.client.analyticsadmin.properties.iosAppDataStreams.delete({
            name: "Test string",
        });
        /** Lookup for a single IosAppDataStream Throws "Target not found" if no such iOS app data stream found, or if the caller does not have permissions to access it. */
        await gapi.client.analyticsadmin.properties.iosAppDataStreams.get({
            name: "Test string",
        });
        /**
         * Returns child iOS app data streams under the specified parent property. iOS app data streams will be excluded if the caller does not have access. Returns an empty list if no relevant
         * iOS app data streams are found.
         */
        await gapi.client.analyticsadmin.properties.iosAppDataStreams.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates an iOS app stream on a property. */
        await gapi.client.analyticsadmin.properties.iosAppDataStreams.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            bundleId: "Test string",
            createTime: "Test string",
            displayName: "Test string",
            firebaseAppId: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /**
         * Lists all user links on an account or property, including implicit ones that come from effective permissions granted by groups or organization admin roles. If a returned user link does
         * not have direct permissions, they cannot be removed from the account or property directly with the DeleteUserLink command. They have to be removed from the group/etc that gives them
         * permissions, which is currently only usable/discoverable in the GA or GMP UIs.
         */
        await gapi.client.analyticsadmin.properties.userLinks.audit({
            parent: "Test string",
        }, {
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Creates information about multiple users' links to an account or property. This method is transactional. If any UserLink cannot be created, none of the UserLinks will be created. */
        await gapi.client.analyticsadmin.properties.userLinks.batchCreate({
            parent: "Test string",
        }, {
            notifyNewUsers: true,
            requests: [
                {
                    notifyNewUser: true,
                    parent: "Test string",
                    userLink: {
                        directRoles: [
                            "Test string"                        ],
                        emailAddress: "Test string",
                        name: "Test string",
                    },
                }            ],
        });
        /** Deletes information about multiple users' links to an account or property. */
        await gapi.client.analyticsadmin.properties.userLinks.batchDelete({
            parent: "Test string",
        }, {
            requests: [
                {
                    name: "Test string",
                }            ],
        });
        /** Gets information about multiple users' links to an account or property. */
        await gapi.client.analyticsadmin.properties.userLinks.batchGet({
            names: "Test string",
            parent: "Test string",
        });
        /** Updates information about multiple users' links to an account or property. */
        await gapi.client.analyticsadmin.properties.userLinks.batchUpdate({
            parent: "Test string",
        }, {
            requests: [
                {
                    userLink: {
                        directRoles: [
                            "Test string"                        ],
                        emailAddress: "Test string",
                        name: "Test string",
                    },
                }            ],
        });
        /**
         * Creates a user link on an account or property. If the user with the specified email already has permissions on the account or property, then the user's existing permissions will be
         * unioned with the permissions specified in the new UserLink.
         */
        await gapi.client.analyticsadmin.properties.userLinks.create({
            notifyNewUser: true,
            parent: "Test string",
        }, {
            directRoles: [
                "Test string"            ],
            emailAddress: "Test string",
            name: "Test string",
        });
        /** Deletes a user link on an account or property. */
        await gapi.client.analyticsadmin.properties.userLinks.delete({
            name: "Test string",
        });
        /** Gets information about a user's link to an account or property. */
        await gapi.client.analyticsadmin.properties.userLinks.get({
            name: "Test string",
        });
        /** Lists all user links on an account or property. */
        await gapi.client.analyticsadmin.properties.userLinks.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a user link on an account or property. */
        await gapi.client.analyticsadmin.properties.userLinks.patch({
            name: "Test string",
        }, {
            directRoles: [
                "Test string"            ],
            emailAddress: "Test string",
            name: "Test string",
        });
        /** Creates a web stream with the specified location and attributes. */
        await gapi.client.analyticsadmin.properties.webDataStreams.create({
            parent: "Test string",
        }, {
            createTime: "Test string",
            defaultUri: "Test string",
            displayName: "Test string",
            firebaseAppId: "Test string",
            measurementId: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Deletes a web stream on a property. */
        await gapi.client.analyticsadmin.properties.webDataStreams.delete({
            name: "Test string",
        });
        /** Lookup for a single WebDataStream Throws "Target not found" if no such web data stream found, or if the caller does not have permissions to access it. */
        await gapi.client.analyticsadmin.properties.webDataStreams.get({
            name: "Test string",
        });
        /** Returns the singleton enhanced measurement settings for this web stream. Note that the stream must enable enhanced measurement for these settings to take effect. */
        await gapi.client.analyticsadmin.properties.webDataStreams.getEnhancedMeasurementSettings({
            name: "Test string",
        });
        /** Returns the Site Tag for the specified web stream. Site Tags are immutable singletons. */
        await gapi.client.analyticsadmin.properties.webDataStreams.getGlobalSiteTag({
            name: "Test string",
        });
        /**
         * Returns child web data streams under the specified parent property. Web data streams will be excluded if the caller does not have access. Returns an empty list if no relevant web data
         * streams are found.
         */
        await gapi.client.analyticsadmin.properties.webDataStreams.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a web stream on a property. */
        await gapi.client.analyticsadmin.properties.webDataStreams.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            defaultUri: "Test string",
            displayName: "Test string",
            firebaseAppId: "Test string",
            measurementId: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Updates the singleton enhanced measurement settings for this web stream. Note that the stream must enable enhanced measurement for these settings to take effect. */
        await gapi.client.analyticsadmin.properties.webDataStreams.updateEnhancedMeasurementSettings({
            name: "Test string",
            updateMask: "Test string",
        }, {
            articlesAndBlogsEnabled: true,
            contentViewsEnabled: true,
            dataTaggedElementClicksEnabled: true,
            excludedDomains: "Test string",
            fileDownloadsEnabled: true,
            formInteractionsEnabled: true,
            name: "Test string",
            outboundClicksEnabled: true,
            pageChangesEnabled: true,
            pageLoadsEnabled: true,
            pageViewsEnabled: true,
            productsAndEcommerceEnabled: true,
            scrollsEnabled: true,
            searchQueryParameter: "Test string",
            siteSearchEnabled: true,
            streamEnabled: true,
            urlQueryParameter: "Test string",
            videoEngagementEnabled: true,
        });
        /** Updates a property. */
        await gapi.client.analyticsadmin.properties.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            currencyCode: "Test string",
            deleted: true,
            displayName: "Test string",
            industryCategory: "Test string",
            name: "Test string",
            parent: "Test string",
            timeZone: "Test string",
            updateTime: "Test string",
        });
        /** Creates an android app stream with the specified location and attributes. */
        await gapi.client.analyticsadmin.properties.androidAppDataStreams.create({
            parent: "Test string",
        }, {
            createTime: "Test string",
            displayName: "Test string",
            firebaseAppId: "Test string",
            name: "Test string",
            packageName: "Test string",
            updateTime: "Test string",
        });
        /** Deletes an android app stream on a property. */
        await gapi.client.analyticsadmin.properties.androidAppDataStreams.delete({
            name: "Test string",
        });
        /** Lookup for a single AndroidAppDataStream Throws "Target not found" if no such android app data stream found, or if the caller does not have permissions to access it. */
        await gapi.client.analyticsadmin.properties.androidAppDataStreams.get({
            name: "Test string",
        });
        /**
         * Returns child android app streams under the specified parent property. Android app streams will be excluded if the caller does not have access. Returns an empty list if no relevant
         * android app streams are found.
         */
        await gapi.client.analyticsadmin.properties.androidAppDataStreams.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates an android app stream on a property. */
        await gapi.client.analyticsadmin.properties.androidAppDataStreams.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            displayName: "Test string",
            firebaseAppId: "Test string",
            name: "Test string",
            packageName: "Test string",
            updateTime: "Test string",
        });
        /** Creates a FirebaseLink. Properties can have at most one FirebaseLink. */
        await gapi.client.analyticsadmin.properties.firebaseLinks.create({
            parent: "Test string",
        }, {
            createTime: "Test string",
            maximumUserAccess: "Test string",
            name: "Test string",
            project: "Test string",
        });
        /** Deletes a FirebaseLink on a property */
        await gapi.client.analyticsadmin.properties.firebaseLinks.delete({
            name: "Test string",
        });
        /** Lists FirebaseLinks on a property. Properties can have at most one FirebaseLink. */
        await gapi.client.analyticsadmin.properties.firebaseLinks.list({
            parent: "Test string",
        });
        /** Updates a FirebaseLink on a property */
        await gapi.client.analyticsadmin.properties.firebaseLinks.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            maximumUserAccess: "Test string",
            name: "Test string",
            project: "Test string",
        });
        /** Creates a GoogleAdsLink. */
        await gapi.client.analyticsadmin.properties.googleAdsLinks.create({
            parent: "Test string",
        }, {
            adsPersonalizationEnabled: true,
            canManageClients: true,
            createTime: "Test string",
            customerId: "Test string",
            emailAddress: "Test string",
            name: "Test string",
            parent: "Test string",
            updateTime: "Test string",
        });
        /** Deletes a GoogleAdsLink on a property */
        await gapi.client.analyticsadmin.properties.googleAdsLinks.delete({
            name: "Test string",
        });
        /** Lists GoogleAdsLinks on a property. */
        await gapi.client.analyticsadmin.properties.googleAdsLinks.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a GoogleAdsLink on a property */
        await gapi.client.analyticsadmin.properties.googleAdsLinks.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            adsPersonalizationEnabled: true,
            canManageClients: true,
            createTime: "Test string",
            customerId: "Test string",
            emailAddress: "Test string",
            name: "Test string",
            parent: "Test string",
            updateTime: "Test string",
        });
        /** Creates an iOS app data stream with the specified location and attributes. */
        await gapi.client.analyticsadmin.properties.iosAppDataStreams.create({
            parent: "Test string",
        }, {
            bundleId: "Test string",
            createTime: "Test string",
            displayName: "Test string",
            firebaseAppId: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Deletes an iOS app stream on a property. */
        await gapi.client.analyticsadmin.properties.iosAppDataStreams.delete({
            name: "Test string",
        });
        /** Lookup for a single IosAppDataStream Throws "Target not found" if no such iOS app data stream found, or if the caller does not have permissions to access it. */
        await gapi.client.analyticsadmin.properties.iosAppDataStreams.get({
            name: "Test string",
        });
        /**
         * Returns child iOS app data streams under the specified parent property. iOS app data streams will be excluded if the caller does not have access. Returns an empty list if no relevant
         * iOS app data streams are found.
         */
        await gapi.client.analyticsadmin.properties.iosAppDataStreams.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates an iOS app stream on a property. */
        await gapi.client.analyticsadmin.properties.iosAppDataStreams.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            bundleId: "Test string",
            createTime: "Test string",
            displayName: "Test string",
            firebaseAppId: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /**
         * Lists all user links on an account or property, including implicit ones that come from effective permissions granted by groups or organization admin roles. If a returned user link does
         * not have direct permissions, they cannot be removed from the account or property directly with the DeleteUserLink command. They have to be removed from the group/etc that gives them
         * permissions, which is currently only usable/discoverable in the GA or GMP UIs.
         */
        await gapi.client.analyticsadmin.properties.userLinks.audit({
            parent: "Test string",
        }, {
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Creates information about multiple users' links to an account or property. This method is transactional. If any UserLink cannot be created, none of the UserLinks will be created. */
        await gapi.client.analyticsadmin.properties.userLinks.batchCreate({
            parent: "Test string",
        }, {
            notifyNewUsers: true,
            requests: [
                {
                    notifyNewUser: true,
                    parent: "Test string",
                    userLink: {
                        directRoles: [
                            "Test string"                        ],
                        emailAddress: "Test string",
                        name: "Test string",
                    },
                }            ],
        });
        /** Deletes information about multiple users' links to an account or property. */
        await gapi.client.analyticsadmin.properties.userLinks.batchDelete({
            parent: "Test string",
        }, {
            requests: [
                {
                    name: "Test string",
                }            ],
        });
        /** Gets information about multiple users' links to an account or property. */
        await gapi.client.analyticsadmin.properties.userLinks.batchGet({
            names: "Test string",
            parent: "Test string",
        });
        /** Updates information about multiple users' links to an account or property. */
        await gapi.client.analyticsadmin.properties.userLinks.batchUpdate({
            parent: "Test string",
        }, {
            requests: [
                {
                    userLink: {
                        directRoles: [
                            "Test string"                        ],
                        emailAddress: "Test string",
                        name: "Test string",
                    },
                }            ],
        });
        /**
         * Creates a user link on an account or property. If the user with the specified email already has permissions on the account or property, then the user's existing permissions will be
         * unioned with the permissions specified in the new UserLink.
         */
        await gapi.client.analyticsadmin.properties.userLinks.create({
            notifyNewUser: true,
            parent: "Test string",
        }, {
            directRoles: [
                "Test string"            ],
            emailAddress: "Test string",
            name: "Test string",
        });
        /** Deletes a user link on an account or property. */
        await gapi.client.analyticsadmin.properties.userLinks.delete({
            name: "Test string",
        });
        /** Gets information about a user's link to an account or property. */
        await gapi.client.analyticsadmin.properties.userLinks.get({
            name: "Test string",
        });
        /** Lists all user links on an account or property. */
        await gapi.client.analyticsadmin.properties.userLinks.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a user link on an account or property. */
        await gapi.client.analyticsadmin.properties.userLinks.patch({
            name: "Test string",
        }, {
            directRoles: [
                "Test string"            ],
            emailAddress: "Test string",
            name: "Test string",
        });
        /** Creates a web stream with the specified location and attributes. */
        await gapi.client.analyticsadmin.properties.webDataStreams.create({
            parent: "Test string",
        }, {
            createTime: "Test string",
            defaultUri: "Test string",
            displayName: "Test string",
            firebaseAppId: "Test string",
            measurementId: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Deletes a web stream on a property. */
        await gapi.client.analyticsadmin.properties.webDataStreams.delete({
            name: "Test string",
        });
        /** Lookup for a single WebDataStream Throws "Target not found" if no such web data stream found, or if the caller does not have permissions to access it. */
        await gapi.client.analyticsadmin.properties.webDataStreams.get({
            name: "Test string",
        });
        /** Returns the singleton enhanced measurement settings for this web stream. Note that the stream must enable enhanced measurement for these settings to take effect. */
        await gapi.client.analyticsadmin.properties.webDataStreams.getEnhancedMeasurementSettings({
            name: "Test string",
        });
        /** Returns the Site Tag for the specified web stream. Site Tags are immutable singletons. */
        await gapi.client.analyticsadmin.properties.webDataStreams.getGlobalSiteTag({
            name: "Test string",
        });
        /**
         * Returns child web data streams under the specified parent property. Web data streams will be excluded if the caller does not have access. Returns an empty list if no relevant web data
         * streams are found.
         */
        await gapi.client.analyticsadmin.properties.webDataStreams.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Updates a web stream on a property. */
        await gapi.client.analyticsadmin.properties.webDataStreams.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            defaultUri: "Test string",
            displayName: "Test string",
            firebaseAppId: "Test string",
            measurementId: "Test string",
            name: "Test string",
            updateTime: "Test string",
        });
        /** Updates the singleton enhanced measurement settings for this web stream. Note that the stream must enable enhanced measurement for these settings to take effect. */
        await gapi.client.analyticsadmin.properties.webDataStreams.updateEnhancedMeasurementSettings({
            name: "Test string",
            updateMask: "Test string",
        }, {
            articlesAndBlogsEnabled: true,
            contentViewsEnabled: true,
            dataTaggedElementClicksEnabled: true,
            excludedDomains: "Test string",
            fileDownloadsEnabled: true,
            formInteractionsEnabled: true,
            name: "Test string",
            outboundClicksEnabled: true,
            pageChangesEnabled: true,
            pageLoadsEnabled: true,
            pageViewsEnabled: true,
            productsAndEcommerceEnabled: true,
            scrollsEnabled: true,
            searchQueryParameter: "Test string",
            siteSearchEnabled: true,
            streamEnabled: true,
            urlQueryParameter: "Test string",
            videoEngagementEnabled: true,
        });
    }
});
