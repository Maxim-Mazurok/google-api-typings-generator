/* This is stub file for gapi.client.vault-v1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20250513

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://vault.googleapis.com/$discovery/rest?version=v1',
  );
  /** now we can use gapi.client.vault */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** Manage your eDiscovery data */
    'https://www.googleapis.com/auth/ediscovery',
    /** View your eDiscovery data */
    'https://www.googleapis.com/auth/ediscovery.readonly',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Adds an account as a matter collaborator. */
    await gapi.client.vault.matters.addPermissions(
      {
        matterId: 'Test string',
      },
      {
        ccMe: true,
        matterPermission: {
          accountId: 'Test string',
          role: 'Test string',
        },
        sendEmails: true,
      },
    );
    /** Closes the specified matter. Returns the matter with updated state. */
    await gapi.client.vault.matters.close(
      {
        matterId: 'Test string',
      },
      {},
    );
    /** Counts the accounts processed by the specified query. */
    await gapi.client.vault.matters.count(
      {
        matterId: 'Test string',
      },
      {
        query: {
          accountInfo: {
            emails: ['Test string'],
          },
          calendarOptions: {
            locationQuery: ['Test string'],
            minusWords: ['Test string'],
            peopleQuery: ['Test string'],
            responseStatuses: ['Test string'],
            versionDate: 'Test string',
          },
          corpus: 'Test string',
          dataScope: 'Test string',
          driveDocumentInfo: {
            documentIds: {
              ids: ['Test string'],
            },
          },
          driveOptions: {
            clientSideEncryptedOption: 'Test string',
            includeSharedDrives: true,
            includeTeamDrives: true,
            versionDate: 'Test string',
          },
          endTime: 'Test string',
          geminiOptions: {},
          hangoutsChatInfo: {
            roomId: ['Test string'],
          },
          hangoutsChatOptions: {
            includeRooms: true,
          },
          mailOptions: {
            clientSideEncryptedOption: 'Test string',
            excludeDrafts: true,
          },
          method: 'Test string',
          orgUnitInfo: {
            orgUnitId: 'Test string',
          },
          searchMethod: 'Test string',
          sharedDriveInfo: {
            sharedDriveIds: ['Test string'],
          },
          sitesUrlInfo: {
            urls: ['Test string'],
          },
          startTime: 'Test string',
          teamDriveInfo: {
            teamDriveIds: ['Test string'],
          },
          terms: 'Test string',
          timeZone: 'Test string',
          voiceOptions: {
            coveredData: ['Test string'],
          },
        },
        view: 'Test string',
      },
    );
    /** Creates a matter with the given name and description. The initial state is open, and the owner is the method caller. Returns the created matter with default view. */
    await gapi.client.vault.matters.create(
      {},
      {
        description: 'Test string',
        matterId: 'Test string',
        matterPermissions: [
          {
            accountId: 'Test string',
            role: 'Test string',
          },
        ],
        matterRegion: 'Test string',
        name: 'Test string',
        state: 'Test string',
      },
    );
    /** Deletes the specified matter. Returns the matter with updated state. */
    await gapi.client.vault.matters.delete({
      matterId: 'Test string',
    });
    /** Gets the specified matter. */
    await gapi.client.vault.matters.get({
      matterId: 'Test string',
      view: 'Test string',
    });
    /** Lists matters the requestor has access to. */
    await gapi.client.vault.matters.list({
      pageSize: 42,
      pageToken: 'Test string',
      state: 'Test string',
      view: 'Test string',
    });
    /** Removes an account as a matter collaborator. */
    await gapi.client.vault.matters.removePermissions(
      {
        matterId: 'Test string',
      },
      {
        accountId: 'Test string',
      },
    );
    /** Reopens the specified matter. Returns the matter with updated state. */
    await gapi.client.vault.matters.reopen(
      {
        matterId: 'Test string',
      },
      {},
    );
    /** Undeletes the specified matter. Returns the matter with updated state. */
    await gapi.client.vault.matters.undelete(
      {
        matterId: 'Test string',
      },
      {},
    );
    /** Updates the specified matter. This updates only the name and description of the matter, identified by matter ID. Changes to any other fields are ignored. Returns the default view of the matter. */
    await gapi.client.vault.matters.update(
      {
        matterId: 'Test string',
      },
      {
        description: 'Test string',
        matterId: 'Test string',
        matterPermissions: [
          {
            accountId: 'Test string',
            role: 'Test string',
          },
        ],
        matterRegion: 'Test string',
        name: 'Test string',
        state: 'Test string',
      },
    );
    /** Creates an export. */
    await gapi.client.vault.matters.exports.create(
      {
        matterId: 'Test string',
      },
      {
        cloudStorageSink: {
          files: [
            {
              bucketName: 'Test string',
              md5Hash: 'Test string',
              objectName: 'Test string',
              size: 'Test string',
            },
          ],
        },
        createTime: 'Test string',
        exportOptions: {
          calendarOptions: {
            exportFormat: 'Test string',
          },
          driveOptions: {
            includeAccessInfo: true,
          },
          geminiOptions: {
            exportFormat: 'Test string',
          },
          groupsOptions: {
            exportFormat: 'Test string',
          },
          hangoutsChatOptions: {
            exportFormat: 'Test string',
          },
          mailOptions: {
            exportFormat: 'Test string',
            exportLinkedDriveFiles: true,
            showConfidentialModeContent: true,
            useNewExport: true,
          },
          region: 'Test string',
          voiceOptions: {
            exportFormat: 'Test string',
          },
        },
        id: 'Test string',
        matterId: 'Test string',
        name: 'Test string',
        parentExportId: 'Test string',
        query: {
          accountInfo: {
            emails: ['Test string'],
          },
          calendarOptions: {
            locationQuery: ['Test string'],
            minusWords: ['Test string'],
            peopleQuery: ['Test string'],
            responseStatuses: ['Test string'],
            versionDate: 'Test string',
          },
          corpus: 'Test string',
          dataScope: 'Test string',
          driveDocumentInfo: {
            documentIds: {
              ids: ['Test string'],
            },
          },
          driveOptions: {
            clientSideEncryptedOption: 'Test string',
            includeSharedDrives: true,
            includeTeamDrives: true,
            versionDate: 'Test string',
          },
          endTime: 'Test string',
          geminiOptions: {},
          hangoutsChatInfo: {
            roomId: ['Test string'],
          },
          hangoutsChatOptions: {
            includeRooms: true,
          },
          mailOptions: {
            clientSideEncryptedOption: 'Test string',
            excludeDrafts: true,
          },
          method: 'Test string',
          orgUnitInfo: {
            orgUnitId: 'Test string',
          },
          searchMethod: 'Test string',
          sharedDriveInfo: {
            sharedDriveIds: ['Test string'],
          },
          sitesUrlInfo: {
            urls: ['Test string'],
          },
          startTime: 'Test string',
          teamDriveInfo: {
            teamDriveIds: ['Test string'],
          },
          terms: 'Test string',
          timeZone: 'Test string',
          voiceOptions: {
            coveredData: ['Test string'],
          },
        },
        requester: {
          displayName: 'Test string',
          email: 'Test string',
        },
        stats: {
          exportedArtifactCount: 'Test string',
          sizeInBytes: 'Test string',
          totalArtifactCount: 'Test string',
        },
        status: 'Test string',
      },
    );
    /** Deletes an export. */
    await gapi.client.vault.matters.exports.delete({
      exportId: 'Test string',
      matterId: 'Test string',
    });
    /** Gets an export. */
    await gapi.client.vault.matters.exports.get({
      exportId: 'Test string',
      matterId: 'Test string',
    });
    /** Lists details about the exports in the specified matter. */
    await gapi.client.vault.matters.exports.list({
      matterId: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Adds accounts to a hold. Returns a list of accounts that have been successfully added. Accounts can be added only to an existing account-based hold. */
    await gapi.client.vault.matters.holds.addHeldAccounts(
      {
        holdId: 'Test string',
        matterId: 'Test string',
      },
      {
        accountIds: ['Test string'],
        emails: ['Test string'],
      },
    );
    /** Creates a hold in the specified matter. */
    await gapi.client.vault.matters.holds.create(
      {
        matterId: 'Test string',
      },
      {
        accounts: [
          {
            accountId: 'Test string',
            email: 'Test string',
            firstName: 'Test string',
            holdTime: 'Test string',
            lastName: 'Test string',
          },
        ],
        corpus: 'Test string',
        holdId: 'Test string',
        name: 'Test string',
        orgUnit: {
          holdTime: 'Test string',
          orgUnitId: 'Test string',
        },
        query: {
          calendarQuery: {},
          driveQuery: {
            includeSharedDriveFiles: true,
            includeTeamDriveFiles: true,
          },
          groupsQuery: {
            endTime: 'Test string',
            startTime: 'Test string',
            terms: 'Test string',
          },
          hangoutsChatQuery: {
            includeRooms: true,
          },
          mailQuery: {
            endTime: 'Test string',
            startTime: 'Test string',
            terms: 'Test string',
          },
          voiceQuery: {
            coveredData: ['Test string'],
          },
        },
        updateTime: 'Test string',
      },
    );
    /** Removes the specified hold and releases the accounts or organizational unit covered by the hold. If the data is not preserved by another hold or retention rule, it might be purged. */
    await gapi.client.vault.matters.holds.delete({
      holdId: 'Test string',
      matterId: 'Test string',
    });
    /** Gets the specified hold. */
    await gapi.client.vault.matters.holds.get({
      holdId: 'Test string',
      matterId: 'Test string',
      view: 'Test string',
    });
    /** Lists the holds in a matter. */
    await gapi.client.vault.matters.holds.list({
      matterId: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      view: 'Test string',
    });
    /** Removes the specified accounts from a hold. Returns a list of statuses in the same order as the request. */
    await gapi.client.vault.matters.holds.removeHeldAccounts(
      {
        holdId: 'Test string',
        matterId: 'Test string',
      },
      {
        accountIds: ['Test string'],
      },
    );
    /** Updates the scope (organizational unit or accounts) and query parameters of a hold. You cannot add accounts to a hold that covers an organizational unit, nor can you add organizational units to a hold that covers individual accounts. If you try, the unsupported values are ignored. */
    await gapi.client.vault.matters.holds.update(
      {
        holdId: 'Test string',
        matterId: 'Test string',
      },
      {
        accounts: [
          {
            accountId: 'Test string',
            email: 'Test string',
            firstName: 'Test string',
            holdTime: 'Test string',
            lastName: 'Test string',
          },
        ],
        corpus: 'Test string',
        holdId: 'Test string',
        name: 'Test string',
        orgUnit: {
          holdTime: 'Test string',
          orgUnitId: 'Test string',
        },
        query: {
          calendarQuery: {},
          driveQuery: {
            includeSharedDriveFiles: true,
            includeTeamDriveFiles: true,
          },
          groupsQuery: {
            endTime: 'Test string',
            startTime: 'Test string',
            terms: 'Test string',
          },
          hangoutsChatQuery: {
            includeRooms: true,
          },
          mailQuery: {
            endTime: 'Test string',
            startTime: 'Test string',
            terms: 'Test string',
          },
          voiceQuery: {
            coveredData: ['Test string'],
          },
        },
        updateTime: 'Test string',
      },
    );
    /** Adds an account to a hold. Accounts can be added only to a hold that does not have an organizational unit set. If you try to add an account to an organizational unit-based hold, an error is returned. */
    await gapi.client.vault.matters.holds.accounts.create(
      {
        holdId: 'Test string',
        matterId: 'Test string',
      },
      {
        accountId: 'Test string',
        email: 'Test string',
        firstName: 'Test string',
        holdTime: 'Test string',
        lastName: 'Test string',
      },
    );
    /** Removes an account from a hold. */
    await gapi.client.vault.matters.holds.accounts.delete({
      accountId: 'Test string',
      holdId: 'Test string',
      matterId: 'Test string',
    });
    /** Lists the accounts covered by a hold. This can list only individually-specified accounts covered by the hold. If the hold covers an organizational unit, use the [Admin SDK](https://developers.google.com/admin-sdk/). to list the members of the organizational unit on hold. */
    await gapi.client.vault.matters.holds.accounts.list({
      holdId: 'Test string',
      matterId: 'Test string',
    });
    /** Creates a saved query. */
    await gapi.client.vault.matters.savedQueries.create(
      {
        matterId: 'Test string',
      },
      {
        createTime: 'Test string',
        displayName: 'Test string',
        matterId: 'Test string',
        query: {
          accountInfo: {
            emails: ['Test string'],
          },
          calendarOptions: {
            locationQuery: ['Test string'],
            minusWords: ['Test string'],
            peopleQuery: ['Test string'],
            responseStatuses: ['Test string'],
            versionDate: 'Test string',
          },
          corpus: 'Test string',
          dataScope: 'Test string',
          driveDocumentInfo: {
            documentIds: {
              ids: ['Test string'],
            },
          },
          driveOptions: {
            clientSideEncryptedOption: 'Test string',
            includeSharedDrives: true,
            includeTeamDrives: true,
            versionDate: 'Test string',
          },
          endTime: 'Test string',
          geminiOptions: {},
          hangoutsChatInfo: {
            roomId: ['Test string'],
          },
          hangoutsChatOptions: {
            includeRooms: true,
          },
          mailOptions: {
            clientSideEncryptedOption: 'Test string',
            excludeDrafts: true,
          },
          method: 'Test string',
          orgUnitInfo: {
            orgUnitId: 'Test string',
          },
          searchMethod: 'Test string',
          sharedDriveInfo: {
            sharedDriveIds: ['Test string'],
          },
          sitesUrlInfo: {
            urls: ['Test string'],
          },
          startTime: 'Test string',
          teamDriveInfo: {
            teamDriveIds: ['Test string'],
          },
          terms: 'Test string',
          timeZone: 'Test string',
          voiceOptions: {
            coveredData: ['Test string'],
          },
        },
        savedQueryId: 'Test string',
      },
    );
    /** Deletes the specified saved query. */
    await gapi.client.vault.matters.savedQueries.delete({
      matterId: 'Test string',
      savedQueryId: 'Test string',
    });
    /** Retrieves the specified saved query. */
    await gapi.client.vault.matters.savedQueries.get({
      matterId: 'Test string',
      savedQueryId: 'Test string',
    });
    /** Lists the saved queries in a matter. */
    await gapi.client.vault.matters.savedQueries.list({
      matterId: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of `1`, corresponding to `Code.CANCELLED`. */
    await gapi.client.vault.operations.cancel(
      {
        name: 'Test string',
      },
      {},
    );
    /** Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. */
    await gapi.client.vault.operations.delete({
      name: 'Test string',
    });
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.vault.operations.get({
      name: 'Test string',
    });
    /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
    await gapi.client.vault.operations.list({
      filter: 'Test string',
      name: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
  }
});
